
==================== Raw Cmm ====================
2018-03-16 16:03:17.331324893 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:17.338031291 UTC

[section ""data" . GHC.IO.Handle.Types.$WHandle___closure" {
     GHC.IO.Handle.Types.$WHandle___closure:
         const GHC.IO.Handle.Types.$WHandle___info;
 },
 GHC.IO.Handle.Types.$WHandle___slow() //  [R1]
         { []
         }
     {offset
       c8cuq: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Types.$WHandle___entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.IO.Handle.Types.$WHandle___entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8cuz: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8cuS; else goto c8cuT;
       c8cuS: // global
           R1 = GHC.IO.Handle.Types.$WHandle___closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c8cuT: // global
           I64[Sp - 40] = block_c8cuu_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$WHandle___info" {
     GHC.IO.Handle.Types.$WHandle___info:
         const GHC.IO.Handle.Types.$WHandle___entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const GHC.IO.Handle.Types.$WHandle___slow;
 },
 _c8cuu() //  [R1]
         { []
         }
     {offset
       c8cuu: // global
           I64[Sp] = block_c8cuw_info;
           _s8a6z::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s8a6z::P64;
           if (R1 & 7 != 0) goto u8cv1; else goto c8cux;
       u8cv1: // global
           call _c8cuw(R1) args: 0, res: 0, upd: 0;
       c8cux: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cuu_info" {
     block_c8cuu_info:
         const _c8cuu;
         const 15;
         const 30;
 },
 _c8cuw() //  [R1]
         { []
         }
     {offset
       c8cuw: // global
           I64[Sp] = block_c8cuC_info;
           _s8a6B::P64 = P64[R1 + 7];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _s8a6B::P64;
           if (R1 & 7 != 0) goto u8cv2; else goto c8cuD;
       u8cv2: // global
           call _c8cuC(R1) args: 0, res: 0, upd: 0;
       c8cuD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cuw_info" {
     block_c8cuw_info:
         const _c8cuw;
         const 15;
         const 30;
 },
 _c8cuC() //  [R1]
         { []
         }
     {offset
       c8cuC: // global
           I64[Sp] = block_c8cuH_info;
           _s8a6D::P64 = P64[R1 + 7];
           R1 = P64[Sp + 64];
           P64[Sp + 64] = _s8a6D::P64;
           if (R1 & 7 != 0) goto u8cv3; else goto c8cuI;
       u8cv3: // global
           call _c8cuH(R1) args: 0, res: 0, upd: 0;
       c8cuI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cuC_info" {
     block_c8cuC_info:
         const _c8cuC;
         const 15;
         const 30;
 },
 _c8cuH() //  [R1]
         { []
         }
     {offset
       c8cuH: // global
           I64[Sp] = block_c8cuM_info;
           _s8a6F::P64 = P64[R1 + 7];
           R1 = P64[Sp + 72];
           P64[Sp + 72] = _s8a6F::P64;
           if (R1 & 7 != 0) goto u8cv4; else goto c8cuN;
       u8cv4: // global
           call _c8cuM(R1) args: 0, res: 0, upd: 0;
       c8cuN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cuH_info" {
     block_c8cuH_info:
         const _c8cuH;
         const 15;
         const 30;
 },
 _c8cuM() //  [R1]
         { []
         }
     {offset
       c8cuM: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c8cv0; else goto c8cuZ;
       c8cv0: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8cuZ: // global
           _s8a6H::P64 = P64[R1 + 7];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = _s8a6H::P64;
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = P64[Sp + 104];
           P64[Hp - 8] = P64[Sp + 112];
           P64[Hp] = P64[Sp + 120];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cuM_info" {
     block_c8cuM_info:
         const _c8cuM;
         const 15;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.353587293 UTC

[section ""data" . GHC.IO.Handle.Types.$WFileHandle_closure" {
     GHC.IO.Handle.Types.$WFileHandle_closure:
         const GHC.IO.Handle.Types.$WFileHandle_info;
 },
 GHC.IO.Handle.Types.$WFileHandle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cvS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cvW; else goto c8cvX;
       c8cvW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$WFileHandle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cvX: // global
           I64[Sp - 16] = block_c8cvP_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cw1; else goto c8cvQ;
       u8cw1: // global
           call _c8cvP(R1) args: 0, res: 0, upd: 0;
       c8cvQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$WFileHandle_info" {
     GHC.IO.Handle.Types.$WFileHandle_info:
         const GHC.IO.Handle.Types.$WFileHandle_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cvP() //  [R1]
         { []
         }
     {offset
       c8cvP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8cw0; else goto c8cvZ;
       c8cw0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8cvZ: // global
           _s8a6L::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.IO.Handle.Types.FileHandle_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s8a6L::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cvP_info" {
     block_c8cvP_info:
         const _c8cvP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.359749378 UTC

[section ""data" . GHC.IO.Handle.Types.$WDuplexHandle_closure" {
     GHC.IO.Handle.Types.$WDuplexHandle_closure:
         const GHC.IO.Handle.Types.$WDuplexHandle_info;
 },
 GHC.IO.Handle.Types.$WDuplexHandle_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8cwk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8cwt; else goto c8cwu;
       c8cwt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$WDuplexHandle_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cwu: // global
           I64[Sp - 24] = block_c8cwh_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8cwA; else goto c8cwi;
       u8cwA: // global
           call _c8cwh(R1) args: 0, res: 0, upd: 0;
       c8cwi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$WDuplexHandle_info" {
     GHC.IO.Handle.Types.$WDuplexHandle_info:
         const GHC.IO.Handle.Types.$WDuplexHandle_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8cwh() //  [R1]
         { []
         }
     {offset
       c8cwh: // global
           I64[Sp] = block_c8cwn_info;
           _s8a6Q::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8a6Q::P64;
           if (R1 & 7 != 0) goto u8cwz; else goto c8cwo;
       u8cwz: // global
           call _c8cwn(R1) args: 0, res: 0, upd: 0;
       c8cwo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cwh_info" {
     block_c8cwh_info:
         const _c8cwh;
         const 2;
         const 30;
 },
 _c8cwn() //  [R1]
         { []
         }
     {offset
       c8cwn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8cwy; else goto c8cwx;
       c8cwy: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8cwx: // global
           _s8a6S::P64 = P64[R1 + 7];
           I64[Hp - 24] = GHC.IO.Handle.Types.DuplexHandle_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s8a6S::P64;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cwn_info" {
     block_c8cwn_info:
         const _c8cwn;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.366435212 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType12_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType12_bytes:
         I8[] [99,108,111,115,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.368688122 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType11_closure" {
     GHC.IO.Handle.Types.$fShowHandleType11_closure:
         const GHC.IO.Handle.Types.$fShowHandleType11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType11_entry() //  [R1]
         { []
         }
     {offset
       c8cwY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cwZ; else goto c8cx0;
       c8cwZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cx0: // global
           (_c8cwV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cwV::I64 == 0) goto c8cwX; else goto c8cwW;
       c8cwX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cwW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cwV::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType11_info" {
     GHC.IO.Handle.Types.$fShowHandleType11_info:
         const GHC.IO.Handle.Types.$fShowHandleType11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.372219415 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType10_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType10_bytes:
         I8[] [115,101,109,105,45,99,108,111,115,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.374401716 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType9_closure" {
     GHC.IO.Handle.Types.$fShowHandleType9_closure:
         const GHC.IO.Handle.Types.$fShowHandleType9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType9_entry() //  [R1]
         { []
         }
     {offset
       c8cxf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cxg; else goto c8cxh;
       c8cxg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cxh: // global
           (_c8cxc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cxc::I64 == 0) goto c8cxe; else goto c8cxd;
       c8cxe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cxd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cxc::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType9_info" {
     GHC.IO.Handle.Types.$fShowHandleType9_info:
         const GHC.IO.Handle.Types.$fShowHandleType9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.377981833 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType8_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType8_bytes:
         I8[] [114,101,97,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.380166706 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType7_closure" {
     GHC.IO.Handle.Types.$fShowHandleType7_closure:
         const GHC.IO.Handle.Types.$fShowHandleType7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType7_entry() //  [R1]
         { []
         }
     {offset
       c8cxw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cxx; else goto c8cxy;
       c8cxx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cxy: // global
           (_c8cxt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cxt::I64 == 0) goto c8cxv; else goto c8cxu;
       c8cxv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cxu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cxt::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType7_info" {
     GHC.IO.Handle.Types.$fShowHandleType7_info:
         const GHC.IO.Handle.Types.$fShowHandleType7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.384807979 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType6_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType6_bytes:
         I8[] [119,114,105,116,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.387047051 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType5_closure" {
     GHC.IO.Handle.Types.$fShowHandleType5_closure:
         const GHC.IO.Handle.Types.$fShowHandleType5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType5_entry() //  [R1]
         { []
         }
     {offset
       c8cxN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cxO; else goto c8cxP;
       c8cxO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cxP: // global
           (_c8cxK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cxK::I64 == 0) goto c8cxM; else goto c8cxL;
       c8cxM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cxL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cxK::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType5_info" {
     GHC.IO.Handle.Types.$fShowHandleType5_info:
         const GHC.IO.Handle.Types.$fShowHandleType5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.390596243 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType4_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType4_bytes:
         I8[] [119,114,105,116,97,98,108,101,32,40,97,112,112,101,110,100,41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.392776631 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType3_closure" {
     GHC.IO.Handle.Types.$fShowHandleType3_closure:
         const GHC.IO.Handle.Types.$fShowHandleType3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType3_entry() //  [R1]
         { []
         }
     {offset
       c8cy4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cy5; else goto c8cy6;
       c8cy5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cy6: // global
           (_c8cy1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cy1::I64 == 0) goto c8cy3; else goto c8cy2;
       c8cy3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cy2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cy1::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType3_info" {
     GHC.IO.Handle.Types.$fShowHandleType3_info:
         const GHC.IO.Handle.Types.$fShowHandleType3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.396280174 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType2_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType2_bytes:
         I8[] [114,101,97,100,45,119,114,105,116,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.398933178 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType1_closure" {
     GHC.IO.Handle.Types.$fShowHandleType1_closure:
         const GHC.IO.Handle.Types.$fShowHandleType1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType1_entry() //  [R1]
         { []
         }
     {offset
       c8cyl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cym; else goto c8cyn;
       c8cym: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cyn: // global
           (_c8cyi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cyi::I64 == 0) goto c8cyk; else goto c8cyj;
       c8cyk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cyj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cyi::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType1_info" {
     GHC.IO.Handle.Types.$fShowHandleType1_info:
         const GHC.IO.Handle.Types.$fShowHandleType1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.403671465 UTC

[section ""data" . GHC.IO.Handle.Types.$w$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$w$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cyK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cyL; else goto c8cyM;
       c8cyL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cyM: // global
           I64[Sp - 16] = block_c8cyz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cz5; else goto c8cyA;
       u8cz5: // global
           call _c8cyz(R1) args: 0, res: 0, upd: 0;
       c8cyA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$cshowsPrec_info" {
     GHC.IO.Handle.Types.$w$cshowsPrec_info:
         const GHC.IO.Handle.Types.$w$cshowsPrec_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const S8alj_srt;
 },
 _c8cyz() //  [R1]
         { []
         }
     {offset
       c8cyz: // global
           _s8a6U::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c8cyD;
               case 2 : goto c8cyE;
               case 3 : goto c8cyF;
               case 4 : goto c8cyG;
               case 5 : goto c8cyH;
               case 6 : goto c8cyI;
           }
       c8cyI: // global
           R3 = _s8a6U::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8cyH: // global
           R3 = _s8a6U::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8cyG: // global
           R3 = _s8a6U::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8cyF: // global
           R3 = _s8a6U::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8cyE: // global
           R3 = _s8a6U::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8cyD: // global
           R3 = _s8a6U::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cyz_info" {
     block_c8cyz_info:
         const _c8cyz;
         const 1;
         const 270582939678;
         const S8alj_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.40987047 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_entry() //  [R3,
                                                               R4]
         { []
         }
     {offset
       c8czm: // global
           _s8a6X::P64 = R3;
           R3 = R4;
           R2 = _s8a6X::P64;
           call GHC.IO.Handle.Types.$w$cshowsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S8alj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.414040548 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8czI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8czJ; else goto c8czK;
       c8czJ: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8czK: // global
           I64[Sp - 8] = block_c8czx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8cA3; else goto c8czy;
       u8cA3: // global
           call _c8czx(R1) args: 0, res: 0, upd: 0;
       c8czy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType_$cshow_info" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshow_info:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const S8alj_srt+8;
 },
 _c8czx() //  [R1]
         { []
         }
     {offset
       c8czx: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c8czB;
               case 2 : goto c8czC;
               case 3 : goto c8czD;
               case 4 : goto c8czE;
               case 5 : goto c8czF;
               case 6 : goto c8czG;
           }
       c8czG: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8czF: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8czE: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8czD: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8czC: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8czB: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8czx_info" {
     block_c8czx_info:
         const _c8czx;
         const 0;
         const 270582939678;
         const S8alj_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.420334458 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType_$cshowList_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c8cAq: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8alj_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.423808972 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.42738434 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqHandle_$c==_closure" {
     GHC.IO.Handle.Types.$fEqHandle_$c==_closure:
         const GHC.IO.Handle.Types.$fEqHandle_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqHandle_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cAJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cAK; else goto c8cAL;
       c8cAK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqHandle_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cAL: // global
           I64[Sp - 16] = block_c8cAC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cBo; else goto c8cAD;
       u8cBo: // global
           call _c8cAC(R1) args: 0, res: 0, upd: 0;
       c8cAD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqHandle_$c==_info" {
     GHC.IO.Handle.Types.$fEqHandle_$c==_info:
         const GHC.IO.Handle.Types.$fEqHandle_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cAC() //  [R1]
         { []
         }
     {offset
       c8cAC: // global
           _s8a74::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cAG; else goto c8cAH;
       c8cAG: // global
           I64[Sp] = block_c8cAO_info;
           _s8a77::P64 = P64[R1 + 15];
           R1 = _s8a74::P64;
           P64[Sp + 8] = _s8a77::P64;
           if (R1 & 7 != 0) goto u8cBm; else goto c8cAQ;
       u8cBm: // global
           call _c8cAO(R1) args: 0, res: 0, upd: 0;
       c8cAQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cAH: // global
           I64[Sp] = block_c8cB3_info;
           _s8a7g::P64 = P64[R1 + 14];
           R1 = _s8a74::P64;
           P64[Sp + 8] = _s8a7g::P64;
           if (R1 & 7 != 0) goto u8cBn; else goto c8cB5;
       u8cBn: // global
           call _c8cB3(R1) args: 0, res: 0, upd: 0;
       c8cB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cAC_info" {
     block_c8cAC_info:
         const _c8cAC;
         const 1;
         const 30;
 },
 _c8cAO() //  [R1]
         { []
         }
     {offset
       c8cAO: // global
           if (R1 & 7 == 1) goto c8cAW; else goto u8cBl;
       c8cAW: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8cBl: // global
           Sp = Sp + 16;
           call _c8cBb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cAO_info" {
     block_c8cAO_info:
         const _c8cAO;
         const 1;
         const 30;
 },
 _c8cB3() //  [R1]
         { []
         }
     {offset
       c8cB3: // global
           if (R1 & 7 == 1) goto u8cBk; else goto c8cBf;
       u8cBk: // global
           Sp = Sp + 16;
           call _c8cBb() args: 0, res: 0, upd: 0;
       c8cBf: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 14]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cB3_info" {
     block_c8cB3_info:
         const _c8cB3;
         const 1;
         const 30;
 },
 _c8cBb() //  []
         { []
         }
     {offset
       c8cBb: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.438525307 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqHandle_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqHandle_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqHandle_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqHandle_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cCa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cCb; else goto c8cCc;
       c8cCb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqHandle_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cCc: // global
           I64[Sp - 16] = block_c8cC3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cDl; else goto c8cC4;
       u8cDl: // global
           call _c8cC3(R1) args: 0, res: 0, upd: 0;
       c8cC4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqHandle_$c/=_info" {
     GHC.IO.Handle.Types.$fEqHandle_$c/=_info:
         const GHC.IO.Handle.Types.$fEqHandle_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cC3() //  [R1]
         { []
         }
     {offset
       c8cC3: // global
           _s8a7q::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cC7; else goto c8cC8;
       c8cC7: // global
           I64[Sp] = block_c8cCf_info;
           _s8a7t::P64 = P64[R1 + 15];
           R1 = _s8a7q::P64;
           P64[Sp + 8] = _s8a7t::P64;
           if (R1 & 7 != 0) goto u8cDj; else goto c8cCh;
       u8cDj: // global
           call _c8cCf(R1) args: 0, res: 0, upd: 0;
       c8cCh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cC8: // global
           I64[Sp] = block_c8cCJ_info;
           _s8a7C::P64 = P64[R1 + 14];
           R1 = _s8a7q::P64;
           P64[Sp + 8] = _s8a7C::P64;
           if (R1 & 7 != 0) goto u8cDk; else goto c8cCL;
       u8cDk: // global
           call _c8cCJ(R1) args: 0, res: 0, upd: 0;
       c8cCL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cC3_info" {
     block_c8cC3_info:
         const _c8cC3;
         const 1;
         const 30;
 },
 _c8cCf() //  [R1]
         { []
         }
     {offset
       c8cCf: // global
           if (R1 & 7 == 1) goto c8cCC; else goto u8cDg;
       c8cCC: // global
           if (P64[Sp + 8] == P64[R1 + 15]) goto u8cDh; else goto u8cDi;
       u8cDh: // global
           Sp = Sp + 16;
           call _c8cD6() args: 0, res: 0, upd: 0;
       u8cDi: // global
           Sp = Sp + 16;
           goto u8cDo;
       u8cDg: // global
           Sp = Sp + 16;
           goto u8cDo;
       u8cDo: // global
           call _c8cD0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cCf_info" {
     block_c8cCf_info:
         const _c8cCf;
         const 1;
         const 30;
 },
 _c8cCJ() //  [R1]
         { []
         }
     {offset
       c8cCJ: // global
           if (R1 & 7 == 1) goto u8cDd; else goto c8cDa;
       u8cDd: // global
           Sp = Sp + 16;
           goto u8cDr;
       c8cDa: // global
           if (P64[Sp + 8] == P64[R1 + 14]) goto u8cDe; else goto u8cDf;
       u8cDe: // global
           Sp = Sp + 16;
           call _c8cD6() args: 0, res: 0, upd: 0;
       u8cDf: // global
           Sp = Sp + 16;
           goto u8cDr;
       u8cDr: // global
           call _c8cD0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cCJ_info" {
     block_c8cCJ_info:
         const _c8cCJ;
         const 1;
         const 30;
 },
 _c8cD6() //  []
         { []
         }
     {offset
       c8cD6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8cD0() //  []
         { []
         }
     {offset
       c8cD0: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.448568263 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqHandle_closure" {
     GHC.IO.Handle.Types.$fEqHandle_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqHandle_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqHandle_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.450341451 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewline11_bytes" {
     GHC.IO.Handle.Types.$fReadNewline11_bytes:
         I8[] [76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.45322517 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline10_closure" {
     GHC.IO.Handle.Types.$fReadNewline10_closure:
         const GHC.IO.Handle.Types.$fReadNewline10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline10_entry() //  [R1]
         { []
         }
     {offset
       c8cE5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cE6; else goto c8cE7;
       c8cE6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cE7: // global
           (_c8cE2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cE2::I64 == 0) goto c8cE4; else goto c8cE3;
       c8cE4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cE3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cE2::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewline11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline10_info" {
     GHC.IO.Handle.Types.$fReadNewline10_info:
         const GHC.IO.Handle.Types.$fReadNewline10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.456893928 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewline7_bytes" {
     GHC.IO.Handle.Types.$fReadNewline7_bytes:
         I8[] [67,82,76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.458978235 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline6_closure" {
     GHC.IO.Handle.Types.$fReadNewline6_closure:
         const GHC.IO.Handle.Types.$fReadNewline6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline6_entry() //  [R1]
         { []
         }
     {offset
       c8cEm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cEn; else goto c8cEo;
       c8cEn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cEo: // global
           (_c8cEj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cEj::I64 == 0) goto c8cEl; else goto c8cEk;
       c8cEl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cEk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cEj::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewline7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline6_info" {
     GHC.IO.Handle.Types.$fReadNewline6_info:
         const GHC.IO.Handle.Types.$fReadNewline6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.463430567 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c8cEH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cEI; else goto c8cEJ;
       c8cEI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cEJ: // global
           I64[Sp - 16] = block_c8cEA_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cEQ; else goto c8cEB;
       u8cEQ: // global
           call _c8cEA(R1) args: 0, res: 0, upd: 0;
       c8cEB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S8alj_srt+64;
 },
 _c8cEA() //  [R1]
         { []
         }
     {offset
       c8cEA: // global
           _s8a7N::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cEE; else goto c8cEF;
       c8cEE: // global
           R3 = _s8a7N::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8cEF: // global
           R3 = _s8a7N::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cEA_info" {
     block_c8cEA_info:
         const _c8cEA;
         const 1;
         const 12884901918;
         const S8alj_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.469147846 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowNewline_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8cFd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8cFe; else goto c8cFf;
       c8cFe: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewline_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cFf: // global
           I64[Sp - 8] = block_c8cF6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8cFm; else goto c8cF7;
       u8cFm: // global
           call _c8cF6(R1) args: 0, res: 0, upd: 0;
       c8cF7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline_$cshow_info" {
     GHC.IO.Handle.Types.$fShowNewline_$cshow_info:
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const S8alj_srt+64;
 },
 _c8cF6() //  [R1]
         { []
         }
     {offset
       c8cF6: // global
           if (R1 & 7 == 1) goto c8cFa; else goto c8cFb;
       c8cFa: // global
           R1 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8cFb: // global
           R1 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cF6_info" {
     block_c8cF6_info:
         const _c8cF6;
         const 0;
         const 12884901918;
         const S8alj_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.475641044 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline1_closure" {
     GHC.IO.Handle.Types.$fShowNewline1_closure:
         const GHC.IO.Handle.Types.$fShowNewline1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cFL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cFM; else goto c8cFN;
       c8cFM: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewline1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cFN: // global
           I64[Sp - 16] = block_c8cFE_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cFU; else goto c8cFF;
       u8cFU: // global
           call _c8cFE(R1) args: 0, res: 0, upd: 0;
       c8cFF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline1_info" {
     GHC.IO.Handle.Types.$fShowNewline1_info:
         const GHC.IO.Handle.Types.$fShowNewline1_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const S8alj_srt+64;
 },
 _c8cFE() //  [R1]
         { []
         }
     {offset
       c8cFE: // global
           _s8a7S::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cFI; else goto c8cFJ;
       c8cFI: // global
           R3 = _s8a7S::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8cFJ: // global
           R3 = _s8a7S::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cFE_info" {
     block_c8cFE_info:
         const _c8cFE;
         const 1;
         const 12884901918;
         const S8alj_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.480931824 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cGa: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowNewline1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8alj_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.484113386 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_closure" {
     GHC.IO.Handle.Types.$fShowNewline_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowNewline_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.486470119 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowNewlineMode4_bytes" {
     GHC.IO.Handle.Types.$fShowNewlineMode4_bytes:
         I8[] [78,101,119,108,105,110,101,77,111,100,101,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.488703236 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowNewlineMode3_bytes" {
     GHC.IO.Handle.Types.$fShowNewlineMode3_bytes:
         I8[] [105,110,112,117,116,78,76,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.490386246 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowNewlineMode2_bytes" {
     GHC.IO.Handle.Types.$fShowNewlineMode2_bytes:
         I8[] [111,117,116,112,117,116,78,76,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.491968955 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode5_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode5_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.499896743 UTC

[section ""data" . GHC.IO.Handle.Types.$w$cshowsPrec1_closure" {
     GHC.IO.Handle.Types.$w$cshowsPrec1_closure:
         const GHC.IO.Handle.Types.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       c8cGn: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s8a84_entry() //  [R1]
         { []
         }
     {offset
       c8cGZ: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a84_info" {
     sat_s8a84_info:
         const sat_s8a84_entry;
         const 1;
         const 16;
 },
 sat_s8a85_entry() //  [R1]
         { []
         }
     {offset
       c8cH8: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a85_info" {
     sat_s8a85_info:
         const sat_s8a85_entry;
         const 1;
         const 16;
 },
 sat_s8a86_entry() //  [R1]
         { []
         }
     {offset
       c8cHf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8cHg; else goto c8cHh;
       c8cHg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cHh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8cGQ_info;
           _s8a81::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s8a81::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8cHo; else goto c8cGR;
       u8cHo: // global
           call _c8cGQ(R1) args: 0, res: 0, upd: 0;
       c8cGR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8a86_info" {
     sat_s8a86_info:
         const sat_s8a86_entry;
         const 2;
         const 12884901906;
         const S8alj_srt+64;
 },
 _c8cGQ() //  [R1]
         { []
         }
     {offset
       c8cGQ: // global
           _s8a81::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cHc; else goto c8cHd;
       c8cHc: // global
           Hp = Hp + 24;
           _s8a83::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8cHn; else goto c8cHj;
       c8cHj: // global
           I64[Hp - 16] = sat_s8a84_info;
           P64[Hp] = _s8a81::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c8cHd: // global
           Hp = Hp + 24;
           _s8a83::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8cHn; else goto c8cHm;
       c8cHn: // global
           HpAlloc = 24;
           R1 = _s8a83::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8cHm: // global
           I64[Hp - 16] = sat_s8a85_info;
           P64[Hp] = _s8a81::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8cGQ_info" {
     block_c8cGQ_info:
         const _c8cGQ;
         const 1;
         const 12884901918;
         const S8alj_srt+64;
 },
 sat_s8a87_entry() //  [R1]
         { []
         }
     {offset
       c8cHp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8cHt; else goto c8cHs;
       c8cHt: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cHs: // global
           _s8a7Y::P64 = P64[R1 + 16];
           _s8a81::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s8a86_info;
           P64[Hp - 8] = _s8a7Y::P64;
           P64[Hp] = _s8a81::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a87_info" {
     sat_s8a87_info:
         const sat_s8a87_entry;
         const 2;
         const 12884901906;
         const S8alj_srt+64;
 },
 karg_s8a82_entry() //  [R1]
         { []
         }
     {offset
       c8cHu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8cHy; else goto c8cHx;
       c8cHy: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cHx: // global
           _s8a7Y::P64 = P64[R1 + 16];
           _s8a81::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s8a87_info;
           P64[Hp - 8] = _s8a7Y::P64;
           P64[Hp] = _s8a81::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . karg_s8a82_info" {
     karg_s8a82_info:
         const karg_s8a82_entry;
         const 2;
         const 150323855378;
         const S8alj_srt+64;
 },
 sat_s8a89_entry() //  [R1]
         { []
         }
     {offset
       c8cHG: // global
           _s8a89::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c8cHH; else goto c8cHI;
       c8cHI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8cHK; else goto c8cHJ;
       c8cHK: // global
           HpAlloc = 32;
           goto c8cHH;
       c8cHH: // global
           R1 = _s8a89::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cHJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8a89::P64;
           _s8a7X::P64 = P64[_s8a89::P64 + 16];
           _s8a7Y::P64 = P64[_s8a89::P64 + 24];
           _s8a81::P64 = P64[_s8a89::P64 + 32];
           I64[Hp - 24] = karg_s8a82_info;
           P64[Hp - 8] = _s8a7Y::P64;
           P64[Hp] = _s8a81::P64;
           I64[Sp - 32] = block_c8cHz_info;
           R1 = _s8a7X::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8cHR; else goto c8cHA;
       u8cHR: // global
           call _c8cHz(R1) args: 0, res: 0, upd: 0;
       c8cHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8a89_info" {
     sat_s8a89_info:
         const sat_s8a89_entry;
         const 3;
         const 150323855375;
         const S8alj_srt+64;
 },
 _c8cHz() //  [R1]
         { []
         }
     {offset
       c8cHz: // global
           _c8cGE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cHD; else goto c8cHE;
       c8cHD: // global
           R3 = _c8cGE::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c8cHE: // global
           R3 = _c8cGE::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8cHz_info" {
     block_c8cHz_info:
         const _c8cHz;
         const 1;
         const 12884901918;
         const S8alj_srt+64;
 },
 sat_s8a8a_entry() //  [R1]
         { []
         }
     {offset
       c8cHS: // global
           _s8a8a::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8cHT; else goto c8cHU;
       c8cHU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8cHW; else goto c8cHV;
       c8cHW: // global
           HpAlloc = 40;
           goto c8cHT;
       c8cHT: // global
           R1 = _s8a8a::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cHV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8a8a::P64;
           _s8a7X::P64 = P64[_s8a8a::P64 + 16];
           _s8a7Y::P64 = P64[_s8a8a::P64 + 24];
           _s8a81::P64 = P64[_s8a8a::P64 + 32];
           I64[Hp - 32] = sat_s8a89_info;
           P64[Hp - 16] = _s8a7X::P64;
           P64[Hp - 8] = _s8a7Y::P64;
           P64[Hp] = _s8a81::P64;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8a8a_info" {
     sat_s8a8a_info:
         const sat_s8a8a_entry;
         const 3;
         const 150323855375;
         const S8alj_srt+64;
 },
 p_s8a80_entry() //  [R1, R2]
         { []
         }
     {offset
       c8cHX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8cI1; else goto c8cI0;
       c8cI1: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cI0: // global
           _s8a7X::P64 = P64[R1 + 7];
           _s8a7Y::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s8a8a_info;
           P64[Hp - 16] = _s8a7X::P64;
           P64[Hp - 8] = _s8a7Y::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s8a80_info" {
     p_s8a80_info:
         const p_s8a80_entry;
         const 2;
         const 150323855371;
         const 4294967301;
         const S8alj_srt+64;
 },
 sat_s8a8d_entry() //  [R1]
         { []
         }
     {offset
       c8cIb: // global
           _s8a8d::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8cIc; else goto c8cId;
       c8cId: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8cIf; else goto c8cIe;
       c8cIf: // global
           HpAlloc = 24;
           goto c8cIc;
       c8cIc: // global
           R1 = _s8a8d::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cIe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8a8d::P64;
           _s8a7Z::P64 = P64[_s8a8d::P64 + 16];
           _s8a80::P64 = P64[_s8a8d::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s8a7Z::P64;
           R2 = Hp - 14;
           R1 = _s8a80::P64;
           Sp = Sp - 16;
           call p_s8a80_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8a8d_info" {
     sat_s8a8d_info:
         const sat_s8a8d_entry;
         const 2;
         const 150323855378;
         const S8alj_srt+64;
 },
 GHC.IO.Handle.Types.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8cIj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c8cIn; else goto c8cIm;
       c8cIn: // global
           HpAlloc = 80;
           R1 = GHC.IO.Handle.Types.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c8cIm: // global
           I64[Hp - 72] = p_s8a80_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           _c8cGr::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto c8cIh; else goto c8cIi;
       c8cIh: // global
           Hp = Hp - 56;
           R2 = R5;
           R1 = _c8cGr::P64;
           call p_s8a80_entry(R2, R1) args: 8, res: 0, upd: 8;
       c8cIi: // global
           I64[Hp - 48] = sat_s8a8d_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _c8cGr::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$cshowsPrec1_info" {
     GHC.IO.Handle.Types.$w$cshowsPrec1_info:
         const GHC.IO.Handle.Types.$w$cshowsPrec1_entry;
         const 0;
         const 425201762318;
         const 17179869184;
         const S8alj_srt+64;
         const 68;
         const GHC.IO.Handle.Types.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.524524816 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       c8cJm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8cJq; else goto c8cJr;
       c8cJq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cJr: // global
           I64[Sp - 24] = block_c8cJj_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8cJz; else goto c8cJk;
       u8cJz: // global
           call _c8cJj(R1) args: 0, res: 0, upd: 0;
       c8cJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8alj_srt+112;
 },
 _c8cJj() //  [R1]
         { []
         }
     {offset
       c8cJj: // global
           I64[Sp] = block_c8cJp_info;
           _s8a8i::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8a8i::I64;
           if (R1 & 7 != 0) goto u8cJy; else goto c8cJt;
       u8cJy: // global
           call _c8cJp(R1) args: 0, res: 0, upd: 0;
       c8cJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cJj_info" {
     block_c8cJj_info:
         const _c8cJj;
         const 2;
         const 4294967326;
         const S8alj_srt+112;
 },
 _c8cJp() //  [R1]
         { []
         }
     {offset
       c8cJp: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cJp_info" {
     block_c8cJp_info:
         const _c8cJp;
         const 66;
         const 4294967326;
         const S8alj_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.532135895 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode2_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.535200393 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8cJV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8cJW; else goto c8cJX;
       c8cJW: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cJX: // global
           I64[Sp - 8] = block_c8cJS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8cK1; else goto c8cJT;
       u8cK1: // global
           call _c8cJS(R1) args: 0, res: 0, upd: 0;
       c8cJT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8alj_srt+112;
 },
 _c8cJS() //  [R1]
         { []
         }
     {offset
       c8cJS: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cJS_info" {
     block_c8cJS_info:
         const _c8cJS;
         const 0;
         const 4294967326;
         const S8alj_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.540761897 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode1_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode1_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cKi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cKj; else goto c8cKk;
       c8cKj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewlineMode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cKk: // global
           I64[Sp - 16] = block_c8cKf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cKo; else goto c8cKg;
       u8cKo: // global
           call _c8cKf(R1) args: 0, res: 0, upd: 0;
       c8cKg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode1_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode1_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8alj_srt+112;
 },
 _c8cKf() //  [R1]
         { []
         }
     {offset
       c8cKf: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cKf_info" {
     block_c8cKf_info:
         const _c8cKf;
         const 1;
         const 4294967326;
         const S8alj_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.546332428 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8cKC: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8alj_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.549657709 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.551749136 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline9_closure" {
     GHC.IO.Handle.Types.$fReadNewline9_closure:
         const GHC.IO.Handle.Types.$fReadNewline9_info;
 },
 GHC.IO.Handle.Types.$fReadNewline9_entry() //  [R3]
         { []
         }
     {offset
       c8cKO: // global
           R2 = GHC.IO.Handle.Types.LF_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline9_info" {
     GHC.IO.Handle.Types.$fReadNewline9_info:
         const GHC.IO.Handle.Types.$fReadNewline9_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.554969213 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline8_closure" {
     GHC.IO.Handle.Types.$fReadNewline8_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadNewline10_closure;
         const GHC.IO.Handle.Types.$fReadNewline9_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.556958638 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline5_closure" {
     GHC.IO.Handle.Types.$fReadNewline5_closure:
         const GHC.IO.Handle.Types.$fReadNewline5_info;
 },
 GHC.IO.Handle.Types.$fReadNewline5_entry() //  [R3]
         { []
         }
     {offset
       c8cL0: // global
           R2 = GHC.IO.Handle.Types.CRLF_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline5_info" {
     GHC.IO.Handle.Types.$fReadNewline5_info:
         const GHC.IO.Handle.Types.$fReadNewline5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.560971753 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline4_closure" {
     GHC.IO.Handle.Types.$fReadNewline4_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadNewline6_closure;
         const GHC.IO.Handle.Types.$fReadNewline5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.56273885 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline3_closure" {
     GHC.IO.Handle.Types.$fReadNewline3_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadNewline4_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.564497707 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_sps_closure" {
     GHC.IO.Handle.Types.$fReadNewline_sps_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadNewline8_closure+1;
         const GHC.IO.Handle.Types.$fReadNewline3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.566900186 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline2_closure" {
     GHC.IO.Handle.Types.$fReadNewline2_closure:
         const GHC.IO.Handle.Types.$fReadNewline2_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline2_entry() //  [R2]
         { []
         }
     {offset
       c8cLe: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewline_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline2_info" {
     GHC.IO.Handle.Types.$fReadNewline2_info:
         const GHC.IO.Handle.Types.$fReadNewline2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8alj_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.570530777 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline1_closure" {
     GHC.IO.Handle.Types.$fReadNewline1_closure:
         const GHC.IO.Handle.Types.$fReadNewline1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cLp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewline2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline1_info" {
     GHC.IO.Handle.Types.$fReadNewline1_info:
         const GHC.IO.Handle.Types.$fReadNewline1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8alj_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.574632352 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_info;
         const 0;
 },
 sat_s8a8D_entry() //  [R1]
         { []
         }
     {offset
       c8cLE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cLF; else goto c8cLG;
       c8cLF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cLG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewline2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8a8D_info" {
     sat_s8a8D_info:
         const sat_s8a8D_entry;
         const 1;
         const 12884901904;
         const S8alj_srt+160;
 },
 GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8cLH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8cLL; else goto c8cLK;
       c8cLL: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cLK: // global
           I64[Hp - 16] = sat_s8a8D_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_info" {
     GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_info:
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8alj_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.580557244 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8cM0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cM1; else goto c8cM2;
       c8cM1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cM2: // global
           (_c8cLX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cLX::I64 == 0) goto c8cLZ; else goto c8cLY;
       c8cLZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cLY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cLX::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewline1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_info" {
     GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_info:
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S8alj_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.584781168 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline12_closure" {
     GHC.IO.Handle.Types.$fReadNewline12_closure:
         const GHC.IO.Handle.Types.$fReadNewline12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline12_entry() //  [R1]
         { []
         }
     {offset
       c8cMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cMh; else goto c8cMi;
       c8cMh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cMi: // global
           (_c8cMd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cMd::I64 == 0) goto c8cMf; else goto c8cMe;
       c8cMf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cMe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cMd::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline12_info" {
     GHC.IO.Handle.Types.$fReadNewline12_info:
         const GHC.IO.Handle.Types.$fReadNewline12_entry;
         const 0;
         const 4294967317;
         const S8alj_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.588662498 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_$creadList_closure" {
     GHC.IO.Handle.Types.$fReadNewline_$creadList_closure:
         const GHC.IO.Handle.Types.$fReadNewline_$creadList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8cMu: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewline12_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline_$creadList_info" {
     GHC.IO.Handle.Types.$fReadNewline_$creadList_info:
         const GHC.IO.Handle.Types.$fReadNewline_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8alj_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.593567128 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_closure" {
     GHC.IO.Handle.Types.$fReadNewline_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure+1;
         const GHC.IO.Handle.Types.$fReadNewline_$creadList_closure+1;
         const GHC.IO.Handle.Types.$fReadNewline1_closure+2;
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.595888945 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode17_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode17_bytes:
         I8[] [78,101,119,108,105,110,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.598184063 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode16_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode16_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode16_entry() //  [R1]
         { []
         }
     {offset
       c8cMJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cMK; else goto c8cML;
       c8cMK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cML: // global
           (_c8cMG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cMG::I64 == 0) goto c8cMI; else goto c8cMH;
       c8cMI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cMH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cMG::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode16_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode16_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.601786344 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode16_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.603558961 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode15_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode15_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.606029387 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode14_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode14_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode14_entry() //  [R1]
         { []
         }
     {offset
       c8cN1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cN2; else goto c8cN3;
       c8cN2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cN3: // global
           (_c8cMY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cMY::I64 == 0) goto c8cN0; else goto c8cMZ;
       c8cN0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cMZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cMY::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode14_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode14_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode14_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.609689009 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode14_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.611436693 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode13_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode13_bytes:
         I8[] [105,110,112,117,116,78,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.613929649 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode12_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode12_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode12_entry() //  [R1]
         { []
         }
     {offset
       c8cNj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cNk; else goto c8cNl;
       c8cNk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cNl: // global
           (_c8cNg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cNg::I64 == 0) goto c8cNi; else goto c8cNh;
       c8cNi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cNh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cNg::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode12_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode12_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.617993716 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode11_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode11_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode11_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode11_entry() //  [R3]
         { []
         }
     {offset
       c8cNx: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.IO.Handle.Types.$fReadNewline2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode11_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode11_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode11_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8alj_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.621329567 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_n_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_n_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.623159273 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode10_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode10_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.626743657 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode9_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode9_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode9_entry() //  [R1]
         { []
         }
     {offset
       c8cNM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cNN; else goto c8cNO;
       c8cNN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cNO: // global
           (_c8cNJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cNJ::I64 == 0) goto c8cNL; else goto c8cNK;
       c8cNL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cNK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cNJ::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode9_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode9_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.63047528 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode8_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode8_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.632173622 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode7_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode7_bytes:
         I8[] [111,117,116,112,117,116,78,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.634510668 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode6_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode6_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode6_entry() //  [R1]
         { []
         }
     {offset
       c8cO4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cO5; else goto c8cO6;
       c8cO5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cO6: // global
           (_c8cO1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cO1::I64 == 0) goto c8cO3; else goto c8cO2;
       c8cO3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cO2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cO1::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode6_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode6_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.639007014 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode4_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode4_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode4_entry() //  [R1]
         { []
         }
     {offset
       c8cOk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cOl; else goto c8cOm;
       c8cOl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cOm: // global
           (_c8cOh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cOh::I64 == 0) goto c8cOj; else goto c8cOi;
       c8cOj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cOi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cOh::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode4_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode4_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.642630203 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode3_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode3_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.649727112 UTC

[section ""data" . GHC.IO.Handle.Types.$w$creadPrec_closure" {
     GHC.IO.Handle.Types.$w$creadPrec_closure:
         const GHC.IO.Handle.Types.$w$creadPrec_info;
         const 0;
 },
 sat_s8a8Q_entry() //  [R1, R2]
         { []
         }
     {offset
       c8cP8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8cPc; else goto c8cPb;
       c8cPc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cPb: // global
           _s8a8H::P64 = P64[R1 + 7];
           _s8a8L::P64 = P64[R1 + 15];
           _s8a8N::P64 = P64[R1 + 23];
           I64[Hp - 16] = GHC.IO.Handle.Types.NewlineMode_con_info;
           P64[Hp - 8] = _s8a8L::P64;
           P64[Hp] = _s8a8N::P64;
           R2 = Hp - 15;
           R1 = _s8a8H::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a8Q_info" {
     sat_s8a8Q_info:
         const sat_s8a8Q_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s8a8T_entry() //  [R1, R2]
         { []
         }
     {offset
       c8cPg: // global
           _s8a8N::P64 = R2;
           _s8a8T::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c8cPh; else goto c8cPi;
       c8cPi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8cPk; else goto c8cPj;
       c8cPk: // global
           HpAlloc = 32;
           goto c8cPh;
       c8cPh: // global
           R2 = _s8a8N::P64;
           R1 = _s8a8T::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cPj: // global
           _s8a8H::P64 = P64[_s8a8T::P64 + 7];
           _s8a8L::P64 = P64[_s8a8T::P64 + 15];
           I64[Hp - 24] = sat_s8a8Q_info;
           P64[Hp - 16] = _s8a8H::P64;
           P64[Hp - 8] = _s8a8L::P64;
           P64[Hp] = _s8a8N::P64;
           I64[Sp - 8] = block_c8cPd_info;
           R3 = Hp - 23;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a8T_info" {
     sat_s8a8T_info:
         const sat_s8a8T_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S8alj_srt+216;
 },
 _c8cPd() //  [R1]
         { []
         }
     {offset
       c8cPd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8cPn; else goto c8cPm;
       c8cPn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8cPm: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cPd_info" {
     block_c8cPd_info:
         const _c8cPd;
         const 0;
         const 30;
 },
 sat_s8a8U_entry() //  [R1, R2]
         { []
         }
     {offset
       c8cPo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8cPs; else goto c8cPr;
       c8cPs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cPr: // global
           _s8a8H::P64 = P64[R1 + 7];
           _s8a8L::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s8a8T_info;
           P64[Hp - 8] = _s8a8H::P64;
           P64[Hp] = _s8a8L::P64;
           R5 = Hp - 15;
           R4 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode11_closure+2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a8U_info" {
     sat_s8a8U_info:
         const sat_s8a8U_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const S8alj_srt+216;
 },
 sat_s8a8X_entry() //  [R1, R2]
         { []
         }
     {offset
       c8cPw: // global
           _s8a8L::P64 = R2;
           _s8a8X::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c8cPx; else goto c8cPy;
       c8cPy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8cPA; else goto c8cPz;
       c8cPA: // global
           HpAlloc = 24;
           goto c8cPx;
       c8cPx: // global
           R2 = _s8a8L::P64;
           R1 = _s8a8X::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cPz: // global
           _s8a8H::P64 = P64[_s8a8X::P64 + 7];
           I64[Hp - 16] = sat_s8a8U_info;
           P64[Hp - 8] = _s8a8H::P64;
           P64[Hp] = _s8a8L::P64;
           I64[Sp - 8] = block_c8cPt_info;
           R3 = Hp - 15;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode8_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a8X_info" {
     sat_s8a8X_info:
         const sat_s8a8X_entry;
         const 1;
         const 270582939657;
         const 4294967301;
         const S8alj_srt+216;
 },
 _c8cPt() //  [R1]
         { []
         }
     {offset
       c8cPt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8cPD; else goto c8cPC;
       c8cPD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8cPC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cPt_info" {
     block_c8cPt_info:
         const _c8cPt;
         const 0;
         const 30;
 },
 sat_s8a8Y_entry() //  [R1, R2]
         { []
         }
     {offset
       c8cPE: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8cPI; else goto c8cPH;
       c8cPI: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cPH: // global
           _s8a8H::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s8a8X_info;
           P64[Hp] = _s8a8H::P64;
           R5 = Hp - 7;
           R4 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode11_closure+2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode12_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a8Y_info" {
     sat_s8a8Y_info:
         const sat_s8a8Y_entry;
         const 1;
         const 545460846601;
         const 4294967301;
         const S8alj_srt+216;
 },
 sat_s8a91_entry() //  [R1, R2]
         { []
         }
     {offset
       c8cPM: // global
           _s8a8J::P64 = R2;
           _s8a91::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c8cPN; else goto c8cPO;
       c8cPO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8cPQ; else goto c8cPP;
       c8cPQ: // global
           HpAlloc = 16;
           goto c8cPN;
       c8cPN: // global
           R2 = _s8a8J::P64;
           R1 = _s8a91::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cPP: // global
           _s8a8H::P64 = P64[_s8a91::P64 + 7];
           I64[Hp - 8] = sat_s8a8Y_info;
           P64[Hp] = _s8a8H::P64;
           I64[Sp - 8] = block_c8cPJ_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8a91_info" {
     sat_s8a91_info:
         const sat_s8a91_entry;
         const 1;
         const 1095216660489;
         const 4294967301;
         const S8alj_srt+216;
 },
 _c8cPJ() //  [R1]
         { []
         }
     {offset
       c8cPJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8cPT; else goto c8cPS;
       c8cPT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8cPS: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cPJ_info" {
     block_c8cPJ_info:
         const _c8cPJ;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Types.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cPX: // global
           _s8a8H::P64 = R3;
           _s8a8G::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c8cPY; else goto c8cPZ;
       c8cPZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8cQ1; else goto c8cQ0;
       c8cQ1: // global
           HpAlloc = 16;
           goto c8cPY;
       c8cPY: // global
           R3 = _s8a8H::P64;
           R2 = _s8a8G::I64;
           R1 = GHC.IO.Handle.Types.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cQ0: // global
           if (%MO_S_Gt_W64(_s8a8G::I64, 11)) goto c8cPV; else goto c8cPW;
       c8cPV: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8cPW: // global
           I64[Hp - 8] = sat_s8a91_info;
           P64[Hp] = _s8a8H::P64;
           I64[Sp - 8] = block_c8cQ2_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$creadPrec_info" {
     GHC.IO.Handle.Types.$w$creadPrec_info:
         const GHC.IO.Handle.Types.$w$creadPrec_entry;
         const 0;
         const 4393751543822;
         const 8589934605;
         const S8alj_srt+216;
 },
 _c8cQ2() //  [R1]
         { []
         }
     {offset
       c8cQ2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8cQ7; else goto c8cQ6;
       c8cQ7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8cQ6: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cQ2_info" {
     block_c8cQ2_info:
         const _c8cQ2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.672266401 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode2_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode2_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode2_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cQW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cQX; else goto c8cQY;
       c8cQX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadNewlineMode2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cQY: // global
           I64[Sp - 16] = block_c8cQT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cR2; else goto c8cQU;
       u8cR2: // global
           call _c8cQT(R1) args: 0, res: 0, upd: 0;
       c8cQU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode2_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode2_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S8alj_srt+280;
 },
 _c8cQT() //  [R1]
         { []
         }
     {offset
       c8cQT: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.$w$creadPrec_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cQT_info" {
     block_c8cQT_info:
         const _c8cQT;
         const 1;
         const 4294967326;
         const S8alj_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.67756351 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode1_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode1_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cRg: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode1_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode1_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode1_entry;
         const 0;
         const 562954248388622;
         const 8589934607;
         const S8alj_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.68185764 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_info;
         const 0;
 },
 sat_s8a99_entry() //  [R1]
         { []
         }
     {offset
       c8cRv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cRw; else goto c8cRx;
       c8cRw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cRx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8a99_info" {
     sat_s8a99_info:
         const sat_s8a99_entry;
         const 1;
         const 562954248388624;
         const S8alj_srt+160;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8cRy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8cRC; else goto c8cRB;
       c8cRC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8cRB: // global
           I64[Hp - 16] = sat_s8a99_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S8alj_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.687409525 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8cRR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cRS; else goto c8cRT;
       c8cRS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cRT: // global
           (_c8cRO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cRO::I64 == 0) goto c8cRQ; else goto c8cRP;
       c8cRQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cRP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cRO::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_entry;
         const 0;
         const 281479271677973;
         const S8alj_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.691539599 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode18_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode18_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode18_entry() //  [R1]
         { []
         }
     {offset
       c8cS7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cS8; else goto c8cS9;
       c8cS8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8cS9: // global
           (_c8cS4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8cS4::I64 == 0) goto c8cS6; else goto c8cS5;
       c8cS6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8cS5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8cS4::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode18_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode18_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode18_entry;
         const 0;
         const 4294967317;
         const S8alj_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.69601025 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8cSl: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode18_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8alj_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.699286801 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure+1;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_closure+1;
         const GHC.IO.Handle.Types.$fReadNewlineMode1_closure+2;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.703321149 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c<_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cSE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cSF; else goto c8cSG;
       c8cSF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cSG: // global
           I64[Sp - 16] = block_c8cSx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cT8; else goto c8cSy;
       u8cT8: // global
           call _c8cSx(R1) args: 0, res: 0, upd: 0;
       c8cSy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c<_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cSx() //  [R1]
         { []
         }
     {offset
       c8cSx: // global
           _s8a9b::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cSB; else goto c8cSC;
       c8cSB: // global
           I64[Sp + 8] = block_c8cSJ_info;
           R1 = _s8a9b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cT6; else goto c8cSL;
       u8cT6: // global
           call _c8cSJ(R1) args: 0, res: 0, upd: 0;
       c8cSL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cSC: // global
           I64[Sp + 8] = block_c8cSY_info;
           R1 = _s8a9b::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cT7; else goto c8cT0;
       u8cT7: // global
           call _c8cSY() args: 0, res: 0, upd: 0;
       c8cT0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cSx_info" {
     block_c8cSx_info:
         const _c8cSx;
         const 1;
         const 30;
 },
 _c8cSJ() //  [R1]
         { []
         }
     {offset
       c8cSJ: // global
           if (R1 & 7 == 1) goto c8cSR; else goto c8cSV;
       c8cSR: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8cSV: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cSJ_info" {
     block_c8cSJ_info:
         const _c8cSJ;
         const 0;
         const 30;
 },
 _c8cSY() //  []
         { []
         }
     {offset
       c8cSY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cSY_info" {
     block_c8cSY_info:
         const _c8cSY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.712973133 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$ccompare_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cTI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cTJ; else goto c8cTK;
       c8cTJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cTK: // global
           I64[Sp - 16] = block_c8cTB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cUl; else goto c8cTC;
       u8cUl: // global
           call _c8cTB(R1) args: 0, res: 0, upd: 0;
       c8cTC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$ccompare_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$ccompare_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cTB() //  [R1]
         { []
         }
     {offset
       c8cTB: // global
           _s8a9g::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cTF; else goto c8cTG;
       c8cTF: // global
           I64[Sp + 8] = block_c8cTN_info;
           R1 = _s8a9g::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cUj; else goto c8cTP;
       u8cUj: // global
           call _c8cTN(R1) args: 0, res: 0, upd: 0;
       c8cTP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cTG: // global
           I64[Sp + 8] = block_c8cU2_info;
           R1 = _s8a9g::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cUk; else goto c8cU4;
       u8cUk: // global
           call _c8cU2(R1) args: 0, res: 0, upd: 0;
       c8cU4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cTB_info" {
     block_c8cTB_info:
         const _c8cTB;
         const 1;
         const 30;
 },
 _c8cTN() //  [R1]
         { []
         }
     {offset
       c8cTN: // global
           if (R1 & 7 == 1) goto u8cUi; else goto c8cTZ;
       u8cUi: // global
           Sp = Sp + 8;
           call _c8cUe() args: 0, res: 0, upd: 0;
       c8cTZ: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cTN_info" {
     block_c8cTN_info:
         const _c8cTN;
         const 0;
         const 30;
 },
 _c8cU2() //  [R1]
         { []
         }
     {offset
       c8cU2: // global
           if (R1 & 7 == 1) goto c8cUa; else goto u8cUh;
       c8cUa: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8cUh: // global
           Sp = Sp + 8;
           call _c8cUe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cU2_info" {
     block_c8cU2_info:
         const _c8cU2;
         const 0;
         const 30;
 },
 _c8cUe() //  []
         { []
         }
     {offset
       c8cUe: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.723582879 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewline_$c==_closure" {
     GHC.IO.Handle.Types.$fEqNewline_$c==_closure:
         const GHC.IO.Handle.Types.$fEqNewline_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqNewline_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cV1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cV2; else goto c8cV3;
       c8cV2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewline_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cV3: // global
           I64[Sp - 16] = block_c8cUU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cVG; else goto c8cUV;
       u8cVG: // global
           call _c8cUU(R1) args: 0, res: 0, upd: 0;
       c8cUV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewline_$c==_info" {
     GHC.IO.Handle.Types.$fEqNewline_$c==_info:
         const GHC.IO.Handle.Types.$fEqNewline_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cUU() //  [R1]
         { []
         }
     {offset
       c8cUU: // global
           _s8a9l::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cUY; else goto c8cUZ;
       c8cUY: // global
           I64[Sp + 8] = block_c8cV6_info;
           R1 = _s8a9l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cVE; else goto c8cV8;
       u8cVE: // global
           call _c8cV6(R1) args: 0, res: 0, upd: 0;
       c8cV8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cUZ: // global
           I64[Sp + 8] = block_c8cVl_info;
           R1 = _s8a9l::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cVF; else goto c8cVn;
       u8cVF: // global
           call _c8cVl(R1) args: 0, res: 0, upd: 0;
       c8cVn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cUU_info" {
     block_c8cUU_info:
         const _c8cUU;
         const 1;
         const 30;
 },
 _c8cV6() //  [R1]
         { []
         }
     {offset
       c8cV6: // global
           if (R1 & 7 == 1) goto u8cVC; else goto u8cVD;
       u8cVC: // global
           Sp = Sp + 8;
           call _c8cVx() args: 0, res: 0, upd: 0;
       u8cVD: // global
           Sp = Sp + 8;
           call _c8cVt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cV6_info" {
     block_c8cV6_info:
         const _c8cV6;
         const 0;
         const 30;
 },
 _c8cVl() //  [R1]
         { []
         }
     {offset
       c8cVl: // global
           if (R1 & 7 == 1) goto u8cVA; else goto u8cVB;
       u8cVA: // global
           Sp = Sp + 8;
           call _c8cVt() args: 0, res: 0, upd: 0;
       u8cVB: // global
           Sp = Sp + 8;
           call _c8cVx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cVl_info" {
     block_c8cVl_info:
         const _c8cVl;
         const 0;
         const 30;
 },
 _c8cVt() //  []
         { []
         }
     {offset
       c8cVt: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8cVx() //  []
         { []
         }
     {offset
       c8cVx: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.735296857 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewline_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqNewline_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqNewline_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqNewline_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cWp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cWq; else goto c8cWr;
       c8cWq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewline_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cWr: // global
           I64[Sp - 16] = block_c8cWi_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cX4; else goto c8cWj;
       u8cX4: // global
           call _c8cWi(R1) args: 0, res: 0, upd: 0;
       c8cWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewline_$c/=_info" {
     GHC.IO.Handle.Types.$fEqNewline_$c/=_info:
         const GHC.IO.Handle.Types.$fEqNewline_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cWi() //  [R1]
         { []
         }
     {offset
       c8cWi: // global
           _s8a9q::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cWm; else goto c8cWn;
       c8cWm: // global
           I64[Sp + 8] = block_c8cWu_info;
           R1 = _s8a9q::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cX2; else goto c8cWw;
       u8cX2: // global
           call _c8cWu(R1) args: 0, res: 0, upd: 0;
       c8cWw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cWn: // global
           I64[Sp + 8] = block_c8cWJ_info;
           R1 = _s8a9q::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cX3; else goto c8cWL;
       u8cX3: // global
           call _c8cWJ(R1) args: 0, res: 0, upd: 0;
       c8cWL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cWi_info" {
     block_c8cWi_info:
         const _c8cWi;
         const 1;
         const 30;
 },
 _c8cWu() //  [R1]
         { []
         }
     {offset
       c8cWu: // global
           if (R1 & 7 == 1) goto u8cX0; else goto u8cX1;
       u8cX0: // global
           Sp = Sp + 8;
           call _c8cWV() args: 0, res: 0, upd: 0;
       u8cX1: // global
           Sp = Sp + 8;
           call _c8cWR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cWu_info" {
     block_c8cWu_info:
         const _c8cWu;
         const 0;
         const 30;
 },
 _c8cWJ() //  [R1]
         { []
         }
     {offset
       c8cWJ: // global
           if (R1 & 7 == 1) goto u8cWY; else goto u8cWZ;
       u8cWY: // global
           Sp = Sp + 8;
           call _c8cWR() args: 0, res: 0, upd: 0;
       u8cWZ: // global
           Sp = Sp + 8;
           call _c8cWV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8cWJ_info" {
     block_c8cWJ_info:
         const _c8cWJ;
         const 0;
         const 30;
 },
 _c8cWR() //  []
         { []
         }
     {offset
       c8cWR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8cWV() //  []
         { []
         }
     {offset
       c8cWV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.745979777 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewline_closure" {
     GHC.IO.Handle.Types.$fEqNewline_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqNewline_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqNewline_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.74912224 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cXO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cXP; else goto c8cXQ;
       c8cXP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cXQ: // global
           I64[Sp - 16] = block_c8cXH_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cYi; else goto c8cXI;
       u8cYi: // global
           call _c8cXH(R1) args: 0, res: 0, upd: 0;
       c8cXI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c<=_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<=_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cXH() //  [R1]
         { []
         }
     {offset
       c8cXH: // global
           _s8a9u::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cXL; else goto c8cXM;
       c8cXL: // global
           I64[Sp + 8] = block_c8cXT_info;
           R1 = _s8a9u::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cYg; else goto c8cXV;
       u8cYg: // global
           call _c8cXT(R1) args: 0, res: 0, upd: 0;
       c8cXV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cXM: // global
           I64[Sp + 8] = block_c8cY8_info;
           R1 = _s8a9u::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cYh; else goto c8cYa;
       u8cYh: // global
           call _c8cY8() args: 0, res: 0, upd: 0;
       c8cYa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cXH_info" {
     block_c8cXH_info:
         const _c8cXH;
         const 1;
         const 30;
 },
 _c8cXT() //  [R1]
         { []
         }
     {offset
       c8cXT: // global
           if (R1 & 7 == 1) goto c8cY1; else goto c8cY5;
       c8cY1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8cY5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cXT_info" {
     block_c8cXT_info:
         const _c8cXT;
         const 0;
         const 30;
 },
 _c8cY8() //  []
         { []
         }
     {offset
       c8cY8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cY8_info" {
     block_c8cY8_info:
         const _c8cY8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.758658064 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmax_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cYS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cYT; else goto c8cYU;
       c8cYT: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cYU: // global
           I64[Sp - 16] = block_c8cYL_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8cZ8; else goto c8cYM;
       u8cZ8: // global
           call _c8cYL(R1) args: 0, res: 0, upd: 0;
       c8cYM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$cmax_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmax_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cYL() //  [R1]
         { []
         }
     {offset
       c8cYL: // global
           _s8a9z::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cYP; else goto c8cYQ;
       c8cYP: // global
           R1 = _s8a9z::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8cYQ: // global
           I64[Sp + 8] = block_c8cZ0_info;
           R1 = _s8a9z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8cZ7; else goto c8cZ2;
       u8cZ7: // global
           call _c8cZ0() args: 0, res: 0, upd: 0;
       c8cZ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cYL_info" {
     block_c8cYL_info:
         const _c8cYL;
         const 1;
         const 30;
 },
 _c8cZ0() //  []
         { []
         }
     {offset
       c8cZ0: // global
           R1 = GHC.IO.Handle.Types.CRLF_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cZ0_info" {
     block_c8cZ0_info:
         const _c8cZ0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.766670197 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8cZC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8cZD; else goto c8cZE;
       c8cZD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8cZE: // global
           I64[Sp - 16] = block_c8cZv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8d06; else goto c8cZw;
       u8d06: // global
           call _c8cZv(R1) args: 0, res: 0, upd: 0;
       c8cZw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c>=_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>=_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8cZv() //  [R1]
         { []
         }
     {offset
       c8cZv: // global
           _s8a9E::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8cZz; else goto c8cZA;
       c8cZz: // global
           I64[Sp + 8] = block_c8cZH_info;
           R1 = _s8a9E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8d04; else goto c8cZJ;
       u8d04: // global
           call _c8cZH(R1) args: 0, res: 0, upd: 0;
       c8cZJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8cZA: // global
           I64[Sp + 8] = block_c8cZW_info;
           R1 = _s8a9E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8d05; else goto c8cZY;
       u8d05: // global
           call _c8cZW() args: 0, res: 0, upd: 0;
       c8cZY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cZv_info" {
     block_c8cZv_info:
         const _c8cZv;
         const 1;
         const 30;
 },
 _c8cZH() //  [R1]
         { []
         }
     {offset
       c8cZH: // global
           if (R1 & 7 == 1) goto c8cZP; else goto c8cZT;
       c8cZP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8cZT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cZH_info" {
     block_c8cZH_info:
         const _c8cZH;
         const 0;
         const 30;
 },
 _c8cZW() //  []
         { []
         }
     {offset
       c8cZW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8cZW_info" {
     block_c8cZW_info:
         const _c8cZW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.775101591 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c>_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8d0z: // global
           _s8a9J::P64 = R3;
           R3 = R2;
           R2 = _s8a9J::P64;
           call GHC.IO.Handle.Types.$fOrdNewline_$c<_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c>_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.780078458 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmin_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8d0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8d0S; else goto c8d0T;
       c8d0S: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d0T: // global
           I64[Sp - 16] = block_c8d0K_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8d17; else goto c8d0L;
       u8d17: // global
           call _c8d0K(R1) args: 0, res: 0, upd: 0;
       c8d0L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$cmin_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmin_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8d0K() //  [R1]
         { []
         }
     {offset
       c8d0K: // global
           _s8a9K::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8d0O; else goto c8d0P;
       c8d0O: // global
           I64[Sp + 8] = block_c8d0W_info;
           R1 = _s8a9K::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8d16; else goto c8d0Y;
       u8d16: // global
           call _c8d0W() args: 0, res: 0, upd: 0;
       c8d0Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8d0P: // global
           R1 = _s8a9K::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d0K_info" {
     block_c8d0K_info:
         const _c8d0K;
         const 1;
         const 30;
 },
 _c8d0W() //  []
         { []
         }
     {offset
       c8d0W: // global
           R1 = GHC.IO.Handle.Types.LF_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d0W_info" {
     block_c8d0W_info:
         const _c8d0W;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.786619034 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Handle.Types.$fEqNewline_closure+1;
         const GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c<_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c>_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.790520747 UTC

[section ""data" . GHC.IO.Handle.Types.$w$ccompare_closure" {
     GHC.IO.Handle.Types.$w$ccompare_closure:
         const GHC.IO.Handle.Types.$w$ccompare_info;
 },
 GHC.IO.Handle.Types.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8d1C: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8d1D; else goto c8d1E;
       c8d1D: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d1E: // global
           I64[Sp - 32] = block_c8d1v_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8d2f; else goto c8d1w;
       u8d2f: // global
           call _c8d1v(R1) args: 0, res: 0, upd: 0;
       c8d1w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$ccompare_info" {
     GHC.IO.Handle.Types.$w$ccompare_info:
         const GHC.IO.Handle.Types.$w$ccompare_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c8d1v() //  [R1]
         { []
         }
     {offset
       c8d1v: // global
           _s8a9Q::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8d1z; else goto c8d1A;
       c8d1z: // global
           I64[Sp] = block_c8d1H_info;
           R1 = _s8a9Q::P64;
           if (R1 & 7 != 0) goto u8d2d; else goto c8d1J;
       u8d2d: // global
           call _c8d1H(R1) args: 0, res: 0, upd: 0;
       c8d1J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8d1A: // global
           I64[Sp] = block_c8d1W_info;
           R1 = _s8a9Q::P64;
           if (R1 & 7 != 0) goto u8d2e; else goto c8d1Y;
       u8d2e: // global
           call _c8d1W(R1) args: 0, res: 0, upd: 0;
       c8d1Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d1v_info" {
     block_c8d1v_info:
         const _c8d1v;
         const 3;
         const 30;
 },
 _c8d1H() //  [R1]
         { []
         }
     {offset
       c8d1H: // global
           if (R1 & 7 == 1) goto u8d2c; else goto c8d1T;
       u8d2c: // global
           Sp = Sp + 8;
           call _c8d28() args: 0, res: 0, upd: 0;
       c8d1T: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d1H_info" {
     block_c8d1H_info:
         const _c8d1H;
         const 131;
         const 30;
 },
 _c8d1W() //  [R1]
         { []
         }
     {offset
       c8d1W: // global
           if (R1 & 7 == 1) goto c8d24; else goto u8d2b;
       c8d24: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8d2b: // global
           Sp = Sp + 8;
           call _c8d28() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d1W_info" {
     block_c8d1W_info:
         const _c8d1W;
         const 131;
         const 30;
 },
 _c8d28() //  []
         { []
         }
     {offset
       c8d28: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fOrdNewline_$ccompare_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.800639861 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8d2Q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8d2U; else goto c8d2V;
       c8d2U: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d2V: // global
           I64[Sp - 16] = block_c8d2N_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8d33; else goto c8d2O;
       u8d33: // global
           call _c8d2N(R1) args: 0, res: 0, upd: 0;
       c8d2O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8d2N() //  [R1]
         { []
         }
     {offset
       c8d2N: // global
           I64[Sp - 8] = block_c8d2T_info;
           _s8a9Y::P64 = P64[R1 + 7];
           _s8a9Z::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8a9Z::P64;
           P64[Sp + 8] = _s8a9Y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8d32; else goto c8d2X;
       u8d32: // global
           call _c8d2T(R1) args: 0, res: 0, upd: 0;
       c8d2X: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d2N_info" {
     block_c8d2N_info:
         const _c8d2N;
         const 1;
         const 30;
 },
 _c8d2T() //  [R1]
         { []
         }
     {offset
       c8d2T: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$ccompare_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d2T_info" {
     block_c8d2T_info:
         const _c8d2T;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.809131944 UTC

[section ""data" . GHC.IO.Handle.Types.$w$c<_closure" {
     GHC.IO.Handle.Types.$w$c<_closure:
         const GHC.IO.Handle.Types.$w$c<_info;
 },
 GHC.IO.Handle.Types.$w$c<_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8d3s: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8d3t; else goto c8d3u;
       c8d3t: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d3u: // global
           I64[Sp - 32] = block_c8d3l_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8d45; else goto c8d3m;
       u8d45: // global
           call _c8d3l(R1) args: 0, res: 0, upd: 0;
       c8d3m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$c<_info" {
     GHC.IO.Handle.Types.$w$c<_info:
         const GHC.IO.Handle.Types.$w$c<_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c8d3l() //  [R1]
         { []
         }
     {offset
       c8d3l: // global
           _s8aa5::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8d3p; else goto c8d3q;
       c8d3p: // global
           I64[Sp] = block_c8d3x_info;
           R1 = _s8aa5::P64;
           if (R1 & 7 != 0) goto u8d43; else goto c8d3z;
       u8d43: // global
           call _c8d3x(R1) args: 0, res: 0, upd: 0;
       c8d3z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8d3q: // global
           I64[Sp] = block_c8d3M_info;
           R1 = _s8aa5::P64;
           if (R1 & 7 != 0) goto u8d44; else goto c8d3O;
       u8d44: // global
           call _c8d3M(R1) args: 0, res: 0, upd: 0;
       c8d3O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d3l_info" {
     block_c8d3l_info:
         const _c8d3l;
         const 3;
         const 30;
 },
 _c8d3x() //  [R1]
         { []
         }
     {offset
       c8d3x: // global
           if (R1 & 7 == 1) goto u8d42; else goto c8d3J;
       u8d42: // global
           Sp = Sp + 8;
           call _c8d3Y() args: 0, res: 0, upd: 0;
       c8d3J: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d3x_info" {
     block_c8d3x_info:
         const _c8d3x;
         const 131;
         const 30;
 },
 _c8d3M() //  [R1]
         { []
         }
     {offset
       c8d3M: // global
           if (R1 & 7 == 1) goto c8d3U; else goto u8d41;
       c8d3U: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8d41: // global
           Sp = Sp + 8;
           call _c8d3Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d3M_info" {
     block_c8d3M_info:
         const _c8d3M;
         const 131;
         const 30;
 },
 _c8d3Y() //  []
         { []
         }
     {offset
       c8d3Y: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fOrdNewline_$c<_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.820240889 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8d4G: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8d4K; else goto c8d4L;
       c8d4K: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d4L: // global
           I64[Sp - 16] = block_c8d4D_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8d4T; else goto c8d4E;
       u8d4T: // global
           call _c8d4D(R1) args: 0, res: 0, upd: 0;
       c8d4E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8d4D() //  [R1]
         { []
         }
     {offset
       c8d4D: // global
           I64[Sp - 8] = block_c8d4J_info;
           _s8aad::P64 = P64[R1 + 7];
           _s8aae::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8aae::P64;
           P64[Sp + 8] = _s8aad::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8d4S; else goto c8d4N;
       u8d4S: // global
           call _c8d4J(R1) args: 0, res: 0, upd: 0;
       c8d4N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d4D_info" {
     block_c8d4D_info:
         const _c8d4D;
         const 1;
         const 30;
 },
 _c8d4J() //  [R1]
         { []
         }
     {offset
       c8d4J: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$c<_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d4J_info" {
     block_c8d4J_info:
         const _c8d4J;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.828919796 UTC

[section ""data" . GHC.IO.Handle.Types.$w$c==_closure" {
     GHC.IO.Handle.Types.$w$c==_closure:
         const GHC.IO.Handle.Types.$w$c==_info;
 },
 GHC.IO.Handle.Types.$w$c==_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8d5i: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8d5j; else goto c8d5k;
       c8d5j: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d5k: // global
           I64[Sp - 32] = block_c8d5b_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8d5X; else goto c8d5c;
       u8d5X: // global
           call _c8d5b(R1) args: 0, res: 0, upd: 0;
       c8d5c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$c==_info" {
     GHC.IO.Handle.Types.$w$c==_info:
         const GHC.IO.Handle.Types.$w$c==_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c8d5b() //  [R1]
         { []
         }
     {offset
       c8d5b: // global
           _s8aak::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8d5f; else goto c8d5g;
       c8d5f: // global
           I64[Sp] = block_c8d5n_info;
           R1 = _s8aak::P64;
           if (R1 & 7 != 0) goto u8d5V; else goto c8d5p;
       u8d5V: // global
           call _c8d5n(R1) args: 0, res: 0, upd: 0;
       c8d5p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8d5g: // global
           I64[Sp] = block_c8d5C_info;
           R1 = _s8aak::P64;
           if (R1 & 7 != 0) goto u8d5W; else goto c8d5E;
       u8d5W: // global
           call _c8d5C(R1) args: 0, res: 0, upd: 0;
       c8d5E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d5b_info" {
     block_c8d5b_info:
         const _c8d5b;
         const 3;
         const 30;
 },
 _c8d5n() //  [R1]
         { []
         }
     {offset
       c8d5n: // global
           if (R1 & 7 == 1) goto u8d5T; else goto u8d5U;
       u8d5T: // global
           Sp = Sp + 8;
           call _c8d5O() args: 0, res: 0, upd: 0;
       u8d5U: // global
           Sp = Sp + 32;
           call _c8d5K() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d5n_info" {
     block_c8d5n_info:
         const _c8d5n;
         const 131;
         const 30;
 },
 _c8d5C() //  [R1]
         { []
         }
     {offset
       c8d5C: // global
           if (R1 & 7 == 1) goto u8d5R; else goto u8d5S;
       u8d5R: // global
           Sp = Sp + 32;
           call _c8d5K() args: 0, res: 0, upd: 0;
       u8d5S: // global
           Sp = Sp + 8;
           call _c8d5O() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d5C_info" {
     block_c8d5C_info:
         const _c8d5C;
         const 131;
         const 30;
 },
 _c8d5K() //  []
         { []
         }
     {offset
       c8d5K: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8d5O() //  []
         { []
         }
     {offset
       c8d5O: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fEqNewline_$c==_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.839755832 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqNewlineMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8d6B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8d6F; else goto c8d6G;
       c8d6F: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d6G: // global
           I64[Sp - 16] = block_c8d6y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8d6O; else goto c8d6z;
       u8d6O: // global
           call _c8d6y(R1) args: 0, res: 0, upd: 0;
       c8d6z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewlineMode_$c==_info" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c==_info:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8d6y() //  [R1]
         { []
         }
     {offset
       c8d6y: // global
           I64[Sp - 8] = block_c8d6E_info;
           _s8aas::P64 = P64[R1 + 7];
           _s8aat::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8aat::P64;
           P64[Sp + 8] = _s8aas::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8d6N; else goto c8d6I;
       u8d6N: // global
           call _c8d6E(R1) args: 0, res: 0, upd: 0;
       c8d6I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d6y_info" {
     block_c8d6y_info:
         const _c8d6y;
         const 1;
         const 30;
 },
 _c8d6E() //  [R1]
         { []
         }
     {offset
       c8d6E: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$c==_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d6E_info" {
     block_c8d6E_info:
         const _c8d6E;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.850578574 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8d79: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8d7d; else goto c8d7e;
       c8d7d: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8d7e: // global
           I64[Sp - 16] = block_c8d76_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8d9p; else goto c8d77;
       u8d9p: // global
           call _c8d76(R1) args: 0, res: 0, upd: 0;
       c8d77: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_info" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_info:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8d76() //  [R1]
         { []
         }
     {offset
       c8d76: // global
           I64[Sp - 8] = block_c8d7c_info;
           _s8aaA::P64 = P64[R1 + 7];
           _s8aaB::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8aaB::P64;
           P64[Sp + 8] = _s8aaA::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8d9o; else goto c8d7g;
       u8d9o: // global
           call _c8d7c(R1) args: 0, res: 0, upd: 0;
       c8d7g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d76_info" {
     block_c8d76_info:
         const _c8d76;
         const 1;
         const 30;
 },
 _c8d7c() //  [R1]
         { []
         }
     {offset
       c8d7c: // global
           I64[Sp - 8] = block_c8d7k_info;
           _s8aaD::P64 = P64[R1 + 7];
           _s8aaE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s8aaE::P64;
           P64[Sp + 16] = _s8aaD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8d9q; else goto c8d7m;
       u8d9q: // global
           call _c8d7k(R1) args: 0, res: 0, upd: 0;
       c8d7m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d7c_info" {
     block_c8d7c_info:
         const _c8d7c;
         const 2;
         const 30;
 },
 _c8d7k() //  [R1]
         { []
         }
     {offset
       c8d7k: // global
           _s8aaD::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c8d7t; else goto c8d8j;
       c8d7t: // global
           I64[Sp] = block_c8d7q_info;
           R1 = _s8aaD::P64;
           if (R1 & 7 != 0) goto u8d9r; else goto c8d7u;
       u8d9r: // global
           call _c8d7q(R1) args: 0, res: 0, upd: 0;
       c8d7u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8d8j: // global
           I64[Sp] = block_c8d8h_info;
           R1 = _s8aaD::P64;
           if (R1 & 7 != 0) goto u8d9s; else goto c8d8k;
       u8d9s: // global
           call _c8d8h(R1) args: 0, res: 0, upd: 0;
       c8d8k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d7k_info" {
     block_c8d7k_info:
         const _c8d7k;
         const 3;
         const 30;
 },
 _c8d7q() //  [R1]
         { []
         }
     {offset
       c8d7q: // global
           if (R1 & 7 == 1) goto c8d7B; else goto u8d9j;
       c8d7B: // global
           I64[Sp] = block_c8d7y_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8d9t; else goto c8d7C;
       u8d9t: // global
           call _c8d7y(R1) args: 0, res: 0, upd: 0;
       c8d7C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8d9j: // global
           Sp = Sp + 32;
           call _c8d90() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d7q_info" {
     block_c8d7q_info:
         const _c8d7q;
         const 259;
         const 30;
 },
 _c8d7y() //  [R1]
         { []
         }
     {offset
       c8d7y: // global
           _s8aaE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8d7J; else goto c8d7Z;
       c8d7J: // global
           I64[Sp + 24] = block_c8d7G_info;
           R1 = _s8aaE::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8d9v; else goto c8d7K;
       u8d9v: // global
           call _c8d7G(R1) args: 0, res: 0, upd: 0;
       c8d7K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8d7Z: // global
           I64[Sp + 24] = block_c8d7X_info;
           R1 = _s8aaE::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8d9w; else goto c8d80;
       u8d9w: // global
           call _c8d7X(R1) args: 0, res: 0, upd: 0;
       c8d80: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d7y_info" {
     block_c8d7y_info:
         const _c8d7y;
         const 387;
         const 30;
 },
 _c8d7G() //  [R1]
         { []
         }
     {offset
       c8d7G: // global
           if (R1 & 7 == 1) goto u8d9m; else goto u8d9n;
       u8d9m: // global
           Sp = Sp + 8;
           call _c8d94() args: 0, res: 0, upd: 0;
       u8d9n: // global
           Sp = Sp + 8;
           call _c8d90() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d7G_info" {
     block_c8d7G_info:
         const _c8d7G;
         const 0;
         const 30;
 },
 _c8d7X() //  [R1]
         { []
         }
     {offset
       c8d7X: // global
           if (R1 & 7 == 1) goto u8d9k; else goto u8d9l;
       u8d9k: // global
           Sp = Sp + 8;
           call _c8d90() args: 0, res: 0, upd: 0;
       u8d9l: // global
           Sp = Sp + 8;
           call _c8d94() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d7X_info" {
     block_c8d7X_info:
         const _c8d7X;
         const 0;
         const 30;
 },
 _c8d8h() //  [R1]
         { []
         }
     {offset
       c8d8h: // global
           if (R1 & 7 == 1) goto u8d9e; else goto c8d8v;
       u8d9e: // global
           Sp = Sp + 32;
           call _c8d90() args: 0, res: 0, upd: 0;
       c8d8v: // global
           I64[Sp] = block_c8d8t_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8d9B; else goto c8d8w;
       u8d9B: // global
           call _c8d8t(R1) args: 0, res: 0, upd: 0;
       c8d8w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d8h_info" {
     block_c8d8h_info:
         const _c8d8h;
         const 259;
         const 30;
 },
 _c8d8t() //  [R1]
         { []
         }
     {offset
       c8d8t: // global
           _s8aaE::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8d8D; else goto c8d8T;
       c8d8D: // global
           I64[Sp + 24] = block_c8d8A_info;
           R1 = _s8aaE::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8d9D; else goto c8d8E;
       u8d9D: // global
           call _c8d8A(R1) args: 0, res: 0, upd: 0;
       c8d8E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8d8T: // global
           I64[Sp + 24] = block_c8d8R_info;
           R1 = _s8aaE::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8d9E; else goto c8d8U;
       u8d9E: // global
           call _c8d8R(R1) args: 0, res: 0, upd: 0;
       c8d8U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8d8t_info" {
     block_c8d8t_info:
         const _c8d8t;
         const 387;
         const 30;
 },
 _c8d8A() //  [R1]
         { []
         }
     {offset
       c8d8A: // global
           if (R1 & 7 == 1) goto u8d9h; else goto u8d9i;
       u8d9h: // global
           Sp = Sp + 8;
           call _c8d94() args: 0, res: 0, upd: 0;
       u8d9i: // global
           Sp = Sp + 8;
           call _c8d90() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d8A_info" {
     block_c8d8A_info:
         const _c8d8A;
         const 0;
         const 30;
 },
 _c8d8R() //  [R1]
         { []
         }
     {offset
       c8d8R: // global
           if (R1 & 7 == 1) goto u8d9f; else goto u8d9g;
       u8d9f: // global
           Sp = Sp + 8;
           call _c8d90() args: 0, res: 0, upd: 0;
       u8d9g: // global
           Sp = Sp + 8;
           call _c8d94() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8d8R_info" {
     block_c8d8R_info:
         const _c8d8R;
         const 0;
         const 30;
 },
 _c8d90() //  []
         { []
         }
     {offset
       c8d90: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8d94() //  []
         { []
         }
     {offset
       c8d94: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.874209851 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewlineMode_closure" {
     GHC.IO.Handle.Types.$fEqNewlineMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.88004274 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8db2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8db6; else goto c8db7;
       c8db6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8db7: // global
           I64[Sp - 16] = block_c8daZ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dd0; else goto c8db0;
       u8dd0: // global
           call _c8daZ(R1) args: 0, res: 0, upd: 0;
       c8db0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8daZ() //  [R1]
         { []
         }
     {offset
       c8daZ: // global
           I64[Sp - 8] = block_c8db5_info;
           _s8aaR::P64 = P64[R1 + 7];
           _s8aaS::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8aaS::P64;
           P64[Sp + 8] = _s8aaR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dcZ; else goto c8db9;
       u8dcZ: // global
           call _c8db5(R1) args: 0, res: 0, upd: 0;
       c8db9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8daZ_info" {
     block_c8daZ_info:
         const _c8daZ;
         const 1;
         const 30;
 },
 _c8db5() //  [R1]
         { []
         }
     {offset
       c8db5: // global
           I64[Sp - 8] = block_c8dbd_info;
           _s8aaU::P64 = P64[R1 + 7];
           _s8aaV::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s8aaV::P64;
           P64[Sp + 16] = _s8aaU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dd1; else goto c8dbf;
       u8dd1: // global
           call _c8dbd(R1) args: 0, res: 0, upd: 0;
       c8dbf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8db5_info" {
     block_c8db5_info:
         const _c8db5;
         const 2;
         const 30;
 },
 _c8dbd() //  [R1]
         { []
         }
     {offset
       c8dbd: // global
           _s8aaU::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c8dbm; else goto c8dc6;
       c8dbm: // global
           I64[Sp] = block_c8dbj_info;
           R1 = _s8aaU::P64;
           if (R1 & 7 != 0) goto u8dd2; else goto c8dbn;
       u8dd2: // global
           call _c8dbj(R1) args: 0, res: 0, upd: 0;
       c8dbn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dc6: // global
           I64[Sp] = block_c8dc4_info;
           R1 = _s8aaU::P64;
           if (R1 & 7 != 0) goto u8dd3; else goto c8dc7;
       u8dd3: // global
           call _c8dc4(R1) args: 0, res: 0, upd: 0;
       c8dc7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dbd_info" {
     block_c8dbd_info:
         const _c8dbd;
         const 3;
         const 30;
 },
 _c8dbj() //  [R1]
         { []
         }
     {offset
       c8dbj: // global
           if (R1 & 7 == 1) goto c8dbu; else goto u8dcW;
       c8dbu: // global
           I64[Sp] = block_c8dbr_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8dd4; else goto c8dbv;
       u8dd4: // global
           call _c8dbr(R1) args: 0, res: 0, upd: 0;
       c8dbv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dcW: // global
           Sp = Sp + 32;
           call _c8dcB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dbj_info" {
     block_c8dbj_info:
         const _c8dbj;
         const 259;
         const 30;
 },
 _c8dbr() //  [R1]
         { []
         }
     {offset
       c8dbr: // global
           _s8aaV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dbC; else goto c8dbS;
       c8dbC: // global
           I64[Sp + 24] = block_c8dbz_info;
           R1 = _s8aaV::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dd6; else goto c8dbD;
       u8dd6: // global
           call _c8dbz(R1) args: 0, res: 0, upd: 0;
       c8dbD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dbS: // global
           I64[Sp + 24] = block_c8dbQ_info;
           R1 = _s8aaV::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dd7; else goto c8dbT;
       u8dd7: // global
           call _c8dbQ() args: 0, res: 0, upd: 0;
       c8dbT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dbr_info" {
     block_c8dbr_info:
         const _c8dbr;
         const 387;
         const 30;
 },
 _c8dbz() //  [R1]
         { []
         }
     {offset
       c8dbz: // global
           if (R1 & 7 == 1) goto u8dcX; else goto u8dcY;
       u8dcX: // global
           Sp = Sp + 8;
           call _c8dcx() args: 0, res: 0, upd: 0;
       u8dcY: // global
           Sp = Sp + 8;
           call _c8dcB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dbz_info" {
     block_c8dbz_info:
         const _c8dbz;
         const 0;
         const 30;
 },
 _c8dbQ() //  []
         { []
         }
     {offset
       c8dbQ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dbQ_info" {
     block_c8dbQ_info:
         const _c8dbQ;
         const 0;
         const 30;
 },
 _c8dc4() //  [R1]
         { []
         }
     {offset
       c8dc4: // global
           if (R1 & 7 == 1) goto u8dcT; else goto c8dci;
       u8dcT: // global
           Sp = Sp + 32;
           call _c8dcx() args: 0, res: 0, upd: 0;
       c8dci: // global
           I64[Sp] = block_c8dcg_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8dda; else goto c8dcj;
       u8dda: // global
           call _c8dcg(R1) args: 0, res: 0, upd: 0;
       c8dcj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dc4_info" {
     block_c8dc4_info:
         const _c8dc4;
         const 259;
         const 30;
 },
 _c8dcg() //  [R1]
         { []
         }
     {offset
       c8dcg: // global
           _s8aaV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dcq; else goto c8dcG;
       c8dcq: // global
           I64[Sp + 24] = block_c8dcn_info;
           R1 = _s8aaV::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8ddc; else goto c8dcr;
       u8ddc: // global
           call _c8dcn(R1) args: 0, res: 0, upd: 0;
       c8dcr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dcG: // global
           I64[Sp + 24] = block_c8dcE_info;
           R1 = _s8aaV::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8ddd; else goto c8dcH;
       u8ddd: // global
           call _c8dcE() args: 0, res: 0, upd: 0;
       c8dcH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dcg_info" {
     block_c8dcg_info:
         const _c8dcg;
         const 387;
         const 30;
 },
 _c8dcn() //  [R1]
         { []
         }
     {offset
       c8dcn: // global
           if (R1 & 7 == 1) goto u8dcU; else goto u8dcV;
       u8dcU: // global
           Sp = Sp + 8;
           call _c8dcx() args: 0, res: 0, upd: 0;
       u8dcV: // global
           Sp = Sp + 8;
           call _c8dcB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dcn_info" {
     block_c8dcn_info:
         const _c8dcn;
         const 0;
         const 30;
 },
 _c8dcx() //  []
         { []
         }
     {offset
       c8dcx: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dcB() //  []
         { []
         }
     {offset
       c8dcB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dcE() //  []
         { []
         }
     {offset
       c8dcE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dcE_info" {
     block_c8dcE_info:
         const _c8dcE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.908047058 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dew: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8deA; else goto c8deB;
       c8deA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8deB: // global
           I64[Sp - 16] = block_c8det_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dgu; else goto c8deu;
       u8dgu: // global
           call _c8det(R1) args: 0, res: 0, upd: 0;
       c8deu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8det() //  [R1]
         { []
         }
     {offset
       c8det: // global
           I64[Sp - 16] = block_c8dez_info;
           _s8ab7::P64 = R1;
           _s8ab8::P64 = P64[R1 + 7];
           _s8ab9::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s8ab9::P64;
           P64[Sp] = _s8ab8::P64;
           P64[Sp + 8] = _s8ab7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dgt; else goto c8deD;
       u8dgt: // global
           call _c8dez(R1) args: 0, res: 0, upd: 0;
       c8deD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8det_info" {
     block_c8det_info:
         const _c8det;
         const 1;
         const 30;
 },
 _c8dez() //  [R1]
         { []
         }
     {offset
       c8dez: // global
           I64[Sp - 16] = block_c8deH_info;
           _s8aba::P64 = R1;
           _s8abb::P64 = P64[R1 + 7];
           _s8abc::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s8abc::P64;
           P64[Sp] = _s8abb::P64;
           P64[Sp + 16] = _s8aba::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dgv; else goto c8deJ;
       u8dgv: // global
           call _c8deH(R1) args: 0, res: 0, upd: 0;
       c8deJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dez_info" {
     block_c8dez_info:
         const _c8dez;
         const 3;
         const 30;
 },
 _c8deH() //  [R1]
         { []
         }
     {offset
       c8deH: // global
           _s8abb::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8deQ; else goto c8dfA;
       c8deQ: // global
           I64[Sp] = block_c8deN_info;
           R1 = _s8abb::P64;
           if (R1 & 7 != 0) goto u8dgw; else goto c8deR;
       u8dgw: // global
           call _c8deN(R1) args: 0, res: 0, upd: 0;
       c8deR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dfA: // global
           I64[Sp] = block_c8dfy_info;
           R1 = _s8abb::P64;
           if (R1 & 7 != 0) goto u8dgx; else goto c8dfB;
       u8dgx: // global
           call _c8dfy(R1) args: 0, res: 0, upd: 0;
       c8dfB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8deH_info" {
     block_c8deH_info:
         const _c8deH;
         const 5;
         const 30;
 },
 _c8deN() //  [R1]
         { []
         }
     {offset
       c8deN: // global
           if (R1 & 7 == 1) goto c8deY; else goto u8dgq;
       c8deY: // global
           I64[Sp] = block_c8deV_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8dgy; else goto c8deZ;
       u8dgy: // global
           call _c8deV(R1) args: 0, res: 0, upd: 0;
       c8deZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dgq: // global
           Sp = Sp + 32;
           call _c8dg5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8deN_info" {
     block_c8deN_info:
         const _c8deN;
         const 133;
         const 30;
 },
 _c8deV() //  [R1]
         { []
         }
     {offset
       c8deV: // global
           _s8abc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8df6; else goto c8dfm;
       c8df6: // global
           I64[Sp + 24] = block_c8df3_info;
           R1 = _s8abc::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dgA; else goto c8df7;
       u8dgA: // global
           call _c8df3(R1) args: 0, res: 0, upd: 0;
       c8df7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dfm: // global
           I64[Sp + 32] = block_c8dfk_info;
           R1 = _s8abc::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8dgB; else goto c8dfn;
       u8dgB: // global
           call _c8dfk() args: 0, res: 0, upd: 0;
       c8dfn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8deV_info" {
     block_c8deV_info:
         const _c8deV;
         const 389;
         const 30;
 },
 _c8df3() //  [R1]
         { []
         }
     {offset
       c8df3: // global
           if (R1 & 7 == 1) goto u8dgr; else goto u8dgs;
       u8dgr: // global
           Sp = Sp + 16;
           call _c8dg1() args: 0, res: 0, upd: 0;
       u8dgs: // global
           Sp = Sp + 8;
           call _c8dg5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8df3_info" {
     block_c8df3_info:
         const _c8df3;
         const 2;
         const 30;
 },
 _c8dfk() //  []
         { []
         }
     {offset
       c8dfk: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dfk_info" {
     block_c8dfk_info:
         const _c8dfk;
         const 1;
         const 30;
 },
 _c8dfy() //  [R1]
         { []
         }
     {offset
       c8dfy: // global
           if (R1 & 7 == 1) goto u8dgn; else goto c8dfM;
       u8dgn: // global
           Sp = Sp + 40;
           call _c8dg1() args: 0, res: 0, upd: 0;
       c8dfM: // global
           I64[Sp] = block_c8dfK_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8dgE; else goto c8dfN;
       u8dgE: // global
           call _c8dfK(R1) args: 0, res: 0, upd: 0;
       c8dfN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dfy_info" {
     block_c8dfy_info:
         const _c8dfy;
         const 133;
         const 30;
 },
 _c8dfK() //  [R1]
         { []
         }
     {offset
       c8dfK: // global
           _s8abc::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dfU; else goto c8dga;
       c8dfU: // global
           I64[Sp + 24] = block_c8dfR_info;
           R1 = _s8abc::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dgG; else goto c8dfV;
       u8dgG: // global
           call _c8dfR(R1) args: 0, res: 0, upd: 0;
       c8dfV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dga: // global
           I64[Sp + 32] = block_c8dg8_info;
           R1 = _s8abc::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8dgH; else goto c8dgb;
       u8dgH: // global
           call _c8dg8() args: 0, res: 0, upd: 0;
       c8dgb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dfK_info" {
     block_c8dfK_info:
         const _c8dfK;
         const 389;
         const 30;
 },
 _c8dfR() //  [R1]
         { []
         }
     {offset
       c8dfR: // global
           if (R1 & 7 == 1) goto u8dgo; else goto u8dgp;
       u8dgo: // global
           Sp = Sp + 16;
           call _c8dg1() args: 0, res: 0, upd: 0;
       u8dgp: // global
           Sp = Sp + 8;
           call _c8dg5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dfR_info" {
     block_c8dfR_info:
         const _c8dfR;
         const 2;
         const 30;
 },
 _c8dg1() //  []
         { []
         }
     {offset
       c8dg1: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dg5() //  []
         { []
         }
     {offset
       c8dg5: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dg8() //  []
         { []
         }
     {offset
       c8dg8: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dg8_info" {
     block_c8dg8_info:
         const _c8dg8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.934987306 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8di4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8di8; else goto c8di9;
       c8di8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8di9: // global
           I64[Sp - 16] = block_c8di1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dk2; else goto c8di2;
       u8dk2: // global
           call _c8di1(R1) args: 0, res: 0, upd: 0;
       c8di2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8di1() //  [R1]
         { []
         }
     {offset
       c8di1: // global
           I64[Sp - 8] = block_c8di7_info;
           _s8abp::P64 = P64[R1 + 7];
           _s8abq::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8abq::P64;
           P64[Sp + 8] = _s8abp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dk1; else goto c8dib;
       u8dk1: // global
           call _c8di7(R1) args: 0, res: 0, upd: 0;
       c8dib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8di1_info" {
     block_c8di1_info:
         const _c8di1;
         const 1;
         const 30;
 },
 _c8di7() //  [R1]
         { []
         }
     {offset
       c8di7: // global
           I64[Sp - 8] = block_c8dif_info;
           _s8abs::P64 = P64[R1 + 7];
           _s8abt::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s8abt::P64;
           P64[Sp + 16] = _s8abs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dk3; else goto c8dih;
       u8dk3: // global
           call _c8dif(R1) args: 0, res: 0, upd: 0;
       c8dih: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8di7_info" {
     block_c8di7_info:
         const _c8di7;
         const 2;
         const 30;
 },
 _c8dif() //  [R1]
         { []
         }
     {offset
       c8dif: // global
           _s8abs::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c8dio; else goto c8dj8;
       c8dio: // global
           I64[Sp] = block_c8dil_info;
           R1 = _s8abs::P64;
           if (R1 & 7 != 0) goto u8dk4; else goto c8dip;
       u8dk4: // global
           call _c8dil(R1) args: 0, res: 0, upd: 0;
       c8dip: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dj8: // global
           I64[Sp] = block_c8dj6_info;
           R1 = _s8abs::P64;
           if (R1 & 7 != 0) goto u8dk5; else goto c8dj9;
       u8dk5: // global
           call _c8dj6(R1) args: 0, res: 0, upd: 0;
       c8dj9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dif_info" {
     block_c8dif_info:
         const _c8dif;
         const 3;
         const 30;
 },
 _c8dil() //  [R1]
         { []
         }
     {offset
       c8dil: // global
           if (R1 & 7 == 1) goto c8diw; else goto u8djY;
       c8diw: // global
           I64[Sp] = block_c8dit_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8dk6; else goto c8dix;
       u8dk6: // global
           call _c8dit(R1) args: 0, res: 0, upd: 0;
       c8dix: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8djY: // global
           Sp = Sp + 32;
           call _c8djD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dil_info" {
     block_c8dil_info:
         const _c8dil;
         const 259;
         const 30;
 },
 _c8dit() //  [R1]
         { []
         }
     {offset
       c8dit: // global
           _s8abt::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8diE; else goto c8diU;
       c8diE: // global
           I64[Sp + 24] = block_c8diB_info;
           R1 = _s8abt::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dk8; else goto c8diF;
       u8dk8: // global
           call _c8diB(R1) args: 0, res: 0, upd: 0;
       c8diF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8diU: // global
           I64[Sp + 24] = block_c8diS_info;
           R1 = _s8abt::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dk9; else goto c8diV;
       u8dk9: // global
           call _c8diS() args: 0, res: 0, upd: 0;
       c8diV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dit_info" {
     block_c8dit_info:
         const _c8dit;
         const 387;
         const 30;
 },
 _c8diB() //  [R1]
         { []
         }
     {offset
       c8diB: // global
           if (R1 & 7 == 1) goto u8djZ; else goto u8dk0;
       u8djZ: // global
           Sp = Sp + 8;
           call _c8djz() args: 0, res: 0, upd: 0;
       u8dk0: // global
           Sp = Sp + 8;
           call _c8djD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8diB_info" {
     block_c8diB_info:
         const _c8diB;
         const 0;
         const 30;
 },
 _c8diS() //  []
         { []
         }
     {offset
       c8diS: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8diS_info" {
     block_c8diS_info:
         const _c8diS;
         const 0;
         const 30;
 },
 _c8dj6() //  [R1]
         { []
         }
     {offset
       c8dj6: // global
           if (R1 & 7 == 1) goto u8djV; else goto c8djk;
       u8djV: // global
           Sp = Sp + 32;
           call _c8djz() args: 0, res: 0, upd: 0;
       c8djk: // global
           I64[Sp] = block_c8dji_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8dkc; else goto c8djl;
       u8dkc: // global
           call _c8dji(R1) args: 0, res: 0, upd: 0;
       c8djl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dj6_info" {
     block_c8dj6_info:
         const _c8dj6;
         const 259;
         const 30;
 },
 _c8dji() //  [R1]
         { []
         }
     {offset
       c8dji: // global
           _s8abt::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8djs; else goto c8djI;
       c8djs: // global
           I64[Sp + 24] = block_c8djp_info;
           R1 = _s8abt::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dke; else goto c8djt;
       u8dke: // global
           call _c8djp(R1) args: 0, res: 0, upd: 0;
       c8djt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8djI: // global
           I64[Sp + 24] = block_c8djG_info;
           R1 = _s8abt::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dkf; else goto c8djJ;
       u8dkf: // global
           call _c8djG() args: 0, res: 0, upd: 0;
       c8djJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dji_info" {
     block_c8dji_info:
         const _c8dji;
         const 387;
         const 30;
 },
 _c8djp() //  [R1]
         { []
         }
     {offset
       c8djp: // global
           if (R1 & 7 == 1) goto u8djW; else goto u8djX;
       u8djW: // global
           Sp = Sp + 8;
           call _c8djz() args: 0, res: 0, upd: 0;
       u8djX: // global
           Sp = Sp + 8;
           call _c8djD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8djp_info" {
     block_c8djp_info:
         const _c8djp;
         const 0;
         const 30;
 },
 _c8djz() //  []
         { []
         }
     {offset
       c8djz: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8djD() //  []
         { []
         }
     {offset
       c8djD: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8djG() //  []
         { []
         }
     {offset
       c8djG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8djG_info" {
     block_c8djG_info:
         const _c8djG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.95866621 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dlv: // global
           _s8abE::P64 = R3;
           R3 = R2;
           R2 = _s8abE::P64;
           call GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.966545838 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dlJ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8dlN; else goto c8dlO;
       c8dlN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dlO: // global
           I64[Sp - 16] = block_c8dlG_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dnH; else goto c8dlH;
       u8dnH: // global
           call _c8dlG(R1) args: 0, res: 0, upd: 0;
       c8dlH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dlG() //  [R1]
         { []
         }
     {offset
       c8dlG: // global
           I64[Sp - 16] = block_c8dlM_info;
           _s8abH::P64 = R1;
           _s8abI::P64 = P64[R1 + 7];
           _s8abJ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s8abJ::P64;
           P64[Sp] = _s8abI::P64;
           P64[Sp + 8] = _s8abH::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dnG; else goto c8dlQ;
       u8dnG: // global
           call _c8dlM(R1) args: 0, res: 0, upd: 0;
       c8dlQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dlG_info" {
     block_c8dlG_info:
         const _c8dlG;
         const 1;
         const 30;
 },
 _c8dlM() //  [R1]
         { []
         }
     {offset
       c8dlM: // global
           I64[Sp - 16] = block_c8dlU_info;
           _s8abK::P64 = R1;
           _s8abL::P64 = P64[R1 + 7];
           _s8abM::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s8abM::P64;
           P64[Sp] = _s8abL::P64;
           P64[Sp + 16] = _s8abK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dnI; else goto c8dlW;
       u8dnI: // global
           call _c8dlU(R1) args: 0, res: 0, upd: 0;
       c8dlW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dlM_info" {
     block_c8dlM_info:
         const _c8dlM;
         const 3;
         const 30;
 },
 _c8dlU() //  [R1]
         { []
         }
     {offset
       c8dlU: // global
           _s8abL::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8dm3; else goto c8dmN;
       c8dm3: // global
           I64[Sp] = block_c8dm0_info;
           R1 = _s8abL::P64;
           if (R1 & 7 != 0) goto u8dnJ; else goto c8dm4;
       u8dnJ: // global
           call _c8dm0(R1) args: 0, res: 0, upd: 0;
       c8dm4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dmN: // global
           I64[Sp] = block_c8dmL_info;
           R1 = _s8abL::P64;
           if (R1 & 7 != 0) goto u8dnK; else goto c8dmO;
       u8dnK: // global
           call _c8dmL(R1) args: 0, res: 0, upd: 0;
       c8dmO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dlU_info" {
     block_c8dlU_info:
         const _c8dlU;
         const 5;
         const 30;
 },
 _c8dm0() //  [R1]
         { []
         }
     {offset
       c8dm0: // global
           if (R1 & 7 == 1) goto c8dmb; else goto u8dnD;
       c8dmb: // global
           I64[Sp] = block_c8dm8_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8dnL; else goto c8dmc;
       u8dnL: // global
           call _c8dm8(R1) args: 0, res: 0, upd: 0;
       c8dmc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dnD: // global
           Sp = Sp + 40;
           call _c8dni() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dm0_info" {
     block_c8dm0_info:
         const _c8dm0;
         const 133;
         const 30;
 },
 _c8dm8() //  [R1]
         { []
         }
     {offset
       c8dm8: // global
           _s8abM::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dmj; else goto c8dmz;
       c8dmj: // global
           I64[Sp + 24] = block_c8dmg_info;
           R1 = _s8abM::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dnN; else goto c8dmk;
       u8dnN: // global
           call _c8dmg(R1) args: 0, res: 0, upd: 0;
       c8dmk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dmz: // global
           I64[Sp + 24] = block_c8dmx_info;
           R1 = _s8abM::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dnO; else goto c8dmA;
       u8dnO: // global
           call _c8dmx() args: 0, res: 0, upd: 0;
       c8dmA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dm8_info" {
     block_c8dm8_info:
         const _c8dm8;
         const 389;
         const 30;
 },
 _c8dmg() //  [R1]
         { []
         }
     {offset
       c8dmg: // global
           if (R1 & 7 == 1) goto u8dnE; else goto u8dnF;
       u8dnE: // global
           Sp = Sp + 8;
           call _c8dne() args: 0, res: 0, upd: 0;
       u8dnF: // global
           Sp = Sp + 16;
           call _c8dni() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dmg_info" {
     block_c8dmg_info:
         const _c8dmg;
         const 2;
         const 30;
 },
 _c8dmx() //  []
         { []
         }
     {offset
       c8dmx: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dmx_info" {
     block_c8dmx_info:
         const _c8dmx;
         const 130;
         const 30;
 },
 _c8dmL() //  [R1]
         { []
         }
     {offset
       c8dmL: // global
           if (R1 & 7 == 1) goto u8dnA; else goto c8dmZ;
       u8dnA: // global
           Sp = Sp + 32;
           call _c8dne() args: 0, res: 0, upd: 0;
       c8dmZ: // global
           I64[Sp] = block_c8dmX_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8dnR; else goto c8dn0;
       u8dnR: // global
           call _c8dmX(R1) args: 0, res: 0, upd: 0;
       c8dn0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dmL_info" {
     block_c8dmL_info:
         const _c8dmL;
         const 133;
         const 30;
 },
 _c8dmX() //  [R1]
         { []
         }
     {offset
       c8dmX: // global
           _s8abM::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dn7; else goto c8dnn;
       c8dn7: // global
           I64[Sp + 24] = block_c8dn4_info;
           R1 = _s8abM::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dnT; else goto c8dn8;
       u8dnT: // global
           call _c8dn4(R1) args: 0, res: 0, upd: 0;
       c8dn8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dnn: // global
           I64[Sp + 24] = block_c8dnl_info;
           R1 = _s8abM::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8dnU; else goto c8dno;
       u8dnU: // global
           call _c8dnl() args: 0, res: 0, upd: 0;
       c8dno: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dmX_info" {
     block_c8dmX_info:
         const _c8dmX;
         const 389;
         const 30;
 },
 _c8dn4() //  [R1]
         { []
         }
     {offset
       c8dn4: // global
           if (R1 & 7 == 1) goto u8dnB; else goto u8dnC;
       u8dnB: // global
           Sp = Sp + 8;
           call _c8dne() args: 0, res: 0, upd: 0;
       u8dnC: // global
           Sp = Sp + 16;
           call _c8dni() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dn4_info" {
     block_c8dn4_info:
         const _c8dn4;
         const 2;
         const 30;
 },
 _c8dne() //  []
         { []
         }
     {offset
       c8dne: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dni() //  []
         { []
         }
     {offset
       c8dni: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dnl() //  []
         { []
         }
     {offset
       c8dnl: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dnl_info" {
     block_c8dnl_info:
         const _c8dnl;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.989395098 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Handle.Types.$fEqNewlineMode_closure+1;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.9911424 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadBufferMode13_bytes" {
     GHC.IO.Handle.Types.$fReadBufferMode13_bytes:
         I8[] [78,111,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.993434813 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode12_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode12_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode12_entry() //  [R1]
         { []
         }
     {offset
       c8dpi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dpj; else goto c8dpk;
       c8dpj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dpk: // global
           (_c8dpf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8dpf::I64 == 0) goto c8dph; else goto c8dpg;
       c8dph: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8dpg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8dpf::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode12_info" {
     GHC.IO.Handle.Types.$fReadBufferMode12_info:
         const GHC.IO.Handle.Types.$fReadBufferMode12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:17.997434023 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode6_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode6_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode6_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode6_entry() //  [R2]
         { []
         }
     {offset
       c8dpw: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode12_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode6_info" {
     GHC.IO.Handle.Types.$fShowBufferMode6_info:
         const GHC.IO.Handle.Types.$fShowBufferMode6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8alj_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.0003312 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadBufferMode9_bytes" {
     GHC.IO.Handle.Types.$fReadBufferMode9_bytes:
         I8[] [76,105,110,101,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.002452267 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode8_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode8_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode8_entry() //  [R1]
         { []
         }
     {offset
       c8dpK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dpL; else goto c8dpM;
       c8dpL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dpM: // global
           (_c8dpH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8dpH::I64 == 0) goto c8dpJ; else goto c8dpI;
       c8dpJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8dpI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8dpH::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode8_info" {
     GHC.IO.Handle.Types.$fReadBufferMode8_info:
         const GHC.IO.Handle.Types.$fReadBufferMode8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.00695046 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode5_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode5_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode5_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode5_entry() //  [R2]
         { []
         }
     {offset
       c8dpY: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode5_info" {
     GHC.IO.Handle.Types.$fShowBufferMode5_info:
         const GHC.IO.Handle.Types.$fShowBufferMode5_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8alj_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.00997894 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowBufferMode4_bytes" {
     GHC.IO.Handle.Types.$fShowBufferMode4_bytes:
         I8[] [66,108,111,99,107,66,117,102,102,101,114,105,110,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.012227571 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode3_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode3_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode3_entry() //  [R1]
         { []
         }
     {offset
       c8dqc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dqd; else goto c8dqe;
       c8dqd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dqe: // global
           (_c8dq9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8dq9::I64 == 0) goto c8dqb; else goto c8dqa;
       c8dqb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8dqa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8dq9::I64;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode3_info" {
     GHC.IO.Handle.Types.$fShowBufferMode3_info:
         const GHC.IO.Handle.Types.$fShowBufferMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.020098707 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_info;
         const 0;
 },
 g_s8ac2_entry() //  [R1]
         { []
         }
     {offset
       c8dqG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dqH; else goto c8dqI;
       c8dqH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dqI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s8ac2_info" {
     g_s8ac2_info:
         const g_s8ac2_entry;
         const 1;
         const 4294967312;
         const S8alj_srt+352;
 },
 sat_s8ac5_entry() //  [R1]
         { []
         }
     {offset
       c8dqV: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ac5_info" {
     sat_s8ac5_info:
         const sat_s8ac5_entry;
         const 2;
         const 18;
 },
 sat_s8ac6_entry() //  [R1, R2]
         { []
         }
     {offset
       c8dqY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8dr2; else goto c8dr1;
       c8dr2: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dr1: // global
           _s8ac2::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s8ac5_info;
           P64[Hp - 8] = _s8ac2::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ac6_info" {
     sat_s8ac6_info:
         const sat_s8ac6_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S8alj_srt+360;
 },
 sat_s8ac9_entry() //  [R1]
         { []
         }
     {offset
       c8dri: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8drm; else goto c8drl;
       c8drm: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8drl: // global
           _s8ac2::P64 = P64[R1 + 16];
           _s8ac7::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s8ac7::P64;
           R2 = Hp - 14;
           R1 = _s8ac2::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ac9_info" {
     sat_s8ac9_info:
         const sat_s8ac9_entry;
         const 2;
         const 18;
 },
 sat_s8aca_entry() //  [R1]
         { []
         }
     {offset
       c8drn: // global
           _s8aca::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8dro; else goto c8drp;
       c8drp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8drr; else goto c8drq;
       c8drr: // global
           HpAlloc = 32;
           goto c8dro;
       c8dro: // global
           R1 = _s8aca::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8drq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8aca::P64;
           _s8ac2::P64 = P64[_s8aca::P64 + 16];
           _s8ac7::P64 = P64[_s8aca::P64 + 24];
           I64[Hp - 24] = sat_s8ac9_info;
           P64[Hp - 8] = _s8ac2::P64;
           P64[Hp] = _s8ac7::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8aca_info" {
     sat_s8aca_info:
         const sat_s8aca_entry;
         const 2;
         const 4294967314;
         const S8alj_srt+360;
 },
 sat_s8acb_entry() //  [R1, R2]
         { []
         }
     {offset
       c8drt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8drx; else goto c8drw;
       c8drx: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8drw: // global
           _s8ac2::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s8aca_info;
           P64[Hp - 32] = _s8ac2::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8acb_info" {
     sat_s8acb_info:
         const sat_s8acb_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S8alj_srt+360;
 },
 GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8drD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8drE; else goto c8drF;
       c8drE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8drF: // global
           I64[Sp - 16] = block_c8dqq_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8drT; else goto c8dqr;
       u8drT: // global
           call _c8dqq(R1) args: 0, res: 0, upd: 0;
       c8dqr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S8alj_srt+352;
 },
 _c8dqq() //  [R1]
         { []
         }
     {offset
       c8dqq: // global
           _c8drC::P64 = R1 & 7;
           if (_c8drC::P64 < 3) goto u8drR; else goto c8drB;
       u8drR: // global
           if (_c8drC::P64 < 2) goto c8drz; else goto c8drA;
       c8drz: // global
           R1 = GHC.IO.Handle.Types.$fShowBufferMode6_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8drA: // global
           R1 = GHC.IO.Handle.Types.$fShowBufferMode5_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8drB: // global
           I64[Sp] = block_c8dqx_info;
           _s8abZ::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8abZ::P64;
           if (R1 & 7 != 0) goto u8drS; else goto c8dqy;
       u8drS: // global
           call _c8dqx(R1) args: 0, res: 0, upd: 0;
       c8dqy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dqq_info" {
     block_c8dqq_info:
         const _c8dqq;
         const 1;
         const 115964117022;
         const S8alj_srt+352;
 },
 _c8dqx() //  [R1]
         { []
         }
     {offset
       c8dqx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8drN; else goto c8drM;
       c8drN: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8drM: // global
           _s8ac1::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s8ac2_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c8dqC::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s8ac1::I64, 11)) goto c8drP; else goto c8drQ;
       c8drP: // global
           I64[Hp - 8] = sat_s8ac6_info;
           P64[Hp] = _c8dqC::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8drQ: // global
           I64[Hp - 8] = sat_s8acb_info;
           P64[Hp] = _c8dqC::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dqx_info" {
     block_c8dqx_info:
         const _c8dqx;
         const 1;
         const 12884901918;
         const S8alj_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.036532175 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode7_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode7_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.042132506 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_info;
         const 0;
 },
 sat_s8acm_entry() //  [R1]
         { []
         }
     {offset
       c8dt6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8dtc; else goto c8dtd;
       c8dtc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dtd: // global
           I64[Sp - 8] = block_c8dt3_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dti; else goto c8dt4;
       u8dti: // global
           call _c8dt3(R1) args: 0, res: 0, upd: 0;
       c8dt4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8acm_info" {
     sat_s8acm_info:
         const sat_s8acm_entry;
         const 1;
         const 16;
 },
 _c8dt3() //  [R1]
         { []
         }
     {offset
       c8dt3: // global
           I64[Sp] = block_c8dt9_info;
           R4 = GHC.IO.Handle.Types.$fShowBufferMode7_closure+2;
           R3 = I64[R1 + 7];
           R2 = 11;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dt3_info" {
     block_c8dt3_info:
         const _c8dt3;
         const 0;
         const 30;
 },
 _c8dt9() //  [R1, R2]
         { []
         }
     {offset
       c8dt9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8dth; else goto c8dtg;
       c8dth: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c8dtg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dt9_info" {
     block_c8dt9_info:
         const _c8dt9;
         const 0;
         const 30;
 },
 sat_s8acn_entry() //  [R1]
         { []
         }
     {offset
       c8dtj: // global
           _s8acn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8dtk; else goto c8dtl;
       c8dtl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8dtn; else goto c8dtm;
       c8dtn: // global
           HpAlloc = 24;
           goto c8dtk;
       c8dtk: // global
           R1 = _s8acn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dtm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8acn::P64;
           _s8acg::P64 = P64[_s8acn::P64 + 16];
           I64[Hp - 16] = sat_s8acm_info;
           P64[Hp] = _s8acg::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8acn_info" {
     sat_s8acn_info:
         const sat_s8acn_entry;
         const 1;
         const 4294967312;
         const S8alj_srt+392;
 },
 sat_s8aco_entry() //  [R1]
         { []
         }
     {offset
       c8dts: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8dtt; else goto c8dtu;
       c8dtt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dtu: // global
           I64[Sp - 8] = block_c8dsP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dtB; else goto c8dsQ;
       u8dtB: // global
           call _c8dsP(R1) args: 0, res: 0, upd: 0;
       c8dsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8aco_info" {
     sat_s8aco_info:
         const sat_s8aco_entry;
         const 1;
         const 12884901904;
         const S8alj_srt+392;
 },
 _c8dsP() //  [R1]
         { []
         }
     {offset
       c8dsP: // global
           if (R1 & 7 == 1) goto c8dtp; else goto c8dtq;
       c8dtp: // global
           R1 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8dtq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8dtA; else goto c8dtz;
       c8dtA: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8dtz: // global
           _s8acg::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s8acn_info;
           P64[Hp - 24] = _s8acg::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dsP_info" {
     block_c8dsP_info:
         const _c8dsP;
         const 0;
         const 12884901918;
         const S8alj_srt+392;
 },
 GHC.IO.Handle.Types.$fShowBufferMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8dtH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8dtI; else goto c8dtJ;
       c8dtI: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dtJ: // global
           I64[Sp - 8] = block_c8dsE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dtS; else goto c8dsF;
       u8dtS: // global
           call _c8dsE(R1) args: 0, res: 0, upd: 0;
       c8dsF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode_$cshow_info" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshow_info:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_entry;
         const 0;
         const 3895535337486;
         const 4294967301;
         const S8alj_srt+336;
 },
 _c8dsE() //  [R1]
         { []
         }
     {offset
       c8dsE: // global
           _c8dtG::P64 = R1 & 7;
           if (_c8dtG::P64 < 3) goto u8dtR; else goto c8dtF;
       u8dtR: // global
           if (_c8dtG::P64 < 2) goto c8dtD; else goto c8dtE;
       c8dtD: // global
           R1 = GHC.IO.Handle.Types.$fReadBufferMode12_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8dtE: // global
           R1 = GHC.IO.Handle.Types.$fReadBufferMode8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8dtF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8dtQ; else goto c8dtP;
       c8dtQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8dtP: // global
           _s8ace::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_s8aco_info;
           P64[Hp] = _s8ace::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode3_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dsE_info" {
     block_c8dsE_info:
         const _c8dsE;
         const 0;
         const 1696512081950;
         const S8alj_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.058389316 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode1_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode1_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode1_entry() //  [R2]
         { []
         }
     {offset
       c8duC: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode2_closure+1;
           call GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode1_info" {
     GHC.IO.Handle.Types.$fShowBufferMode1_info:
         const GHC.IO.Handle.Types.$fShowBufferMode1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8alj_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.061831023 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c8duN: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8alj_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.064909162 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure+2;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.067043744 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode11_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode11_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode11_info;
 },
 GHC.IO.Handle.Types.$fReadBufferMode11_entry() //  [R3]
         { []
         }
     {offset
       c8duZ: // global
           R2 = GHC.IO.Handle.Types.NoBuffering_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode11_info" {
     GHC.IO.Handle.Types.$fReadBufferMode11_info:
         const GHC.IO.Handle.Types.$fReadBufferMode11_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.070162542 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode10_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode10_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode12_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.072194798 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode7_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode7_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode7_info;
 },
 GHC.IO.Handle.Types.$fReadBufferMode7_entry() //  [R3]
         { []
         }
     {offset
       c8dvb: // global
           R2 = GHC.IO.Handle.Types.LineBuffering_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode7_info" {
     GHC.IO.Handle.Types.$fReadBufferMode7_info:
         const GHC.IO.Handle.Types.$fReadBufferMode7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.075500459 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode6_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode6_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode8_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.079300328 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode5_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode5_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.081109549 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_sps_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_sps_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode10_closure+1;
         const GHC.IO.Handle.Types.$fReadBufferMode5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.08283054 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadBufferMode4_bytes" {
     GHC.IO.Handle.Types.$fReadBufferMode4_bytes:
         I8[] [66,108,111,99,107,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.085190359 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode3_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode3_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode3_entry() //  [R1]
         { []
         }
     {offset
       c8dvs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dvt; else goto c8dvu;
       c8dvt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dvu: // global
           (_c8dvp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8dvp::I64 == 0) goto c8dvr; else goto c8dvq;
       c8dvr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8dvq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8dvp::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode3_info" {
     GHC.IO.Handle.Types.$fReadBufferMode3_info:
         const GHC.IO.Handle.Types.$fReadBufferMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.088807381 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.095687049 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode2_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode2_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode2_info;
         const 0;
 },
 ds2_s8acw_entry() //  [R1]
         { []
         }
     {offset
       c8dvL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dvM; else goto c8dvN;
       c8dvM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dvN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadBufferMode_sps_closure+2;
           Sp = Sp - 16;
           call GHC.Read.choose2_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s8acw_info" {
     ds2_s8acw_info:
         const ds2_s8acw_entry;
         const 1;
         const 12884901904;
         const S8alj_srt+424;
 },
 sat_s8acF_entry() //  [R1, R2]
         { []
         }
     {offset
       c8dwh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8dwl; else goto c8dwk;
       c8dwl: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dwk: // global
           _s8acx::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.IO.Handle.Types.BlockBuffering_con_info;
           P64[Hp] = R2;
           R2 = Hp - 5;
           R1 = _s8acx::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8acF_info" {
     sat_s8acF_info:
         const sat_s8acF_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s8acG_entry() //  [R1, R2]
         { []
         }
     {offset
       c8dwm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8dwq; else goto c8dwp;
       c8dwq: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dwp: // global
           _s8acx::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s8acF_info;
           P64[Hp] = _s8acx::P64;
           R4 = Hp - 7;
           R3 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R2 = GHC.Read.$fReadInt_closure;
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8acG_info" {
     sat_s8acG_info:
         const sat_s8acG_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S8alj_srt+440;
 },
 sat_s8acJ_entry() //  [R1]
         { []
         }
     {offset
       c8dwr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8dws; else goto c8dwt;
       c8dws: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dwt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8dvX_info;
           _s8acx::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s8acx::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8dwG; else goto c8dvY;
       u8dwG: // global
           call _c8dvX(R1) args: 0, res: 0, upd: 0;
       c8dvY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8acJ_info" {
     sat_s8acJ_info:
         const sat_s8acJ_entry;
         const 2;
         const 8070450536542896146;
         const S8alj_srt+216;
 },
 _c8dvX() //  [R1]
         { []
         }
     {offset
       c8dvX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8dww; else goto c8dwv;
       c8dww: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8dwv: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c8dwy; else goto c8dwC;
       c8dwy: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8dwC: // global
           I64[Hp - 8] = sat_s8acG_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8dwz_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure+4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8dvX_info" {
     block_c8dvX_info:
         const _c8dvX;
         const 1;
         const 8070450536542896158;
         const S8alj_srt+216;
 },
 _c8dwz() //  [R1]
         { []
         }
     {offset
       c8dwz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8dwF; else goto c8dwE;
       c8dwF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8dwE: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8dwz_info" {
     block_c8dwz_info:
         const _c8dwz;
         const 0;
         const 30;
 },
 sat_s8acK_entry() //  [R1, R2]
         { []
         }
     {offset
       c8dwJ: // global
           _s8acx::P64 = R2;
           _s8acK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8dwK; else goto c8dwL;
       c8dwL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8dwN; else goto c8dwM;
       c8dwN: // global
           HpAlloc = 32;
           goto c8dwK;
       c8dwK: // global
           R2 = _s8acx::P64;
           R1 = _s8acK::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dwM: // global
           _s8acv::P64 = P64[_s8acK::P64 + 7];
           _s8acw::P64 = P64[_s8acK::P64 + 15];
           I64[Hp - 24] = sat_s8acJ_info;
           P64[Hp - 8] = _s8acv::P64;
           P64[Hp] = _s8acx::P64;
           I64[Sp - 16] = block_c8dwH_info;
           R2 = _s8acx::P64;
           R1 = _s8acw::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8acK_info" {
     sat_s8acK_info:
         const sat_s8acK_entry;
         const 2;
         const 17293822573397671947;
         const 4294967301;
         const S8alj_srt+216;
 },
 _c8dwH() //  [R1]
         { []
         }
     {offset
       c8dwH: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dwH_info" {
     block_c8dwH_info:
         const _c8dwH;
         const 1;
         const 4294967326;
         const S8alj_srt+464;
 },
 section ""relreadonly" . u8dwW_srtd" {
     u8dwW_srtd:
         const S8alj_srt+216;
         const 33;
         const 8522825729;
 },
 GHC.IO.Handle.Types.$fReadBufferMode2_entry() //  [R2]
         { []
         }
     {offset
       c8dwR: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8dwV; else goto c8dwU;
       c8dwV: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadBufferMode2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dwU: // global
           I64[Hp - 40] = ds2_s8acw_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s8acK_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode2_info" {
     GHC.IO.Handle.Types.$fReadBufferMode2_info:
         const GHC.IO.Handle.Types.$fReadBufferMode2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8dwW_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.114255286 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode1_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode1_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode1_info;
         const 0;
 },
 section ""relreadonly" . u8dxH_srtd" {
     u8dxH_srtd:
         const S8alj_srt+160;
         const 40;
         const 549755813889;
 },
 GHC.IO.Handle.Types.$fReadBufferMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dxE: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode1_info" {
     GHC.IO.Handle.Types.$fReadBufferMode1_info:
         const GHC.IO.Handle.Types.$fReadBufferMode1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u8dxH_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.11979217 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u8dy3_srtd" {
     u8dy3_srtd:
         const S8alj_srt+160;
         const 40;
         const 549755813889;
 },
 sat_s8acM_entry() //  [R1]
         { []
         }
     {offset
       c8dxV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dxW; else goto c8dxX;
       c8dxW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dxX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadBufferMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8acM_info" {
     sat_s8acM_info:
         const sat_s8acM_entry;
         const 1;
         const 18446744069414584336;
         const u8dy3_srtd;
 },
 section ""relreadonly" . u8dy4_srtd" {
     u8dy4_srtd:
         const S8alj_srt+160;
         const 41;
         const 1649267441665;
 },
 GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8dxY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8dy2; else goto c8dy1;
       c8dy2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dy1: // global
           I64[Hp - 16] = sat_s8acM_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_info" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_info:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8dy4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.126672897 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8dyl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dym; else goto c8dyn;
       c8dym: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dyn: // global
           (_c8dyi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8dyi::I64 == 0) goto c8dyk; else goto c8dyj;
       c8dyk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8dyj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8dyi::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_info" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_info:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S8alj_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.130906724 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode14_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode14_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode14_entry() //  [R1]
         { []
         }
     {offset
       c8dyB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dyC; else goto c8dyD;
       c8dyC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8dyD: // global
           (_c8dyy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8dyy::I64 == 0) goto c8dyA; else goto c8dyz;
       c8dyA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8dyz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8dyy::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode14_info" {
     GHC.IO.Handle.Types.$fReadBufferMode14_info:
         const GHC.IO.Handle.Types.$fReadBufferMode14_entry;
         const 0;
         const 4294967317;
         const S8alj_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.134907503 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_$creadList_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadList_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8dyP: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode14_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode_$creadList_info" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadList_info:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8alj_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.138592329 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure+1;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadList_closure+1;
         const GHC.IO.Handle.Types.$fReadBufferMode1_closure+2;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.143609976 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dz9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dza; else goto c8dzb;
       c8dza: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dzb: // global
           I64[Sp - 16] = block_c8dz1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dAN; else goto c8dz2;
       u8dAN: // global
           call _c8dz1(R1) args: 0, res: 0, upd: 0;
       c8dz2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dz1() //  [R1]
         { []
         }
     {offset
       c8dz1: // global
           _s8acO::P64 = P64[Sp + 8];
           _c8dz8::P64 = R1 & 7;
           if (_c8dz8::P64 < 3) goto u8dAB; else goto c8dz7;
       u8dAB: // global
           if (_c8dz8::P64 < 2) goto c8dz5; else goto c8dz6;
       c8dz5: // global
           I64[Sp + 8] = block_c8dze_info;
           R1 = _s8acO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dAK; else goto c8dzg;
       u8dAK: // global
           call _c8dze(R1) args: 0, res: 0, upd: 0;
       c8dzg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dz6: // global
           I64[Sp + 8] = block_c8dzt_info;
           R1 = _s8acO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dAL; else goto c8dzv;
       u8dAL: // global
           call _c8dzt(R1) args: 0, res: 0, upd: 0;
       c8dzv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dz7: // global
           I64[Sp] = block_c8dzI_info;
           _s8acT::P64 = P64[R1 + 5];
           R1 = _s8acO::P64;
           P64[Sp + 8] = _s8acT::P64;
           if (R1 & 7 != 0) goto u8dAM; else goto c8dzK;
       u8dAM: // global
           call _c8dzI(R1) args: 0, res: 0, upd: 0;
       c8dzK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dz1_info" {
     block_c8dz1_info:
         const _c8dz1;
         const 1;
         const 30;
 },
 _c8dze() //  [R1]
         { []
         }
     {offset
       c8dze: // global
           if (R1 & 7 == 1) goto u8dAC; else goto u8dAD;
       u8dAC: // global
           Sp = Sp + 8;
           call _c8dAq() args: 0, res: 0, upd: 0;
       u8dAD: // global
           Sp = Sp + 8;
           call _c8dAe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dze_info" {
     block_c8dze_info:
         const _c8dze;
         const 0;
         const 30;
 },
 _c8dzt() //  [R1]
         { []
         }
     {offset
       c8dzt: // global
           if (R1 & 7 == 3) goto u8dAE; else goto u8dAF;
       u8dAE: // global
           Sp = Sp + 8;
           call _c8dAe() args: 0, res: 0, upd: 0;
       u8dAF: // global
           Sp = Sp + 8;
           call _c8dAq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dzt_info" {
     block_c8dzt_info:
         const _c8dzt;
         const 0;
         const 30;
 },
 _c8dzI() //  [R1]
         { []
         }
     {offset
       c8dzI: // global
           if (R1 & 7 == 3) goto c8dzV; else goto u8dAG;
       c8dzV: // global
           I64[Sp] = block_c8dzT_info;
           _s8acV::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8acV::P64;
           if (R1 & 7 != 0) goto u8dAS; else goto c8dzW;
       u8dAS: // global
           call _c8dzT(R1) args: 0, res: 0, upd: 0;
       c8dzW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dAG: // global
           Sp = Sp + 16;
           call _c8dAq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dzI_info" {
     block_c8dzI_info:
         const _c8dzI;
         const 1;
         const 30;
 },
 _c8dzT() //  [R1]
         { []
         }
     {offset
       c8dzT: // global
           _s8acV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dA3; else goto c8dAj;
       c8dA3: // global
           I64[Sp + 8] = block_c8dA0_info;
           R1 = _s8acV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dAU; else goto c8dA4;
       u8dAU: // global
           call _c8dA0(R1) args: 0, res: 0, upd: 0;
       c8dA4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dAj: // global
           I64[Sp] = block_c8dAh_info;
           _s8acZ::P64 = P64[R1 + 6];
           R1 = _s8acV::P64;
           P64[Sp + 8] = _s8acZ::P64;
           if (R1 & 7 != 0) goto u8dAV; else goto c8dAk;
       u8dAV: // global
           call _c8dAh(R1) args: 0, res: 0, upd: 0;
       c8dAk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dzT_info" {
     block_c8dzT_info:
         const _c8dzT;
         const 1;
         const 30;
 },
 _c8dA0() //  [R1]
         { []
         }
     {offset
       c8dA0: // global
           if (R1 & 7 == 1) goto u8dAI; else goto u8dAJ;
       u8dAI: // global
           Sp = Sp + 8;
           call _c8dAq() args: 0, res: 0, upd: 0;
       u8dAJ: // global
           Sp = Sp + 8;
           call _c8dAe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dA0_info" {
     block_c8dA0_info:
         const _c8dA0;
         const 0;
         const 30;
 },
 _c8dAe() //  []
         { []
         }
     {offset
       c8dAe: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dAh() //  [R1]
         { []
         }
     {offset
       c8dAh: // global
           if (R1 & 7 == 1) goto u8dAH; else goto c8dAu;
       u8dAH: // global
           Sp = Sp + 16;
           call _c8dAq() args: 0, res: 0, upd: 0;
       c8dAu: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dAh_info" {
     block_c8dAh_info:
         const _c8dAh;
         const 1;
         const 30;
 },
 _c8dAq() //  []
         { []
         }
     {offset
       c8dAq: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.164672965 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dC1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dC2; else goto c8dC3;
       c8dC2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dC3: // global
           I64[Sp - 16] = block_c8dBT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dDL; else goto c8dBU;
       u8dDL: // global
           call _c8dBT(R1) args: 0, res: 0, upd: 0;
       c8dBU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dBT() //  [R1]
         { []
         }
     {offset
       c8dBT: // global
           _s8ad3::P64 = P64[Sp + 8];
           _c8dC0::P64 = R1 & 7;
           if (_c8dC0::P64 < 3) goto u8dDx; else goto c8dBZ;
       u8dDx: // global
           if (_c8dC0::P64 < 2) goto c8dBX; else goto c8dBY;
       c8dBX: // global
           I64[Sp + 8] = block_c8dC6_info;
           R1 = _s8ad3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dDI; else goto c8dC8;
       u8dDI: // global
           call _c8dC6(R1) args: 0, res: 0, upd: 0;
       c8dC8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dBY: // global
           I64[Sp + 8] = block_c8dCl_info;
           R1 = _s8ad3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dDJ; else goto c8dCn;
       u8dDJ: // global
           call _c8dCl(R1) args: 0, res: 0, upd: 0;
       c8dCn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dBZ: // global
           I64[Sp] = block_c8dCE_info;
           _s8ad8::P64 = P64[R1 + 5];
           R1 = _s8ad3::P64;
           P64[Sp + 8] = _s8ad8::P64;
           if (R1 & 7 != 0) goto u8dDK; else goto c8dCG;
       u8dDK: // global
           call _c8dCE(R1) args: 0, res: 0, upd: 0;
       c8dCG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dBT_info" {
     block_c8dBT_info:
         const _c8dBT;
         const 1;
         const 30;
 },
 _c8dC6() //  [R1]
         { []
         }
     {offset
       c8dC6: // global
           if (R1 & 7 == 1) goto u8dDz; else goto u8dDA;
       u8dDz: // global
           Sp = Sp + 8;
           call _c8dD6() args: 0, res: 0, upd: 0;
       u8dDA: // global
           Sp = Sp + 8;
           call _c8dDa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dC6_info" {
     block_c8dC6_info:
         const _c8dC6;
         const 0;
         const 30;
 },
 _c8dCl() //  [R1]
         { []
         }
     {offset
       c8dCl: // global
           _c8dDv::P64 = R1 & 7;
           if (_c8dDv::P64 < 3) goto u8dDy; else goto u8dDB;
       u8dDy: // global
           if (_c8dDv::P64 < 2) goto u8dDD; else goto u8dDC;
       u8dDD: // global
           Sp = Sp + 8;
           call _c8dDm() args: 0, res: 0, upd: 0;
       u8dDC: // global
           Sp = Sp + 8;
           call _c8dD6() args: 0, res: 0, upd: 0;
       u8dDB: // global
           Sp = Sp + 8;
           call _c8dDa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dCl_info" {
     block_c8dCl_info:
         const _c8dCl;
         const 0;
         const 30;
 },
 _c8dCE() //  [R1]
         { []
         }
     {offset
       c8dCE: // global
           if (R1 & 7 == 3) goto c8dCR; else goto u8dDE;
       c8dCR: // global
           I64[Sp] = block_c8dCP_info;
           _s8ada::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ada::P64;
           if (R1 & 7 != 0) goto u8dDR; else goto c8dCS;
       u8dDR: // global
           call _c8dCP(R1) args: 0, res: 0, upd: 0;
       c8dCS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dDE: // global
           Sp = Sp + 16;
           call _c8dDm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dCE_info" {
     block_c8dCE_info:
         const _c8dCE;
         const 1;
         const 30;
 },
 _c8dCP() //  [R1]
         { []
         }
     {offset
       c8dCP: // global
           _s8ada::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dCZ; else goto c8dDf;
       c8dCZ: // global
           I64[Sp + 8] = block_c8dCW_info;
           R1 = _s8ada::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dDT; else goto c8dD0;
       u8dDT: // global
           call _c8dCW(R1) args: 0, res: 0, upd: 0;
       c8dD0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dDf: // global
           I64[Sp] = block_c8dDd_info;
           _s8ade::P64 = P64[R1 + 6];
           R1 = _s8ada::P64;
           P64[Sp + 8] = _s8ade::P64;
           if (R1 & 7 != 0) goto u8dDU; else goto c8dDg;
       u8dDU: // global
           call _c8dDd(R1) args: 0, res: 0, upd: 0;
       c8dDg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dCP_info" {
     block_c8dCP_info:
         const _c8dCP;
         const 1;
         const 30;
 },
 _c8dCW() //  [R1]
         { []
         }
     {offset
       c8dCW: // global
           if (R1 & 7 == 1) goto u8dDG; else goto u8dDH;
       u8dDG: // global
           Sp = Sp + 8;
           call _c8dD6() args: 0, res: 0, upd: 0;
       u8dDH: // global
           Sp = Sp + 8;
           call _c8dDa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dCW_info" {
     block_c8dCW_info:
         const _c8dCW;
         const 0;
         const 30;
 },
 _c8dD6() //  []
         { []
         }
     {offset
       c8dD6: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dDa() //  []
         { []
         }
     {offset
       c8dDa: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dDd() //  [R1]
         { []
         }
     {offset
       c8dDd: // global
           if (R1 & 7 == 1) goto u8dDF; else goto c8dDq;
       u8dDF: // global
           Sp = Sp + 16;
           call _c8dDm() args: 0, res: 0, upd: 0;
       c8dDq: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dDd_info" {
     block_c8dDd_info:
         const _c8dDd;
         const 1;
         const 30;
 },
 _c8dDm() //  []
         { []
         }
     {offset
       c8dDm: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.185742655 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqBufferMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dF2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dF3; else goto c8dF4;
       c8dF3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dF4: // global
           I64[Sp - 16] = block_c8dEU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dGG; else goto c8dEV;
       u8dGG: // global
           call _c8dEU(R1) args: 0, res: 0, upd: 0;
       c8dEV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqBufferMode_$c==_info" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c==_info:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dEU() //  [R1]
         { []
         }
     {offset
       c8dEU: // global
           _s8adi::P64 = P64[Sp + 8];
           _c8dF1::P64 = R1 & 7;
           if (_c8dF1::P64 < 3) goto u8dGu; else goto c8dF0;
       u8dGu: // global
           if (_c8dF1::P64 < 2) goto c8dEY; else goto c8dEZ;
       c8dEY: // global
           I64[Sp + 8] = block_c8dF7_info;
           R1 = _s8adi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dGD; else goto c8dF9;
       u8dGD: // global
           call _c8dF7(R1) args: 0, res: 0, upd: 0;
       c8dF9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dEZ: // global
           I64[Sp + 8] = block_c8dFm_info;
           R1 = _s8adi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dGE; else goto c8dFo;
       u8dGE: // global
           call _c8dFm(R1) args: 0, res: 0, upd: 0;
       c8dFo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dF0: // global
           I64[Sp] = block_c8dFB_info;
           _s8adm::P64 = P64[R1 + 5];
           R1 = _s8adi::P64;
           P64[Sp + 8] = _s8adm::P64;
           if (R1 & 7 != 0) goto u8dGF; else goto c8dFD;
       u8dGF: // global
           call _c8dFB(R1) args: 0, res: 0, upd: 0;
       c8dFD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dEU_info" {
     block_c8dEU_info:
         const _c8dEU;
         const 1;
         const 30;
 },
 _c8dF7() //  [R1]
         { []
         }
     {offset
       c8dF7: // global
           if (R1 & 7 == 1) goto u8dGv; else goto u8dGw;
       u8dGv: // global
           Sp = Sp + 8;
           call _c8dG3() args: 0, res: 0, upd: 0;
       u8dGw: // global
           Sp = Sp + 8;
           call _c8dGj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dF7_info" {
     block_c8dF7_info:
         const _c8dF7;
         const 0;
         const 30;
 },
 _c8dFm() //  [R1]
         { []
         }
     {offset
       c8dFm: // global
           if (R1 & 7 == 2) goto u8dGx; else goto u8dGy;
       u8dGx: // global
           Sp = Sp + 8;
           call _c8dG3() args: 0, res: 0, upd: 0;
       u8dGy: // global
           Sp = Sp + 8;
           call _c8dGj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dFm_info" {
     block_c8dFm_info:
         const _c8dFm;
         const 0;
         const 30;
 },
 _c8dFB() //  [R1]
         { []
         }
     {offset
       c8dFB: // global
           if (R1 & 7 == 3) goto c8dFO; else goto u8dGz;
       c8dFO: // global
           I64[Sp] = block_c8dFM_info;
           _s8ado::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ado::P64;
           if (R1 & 7 != 0) goto u8dGL; else goto c8dFP;
       u8dGL: // global
           call _c8dFM(R1) args: 0, res: 0, upd: 0;
       c8dFP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dGz: // global
           Sp = Sp + 16;
           call _c8dGj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dFB_info" {
     block_c8dFB_info:
         const _c8dFB;
         const 1;
         const 30;
 },
 _c8dFM() //  [R1]
         { []
         }
     {offset
       c8dFM: // global
           _s8ado::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dFW; else goto c8dGc;
       c8dFW: // global
           I64[Sp + 8] = block_c8dFT_info;
           R1 = _s8ado::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dGN; else goto c8dFX;
       u8dGN: // global
           call _c8dFT(R1) args: 0, res: 0, upd: 0;
       c8dFX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dGc: // global
           I64[Sp] = block_c8dGa_info;
           _s8ads::P64 = P64[R1 + 6];
           R1 = _s8ado::P64;
           P64[Sp + 8] = _s8ads::P64;
           if (R1 & 7 != 0) goto u8dGO; else goto c8dGd;
       u8dGO: // global
           call _c8dGa(R1) args: 0, res: 0, upd: 0;
       c8dGd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dFM_info" {
     block_c8dFM_info:
         const _c8dFM;
         const 1;
         const 30;
 },
 _c8dFT() //  [R1]
         { []
         }
     {offset
       c8dFT: // global
           if (R1 & 7 == 1) goto u8dGB; else goto u8dGC;
       u8dGB: // global
           Sp = Sp + 8;
           call _c8dG3() args: 0, res: 0, upd: 0;
       u8dGC: // global
           Sp = Sp + 8;
           call _c8dGj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dFT_info" {
     block_c8dFT_info:
         const _c8dFT;
         const 0;
         const 30;
 },
 _c8dG3() //  []
         { []
         }
     {offset
       c8dG3: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dGa() //  [R1]
         { []
         }
     {offset
       c8dGa: // global
           if (R1 & 7 == 1) goto u8dGA; else goto c8dGn;
       u8dGA: // global
           Sp = Sp + 16;
           call _c8dGj() args: 0, res: 0, upd: 0;
       c8dGn: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dGa_info" {
     block_c8dGa_info:
         const _c8dGa;
         const 1;
         const 30;
 },
 _c8dGj() //  []
         { []
         }
     {offset
       c8dGj: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.207264393 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqBufferMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dHU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dHV; else goto c8dHW;
       c8dHV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dHW: // global
           I64[Sp - 16] = block_c8dHM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dJR; else goto c8dHN;
       u8dJR: // global
           call _c8dHM(R1) args: 0, res: 0, upd: 0;
       c8dHN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqBufferMode_$c/=_info" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c/=_info:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dHM() //  [R1]
         { []
         }
     {offset
       c8dHM: // global
           _s8adw::P64 = P64[Sp + 8];
           _c8dHT::P64 = R1 & 7;
           if (_c8dHT::P64 < 3) goto u8dJD; else goto c8dHS;
       u8dJD: // global
           if (_c8dHT::P64 < 2) goto c8dHQ; else goto c8dHR;
       c8dHQ: // global
           I64[Sp + 8] = block_c8dHZ_info;
           R1 = _s8adw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dJO; else goto c8dI1;
       u8dJO: // global
           call _c8dHZ(R1) args: 0, res: 0, upd: 0;
       c8dI1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dHR: // global
           I64[Sp + 8] = block_c8dIe_info;
           R1 = _s8adw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dJP; else goto c8dIg;
       u8dJP: // global
           call _c8dIe(R1) args: 0, res: 0, upd: 0;
       c8dIg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dHS: // global
           I64[Sp] = block_c8dIt_info;
           _s8adA::P64 = P64[R1 + 5];
           R1 = _s8adw::P64;
           P64[Sp + 8] = _s8adA::P64;
           if (R1 & 7 != 0) goto u8dJQ; else goto c8dIv;
       u8dJQ: // global
           call _c8dIt(R1) args: 0, res: 0, upd: 0;
       c8dIv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dHM_info" {
     block_c8dHM_info:
         const _c8dHM;
         const 1;
         const 30;
 },
 _c8dHZ() //  [R1]
         { []
         }
     {offset
       c8dHZ: // global
           if (R1 & 7 == 1) goto u8dJE; else goto u8dJF;
       u8dJE: // global
           Sp = Sp + 8;
           call _c8dJw() args: 0, res: 0, upd: 0;
       u8dJF: // global
           Sp = Sp + 8;
           call _c8dJv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dHZ_info" {
     block_c8dHZ_info:
         const _c8dHZ;
         const 0;
         const 30;
 },
 _c8dIe() //  [R1]
         { []
         }
     {offset
       c8dIe: // global
           if (R1 & 7 == 2) goto u8dJG; else goto u8dJH;
       u8dJG: // global
           Sp = Sp + 8;
           call _c8dJw() args: 0, res: 0, upd: 0;
       u8dJH: // global
           Sp = Sp + 8;
           call _c8dJv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dIe_info" {
     block_c8dIe_info:
         const _c8dIe;
         const 0;
         const 30;
 },
 _c8dIt() //  [R1]
         { []
         }
     {offset
       c8dIt: // global
           if (R1 & 7 == 3) goto c8dIG; else goto u8dJI;
       c8dIG: // global
           I64[Sp] = block_c8dIE_info;
           _s8adC::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8adC::P64;
           if (R1 & 7 != 0) goto u8dJW; else goto c8dIH;
       u8dJW: // global
           call _c8dIE(R1) args: 0, res: 0, upd: 0;
       c8dIH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dJI: // global
           Sp = Sp + 16;
           call _c8dJv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dIt_info" {
     block_c8dIt_info:
         const _c8dIt;
         const 1;
         const 30;
 },
 _c8dIE() //  [R1]
         { []
         }
     {offset
       c8dIE: // global
           _s8adC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dIO; else goto c8dJ4;
       c8dIO: // global
           I64[Sp + 8] = block_c8dIL_info;
           R1 = _s8adC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dJY; else goto c8dIP;
       u8dJY: // global
           call _c8dIL(R1) args: 0, res: 0, upd: 0;
       c8dIP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dJ4: // global
           I64[Sp] = block_c8dJ2_info;
           _s8adG::P64 = P64[R1 + 6];
           R1 = _s8adC::P64;
           P64[Sp + 8] = _s8adG::P64;
           if (R1 & 7 != 0) goto u8dJZ; else goto c8dJ5;
       u8dJZ: // global
           call _c8dJ2(R1) args: 0, res: 0, upd: 0;
       c8dJ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dIE_info" {
     block_c8dIE_info:
         const _c8dIE;
         const 1;
         const 30;
 },
 _c8dIL() //  [R1]
         { []
         }
     {offset
       c8dIL: // global
           if (R1 & 7 == 1) goto u8dJM; else goto u8dJN;
       u8dJM: // global
           Sp = Sp + 8;
           call _c8dJw() args: 0, res: 0, upd: 0;
       u8dJN: // global
           Sp = Sp + 8;
           call _c8dJv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dIL_info" {
     block_c8dIL_info:
         const _c8dIL;
         const 0;
         const 30;
 },
 _c8dJ2() //  [R1]
         { []
         }
     {offset
       c8dJ2: // global
           if (R1 & 7 == 1) goto u8dJJ; else goto c8dJl;
       u8dJJ: // global
           Sp = Sp + 16;
           call _c8dJv() args: 0, res: 0, upd: 0;
       c8dJl: // global
           I64[Sp] = block_c8dJe_info;
           _s8adI::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8adI::P64;
           if (R1 & 7 != 0) goto u8dK2; else goto c8dJf;
       u8dK2: // global
           call _c8dJe(R1) args: 0, res: 0, upd: 0;
       c8dJf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dJ2_info" {
     block_c8dJ2_info:
         const _c8dJ2;
         const 1;
         const 30;
 },
 _c8dJe() //  [R1]
         { []
         }
     {offset
       c8dJe: // global
           I64[Sp] = block_c8dJj_info;
           _s8adK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8adK::I64;
           if (R1 & 7 != 0) goto u8dK4; else goto c8dJn;
       u8dK4: // global
           call _c8dJj(R1) args: 0, res: 0, upd: 0;
       c8dJn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dJe_info" {
     block_c8dJe_info:
         const _c8dJe;
         const 1;
         const 30;
 },
 _c8dJj() //  [R1]
         { []
         }
     {offset
       c8dJj: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u8dJK; else goto u8dJL;
       u8dJK: // global
           Sp = Sp + 16;
           call _c8dJw() args: 0, res: 0, upd: 0;
       u8dJL: // global
           Sp = Sp + 16;
           call _c8dJv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dJj_info" {
     block_c8dJj_info:
         const _c8dJj;
         const 65;
         const 30;
 },
 _c8dJw() //  []
         { []
         }
     {offset
       c8dJw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dJv() //  []
         { []
         }
     {offset
       c8dJv: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.226762907 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqBufferMode_closure" {
     GHC.IO.Handle.Types.$fEqBufferMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.232638209 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dLj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dLk; else goto c8dLl;
       c8dLk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dLl: // global
           I64[Sp - 16] = block_c8dLb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dNg; else goto c8dLc;
       u8dNg: // global
           call _c8dLb(R1) args: 0, res: 0, upd: 0;
       c8dLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dLb() //  [R1]
         { []
         }
     {offset
       c8dLb: // global
           _s8adO::P64 = P64[Sp + 8];
           _c8dLi::P64 = R1 & 7;
           if (_c8dLi::P64 < 3) goto u8dN2; else goto c8dLh;
       u8dN2: // global
           if (_c8dLi::P64 < 2) goto c8dLf; else goto c8dLg;
       c8dLf: // global
           I64[Sp + 8] = block_c8dLo_info;
           R1 = _s8adO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dNd; else goto c8dLq;
       u8dNd: // global
           call _c8dLo(R1) args: 0, res: 0, upd: 0;
       c8dLq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dLg: // global
           I64[Sp + 8] = block_c8dLD_info;
           R1 = _s8adO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dNe; else goto c8dLF;
       u8dNe: // global
           call _c8dLD(R1) args: 0, res: 0, upd: 0;
       c8dLF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dLh: // global
           I64[Sp] = block_c8dLS_info;
           _s8adU::P64 = P64[R1 + 5];
           R1 = _s8adO::P64;
           P64[Sp + 8] = _s8adU::P64;
           if (R1 & 7 != 0) goto u8dNf; else goto c8dLU;
       u8dNf: // global
           call _c8dLS(R1) args: 0, res: 0, upd: 0;
       c8dLU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dLb_info" {
     block_c8dLb_info:
         const _c8dLb;
         const 1;
         const 30;
 },
 _c8dLo() //  [R1]
         { []
         }
     {offset
       c8dLo: // global
           if (R1 & 7 == 1) goto u8dN3; else goto u8dN4;
       u8dN3: // global
           Sp = Sp + 8;
           call _c8dMU() args: 0, res: 0, upd: 0;
       u8dN4: // global
           Sp = Sp + 8;
           call _c8dMV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dLo_info" {
     block_c8dLo_info:
         const _c8dLo;
         const 0;
         const 30;
 },
 _c8dLD() //  [R1]
         { []
         }
     {offset
       c8dLD: // global
           if (R1 & 7 == 3) goto u8dN5; else goto u8dN6;
       u8dN5: // global
           Sp = Sp + 8;
           call _c8dMV() args: 0, res: 0, upd: 0;
       u8dN6: // global
           Sp = Sp + 8;
           call _c8dMU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dLD_info" {
     block_c8dLD_info:
         const _c8dLD;
         const 0;
         const 30;
 },
 _c8dLS() //  [R1]
         { []
         }
     {offset
       c8dLS: // global
           if (R1 & 7 == 3) goto c8dM5; else goto u8dN7;
       c8dM5: // global
           I64[Sp] = block_c8dM3_info;
           _s8adW::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8adW::P64;
           if (R1 & 7 != 0) goto u8dNl; else goto c8dM6;
       u8dNl: // global
           call _c8dM3(R1) args: 0, res: 0, upd: 0;
       c8dM6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dN7: // global
           Sp = Sp + 16;
           call _c8dMU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dLS_info" {
     block_c8dLS_info:
         const _c8dLS;
         const 1;
         const 30;
 },
 _c8dM3() //  [R1]
         { []
         }
     {offset
       c8dM3: // global
           _s8adW::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dMd; else goto c8dMt;
       c8dMd: // global
           I64[Sp + 8] = block_c8dMa_info;
           R1 = _s8adW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dNn; else goto c8dMe;
       u8dNn: // global
           call _c8dMa(R1) args: 0, res: 0, upd: 0;
       c8dMe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dMt: // global
           I64[Sp] = block_c8dMr_info;
           _s8ae0::P64 = P64[R1 + 6];
           R1 = _s8adW::P64;
           P64[Sp + 8] = _s8ae0::P64;
           if (R1 & 7 != 0) goto u8dNo; else goto c8dMu;
       u8dNo: // global
           call _c8dMr(R1) args: 0, res: 0, upd: 0;
       c8dMu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dM3_info" {
     block_c8dM3_info:
         const _c8dM3;
         const 1;
         const 30;
 },
 _c8dMa() //  [R1]
         { []
         }
     {offset
       c8dMa: // global
           if (R1 & 7 == 1) goto u8dNb; else goto u8dNc;
       u8dNb: // global
           Sp = Sp + 8;
           call _c8dMU() args: 0, res: 0, upd: 0;
       u8dNc: // global
           Sp = Sp + 8;
           call _c8dMV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dMa_info" {
     block_c8dMa_info:
         const _c8dMa;
         const 0;
         const 30;
 },
 _c8dMr() //  [R1]
         { []
         }
     {offset
       c8dMr: // global
           if (R1 & 7 == 1) goto u8dN8; else goto c8dMK;
       u8dN8: // global
           Sp = Sp + 16;
           call _c8dMU() args: 0, res: 0, upd: 0;
       c8dMK: // global
           I64[Sp] = block_c8dMD_info;
           _s8ae2::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ae2::P64;
           if (R1 & 7 != 0) goto u8dNr; else goto c8dME;
       u8dNr: // global
           call _c8dMD(R1) args: 0, res: 0, upd: 0;
       c8dME: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dMr_info" {
     block_c8dMr_info:
         const _c8dMr;
         const 1;
         const 30;
 },
 _c8dMD() //  [R1]
         { []
         }
     {offset
       c8dMD: // global
           I64[Sp] = block_c8dMI_info;
           _s8ae4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8ae4::I64;
           if (R1 & 7 != 0) goto u8dNt; else goto c8dMM;
       u8dNt: // global
           call _c8dMI(R1) args: 0, res: 0, upd: 0;
       c8dMM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dMD_info" {
     block_c8dMD_info:
         const _c8dMD;
         const 1;
         const 30;
 },
 _c8dMI() //  [R1]
         { []
         }
     {offset
       c8dMI: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8dNa; else goto u8dN9;
       u8dNa: // global
           Sp = Sp + 16;
           call _c8dMU() args: 0, res: 0, upd: 0;
       u8dN9: // global
           Sp = Sp + 16;
           call _c8dMV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dMI_info" {
     block_c8dMI_info:
         const _c8dMI;
         const 65;
         const 30;
 },
 _c8dMV() //  []
         { []
         }
     {offset
       c8dMV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dMU() //  []
         { []
         }
     {offset
       c8dMU: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.256842267 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dOH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8dOI; else goto c8dOJ;
       c8dOI: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dOJ: // global
           I64[Sp - 16] = block_c8dOz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dQm; else goto c8dOA;
       u8dQm: // global
           call _c8dOz(R1) args: 0, res: 0, upd: 0;
       c8dOA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dOz() //  [R1]
         { []
         }
     {offset
       c8dOz: // global
           _s8ae8::P64 = P64[Sp + 8];
           _c8dOG::P64 = R1 & 7;
           if (_c8dOG::P64 < 3) goto u8dQd; else goto c8dOF;
       u8dQd: // global
           if (_c8dOG::P64 < 2) goto c8dOD; else goto c8dOE;
       c8dOD: // global
           R1 = _s8ae8::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8dOE: // global
           I64[Sp + 8] = block_c8dOP_info;
           R1 = _s8ae8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dQk; else goto c8dOR;
       u8dQk: // global
           call _c8dOP(R1) args: 0, res: 0, upd: 0;
       c8dOR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dOF: // global
           I64[Sp - 8] = block_c8dP4_info;
           _s8aea::P64 = R1;
           _s8aed::P64 = P64[R1 + 5];
           R1 = _s8ae8::P64;
           P64[Sp] = _s8aed::P64;
           P64[Sp + 8] = _s8aea::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dQl; else goto c8dP6;
       u8dQl: // global
           call _c8dP4(R1) args: 0, res: 0, upd: 0;
       c8dP6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dOz_info" {
     block_c8dOz_info:
         const _c8dOz;
         const 1;
         const 30;
 },
 _c8dOP() //  [R1]
         { []
         }
     {offset
       c8dOP: // global
           if (R1 & 7 == 3) goto c8dP1; else goto c8dOX;
       c8dP1: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8dOX: // global
           R1 = GHC.IO.Handle.Types.LineBuffering_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dOP_info" {
     block_c8dOP_info:
         const _c8dOP;
         const 0;
         const 30;
 },
 _c8dP4() //  [R1]
         { []
         }
     {offset
       c8dP4: // global
           if (R1 & 7 == 3) goto c8dPh; else goto u8dQe;
       c8dPh: // global
           I64[Sp - 8] = block_c8dPf_info;
           _s8aee::P64 = R1;
           _s8aef::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8aef::P64;
           P64[Sp + 8] = _s8aee::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dQn; else goto c8dPi;
       u8dQn: // global
           call _c8dPf(R1) args: 0, res: 0, upd: 0;
       c8dPi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dQe: // global
           Sp = Sp + 16;
           call _c8dQ6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dP4_info" {
     block_c8dP4_info:
         const _c8dP4;
         const 2;
         const 30;
 },
 _c8dPf() //  [R1]
         { []
         }
     {offset
       c8dPf: // global
           _s8aef::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dPp; else goto c8dPF;
       c8dPp: // global
           I64[Sp + 8] = block_c8dPm_info;
           R1 = _s8aef::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dQp; else goto c8dPq;
       u8dQp: // global
           call _c8dPm(R1) args: 0, res: 0, upd: 0;
       c8dPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dPF: // global
           I64[Sp] = block_c8dPD_info;
           _s8aej::P64 = P64[R1 + 6];
           R1 = _s8aef::P64;
           P64[Sp + 8] = _s8aej::P64;
           if (R1 & 7 != 0) goto u8dQq; else goto c8dPG;
       u8dQq: // global
           call _c8dPD(R1) args: 0, res: 0, upd: 0;
       c8dPG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dPf_info" {
     block_c8dPf_info:
         const _c8dPf;
         const 3;
         const 30;
 },
 _c8dPm() //  [R1]
         { []
         }
     {offset
       c8dPm: // global
           if (R1 & 7 == 1) goto u8dQi; else goto u8dQj;
       u8dQi: // global
           Sp = Sp + 16;
           call _c8dQ6() args: 0, res: 0, upd: 0;
       u8dQj: // global
           Sp = Sp + 8;
           call _c8dQ7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dPm_info" {
     block_c8dPm_info:
         const _c8dPm;
         const 2;
         const 30;
 },
 _c8dPD() //  [R1]
         { []
         }
     {offset
       c8dPD: // global
           if (R1 & 7 == 1) goto u8dQf; else goto c8dPW;
       u8dQf: // global
           Sp = Sp + 24;
           call _c8dQ6() args: 0, res: 0, upd: 0;
       c8dPW: // global
           I64[Sp] = block_c8dPP_info;
           _s8ael::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ael::P64;
           if (R1 & 7 != 0) goto u8dQt; else goto c8dPQ;
       u8dQt: // global
           call _c8dPP(R1) args: 0, res: 0, upd: 0;
       c8dPQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dPD_info" {
     block_c8dPD_info:
         const _c8dPD;
         const 3;
         const 30;
 },
 _c8dPP() //  [R1]
         { []
         }
     {offset
       c8dPP: // global
           I64[Sp] = block_c8dPU_info;
           _s8aen::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8aen::I64;
           if (R1 & 7 != 0) goto u8dQv; else goto c8dPY;
       u8dQv: // global
           call _c8dPU(R1) args: 0, res: 0, upd: 0;
       c8dPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dPP_info" {
     block_c8dPP_info:
         const _c8dPP;
         const 3;
         const 30;
 },
 _c8dPU() //  [R1]
         { []
         }
     {offset
       c8dPU: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8dQh; else goto u8dQg;
       u8dQh: // global
           Sp = Sp + 24;
           call _c8dQ6() args: 0, res: 0, upd: 0;
       u8dQg: // global
           Sp = Sp + 16;
           call _c8dQ7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dPU_info" {
     block_c8dPU_info:
         const _c8dPU;
         const 67;
         const 30;
 },
 _c8dQ7() //  []
         { []
         }
     {offset
       c8dQ7: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dQ6() //  []
         { []
         }
     {offset
       c8dQ6: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.278960991 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dRK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8dRL; else goto c8dRM;
       c8dRL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dRM: // global
           I64[Sp - 16] = block_c8dRC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dTH; else goto c8dRD;
       u8dTH: // global
           call _c8dRC(R1) args: 0, res: 0, upd: 0;
       c8dRD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dRC() //  [R1]
         { []
         }
     {offset
       c8dRC: // global
           _s8aes::P64 = P64[Sp + 8];
           _c8dRJ::P64 = R1 & 7;
           if (_c8dRJ::P64 < 3) goto u8dTt; else goto c8dRI;
       u8dTt: // global
           if (_c8dRJ::P64 < 2) goto c8dRG; else goto c8dRH;
       c8dRG: // global
           I64[Sp + 8] = block_c8dRP_info;
           R1 = _s8aes::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dTE; else goto c8dRR;
       u8dTE: // global
           call _c8dRP(R1) args: 0, res: 0, upd: 0;
       c8dRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dRH: // global
           I64[Sp + 8] = block_c8dS4_info;
           R1 = _s8aes::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dTF; else goto c8dS6;
       u8dTF: // global
           call _c8dS4(R1) args: 0, res: 0, upd: 0;
       c8dS6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dRI: // global
           I64[Sp] = block_c8dSj_info;
           _s8aex::P64 = P64[R1 + 5];
           R1 = _s8aes::P64;
           P64[Sp + 8] = _s8aex::P64;
           if (R1 & 7 != 0) goto u8dTG; else goto c8dSl;
       u8dTG: // global
           call _c8dSj(R1) args: 0, res: 0, upd: 0;
       c8dSl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dRC_info" {
     block_c8dRC_info:
         const _c8dRC;
         const 1;
         const 30;
 },
 _c8dRP() //  [R1]
         { []
         }
     {offset
       c8dRP: // global
           if (R1 & 7 == 1) goto u8dTu; else goto u8dTv;
       u8dTu: // global
           Sp = Sp + 8;
           call _c8dTl() args: 0, res: 0, upd: 0;
       u8dTv: // global
           Sp = Sp + 8;
           call _c8dTm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dRP_info" {
     block_c8dRP_info:
         const _c8dRP;
         const 0;
         const 30;
 },
 _c8dS4() //  [R1]
         { []
         }
     {offset
       c8dS4: // global
           if (R1 & 7 == 3) goto u8dTw; else goto u8dTx;
       u8dTw: // global
           Sp = Sp + 8;
           call _c8dTm() args: 0, res: 0, upd: 0;
       u8dTx: // global
           Sp = Sp + 8;
           call _c8dTl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dS4_info" {
     block_c8dS4_info:
         const _c8dS4;
         const 0;
         const 30;
 },
 _c8dSj() //  [R1]
         { []
         }
     {offset
       c8dSj: // global
           if (R1 & 7 == 3) goto c8dSw; else goto u8dTy;
       c8dSw: // global
           I64[Sp] = block_c8dSu_info;
           _s8aez::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8aez::P64;
           if (R1 & 7 != 0) goto u8dTM; else goto c8dSx;
       u8dTM: // global
           call _c8dSu(R1) args: 0, res: 0, upd: 0;
       c8dSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dTy: // global
           Sp = Sp + 16;
           call _c8dTl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dSj_info" {
     block_c8dSj_info:
         const _c8dSj;
         const 1;
         const 30;
 },
 _c8dSu() //  [R1]
         { []
         }
     {offset
       c8dSu: // global
           _s8aez::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dSE; else goto c8dSU;
       c8dSE: // global
           I64[Sp + 8] = block_c8dSB_info;
           R1 = _s8aez::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dTO; else goto c8dSF;
       u8dTO: // global
           call _c8dSB(R1) args: 0, res: 0, upd: 0;
       c8dSF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dSU: // global
           I64[Sp] = block_c8dSS_info;
           _s8aeD::P64 = P64[R1 + 6];
           R1 = _s8aez::P64;
           P64[Sp + 8] = _s8aeD::P64;
           if (R1 & 7 != 0) goto u8dTP; else goto c8dSV;
       u8dTP: // global
           call _c8dSS(R1) args: 0, res: 0, upd: 0;
       c8dSV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dSu_info" {
     block_c8dSu_info:
         const _c8dSu;
         const 1;
         const 30;
 },
 _c8dSB() //  [R1]
         { []
         }
     {offset
       c8dSB: // global
           if (R1 & 7 == 1) goto u8dTC; else goto u8dTD;
       u8dTC: // global
           Sp = Sp + 8;
           call _c8dTl() args: 0, res: 0, upd: 0;
       u8dTD: // global
           Sp = Sp + 8;
           call _c8dTm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dSB_info" {
     block_c8dSB_info:
         const _c8dSB;
         const 0;
         const 30;
 },
 _c8dSS() //  [R1]
         { []
         }
     {offset
       c8dSS: // global
           if (R1 & 7 == 1) goto u8dTz; else goto c8dTb;
       u8dTz: // global
           Sp = Sp + 16;
           call _c8dTl() args: 0, res: 0, upd: 0;
       c8dTb: // global
           I64[Sp] = block_c8dT4_info;
           _s8aeF::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8aeF::P64;
           if (R1 & 7 != 0) goto u8dTS; else goto c8dT5;
       u8dTS: // global
           call _c8dT4(R1) args: 0, res: 0, upd: 0;
       c8dT5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dSS_info" {
     block_c8dSS_info:
         const _c8dSS;
         const 1;
         const 30;
 },
 _c8dT4() //  [R1]
         { []
         }
     {offset
       c8dT4: // global
           I64[Sp] = block_c8dT9_info;
           _s8aeH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8aeH::I64;
           if (R1 & 7 != 0) goto u8dTU; else goto c8dTd;
       u8dTU: // global
           call _c8dT9(R1) args: 0, res: 0, upd: 0;
       c8dTd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dT4_info" {
     block_c8dT4_info:
         const _c8dT4;
         const 1;
         const 30;
 },
 _c8dT9() //  [R1]
         { []
         }
     {offset
       c8dT9: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8dTB; else goto u8dTA;
       u8dTB: // global
           Sp = Sp + 16;
           call _c8dTl() args: 0, res: 0, upd: 0;
       u8dTA: // global
           Sp = Sp + 16;
           call _c8dTm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dT9_info" {
     block_c8dT9_info:
         const _c8dT9;
         const 65;
         const 30;
 },
 _c8dTm() //  []
         { []
         }
     {offset
       c8dTm: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dTl() //  []
         { []
         }
     {offset
       c8dTl: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.299607487 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dV0: // global
           _s8aeM::P64 = R3;
           R3 = R2;
           R2 = _s8aeM::P64;
           call GHC.IO.Handle.Types.$fOrdBufferMode_$c<_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.30704216 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8dVj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8dVk; else goto c8dVl;
       c8dVk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8dVl: // global
           I64[Sp - 16] = block_c8dVb_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8dX5; else goto c8dVc;
       u8dX5: // global
           call _c8dVb(R1) args: 0, res: 0, upd: 0;
       c8dVc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8dVb() //  [R1]
         { []
         }
     {offset
       c8dVb: // global
           _s8aeN::P64 = P64[Sp + 8];
           _c8dVi::P64 = R1 & 7;
           if (_c8dVi::P64 < 3) goto u8dWV; else goto c8dVh;
       u8dWV: // global
           if (_c8dVi::P64 < 2) goto c8dVf; else goto c8dVg;
       c8dVf: // global
           I64[Sp + 8] = block_c8dVo_info;
           R1 = _s8aeN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dX2; else goto c8dVq;
       u8dX2: // global
           call _c8dVo() args: 0, res: 0, upd: 0;
       c8dVq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dVg: // global
           I64[Sp + 8] = block_c8dVx_info;
           R1 = _s8aeN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dX3; else goto c8dVz;
       u8dX3: // global
           call _c8dVx(R1) args: 0, res: 0, upd: 0;
       c8dVz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dVh: // global
           I64[Sp - 8] = block_c8dVM_info;
           _s8aeP::P64 = R1;
           _s8aeT::P64 = P64[R1 + 5];
           R1 = _s8aeN::P64;
           P64[Sp] = _s8aeT::P64;
           P64[Sp + 8] = _s8aeP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dX4; else goto c8dVO;
       u8dX4: // global
           call _c8dVM(R1) args: 0, res: 0, upd: 0;
       c8dVO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dVb_info" {
     block_c8dVb_info:
         const _c8dVb;
         const 1;
         const 30;
 },
 _c8dVo() //  []
         { []
         }
     {offset
       c8dVo: // global
           R1 = GHC.IO.Handle.Types.NoBuffering_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dVo_info" {
     block_c8dVo_info:
         const _c8dVo;
         const 0;
         const 30;
 },
 _c8dVx() //  [R1]
         { []
         }
     {offset
       c8dVx: // global
           if (R1 & 7 == 3) goto c8dVJ; else goto c8dVF;
       c8dVJ: // global
           R1 = GHC.IO.Handle.Types.LineBuffering_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8dVF: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dVx_info" {
     block_c8dVx_info:
         const _c8dVx;
         const 0;
         const 30;
 },
 _c8dVM() //  [R1]
         { []
         }
     {offset
       c8dVM: // global
           if (R1 & 7 == 3) goto c8dVZ; else goto u8dWW;
       c8dVZ: // global
           I64[Sp - 8] = block_c8dVX_info;
           _s8aeU::P64 = R1;
           _s8aeV::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8aeV::P64;
           P64[Sp + 8] = _s8aeU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dX6; else goto c8dW0;
       u8dX6: // global
           call _c8dVX(R1) args: 0, res: 0, upd: 0;
       c8dW0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8dWW: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c8dWO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dVM_info" {
     block_c8dVM_info:
         const _c8dVM;
         const 2;
         const 30;
 },
 _c8dVX() //  [R1]
         { []
         }
     {offset
       c8dVX: // global
           _s8aeV::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8dW7; else goto c8dWn;
       c8dW7: // global
           I64[Sp + 8] = block_c8dW4_info;
           R1 = _s8aeV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8dX8; else goto c8dW8;
       u8dX8: // global
           call _c8dW4(R1) args: 0, res: 0, upd: 0;
       c8dW8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8dWn: // global
           I64[Sp] = block_c8dWl_info;
           _s8aeZ::P64 = P64[R1 + 6];
           R1 = _s8aeV::P64;
           P64[Sp + 8] = _s8aeZ::P64;
           if (R1 & 7 != 0) goto u8dX9; else goto c8dWo;
       u8dX9: // global
           call _c8dWl(R1) args: 0, res: 0, upd: 0;
       c8dWo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dVX_info" {
     block_c8dVX_info:
         const _c8dVX;
         const 3;
         const 30;
 },
 _c8dW4() //  [R1]
         { []
         }
     {offset
       c8dW4: // global
           if (R1 & 7 == 1) goto u8dX0; else goto u8dX1;
       u8dX0: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c8dWO() args: 0, res: 0, upd: 0;
       u8dX1: // global
           Sp = Sp + 16;
           call _c8dWP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dW4_info" {
     block_c8dW4_info:
         const _c8dW4;
         const 2;
         const 30;
 },
 _c8dWl() //  [R1]
         { []
         }
     {offset
       c8dWl: // global
           if (R1 & 7 == 1) goto u8dWX; else goto c8dWE;
       u8dWX: // global
           P64[Sp + 24] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c8dWO() args: 0, res: 0, upd: 0;
       c8dWE: // global
           I64[Sp] = block_c8dWx_info;
           _s8af1::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8af1::P64;
           if (R1 & 7 != 0) goto u8dXc; else goto c8dWy;
       u8dXc: // global
           call _c8dWx(R1) args: 0, res: 0, upd: 0;
       c8dWy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dWl_info" {
     block_c8dWl_info:
         const _c8dWl;
         const 3;
         const 30;
 },
 _c8dWx() //  [R1]
         { []
         }
     {offset
       c8dWx: // global
           I64[Sp] = block_c8dWC_info;
           _s8af3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8af3::I64;
           if (R1 & 7 != 0) goto u8dXe; else goto c8dWG;
       u8dXe: // global
           call _c8dWC(R1) args: 0, res: 0, upd: 0;
       c8dWG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dWx_info" {
     block_c8dWx_info:
         const _c8dWx;
         const 3;
         const 30;
 },
 _c8dWC() //  [R1]
         { []
         }
     {offset
       c8dWC: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8dWZ; else goto u8dWY;
       u8dWZ: // global
           P64[Sp + 24] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c8dWO() args: 0, res: 0, upd: 0;
       u8dWY: // global
           Sp = Sp + 24;
           call _c8dWP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8dWC_info" {
     block_c8dWC_info:
         const _c8dWC;
         const 67;
         const 30;
 },
 _c8dWP() //  []
         { []
         }
     {offset
       c8dWP: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8dWO() //  []
         { []
         }
     {offset
       c8dWO: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.327696527 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Handle.Types.$fEqBufferMode_closure+1;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.33129683 UTC

[section ""data" . GHC.IO.Handle.Types.haOtherSide_closure" {
     GHC.IO.Handle.Types.haOtherSide_closure:
         const GHC.IO.Handle.Types.haOtherSide_info;
 },
 GHC.IO.Handle.Types.haOtherSide_entry() //  [R2]
         { []
         }
     {offset
       c8dYv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8dYw; else goto c8dYx;
       c8dYw: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haOtherSide_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dYx: // global
           I64[Sp - 8] = block_c8dYs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dYB; else goto c8dYt;
       u8dYB: // global
           call _c8dYs(R1) args: 0, res: 0, upd: 0;
       c8dYt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haOtherSide_info" {
     GHC.IO.Handle.Types.haOtherSide_info:
         const GHC.IO.Handle.Types.haOtherSide_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8dYs() //  [R1]
         { []
         }
     {offset
       c8dYs: // global
           R1 = P64[R1 + 127] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dYs_info" {
     block_c8dYs_info:
         const _c8dYs;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.336546269 UTC

[section ""data" . GHC.IO.Handle.Types.haOutputNL_closure" {
     GHC.IO.Handle.Types.haOutputNL_closure:
         const GHC.IO.Handle.Types.haOutputNL_info;
 },
 GHC.IO.Handle.Types.haOutputNL_entry() //  [R2]
         { []
         }
     {offset
       c8dYU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8dYV; else goto c8dYW;
       c8dYV: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haOutputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dYW: // global
           I64[Sp - 8] = block_c8dYR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dZ0; else goto c8dYS;
       u8dZ0: // global
           call _c8dYR(R1) args: 0, res: 0, upd: 0;
       c8dYS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haOutputNL_info" {
     GHC.IO.Handle.Types.haOutputNL_info:
         const GHC.IO.Handle.Types.haOutputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8dYR() //  [R1]
         { []
         }
     {offset
       c8dYR: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dYR_info" {
     block_c8dYR_info:
         const _c8dYR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.342268003 UTC

[section ""data" . GHC.IO.Handle.Types.haInputNL_closure" {
     GHC.IO.Handle.Types.haInputNL_closure:
         const GHC.IO.Handle.Types.haInputNL_info;
 },
 GHC.IO.Handle.Types.haInputNL_entry() //  [R2]
         { []
         }
     {offset
       c8dZj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8dZk; else goto c8dZl;
       c8dZk: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haInputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dZl: // global
           I64[Sp - 8] = block_c8dZg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dZp; else goto c8dZh;
       u8dZp: // global
           call _c8dZg(R1) args: 0, res: 0, upd: 0;
       c8dZh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haInputNL_info" {
     GHC.IO.Handle.Types.haInputNL_info:
         const GHC.IO.Handle.Types.haInputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8dZg() //  [R1]
         { []
         }
     {offset
       c8dZg: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dZg_info" {
     block_c8dZg_info:
         const _c8dZg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.347597659 UTC

[section ""data" . GHC.IO.Handle.Types.haCodec_closure" {
     GHC.IO.Handle.Types.haCodec_closure:
         const GHC.IO.Handle.Types.haCodec_info;
 },
 GHC.IO.Handle.Types.haCodec_entry() //  [R2]
         { []
         }
     {offset
       c8dZI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8dZJ; else goto c8dZK;
       c8dZJ: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haCodec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8dZK: // global
           I64[Sp - 8] = block_c8dZF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8dZO; else goto c8dZG;
       u8dZO: // global
           call _c8dZF(R1) args: 0, res: 0, upd: 0;
       c8dZG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haCodec_info" {
     GHC.IO.Handle.Types.haCodec_info:
         const GHC.IO.Handle.Types.haCodec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8dZF() //  [R1]
         { []
         }
     {offset
       c8dZF: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8dZF_info" {
     block_c8dZF_info:
         const _c8dZF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.352918183 UTC

[section ""data" . GHC.IO.Handle.Types.haDecoder_closure" {
     GHC.IO.Handle.Types.haDecoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.354685696 UTC

[section ""data" . GHC.IO.Handle.Types.haEncoder_closure" {
     GHC.IO.Handle.Types.haEncoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.357287489 UTC

[section ""data" . GHC.IO.Handle.Types.haBuffers_closure" {
     GHC.IO.Handle.Types.haBuffers_closure:
         const GHC.IO.Handle.Types.haBuffers_info;
 },
 GHC.IO.Handle.Types.haBuffers_entry() //  [R2]
         { []
         }
     {offset
       c8e09: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e0d; else goto c8e0e;
       c8e0d: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haBuffers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e0e: // global
           I64[Sp - 8] = block_c8e06_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e0i; else goto c8e07;
       u8e0i: // global
           call _c8e06(R1) args: 0, res: 0, upd: 0;
       c8e07: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haBuffers_info" {
     GHC.IO.Handle.Types.haBuffers_info:
         const GHC.IO.Handle.Types.haBuffers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e06() //  [R1]
         { []
         }
     {offset
       c8e06: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8e0h; else goto c8e0g;
       c8e0h: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8e0g: // global
           _s8ags::P64 = P64[R1 + 79];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s8ags::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e06_info" {
     block_c8e06_info:
         const _c8e06;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.363658692 UTC

[section ""data" . GHC.IO.Handle.Types.haCharBuffer_closure" {
     GHC.IO.Handle.Types.haCharBuffer_closure:
         const GHC.IO.Handle.Types.haCharBuffer_info;
 },
 GHC.IO.Handle.Types.haCharBuffer_entry() //  [R2]
         { []
         }
     {offset
       c8e0A: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e0E; else goto c8e0F;
       c8e0E: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haCharBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e0F: // global
           I64[Sp - 8] = block_c8e0x_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e0J; else goto c8e0y;
       u8e0J: // global
           call _c8e0x(R1) args: 0, res: 0, upd: 0;
       c8e0y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haCharBuffer_info" {
     GHC.IO.Handle.Types.haCharBuffer_info:
         const GHC.IO.Handle.Types.haCharBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e0x() //  [R1]
         { []
         }
     {offset
       c8e0x: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8e0I; else goto c8e0H;
       c8e0I: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8e0H: // global
           _s8agJ::P64 = P64[R1 + 71];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s8agJ::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e0x_info" {
     block_c8e0x_info:
         const _c8e0x;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.36865286 UTC

[section ""data" . GHC.IO.Handle.Types.haLastDecode_closure" {
     GHC.IO.Handle.Types.haLastDecode_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.371113452 UTC

[section ""data" . GHC.IO.Handle.Types.haBufferMode_closure" {
     GHC.IO.Handle.Types.haBufferMode_closure:
         const GHC.IO.Handle.Types.haBufferMode_info;
 },
 GHC.IO.Handle.Types.haBufferMode_entry() //  [R2]
         { []
         }
     {offset
       c8e12: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e13; else goto c8e14;
       c8e13: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haBufferMode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e14: // global
           I64[Sp - 8] = block_c8e0Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e18; else goto c8e10;
       u8e18: // global
           call _c8e0Z(R1) args: 0, res: 0, upd: 0;
       c8e10: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haBufferMode_info" {
     GHC.IO.Handle.Types.haBufferMode_info:
         const GHC.IO.Handle.Types.haBufferMode_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e0Z() //  [R1]
         { []
         }
     {offset
       c8e0Z: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e0Z_info" {
     block_c8e0Z_info:
         const _c8e0Z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.377422055 UTC

[section ""data" . GHC.IO.Handle.Types.haByteBuffer_closure" {
     GHC.IO.Handle.Types.haByteBuffer_closure:
         const GHC.IO.Handle.Types.haByteBuffer_info;
 },
 GHC.IO.Handle.Types.haByteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c8e1r: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e1v; else goto c8e1w;
       c8e1v: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haByteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e1w: // global
           I64[Sp - 8] = block_c8e1o_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e1A; else goto c8e1p;
       u8e1A: // global
           call _c8e1o(R1) args: 0, res: 0, upd: 0;
       c8e1p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haByteBuffer_info" {
     GHC.IO.Handle.Types.haByteBuffer_info:
         const GHC.IO.Handle.Types.haByteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e1o() //  [R1]
         { []
         }
     {offset
       c8e1o: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8e1z; else goto c8e1y;
       c8e1z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8e1y: // global
           _s8ahg::P64 = P64[R1 + 47];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s8ahg::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e1o_info" {
     block_c8e1o_info:
         const _c8e1o;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.383295002 UTC

[section ""data" . GHC.IO.Handle.Types.haType_closure" {
     GHC.IO.Handle.Types.haType_closure:
         const GHC.IO.Handle.Types.haType_info;
 },
 GHC.IO.Handle.Types.haType_entry() //  [R2]
         { []
         }
     {offset
       c8e1S: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e1T; else goto c8e1U;
       c8e1T: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e1U: // global
           I64[Sp - 8] = block_c8e1P_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e1Y; else goto c8e1Q;
       u8e1Y: // global
           call _c8e1P(R1) args: 0, res: 0, upd: 0;
       c8e1Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haType_info" {
     GHC.IO.Handle.Types.haType_info:
         const GHC.IO.Handle.Types.haType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e1P() //  [R1]
         { []
         }
     {offset
       c8e1P: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e1P_info" {
     block_c8e1P_info:
         const _c8e1P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.388968749 UTC

[section ""data" . GHC.IO.Handle.Types.haDevice_closure" {
     GHC.IO.Handle.Types.haDevice_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.391470793 UTC

[section ""data" . GHC.IO.Handle.Types.outputNL_closure" {
     GHC.IO.Handle.Types.outputNL_closure:
         const GHC.IO.Handle.Types.outputNL_info;
 },
 GHC.IO.Handle.Types.outputNL_entry() //  [R2]
         { []
         }
     {offset
       c8e2i: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e2j; else goto c8e2k;
       c8e2j: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.outputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e2k: // global
           I64[Sp - 8] = block_c8e2f_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e2o; else goto c8e2g;
       u8e2o: // global
           call _c8e2f(R1) args: 0, res: 0, upd: 0;
       c8e2g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.outputNL_info" {
     GHC.IO.Handle.Types.outputNL_info:
         const GHC.IO.Handle.Types.outputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e2f() //  [R1]
         { []
         }
     {offset
       c8e2f: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e2f_info" {
     block_c8e2f_info:
         const _c8e2f;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.396944991 UTC

[section ""data" . GHC.IO.Handle.Types.inputNL_closure" {
     GHC.IO.Handle.Types.inputNL_closure:
         const GHC.IO.Handle.Types.inputNL_info;
 },
 GHC.IO.Handle.Types.inputNL_entry() //  [R2]
         { []
         }
     {offset
       c8e2H: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e2I; else goto c8e2J;
       c8e2I: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.inputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e2J: // global
           I64[Sp - 8] = block_c8e2E_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e2N; else goto c8e2F;
       u8e2N: // global
           call _c8e2E(R1) args: 0, res: 0, upd: 0;
       c8e2F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.inputNL_info" {
     GHC.IO.Handle.Types.inputNL_info:
         const GHC.IO.Handle.Types.inputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e2E() //  [R1]
         { []
         }
     {offset
       c8e2E: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e2E_info" {
     block_c8e2E_info:
         const _c8e2E;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.40261254 UTC

[section ""data" . GHC.IO.Handle.Types.isReadableHandleType_closure" {
     GHC.IO.Handle.Types.isReadableHandleType_closure:
         const GHC.IO.Handle.Types.isReadableHandleType_info;
 },
 GHC.IO.Handle.Types.isReadableHandleType_entry() //  [R2]
         { []
         }
     {offset
       c8e3b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e3c; else goto c8e3d;
       c8e3c: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.isReadableHandleType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e3d: // global
           I64[Sp - 8] = block_c8e33_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e3o; else goto c8e34;
       u8e3o: // global
           call _c8e33(R1) args: 0, res: 0, upd: 0;
       c8e34: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.isReadableHandleType_info" {
     GHC.IO.Handle.Types.isReadableHandleType_info:
         const GHC.IO.Handle.Types.isReadableHandleType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e33() //  [R1]
         { []
         }
     {offset
       c8e33: // global
           _c8e3a::P64 = R1 & 7;
           if (_c8e3a::P64 == 3) goto c8e39; else goto u8e3n;
       u8e3n: // global
           if (_c8e3a::P64 == 6) goto c8e39; else goto c8e37;
       c8e39: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8e37: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e33_info" {
     block_c8e33_info:
         const _c8e33;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.408658352 UTC

[section ""data" . GHC.IO.Handle.Types.isWritableHandleType_closure" {
     GHC.IO.Handle.Types.isWritableHandleType_closure:
         const GHC.IO.Handle.Types.isWritableHandleType_info;
 },
 GHC.IO.Handle.Types.isWritableHandleType_entry() //  [R2]
         { []
         }
     {offset
       c8e3O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e3P; else goto c8e3Q;
       c8e3P: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.isWritableHandleType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e3Q: // global
           I64[Sp - 8] = block_c8e3F_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e44; else goto c8e3G;
       u8e44: // global
           call _c8e3F(R1) args: 0, res: 0, upd: 0;
       c8e3G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.isWritableHandleType_info" {
     GHC.IO.Handle.Types.isWritableHandleType_info:
         const GHC.IO.Handle.Types.isWritableHandleType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e3F() //  [R1]
         { []
         }
     {offset
       c8e3F: // global
           _c8e3N::P64 = R1 & 7;
           if (_c8e3N::P64 < 4) goto c8e3J; else goto u8e43;
       c8e3J: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8e43: // global
           if (_c8e3N::P64 != 5) goto c8e3M; else goto c8e3M;
       c8e3M: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e3F_info" {
     block_c8e3F_info:
         const _c8e3F;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.414514509 UTC

[section ""data" . GHC.IO.Handle.Types.isReadWriteHandleType_closure" {
     GHC.IO.Handle.Types.isReadWriteHandleType_closure:
         const GHC.IO.Handle.Types.isReadWriteHandleType_info;
 },
 GHC.IO.Handle.Types.isReadWriteHandleType_entry() //  [R2]
         { []
         }
     {offset
       c8e4s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e4t; else goto c8e4u;
       c8e4t: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.isReadWriteHandleType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e4u: // global
           I64[Sp - 8] = block_c8e4l_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e4B; else goto c8e4m;
       u8e4B: // global
           call _c8e4l(R1) args: 0, res: 0, upd: 0;
       c8e4m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.isReadWriteHandleType_info" {
     GHC.IO.Handle.Types.isReadWriteHandleType_info:
         const GHC.IO.Handle.Types.isReadWriteHandleType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8e4l() //  [R1]
         { []
         }
     {offset
       c8e4l: // global
           if (R1 & 7 == 6) goto c8e4q; else goto c8e4p;
       c8e4q: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8e4p: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e4l_info" {
     block_c8e4l_info:
         const _c8e4l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.419584827 UTC

[section ""data" . GHC.IO.Handle.Types.nativeNewline_closure" {
     GHC.IO.Handle.Types.nativeNewline_closure:
         const GHC.IO.Handle.Types.LF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.421369667 UTC

[section ""data" . GHC.IO.Handle.Types.universalNewlineMode_closure" {
     GHC.IO.Handle.Types.universalNewlineMode_closure:
         const GHC.IO.Handle.Types.NewlineMode_con_info;
         const GHC.IO.Handle.Types.CRLF_closure+2;
         const GHC.IO.Handle.Types.LF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.42374711 UTC

[section ""data" . GHC.IO.Handle.Types.nativeNewlineMode_closure" {
     GHC.IO.Handle.Types.nativeNewlineMode_closure:
         const GHC.IO.Handle.Types.NewlineMode_con_info;
         const GHC.IO.Handle.Types.LF_closure+1;
         const GHC.IO.Handle.Types.LF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.425508703 UTC

[section ""data" . GHC.IO.Handle.Types.noNewlineTranslation_closure" {
     GHC.IO.Handle.Types.noNewlineTranslation_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Handle.Types.nativeNewlineMode_closure+1;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.427141723 UTC

[section ""cstring" . GHC.IO.Handle.Types.showHandle1_bytes" {
     GHC.IO.Handle.Types.showHandle1_bytes:
         I8[] [123,104,97,110,100,108,101,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.430266435 UTC

[section ""data" . GHC.IO.Handle.Types.showHandle_closure" {
     GHC.IO.Handle.Types.showHandle_closure:
         const GHC.IO.Handle.Types.showHandle_info;
 },
 sat_s8ahZ_entry() //  [R1]
         { []
         }
     {offset
       c8e56: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ahZ_info" {
     sat_s8ahZ_info:
         const sat_s8ahZ_entry;
         const 1;
         const 16;
 },
 sat_s8ai0_entry() //  [R1]
         { []
         }
     {offset
       c8e59: // global
           _s8ai0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8e5a; else goto c8e5b;
       c8e5b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8e5d; else goto c8e5c;
       c8e5d: // global
           HpAlloc = 24;
           goto c8e5a;
       c8e5a: // global
           R1 = _s8ai0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8e5c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8ai0::P64;
           _s8ahX::P64 = P64[_s8ai0::P64 + 16];
           _s8ahY::P64 = P64[_s8ai0::P64 + 24];
           I64[Hp - 16] = sat_s8ahZ_info;
           P64[Hp] = _s8ahY::P64;
           R3 = Hp - 16;
           R2 = _s8ahX::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8ai0_info" {
     sat_s8ai0_info:
         const sat_s8ai0_entry;
         const 2;
         const 18;
 },
 GHC.IO.Handle.Types.showHandle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8e5e: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8e5i; else goto c8e5h;
       c8e5i: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.showHandle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8e5h: // global
           I64[Hp - 24] = sat_s8ai0_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.showHandle_info" {
     GHC.IO.Handle.Types.showHandle_info:
         const GHC.IO.Handle.Types.showHandle_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.437758939 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_info;
 },
 GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c8e5F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8e5G; else goto c8e5H;
       c8e5G: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8e5H: // global
           I64[Sp - 16] = block_c8e5y_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8e5O; else goto c8e5z;
       u8e5O: // global
           call _c8e5y(R1) args: 0, res: 0, upd: 0;
       c8e5z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8e5y() //  [R1]
         { []
         }
     {offset
       c8e5y: // global
           _s8ai3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8e5C; else goto c8e5D;
       c8e5C: // global
           R3 = _s8ai3::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c8e5D: // global
           R3 = _s8ai3::P64;
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e5y_info" {
     block_c8e5y_info:
         const _c8e5y;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.44476934 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowHandle_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_info;
         const 0;
 },
 sat_s8aie_entry() //  [R1]
         { []
         }
     {offset
       c8e6d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8e6e; else goto c8e6f;
       c8e6e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8e6f: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8aie_info" {
     sat_s8aie_info:
         const sat_s8aie_entry;
         const 1;
         const 4294967312;
         const S8alj_srt+520;
 },
 sat_s8aii_entry() //  [R1]
         { []
         }
     {offset
       c8e6m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8e6n; else goto c8e6o;
       c8e6n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8e6o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8aii_info" {
     sat_s8aii_info:
         const sat_s8aii_entry;
         const 1;
         const 4294967312;
         const S8alj_srt+520;
 },
 GHC.IO.Handle.Types.$fShowHandle_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8e6t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8e6u; else goto c8e6v;
       c8e6u: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandle_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8e6v: // global
           I64[Sp - 8] = block_c8e64_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8e6C; else goto c8e65;
       u8e6C: // global
           call _c8e64(R1) args: 0, res: 0, upd: 0;
       c8e65: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle_$cshow_info" {
     GHC.IO.Handle.Types.$fShowHandle_$cshow_info:
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8alj_srt+520;
 },
 _c8e64() //  [R1]
         { []
         }
     {offset
       c8e64: // global
           if (R1 & 7 == 1) goto c8e6q; else goto c8e6r;
       c8e6q: // global
           Hp = Hp + 24;
           _s8aib::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8e6B; else goto c8e6x;
       c8e6x: // global
           _s8aic::P64 = P64[_s8aib::P64 + 7];
           I64[Hp - 16] = sat_s8aie_info;
           P64[Hp] = _s8aic::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8e6r: // global
           Hp = Hp + 24;
           _s8aib::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8e6B; else goto c8e6A;
       c8e6B: // global
           HpAlloc = 24;
           R1 = _s8aib::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8e6A: // global
           _s8aif::P64 = P64[_s8aib::P64 + 6];
           I64[Hp - 16] = sat_s8aii_info;
           P64[Hp] = _s8aif::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e64_info" {
     block_c8e64_info:
         const _c8e64;
         const 0;
         const 4294967326;
         const S8alj_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.454284281 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle1_closure" {
     GHC.IO.Handle.Types.$fShowHandle1_closure:
         const GHC.IO.Handle.Types.$fShowHandle1_info;
 },
 GHC.IO.Handle.Types.$fShowHandle1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8e77: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8e78; else goto c8e79;
       c8e78: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandle1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8e79: // global
           I64[Sp - 16] = block_c8e70_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8e7g; else goto c8e71;
       u8e7g: // global
           call _c8e70(R1) args: 0, res: 0, upd: 0;
       c8e71: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle1_info" {
     GHC.IO.Handle.Types.$fShowHandle1_info:
         const GHC.IO.Handle.Types.$fShowHandle1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8e70() //  [R1]
         { []
         }
     {offset
       c8e70: // global
           _s8aik::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8e74; else goto c8e75;
       c8e74: // global
           R3 = _s8aik::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c8e75: // global
           R3 = _s8aik::P64;
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8e70_info" {
     block_c8e70_info:
         const _c8e70;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.460296791 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowList_info;
 },
 GHC.IO.Handle.Types.$fShowHandle_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8e7w: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowHandle1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.464055744 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_closure" {
     GHC.IO.Handle.Types.$fShowHandle_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowHandle_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.465771776 UTC

[section ""cstring" . GHC.IO.Handle.Types.$trModule4_bytes" {
     GHC.IO.Handle.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.467411164 UTC

[section ""data" . GHC.IO.Handle.Types.$trModule3_closure" {
     GHC.IO.Handle.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.469075174 UTC

[section ""cstring" . GHC.IO.Handle.Types.$trModule2_bytes" {
     GHC.IO.Handle.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.470937691 UTC

[section ""data" . GHC.IO.Handle.Types.$trModule1_closure" {
     GHC.IO.Handle.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.472706857 UTC

[section ""data" . GHC.IO.Handle.Types.$trModule_closure" {
     GHC.IO.Handle.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.Types.$trModule3_closure+1;
         const GHC.IO.Handle.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.474457515 UTC

[section ""data" . $krep_r8a59_closure" {
     $krep_r8a59_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.476139316 UTC

[section ""data" . $krep1_r8a5a_closure" {
     $krep1_r8a5a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.477825225 UTC

[section ""data" . $krep2_r8a5b_closure" {
     $krep2_r8a5b_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.479557962 UTC

[section ""data" . $krep3_r8a5c_closure" {
     $krep3_r8a5c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.481216491 UTC

[section ""data" . $krep4_r8a5d_closure" {
     $krep4_r8a5d_closure:
         const :_con_info;
         const $krep_r8a59_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.482986602 UTC

[section ""data" . $krep5_r8a5e_closure" {
     $krep5_r8a5e_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r8a5d_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.486490698 UTC

[section ""data" . $krep6_r8a5f_closure" {
     $krep6_r8a5f_closure:
         const :_con_info;
         const $krep1_r8a5a_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.488216439 UTC

[section ""data" . $krep7_r8a5g_closure" {
     $krep7_r8a5g_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8a5f_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.489964619 UTC

[section ""data" . $krep8_r8a5h_closure" {
     $krep8_r8a5h_closure:
         const :_con_info;
         const $krep3_r8a5c_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.491643766 UTC

[section ""data" . $krep9_r8a5i_closure" {
     $krep9_r8a5i_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep8_r8a5h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.494023048 UTC

[section ""data" . $krep10_r8a5j_closure" {
     $krep10_r8a5j_closure:
         const :_con_info;
         const $krep9_r8a5i_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.49566793 UTC

[section ""data" . $krep11_r8a5k_closure" {
     $krep11_r8a5k_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep10_r8a5j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.497385732 UTC

[section ""data" . $krep12_r8a5l_closure" {
     $krep12_r8a5l_closure:
         const :_con_info;
         const $krep2_r8a5b_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.499023467 UTC

[section ""data" . $krep13_r8a5m_closure" {
     $krep13_r8a5m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r8a5l_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.500662025 UTC

[section ""data" . $krep14_r8a5n_closure" {
     $krep14_r8a5n_closure:
         const :_con_info;
         const $krep13_r8a5m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.502411516 UTC

[section ""data" . $krep15_r8a5o_closure" {
     $krep15_r8a5o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep14_r8a5n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.504097707 UTC

[section ""data" . $krep16_r8a5p_closure" {
     $krep16_r8a5p_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep8_r8a5h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.506226682 UTC

[section ""data" . $krep17_r8a5q_closure" {
     $krep17_r8a5q_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.507937037 UTC

[section ""data" . $krep18_r8a5r_closure" {
     $krep18_r8a5r_closure:
         const :_con_info;
         const $krep17_r8a5q_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.509651421 UTC

[section ""data" . $krep19_r8a5s_closure" {
     $krep19_r8a5s_closure:
         const :_con_info;
         const $krep3_r8a5c_closure+1;
         const $krep18_r8a5r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.511865735 UTC

[section ""data" . $krep20_r8a5t_closure" {
     $krep20_r8a5t_closure:
         const :_con_info;
         const $krep2_r8a5b_closure+1;
         const $krep19_r8a5s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.513998437 UTC

[section ""data" . $krep21_r8a5u_closure" {
     $krep21_r8a5u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure;
         const $krep20_r8a5t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.515674568 UTC

[section ""data" . $krep22_r8a5v_closure" {
     $krep22_r8a5v_closure:
         const :_con_info;
         const $krep21_r8a5u_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.518628792 UTC

[section ""data" . $krep23_r8a5w_closure" {
     $krep23_r8a5w_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep22_r8a5v_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.520479732 UTC

[section ""data" . $krep24_r8a5x_closure" {
     $krep24_r8a5x_closure:
         const :_con_info;
         const $krep17_r8a5q_closure+2;
         const $krep14_r8a5n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.522270546 UTC

[section ""data" . $krep25_r8a5y_closure" {
     $krep25_r8a5y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep24_r8a5x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.523995822 UTC

[section ""data" . $krep26_r8a5z_closure" {
     $krep26_r8a5z_closure:
         const :_con_info;
         const $krep25_r8a5y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.526120847 UTC

[section ""data" . $krep27_r8a5A_closure" {
     $krep27_r8a5A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep26_r8a5z_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.527861661 UTC

[section ""data" . $krep28_r8a5B_closure" {
     $krep28_r8a5B_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.529568875 UTC

[section ""data" . $krep29_r8a5C_closure" {
     $krep29_r8a5C_closure:
         const :_con_info;
         const $krep28_r8a5B_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.531299335 UTC

[section ""data" . $krep30_r8a5D_closure" {
     $krep30_r8a5D_closure:
         const :_con_info;
         const $krep2_r8a5b_closure+1;
         const $krep29_r8a5C_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.533095108 UTC

[section ""data" . $krep31_r8a5E_closure" {
     $krep31_r8a5E_closure:
         const :_con_info;
         const $krep3_r8a5c_closure+1;
         const $krep30_r8a5D_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.534935729 UTC

[section ""data" . $krep32_r8a5F_closure" {
     $krep32_r8a5F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure;
         const $krep31_r8a5E_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.536713391 UTC

[section ""data" . $krep33_r8a5G_closure" {
     $krep33_r8a5G_closure:
         const :_con_info;
         const $krep32_r8a5F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.539508184 UTC

[section ""data" . $krep34_r8a5H_closure" {
     $krep34_r8a5H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep33_r8a5G_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.541430185 UTC

[section ""data" . $krep35_r8a5I_closure" {
     $krep35_r8a5I_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.543184454 UTC

[section ""data" . $krep36_r8a5J_closure" {
     $krep36_r8a5J_closure:
         const :_con_info;
         const $krep35_r8a5I_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.544932891 UTC

[section ""data" . $krep37_r8a5K_closure" {
     $krep37_r8a5K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.546704443 UTC

[section ""data" . $krep38_r8a5L_closure" {
     $krep38_r8a5L_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.548499866 UTC

[section ""data" . $krep39_r8a5M_closure" {
     $krep39_r8a5M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeable_closure;
         const $krep38_r8a5L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.550254817 UTC

[section ""data" . $krep40_r8a5N_closure" {
     $krep40_r8a5N_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.551944503 UTC

[section ""data" . $krep41_r8a5O_closure" {
     $krep41_r8a5O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.553667827 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcBufferList2_bytes" {
     GHC.IO.Handle.Types.$tcBufferList2_bytes:
         I8[] [66,117,102,102,101,114,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.555398847 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferList1_closure" {
     GHC.IO.Handle.Types.$tcBufferList1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcBufferList2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.557187232 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferList_closure" {
     GHC.IO.Handle.Types.$tcBufferList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcBufferList1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 16602278556585116844;
         const 18164509953320487254;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.559610743 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListNil1_closure" {
     GHC.IO.Handle.Types.$tc'BufferListNil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcBufferList_closure+1;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.561436282 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'BufferListNil3_bytes" {
     GHC.IO.Handle.Types.$tc'BufferListNil3_bytes:
         I8[] [39,66,117,102,102,101,114,76,105,115,116,78,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.563149672 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListNil2_closure" {
     GHC.IO.Handle.Types.$tc'BufferListNil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'BufferListNil3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.564925098 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListNil_closure" {
     GHC.IO.Handle.Types.$tc'BufferListNil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListNil2_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListNil1_closure+1;
         const 1776148480580179033;
         const 13181184993065174936;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.567423073 UTC

[section ""data" . $krep42_r8a5P_closure" {
     $krep42_r8a5P_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'BufferListNil1_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListNil1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.569137876 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListCons1_closure" {
     GHC.IO.Handle.Types.$tc'BufferListCons1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r8a5K_closure+1;
         const $krep42_r8a5P_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.571096984 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'BufferListCons3_bytes" {
     GHC.IO.Handle.Types.$tc'BufferListCons3_bytes:
         I8[] [39,66,117,102,102,101,114,76,105,115,116,67,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.572776824 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListCons2_closure" {
     GHC.IO.Handle.Types.$tc'BufferListCons2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'BufferListCons3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.574639914 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListCons_closure" {
     GHC.IO.Handle.Types.$tc'BufferListCons_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListCons2_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListCons1_closure+4;
         const 17252346539814354939;
         const 274626690118510806;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.576476651 UTC

[section ""data" . $krep43_r8a5Q_closure" {
     $krep43_r8a5Q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcBufferList_closure+1;
         const $krep8_r8a5h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.578220409 UTC

[section ""data" . $krep44_r8a5R_closure" {
     $krep44_r8a5R_closure:
         const :_con_info;
         const $krep43_r8a5Q_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.580034766 UTC

[section ""data" . $krep45_r8a5S_closure" {
     $krep45_r8a5S_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep44_r8a5R_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.582564386 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcHandleType2_bytes" {
     GHC.IO.Handle.Types.$tcHandleType2_bytes:
         I8[] [72,97,110,100,108,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.584250175 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandleType1_closure" {
     GHC.IO.Handle.Types.$tcHandleType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcHandleType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.586108034 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandleType_closure" {
     GHC.IO.Handle.Types.$tcHandleType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcHandleType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12652050740177317592;
         const 15012172050125063359;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.588044784 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'AppendHandle1_closure" {
     GHC.IO.Handle.Types.$tc'AppendHandle1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandleType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.589823151 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'ClosedHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'ClosedHandle2_bytes:
         I8[] [39,67,108,111,115,101,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.591558244 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ClosedHandle1_closure" {
     GHC.IO.Handle.Types.$tc'ClosedHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'ClosedHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.594316183 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ClosedHandle_closure" {
     GHC.IO.Handle.Types.$tc'ClosedHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'ClosedHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 3827246897052092772;
         const 908733983357893198;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.59612346 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'SemiClosedHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'SemiClosedHandle2_bytes:
         I8[] [39,83,101,109,105,67,108,111,115,101,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.597740781 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'SemiClosedHandle1_closure" {
     GHC.IO.Handle.Types.$tc'SemiClosedHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'SemiClosedHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.599565078 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'SemiClosedHandle_closure" {
     GHC.IO.Handle.Types.$tc'SemiClosedHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'SemiClosedHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 9212351547956271402;
         const 6570718180183054490;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.601625598 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'ReadHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'ReadHandle2_bytes:
         I8[] [39,82,101,97,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.603359887 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadHandle1_closure" {
     GHC.IO.Handle.Types.$tc'ReadHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'ReadHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.605192493 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadHandle_closure" {
     GHC.IO.Handle.Types.$tc'ReadHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'ReadHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 269968663592081974;
         const 17473723309710900549;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.607060316 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'WriteHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'WriteHandle2_bytes:
         I8[] [39,87,114,105,116,101,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.608774907 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'WriteHandle1_closure" {
     GHC.IO.Handle.Types.$tc'WriteHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'WriteHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.610624294 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'WriteHandle_closure" {
     GHC.IO.Handle.Types.$tc'WriteHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'WriteHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 18024523813608199082;
         const 4783872735135983851;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.612438049 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'AppendHandle3_bytes" {
     GHC.IO.Handle.Types.$tc'AppendHandle3_bytes:
         I8[] [39,65,112,112,101,110,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.614600061 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'AppendHandle2_closure" {
     GHC.IO.Handle.Types.$tc'AppendHandle2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'AppendHandle3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.616359513 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'AppendHandle_closure" {
     GHC.IO.Handle.Types.$tc'AppendHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle2_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 18423480119042393547;
         const 8911069045719960050;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.618156647 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'ReadWriteHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'ReadWriteHandle2_bytes:
         I8[] [39,82,101,97,100,87,114,105,116,101,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.620537576 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadWriteHandle1_closure" {
     GHC.IO.Handle.Types.$tc'ReadWriteHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'ReadWriteHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.622391459 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadWriteHandle_closure" {
     GHC.IO.Handle.Types.$tc'ReadWriteHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'ReadWriteHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 6962298179673541916;
         const 7858738479804269456;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.624225231 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcBufferMode2_bytes" {
     GHC.IO.Handle.Types.$tcBufferMode2_bytes:
         I8[] [66,117,102,102,101,114,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.626315166 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferMode1_closure" {
     GHC.IO.Handle.Types.$tcBufferMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcBufferMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.628020282 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferMode_closure" {
     GHC.IO.Handle.Types.$tcBufferMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcBufferMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2181253694666364469;
         const 18094997560331273583;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.629915267 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LineBuffering1_closure" {
     GHC.IO.Handle.Types.$tc'LineBuffering1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcBufferMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.631623174 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'NoBuffering2_bytes" {
     GHC.IO.Handle.Types.$tc'NoBuffering2_bytes:
         I8[] [39,78,111,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.633400233 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NoBuffering1_closure" {
     GHC.IO.Handle.Types.$tc'NoBuffering1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'NoBuffering2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.635203971 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NoBuffering_closure" {
     GHC.IO.Handle.Types.$tc'NoBuffering_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'NoBuffering1_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const 1829914617507863771;
         const 11519122601481432262;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.637015725 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'LineBuffering3_bytes" {
     GHC.IO.Handle.Types.$tc'LineBuffering3_bytes:
         I8[] [39,76,105,110,101,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.639110494 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LineBuffering2_closure" {
     GHC.IO.Handle.Types.$tc'LineBuffering2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'LineBuffering3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.640960889 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LineBuffering_closure" {
     GHC.IO.Handle.Types.$tc'LineBuffering_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering2_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const 6417231512954421547;
         const 14761155862500981941;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.642825276 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BlockBuffering1_closure" {
     GHC.IO.Handle.Types.$tc'BlockBuffering1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r8a5e_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.644568452 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'BlockBuffering3_bytes" {
     GHC.IO.Handle.Types.$tc'BlockBuffering3_bytes:
         I8[] [39,66,108,111,99,107,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.646919732 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BlockBuffering2_closure" {
     GHC.IO.Handle.Types.$tc'BlockBuffering2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'BlockBuffering3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.648833174 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BlockBuffering_closure" {
     GHC.IO.Handle.Types.$tc'BlockBuffering_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'BlockBuffering2_closure+1;
         const GHC.IO.Handle.Types.$tc'BlockBuffering1_closure+4;
         const 704611490471072872;
         const 15656058643765081689;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.651127245 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcNewline2_bytes" {
     GHC.IO.Handle.Types.$tcNewline2_bytes:
         I8[] [78,101,119,108,105,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.652820561 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewline1_closure" {
     GHC.IO.Handle.Types.$tcNewline1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcNewline2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.654642634 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewline_closure" {
     GHC.IO.Handle.Types.$tcNewline_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcNewline1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4144517894815066994;
         const 10872055347860317487;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.656496044 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'CRLF1_closure" {
     GHC.IO.Handle.Types.$tc'CRLF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcNewline_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.658237109 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'LF2_bytes" {
     GHC.IO.Handle.Types.$tc'LF2_bytes:
         I8[] [39,76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.66003798 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LF1_closure" {
     GHC.IO.Handle.Types.$tc'LF1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'LF2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.662137925 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LF_closure" {
     GHC.IO.Handle.Types.$tc'LF_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'LF1_closure+1;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const 8352565500432618804;
         const 14951155965269318914;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.663919329 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'CRLF3_bytes" {
     GHC.IO.Handle.Types.$tc'CRLF3_bytes:
         I8[] [39,67,82,76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.665603271 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'CRLF2_closure" {
     GHC.IO.Handle.Types.$tc'CRLF2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.667256068 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'CRLF_closure" {
     GHC.IO.Handle.Types.$tc'CRLF_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'CRLF2_closure+1;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const 12041259567283068515;
         const 3210182148185771829;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.668988702 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcHandle__2_bytes" {
     GHC.IO.Handle.Types.$tcHandle__2_bytes:
         I8[] [72,97,110,100,108,101,95,95]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.670618118 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle__1_closure" {
     GHC.IO.Handle.Types.$tcHandle__1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcHandle__2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.672348066 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle___closure" {
     GHC.IO.Handle.Types.$tcHandle___closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcHandle__1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10675922960094776064;
         const 10563785792974977547;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.674779728 UTC

[section ""data" . $krep46_r8a5T_closure" {
     $krep46_r8a5T_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle___closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.6765095 UTC

[section ""data" . $krep47_r8a5U_closure" {
     $krep47_r8a5U_closure:
         const :_con_info;
         const $krep46_r8a5T_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.678758647 UTC

[section ""data" . $krep48_r8a5V_closure" {
     $krep48_r8a5V_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep47_r8a5U_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.680419867 UTC

[section ""data" . $krep49_r8a5W_closure" {
     $krep49_r8a5W_closure:
         const :_con_info;
         const $krep48_r8a5V_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.682188594 UTC

[section ""data" . $krep50_r8a5X_closure" {
     $krep50_r8a5X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep49_r8a5W_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.683862469 UTC

[section ""data" . $krep51_r8a5Y_closure" {
     $krep51_r8a5Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep50_r8a5X_closure+1;
         const $krep46_r8a5T_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.686038819 UTC

[section ""data" . $krep52_r8a5Z_closure" {
     $krep52_r8a5Z_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep51_r8a5Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.687712398 UTC

[section ""data" . $krep53_r8a60_closure" {
     $krep53_r8a60_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep52_r8a5Z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.68941759 UTC

[section ""data" . $krep54_r8a61_closure" {
     $krep54_r8a61_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r8a5g_closure+1;
         const $krep53_r8a60_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.691133798 UTC

[section ""data" . $krep55_r8a62_closure" {
     $krep55_r8a62_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r8a5w_closure+1;
         const $krep54_r8a61_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.692846482 UTC

[section ""data" . $krep56_r8a63_closure" {
     $krep56_r8a63_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r8a5H_closure+1;
         const $krep55_r8a62_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.69459637 UTC

[section ""data" . $krep57_r8a64_closure" {
     $krep57_r8a64_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep45_r8a5S_closure+1;
         const $krep56_r8a63_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.696339269 UTC

[section ""data" . $krep58_r8a65_closure" {
     $krep58_r8a65_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r8a5k_closure+1;
         const $krep57_r8a64_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.698169482 UTC

[section ""data" . $krep59_r8a66_closure" {
     $krep59_r8a66_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep27_r8a5A_closure+1;
         const $krep58_r8a65_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.700529742 UTC

[section ""data" . $krep60_r8a67_closure" {
     $krep60_r8a67_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const $krep59_r8a66_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.702770196 UTC

[section ""data" . $krep61_r8a68_closure" {
     $krep61_r8a68_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r8a5o_closure+1;
         const $krep60_r8a67_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.704467783 UTC

[section ""data" . $krep62_r8a69_closure" {
     $krep62_r8a69_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const $krep61_r8a68_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.706244851 UTC

[section ""data" . $krep63_r8a6a_closure" {
     $krep63_r8a6a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r8a5I_closure+2;
         const $krep62_r8a69_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.708077771 UTC

[section ""data" . $krep64_r8a6b_closure" {
     $krep64_r8a6b_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep39_r8a5M_closure+1;
         const $krep63_r8a6a_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.70986585 UTC

[section ""data" . $krep65_r8a6c_closure" {
     $krep65_r8a6c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r8a5O_closure+1;
         const $krep64_r8a6b_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.711604789 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'Handle__1_closure" {
     GHC.IO.Handle.Types.$tc'Handle__1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep40_r8a5N_closure+1;
         const $krep65_r8a6c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.71338 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'Handle__3_bytes" {
     GHC.IO.Handle.Types.$tc'Handle__3_bytes:
         I8[] [39,72,97,110,100,108,101,95,95]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.715051815 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'Handle__2_closure" {
     GHC.IO.Handle.Types.$tc'Handle__2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'Handle__3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.716751478 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'Handle___closure" {
     GHC.IO.Handle.Types.$tc'Handle___closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'Handle__2_closure+1;
         const GHC.IO.Handle.Types.$tc'Handle__1_closure+4;
         const 15400920814375205416;
         const 14458810719499819570;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.719212451 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcHandle2_bytes" {
     GHC.IO.Handle.Types.$tcHandle2_bytes:
         I8[] [72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.721133593 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle1_closure" {
     GHC.IO.Handle.Types.$tcHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.722934939 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle_closure" {
     GHC.IO.Handle.Types.$tcHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcHandle1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6808292778723485333;
         const 9239299165073943659;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.724763155 UTC

[section ""data" . $krep66_r8a6d_closure" {
     $krep66_r8a6d_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.727190497 UTC

[section ""data" . $krep67_r8a6e_closure" {
     $krep67_r8a6e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep48_r8a5V_closure+1;
         const $krep66_r8a6d_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.728910686 UTC

[section ""data" . $krep68_r8a6f_closure" {
     $krep68_r8a6f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep48_r8a5V_closure+1;
         const $krep67_r8a6e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.73123214 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'DuplexHandle1_closure" {
     GHC.IO.Handle.Types.$tc'DuplexHandle1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r8a5p_closure+1;
         const $krep68_r8a6f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.733037414 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'DuplexHandle3_bytes" {
     GHC.IO.Handle.Types.$tc'DuplexHandle3_bytes:
         I8[] [39,68,117,112,108,101,120,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.734768955 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'DuplexHandle2_closure" {
     GHC.IO.Handle.Types.$tc'DuplexHandle2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'DuplexHandle3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.736560604 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'DuplexHandle_closure" {
     GHC.IO.Handle.Types.$tc'DuplexHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'DuplexHandle2_closure+1;
         const GHC.IO.Handle.Types.$tc'DuplexHandle1_closure+4;
         const 477065760828861081;
         const 4557316572761143129;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.738435939 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'FileHandle1_closure" {
     GHC.IO.Handle.Types.$tc'FileHandle1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r8a5p_closure+1;
         const $krep67_r8a6e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.740142116 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'FileHandle3_bytes" {
     GHC.IO.Handle.Types.$tc'FileHandle3_bytes:
         I8[] [39,70,105,108,101,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.74189521 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'FileHandle2_closure" {
     GHC.IO.Handle.Types.$tc'FileHandle2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'FileHandle3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.743607306 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'FileHandle_closure" {
     GHC.IO.Handle.Types.$tc'FileHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'FileHandle2_closure+1;
         const GHC.IO.Handle.Types.$tc'FileHandle1_closure+4;
         const 5544613225695748436;
         const 8829945929965735507;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.745744964 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewlineMode1_closure" {
     GHC.IO.Handle.Types.$tcNewlineMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode17_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.747508557 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewlineMode_closure" {
     GHC.IO.Handle.Types.$tcNewlineMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcNewlineMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17953040817059389032;
         const 12498949339099960838;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.74928748 UTC

[section ""data" . $krep69_r8a6g_closure" {
     $krep69_r8a6g_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcNewlineMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.750990863 UTC

[section ""data" . $krep70_r8a6h_closure" {
     $krep70_r8a6h_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep69_r8a6g_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.753287127 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NewlineMode1_closure" {
     GHC.IO.Handle.Types.$tc'NewlineMode1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep70_r8a6h_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.755080549 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'NewlineMode3_bytes" {
     GHC.IO.Handle.Types.$tc'NewlineMode3_bytes:
         I8[] [39,78,101,119,108,105,110,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.756749138 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NewlineMode2_closure" {
     GHC.IO.Handle.Types.$tc'NewlineMode2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'NewlineMode3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.758524998 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NewlineMode_closure" {
     GHC.IO.Handle.Types.$tc'NewlineMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'NewlineMode2_closure+1;
         const GHC.IO.Handle.Types.$tc'NewlineMode1_closure+4;
         const 4266278501114659446;
         const 17947462423734457010;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.760678947 UTC

[section ""data" . GHC.IO.Handle.Types.checkHandleInvariants1_closure" {
     GHC.IO.Handle.Types.checkHandleInvariants1_closure:
         const GHC.IO.Handle.Types.checkHandleInvariants1_info;
 },
 GHC.IO.Handle.Types.checkHandleInvariants1_entry() //  []
         { []
         }
     {offset
       c8eaf: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.checkHandleInvariants1_info" {
     GHC.IO.Handle.Types.checkHandleInvariants1_info:
         const GHC.IO.Handle.Types.checkHandleInvariants1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.764174966 UTC

[section ""data" . GHC.IO.Handle.Types.checkHandleInvariants_closure" {
     GHC.IO.Handle.Types.checkHandleInvariants_closure:
         const GHC.IO.Handle.Types.checkHandleInvariants_info;
 },
 GHC.IO.Handle.Types.checkHandleInvariants_entry() //  [R2]
         { []
         }
     {offset
       c8ear: // global
           R2 = R2;
           call GHC.IO.Handle.Types.checkHandleInvariants1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.checkHandleInvariants_info" {
     GHC.IO.Handle.Types.checkHandleInvariants_info:
         const GHC.IO.Handle.Types.checkHandleInvariants_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.768200544 UTC

[section ""data" . GHC.IO.Handle.Types.NewlineMode_closure" {
     GHC.IO.Handle.Types.NewlineMode_closure:
         const GHC.IO.Handle.Types.NewlineMode_info;
 },
 GHC.IO.Handle.Types.NewlineMode_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eaD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8eaH; else goto c8eaG;
       c8eaH: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.NewlineMode_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eaG: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.NewlineMode_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.NewlineMode_info" {
     GHC.IO.Handle.Types.NewlineMode_info:
         const GHC.IO.Handle.Types.NewlineMode_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.771604699 UTC

[section ""data" . GHC.IO.Handle.Types.LF_closure" {
     GHC.IO.Handle.Types.LF_closure:
         const GHC.IO.Handle.Types.LF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.773355954 UTC

[section ""data" . GHC.IO.Handle.Types.CRLF_closure" {
     GHC.IO.Handle.Types.CRLF_closure:
         const GHC.IO.Handle.Types.CRLF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.775072434 UTC

[section ""data" . GHC.IO.Handle.Types.NoBuffering_closure" {
     GHC.IO.Handle.Types.NoBuffering_closure:
         const GHC.IO.Handle.Types.NoBuffering_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.776697408 UTC

[section ""data" . GHC.IO.Handle.Types.LineBuffering_closure" {
     GHC.IO.Handle.Types.LineBuffering_closure:
         const GHC.IO.Handle.Types.LineBuffering_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.778994499 UTC

[section ""data" . GHC.IO.Handle.Types.BlockBuffering_closure" {
     GHC.IO.Handle.Types.BlockBuffering_closure:
         const GHC.IO.Handle.Types.BlockBuffering_info;
 },
 GHC.IO.Handle.Types.BlockBuffering_entry() //  [R2]
         { []
         }
     {offset
       c8eaW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eb0; else goto c8eaZ;
       c8eb0: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.BlockBuffering_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eaZ: // global
           I64[Hp - 8] = GHC.IO.Handle.Types.BlockBuffering_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BlockBuffering_info" {
     GHC.IO.Handle.Types.BlockBuffering_info:
         const GHC.IO.Handle.Types.BlockBuffering_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.783787653 UTC

[section ""data" . GHC.IO.Handle.Types.ClosedHandle_closure" {
     GHC.IO.Handle.Types.ClosedHandle_closure:
         const GHC.IO.Handle.Types.ClosedHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.785596213 UTC

[section ""data" . GHC.IO.Handle.Types.SemiClosedHandle_closure" {
     GHC.IO.Handle.Types.SemiClosedHandle_closure:
         const GHC.IO.Handle.Types.SemiClosedHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.787225336 UTC

[section ""data" . GHC.IO.Handle.Types.ReadHandle_closure" {
     GHC.IO.Handle.Types.ReadHandle_closure:
         const GHC.IO.Handle.Types.ReadHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.788911733 UTC

[section ""data" . GHC.IO.Handle.Types.WriteHandle_closure" {
     GHC.IO.Handle.Types.WriteHandle_closure:
         const GHC.IO.Handle.Types.WriteHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.790637942 UTC

[section ""data" . GHC.IO.Handle.Types.AppendHandle_closure" {
     GHC.IO.Handle.Types.AppendHandle_closure:
         const GHC.IO.Handle.Types.AppendHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.79234514 UTC

[section ""data" . GHC.IO.Handle.Types.ReadWriteHandle_closure" {
     GHC.IO.Handle.Types.ReadWriteHandle_closure:
         const GHC.IO.Handle.Types.ReadWriteHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.794573526 UTC

[section ""data" . GHC.IO.Handle.Types.BufferListNil_closure" {
     GHC.IO.Handle.Types.BufferListNil_closure:
         const GHC.IO.Handle.Types.BufferListNil_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.796896116 UTC

[section ""data" . GHC.IO.Handle.Types.BufferListCons_closure" {
     GHC.IO.Handle.Types.BufferListCons_closure:
         const GHC.IO.Handle.Types.BufferListCons_info;
 },
 GHC.IO.Handle.Types.BufferListCons_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ebi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ebm; else goto c8ebl;
       c8ebm: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.BufferListCons_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ebl: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BufferListCons_info" {
     GHC.IO.Handle.Types.BufferListCons_info:
         const GHC.IO.Handle.Types.BufferListCons_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.801582069 UTC

[section ""data" . GHC.IO.Handle.Types.Handle___closure" {
     GHC.IO.Handle.Types.Handle___closure:
         const GHC.IO.Handle.Types.Handle___info;
 },
 GHC.IO.Handle.Types.Handle___slow() //  [R1]
         { []
         }
     {offset
       c8ebt: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Types.Handle___entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.IO.Handle.Types.Handle___entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8eby: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c8ebC; else goto c8ebB;
       c8ebC: // global
           HpAlloc = 136;
           R1 = GHC.IO.Handle.Types.Handle___closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c8ebB: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R1 = Hp - 127;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.Handle___info" {
     GHC.IO.Handle.Types.Handle___info:
         const GHC.IO.Handle.Types.Handle___entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const GHC.IO.Handle.Types.Handle___slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.807271193 UTC

[section ""data" . GHC.IO.Handle.Types.FileHandle_closure" {
     GHC.IO.Handle.Types.FileHandle_closure:
         const GHC.IO.Handle.Types.FileHandle_info;
 },
 GHC.IO.Handle.Types.FileHandle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ec0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ec4; else goto c8ec3;
       c8ec4: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.FileHandle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ec3: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.FileHandle_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.FileHandle_info" {
     GHC.IO.Handle.Types.FileHandle_info:
         const GHC.IO.Handle.Types.FileHandle_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.811100196 UTC

[section ""data" . GHC.IO.Handle.Types.DuplexHandle_closure" {
     GHC.IO.Handle.Types.DuplexHandle_closure:
         const GHC.IO.Handle.Types.DuplexHandle_info;
 },
 GHC.IO.Handle.Types.DuplexHandle_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8ecf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8ecj; else goto c8eci;
       c8ecj: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.DuplexHandle_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eci: // global
           I64[Hp - 24] = GHC.IO.Handle.Types.DuplexHandle_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.DuplexHandle_info" {
     GHC.IO.Handle.Types.DuplexHandle_info:
         const GHC.IO.Handle.Types.DuplexHandle_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.815396835 UTC

[section ""cstring" . i8ctS_str" {
     i8ctS_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,78,101,119,108,105,110,101,77,111,100,101]
 },
 GHC.IO.Handle.Types.NewlineMode_con_entry() //  [R1]
         { []
         }
     {offset
       c8ecp: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.NewlineMode_con_info" {
     GHC.IO.Handle.Types.NewlineMode_con_info:
         const GHC.IO.Handle.Types.NewlineMode_con_entry;
         const 2;
         const 4;
         const i8ctS_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.818776485 UTC

[section ""relreadonly" . GHC.IO.Handle.Types.Newline_closure_tbl" {
     GHC.IO.Handle.Types.Newline_closure_tbl:
         const GHC.IO.Handle.Types.LF_closure+1;
         const GHC.IO.Handle.Types.CRLF_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.820691359 UTC

[section ""cstring" . i8ctU_str" {
     i8ctU_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,76,70]
 },
 GHC.IO.Handle.Types.LF_con_entry() //  [R1]
         { []
         }
     {offset
       c8ecw: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.LF_con_info" {
     GHC.IO.Handle.Types.LF_con_info:
         const GHC.IO.Handle.Types.LF_con_entry;
         const 4294967296;
         const 3;
         const i8ctU_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.823977704 UTC

[section ""cstring" . i8ctW_str" {
     i8ctW_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,67,82,76,70]
 },
 GHC.IO.Handle.Types.CRLF_con_entry() //  [R1]
         { []
         }
     {offset
       c8ecC: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.CRLF_con_info" {
     GHC.IO.Handle.Types.CRLF_con_info:
         const GHC.IO.Handle.Types.CRLF_con_entry;
         const 4294967296;
         const 4294967299;
         const i8ctW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.827403917 UTC

[section ""cstring" . i8ctY_str" {
     i8ctY_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,78,111,66,117,102,102,101,114,105,110,103]
 },
 GHC.IO.Handle.Types.NoBuffering_con_entry() //  [R1]
         { []
         }
     {offset
       c8ecI: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.NoBuffering_con_info" {
     GHC.IO.Handle.Types.NoBuffering_con_info:
         const GHC.IO.Handle.Types.NoBuffering_con_entry;
         const 4294967296;
         const 3;
         const i8ctY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.830623018 UTC

[section ""cstring" . i8cu0_str" {
     i8cu0_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,76,105,110,101,66,117,102,102,101,114,105,110,103]
 },
 GHC.IO.Handle.Types.LineBuffering_con_entry() //  [R1]
         { []
         }
     {offset
       c8ecO: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.LineBuffering_con_info" {
     GHC.IO.Handle.Types.LineBuffering_con_info:
         const GHC.IO.Handle.Types.LineBuffering_con_entry;
         const 4294967296;
         const 4294967299;
         const i8cu0_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.833924843 UTC

[section ""cstring" . i8cu2_str" {
     i8cu2_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,66,108,111,99,107,66,117,102,102,101,114,105,110,103]
 },
 GHC.IO.Handle.Types.BlockBuffering_con_entry() //  [R1]
         { []
         }
     {offset
       c8ecU: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BlockBuffering_con_info" {
     GHC.IO.Handle.Types.BlockBuffering_con_info:
         const GHC.IO.Handle.Types.BlockBuffering_con_entry;
         const 1;
         const 8589934594;
         const i8cu2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.837016993 UTC

[section ""relreadonly" . GHC.IO.Handle.Types.HandleType_closure_tbl" {
     GHC.IO.Handle.Types.HandleType_closure_tbl:
         const GHC.IO.Handle.Types.ClosedHandle_closure+1;
         const GHC.IO.Handle.Types.SemiClosedHandle_closure+2;
         const GHC.IO.Handle.Types.ReadHandle_closure+3;
         const GHC.IO.Handle.Types.WriteHandle_closure+4;
         const GHC.IO.Handle.Types.AppendHandle_closure+5;
         const GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.838996726 UTC

[section ""cstring" . i8cu4_str" {
     i8cu4_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,67,108,111,115,101,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.ClosedHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8ed1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.ClosedHandle_con_info" {
     GHC.IO.Handle.Types.ClosedHandle_con_info:
         const GHC.IO.Handle.Types.ClosedHandle_con_entry;
         const 4294967296;
         const 3;
         const i8cu4_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.842141366 UTC

[section ""cstring" . i8cu6_str" {
     i8cu6_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,83,101,109,105,67,108,111,115,101,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.SemiClosedHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8ed7: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.SemiClosedHandle_con_info" {
     GHC.IO.Handle.Types.SemiClosedHandle_con_info:
         const GHC.IO.Handle.Types.SemiClosedHandle_con_entry;
         const 4294967296;
         const 4294967299;
         const i8cu6_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.846402885 UTC

[section ""cstring" . i8cu8_str" {
     i8cu8_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,82,101,97,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.ReadHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8edd: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.ReadHandle_con_info" {
     GHC.IO.Handle.Types.ReadHandle_con_info:
         const GHC.IO.Handle.Types.ReadHandle_con_entry;
         const 4294967296;
         const 8589934595;
         const i8cu8_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.849510908 UTC

[section ""cstring" . i8cua_str" {
     i8cua_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,87,114,105,116,101,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.WriteHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8edj: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.WriteHandle_con_info" {
     GHC.IO.Handle.Types.WriteHandle_con_info:
         const GHC.IO.Handle.Types.WriteHandle_con_entry;
         const 4294967296;
         const 12884901891;
         const i8cua_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.852603228 UTC

[section ""cstring" . i8cuc_str" {
     i8cuc_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,65,112,112,101,110,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.AppendHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8edp: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.AppendHandle_con_info" {
     GHC.IO.Handle.Types.AppendHandle_con_info:
         const GHC.IO.Handle.Types.AppendHandle_con_entry;
         const 4294967296;
         const 17179869187;
         const i8cuc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.855807957 UTC

[section ""cstring" . i8cue_str" {
     i8cue_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,82,101,97,100,87,114,105,116,101,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.ReadWriteHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8edv: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.ReadWriteHandle_con_info" {
     GHC.IO.Handle.Types.ReadWriteHandle_con_info:
         const GHC.IO.Handle.Types.ReadWriteHandle_con_entry;
         const 4294967296;
         const 21474836483;
         const i8cue_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.858874299 UTC

[section ""cstring" . i8cug_str" {
     i8cug_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,66,117,102,102,101,114,76,105,115,116,78,105,108]
 },
 GHC.IO.Handle.Types.BufferListNil_con_entry() //  [R1]
         { []
         }
     {offset
       c8edB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BufferListNil_con_info" {
     GHC.IO.Handle.Types.BufferListNil_con_info:
         const GHC.IO.Handle.Types.BufferListNil_con_entry;
         const 4294967296;
         const 3;
         const i8cug_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.862102504 UTC

[section ""cstring" . i8cui_str" {
     i8cui_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,66,117,102,102,101,114,76,105,115,116,67,111,110,115]
 },
 GHC.IO.Handle.Types.BufferListCons_con_entry() //  [R1]
         { []
         }
     {offset
       c8edH: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BufferListCons_con_info" {
     GHC.IO.Handle.Types.BufferListCons_con_info:
         const GHC.IO.Handle.Types.BufferListCons_con_entry;
         const 2;
         const 4294967300;
         const i8cui_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.865222291 UTC

[section ""cstring" . i8cuk_str" {
     i8cuk_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,72,97,110,100,108,101,95,95]
 },
 GHC.IO.Handle.Types.Handle___con_entry() //  [R1]
         { []
         }
     {offset
       c8edN: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.Handle___con_info" {
     GHC.IO.Handle.Types.Handle___con_info:
         const GHC.IO.Handle.Types.Handle___con_entry;
         const 16;
         const 1;
         const i8cuk_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.869007783 UTC

[section ""cstring" . i8cum_str" {
     i8cum_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,70,105,108,101,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.FileHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8edT: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.FileHandle_con_info" {
     GHC.IO.Handle.Types.FileHandle_con_info:
         const GHC.IO.Handle.Types.FileHandle_con_entry;
         const 2;
         const 4;
         const i8cum_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.872850716 UTC

[section ""cstring" . i8cuo_str" {
     i8cuo_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,68,117,112,108,101,120,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.DuplexHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8edZ: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.DuplexHandle_con_info" {
     GHC.IO.Handle.Types.DuplexHandle_con_info:
         const GHC.IO.Handle.Types.DuplexHandle_con_entry;
         const 3;
         const 4294967297;
         const i8cuo_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:18.876304108 UTC

[section ""relreadonly" . S8alj_srt" {
     S8alj_srt:
         const GHC.IO.Handle.Types.$w$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowHandleType1_closure;
         const GHC.IO.Handle.Types.$fShowHandleType3_closure;
         const GHC.IO.Handle.Types.$fShowHandleType5_closure;
         const GHC.IO.Handle.Types.$fShowHandleType7_closure;
         const GHC.IO.Handle.Types.$fShowHandleType9_closure;
         const GHC.IO.Handle.Types.$fShowHandleType11_closure;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure;
         const GHC.IO.Handle.Types.$fReadNewline6_closure;
         const GHC.IO.Handle.Types.$fReadNewline10_closure;
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_closure;
         const GHC.IO.Handle.Types.$fShowNewline1_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.IO.Handle.Types.$w$cshowsPrec1_closure;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure;
         const GHC.IO.Handle.Types.$fShowNewlineMode1_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Handle.Types.$fReadNewline_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Handle.Types.$fReadNewline2_closure;
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Handle.Types.$fReadNewline1_closure;
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewline12_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode3_closure;
         const GHC.Read.readField_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode6_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode11_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode8_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode12_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure;
         const GHC.IO.Handle.Types.$w$creadPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode2_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode1_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode18_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode12_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode8_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode3_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode5_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode6_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode1_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_sps_closure;
         const GHC.Read.choose2_closure;
         const GHC.Read.$fReadInt_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode2_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode1_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode14_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:21.966942947 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:21.973914071 UTC

[section ""data" . GHC.IO.Handle.Types.$WHandle___closure" {
     GHC.IO.Handle.Types.$WHandle___closure:
         const GHC.IO.Handle.Types.$WHandle___info;
 },
 GHC.IO.Handle.Types.$WHandle___slow() //  [R1]
         { []
         }
     {offset
       c8eqj: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Types.$WHandle___entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.IO.Handle.Types.$WHandle___entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8eqs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c8eqL; else goto c8eqM;
       c8eqL: // global
           R1 = GHC.IO.Handle.Types.$WHandle___closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c8eqM: // global
           I64[Sp - 40] = block_c8eqn_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$WHandle___info" {
     GHC.IO.Handle.Types.$WHandle___info:
         const GHC.IO.Handle.Types.$WHandle___entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const GHC.IO.Handle.Types.$WHandle___slow;
 },
 _c8eqn() //  [R1]
         { []
         }
     {offset
       c8eqn: // global
           I64[Sp] = block_c8eqp_info;
           _s8eem::P64 = R1;
           R1 = P64[Sp + 40];
           P64[Sp + 40] = _s8eem::P64;
           if (R1 & 7 != 0) goto u8eqU; else goto c8eqq;
       u8eqU: // global
           call _c8eqp(R1) args: 0, res: 0, upd: 0;
       c8eqq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eqn_info" {
     block_c8eqn_info:
         const _c8eqn;
         const 15;
         const 30;
 },
 _c8eqp() //  [R1]
         { []
         }
     {offset
       c8eqp: // global
           I64[Sp] = block_c8eqv_info;
           _s8eeo::P64 = P64[R1 + 7];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _s8eeo::P64;
           if (R1 & 7 != 0) goto u8eqV; else goto c8eqw;
       u8eqV: // global
           call _c8eqv(R1) args: 0, res: 0, upd: 0;
       c8eqw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eqp_info" {
     block_c8eqp_info:
         const _c8eqp;
         const 15;
         const 30;
 },
 _c8eqv() //  [R1]
         { []
         }
     {offset
       c8eqv: // global
           I64[Sp] = block_c8eqA_info;
           _s8eeq::P64 = P64[R1 + 7];
           R1 = P64[Sp + 64];
           P64[Sp + 64] = _s8eeq::P64;
           if (R1 & 7 != 0) goto u8eqW; else goto c8eqB;
       u8eqW: // global
           call _c8eqA(R1) args: 0, res: 0, upd: 0;
       c8eqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eqv_info" {
     block_c8eqv_info:
         const _c8eqv;
         const 15;
         const 30;
 },
 _c8eqA() //  [R1]
         { []
         }
     {offset
       c8eqA: // global
           I64[Sp] = block_c8eqF_info;
           _s8ees::P64 = P64[R1 + 7];
           R1 = P64[Sp + 72];
           P64[Sp + 72] = _s8ees::P64;
           if (R1 & 7 != 0) goto u8eqX; else goto c8eqG;
       u8eqX: // global
           call _c8eqF(R1) args: 0, res: 0, upd: 0;
       c8eqG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eqA_info" {
     block_c8eqA_info:
         const _c8eqA;
         const 15;
         const 30;
 },
 _c8eqF() //  [R1]
         { []
         }
     {offset
       c8eqF: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c8eqT; else goto c8eqS;
       c8eqT: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8eqS: // global
           _s8eeu::P64 = P64[R1 + 7];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 8];
           P64[Hp - 112] = P64[Sp + 16];
           P64[Hp - 104] = P64[Sp + 24];
           P64[Hp - 96] = P64[Sp + 40];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 64];
           P64[Hp - 56] = P64[Sp + 72];
           P64[Hp - 48] = _s8eeu::P64;
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = P64[Sp + 104];
           P64[Hp - 8] = P64[Sp + 112];
           P64[Hp] = P64[Sp + 120];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eqF_info" {
     block_c8eqF_info:
         const _c8eqF;
         const 15;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:21.989133621 UTC

[section ""data" . GHC.IO.Handle.Types.$WFileHandle_closure" {
     GHC.IO.Handle.Types.$WFileHandle_closure:
         const GHC.IO.Handle.Types.$WFileHandle_info;
 },
 GHC.IO.Handle.Types.$WFileHandle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8erR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8erV; else goto c8erW;
       c8erV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$WFileHandle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8erW: // global
           I64[Sp - 16] = block_c8erO_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8es0; else goto c8erP;
       u8es0: // global
           call _c8erO(R1) args: 0, res: 0, upd: 0;
       c8erP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$WFileHandle_info" {
     GHC.IO.Handle.Types.$WFileHandle_info:
         const GHC.IO.Handle.Types.$WFileHandle_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8erO() //  [R1]
         { []
         }
     {offset
       c8erO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8erZ; else goto c8erY;
       c8erZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8erY: // global
           _s8eey::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.IO.Handle.Types.FileHandle_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _s8eey::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8erO_info" {
     block_c8erO_info:
         const _c8erO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:21.996073655 UTC

[section ""data" . GHC.IO.Handle.Types.$WDuplexHandle_closure" {
     GHC.IO.Handle.Types.$WDuplexHandle_closure:
         const GHC.IO.Handle.Types.$WDuplexHandle_info;
 },
 GHC.IO.Handle.Types.$WDuplexHandle_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8esl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8esu; else goto c8esv;
       c8esu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$WDuplexHandle_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8esv: // global
           I64[Sp - 24] = block_c8esi_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8esB; else goto c8esj;
       u8esB: // global
           call _c8esi(R1) args: 0, res: 0, upd: 0;
       c8esj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$WDuplexHandle_info" {
     GHC.IO.Handle.Types.$WDuplexHandle_info:
         const GHC.IO.Handle.Types.$WDuplexHandle_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8esi() //  [R1]
         { []
         }
     {offset
       c8esi: // global
           I64[Sp] = block_c8eso_info;
           _s8eeD::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _s8eeD::P64;
           if (R1 & 7 != 0) goto u8esA; else goto c8esp;
       u8esA: // global
           call _c8eso(R1) args: 0, res: 0, upd: 0;
       c8esp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8esi_info" {
     block_c8esi_info:
         const _c8esi;
         const 2;
         const 30;
 },
 _c8eso() //  [R1]
         { []
         }
     {offset
       c8eso: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8esz; else goto c8esy;
       c8esz: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8esy: // global
           _s8eeF::P64 = P64[R1 + 7];
           I64[Hp - 24] = GHC.IO.Handle.Types.DuplexHandle_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = _s8eeF::P64;
           R1 = Hp - 22;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eso_info" {
     block_c8eso_info:
         const _c8eso;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.003694007 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType12_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType12_bytes:
         I8[] [99,108,111,115,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.006562133 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType11_closure" {
     GHC.IO.Handle.Types.$fShowHandleType11_closure:
         const GHC.IO.Handle.Types.$fShowHandleType11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType11_entry() //  [R1]
         { []
         }
     {offset
       c8et2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8et3; else goto c8et4;
       c8et3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8et4: // global
           (_c8esZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8esZ::I64 == 0) goto c8et1; else goto c8et0;
       c8et1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8et0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8esZ::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType11_info" {
     GHC.IO.Handle.Types.$fShowHandleType11_info:
         const GHC.IO.Handle.Types.$fShowHandleType11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.010343161 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType10_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType10_bytes:
         I8[] [115,101,109,105,45,99,108,111,115,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.01280131 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType9_closure" {
     GHC.IO.Handle.Types.$fShowHandleType9_closure:
         const GHC.IO.Handle.Types.$fShowHandleType9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType9_entry() //  [R1]
         { []
         }
     {offset
       c8etk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8etl; else goto c8etm;
       c8etl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8etm: // global
           (_c8eth::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eth::I64 == 0) goto c8etj; else goto c8eti;
       c8etj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eti: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eth::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType9_info" {
     GHC.IO.Handle.Types.$fShowHandleType9_info:
         const GHC.IO.Handle.Types.$fShowHandleType9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.017087211 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType8_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType8_bytes:
         I8[] [114,101,97,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.019677177 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType7_closure" {
     GHC.IO.Handle.Types.$fShowHandleType7_closure:
         const GHC.IO.Handle.Types.$fShowHandleType7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType7_entry() //  [R1]
         { []
         }
     {offset
       c8etC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8etD; else goto c8etE;
       c8etD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8etE: // global
           (_c8etz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8etz::I64 == 0) goto c8etB; else goto c8etA;
       c8etB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8etA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8etz::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType7_info" {
     GHC.IO.Handle.Types.$fShowHandleType7_info:
         const GHC.IO.Handle.Types.$fShowHandleType7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.024003301 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType6_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType6_bytes:
         I8[] [119,114,105,116,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.026549573 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType5_closure" {
     GHC.IO.Handle.Types.$fShowHandleType5_closure:
         const GHC.IO.Handle.Types.$fShowHandleType5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType5_entry() //  [R1]
         { []
         }
     {offset
       c8etU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8etV; else goto c8etW;
       c8etV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8etW: // global
           (_c8etR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8etR::I64 == 0) goto c8etT; else goto c8etS;
       c8etT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8etS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8etR::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType5_info" {
     GHC.IO.Handle.Types.$fShowHandleType5_info:
         const GHC.IO.Handle.Types.$fShowHandleType5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.030556967 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType4_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType4_bytes:
         I8[] [119,114,105,116,97,98,108,101,32,40,97,112,112,101,110,100,41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.033313965 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType3_closure" {
     GHC.IO.Handle.Types.$fShowHandleType3_closure:
         const GHC.IO.Handle.Types.$fShowHandleType3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType3_entry() //  [R1]
         { []
         }
     {offset
       c8euc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eud; else goto c8eue;
       c8eud: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eue: // global
           (_c8eu9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eu9::I64 == 0) goto c8eub; else goto c8eua;
       c8eub: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eua: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eu9::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType3_info" {
     GHC.IO.Handle.Types.$fShowHandleType3_info:
         const GHC.IO.Handle.Types.$fShowHandleType3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.037106897 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowHandleType2_bytes" {
     GHC.IO.Handle.Types.$fShowHandleType2_bytes:
         I8[] [114,101,97,100,45,119,114,105,116,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.039979653 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType1_closure" {
     GHC.IO.Handle.Types.$fShowHandleType1_closure:
         const GHC.IO.Handle.Types.$fShowHandleType1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType1_entry() //  [R1]
         { []
         }
     {offset
       c8euu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8euv; else goto c8euw;
       c8euv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8euw: // global
           (_c8eur::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eur::I64 == 0) goto c8eut; else goto c8eus;
       c8eut: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eus: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eur::I64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType1_info" {
     GHC.IO.Handle.Types.$fShowHandleType1_info:
         const GHC.IO.Handle.Types.$fShowHandleType1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.045123961 UTC

[section ""data" . GHC.IO.Handle.Types.$w$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$w$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c8euU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8euV; else goto c8euW;
       c8euV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8euW: // global
           I64[Sp - 16] = block_c8euJ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8evf; else goto c8euK;
       u8evf: // global
           call _c8euJ(R1) args: 0, res: 0, upd: 0;
       c8euK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$cshowsPrec_info" {
     GHC.IO.Handle.Types.$w$cshowsPrec_info:
         const GHC.IO.Handle.Types.$w$cshowsPrec_entry;
         const 0;
         const 545460846606;
         const 8589934607;
         const S8evg_srt;
 },
 _c8euJ() //  [R1]
         { []
         }
     {offset
       c8euJ: // global
           _s8eeH::P64 = P64[Sp + 8];
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c8euN;
               case 2 : goto c8euO;
               case 3 : goto c8euP;
               case 4 : goto c8euQ;
               case 5 : goto c8euR;
               case 6 : goto c8euS;
           }
       c8euS: // global
           R3 = _s8eeH::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8euR: // global
           R3 = _s8eeH::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8euQ: // global
           R3 = _s8eeH::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8euP: // global
           R3 = _s8eeH::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8euO: // global
           R3 = _s8eeH::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8euN: // global
           R3 = _s8eeH::P64;
           R2 = GHC.IO.Handle.Types.$fShowHandleType11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8euJ_info" {
     block_c8euJ_info:
         const _c8euJ;
         const 1;
         const 270582939678;
         const S8evg_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.052029568 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_entry() //  [R3,
                                                               R4]
         { []
         }
     {offset
       c8evA: // global
           _s8eeK::P64 = R3;
           R3 = R4;
           R2 = _s8eeK::P64;
           call GHC.IO.Handle.Types.$w$cshowsPrec_entry(R3,
                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S8evg_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.05672699 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8evW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8evX; else goto c8evY;
       c8evX: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8evY: // global
           I64[Sp - 8] = block_c8evL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ewh; else goto c8evM;
       u8ewh: // global
           call _c8evL(R1) args: 0, res: 0, upd: 0;
       c8evM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType_$cshow_info" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshow_info:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_entry;
         const 0;
         const 545460846606;
         const 4294967301;
         const S8evg_srt+8;
 },
 _c8evL() //  [R1]
         { []
         }
     {offset
       c8evL: // global
           switch [1 .. 6] (R1 & 7) {
               case 1 : goto c8evP;
               case 2 : goto c8evQ;
               case 3 : goto c8evR;
               case 4 : goto c8evS;
               case 5 : goto c8evT;
               case 6 : goto c8evU;
           }
       c8evU: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8evT: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8evS: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8evR: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8evQ: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8evP: // global
           R1 = GHC.IO.Handle.Types.$fShowHandleType11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8evL_info" {
     block_c8evL_info:
         const _c8evL;
         const 0;
         const 270582939678;
         const S8evg_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.063990226 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowHandleType_$cshowList_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c8ewH: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandleType_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowHandleType_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8evg_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.067792427 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandleType_closure" {
     GHC.IO.Handle.Types.$fShowHandleType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.073739506 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqHandle_$c==_closure" {
     GHC.IO.Handle.Types.$fEqHandle_$c==_closure:
         const GHC.IO.Handle.Types.$fEqHandle_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqHandle_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8ex0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ex1; else goto c8ex2;
       c8ex1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqHandle_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ex2: // global
           I64[Sp - 16] = block_c8ewT_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8exF; else goto c8ewU;
       u8exF: // global
           call _c8ewT(R1) args: 0, res: 0, upd: 0;
       c8ewU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqHandle_$c==_info" {
     GHC.IO.Handle.Types.$fEqHandle_$c==_info:
         const GHC.IO.Handle.Types.$fEqHandle_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8ewT() //  [R1]
         { []
         }
     {offset
       c8ewT: // global
           _s8eeR::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8ewX; else goto c8ewY;
       c8ewX: // global
           I64[Sp] = block_c8ex5_info;
           _s8eeU::P64 = P64[R1 + 15];
           R1 = _s8eeR::P64;
           P64[Sp + 8] = _s8eeU::P64;
           if (R1 & 7 != 0) goto u8exD; else goto c8ex7;
       u8exD: // global
           call _c8ex5(R1) args: 0, res: 0, upd: 0;
       c8ex7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ewY: // global
           I64[Sp] = block_c8exk_info;
           _s8ef3::P64 = P64[R1 + 14];
           R1 = _s8eeR::P64;
           P64[Sp + 8] = _s8ef3::P64;
           if (R1 & 7 != 0) goto u8exE; else goto c8exm;
       u8exE: // global
           call _c8exk(R1) args: 0, res: 0, upd: 0;
       c8exm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ewT_info" {
     block_c8ewT_info:
         const _c8ewT;
         const 1;
         const 30;
 },
 _c8ex5() //  [R1]
         { []
         }
     {offset
       c8ex5: // global
           if (R1 & 7 == 1) goto c8exd; else goto u8exC;
       c8exd: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8exC: // global
           Sp = Sp + 16;
           call _c8exs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ex5_info" {
     block_c8ex5_info:
         const _c8ex5;
         const 1;
         const 30;
 },
 _c8exk() //  [R1]
         { []
         }
     {offset
       c8exk: // global
           if (R1 & 7 == 1) goto u8exB; else goto c8exw;
       u8exB: // global
           Sp = Sp + 16;
           call _c8exs() args: 0, res: 0, upd: 0;
       c8exw: // global
           R1 = I64[((P64[Sp + 8] == P64[R1 + 14]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8exk_info" {
     block_c8exk_info:
         const _c8exk;
         const 1;
         const 30;
 },
 _c8exs() //  []
         { []
         }
     {offset
       c8exs: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.088445824 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqHandle_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqHandle_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqHandle_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqHandle_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eyx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eyy; else goto c8eyz;
       c8eyy: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqHandle_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eyz: // global
           I64[Sp - 16] = block_c8eyq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ezI; else goto c8eyr;
       u8ezI: // global
           call _c8eyq(R1) args: 0, res: 0, upd: 0;
       c8eyr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqHandle_$c/=_info" {
     GHC.IO.Handle.Types.$fEqHandle_$c/=_info:
         const GHC.IO.Handle.Types.$fEqHandle_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eyq() //  [R1]
         { []
         }
     {offset
       c8eyq: // global
           _s8efd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eyu; else goto c8eyv;
       c8eyu: // global
           I64[Sp] = block_c8eyC_info;
           _s8efg::P64 = P64[R1 + 15];
           R1 = _s8efd::P64;
           P64[Sp + 8] = _s8efg::P64;
           if (R1 & 7 != 0) goto u8ezG; else goto c8eyE;
       u8ezG: // global
           call _c8eyC(R1) args: 0, res: 0, upd: 0;
       c8eyE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eyv: // global
           I64[Sp] = block_c8ez6_info;
           _s8efp::P64 = P64[R1 + 14];
           R1 = _s8efd::P64;
           P64[Sp + 8] = _s8efp::P64;
           if (R1 & 7 != 0) goto u8ezH; else goto c8ez8;
       u8ezH: // global
           call _c8ez6(R1) args: 0, res: 0, upd: 0;
       c8ez8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eyq_info" {
     block_c8eyq_info:
         const _c8eyq;
         const 1;
         const 30;
 },
 _c8eyC() //  [R1]
         { []
         }
     {offset
       c8eyC: // global
           if (R1 & 7 == 1) goto c8eyZ; else goto u8ezD;
       c8eyZ: // global
           if (P64[Sp + 8] == P64[R1 + 15]) goto u8ezE; else goto u8ezF;
       u8ezE: // global
           Sp = Sp + 16;
           call _c8ezt() args: 0, res: 0, upd: 0;
       u8ezF: // global
           Sp = Sp + 16;
           goto u8ezL;
       u8ezD: // global
           Sp = Sp + 16;
           goto u8ezL;
       u8ezL: // global
           call _c8ezn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8eyC_info" {
     block_c8eyC_info:
         const _c8eyC;
         const 1;
         const 30;
 },
 _c8ez6() //  [R1]
         { []
         }
     {offset
       c8ez6: // global
           if (R1 & 7 == 1) goto u8ezA; else goto c8ezx;
       u8ezA: // global
           Sp = Sp + 16;
           goto u8ezO;
       c8ezx: // global
           if (P64[Sp + 8] == P64[R1 + 14]) goto u8ezB; else goto u8ezC;
       u8ezB: // global
           Sp = Sp + 16;
           call _c8ezt() args: 0, res: 0, upd: 0;
       u8ezC: // global
           Sp = Sp + 16;
           goto u8ezO;
       u8ezO: // global
           call _c8ezn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8ez6_info" {
     block_c8ez6_info:
         const _c8ez6;
         const 1;
         const 30;
 },
 _c8ezt() //  []
         { []
         }
     {offset
       c8ezt: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8ezn() //  []
         { []
         }
     {offset
       c8ezn: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.099350032 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqHandle_closure" {
     GHC.IO.Handle.Types.$fEqHandle_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqHandle_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqHandle_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.101096139 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewline11_bytes" {
     GHC.IO.Handle.Types.$fReadNewline11_bytes:
         I8[] [76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.103704809 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline10_closure" {
     GHC.IO.Handle.Types.$fReadNewline10_closure:
         const GHC.IO.Handle.Types.$fReadNewline10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline10_entry() //  [R1]
         { []
         }
     {offset
       c8eAx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eAy; else goto c8eAz;
       c8eAy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eAz: // global
           (_c8eAu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eAu::I64 == 0) goto c8eAw; else goto c8eAv;
       c8eAw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eAv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eAu::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewline11_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline10_info" {
     GHC.IO.Handle.Types.$fReadNewline10_info:
         const GHC.IO.Handle.Types.$fReadNewline10_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.107811598 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewline7_bytes" {
     GHC.IO.Handle.Types.$fReadNewline7_bytes:
         I8[] [67,82,76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.110603159 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline6_closure" {
     GHC.IO.Handle.Types.$fReadNewline6_closure:
         const GHC.IO.Handle.Types.$fReadNewline6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline6_entry() //  [R1]
         { []
         }
     {offset
       c8eAP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eAQ; else goto c8eAR;
       c8eAQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eAR: // global
           (_c8eAM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eAM::I64 == 0) goto c8eAO; else goto c8eAN;
       c8eAO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eAN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eAM::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewline7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline6_info" {
     GHC.IO.Handle.Types.$fReadNewline6_info:
         const GHC.IO.Handle.Types.$fReadNewline6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.115883256 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c8eBb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eBc; else goto c8eBd;
       c8eBc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eBd: // global
           I64[Sp - 16] = block_c8eB4_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eBk; else goto c8eB5;
       u8eBk: // global
           call _c8eB4(R1) args: 0, res: 0, upd: 0;
       c8eB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_entry;
         const 0;
         const 30064771086;
         const 12884901911;
         const S8evg_srt+64;
 },
 _c8eB4() //  [R1]
         { []
         }
     {offset
       c8eB4: // global
           _s8efA::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eB8; else goto c8eB9;
       c8eB8: // global
           R3 = _s8efA::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8eB9: // global
           R3 = _s8efA::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eB4_info" {
     block_c8eB4_info:
         const _c8eB4;
         const 1;
         const 12884901918;
         const S8evg_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.122268031 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowNewline_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8eBI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8eBJ; else goto c8eBK;
       c8eBJ: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewline_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eBK: // global
           I64[Sp - 8] = block_c8eBB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8eBR; else goto c8eBC;
       u8eBR: // global
           call _c8eBB(R1) args: 0, res: 0, upd: 0;
       c8eBC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline_$cshow_info" {
     GHC.IO.Handle.Types.$fShowNewline_$cshow_info:
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_entry;
         const 0;
         const 47244640270;
         const 4294967301;
         const S8evg_srt+64;
 },
 _c8eBB() //  [R1]
         { []
         }
     {offset
       c8eBB: // global
           if (R1 & 7 == 1) goto c8eBF; else goto c8eBG;
       c8eBF: // global
           R1 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8eBG: // global
           R1 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eBB_info" {
     block_c8eBB_info:
         const _c8eBB;
         const 0;
         const 12884901918;
         const S8evg_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.12930444 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline1_closure" {
     GHC.IO.Handle.Types.$fShowNewline1_closure:
         const GHC.IO.Handle.Types.$fShowNewline1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eCh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eCi; else goto c8eCj;
       c8eCi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewline1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eCj: // global
           I64[Sp - 16] = block_c8eCa_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eCq; else goto c8eCb;
       u8eCq: // global
           call _c8eCa(R1) args: 0, res: 0, upd: 0;
       c8eCb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline1_info" {
     GHC.IO.Handle.Types.$fShowNewline1_info:
         const GHC.IO.Handle.Types.$fShowNewline1_entry;
         const 0;
         const 81604378638;
         const 8589934607;
         const S8evg_srt+64;
 },
 _c8eCa() //  [R1]
         { []
         }
     {offset
       c8eCa: // global
           _s8efF::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eCe; else goto c8eCf;
       c8eCe: // global
           R3 = _s8efF::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c8eCf: // global
           R3 = _s8efF::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eCa_info" {
     block_c8eCa_info:
         const _c8eCa;
         const 1;
         const 12884901918;
         const S8evg_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.135516739 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewline_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eCH: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowNewline1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewline_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowNewline_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowNewline_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8evg_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.138986186 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewline_closure" {
     GHC.IO.Handle.Types.$fShowNewline_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowNewline_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.141215895 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowNewlineMode4_bytes" {
     GHC.IO.Handle.Types.$fShowNewlineMode4_bytes:
         I8[] [78,101,119,108,105,110,101,77,111,100,101,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.142892526 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowNewlineMode3_bytes" {
     GHC.IO.Handle.Types.$fShowNewlineMode3_bytes:
         I8[] [105,110,112,117,116,78,76,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.144592141 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowNewlineMode2_bytes" {
     GHC.IO.Handle.Types.$fShowNewlineMode2_bytes:
         I8[] [111,117,116,112,117,116,78,76,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.146447894 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode5_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode5_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.155080809 UTC

[section ""data" . GHC.IO.Handle.Types.$w$cshowsPrec1_closure" {
     GHC.IO.Handle.Types.$w$cshowsPrec1_closure:
         const GHC.IO.Handle.Types.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       c8eCU: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2,
                                                         R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s8efR_entry() //  [R1]
         { []
         }
     {offset
       c8eDw: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8efR_info" {
     sat_s8efR_info:
         const sat_s8efR_entry;
         const 1;
         const 16;
 },
 sat_s8efS_entry() //  [R1]
         { []
         }
     {offset
       c8eDF: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8efS_info" {
     sat_s8efS_info:
         const sat_s8efS_entry;
         const 1;
         const 16;
 },
 sat_s8efT_entry() //  [R1]
         { []
         }
     {offset
       c8eDM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8eDN; else goto c8eDO;
       c8eDN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eDO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8eDn_info;
           _s8efO::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s8efO::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8eDV; else goto c8eDo;
       u8eDV: // global
           call _c8eDn(R1) args: 0, res: 0, upd: 0;
       c8eDo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8efT_info" {
     sat_s8efT_info:
         const sat_s8efT_entry;
         const 2;
         const 12884901906;
         const S8evg_srt+64;
 },
 _c8eDn() //  [R1]
         { []
         }
     {offset
       c8eDn: // global
           _s8efO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eDJ; else goto c8eDK;
       c8eDJ: // global
           Hp = Hp + 24;
           _s8efQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8eDU; else goto c8eDQ;
       c8eDQ: // global
           I64[Hp - 16] = sat_s8efR_info;
           P64[Hp] = _s8efO::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c8eDK: // global
           Hp = Hp + 24;
           _s8efQ::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8eDU; else goto c8eDT;
       c8eDU: // global
           HpAlloc = 24;
           R1 = _s8efQ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8eDT: // global
           I64[Hp - 16] = sat_s8efS_info;
           P64[Hp] = _s8efO::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8eDn_info" {
     block_c8eDn_info:
         const _c8eDn;
         const 1;
         const 12884901918;
         const S8evg_srt+64;
 },
 sat_s8efU_entry() //  [R1]
         { []
         }
     {offset
       c8eDW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8eE0; else goto c8eDZ;
       c8eE0: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eDZ: // global
           _s8efL::P64 = P64[R1 + 16];
           _s8efO::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s8efT_info;
           P64[Hp - 8] = _s8efL::P64;
           P64[Hp] = _s8efO::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8efU_info" {
     sat_s8efU_info:
         const sat_s8efU_entry;
         const 2;
         const 12884901906;
         const S8evg_srt+64;
 },
 karg_s8efP_entry() //  [R1]
         { []
         }
     {offset
       c8eE1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8eE5; else goto c8eE4;
       c8eE5: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eE4: // global
           _s8efL::P64 = P64[R1 + 16];
           _s8efO::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s8efU_info;
           P64[Hp - 8] = _s8efL::P64;
           P64[Hp] = _s8efO::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . karg_s8efP_info" {
     karg_s8efP_info:
         const karg_s8efP_entry;
         const 2;
         const 150323855378;
         const S8evg_srt+64;
 },
 sat_s8efW_entry() //  [R1]
         { []
         }
     {offset
       c8eEd: // global
           _s8efW::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto c8eEe; else goto c8eEf;
       c8eEf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8eEh; else goto c8eEg;
       c8eEh: // global
           HpAlloc = 32;
           goto c8eEe;
       c8eEe: // global
           R1 = _s8efW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eEg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8efW::P64;
           _s8efK::P64 = P64[_s8efW::P64 + 16];
           _s8efL::P64 = P64[_s8efW::P64 + 24];
           _s8efO::P64 = P64[_s8efW::P64 + 32];
           I64[Hp - 24] = karg_s8efP_info;
           P64[Hp - 8] = _s8efL::P64;
           P64[Hp] = _s8efO::P64;
           I64[Sp - 32] = block_c8eE6_info;
           R1 = _s8efK::P64;
           P64[Sp - 24] = Hp - 24;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8eEo; else goto c8eE7;
       u8eEo: // global
           call _c8eE6(R1) args: 0, res: 0, upd: 0;
       c8eE7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8efW_info" {
     sat_s8efW_info:
         const sat_s8efW_entry;
         const 3;
         const 150323855375;
         const S8evg_srt+64;
 },
 _c8eE6() //  [R1]
         { []
         }
     {offset
       c8eE6: // global
           _c8eDb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eEa; else goto c8eEb;
       c8eEa: // global
           R3 = _c8eDb::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline10_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       c8eEb: // global
           R3 = _c8eDb::P64;
           R2 = GHC.IO.Handle.Types.$fReadNewline6_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8eE6_info" {
     block_c8eE6_info:
         const _c8eE6;
         const 1;
         const 12884901918;
         const S8evg_srt+64;
 },
 sat_s8efX_entry() //  [R1]
         { []
         }
     {offset
       c8eEp: // global
           _s8efX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8eEq; else goto c8eEr;
       c8eEr: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8eEt; else goto c8eEs;
       c8eEt: // global
           HpAlloc = 40;
           goto c8eEq;
       c8eEq: // global
           R1 = _s8efX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eEs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8efX::P64;
           _s8efK::P64 = P64[_s8efX::P64 + 16];
           _s8efL::P64 = P64[_s8efX::P64 + 24];
           _s8efO::P64 = P64[_s8efX::P64 + 32];
           I64[Hp - 32] = sat_s8efW_info;
           P64[Hp - 16] = _s8efK::P64;
           P64[Hp - 8] = _s8efL::P64;
           P64[Hp] = _s8efO::P64;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8efX_info" {
     sat_s8efX_info:
         const sat_s8efX_entry;
         const 3;
         const 150323855375;
         const S8evg_srt+64;
 },
 p_s8efN_entry() //  [R1, R2]
         { []
         }
     {offset
       c8eEu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8eEy; else goto c8eEx;
       c8eEy: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eEx: // global
           _s8efK::P64 = P64[R1 + 7];
           _s8efL::P64 = P64[R1 + 15];
           I64[Hp - 32] = sat_s8efX_info;
           P64[Hp - 16] = _s8efK::P64;
           P64[Hp - 8] = _s8efL::P64;
           P64[Hp] = R2;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_s8efN_info" {
     p_s8efN_info:
         const p_s8efN_entry;
         const 2;
         const 150323855371;
         const 4294967301;
         const S8evg_srt+64;
 },
 sat_s8eg0_entry() //  [R1]
         { []
         }
     {offset
       c8eEI: // global
           _s8eg0::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8eEJ; else goto c8eEK;
       c8eEK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8eEM; else goto c8eEL;
       c8eEM: // global
           HpAlloc = 24;
           goto c8eEJ;
       c8eEJ: // global
           R1 = _s8eg0::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eEL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8eg0::P64;
           _s8efM::P64 = P64[_s8eg0::P64 + 16];
           _s8efN::P64 = P64[_s8eg0::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s8efM::P64;
           R2 = Hp - 14;
           R1 = _s8efN::P64;
           Sp = Sp - 16;
           call p_s8efN_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8eg0_info" {
     sat_s8eg0_info:
         const sat_s8eg0_entry;
         const 2;
         const 150323855378;
         const S8evg_srt+64;
 },
 GHC.IO.Handle.Types.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8eEQ: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c8eEU; else goto c8eET;
       c8eEU: // global
           HpAlloc = 80;
           R1 = GHC.IO.Handle.Types.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c8eET: // global
           I64[Hp - 72] = p_s8efN_info;
           P64[Hp - 64] = R3;
           P64[Hp - 56] = R4;
           _c8eCY::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto c8eEO; else goto c8eEP;
       c8eEO: // global
           Hp = Hp - 56;
           R2 = R5;
           R1 = _c8eCY::P64;
           call p_s8efN_entry(R2, R1) args: 8, res: 0, upd: 8;
       c8eEP: // global
           I64[Hp - 48] = sat_s8eg0_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _c8eCY::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$cshowsPrec1_info" {
     GHC.IO.Handle.Types.$w$cshowsPrec1_info:
         const GHC.IO.Handle.Types.$w$cshowsPrec1_entry;
         const 0;
         const 425201762318;
         const 17179869184;
         const S8evg_srt+64;
         const 68;
         const GHC.IO.Handle.Types.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.183653168 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_entry() //  [R2,
                                                                R3, R4]
         { []
         }
     {offset
       c8eGc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8eGg; else goto c8eGh;
       c8eGg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eGh: // global
           I64[Sp - 24] = block_c8eG9_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u8eGp; else goto c8eGa;
       u8eGp: // global
           call _c8eG9(R1) args: 0, res: 0, upd: 0;
       c8eGa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S8evg_srt+112;
 },
 _c8eG9() //  [R1]
         { []
         }
     {offset
       c8eG9: // global
           I64[Sp] = block_c8eGf_info;
           _s8eg5::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8eg5::I64;
           if (R1 & 7 != 0) goto u8eGo; else goto c8eGj;
       u8eGo: // global
           call _c8eGf(R1) args: 0, res: 0, upd: 0;
       c8eGj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eG9_info" {
     block_c8eG9_info:
         const _c8eG9;
         const 2;
         const 4294967326;
         const S8evg_srt+112;
 },
 _c8eGf() //  [R1]
         { []
         }
     {offset
       c8eGf: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eGf_info" {
     block_c8eGf_info:
         const _c8eGf;
         const 66;
         const 4294967326;
         const S8evg_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.191478315 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode2_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode2_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.194633643 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8eGN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8eGO; else goto c8eGP;
       c8eGO: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eGP: // global
           I64[Sp - 8] = block_c8eGK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8eGT; else goto c8eGL;
       u8eGT: // global
           call _c8eGK(R1) args: 0, res: 0, upd: 0;
       c8eGL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S8evg_srt+112;
 },
 _c8eGK() //  [R1]
         { []
         }
     {offset
       c8eGK: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eGK_info" {
     block_c8eGK_info:
         const _c8eGK;
         const 0;
         const 4294967326;
         const S8evg_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.200781554 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode1_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode1_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eHc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eHd; else goto c8eHe;
       c8eHd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowNewlineMode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eHe: // global
           I64[Sp - 16] = block_c8eH9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eHi; else goto c8eHa;
       u8eHi: // global
           call _c8eH9(R1) args: 0, res: 0, upd: 0;
       c8eHa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode1_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode1_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S8evg_srt+112;
 },
 _c8eH9() //  [R1]
         { []
         }
     {offset
       c8eH9: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.$w$cshowsPrec1_entry(R5,
                                                         R4,
                                                         R3,
                                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eH9_info" {
     block_c8eH9_info:
         const _c8eH9;
         const 1;
         const 4294967326;
         const S8evg_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.207137769 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8eHx: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowNewlineMode1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8evg_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.210600741 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowNewlineMode_closure" {
     GHC.IO.Handle.Types.$fShowNewlineMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.21317625 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline9_closure" {
     GHC.IO.Handle.Types.$fReadNewline9_closure:
         const GHC.IO.Handle.Types.$fReadNewline9_info;
 },
 GHC.IO.Handle.Types.$fReadNewline9_entry() //  [R3]
         { []
         }
     {offset
       c8eHJ: // global
           R2 = GHC.IO.Handle.Types.LF_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline9_info" {
     GHC.IO.Handle.Types.$fReadNewline9_info:
         const GHC.IO.Handle.Types.$fReadNewline9_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.216450032 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline8_closure" {
     GHC.IO.Handle.Types.$fReadNewline8_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadNewline10_closure;
         const GHC.IO.Handle.Types.$fReadNewline9_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.219029068 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline5_closure" {
     GHC.IO.Handle.Types.$fReadNewline5_closure:
         const GHC.IO.Handle.Types.$fReadNewline5_info;
 },
 GHC.IO.Handle.Types.$fReadNewline5_entry() //  [R3]
         { []
         }
     {offset
       c8eHV: // global
           R2 = GHC.IO.Handle.Types.CRLF_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline5_info" {
     GHC.IO.Handle.Types.$fReadNewline5_info:
         const GHC.IO.Handle.Types.$fReadNewline5_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.222611424 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline4_closure" {
     GHC.IO.Handle.Types.$fReadNewline4_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadNewline6_closure;
         const GHC.IO.Handle.Types.$fReadNewline5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.224414546 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline3_closure" {
     GHC.IO.Handle.Types.$fReadNewline3_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadNewline4_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.226331201 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_sps_closure" {
     GHC.IO.Handle.Types.$fReadNewline_sps_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadNewline8_closure+1;
         const GHC.IO.Handle.Types.$fReadNewline3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.228999144 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline2_closure" {
     GHC.IO.Handle.Types.$fReadNewline2_closure:
         const GHC.IO.Handle.Types.$fReadNewline2_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline2_entry() //  [R2]
         { []
         }
     {offset
       c8eI9: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewline_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline2_info" {
     GHC.IO.Handle.Types.$fReadNewline2_info:
         const GHC.IO.Handle.Types.$fReadNewline2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8evg_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.233009351 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline1_closure" {
     GHC.IO.Handle.Types.$fReadNewline1_closure:
         const GHC.IO.Handle.Types.$fReadNewline1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eIk: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewline2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline1_info" {
     GHC.IO.Handle.Types.$fReadNewline1_info:
         const GHC.IO.Handle.Types.$fReadNewline1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8evg_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.23775763 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_info;
         const 0;
 },
 sat_s8egq_entry() //  [R1]
         { []
         }
     {offset
       c8eIz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eIA; else goto c8eIB;
       c8eIA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eIB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewline2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8egq_info" {
     sat_s8egq_info:
         const sat_s8egq_entry;
         const 1;
         const 12884901904;
         const S8evg_srt+160;
 },
 GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8eIC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8eIG; else goto c8eIF;
       c8eIG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eIF: // global
           I64[Hp - 16] = sat_s8egq_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_info" {
     GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_info:
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S8evg_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.243750602 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8eIZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eJ0; else goto c8eJ1;
       c8eJ0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eJ1: // global
           (_c8eIW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eIW::I64 == 0) goto c8eIY; else goto c8eIX;
       c8eIY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eIX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eIW::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewline1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_info" {
     GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_info:
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S8evg_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.248443257 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline12_closure" {
     GHC.IO.Handle.Types.$fReadNewline12_closure:
         const GHC.IO.Handle.Types.$fReadNewline12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline12_entry() //  [R1]
         { []
         }
     {offset
       c8eJg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eJh; else goto c8eJi;
       c8eJh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eJi: // global
           (_c8eJd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eJd::I64 == 0) goto c8eJf; else goto c8eJe;
       c8eJf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eJe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eJd::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline12_info" {
     GHC.IO.Handle.Types.$fReadNewline12_info:
         const GHC.IO.Handle.Types.$fReadNewline12_entry;
         const 0;
         const 4294967317;
         const S8evg_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.253061539 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_$creadList_closure" {
     GHC.IO.Handle.Types.$fReadNewline_$creadList_closure:
         const GHC.IO.Handle.Types.$fReadNewline_$creadList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewline_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8eJw: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewline12_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewline_$creadList_info" {
     GHC.IO.Handle.Types.$fReadNewline_$creadList_info:
         const GHC.IO.Handle.Types.$fReadNewline_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8evg_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.256844098 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewline_closure" {
     GHC.IO.Handle.Types.$fReadNewline_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure+1;
         const GHC.IO.Handle.Types.$fReadNewline_$creadList_closure+1;
         const GHC.IO.Handle.Types.$fReadNewline1_closure+2;
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.25870529 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode17_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode17_bytes:
         I8[] [78,101,119,108,105,110,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.261769539 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode16_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode16_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode16_entry() //  [R1]
         { []
         }
     {offset
       c8eJL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eJM; else goto c8eJN;
       c8eJM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eJN: // global
           (_c8eJI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eJI::I64 == 0) goto c8eJK; else goto c8eJJ;
       c8eJK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eJJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eJI::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode16_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode16_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode16_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.266140975 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode16_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.26796883 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode15_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode15_bytes:
         I8[] [123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.270464333 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode14_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode14_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode14_entry() //  [R1]
         { []
         }
     {offset
       c8eK4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eK5; else goto c8eK6;
       c8eK5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eK6: // global
           (_c8eK1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eK1::I64 == 0) goto c8eK3; else goto c8eK2;
       c8eK3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eK2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eK1::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode15_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode14_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode14_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode14_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.274626996 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode14_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.276555207 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode13_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode13_bytes:
         I8[] [105,110,112,117,116,78,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.279187949 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode12_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode12_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode12_entry() //  [R1]
         { []
         }
     {offset
       c8eKn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eKo; else goto c8eKp;
       c8eKo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eKp: // global
           (_c8eKk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eKk::I64 == 0) goto c8eKm; else goto c8eKl;
       c8eKm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eKl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eKk::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode12_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode12_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.283832168 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode11_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode11_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode11_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode11_entry() //  [R3]
         { []
         }
     {offset
       c8eKC: // global
           R4 = R3;
           R3 = Text.ParserCombinators.ReadPrec.minPrec_closure;
           R2 = GHC.IO.Handle.Types.$fReadNewline2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode11_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode11_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode11_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S8evg_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.28721574 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_n_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_n_closure:
         const GHC.Types.I#_con_info;
         const 11;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.289301201 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode10_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode10_bytes:
         I8[] [44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.291718552 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode9_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode9_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode9_entry() //  [R1]
         { []
         }
     {offset
       c8eKR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eKS; else goto c8eKT;
       c8eKS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eKT: // global
           (_c8eKO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eKO::I64 == 0) goto c8eKQ; else goto c8eKP;
       c8eKQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eKP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eKO::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode9_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode9_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.295688734 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode8_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode8_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode9_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.297928918 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadNewlineMode7_bytes" {
     GHC.IO.Handle.Types.$fReadNewlineMode7_bytes:
         I8[] [111,117,116,112,117,116,78,76]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.300341228 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode6_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode6_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode6_entry() //  [R1]
         { []
         }
     {offset
       c8eLa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eLb; else goto c8eLc;
       c8eLb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eLc: // global
           (_c8eL7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eL7::I64 == 0) goto c8eL9; else goto c8eL8;
       c8eL9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eL8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eL7::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode6_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode6_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.304492365 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode4_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode4_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode4_entry() //  [R1]
         { []
         }
     {offset
       c8eLr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eLs; else goto c8eLt;
       c8eLs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eLt: // global
           (_c8eLo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8eLo::I64 == 0) goto c8eLq; else goto c8eLp;
       c8eLq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8eLp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8eLo::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode4_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode4_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.308359942 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode3_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode3_closure:
         const Text.Read.Lex.Punc_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.316099096 UTC

[section ""data" . GHC.IO.Handle.Types.$w$creadPrec_closure" {
     GHC.IO.Handle.Types.$w$creadPrec_closure:
         const GHC.IO.Handle.Types.$w$creadPrec_info;
         const 0;
 },
 sat_s8egD_entry() //  [R1, R2]
         { []
         }
     {offset
       c8eMg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8eMk; else goto c8eMj;
       c8eMk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eMj: // global
           _s8egu::P64 = P64[R1 + 7];
           _s8egy::P64 = P64[R1 + 15];
           _s8egA::P64 = P64[R1 + 23];
           I64[Hp - 16] = GHC.IO.Handle.Types.NewlineMode_con_info;
           P64[Hp - 8] = _s8egy::P64;
           P64[Hp] = _s8egA::P64;
           R2 = Hp - 15;
           R1 = _s8egu::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8egD_info" {
     sat_s8egD_info:
         const sat_s8egD_entry;
         const 3;
         const 8;
         const 4294967301;
 },
 sat_s8egG_entry() //  [R1, R2]
         { []
         }
     {offset
       c8eMo: // global
           _s8egA::P64 = R2;
           _s8egG::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c8eMp; else goto c8eMq;
       c8eMq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8eMs; else goto c8eMr;
       c8eMs: // global
           HpAlloc = 32;
           goto c8eMp;
       c8eMp: // global
           R2 = _s8egA::P64;
           R1 = _s8egG::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eMr: // global
           _s8egu::P64 = P64[_s8egG::P64 + 7];
           _s8egy::P64 = P64[_s8egG::P64 + 15];
           I64[Hp - 24] = sat_s8egD_info;
           P64[Hp - 16] = _s8egu::P64;
           P64[Hp - 8] = _s8egy::P64;
           P64[Hp] = _s8egA::P64;
           I64[Sp - 8] = block_c8eMl_info;
           R3 = Hp - 23;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode3_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8egG_info" {
     sat_s8egG_info:
         const sat_s8egG_entry;
         const 2;
         const 12884901899;
         const 4294967301;
         const S8evg_srt+216;
 },
 _c8eMl() //  [R1]
         { []
         }
     {offset
       c8eMl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eMv; else goto c8eMu;
       c8eMv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8eMu: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eMl_info" {
     block_c8eMl_info:
         const _c8eMl;
         const 0;
         const 30;
 },
 sat_s8egH_entry() //  [R1, R2]
         { []
         }
     {offset
       c8eMw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8eMA; else goto c8eMz;
       c8eMA: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eMz: // global
           _s8egu::P64 = P64[R1 + 7];
           _s8egy::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_s8egG_info;
           P64[Hp - 8] = _s8egu::P64;
           P64[Hp] = _s8egy::P64;
           R5 = Hp - 15;
           R4 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode11_closure+2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode6_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8egH_info" {
     sat_s8egH_info:
         const sat_s8egH_entry;
         const 2;
         const 133143986187;
         const 4294967301;
         const S8evg_srt+216;
 },
 sat_s8egK_entry() //  [R1, R2]
         { []
         }
     {offset
       c8eME: // global
           _s8egy::P64 = R2;
           _s8egK::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c8eMF; else goto c8eMG;
       c8eMG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8eMI; else goto c8eMH;
       c8eMI: // global
           HpAlloc = 24;
           goto c8eMF;
       c8eMF: // global
           R2 = _s8egy::P64;
           R1 = _s8egK::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eMH: // global
           _s8egu::P64 = P64[_s8egK::P64 + 7];
           I64[Hp - 16] = sat_s8egH_info;
           P64[Hp - 8] = _s8egu::P64;
           P64[Hp] = _s8egy::P64;
           I64[Sp - 8] = block_c8eMB_info;
           R3 = Hp - 15;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode8_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8egK_info" {
     sat_s8egK_info:
         const sat_s8egK_entry;
         const 1;
         const 270582939657;
         const 4294967301;
         const S8evg_srt+216;
 },
 _c8eMB() //  [R1]
         { []
         }
     {offset
       c8eMB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eML; else goto c8eMK;
       c8eML: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8eMK: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eMB_info" {
     block_c8eMB_info:
         const _c8eMB;
         const 0;
         const 30;
 },
 sat_s8egL_entry() //  [R1, R2]
         { []
         }
     {offset
       c8eMM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eMQ; else goto c8eMP;
       c8eMQ: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eMP: // global
           _s8egu::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s8egK_info;
           P64[Hp] = _s8egu::P64;
           R5 = Hp - 7;
           R4 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode11_closure+2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode12_closure;
           call GHC.Read.readField_entry(R5,
                                         R4,
                                         R3,
                                         R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8egL_info" {
     sat_s8egL_info:
         const sat_s8egL_entry;
         const 1;
         const 545460846601;
         const 4294967301;
         const S8evg_srt+216;
 },
 sat_s8egO_entry() //  [R1, R2]
         { []
         }
     {offset
       c8eMU: // global
           _s8egw::P64 = R2;
           _s8egO::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto c8eMV; else goto c8eMW;
       c8eMW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eMY; else goto c8eMX;
       c8eMY: // global
           HpAlloc = 16;
           goto c8eMV;
       c8eMV: // global
           R2 = _s8egw::P64;
           R1 = _s8egO::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eMX: // global
           _s8egu::P64 = P64[_s8egO::P64 + 7];
           I64[Hp - 8] = sat_s8egL_info;
           P64[Hp] = _s8egu::P64;
           I64[Sp - 8] = block_c8eMR_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure+3;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8egO_info" {
     sat_s8egO_info:
         const sat_s8egO_entry;
         const 1;
         const 1095216660489;
         const 4294967301;
         const S8evg_srt+216;
 },
 _c8eMR() //  [R1]
         { []
         }
     {offset
       c8eMR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eN1; else goto c8eN0;
       c8eN1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8eN0: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eMR_info" {
     block_c8eMR_info:
         const _c8eMR;
         const 0;
         const 30;
 },
 GHC.IO.Handle.Types.$w$creadPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eN5: // global
           _s8egu::P64 = R3;
           _s8egt::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c8eN6; else goto c8eN7;
       c8eN7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eN9; else goto c8eN8;
       c8eN9: // global
           HpAlloc = 16;
           goto c8eN6;
       c8eN6: // global
           R3 = _s8egu::P64;
           R2 = _s8egt::I64;
           R1 = GHC.IO.Handle.Types.$w$creadPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eN8: // global
           if (%MO_S_Gt_W64(_s8egt::I64, 11)) goto c8eN3; else goto c8eN4;
       c8eN3: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8eN4: // global
           I64[Hp - 8] = sat_s8egO_info;
           P64[Hp] = _s8egu::P64;
           I64[Sp - 8] = block_c8eNa_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure+4;
           Sp = Sp - 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$creadPrec_info" {
     GHC.IO.Handle.Types.$w$creadPrec_info:
         const GHC.IO.Handle.Types.$w$creadPrec_entry;
         const 0;
         const 4393751543822;
         const 8589934605;
         const S8evg_srt+216;
 },
 _c8eNa() //  [R1]
         { []
         }
     {offset
       c8eNa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8eNf; else goto c8eNe;
       c8eNf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8eNe: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eNa_info" {
     block_c8eNa_info:
         const _c8eNa;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.34041273 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode2_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode2_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode2_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode2_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eOk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eOl; else goto c8eOm;
       c8eOl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadNewlineMode2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eOm: // global
           I64[Sp - 16] = block_c8eOh_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eOq; else goto c8eOi;
       u8eOq: // global
           call _c8eOh(R1) args: 0, res: 0, upd: 0;
       c8eOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode2_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode2_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode2_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const S8evg_srt+280;
 },
 _c8eOh() //  [R1]
         { []
         }
     {offset
       c8eOh: // global
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.$w$creadPrec_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eOh_info" {
     block_c8eOh_info:
         const _c8eOh;
         const 1;
         const 4294967326;
         const S8evg_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.346090434 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode1_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode1_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eOF: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode2_closure+2;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode1_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode1_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode1_entry;
         const 0;
         const 562954248388622;
         const 8589934607;
         const S8evg_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.350763863 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_info;
         const 0;
 },
 sat_s8egW_entry() //  [R1]
         { []
         }
     {offset
       c8eOU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eOV; else goto c8eOW;
       c8eOV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8eOW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode2_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8egW_info" {
     sat_s8egW_info:
         const sat_s8egW_entry;
         const 1;
         const 562954248388624;
         const S8evg_srt+160;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8eOX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8eP1; else goto c8eP0;
       c8eP1: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8eP0: // global
           I64[Hp - 16] = sat_s8egW_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_entry;
         const 0;
         const 1688854155231246;
         const 4294967301;
         const S8evg_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.357547066 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8ePk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ePl; else goto c8ePm;
       c8ePl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ePm: // global
           (_c8ePh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ePh::I64 == 0) goto c8ePj; else goto c8ePi;
       c8ePj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ePi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ePh::I64;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_entry;
         const 0;
         const 281479271677973;
         const S8evg_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.361989038 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode18_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode18_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode18_entry() //  [R1]
         { []
         }
     {offset
       c8ePB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8ePC; else goto c8ePD;
       c8ePC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ePD: // global
           (_c8ePy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8ePy::I64 == 0) goto c8ePA; else goto c8ePz;
       c8ePA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8ePz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8ePy::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode18_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode18_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode18_entry;
         const 0;
         const 4294967317;
         const S8evg_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.368586837 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_closure:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8ePR: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode18_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_info" {
     GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_info:
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8evg_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.371991078 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadNewlineMode_closure" {
     GHC.IO.Handle.Types.$fReadNewlineMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure+1;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadList_closure+1;
         const GHC.IO.Handle.Types.$fReadNewlineMode1_closure+2;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.375442563 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c<_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eQa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eQb; else goto c8eQc;
       c8eQb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eQc: // global
           I64[Sp - 16] = block_c8eQ3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eQE; else goto c8eQ4;
       u8eQE: // global
           call _c8eQ3(R1) args: 0, res: 0, upd: 0;
       c8eQ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c<_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eQ3() //  [R1]
         { []
         }
     {offset
       c8eQ3: // global
           _s8egY::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eQ7; else goto c8eQ8;
       c8eQ7: // global
           I64[Sp + 8] = block_c8eQf_info;
           R1 = _s8egY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eQC; else goto c8eQh;
       u8eQC: // global
           call _c8eQf(R1) args: 0, res: 0, upd: 0;
       c8eQh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eQ8: // global
           I64[Sp + 8] = block_c8eQu_info;
           R1 = _s8egY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eQD; else goto c8eQw;
       u8eQD: // global
           call _c8eQu() args: 0, res: 0, upd: 0;
       c8eQw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eQ3_info" {
     block_c8eQ3_info:
         const _c8eQ3;
         const 1;
         const 30;
 },
 _c8eQf() //  [R1]
         { []
         }
     {offset
       c8eQf: // global
           if (R1 & 7 == 1) goto c8eQn; else goto c8eQr;
       c8eQn: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8eQr: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eQf_info" {
     block_c8eQf_info:
         const _c8eQf;
         const 0;
         const 30;
 },
 _c8eQu() //  []
         { []
         }
     {offset
       c8eQu: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eQu_info" {
     block_c8eQu_info:
         const _c8eQu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.387244208 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$ccompare_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eRk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eRl; else goto c8eRm;
       c8eRl: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eRm: // global
           I64[Sp - 16] = block_c8eRd_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eRX; else goto c8eRe;
       u8eRX: // global
           call _c8eRd(R1) args: 0, res: 0, upd: 0;
       c8eRe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$ccompare_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$ccompare_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eRd() //  [R1]
         { []
         }
     {offset
       c8eRd: // global
           _s8eh3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eRh; else goto c8eRi;
       c8eRh: // global
           I64[Sp + 8] = block_c8eRp_info;
           R1 = _s8eh3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eRV; else goto c8eRr;
       u8eRV: // global
           call _c8eRp(R1) args: 0, res: 0, upd: 0;
       c8eRr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eRi: // global
           I64[Sp + 8] = block_c8eRE_info;
           R1 = _s8eh3::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eRW; else goto c8eRG;
       u8eRW: // global
           call _c8eRE(R1) args: 0, res: 0, upd: 0;
       c8eRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eRd_info" {
     block_c8eRd_info:
         const _c8eRd;
         const 1;
         const 30;
 },
 _c8eRp() //  [R1]
         { []
         }
     {offset
       c8eRp: // global
           if (R1 & 7 == 1) goto u8eRU; else goto c8eRB;
       u8eRU: // global
           Sp = Sp + 8;
           call _c8eRQ() args: 0, res: 0, upd: 0;
       c8eRB: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eRp_info" {
     block_c8eRp_info:
         const _c8eRp;
         const 0;
         const 30;
 },
 _c8eRE() //  [R1]
         { []
         }
     {offset
       c8eRE: // global
           if (R1 & 7 == 1) goto c8eRM; else goto u8eRT;
       c8eRM: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8eRT: // global
           Sp = Sp + 8;
           call _c8eRQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8eRE_info" {
     block_c8eRE_info:
         const _c8eRE;
         const 0;
         const 30;
 },
 _c8eRQ() //  []
         { []
         }
     {offset
       c8eRQ: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.398839003 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewline_$c==_closure" {
     GHC.IO.Handle.Types.$fEqNewline_$c==_closure:
         const GHC.IO.Handle.Types.$fEqNewline_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqNewline_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eSJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eSK; else goto c8eSL;
       c8eSK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewline_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eSL: // global
           I64[Sp - 16] = block_c8eSC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eTo; else goto c8eSD;
       u8eTo: // global
           call _c8eSC(R1) args: 0, res: 0, upd: 0;
       c8eSD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewline_$c==_info" {
     GHC.IO.Handle.Types.$fEqNewline_$c==_info:
         const GHC.IO.Handle.Types.$fEqNewline_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eSC() //  [R1]
         { []
         }
     {offset
       c8eSC: // global
           _s8eh8::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eSG; else goto c8eSH;
       c8eSG: // global
           I64[Sp + 8] = block_c8eSO_info;
           R1 = _s8eh8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eTm; else goto c8eSQ;
       u8eTm: // global
           call _c8eSO(R1) args: 0, res: 0, upd: 0;
       c8eSQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eSH: // global
           I64[Sp + 8] = block_c8eT3_info;
           R1 = _s8eh8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eTn; else goto c8eT5;
       u8eTn: // global
           call _c8eT3(R1) args: 0, res: 0, upd: 0;
       c8eT5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eSC_info" {
     block_c8eSC_info:
         const _c8eSC;
         const 1;
         const 30;
 },
 _c8eSO() //  [R1]
         { []
         }
     {offset
       c8eSO: // global
           if (R1 & 7 == 1) goto u8eTk; else goto u8eTl;
       u8eTk: // global
           Sp = Sp + 8;
           call _c8eTf() args: 0, res: 0, upd: 0;
       u8eTl: // global
           Sp = Sp + 8;
           call _c8eTb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8eSO_info" {
     block_c8eSO_info:
         const _c8eSO;
         const 0;
         const 30;
 },
 _c8eT3() //  [R1]
         { []
         }
     {offset
       c8eT3: // global
           if (R1 & 7 == 1) goto u8eTi; else goto u8eTj;
       u8eTi: // global
           Sp = Sp + 8;
           call _c8eTb() args: 0, res: 0, upd: 0;
       u8eTj: // global
           Sp = Sp + 8;
           call _c8eTf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8eT3_info" {
     block_c8eT3_info:
         const _c8eT3;
         const 0;
         const 30;
 },
 _c8eTb() //  []
         { []
         }
     {offset
       c8eTb: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8eTf() //  []
         { []
         }
     {offset
       c8eTf: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.412138334 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewline_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqNewline_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqNewline_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqNewline_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eUc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eUd; else goto c8eUe;
       c8eUd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewline_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eUe: // global
           I64[Sp - 16] = block_c8eU5_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eUR; else goto c8eU6;
       u8eUR: // global
           call _c8eU5(R1) args: 0, res: 0, upd: 0;
       c8eU6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewline_$c/=_info" {
     GHC.IO.Handle.Types.$fEqNewline_$c/=_info:
         const GHC.IO.Handle.Types.$fEqNewline_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eU5() //  [R1]
         { []
         }
     {offset
       c8eU5: // global
           _s8ehd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eU9; else goto c8eUa;
       c8eU9: // global
           I64[Sp + 8] = block_c8eUh_info;
           R1 = _s8ehd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eUP; else goto c8eUj;
       u8eUP: // global
           call _c8eUh(R1) args: 0, res: 0, upd: 0;
       c8eUj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eUa: // global
           I64[Sp + 8] = block_c8eUw_info;
           R1 = _s8ehd::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eUQ; else goto c8eUy;
       u8eUQ: // global
           call _c8eUw(R1) args: 0, res: 0, upd: 0;
       c8eUy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eU5_info" {
     block_c8eU5_info:
         const _c8eU5;
         const 1;
         const 30;
 },
 _c8eUh() //  [R1]
         { []
         }
     {offset
       c8eUh: // global
           if (R1 & 7 == 1) goto u8eUN; else goto u8eUO;
       u8eUN: // global
           Sp = Sp + 8;
           call _c8eUI() args: 0, res: 0, upd: 0;
       u8eUO: // global
           Sp = Sp + 8;
           call _c8eUE() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8eUh_info" {
     block_c8eUh_info:
         const _c8eUh;
         const 0;
         const 30;
 },
 _c8eUw() //  [R1]
         { []
         }
     {offset
       c8eUw: // global
           if (R1 & 7 == 1) goto u8eUL; else goto u8eUM;
       u8eUL: // global
           Sp = Sp + 8;
           call _c8eUE() args: 0, res: 0, upd: 0;
       u8eUM: // global
           Sp = Sp + 8;
           call _c8eUI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8eUw_info" {
     block_c8eUw_info:
         const _c8eUw;
         const 0;
         const 30;
 },
 _c8eUE() //  []
         { []
         }
     {offset
       c8eUE: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8eUI() //  []
         { []
         }
     {offset
       c8eUI: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.422953392 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewline_closure" {
     GHC.IO.Handle.Types.$fEqNewline_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqNewline_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqNewline_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.426221477 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eVG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eVH; else goto c8eVI;
       c8eVH: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eVI: // global
           I64[Sp - 16] = block_c8eVz_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eWa; else goto c8eVA;
       u8eWa: // global
           call _c8eVz(R1) args: 0, res: 0, upd: 0;
       c8eVA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c<=_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c<=_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eVz() //  [R1]
         { []
         }
     {offset
       c8eVz: // global
           _s8ehh::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eVD; else goto c8eVE;
       c8eVD: // global
           I64[Sp + 8] = block_c8eVL_info;
           R1 = _s8ehh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eW8; else goto c8eVN;
       u8eW8: // global
           call _c8eVL(R1) args: 0, res: 0, upd: 0;
       c8eVN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eVE: // global
           I64[Sp + 8] = block_c8eW0_info;
           R1 = _s8ehh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eW9; else goto c8eW2;
       u8eW9: // global
           call _c8eW0() args: 0, res: 0, upd: 0;
       c8eW2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eVz_info" {
     block_c8eVz_info:
         const _c8eVz;
         const 1;
         const 30;
 },
 _c8eVL() //  [R1]
         { []
         }
     {offset
       c8eVL: // global
           if (R1 & 7 == 1) goto c8eVT; else goto c8eVX;
       c8eVT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8eVX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eVL_info" {
     block_c8eVL_info:
         const _c8eVL;
         const 0;
         const 30;
 },
 _c8eW0() //  []
         { []
         }
     {offset
       c8eW0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eW0_info" {
     block_c8eW0_info:
         const _c8eW0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.435609206 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmax_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eWQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eWR; else goto c8eWS;
       c8eWR: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eWS: // global
           I64[Sp - 16] = block_c8eWJ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eX6; else goto c8eWK;
       u8eX6: // global
           call _c8eWJ(R1) args: 0, res: 0, upd: 0;
       c8eWK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$cmax_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmax_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eWJ() //  [R1]
         { []
         }
     {offset
       c8eWJ: // global
           _s8ehm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eWN; else goto c8eWO;
       c8eWN: // global
           R1 = _s8ehm::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8eWO: // global
           I64[Sp + 8] = block_c8eWY_info;
           R1 = _s8ehm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eX5; else goto c8eX0;
       u8eX5: // global
           call _c8eWY() args: 0, res: 0, upd: 0;
       c8eX0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eWJ_info" {
     block_c8eWJ_info:
         const _c8eWJ;
         const 1;
         const 30;
 },
 _c8eWY() //  []
         { []
         }
     {offset
       c8eWY: // global
           R1 = GHC.IO.Handle.Types.CRLF_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eWY_info" {
     block_c8eWY_info:
         const _c8eWY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.443872522 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eXC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eXD; else goto c8eXE;
       c8eXD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eXE: // global
           I64[Sp - 16] = block_c8eXv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eY6; else goto c8eXw;
       u8eY6: // global
           call _c8eXv(R1) args: 0, res: 0, upd: 0;
       c8eXw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c>=_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>=_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eXv() //  [R1]
         { []
         }
     {offset
       c8eXv: // global
           _s8ehr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eXz; else goto c8eXA;
       c8eXz: // global
           I64[Sp + 8] = block_c8eXH_info;
           R1 = _s8ehr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eY4; else goto c8eXJ;
       u8eY4: // global
           call _c8eXH(R1) args: 0, res: 0, upd: 0;
       c8eXJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eXA: // global
           I64[Sp + 8] = block_c8eXW_info;
           R1 = _s8ehr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eY5; else goto c8eXY;
       u8eY5: // global
           call _c8eXW() args: 0, res: 0, upd: 0;
       c8eXY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eXv_info" {
     block_c8eXv_info:
         const _c8eXv;
         const 1;
         const 30;
 },
 _c8eXH() //  [R1]
         { []
         }
     {offset
       c8eXH: // global
           if (R1 & 7 == 1) goto c8eXP; else goto c8eXT;
       c8eXP: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8eXT: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eXH_info" {
     block_c8eXH_info:
         const _c8eXH;
         const 0;
         const 30;
 },
 _c8eXW() //  []
         { []
         }
     {offset
       c8eXW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eXW_info" {
     block_c8eXW_info:
         const _c8eXW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.452119062 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$c>_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eYF: // global
           _s8ehw::P64 = R3;
           R3 = R2;
           R2 = _s8ehw::P64;
           call GHC.IO.Handle.Types.$fOrdNewline_$c<_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$c>_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$c>_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.45636258 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmin_info;
 },
 GHC.IO.Handle.Types.$fOrdNewline_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8eYX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8eYY; else goto c8eYZ;
       c8eYY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eYZ: // global
           I64[Sp - 16] = block_c8eYQ_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8eZd; else goto c8eYR;
       u8eZd: // global
           call _c8eYQ(R1) args: 0, res: 0, upd: 0;
       c8eYR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewline_$cmin_info" {
     GHC.IO.Handle.Types.$fOrdNewline_$cmin_info:
         const GHC.IO.Handle.Types.$fOrdNewline_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8eYQ() //  [R1]
         { []
         }
     {offset
       c8eYQ: // global
           _s8ehx::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8eYU; else goto c8eYV;
       c8eYU: // global
           I64[Sp + 8] = block_c8eZ2_info;
           R1 = _s8ehx::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8eZc; else goto c8eZ4;
       u8eZc: // global
           call _c8eZ2() args: 0, res: 0, upd: 0;
       c8eZ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eYV: // global
           R1 = _s8ehx::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eYQ_info" {
     block_c8eYQ_info:
         const _c8eYQ;
         const 1;
         const 30;
 },
 _c8eZ2() //  []
         { []
         }
     {offset
       c8eZ2: // global
           R1 = GHC.IO.Handle.Types.LF_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eZ2_info" {
     block_c8eZ2_info:
         const _c8eZ2;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.462807595 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewline_closure" {
     GHC.IO.Handle.Types.$fOrdNewline_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Handle.Types.$fEqNewline_closure+1;
         const GHC.IO.Handle.Types.$fOrdNewline_$ccompare_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c<_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c<=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c>_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$c>=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$cmax_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewline_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.466256026 UTC

[section ""data" . GHC.IO.Handle.Types.$w$ccompare_closure" {
     GHC.IO.Handle.Types.$w$ccompare_closure:
         const GHC.IO.Handle.Types.$w$ccompare_info;
 },
 GHC.IO.Handle.Types.$w$ccompare_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8eZK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8eZL; else goto c8eZM;
       c8eZL: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$ccompare_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8eZM: // global
           I64[Sp - 32] = block_c8eZD_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8f0n; else goto c8eZE;
       u8f0n: // global
           call _c8eZD(R1) args: 0, res: 0, upd: 0;
       c8eZE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$ccompare_info" {
     GHC.IO.Handle.Types.$w$ccompare_info:
         const GHC.IO.Handle.Types.$w$ccompare_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c8eZD() //  [R1]
         { []
         }
     {offset
       c8eZD: // global
           _s8ehD::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8eZH; else goto c8eZI;
       c8eZH: // global
           I64[Sp] = block_c8eZP_info;
           R1 = _s8ehD::P64;
           if (R1 & 7 != 0) goto u8f0l; else goto c8eZR;
       u8f0l: // global
           call _c8eZP(R1) args: 0, res: 0, upd: 0;
       c8eZR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8eZI: // global
           I64[Sp] = block_c8f04_info;
           R1 = _s8ehD::P64;
           if (R1 & 7 != 0) goto u8f0m; else goto c8f06;
       u8f0m: // global
           call _c8f04(R1) args: 0, res: 0, upd: 0;
       c8f06: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eZD_info" {
     block_c8eZD_info:
         const _c8eZD;
         const 3;
         const 30;
 },
 _c8eZP() //  [R1]
         { []
         }
     {offset
       c8eZP: // global
           if (R1 & 7 == 1) goto u8f0k; else goto c8f01;
       u8f0k: // global
           Sp = Sp + 8;
           call _c8f0g() args: 0, res: 0, upd: 0;
       c8f01: // global
           R1 = GHC.Types.LT_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8eZP_info" {
     block_c8eZP_info:
         const _c8eZP;
         const 131;
         const 30;
 },
 _c8f04() //  [R1]
         { []
         }
     {offset
       c8f04: // global
           if (R1 & 7 == 1) goto c8f0c; else goto u8f0j;
       c8f0c: // global
           R1 = GHC.Types.GT_closure+3;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8f0j: // global
           Sp = Sp + 8;
           call _c8f0g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f04_info" {
     block_c8f04_info:
         const _c8f04;
         const 131;
         const 30;
 },
 _c8f0g() //  []
         { []
         }
     {offset
       c8f0g: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fOrdNewline_$ccompare_entry(R3,
                                                                 R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.476465403 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8f13: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8f17; else goto c8f18;
       c8f17: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8f18: // global
           I64[Sp - 16] = block_c8f10_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8f1g; else goto c8f11;
       u8f1g: // global
           call _c8f10(R1) args: 0, res: 0, upd: 0;
       c8f11: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8f10() //  [R1]
         { []
         }
     {offset
       c8f10: // global
           I64[Sp - 8] = block_c8f16_info;
           _s8ehL::P64 = P64[R1 + 7];
           _s8ehM::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8ehM::P64;
           P64[Sp + 8] = _s8ehL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8f1f; else goto c8f1a;
       u8f1f: // global
           call _c8f16(R1) args: 0, res: 0, upd: 0;
       c8f1a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f10_info" {
     block_c8f10_info:
         const _c8f10;
         const 1;
         const 30;
 },
 _c8f16() //  [R1]
         { []
         }
     {offset
       c8f16: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$ccompare_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f16_info" {
     block_c8f16_info:
         const _c8f16;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.484552892 UTC

[section ""data" . GHC.IO.Handle.Types.$w$c<_closure" {
     GHC.IO.Handle.Types.$w$c<_closure:
         const GHC.IO.Handle.Types.$w$c<_info;
 },
 GHC.IO.Handle.Types.$w$c<_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8f1H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8f1I; else goto c8f1J;
       c8f1I: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$c<_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8f1J: // global
           I64[Sp - 32] = block_c8f1A_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8f2k; else goto c8f1B;
       u8f2k: // global
           call _c8f1A(R1) args: 0, res: 0, upd: 0;
       c8f1B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$c<_info" {
     GHC.IO.Handle.Types.$w$c<_info:
         const GHC.IO.Handle.Types.$w$c<_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c8f1A() //  [R1]
         { []
         }
     {offset
       c8f1A: // global
           _s8ehS::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8f1E; else goto c8f1F;
       c8f1E: // global
           I64[Sp] = block_c8f1M_info;
           R1 = _s8ehS::P64;
           if (R1 & 7 != 0) goto u8f2i; else goto c8f1O;
       u8f2i: // global
           call _c8f1M(R1) args: 0, res: 0, upd: 0;
       c8f1O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8f1F: // global
           I64[Sp] = block_c8f21_info;
           R1 = _s8ehS::P64;
           if (R1 & 7 != 0) goto u8f2j; else goto c8f23;
       u8f2j: // global
           call _c8f21(R1) args: 0, res: 0, upd: 0;
       c8f23: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f1A_info" {
     block_c8f1A_info:
         const _c8f1A;
         const 3;
         const 30;
 },
 _c8f1M() //  [R1]
         { []
         }
     {offset
       c8f1M: // global
           if (R1 & 7 == 1) goto u8f2h; else goto c8f1Y;
       u8f2h: // global
           Sp = Sp + 8;
           call _c8f2d() args: 0, res: 0, upd: 0;
       c8f1Y: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f1M_info" {
     block_c8f1M_info:
         const _c8f1M;
         const 131;
         const 30;
 },
 _c8f21() //  [R1]
         { []
         }
     {offset
       c8f21: // global
           if (R1 & 7 == 1) goto c8f29; else goto u8f2g;
       c8f29: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8f2g: // global
           Sp = Sp + 8;
           call _c8f2d() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f21_info" {
     block_c8f21_info:
         const _c8f21;
         const 131;
         const 30;
 },
 _c8f2d() //  []
         { []
         }
     {offset
       c8f2d: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fOrdNewline_$c<_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.494605229 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8f30: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8f34; else goto c8f35;
       c8f34: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8f35: // global
           I64[Sp - 16] = block_c8f2X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8f3d; else goto c8f2Y;
       u8f3d: // global
           call _c8f2X(R1) args: 0, res: 0, upd: 0;
       c8f2Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8f2X() //  [R1]
         { []
         }
     {offset
       c8f2X: // global
           I64[Sp - 8] = block_c8f33_info;
           _s8ei0::P64 = P64[R1 + 7];
           _s8ei1::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8ei1::P64;
           P64[Sp + 8] = _s8ei0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8f3c; else goto c8f37;
       u8f3c: // global
           call _c8f33(R1) args: 0, res: 0, upd: 0;
       c8f37: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f2X_info" {
     block_c8f2X_info:
         const _c8f2X;
         const 1;
         const 30;
 },
 _c8f33() //  [R1]
         { []
         }
     {offset
       c8f33: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$c<_entry(R5,
                                                R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f33_info" {
     block_c8f33_info:
         const _c8f33;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.50297948 UTC

[section ""data" . GHC.IO.Handle.Types.$w$c==_closure" {
     GHC.IO.Handle.Types.$w$c==_closure:
         const GHC.IO.Handle.Types.$w$c==_info;
 },
 GHC.IO.Handle.Types.$w$c==_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c8f3E: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8f3F; else goto c8f3G;
       c8f3F: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8f3G: // global
           I64[Sp - 32] = block_c8f3x_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8f4j; else goto c8f3y;
       u8f4j: // global
           call _c8f3x(R1) args: 0, res: 0, upd: 0;
       c8f3y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$w$c==_info" {
     GHC.IO.Handle.Types.$w$c==_info:
         const GHC.IO.Handle.Types.$w$c==_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _c8f3x() //  [R1]
         { []
         }
     {offset
       c8f3x: // global
           _s8ei7::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8f3B; else goto c8f3C;
       c8f3B: // global
           I64[Sp] = block_c8f3J_info;
           R1 = _s8ei7::P64;
           if (R1 & 7 != 0) goto u8f4h; else goto c8f3L;
       u8f4h: // global
           call _c8f3J(R1) args: 0, res: 0, upd: 0;
       c8f3L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8f3C: // global
           I64[Sp] = block_c8f3Y_info;
           R1 = _s8ei7::P64;
           if (R1 & 7 != 0) goto u8f4i; else goto c8f40;
       u8f4i: // global
           call _c8f3Y(R1) args: 0, res: 0, upd: 0;
       c8f40: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f3x_info" {
     block_c8f3x_info:
         const _c8f3x;
         const 3;
         const 30;
 },
 _c8f3J() //  [R1]
         { []
         }
     {offset
       c8f3J: // global
           if (R1 & 7 == 1) goto u8f4f; else goto u8f4g;
       u8f4f: // global
           Sp = Sp + 8;
           call _c8f4a() args: 0, res: 0, upd: 0;
       u8f4g: // global
           Sp = Sp + 32;
           call _c8f46() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f3J_info" {
     block_c8f3J_info:
         const _c8f3J;
         const 131;
         const 30;
 },
 _c8f3Y() //  [R1]
         { []
         }
     {offset
       c8f3Y: // global
           if (R1 & 7 == 1) goto u8f4d; else goto u8f4e;
       u8f4d: // global
           Sp = Sp + 32;
           call _c8f46() args: 0, res: 0, upd: 0;
       u8f4e: // global
           Sp = Sp + 8;
           call _c8f4a() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f3Y_info" {
     block_c8f3Y_info:
         const _c8f3Y;
         const 131;
         const 30;
 },
 _c8f46() //  []
         { []
         }
     {offset
       c8f46: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8f4a() //  []
         { []
         }
     {offset
       c8f4a: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fEqNewline_$c==_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.513101218 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqNewlineMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8f51: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8f55; else goto c8f56;
       c8f55: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8f56: // global
           I64[Sp - 16] = block_c8f4Y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8f5e; else goto c8f4Z;
       u8f5e: // global
           call _c8f4Y(R1) args: 0, res: 0, upd: 0;
       c8f4Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewlineMode_$c==_info" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c==_info:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8f4Y() //  [R1]
         { []
         }
     {offset
       c8f4Y: // global
           I64[Sp - 8] = block_c8f54_info;
           _s8eif::P64 = P64[R1 + 7];
           _s8eig::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8eig::P64;
           P64[Sp + 8] = _s8eif::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8f5d; else goto c8f58;
       u8f5d: // global
           call _c8f54(R1) args: 0, res: 0, upd: 0;
       c8f58: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f4Y_info" {
     block_c8f4Y_info:
         const _c8f4Y;
         const 1;
         const 30;
 },
 _c8f54() //  [R1]
         { []
         }
     {offset
       c8f54: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$w$c==_entry(R5,
                                                 R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f54_info" {
     block_c8f54_info:
         const _c8f54;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.524074455 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8f5B: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8f5F; else goto c8f5G;
       c8f5F: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8f5G: // global
           I64[Sp - 16] = block_c8f5y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8f7R; else goto c8f5z;
       u8f7R: // global
           call _c8f5y(R1) args: 0, res: 0, upd: 0;
       c8f5z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_info" {
     GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_info:
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8f5y() //  [R1]
         { []
         }
     {offset
       c8f5y: // global
           I64[Sp - 8] = block_c8f5E_info;
           _s8ein::P64 = P64[R1 + 7];
           _s8eio::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8eio::P64;
           P64[Sp + 8] = _s8ein::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8f7Q; else goto c8f5I;
       u8f7Q: // global
           call _c8f5E(R1) args: 0, res: 0, upd: 0;
       c8f5I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f5y_info" {
     block_c8f5y_info:
         const _c8f5y;
         const 1;
         const 30;
 },
 _c8f5E() //  [R1]
         { []
         }
     {offset
       c8f5E: // global
           I64[Sp - 8] = block_c8f5M_info;
           _s8eiq::P64 = P64[R1 + 7];
           _s8eir::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s8eir::P64;
           P64[Sp + 16] = _s8eiq::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8f7S; else goto c8f5O;
       u8f7S: // global
           call _c8f5M(R1) args: 0, res: 0, upd: 0;
       c8f5O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f5E_info" {
     block_c8f5E_info:
         const _c8f5E;
         const 2;
         const 30;
 },
 _c8f5M() //  [R1]
         { []
         }
     {offset
       c8f5M: // global
           _s8eiq::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c8f5V; else goto c8f6L;
       c8f5V: // global
           I64[Sp] = block_c8f5S_info;
           R1 = _s8eiq::P64;
           if (R1 & 7 != 0) goto u8f7T; else goto c8f5W;
       u8f7T: // global
           call _c8f5S(R1) args: 0, res: 0, upd: 0;
       c8f5W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8f6L: // global
           I64[Sp] = block_c8f6J_info;
           R1 = _s8eiq::P64;
           if (R1 & 7 != 0) goto u8f7U; else goto c8f6M;
       u8f7U: // global
           call _c8f6J(R1) args: 0, res: 0, upd: 0;
       c8f6M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f5M_info" {
     block_c8f5M_info:
         const _c8f5M;
         const 3;
         const 30;
 },
 _c8f5S() //  [R1]
         { []
         }
     {offset
       c8f5S: // global
           if (R1 & 7 == 1) goto c8f63; else goto u8f7L;
       c8f63: // global
           I64[Sp] = block_c8f60_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8f7V; else goto c8f64;
       u8f7V: // global
           call _c8f60(R1) args: 0, res: 0, upd: 0;
       c8f64: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8f7L: // global
           Sp = Sp + 32;
           call _c8f7s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f5S_info" {
     block_c8f5S_info:
         const _c8f5S;
         const 259;
         const 30;
 },
 _c8f60() //  [R1]
         { []
         }
     {offset
       c8f60: // global
           _s8eir::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8f6b; else goto c8f6r;
       c8f6b: // global
           I64[Sp + 24] = block_c8f68_info;
           R1 = _s8eir::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8f7X; else goto c8f6c;
       u8f7X: // global
           call _c8f68(R1) args: 0, res: 0, upd: 0;
       c8f6c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8f6r: // global
           I64[Sp + 24] = block_c8f6p_info;
           R1 = _s8eir::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8f7Y; else goto c8f6s;
       u8f7Y: // global
           call _c8f6p(R1) args: 0, res: 0, upd: 0;
       c8f6s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f60_info" {
     block_c8f60_info:
         const _c8f60;
         const 387;
         const 30;
 },
 _c8f68() //  [R1]
         { []
         }
     {offset
       c8f68: // global
           if (R1 & 7 == 1) goto u8f7O; else goto u8f7P;
       u8f7O: // global
           Sp = Sp + 8;
           call _c8f7w() args: 0, res: 0, upd: 0;
       u8f7P: // global
           Sp = Sp + 8;
           call _c8f7s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f68_info" {
     block_c8f68_info:
         const _c8f68;
         const 0;
         const 30;
 },
 _c8f6p() //  [R1]
         { []
         }
     {offset
       c8f6p: // global
           if (R1 & 7 == 1) goto u8f7M; else goto u8f7N;
       u8f7M: // global
           Sp = Sp + 8;
           call _c8f7s() args: 0, res: 0, upd: 0;
       u8f7N: // global
           Sp = Sp + 8;
           call _c8f7w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f6p_info" {
     block_c8f6p_info:
         const _c8f6p;
         const 0;
         const 30;
 },
 _c8f6J() //  [R1]
         { []
         }
     {offset
       c8f6J: // global
           if (R1 & 7 == 1) goto u8f7G; else goto c8f6X;
       u8f7G: // global
           Sp = Sp + 32;
           call _c8f7s() args: 0, res: 0, upd: 0;
       c8f6X: // global
           I64[Sp] = block_c8f6V_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8f83; else goto c8f6Y;
       u8f83: // global
           call _c8f6V(R1) args: 0, res: 0, upd: 0;
       c8f6Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f6J_info" {
     block_c8f6J_info:
         const _c8f6J;
         const 259;
         const 30;
 },
 _c8f6V() //  [R1]
         { []
         }
     {offset
       c8f6V: // global
           _s8eir::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8f75; else goto c8f7l;
       c8f75: // global
           I64[Sp + 24] = block_c8f72_info;
           R1 = _s8eir::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8f85; else goto c8f76;
       u8f85: // global
           call _c8f72(R1) args: 0, res: 0, upd: 0;
       c8f76: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8f7l: // global
           I64[Sp + 24] = block_c8f7j_info;
           R1 = _s8eir::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8f86; else goto c8f7m;
       u8f86: // global
           call _c8f7j(R1) args: 0, res: 0, upd: 0;
       c8f7m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f6V_info" {
     block_c8f6V_info:
         const _c8f6V;
         const 387;
         const 30;
 },
 _c8f72() //  [R1]
         { []
         }
     {offset
       c8f72: // global
           if (R1 & 7 == 1) goto u8f7J; else goto u8f7K;
       u8f7J: // global
           Sp = Sp + 8;
           call _c8f7w() args: 0, res: 0, upd: 0;
       u8f7K: // global
           Sp = Sp + 8;
           call _c8f7s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f72_info" {
     block_c8f72_info:
         const _c8f72;
         const 0;
         const 30;
 },
 _c8f7j() //  [R1]
         { []
         }
     {offset
       c8f7j: // global
           if (R1 & 7 == 1) goto u8f7H; else goto u8f7I;
       u8f7H: // global
           Sp = Sp + 8;
           call _c8f7s() args: 0, res: 0, upd: 0;
       u8f7I: // global
           Sp = Sp + 8;
           call _c8f7w() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f7j_info" {
     block_c8f7j_info:
         const _c8f7j;
         const 0;
         const 30;
 },
 _c8f7s() //  []
         { []
         }
     {offset
       c8f7s: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8f7w() //  []
         { []
         }
     {offset
       c8f7w: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.546881161 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqNewlineMode_closure" {
     GHC.IO.Handle.Types.$fEqNewlineMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqNewlineMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.553209103 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8f9H: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8f9L; else goto c8f9M;
       c8f9L: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8f9M: // global
           I64[Sp - 16] = block_c8f9E_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fbF; else goto c8f9F;
       u8fbF: // global
           call _c8f9E(R1) args: 0, res: 0, upd: 0;
       c8f9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8f9E() //  [R1]
         { []
         }
     {offset
       c8f9E: // global
           I64[Sp - 8] = block_c8f9K_info;
           _s8eiE::P64 = P64[R1 + 7];
           _s8eiF::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8eiF::P64;
           P64[Sp + 8] = _s8eiE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fbE; else goto c8f9O;
       u8fbE: // global
           call _c8f9K(R1) args: 0, res: 0, upd: 0;
       c8f9O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f9E_info" {
     block_c8f9E_info:
         const _c8f9E;
         const 1;
         const 30;
 },
 _c8f9K() //  [R1]
         { []
         }
     {offset
       c8f9K: // global
           I64[Sp - 8] = block_c8f9S_info;
           _s8eiH::P64 = P64[R1 + 7];
           _s8eiI::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s8eiI::P64;
           P64[Sp + 16] = _s8eiH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fbG; else goto c8f9U;
       u8fbG: // global
           call _c8f9S(R1) args: 0, res: 0, upd: 0;
       c8f9U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f9K_info" {
     block_c8f9K_info:
         const _c8f9K;
         const 2;
         const 30;
 },
 _c8f9S() //  [R1]
         { []
         }
     {offset
       c8f9S: // global
           _s8eiH::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c8fa1; else goto c8faL;
       c8fa1: // global
           I64[Sp] = block_c8f9Y_info;
           R1 = _s8eiH::P64;
           if (R1 & 7 != 0) goto u8fbH; else goto c8fa2;
       u8fbH: // global
           call _c8f9Y(R1) args: 0, res: 0, upd: 0;
       c8fa2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8faL: // global
           I64[Sp] = block_c8faJ_info;
           R1 = _s8eiH::P64;
           if (R1 & 7 != 0) goto u8fbI; else goto c8faM;
       u8fbI: // global
           call _c8faJ(R1) args: 0, res: 0, upd: 0;
       c8faM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8f9S_info" {
     block_c8f9S_info:
         const _c8f9S;
         const 3;
         const 30;
 },
 _c8f9Y() //  [R1]
         { []
         }
     {offset
       c8f9Y: // global
           if (R1 & 7 == 1) goto c8fa9; else goto u8fbB;
       c8fa9: // global
           I64[Sp] = block_c8fa6_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8fbJ; else goto c8faa;
       u8fbJ: // global
           call _c8fa6(R1) args: 0, res: 0, upd: 0;
       c8faa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fbB: // global
           Sp = Sp + 32;
           call _c8fbg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8f9Y_info" {
     block_c8f9Y_info:
         const _c8f9Y;
         const 259;
         const 30;
 },
 _c8fa6() //  [R1]
         { []
         }
     {offset
       c8fa6: // global
           _s8eiI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fah; else goto c8fax;
       c8fah: // global
           I64[Sp + 24] = block_c8fae_info;
           R1 = _s8eiI::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fbL; else goto c8fai;
       u8fbL: // global
           call _c8fae(R1) args: 0, res: 0, upd: 0;
       c8fai: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fax: // global
           I64[Sp + 24] = block_c8fav_info;
           R1 = _s8eiI::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fbM; else goto c8fay;
       u8fbM: // global
           call _c8fav() args: 0, res: 0, upd: 0;
       c8fay: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fa6_info" {
     block_c8fa6_info:
         const _c8fa6;
         const 387;
         const 30;
 },
 _c8fae() //  [R1]
         { []
         }
     {offset
       c8fae: // global
           if (R1 & 7 == 1) goto u8fbC; else goto u8fbD;
       u8fbC: // global
           Sp = Sp + 8;
           call _c8fbc() args: 0, res: 0, upd: 0;
       u8fbD: // global
           Sp = Sp + 8;
           call _c8fbg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fae_info" {
     block_c8fae_info:
         const _c8fae;
         const 0;
         const 30;
 },
 _c8fav() //  []
         { []
         }
     {offset
       c8fav: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fav_info" {
     block_c8fav_info:
         const _c8fav;
         const 0;
         const 30;
 },
 _c8faJ() //  [R1]
         { []
         }
     {offset
       c8faJ: // global
           if (R1 & 7 == 1) goto u8fby; else goto c8faX;
       u8fby: // global
           Sp = Sp + 32;
           call _c8fbc() args: 0, res: 0, upd: 0;
       c8faX: // global
           I64[Sp] = block_c8faV_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8fbP; else goto c8faY;
       u8fbP: // global
           call _c8faV(R1) args: 0, res: 0, upd: 0;
       c8faY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8faJ_info" {
     block_c8faJ_info:
         const _c8faJ;
         const 259;
         const 30;
 },
 _c8faV() //  [R1]
         { []
         }
     {offset
       c8faV: // global
           _s8eiI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fb5; else goto c8fbl;
       c8fb5: // global
           I64[Sp + 24] = block_c8fb2_info;
           R1 = _s8eiI::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fbR; else goto c8fb6;
       u8fbR: // global
           call _c8fb2(R1) args: 0, res: 0, upd: 0;
       c8fb6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fbl: // global
           I64[Sp + 24] = block_c8fbj_info;
           R1 = _s8eiI::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fbS; else goto c8fbm;
       u8fbS: // global
           call _c8fbj() args: 0, res: 0, upd: 0;
       c8fbm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8faV_info" {
     block_c8faV_info:
         const _c8faV;
         const 387;
         const 30;
 },
 _c8fb2() //  [R1]
         { []
         }
     {offset
       c8fb2: // global
           if (R1 & 7 == 1) goto u8fbz; else goto u8fbA;
       u8fbz: // global
           Sp = Sp + 8;
           call _c8fbc() args: 0, res: 0, upd: 0;
       u8fbA: // global
           Sp = Sp + 8;
           call _c8fbg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fb2_info" {
     block_c8fb2_info:
         const _c8fb2;
         const 0;
         const 30;
 },
 _c8fbc() //  []
         { []
         }
     {offset
       c8fbc: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fbg() //  []
         { []
         }
     {offset
       c8fbg: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fbj() //  []
         { []
         }
     {offset
       c8fbj: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fbj_info" {
     block_c8fbj_info:
         const _c8fbj;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.579729432 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fdq: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8fdu; else goto c8fdv;
       c8fdu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fdv: // global
           I64[Sp - 16] = block_c8fdn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ffo; else goto c8fdo;
       u8ffo: // global
           call _c8fdn(R1) args: 0, res: 0, upd: 0;
       c8fdo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fdn() //  [R1]
         { []
         }
     {offset
       c8fdn: // global
           I64[Sp - 16] = block_c8fdt_info;
           _s8eiU::P64 = R1;
           _s8eiV::P64 = P64[R1 + 7];
           _s8eiW::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s8eiW::P64;
           P64[Sp] = _s8eiV::P64;
           P64[Sp + 8] = _s8eiU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ffn; else goto c8fdx;
       u8ffn: // global
           call _c8fdt(R1) args: 0, res: 0, upd: 0;
       c8fdx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fdn_info" {
     block_c8fdn_info:
         const _c8fdn;
         const 1;
         const 30;
 },
 _c8fdt() //  [R1]
         { []
         }
     {offset
       c8fdt: // global
           I64[Sp - 16] = block_c8fdB_info;
           _s8eiX::P64 = R1;
           _s8eiY::P64 = P64[R1 + 7];
           _s8eiZ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s8eiZ::P64;
           P64[Sp] = _s8eiY::P64;
           P64[Sp + 16] = _s8eiX::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8ffp; else goto c8fdD;
       u8ffp: // global
           call _c8fdB(R1) args: 0, res: 0, upd: 0;
       c8fdD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fdt_info" {
     block_c8fdt_info:
         const _c8fdt;
         const 3;
         const 30;
 },
 _c8fdB() //  [R1]
         { []
         }
     {offset
       c8fdB: // global
           _s8eiY::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8fdK; else goto c8feu;
       c8fdK: // global
           I64[Sp] = block_c8fdH_info;
           R1 = _s8eiY::P64;
           if (R1 & 7 != 0) goto u8ffq; else goto c8fdL;
       u8ffq: // global
           call _c8fdH(R1) args: 0, res: 0, upd: 0;
       c8fdL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8feu: // global
           I64[Sp] = block_c8fes_info;
           R1 = _s8eiY::P64;
           if (R1 & 7 != 0) goto u8ffr; else goto c8fev;
       u8ffr: // global
           call _c8fes(R1) args: 0, res: 0, upd: 0;
       c8fev: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fdB_info" {
     block_c8fdB_info:
         const _c8fdB;
         const 5;
         const 30;
 },
 _c8fdH() //  [R1]
         { []
         }
     {offset
       c8fdH: // global
           if (R1 & 7 == 1) goto c8fdS; else goto u8ffk;
       c8fdS: // global
           I64[Sp] = block_c8fdP_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8ffs; else goto c8fdT;
       u8ffs: // global
           call _c8fdP(R1) args: 0, res: 0, upd: 0;
       c8fdT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8ffk: // global
           Sp = Sp + 32;
           call _c8feZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fdH_info" {
     block_c8fdH_info:
         const _c8fdH;
         const 133;
         const 30;
 },
 _c8fdP() //  [R1]
         { []
         }
     {offset
       c8fdP: // global
           _s8eiZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fe0; else goto c8feg;
       c8fe0: // global
           I64[Sp + 24] = block_c8fdX_info;
           R1 = _s8eiZ::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8ffu; else goto c8fe1;
       u8ffu: // global
           call _c8fdX(R1) args: 0, res: 0, upd: 0;
       c8fe1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8feg: // global
           I64[Sp + 32] = block_c8fee_info;
           R1 = _s8eiZ::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8ffv; else goto c8feh;
       u8ffv: // global
           call _c8fee() args: 0, res: 0, upd: 0;
       c8feh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fdP_info" {
     block_c8fdP_info:
         const _c8fdP;
         const 389;
         const 30;
 },
 _c8fdX() //  [R1]
         { []
         }
     {offset
       c8fdX: // global
           if (R1 & 7 == 1) goto u8ffl; else goto u8ffm;
       u8ffl: // global
           Sp = Sp + 16;
           call _c8feV() args: 0, res: 0, upd: 0;
       u8ffm: // global
           Sp = Sp + 8;
           call _c8feZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fdX_info" {
     block_c8fdX_info:
         const _c8fdX;
         const 2;
         const 30;
 },
 _c8fee() //  []
         { []
         }
     {offset
       c8fee: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fee_info" {
     block_c8fee_info:
         const _c8fee;
         const 1;
         const 30;
 },
 _c8fes() //  [R1]
         { []
         }
     {offset
       c8fes: // global
           if (R1 & 7 == 1) goto u8ffh; else goto c8feG;
       u8ffh: // global
           Sp = Sp + 40;
           call _c8feV() args: 0, res: 0, upd: 0;
       c8feG: // global
           I64[Sp] = block_c8feE_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8ffy; else goto c8feH;
       u8ffy: // global
           call _c8feE(R1) args: 0, res: 0, upd: 0;
       c8feH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fes_info" {
     block_c8fes_info:
         const _c8fes;
         const 133;
         const 30;
 },
 _c8feE() //  [R1]
         { []
         }
     {offset
       c8feE: // global
           _s8eiZ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8feO; else goto c8ff4;
       c8feO: // global
           I64[Sp + 24] = block_c8feL_info;
           R1 = _s8eiZ::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8ffA; else goto c8feP;
       u8ffA: // global
           call _c8feL(R1) args: 0, res: 0, upd: 0;
       c8feP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8ff4: // global
           I64[Sp + 32] = block_c8ff2_info;
           R1 = _s8eiZ::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto u8ffB; else goto c8ff5;
       u8ffB: // global
           call _c8ff2() args: 0, res: 0, upd: 0;
       c8ff5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8feE_info" {
     block_c8feE_info:
         const _c8feE;
         const 389;
         const 30;
 },
 _c8feL() //  [R1]
         { []
         }
     {offset
       c8feL: // global
           if (R1 & 7 == 1) goto u8ffi; else goto u8ffj;
       u8ffi: // global
           Sp = Sp + 16;
           call _c8feV() args: 0, res: 0, upd: 0;
       u8ffj: // global
           Sp = Sp + 8;
           call _c8feZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8feL_info" {
     block_c8feL_info:
         const _c8feL;
         const 2;
         const 30;
 },
 _c8feV() //  []
         { []
         }
     {offset
       c8feV: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8feZ() //  []
         { []
         }
     {offset
       c8feZ: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8ff2() //  []
         { []
         }
     {offset
       c8ff2: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8ff2_info" {
     block_c8ff2_info:
         const _c8ff2;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.606238499 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fh9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8fhd; else goto c8fhe;
       c8fhd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fhe: // global
           I64[Sp - 16] = block_c8fh6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fj7; else goto c8fh7;
       u8fj7: // global
           call _c8fh6(R1) args: 0, res: 0, upd: 0;
       c8fh7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fh6() //  [R1]
         { []
         }
     {offset
       c8fh6: // global
           I64[Sp - 8] = block_c8fhc_info;
           _s8ejc::P64 = P64[R1 + 7];
           _s8ejd::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8ejd::P64;
           P64[Sp + 8] = _s8ejc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fj6; else goto c8fhg;
       u8fj6: // global
           call _c8fhc(R1) args: 0, res: 0, upd: 0;
       c8fhg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fh6_info" {
     block_c8fh6_info:
         const _c8fh6;
         const 1;
         const 30;
 },
 _c8fhc() //  [R1]
         { []
         }
     {offset
       c8fhc: // global
           I64[Sp - 8] = block_c8fhk_info;
           _s8ejf::P64 = P64[R1 + 7];
           _s8ejg::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp] = _s8ejg::P64;
           P64[Sp + 16] = _s8ejf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fj8; else goto c8fhm;
       u8fj8: // global
           call _c8fhk(R1) args: 0, res: 0, upd: 0;
       c8fhm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fhc_info" {
     block_c8fhc_info:
         const _c8fhc;
         const 2;
         const 30;
 },
 _c8fhk() //  [R1]
         { []
         }
     {offset
       c8fhk: // global
           _s8ejf::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto c8fht; else goto c8fid;
       c8fht: // global
           I64[Sp] = block_c8fhq_info;
           R1 = _s8ejf::P64;
           if (R1 & 7 != 0) goto u8fj9; else goto c8fhu;
       u8fj9: // global
           call _c8fhq(R1) args: 0, res: 0, upd: 0;
       c8fhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fid: // global
           I64[Sp] = block_c8fib_info;
           R1 = _s8ejf::P64;
           if (R1 & 7 != 0) goto u8fja; else goto c8fie;
       u8fja: // global
           call _c8fib(R1) args: 0, res: 0, upd: 0;
       c8fie: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fhk_info" {
     block_c8fhk_info:
         const _c8fhk;
         const 3;
         const 30;
 },
 _c8fhq() //  [R1]
         { []
         }
     {offset
       c8fhq: // global
           if (R1 & 7 == 1) goto c8fhB; else goto u8fj3;
       c8fhB: // global
           I64[Sp] = block_c8fhy_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8fjb; else goto c8fhC;
       u8fjb: // global
           call _c8fhy(R1) args: 0, res: 0, upd: 0;
       c8fhC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fj3: // global
           Sp = Sp + 32;
           call _c8fiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fhq_info" {
     block_c8fhq_info:
         const _c8fhq;
         const 259;
         const 30;
 },
 _c8fhy() //  [R1]
         { []
         }
     {offset
       c8fhy: // global
           _s8ejg::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fhJ; else goto c8fhZ;
       c8fhJ: // global
           I64[Sp + 24] = block_c8fhG_info;
           R1 = _s8ejg::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fjd; else goto c8fhK;
       u8fjd: // global
           call _c8fhG(R1) args: 0, res: 0, upd: 0;
       c8fhK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fhZ: // global
           I64[Sp + 24] = block_c8fhX_info;
           R1 = _s8ejg::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fje; else goto c8fi0;
       u8fje: // global
           call _c8fhX() args: 0, res: 0, upd: 0;
       c8fi0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fhy_info" {
     block_c8fhy_info:
         const _c8fhy;
         const 387;
         const 30;
 },
 _c8fhG() //  [R1]
         { []
         }
     {offset
       c8fhG: // global
           if (R1 & 7 == 1) goto u8fj4; else goto u8fj5;
       u8fj4: // global
           Sp = Sp + 8;
           call _c8fiE() args: 0, res: 0, upd: 0;
       u8fj5: // global
           Sp = Sp + 8;
           call _c8fiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fhG_info" {
     block_c8fhG_info:
         const _c8fhG;
         const 0;
         const 30;
 },
 _c8fhX() //  []
         { []
         }
     {offset
       c8fhX: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fhX_info" {
     block_c8fhX_info:
         const _c8fhX;
         const 0;
         const 30;
 },
 _c8fib() //  [R1]
         { []
         }
     {offset
       c8fib: // global
           if (R1 & 7 == 1) goto u8fj0; else goto c8fip;
       u8fj0: // global
           Sp = Sp + 32;
           call _c8fiE() args: 0, res: 0, upd: 0;
       c8fip: // global
           I64[Sp] = block_c8fin_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto u8fjh; else goto c8fiq;
       u8fjh: // global
           call _c8fin(R1) args: 0, res: 0, upd: 0;
       c8fiq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fib_info" {
     block_c8fib_info:
         const _c8fib;
         const 259;
         const 30;
 },
 _c8fin() //  [R1]
         { []
         }
     {offset
       c8fin: // global
           _s8ejg::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fix; else goto c8fiN;
       c8fix: // global
           I64[Sp + 24] = block_c8fiu_info;
           R1 = _s8ejg::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fjj; else goto c8fiy;
       u8fjj: // global
           call _c8fiu(R1) args: 0, res: 0, upd: 0;
       c8fiy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fiN: // global
           I64[Sp + 24] = block_c8fiL_info;
           R1 = _s8ejg::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fjk; else goto c8fiO;
       u8fjk: // global
           call _c8fiL() args: 0, res: 0, upd: 0;
       c8fiO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fin_info" {
     block_c8fin_info:
         const _c8fin;
         const 387;
         const 30;
 },
 _c8fiu() //  [R1]
         { []
         }
     {offset
       c8fiu: // global
           if (R1 & 7 == 1) goto u8fj1; else goto u8fj2;
       u8fj1: // global
           Sp = Sp + 8;
           call _c8fiE() args: 0, res: 0, upd: 0;
       u8fj2: // global
           Sp = Sp + 8;
           call _c8fiI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fiu_info" {
     block_c8fiu_info:
         const _c8fiu;
         const 0;
         const 30;
 },
 _c8fiE() //  []
         { []
         }
     {offset
       c8fiE: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fiI() //  []
         { []
         }
     {offset
       c8fiI: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fiL() //  []
         { []
         }
     {offset
       c8fiL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fiL_info" {
     block_c8fiL_info:
         const _c8fiL;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.628985491 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fkP: // global
           _s8ejr::P64 = R3;
           R3 = R2;
           R2 = _s8ejr::P64;
           call GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_entry(R3,
                                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.636552393 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_info;
 },
 GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fl3: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c8fl7; else goto c8fl8;
       c8fl7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fl8: // global
           I64[Sp - 16] = block_c8fl0_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fn1; else goto c8fl1;
       u8fn1: // global
           call _c8fl0(R1) args: 0, res: 0, upd: 0;
       c8fl1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_info" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_info:
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fl0() //  [R1]
         { []
         }
     {offset
       c8fl0: // global
           I64[Sp - 16] = block_c8fl6_info;
           _s8eju::P64 = R1;
           _s8ejv::P64 = P64[R1 + 7];
           _s8ejw::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp - 8] = _s8ejw::P64;
           P64[Sp] = _s8ejv::P64;
           P64[Sp + 8] = _s8eju::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fn0; else goto c8fla;
       u8fn0: // global
           call _c8fl6(R1) args: 0, res: 0, upd: 0;
       c8fla: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fl0_info" {
     block_c8fl0_info:
         const _c8fl0;
         const 1;
         const 30;
 },
 _c8fl6() //  [R1]
         { []
         }
     {offset
       c8fl6: // global
           I64[Sp - 16] = block_c8fle_info;
           _s8ejx::P64 = R1;
           _s8ejy::P64 = P64[R1 + 7];
           _s8ejz::P64 = P64[R1 + 15];
           R1 = P64[Sp + 16];
           P64[Sp - 8] = _s8ejz::P64;
           P64[Sp] = _s8ejy::P64;
           P64[Sp + 16] = _s8ejx::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fn2; else goto c8flg;
       u8fn2: // global
           call _c8fle(R1) args: 0, res: 0, upd: 0;
       c8flg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fl6_info" {
     block_c8fl6_info:
         const _c8fl6;
         const 3;
         const 30;
 },
 _c8fle() //  [R1]
         { []
         }
     {offset
       c8fle: // global
           _s8ejy::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto c8fln; else goto c8fm7;
       c8fln: // global
           I64[Sp] = block_c8flk_info;
           R1 = _s8ejy::P64;
           if (R1 & 7 != 0) goto u8fn3; else goto c8flo;
       u8fn3: // global
           call _c8flk(R1) args: 0, res: 0, upd: 0;
       c8flo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fm7: // global
           I64[Sp] = block_c8fm5_info;
           R1 = _s8ejy::P64;
           if (R1 & 7 != 0) goto u8fn4; else goto c8fm8;
       u8fn4: // global
           call _c8fm5(R1) args: 0, res: 0, upd: 0;
       c8fm8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fle_info" {
     block_c8fle_info:
         const _c8fle;
         const 5;
         const 30;
 },
 _c8flk() //  [R1]
         { []
         }
     {offset
       c8flk: // global
           if (R1 & 7 == 1) goto c8flv; else goto u8fmX;
       c8flv: // global
           I64[Sp] = block_c8fls_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8fn5; else goto c8flw;
       u8fn5: // global
           call _c8fls(R1) args: 0, res: 0, upd: 0;
       c8flw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fmX: // global
           Sp = Sp + 40;
           call _c8fmC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8flk_info" {
     block_c8flk_info:
         const _c8flk;
         const 133;
         const 30;
 },
 _c8fls() //  [R1]
         { []
         }
     {offset
       c8fls: // global
           _s8ejz::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8flD; else goto c8flT;
       c8flD: // global
           I64[Sp + 24] = block_c8flA_info;
           R1 = _s8ejz::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fn7; else goto c8flE;
       u8fn7: // global
           call _c8flA(R1) args: 0, res: 0, upd: 0;
       c8flE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8flT: // global
           I64[Sp + 24] = block_c8flR_info;
           R1 = _s8ejz::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fn8; else goto c8flU;
       u8fn8: // global
           call _c8flR() args: 0, res: 0, upd: 0;
       c8flU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fls_info" {
     block_c8fls_info:
         const _c8fls;
         const 389;
         const 30;
 },
 _c8flA() //  [R1]
         { []
         }
     {offset
       c8flA: // global
           if (R1 & 7 == 1) goto u8fmY; else goto u8fmZ;
       u8fmY: // global
           Sp = Sp + 8;
           call _c8fmy() args: 0, res: 0, upd: 0;
       u8fmZ: // global
           Sp = Sp + 16;
           call _c8fmC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8flA_info" {
     block_c8flA_info:
         const _c8flA;
         const 2;
         const 30;
 },
 _c8flR() //  []
         { []
         }
     {offset
       c8flR: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8flR_info" {
     block_c8flR_info:
         const _c8flR;
         const 130;
         const 30;
 },
 _c8fm5() //  [R1]
         { []
         }
     {offset
       c8fm5: // global
           if (R1 & 7 == 1) goto u8fmU; else goto c8fmj;
       u8fmU: // global
           Sp = Sp + 32;
           call _c8fmy() args: 0, res: 0, upd: 0;
       c8fmj: // global
           I64[Sp] = block_c8fmh_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto u8fnb; else goto c8fmk;
       u8fnb: // global
           call _c8fmh(R1) args: 0, res: 0, upd: 0;
       c8fmk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fm5_info" {
     block_c8fm5_info:
         const _c8fm5;
         const 133;
         const 30;
 },
 _c8fmh() //  [R1]
         { []
         }
     {offset
       c8fmh: // global
           _s8ejz::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fmr; else goto c8fmH;
       c8fmr: // global
           I64[Sp + 24] = block_c8fmo_info;
           R1 = _s8ejz::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fnd; else goto c8fms;
       u8fnd: // global
           call _c8fmo(R1) args: 0, res: 0, upd: 0;
       c8fms: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fmH: // global
           I64[Sp + 24] = block_c8fmF_info;
           R1 = _s8ejz::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto u8fne; else goto c8fmI;
       u8fne: // global
           call _c8fmF() args: 0, res: 0, upd: 0;
       c8fmI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fmh_info" {
     block_c8fmh_info:
         const _c8fmh;
         const 389;
         const 30;
 },
 _c8fmo() //  [R1]
         { []
         }
     {offset
       c8fmo: // global
           if (R1 & 7 == 1) goto u8fmV; else goto u8fmW;
       u8fmV: // global
           Sp = Sp + 8;
           call _c8fmy() args: 0, res: 0, upd: 0;
       u8fmW: // global
           Sp = Sp + 16;
           call _c8fmC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fmo_info" {
     block_c8fmo_info:
         const _c8fmo;
         const 2;
         const 30;
 },
 _c8fmy() //  []
         { []
         }
     {offset
       c8fmy: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fmC() //  []
         { []
         }
     {offset
       c8fmC: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fmF() //  []
         { []
         }
     {offset
       c8fmF: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fmF_info" {
     block_c8fmF_info:
         const _c8fmF;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.659191221 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdNewlineMode_closure" {
     GHC.IO.Handle.Types.$fOrdNewlineMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Handle.Types.$fEqNewlineMode_closure+1;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$ccompare_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c<=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$c>=_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmax_closure+2;
         const GHC.IO.Handle.Types.$fOrdNewlineMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.660988504 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadBufferMode13_bytes" {
     GHC.IO.Handle.Types.$fReadBufferMode13_bytes:
         I8[] [78,111,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.663502396 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode12_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode12_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode12_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode12_entry() //  [R1]
         { []
         }
     {offset
       c8foN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8foO; else goto c8foP;
       c8foO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8foP: // global
           (_c8foK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8foK::I64 == 0) goto c8foM; else goto c8foL;
       c8foM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8foL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8foK::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode13_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode12_info" {
     GHC.IO.Handle.Types.$fReadBufferMode12_info:
         const GHC.IO.Handle.Types.$fReadBufferMode12_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.667330047 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode6_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode6_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode6_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode6_entry() //  [R2]
         { []
         }
     {offset
       c8fp2: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode12_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode6_info" {
     GHC.IO.Handle.Types.$fShowBufferMode6_info:
         const GHC.IO.Handle.Types.$fShowBufferMode6_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8evg_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.670362732 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadBufferMode9_bytes" {
     GHC.IO.Handle.Types.$fReadBufferMode9_bytes:
         I8[] [76,105,110,101,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.672678843 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode8_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode8_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode8_entry() //  [R1]
         { []
         }
     {offset
       c8fpg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fph; else goto c8fpi;
       c8fph: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fpi: // global
           (_c8fpd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8fpd::I64 == 0) goto c8fpf; else goto c8fpe;
       c8fpf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8fpe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8fpd::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode8_info" {
     GHC.IO.Handle.Types.$fReadBufferMode8_info:
         const GHC.IO.Handle.Types.$fReadBufferMode8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.676367192 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode5_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode5_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode5_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode5_entry() //  [R2]
         { []
         }
     {offset
       c8fpv: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode8_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode5_info" {
     GHC.IO.Handle.Types.$fShowBufferMode5_info:
         const GHC.IO.Handle.Types.$fShowBufferMode5_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8evg_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.681047189 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fShowBufferMode4_bytes" {
     GHC.IO.Handle.Types.$fShowBufferMode4_bytes:
         I8[] [66,108,111,99,107,66,117,102,102,101,114,105,110,103,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.683265092 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode3_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode3_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode3_entry() //  [R1]
         { []
         }
     {offset
       c8fpJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fpK; else goto c8fpL;
       c8fpK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fpL: // global
           (_c8fpG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8fpG::I64 == 0) goto c8fpI; else goto c8fpH;
       c8fpI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8fpH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8fpG::I64;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode3_info" {
     GHC.IO.Handle.Types.$fShowBufferMode3_info:
         const GHC.IO.Handle.Types.$fShowBufferMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.691110005 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_info;
         const 0;
 },
 g_s8ejP_entry() //  [R1]
         { []
         }
     {offset
       c8fqe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fqf; else goto c8fqg;
       c8fqf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fqg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = P64[R1 + 16];
           R3 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           Sp = Sp - 16;
           call GHC.Show.$fShowMaybe_$cshowsPrec_entry(R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . g_s8ejP_info" {
     g_s8ejP_info:
         const g_s8ejP_entry;
         const 1;
         const 4294967312;
         const S8evg_srt+352;
 },
 sat_s8ejS_entry() //  [R1]
         { []
         }
     {offset
       c8fqt: // global
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ejS_info" {
     sat_s8ejS_info:
         const sat_s8ejS_entry;
         const 2;
         const 18;
 },
 sat_s8ejT_entry() //  [R1, R2]
         { []
         }
     {offset
       c8fqw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8fqA; else goto c8fqz;
       c8fqA: // global
           HpAlloc = 32;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8fqz: // global
           _s8ejP::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_s8ejS_info;
           P64[Hp - 8] = _s8ejP::P64;
           P64[Hp] = R2;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode3_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ejT_info" {
     sat_s8ejT_info:
         const sat_s8ejT_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S8evg_srt+360;
 },
 sat_s8ejW_entry() //  [R1]
         { []
         }
     {offset
       c8fqQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8fqU; else goto c8fqT;
       c8fqU: // global
           HpAlloc = 24;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fqT: // global
           _s8ejP::P64 = P64[R1 + 16];
           _s8ejU::P64 = P64[R1 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s8ejU::P64;
           R2 = Hp - 14;
           R1 = _s8ejP::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ejW_info" {
     sat_s8ejW_info:
         const sat_s8ejW_entry;
         const 2;
         const 18;
 },
 sat_s8ejX_entry() //  [R1]
         { []
         }
     {offset
       c8fqV: // global
           _s8ejX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8fqW; else goto c8fqX;
       c8fqX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8fqZ; else goto c8fqY;
       c8fqZ: // global
           HpAlloc = 32;
           goto c8fqW;
       c8fqW: // global
           R1 = _s8ejX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fqY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8ejX::P64;
           _s8ejP::P64 = P64[_s8ejX::P64 + 16];
           _s8ejU::P64 = P64[_s8ejX::P64 + 24];
           I64[Hp - 24] = sat_s8ejW_info;
           P64[Hp - 8] = _s8ejP::P64;
           P64[Hp] = _s8ejU::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode3_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8ejX_info" {
     sat_s8ejX_info:
         const sat_s8ejX_entry;
         const 2;
         const 4294967314;
         const S8evg_srt+360;
 },
 sat_s8ejY_entry() //  [R1, R2]
         { []
         }
     {offset
       c8fr1: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c8fr5; else goto c8fr4;
       c8fr5: // global
           HpAlloc = 56;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8fr4: // global
           _s8ejP::P64 = P64[R1 + 7];
           I64[Hp - 48] = sat_s8ejX_info;
           P64[Hp - 32] = _s8ejP::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ejY_info" {
     sat_s8ejY_info:
         const sat_s8ejY_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const S8evg_srt+360;
 },
 GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_entry() //  [R2,
                                                               R3]
         { []
         }
     {offset
       c8frb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8frc; else goto c8frd;
       c8frc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8frd: // global
           I64[Sp - 16] = block_c8fpY_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8frr; else goto c8fpZ;
       u8frr: // global
           call _c8fpY(R1) args: 0, res: 0, upd: 0;
       c8fpZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const S8evg_srt+352;
 },
 _c8fpY() //  [R1]
         { []
         }
     {offset
       c8fpY: // global
           _c8fra::P64 = R1 & 7;
           if (_c8fra::P64 < 3) goto u8frp; else goto c8fr9;
       u8frp: // global
           if (_c8fra::P64 < 2) goto c8fr7; else goto c8fr8;
       c8fr7: // global
           R1 = GHC.IO.Handle.Types.$fShowBufferMode6_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8fr8: // global
           R1 = GHC.IO.Handle.Types.$fShowBufferMode5_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8fr9: // global
           I64[Sp] = block_c8fq5_info;
           _s8ejM::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ejM::P64;
           if (R1 & 7 != 0) goto u8frq; else goto c8fq6;
       u8frq: // global
           call _c8fq5(R1) args: 0, res: 0, upd: 0;
       c8fq6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fpY_info" {
     block_c8fpY_info:
         const _c8fpY;
         const 1;
         const 115964117022;
         const S8evg_srt+352;
 },
 _c8fq5() //  [R1]
         { []
         }
     {offset
       c8fq5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c8frl; else goto c8frk;
       c8frl: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8frk: // global
           _s8ejO::I64 = I64[R1 + 7];
           I64[Hp - 32] = g_s8ejP_info;
           P64[Hp - 16] = P64[Sp + 8];
           _c8fqa::P64 = Hp - 32;
           if (%MO_S_Lt_W64(_s8ejO::I64, 11)) goto c8frn; else goto c8fro;
       c8frn: // global
           I64[Hp - 8] = sat_s8ejT_info;
           P64[Hp] = _c8fqa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8fro: // global
           I64[Hp - 8] = sat_s8ejY_info;
           P64[Hp] = _c8fqa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fq5_info" {
     block_c8fq5_info:
         const _c8fq5;
         const 1;
         const 12884901918;
         const S8evg_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.708615774 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode7_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode7_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.713896399 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_info;
         const 0;
 },
 sat_s8ek9_entry() //  [R1]
         { []
         }
     {offset
       c8fsS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8fsY; else goto c8fsZ;
       c8fsY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fsZ: // global
           I64[Sp - 8] = block_c8fsP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ft4; else goto c8fsQ;
       u8ft4: // global
           call _c8fsP(R1) args: 0, res: 0, upd: 0;
       c8fsQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ek9_info" {
     sat_s8ek9_info:
         const sat_s8ek9_entry;
         const 1;
         const 16;
 },
 _c8fsP() //  [R1]
         { []
         }
     {offset
       c8fsP: // global
           I64[Sp] = block_c8fsV_info;
           R4 = GHC.IO.Handle.Types.$fShowBufferMode7_closure+2;
           R3 = I64[R1 + 7];
           R2 = 11;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fsP_info" {
     block_c8fsP_info:
         const _c8fsP;
         const 0;
         const 30;
 },
 _c8fsV() //  [R1, R2]
         { []
         }
     {offset
       c8fsV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ft3; else goto c8ft2;
       c8ft3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       c8ft2: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fsV_info" {
     block_c8fsV_info:
         const _c8fsV;
         const 0;
         const 30;
 },
 sat_s8eka_entry() //  [R1]
         { []
         }
     {offset
       c8ft5: // global
           _s8eka::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8ft6; else goto c8ft7;
       c8ft7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ft9; else goto c8ft8;
       c8ft9: // global
           HpAlloc = 24;
           goto c8ft6;
       c8ft6: // global
           R1 = _s8eka::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ft8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8eka::P64;
           _s8ek3::P64 = P64[_s8eka::P64 + 16];
           I64[Hp - 16] = sat_s8ek9_info;
           P64[Hp] = _s8ek3::P64;
           R3 = Hp - 16;
           R2 = GHC.Show.$fShowMaybe1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8eka_info" {
     sat_s8eka_info:
         const sat_s8eka_entry;
         const 1;
         const 4294967312;
         const S8evg_srt+392;
 },
 sat_s8ekb_entry() //  [R1]
         { []
         }
     {offset
       c8fte: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8ftf; else goto c8ftg;
       c8ftf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8ftg: // global
           I64[Sp - 8] = block_c8fsB_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ftn; else goto c8fsC;
       u8ftn: // global
           call _c8fsB(R1) args: 0, res: 0, upd: 0;
       c8fsC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ekb_info" {
     sat_s8ekb_info:
         const sat_s8ekb_entry;
         const 1;
         const 12884901904;
         const S8evg_srt+392;
 },
 _c8fsB() //  [R1]
         { []
         }
     {offset
       c8fsB: // global
           if (R1 & 7 == 1) goto c8ftb; else goto c8ftc;
       c8ftb: // global
           R1 = GHC.Show.$fShowMaybe4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8ftc: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8ftm; else goto c8ftl;
       c8ftm: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ftl: // global
           _s8ek3::P64 = P64[R1 + 6];
           I64[Hp - 40] = sat_s8eka_info;
           P64[Hp - 24] = _s8ek3::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 40;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fsB_info" {
     block_c8fsB_info:
         const _c8fsB;
         const 0;
         const 12884901918;
         const S8evg_srt+392;
 },
 GHC.IO.Handle.Types.$fShowBufferMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8ftt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8ftu; else goto c8ftv;
       c8ftu: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8ftv: // global
           I64[Sp - 8] = block_c8fsq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8ftE; else goto c8fsr;
       u8ftE: // global
           call _c8fsq(R1) args: 0, res: 0, upd: 0;
       c8fsr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode_$cshow_info" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshow_info:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_entry;
         const 0;
         const 3895535337486;
         const 4294967301;
         const S8evg_srt+336;
 },
 _c8fsq() //  [R1]
         { []
         }
     {offset
       c8fsq: // global
           _c8fts::P64 = R1 & 7;
           if (_c8fts::P64 < 3) goto u8ftD; else goto c8ftr;
       u8ftD: // global
           if (_c8fts::P64 < 2) goto c8ftp; else goto c8ftq;
       c8ftp: // global
           R1 = GHC.IO.Handle.Types.$fReadBufferMode12_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8ftq: // global
           R1 = GHC.IO.Handle.Types.$fReadBufferMode8_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8ftr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8ftC; else goto c8ftB;
       c8ftC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8ftB: // global
           _s8ek1::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_s8ekb_info;
           P64[Hp] = _s8ek1::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode3_closure;
           Sp = Sp + 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fsq_info" {
     block_c8fsq_info:
         const _c8fsq;
         const 0;
         const 1696512081950;
         const S8evg_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.729864744 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode1_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode1_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode1_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode1_entry() //  [R2]
         { []
         }
     {offset
       c8fuz: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode2_closure+1;
           call GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_entry(R3,
                                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode1_info" {
     GHC.IO.Handle.Types.$fShowBufferMode1_info:
         const GHC.IO.Handle.Types.$fShowBufferMode1_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8evg_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.733465499 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_entry() //  [R2,
                                                              R3]
         { []
         }
     {offset
       c8fuK: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowBufferMode1_closure+1;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S8evg_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.736546646 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowBufferMode_closure" {
     GHC.IO.Handle.Types.$fShowBufferMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure+2;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.738562698 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode11_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode11_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode11_info;
 },
 GHC.IO.Handle.Types.$fReadBufferMode11_entry() //  [R3]
         { []
         }
     {offset
       c8fuW: // global
           R2 = GHC.IO.Handle.Types.NoBuffering_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode11_info" {
     GHC.IO.Handle.Types.$fReadBufferMode11_info:
         const GHC.IO.Handle.Types.$fReadBufferMode11_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.742059757 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode10_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode10_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode12_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode11_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.744051423 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode7_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode7_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode7_info;
 },
 GHC.IO.Handle.Types.$fReadBufferMode7_entry() //  [R3]
         { []
         }
     {offset
       c8fv8: // global
           R2 = GHC.IO.Handle.Types.LineBuffering_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode7_info" {
     GHC.IO.Handle.Types.$fReadBufferMode7_info:
         const GHC.IO.Handle.Types.$fReadBufferMode7_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.747318336 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode6_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode6_closure:
         const (,)_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode8_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode7_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.74897435 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode5_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode5_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode6_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.750609626 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_sps_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_sps_closure:
         const :_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode10_closure+1;
         const GHC.IO.Handle.Types.$fReadBufferMode5_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.752293109 UTC

[section ""cstring" . GHC.IO.Handle.Types.$fReadBufferMode4_bytes" {
     GHC.IO.Handle.Types.$fReadBufferMode4_bytes:
         I8[] [66,108,111,99,107,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.755369581 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode3_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode3_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode3_entry() //  [R1]
         { []
         }
     {offset
       c8fvp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fvq; else goto c8fvr;
       c8fvq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fvr: // global
           (_c8fvm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8fvm::I64 == 0) goto c8fvo; else goto c8fvn;
       c8fvo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8fvn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8fvm::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode3_info" {
     GHC.IO.Handle.Types.$fReadBufferMode3_info:
         const GHC.IO.Handle.Types.$fReadBufferMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.758903421 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure:
         const Text.Read.Lex.Ident_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode3_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.764584279 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode2_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode2_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode2_info;
         const 0;
 },
 ds2_s8ekj_entry() //  [R1]
         { []
         }
     {offset
       c8fvJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fvK; else goto c8fvL;
       c8fvK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fvL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadBufferMode_sps_closure+2;
           Sp = Sp - 16;
           call GHC.Read.choose2_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . ds2_s8ekj_info" {
     ds2_s8ekj_info:
         const ds2_s8ekj_entry;
         const 1;
         const 12884901904;
         const S8evg_srt+424;
 },
 sat_s8eks_entry() //  [R1, R2]
         { []
         }
     {offset
       c8fwf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8fwj; else goto c8fwi;
       c8fwj: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8fwi: // global
           _s8ekk::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.IO.Handle.Types.BlockBuffering_con_info;
           P64[Hp] = R2;
           R2 = Hp - 5;
           R1 = _s8ekk::P64;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8eks_info" {
     sat_s8eks_info:
         const sat_s8eks_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 sat_s8ekt_entry() //  [R1, R2]
         { []
         }
     {offset
       c8fwk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8fwo; else goto c8fwn;
       c8fwo: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8fwn: // global
           _s8ekk::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_s8eks_info;
           P64[Hp] = _s8ekk::P64;
           R4 = Hp - 7;
           R3 = GHC.IO.Handle.Types.$fReadBufferMode_n_closure+1;
           R2 = GHC.Read.$fReadInt_closure;
           call GHC.Read.$fReadMaybe1_entry(R4,
                                            R3,
                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ekt_info" {
     sat_s8ekt_info:
         const sat_s8ekt_entry;
         const 1;
         const 12884901897;
         const 4294967301;
         const S8evg_srt+440;
 },
 sat_s8ekw_entry() //  [R1]
         { []
         }
     {offset
       c8fwp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8fwq; else goto c8fwr;
       c8fwq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fwr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c8fvV_info;
           _s8ekk::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s8ekk::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u8fwE; else goto c8fvW;
       u8fwE: // global
           call _c8fvV(R1) args: 0, res: 0, upd: 0;
       c8fvW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8ekw_info" {
     sat_s8ekw_info:
         const sat_s8ekw_entry;
         const 2;
         const 8070450536542896146;
         const S8evg_srt+216;
 },
 _c8fvV() //  [R1]
         { []
         }
     {offset
       c8fvV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8fwu; else goto c8fwt;
       c8fwu: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8fwt: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 10)) goto c8fww; else goto c8fwA;
       c8fww: // global
           Hp = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.Fail_closure+3;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c8fwA: // global
           I64[Hp - 8] = sat_s8ekt_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c8fwx_info;
           R3 = Hp - 7;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure+4;
           Sp = Sp + 8;
           call Text.Read.Lex.$wexpect_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c8fvV_info" {
     block_c8fvV_info:
         const _c8fvV;
         const 1;
         const 8070450536542896158;
         const S8evg_srt+216;
 },
 _c8fwx() //  [R1]
         { []
         }
     {offset
       c8fwx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8fwD; else goto c8fwC;
       c8fwD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c8fwC: // global
           I64[Hp - 8] = Text.ParserCombinators.ReadP.Look_con_info;
           P64[Hp] = R1;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8fwx_info" {
     block_c8fwx_info:
         const _c8fwx;
         const 0;
         const 30;
 },
 sat_s8ekx_entry() //  [R1, R2]
         { []
         }
     {offset
       c8fwH: // global
           _s8ekk::P64 = R2;
           _s8ekx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8fwI; else goto c8fwJ;
       c8fwJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8fwL; else goto c8fwK;
       c8fwL: // global
           HpAlloc = 32;
           goto c8fwI;
       c8fwI: // global
           R2 = _s8ekk::P64;
           R1 = _s8ekx::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8fwK: // global
           _s8eki::P64 = P64[_s8ekx::P64 + 7];
           _s8ekj::P64 = P64[_s8ekx::P64 + 15];
           I64[Hp - 24] = sat_s8ekw_info;
           P64[Hp - 8] = _s8eki::P64;
           P64[Hp] = _s8ekk::P64;
           I64[Sp - 16] = block_c8fwF_info;
           R2 = _s8ekk::P64;
           R1 = _s8ekj::P64;
           P64[Sp - 8] = Hp - 24;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8ekx_info" {
     sat_s8ekx_info:
         const sat_s8ekx_entry;
         const 2;
         const 17293822573397671947;
         const 4294967301;
         const S8evg_srt+216;
 },
 _c8fwF() //  [R1]
         { []
         }
     {offset
       c8fwF: // global
           R3 = P64[Sp + 8];
           R2 = R1;
           Sp = Sp + 16;
           call Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_entry(R3,
                                                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fwF_info" {
     block_c8fwF_info:
         const _c8fwF;
         const 1;
         const 4294967326;
         const S8evg_srt+464;
 },
 section ""relreadonly" . u8fwU_srtd" {
     u8fwU_srtd:
         const S8evg_srt+216;
         const 33;
         const 8522825729;
 },
 GHC.IO.Handle.Types.$fReadBufferMode2_entry() //  [R2]
         { []
         }
     {offset
       c8fwP: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto c8fwT; else goto c8fwS;
       c8fwT: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadBufferMode2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8fwS: // global
           I64[Hp - 40] = ds2_s8ekj_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = sat_s8ekx_info;
           P64[Hp - 8] = R2;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode2_info" {
     GHC.IO.Handle.Types.$fReadBufferMode2_info:
         const GHC.IO.Handle.Types.$fReadBufferMode2_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8fwU_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.78338643 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode1_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode1_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode1_info;
         const 0;
 },
 section ""relreadonly" . u8fxS_srtd" {
     u8fxS_srtd:
         const S8evg_srt+160;
         const 40;
         const 549755813889;
 },
 GHC.IO.Handle.Types.$fReadBufferMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fxP: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode1_info" {
     GHC.IO.Handle.Types.$fReadBufferMode1_info:
         const GHC.IO.Handle.Types.$fReadBufferMode1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934607;
         const u8fxS_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.788501256 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_info;
         const 0;
 },
 section ""relreadonly" . u8fye_srtd" {
     u8fye_srtd:
         const S8evg_srt+160;
         const 40;
         const 549755813889;
 },
 sat_s8ekz_entry() //  [R1]
         { []
         }
     {offset
       c8fy6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fy7; else goto c8fy8;
       c8fy7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fy8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadBufferMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8ekz_info" {
     sat_s8ekz_info:
         const sat_s8ekz_entry;
         const 1;
         const 18446744069414584336;
         const u8fye_srtd;
 },
 section ""relreadonly" . u8fyf_srtd" {
     u8fyf_srtd:
         const S8evg_srt+160;
         const 41;
         const 1649267441665;
 },
 GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c8fy9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8fyd; else goto c8fyc;
       c8fyd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8fyc: // global
           I64[Hp - 16] = sat_s8ekz_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_info" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_info:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_entry;
         const 0;
         const 18446744069414584334;
         const 4294967301;
         const u8fyf_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.795972389 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c8fyA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fyB; else goto c8fyC;
       c8fyB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fyC: // global
           (_c8fyx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8fyx::I64 == 0) goto c8fyz; else goto c8fyy;
       c8fyz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8fyy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8fyx::I64;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_info" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_info:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S8evg_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.800424344 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode14_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode14_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode14_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode14_entry() //  [R1]
         { []
         }
     {offset
       c8fyR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fyS; else goto c8fyT;
       c8fyS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8fyT: // global
           (_c8fyO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8fyO::I64 == 0) goto c8fyQ; else goto c8fyP;
       c8fyQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8fyP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8fyO::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode14_info" {
     GHC.IO.Handle.Types.$fReadBufferMode14_info:
         const GHC.IO.Handle.Types.$fReadBufferMode14_entry;
         const 0;
         const 4294967317;
         const S8evg_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.804341068 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_$creadList_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadList_closure:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadList_info;
         const 0;
 },
 GHC.IO.Handle.Types.$fReadBufferMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c8fz7: // global
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fReadBufferMode14_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fReadBufferMode_$creadList_info" {
     GHC.IO.Handle.Types.$fReadBufferMode_$creadList_info:
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S8evg_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.807879714 UTC

[section ""data" . GHC.IO.Handle.Types.$fReadBufferMode_closure" {
     GHC.IO.Handle.Types.$fReadBufferMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure+1;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadList_closure+1;
         const GHC.IO.Handle.Types.$fReadBufferMode1_closure+2;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.813335078 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fzr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fzs; else goto c8fzt;
       c8fzs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fzt: // global
           I64[Sp - 16] = block_c8fzj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fB5; else goto c8fzk;
       u8fB5: // global
           call _c8fzj(R1) args: 0, res: 0, upd: 0;
       c8fzk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fzj() //  [R1]
         { []
         }
     {offset
       c8fzj: // global
           _s8ekB::P64 = P64[Sp + 8];
           _c8fzq::P64 = R1 & 7;
           if (_c8fzq::P64 < 3) goto u8fAT; else goto c8fzp;
       u8fAT: // global
           if (_c8fzq::P64 < 2) goto c8fzn; else goto c8fzo;
       c8fzn: // global
           I64[Sp + 8] = block_c8fzw_info;
           R1 = _s8ekB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fB2; else goto c8fzy;
       u8fB2: // global
           call _c8fzw(R1) args: 0, res: 0, upd: 0;
       c8fzy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fzo: // global
           I64[Sp + 8] = block_c8fzL_info;
           R1 = _s8ekB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fB3; else goto c8fzN;
       u8fB3: // global
           call _c8fzL(R1) args: 0, res: 0, upd: 0;
       c8fzN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fzp: // global
           I64[Sp] = block_c8fA0_info;
           _s8ekG::P64 = P64[R1 + 5];
           R1 = _s8ekB::P64;
           P64[Sp + 8] = _s8ekG::P64;
           if (R1 & 7 != 0) goto u8fB4; else goto c8fA2;
       u8fB4: // global
           call _c8fA0(R1) args: 0, res: 0, upd: 0;
       c8fA2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fzj_info" {
     block_c8fzj_info:
         const _c8fzj;
         const 1;
         const 30;
 },
 _c8fzw() //  [R1]
         { []
         }
     {offset
       c8fzw: // global
           if (R1 & 7 == 1) goto u8fAU; else goto u8fAV;
       u8fAU: // global
           Sp = Sp + 8;
           call _c8fAI() args: 0, res: 0, upd: 0;
       u8fAV: // global
           Sp = Sp + 8;
           call _c8fAw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fzw_info" {
     block_c8fzw_info:
         const _c8fzw;
         const 0;
         const 30;
 },
 _c8fzL() //  [R1]
         { []
         }
     {offset
       c8fzL: // global
           if (R1 & 7 == 3) goto u8fAW; else goto u8fAX;
       u8fAW: // global
           Sp = Sp + 8;
           call _c8fAw() args: 0, res: 0, upd: 0;
       u8fAX: // global
           Sp = Sp + 8;
           call _c8fAI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fzL_info" {
     block_c8fzL_info:
         const _c8fzL;
         const 0;
         const 30;
 },
 _c8fA0() //  [R1]
         { []
         }
     {offset
       c8fA0: // global
           if (R1 & 7 == 3) goto c8fAd; else goto u8fAY;
       c8fAd: // global
           I64[Sp] = block_c8fAb_info;
           _s8ekI::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ekI::P64;
           if (R1 & 7 != 0) goto u8fBa; else goto c8fAe;
       u8fBa: // global
           call _c8fAb(R1) args: 0, res: 0, upd: 0;
       c8fAe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fAY: // global
           Sp = Sp + 16;
           call _c8fAI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fA0_info" {
     block_c8fA0_info:
         const _c8fA0;
         const 1;
         const 30;
 },
 _c8fAb() //  [R1]
         { []
         }
     {offset
       c8fAb: // global
           _s8ekI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fAl; else goto c8fAB;
       c8fAl: // global
           I64[Sp + 8] = block_c8fAi_info;
           R1 = _s8ekI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fBc; else goto c8fAm;
       u8fBc: // global
           call _c8fAi(R1) args: 0, res: 0, upd: 0;
       c8fAm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fAB: // global
           I64[Sp] = block_c8fAz_info;
           _s8ekM::P64 = P64[R1 + 6];
           R1 = _s8ekI::P64;
           P64[Sp + 8] = _s8ekM::P64;
           if (R1 & 7 != 0) goto u8fBd; else goto c8fAC;
       u8fBd: // global
           call _c8fAz(R1) args: 0, res: 0, upd: 0;
       c8fAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fAb_info" {
     block_c8fAb_info:
         const _c8fAb;
         const 1;
         const 30;
 },
 _c8fAi() //  [R1]
         { []
         }
     {offset
       c8fAi: // global
           if (R1 & 7 == 1) goto u8fB0; else goto u8fB1;
       u8fB0: // global
           Sp = Sp + 8;
           call _c8fAI() args: 0, res: 0, upd: 0;
       u8fB1: // global
           Sp = Sp + 8;
           call _c8fAw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fAi_info" {
     block_c8fAi_info:
         const _c8fAi;
         const 0;
         const 30;
 },
 _c8fAw() //  []
         { []
         }
     {offset
       c8fAw: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fAz() //  [R1]
         { []
         }
     {offset
       c8fAz: // global
           if (R1 & 7 == 1) goto u8fAZ; else goto c8fAM;
       u8fAZ: // global
           Sp = Sp + 16;
           call _c8fAI() args: 0, res: 0, upd: 0;
       c8fAM: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.ltInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fAz_info" {
     block_c8fAz_info:
         const _c8fAz;
         const 1;
         const 30;
 },
 _c8fAI() //  []
         { []
         }
     {offset
       c8fAI: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.834394505 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fCs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fCt; else goto c8fCu;
       c8fCt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fCu: // global
           I64[Sp - 16] = block_c8fCk_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fEc; else goto c8fCl;
       u8fEc: // global
           call _c8fCk(R1) args: 0, res: 0, upd: 0;
       c8fCl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fCk() //  [R1]
         { []
         }
     {offset
       c8fCk: // global
           _s8ekQ::P64 = P64[Sp + 8];
           _c8fCr::P64 = R1 & 7;
           if (_c8fCr::P64 < 3) goto u8fDY; else goto c8fCq;
       u8fDY: // global
           if (_c8fCr::P64 < 2) goto c8fCo; else goto c8fCp;
       c8fCo: // global
           I64[Sp + 8] = block_c8fCx_info;
           R1 = _s8ekQ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fE9; else goto c8fCz;
       u8fE9: // global
           call _c8fCx(R1) args: 0, res: 0, upd: 0;
       c8fCz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fCp: // global
           I64[Sp + 8] = block_c8fCM_info;
           R1 = _s8ekQ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fEa; else goto c8fCO;
       u8fEa: // global
           call _c8fCM(R1) args: 0, res: 0, upd: 0;
       c8fCO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fCq: // global
           I64[Sp] = block_c8fD5_info;
           _s8ekV::P64 = P64[R1 + 5];
           R1 = _s8ekQ::P64;
           P64[Sp + 8] = _s8ekV::P64;
           if (R1 & 7 != 0) goto u8fEb; else goto c8fD7;
       u8fEb: // global
           call _c8fD5(R1) args: 0, res: 0, upd: 0;
       c8fD7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fCk_info" {
     block_c8fCk_info:
         const _c8fCk;
         const 1;
         const 30;
 },
 _c8fCx() //  [R1]
         { []
         }
     {offset
       c8fCx: // global
           if (R1 & 7 == 1) goto u8fE0; else goto u8fE1;
       u8fE0: // global
           Sp = Sp + 8;
           call _c8fDx() args: 0, res: 0, upd: 0;
       u8fE1: // global
           Sp = Sp + 8;
           call _c8fDB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fCx_info" {
     block_c8fCx_info:
         const _c8fCx;
         const 0;
         const 30;
 },
 _c8fCM() //  [R1]
         { []
         }
     {offset
       c8fCM: // global
           _c8fDW::P64 = R1 & 7;
           if (_c8fDW::P64 < 3) goto u8fDZ; else goto u8fE2;
       u8fDZ: // global
           if (_c8fDW::P64 < 2) goto u8fE4; else goto u8fE3;
       u8fE4: // global
           Sp = Sp + 8;
           call _c8fDN() args: 0, res: 0, upd: 0;
       u8fE3: // global
           Sp = Sp + 8;
           call _c8fDx() args: 0, res: 0, upd: 0;
       u8fE2: // global
           Sp = Sp + 8;
           call _c8fDB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fCM_info" {
     block_c8fCM_info:
         const _c8fCM;
         const 0;
         const 30;
 },
 _c8fD5() //  [R1]
         { []
         }
     {offset
       c8fD5: // global
           if (R1 & 7 == 3) goto c8fDi; else goto u8fE5;
       c8fDi: // global
           I64[Sp] = block_c8fDg_info;
           _s8ekX::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ekX::P64;
           if (R1 & 7 != 0) goto u8fEi; else goto c8fDj;
       u8fEi: // global
           call _c8fDg(R1) args: 0, res: 0, upd: 0;
       c8fDj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fE5: // global
           Sp = Sp + 16;
           call _c8fDN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fD5_info" {
     block_c8fD5_info:
         const _c8fD5;
         const 1;
         const 30;
 },
 _c8fDg() //  [R1]
         { []
         }
     {offset
       c8fDg: // global
           _s8ekX::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fDq; else goto c8fDG;
       c8fDq: // global
           I64[Sp + 8] = block_c8fDn_info;
           R1 = _s8ekX::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fEk; else goto c8fDr;
       u8fEk: // global
           call _c8fDn(R1) args: 0, res: 0, upd: 0;
       c8fDr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fDG: // global
           I64[Sp] = block_c8fDE_info;
           _s8el1::P64 = P64[R1 + 6];
           R1 = _s8ekX::P64;
           P64[Sp + 8] = _s8el1::P64;
           if (R1 & 7 != 0) goto u8fEl; else goto c8fDH;
       u8fEl: // global
           call _c8fDE(R1) args: 0, res: 0, upd: 0;
       c8fDH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fDg_info" {
     block_c8fDg_info:
         const _c8fDg;
         const 1;
         const 30;
 },
 _c8fDn() //  [R1]
         { []
         }
     {offset
       c8fDn: // global
           if (R1 & 7 == 1) goto u8fE7; else goto u8fE8;
       u8fE7: // global
           Sp = Sp + 8;
           call _c8fDx() args: 0, res: 0, upd: 0;
       u8fE8: // global
           Sp = Sp + 8;
           call _c8fDB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fDn_info" {
     block_c8fDn_info:
         const _c8fDn;
         const 0;
         const 30;
 },
 _c8fDx() //  []
         { []
         }
     {offset
       c8fDx: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fDB() //  []
         { []
         }
     {offset
       c8fDB: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fDE() //  [R1]
         { []
         }
     {offset
       c8fDE: // global
           if (R1 & 7 == 1) goto u8fE6; else goto c8fDR;
       u8fE6: // global
           Sp = Sp + 16;
           call _c8fDN() args: 0, res: 0, upd: 0;
       c8fDR: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.compareInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fDE_info" {
     block_c8fDE_info:
         const _c8fDE;
         const 1;
         const 30;
 },
 _c8fDN() //  []
         { []
         }
     {offset
       c8fDN: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.855549001 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c==_info;
 },
 GHC.IO.Handle.Types.$fEqBufferMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fFD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fFE; else goto c8fFF;
       c8fFE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fFF: // global
           I64[Sp - 16] = block_c8fFv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fHh; else goto c8fFw;
       u8fHh: // global
           call _c8fFv(R1) args: 0, res: 0, upd: 0;
       c8fFw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqBufferMode_$c==_info" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c==_info:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fFv() //  [R1]
         { []
         }
     {offset
       c8fFv: // global
           _s8el5::P64 = P64[Sp + 8];
           _c8fFC::P64 = R1 & 7;
           if (_c8fFC::P64 < 3) goto u8fH5; else goto c8fFB;
       u8fH5: // global
           if (_c8fFC::P64 < 2) goto c8fFz; else goto c8fFA;
       c8fFz: // global
           I64[Sp + 8] = block_c8fFI_info;
           R1 = _s8el5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fHe; else goto c8fFK;
       u8fHe: // global
           call _c8fFI(R1) args: 0, res: 0, upd: 0;
       c8fFK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fFA: // global
           I64[Sp + 8] = block_c8fFX_info;
           R1 = _s8el5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fHf; else goto c8fFZ;
       u8fHf: // global
           call _c8fFX(R1) args: 0, res: 0, upd: 0;
       c8fFZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fFB: // global
           I64[Sp] = block_c8fGc_info;
           _s8el9::P64 = P64[R1 + 5];
           R1 = _s8el5::P64;
           P64[Sp + 8] = _s8el9::P64;
           if (R1 & 7 != 0) goto u8fHg; else goto c8fGe;
       u8fHg: // global
           call _c8fGc(R1) args: 0, res: 0, upd: 0;
       c8fGe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fFv_info" {
     block_c8fFv_info:
         const _c8fFv;
         const 1;
         const 30;
 },
 _c8fFI() //  [R1]
         { []
         }
     {offset
       c8fFI: // global
           if (R1 & 7 == 1) goto u8fH6; else goto u8fH7;
       u8fH6: // global
           Sp = Sp + 8;
           call _c8fGE() args: 0, res: 0, upd: 0;
       u8fH7: // global
           Sp = Sp + 8;
           call _c8fGU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fFI_info" {
     block_c8fFI_info:
         const _c8fFI;
         const 0;
         const 30;
 },
 _c8fFX() //  [R1]
         { []
         }
     {offset
       c8fFX: // global
           if (R1 & 7 == 2) goto u8fH8; else goto u8fH9;
       u8fH8: // global
           Sp = Sp + 8;
           call _c8fGE() args: 0, res: 0, upd: 0;
       u8fH9: // global
           Sp = Sp + 8;
           call _c8fGU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fFX_info" {
     block_c8fFX_info:
         const _c8fFX;
         const 0;
         const 30;
 },
 _c8fGc() //  [R1]
         { []
         }
     {offset
       c8fGc: // global
           if (R1 & 7 == 3) goto c8fGp; else goto u8fHa;
       c8fGp: // global
           I64[Sp] = block_c8fGn_info;
           _s8elb::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8elb::P64;
           if (R1 & 7 != 0) goto u8fHm; else goto c8fGq;
       u8fHm: // global
           call _c8fGn(R1) args: 0, res: 0, upd: 0;
       c8fGq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fHa: // global
           Sp = Sp + 16;
           call _c8fGU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fGc_info" {
     block_c8fGc_info:
         const _c8fGc;
         const 1;
         const 30;
 },
 _c8fGn() //  [R1]
         { []
         }
     {offset
       c8fGn: // global
           _s8elb::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fGx; else goto c8fGN;
       c8fGx: // global
           I64[Sp + 8] = block_c8fGu_info;
           R1 = _s8elb::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fHo; else goto c8fGy;
       u8fHo: // global
           call _c8fGu(R1) args: 0, res: 0, upd: 0;
       c8fGy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fGN: // global
           I64[Sp] = block_c8fGL_info;
           _s8elf::P64 = P64[R1 + 6];
           R1 = _s8elb::P64;
           P64[Sp + 8] = _s8elf::P64;
           if (R1 & 7 != 0) goto u8fHp; else goto c8fGO;
       u8fHp: // global
           call _c8fGL(R1) args: 0, res: 0, upd: 0;
       c8fGO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fGn_info" {
     block_c8fGn_info:
         const _c8fGn;
         const 1;
         const 30;
 },
 _c8fGu() //  [R1]
         { []
         }
     {offset
       c8fGu: // global
           if (R1 & 7 == 1) goto u8fHc; else goto u8fHd;
       u8fHc: // global
           Sp = Sp + 8;
           call _c8fGE() args: 0, res: 0, upd: 0;
       u8fHd: // global
           Sp = Sp + 8;
           call _c8fGU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fGu_info" {
     block_c8fGu_info:
         const _c8fGu;
         const 0;
         const 30;
 },
 _c8fGE() //  []
         { []
         }
     {offset
       c8fGE: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fGL() //  [R1]
         { []
         }
     {offset
       c8fGL: // global
           if (R1 & 7 == 1) goto u8fHb; else goto c8fGY;
       u8fHb: // global
           Sp = Sp + 16;
           call _c8fGU() args: 0, res: 0, upd: 0;
       c8fGY: // global
           R3 = P64[R1 + 6];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Classes.eqInt_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fGL_info" {
     block_c8fGL_info:
         const _c8fGL;
         const 1;
         const 30;
 },
 _c8fGU() //  []
         { []
         }
     {offset
       c8fGU: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.876036246 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c/=_info;
 },
 GHC.IO.Handle.Types.$fEqBufferMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fIE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fIF; else goto c8fIG;
       c8fIF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fIG: // global
           I64[Sp - 16] = block_c8fIw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fKB; else goto c8fIx;
       u8fKB: // global
           call _c8fIw(R1) args: 0, res: 0, upd: 0;
       c8fIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fEqBufferMode_$c/=_info" {
     GHC.IO.Handle.Types.$fEqBufferMode_$c/=_info:
         const GHC.IO.Handle.Types.$fEqBufferMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fIw() //  [R1]
         { []
         }
     {offset
       c8fIw: // global
           _s8elj::P64 = P64[Sp + 8];
           _c8fID::P64 = R1 & 7;
           if (_c8fID::P64 < 3) goto u8fKn; else goto c8fIC;
       u8fKn: // global
           if (_c8fID::P64 < 2) goto c8fIA; else goto c8fIB;
       c8fIA: // global
           I64[Sp + 8] = block_c8fIJ_info;
           R1 = _s8elj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fKy; else goto c8fIL;
       u8fKy: // global
           call _c8fIJ(R1) args: 0, res: 0, upd: 0;
       c8fIL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fIB: // global
           I64[Sp + 8] = block_c8fIY_info;
           R1 = _s8elj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fKz; else goto c8fJ0;
       u8fKz: // global
           call _c8fIY(R1) args: 0, res: 0, upd: 0;
       c8fJ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fIC: // global
           I64[Sp] = block_c8fJd_info;
           _s8eln::P64 = P64[R1 + 5];
           R1 = _s8elj::P64;
           P64[Sp + 8] = _s8eln::P64;
           if (R1 & 7 != 0) goto u8fKA; else goto c8fJf;
       u8fKA: // global
           call _c8fJd(R1) args: 0, res: 0, upd: 0;
       c8fJf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fIw_info" {
     block_c8fIw_info:
         const _c8fIw;
         const 1;
         const 30;
 },
 _c8fIJ() //  [R1]
         { []
         }
     {offset
       c8fIJ: // global
           if (R1 & 7 == 1) goto u8fKo; else goto u8fKp;
       u8fKo: // global
           Sp = Sp + 8;
           call _c8fKg() args: 0, res: 0, upd: 0;
       u8fKp: // global
           Sp = Sp + 8;
           call _c8fKf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fIJ_info" {
     block_c8fIJ_info:
         const _c8fIJ;
         const 0;
         const 30;
 },
 _c8fIY() //  [R1]
         { []
         }
     {offset
       c8fIY: // global
           if (R1 & 7 == 2) goto u8fKq; else goto u8fKr;
       u8fKq: // global
           Sp = Sp + 8;
           call _c8fKg() args: 0, res: 0, upd: 0;
       u8fKr: // global
           Sp = Sp + 8;
           call _c8fKf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fIY_info" {
     block_c8fIY_info:
         const _c8fIY;
         const 0;
         const 30;
 },
 _c8fJd() //  [R1]
         { []
         }
     {offset
       c8fJd: // global
           if (R1 & 7 == 3) goto c8fJq; else goto u8fKs;
       c8fJq: // global
           I64[Sp] = block_c8fJo_info;
           _s8elp::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8elp::P64;
           if (R1 & 7 != 0) goto u8fKG; else goto c8fJr;
       u8fKG: // global
           call _c8fJo(R1) args: 0, res: 0, upd: 0;
       c8fJr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fKs: // global
           Sp = Sp + 16;
           call _c8fKf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fJd_info" {
     block_c8fJd_info:
         const _c8fJd;
         const 1;
         const 30;
 },
 _c8fJo() //  [R1]
         { []
         }
     {offset
       c8fJo: // global
           _s8elp::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fJy; else goto c8fJO;
       c8fJy: // global
           I64[Sp + 8] = block_c8fJv_info;
           R1 = _s8elp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fKI; else goto c8fJz;
       u8fKI: // global
           call _c8fJv(R1) args: 0, res: 0, upd: 0;
       c8fJz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fJO: // global
           I64[Sp] = block_c8fJM_info;
           _s8elt::P64 = P64[R1 + 6];
           R1 = _s8elp::P64;
           P64[Sp + 8] = _s8elt::P64;
           if (R1 & 7 != 0) goto u8fKJ; else goto c8fJP;
       u8fKJ: // global
           call _c8fJM(R1) args: 0, res: 0, upd: 0;
       c8fJP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fJo_info" {
     block_c8fJo_info:
         const _c8fJo;
         const 1;
         const 30;
 },
 _c8fJv() //  [R1]
         { []
         }
     {offset
       c8fJv: // global
           if (R1 & 7 == 1) goto u8fKw; else goto u8fKx;
       u8fKw: // global
           Sp = Sp + 8;
           call _c8fKg() args: 0, res: 0, upd: 0;
       u8fKx: // global
           Sp = Sp + 8;
           call _c8fKf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fJv_info" {
     block_c8fJv_info:
         const _c8fJv;
         const 0;
         const 30;
 },
 _c8fJM() //  [R1]
         { []
         }
     {offset
       c8fJM: // global
           if (R1 & 7 == 1) goto u8fKt; else goto c8fK5;
       u8fKt: // global
           Sp = Sp + 16;
           call _c8fKf() args: 0, res: 0, upd: 0;
       c8fK5: // global
           I64[Sp] = block_c8fJY_info;
           _s8elv::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8elv::P64;
           if (R1 & 7 != 0) goto u8fKM; else goto c8fJZ;
       u8fKM: // global
           call _c8fJY(R1) args: 0, res: 0, upd: 0;
       c8fJZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fJM_info" {
     block_c8fJM_info:
         const _c8fJM;
         const 1;
         const 30;
 },
 _c8fJY() //  [R1]
         { []
         }
     {offset
       c8fJY: // global
           I64[Sp] = block_c8fK3_info;
           _s8elx::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8elx::I64;
           if (R1 & 7 != 0) goto u8fKO; else goto c8fK7;
       u8fKO: // global
           call _c8fK3(R1) args: 0, res: 0, upd: 0;
       c8fK7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fJY_info" {
     block_c8fJY_info:
         const _c8fJY;
         const 1;
         const 30;
 },
 _c8fK3() //  [R1]
         { []
         }
     {offset
       c8fK3: // global
           if (I64[Sp + 8] == I64[R1 + 7]) goto u8fKu; else goto u8fKv;
       u8fKu: // global
           Sp = Sp + 16;
           call _c8fKg() args: 0, res: 0, upd: 0;
       u8fKv: // global
           Sp = Sp + 16;
           call _c8fKf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fK3_info" {
     block_c8fK3_info:
         const _c8fK3;
         const 65;
         const 30;
 },
 _c8fKg() //  []
         { []
         }
     {offset
       c8fKg: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fKf() //  []
         { []
         }
     {offset
       c8fKf: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.895710375 UTC

[section ""data" . GHC.IO.Handle.Types.$fEqBufferMode_closure" {
     GHC.IO.Handle.Types.$fEqBufferMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.Types.$fEqBufferMode_$c==_closure+2;
         const GHC.IO.Handle.Types.$fEqBufferMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.901573991 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fMe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fMf; else goto c8fMg;
       c8fMf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fMg: // global
           I64[Sp - 16] = block_c8fM6_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fOb; else goto c8fM7;
       u8fOb: // global
           call _c8fM6(R1) args: 0, res: 0, upd: 0;
       c8fM7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fM6() //  [R1]
         { []
         }
     {offset
       c8fM6: // global
           _s8elB::P64 = P64[Sp + 8];
           _c8fMd::P64 = R1 & 7;
           if (_c8fMd::P64 < 3) goto u8fNX; else goto c8fMc;
       u8fNX: // global
           if (_c8fMd::P64 < 2) goto c8fMa; else goto c8fMb;
       c8fMa: // global
           I64[Sp + 8] = block_c8fMj_info;
           R1 = _s8elB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fO8; else goto c8fMl;
       u8fO8: // global
           call _c8fMj(R1) args: 0, res: 0, upd: 0;
       c8fMl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fMb: // global
           I64[Sp + 8] = block_c8fMy_info;
           R1 = _s8elB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fO9; else goto c8fMA;
       u8fO9: // global
           call _c8fMy(R1) args: 0, res: 0, upd: 0;
       c8fMA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fMc: // global
           I64[Sp] = block_c8fMN_info;
           _s8elH::P64 = P64[R1 + 5];
           R1 = _s8elB::P64;
           P64[Sp + 8] = _s8elH::P64;
           if (R1 & 7 != 0) goto u8fOa; else goto c8fMP;
       u8fOa: // global
           call _c8fMN(R1) args: 0, res: 0, upd: 0;
       c8fMP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fM6_info" {
     block_c8fM6_info:
         const _c8fM6;
         const 1;
         const 30;
 },
 _c8fMj() //  [R1]
         { []
         }
     {offset
       c8fMj: // global
           if (R1 & 7 == 1) goto u8fNY; else goto u8fNZ;
       u8fNY: // global
           Sp = Sp + 8;
           call _c8fNP() args: 0, res: 0, upd: 0;
       u8fNZ: // global
           Sp = Sp + 8;
           call _c8fNQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fMj_info" {
     block_c8fMj_info:
         const _c8fMj;
         const 0;
         const 30;
 },
 _c8fMy() //  [R1]
         { []
         }
     {offset
       c8fMy: // global
           if (R1 & 7 == 3) goto u8fO0; else goto u8fO1;
       u8fO0: // global
           Sp = Sp + 8;
           call _c8fNQ() args: 0, res: 0, upd: 0;
       u8fO1: // global
           Sp = Sp + 8;
           call _c8fNP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fMy_info" {
     block_c8fMy_info:
         const _c8fMy;
         const 0;
         const 30;
 },
 _c8fMN() //  [R1]
         { []
         }
     {offset
       c8fMN: // global
           if (R1 & 7 == 3) goto c8fN0; else goto u8fO2;
       c8fN0: // global
           I64[Sp] = block_c8fMY_info;
           _s8elJ::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8elJ::P64;
           if (R1 & 7 != 0) goto u8fOg; else goto c8fN1;
       u8fOg: // global
           call _c8fMY(R1) args: 0, res: 0, upd: 0;
       c8fN1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fO2: // global
           Sp = Sp + 16;
           call _c8fNP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fMN_info" {
     block_c8fMN_info:
         const _c8fMN;
         const 1;
         const 30;
 },
 _c8fMY() //  [R1]
         { []
         }
     {offset
       c8fMY: // global
           _s8elJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fN8; else goto c8fNo;
       c8fN8: // global
           I64[Sp + 8] = block_c8fN5_info;
           R1 = _s8elJ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fOi; else goto c8fN9;
       u8fOi: // global
           call _c8fN5(R1) args: 0, res: 0, upd: 0;
       c8fN9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fNo: // global
           I64[Sp] = block_c8fNm_info;
           _s8elN::P64 = P64[R1 + 6];
           R1 = _s8elJ::P64;
           P64[Sp + 8] = _s8elN::P64;
           if (R1 & 7 != 0) goto u8fOj; else goto c8fNp;
       u8fOj: // global
           call _c8fNm(R1) args: 0, res: 0, upd: 0;
       c8fNp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fMY_info" {
     block_c8fMY_info:
         const _c8fMY;
         const 1;
         const 30;
 },
 _c8fN5() //  [R1]
         { []
         }
     {offset
       c8fN5: // global
           if (R1 & 7 == 1) goto u8fO6; else goto u8fO7;
       u8fO6: // global
           Sp = Sp + 8;
           call _c8fNP() args: 0, res: 0, upd: 0;
       u8fO7: // global
           Sp = Sp + 8;
           call _c8fNQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fN5_info" {
     block_c8fN5_info:
         const _c8fN5;
         const 0;
         const 30;
 },
 _c8fNm() //  [R1]
         { []
         }
     {offset
       c8fNm: // global
           if (R1 & 7 == 1) goto u8fO3; else goto c8fNF;
       u8fO3: // global
           Sp = Sp + 16;
           call _c8fNP() args: 0, res: 0, upd: 0;
       c8fNF: // global
           I64[Sp] = block_c8fNy_info;
           _s8elP::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8elP::P64;
           if (R1 & 7 != 0) goto u8fOm; else goto c8fNz;
       u8fOm: // global
           call _c8fNy(R1) args: 0, res: 0, upd: 0;
       c8fNz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fNm_info" {
     block_c8fNm_info:
         const _c8fNm;
         const 1;
         const 30;
 },
 _c8fNy() //  [R1]
         { []
         }
     {offset
       c8fNy: // global
           I64[Sp] = block_c8fND_info;
           _s8elR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8elR::I64;
           if (R1 & 7 != 0) goto u8fOo; else goto c8fNH;
       u8fOo: // global
           call _c8fND(R1) args: 0, res: 0, upd: 0;
       c8fNH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fNy_info" {
     block_c8fNy_info:
         const _c8fNy;
         const 1;
         const 30;
 },
 _c8fND() //  [R1]
         { []
         }
     {offset
       c8fND: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8fO5; else goto u8fO4;
       u8fO5: // global
           Sp = Sp + 16;
           call _c8fNP() args: 0, res: 0, upd: 0;
       u8fO4: // global
           Sp = Sp + 16;
           call _c8fNQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fND_info" {
     block_c8fND_info:
         const _c8fND;
         const 65;
         const 30;
 },
 _c8fNQ() //  []
         { []
         }
     {offset
       c8fNQ: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fNP() //  []
         { []
         }
     {offset
       c8fNP: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.924985151 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fPN: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8fPO; else goto c8fPP;
       c8fPO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fPP: // global
           I64[Sp - 16] = block_c8fPF_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fRs; else goto c8fPG;
       u8fRs: // global
           call _c8fPF(R1) args: 0, res: 0, upd: 0;
       c8fPG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fPF() //  [R1]
         { []
         }
     {offset
       c8fPF: // global
           _s8elV::P64 = P64[Sp + 8];
           _c8fPM::P64 = R1 & 7;
           if (_c8fPM::P64 < 3) goto u8fRj; else goto c8fPL;
       u8fRj: // global
           if (_c8fPM::P64 < 2) goto c8fPJ; else goto c8fPK;
       c8fPJ: // global
           R1 = _s8elV::P64 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8fPK: // global
           I64[Sp + 8] = block_c8fPV_info;
           R1 = _s8elV::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fRq; else goto c8fPX;
       u8fRq: // global
           call _c8fPV(R1) args: 0, res: 0, upd: 0;
       c8fPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fPL: // global
           I64[Sp - 8] = block_c8fQa_info;
           _s8elX::P64 = R1;
           _s8em0::P64 = P64[R1 + 5];
           R1 = _s8elV::P64;
           P64[Sp] = _s8em0::P64;
           P64[Sp + 8] = _s8elX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fRr; else goto c8fQc;
       u8fRr: // global
           call _c8fQa(R1) args: 0, res: 0, upd: 0;
       c8fQc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fPF_info" {
     block_c8fPF_info:
         const _c8fPF;
         const 1;
         const 30;
 },
 _c8fPV() //  [R1]
         { []
         }
     {offset
       c8fPV: // global
           if (R1 & 7 == 3) goto c8fQ7; else goto c8fQ3;
       c8fQ7: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8fQ3: // global
           R1 = GHC.IO.Handle.Types.LineBuffering_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fPV_info" {
     block_c8fPV_info:
         const _c8fPV;
         const 0;
         const 30;
 },
 _c8fQa() //  [R1]
         { []
         }
     {offset
       c8fQa: // global
           if (R1 & 7 == 3) goto c8fQn; else goto u8fRk;
       c8fQn: // global
           I64[Sp - 8] = block_c8fQl_info;
           _s8em1::P64 = R1;
           _s8em2::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8em2::P64;
           P64[Sp + 8] = _s8em1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fRt; else goto c8fQo;
       u8fRt: // global
           call _c8fQl(R1) args: 0, res: 0, upd: 0;
       c8fQo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fRk: // global
           Sp = Sp + 16;
           call _c8fRc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fQa_info" {
     block_c8fQa_info:
         const _c8fQa;
         const 2;
         const 30;
 },
 _c8fQl() //  [R1]
         { []
         }
     {offset
       c8fQl: // global
           _s8em2::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fQv; else goto c8fQL;
       c8fQv: // global
           I64[Sp + 8] = block_c8fQs_info;
           R1 = _s8em2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fRv; else goto c8fQw;
       u8fRv: // global
           call _c8fQs(R1) args: 0, res: 0, upd: 0;
       c8fQw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fQL: // global
           I64[Sp] = block_c8fQJ_info;
           _s8em6::P64 = P64[R1 + 6];
           R1 = _s8em2::P64;
           P64[Sp + 8] = _s8em6::P64;
           if (R1 & 7 != 0) goto u8fRw; else goto c8fQM;
       u8fRw: // global
           call _c8fQJ(R1) args: 0, res: 0, upd: 0;
       c8fQM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fQl_info" {
     block_c8fQl_info:
         const _c8fQl;
         const 3;
         const 30;
 },
 _c8fQs() //  [R1]
         { []
         }
     {offset
       c8fQs: // global
           if (R1 & 7 == 1) goto u8fRo; else goto u8fRp;
       u8fRo: // global
           Sp = Sp + 16;
           call _c8fRc() args: 0, res: 0, upd: 0;
       u8fRp: // global
           Sp = Sp + 8;
           call _c8fRd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fQs_info" {
     block_c8fQs_info:
         const _c8fQs;
         const 2;
         const 30;
 },
 _c8fQJ() //  [R1]
         { []
         }
     {offset
       c8fQJ: // global
           if (R1 & 7 == 1) goto u8fRl; else goto c8fR2;
       u8fRl: // global
           Sp = Sp + 24;
           call _c8fRc() args: 0, res: 0, upd: 0;
       c8fR2: // global
           I64[Sp] = block_c8fQV_info;
           _s8em8::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8em8::P64;
           if (R1 & 7 != 0) goto u8fRz; else goto c8fQW;
       u8fRz: // global
           call _c8fQV(R1) args: 0, res: 0, upd: 0;
       c8fQW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fQJ_info" {
     block_c8fQJ_info:
         const _c8fQJ;
         const 3;
         const 30;
 },
 _c8fQV() //  [R1]
         { []
         }
     {offset
       c8fQV: // global
           I64[Sp] = block_c8fR0_info;
           _s8ema::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8ema::I64;
           if (R1 & 7 != 0) goto u8fRB; else goto c8fR4;
       u8fRB: // global
           call _c8fR0(R1) args: 0, res: 0, upd: 0;
       c8fR4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fQV_info" {
     block_c8fQV_info:
         const _c8fQV;
         const 3;
         const 30;
 },
 _c8fR0() //  [R1]
         { []
         }
     {offset
       c8fR0: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8fRn; else goto u8fRm;
       u8fRn: // global
           Sp = Sp + 24;
           call _c8fRc() args: 0, res: 0, upd: 0;
       u8fRm: // global
           Sp = Sp + 16;
           call _c8fRd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fR0_info" {
     block_c8fR0_info:
         const _c8fR0;
         const 67;
         const 30;
 },
 _c8fRd() //  []
         { []
         }
     {offset
       c8fRd: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fRc() //  []
         { []
         }
     {offset
       c8fRc: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.948467778 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fSY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8fSZ; else goto c8fT0;
       c8fSZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fT0: // global
           I64[Sp - 16] = block_c8fSQ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fUV; else goto c8fSR;
       u8fUV: // global
           call _c8fSQ(R1) args: 0, res: 0, upd: 0;
       c8fSR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fSQ() //  [R1]
         { []
         }
     {offset
       c8fSQ: // global
           _s8emf::P64 = P64[Sp + 8];
           _c8fSX::P64 = R1 & 7;
           if (_c8fSX::P64 < 3) goto u8fUH; else goto c8fSW;
       u8fUH: // global
           if (_c8fSX::P64 < 2) goto c8fSU; else goto c8fSV;
       c8fSU: // global
           I64[Sp + 8] = block_c8fT3_info;
           R1 = _s8emf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fUS; else goto c8fT5;
       u8fUS: // global
           call _c8fT3(R1) args: 0, res: 0, upd: 0;
       c8fT5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fSV: // global
           I64[Sp + 8] = block_c8fTi_info;
           R1 = _s8emf::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fUT; else goto c8fTk;
       u8fUT: // global
           call _c8fTi(R1) args: 0, res: 0, upd: 0;
       c8fTk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fSW: // global
           I64[Sp] = block_c8fTx_info;
           _s8emk::P64 = P64[R1 + 5];
           R1 = _s8emf::P64;
           P64[Sp + 8] = _s8emk::P64;
           if (R1 & 7 != 0) goto u8fUU; else goto c8fTz;
       u8fUU: // global
           call _c8fTx(R1) args: 0, res: 0, upd: 0;
       c8fTz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fSQ_info" {
     block_c8fSQ_info:
         const _c8fSQ;
         const 1;
         const 30;
 },
 _c8fT3() //  [R1]
         { []
         }
     {offset
       c8fT3: // global
           if (R1 & 7 == 1) goto u8fUI; else goto u8fUJ;
       u8fUI: // global
           Sp = Sp + 8;
           call _c8fUz() args: 0, res: 0, upd: 0;
       u8fUJ: // global
           Sp = Sp + 8;
           call _c8fUA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fT3_info" {
     block_c8fT3_info:
         const _c8fT3;
         const 0;
         const 30;
 },
 _c8fTi() //  [R1]
         { []
         }
     {offset
       c8fTi: // global
           if (R1 & 7 == 3) goto u8fUK; else goto u8fUL;
       u8fUK: // global
           Sp = Sp + 8;
           call _c8fUA() args: 0, res: 0, upd: 0;
       u8fUL: // global
           Sp = Sp + 8;
           call _c8fUz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fTi_info" {
     block_c8fTi_info:
         const _c8fTi;
         const 0;
         const 30;
 },
 _c8fTx() //  [R1]
         { []
         }
     {offset
       c8fTx: // global
           if (R1 & 7 == 3) goto c8fTK; else goto u8fUM;
       c8fTK: // global
           I64[Sp] = block_c8fTI_info;
           _s8emm::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8emm::P64;
           if (R1 & 7 != 0) goto u8fV0; else goto c8fTL;
       u8fV0: // global
           call _c8fTI(R1) args: 0, res: 0, upd: 0;
       c8fTL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fUM: // global
           Sp = Sp + 16;
           call _c8fUz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fTx_info" {
     block_c8fTx_info:
         const _c8fTx;
         const 1;
         const 30;
 },
 _c8fTI() //  [R1]
         { []
         }
     {offset
       c8fTI: // global
           _s8emm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fTS; else goto c8fU8;
       c8fTS: // global
           I64[Sp + 8] = block_c8fTP_info;
           R1 = _s8emm::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fV2; else goto c8fTT;
       u8fV2: // global
           call _c8fTP(R1) args: 0, res: 0, upd: 0;
       c8fTT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fU8: // global
           I64[Sp] = block_c8fU6_info;
           _s8emq::P64 = P64[R1 + 6];
           R1 = _s8emm::P64;
           P64[Sp + 8] = _s8emq::P64;
           if (R1 & 7 != 0) goto u8fV3; else goto c8fU9;
       u8fV3: // global
           call _c8fU6(R1) args: 0, res: 0, upd: 0;
       c8fU9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fTI_info" {
     block_c8fTI_info:
         const _c8fTI;
         const 1;
         const 30;
 },
 _c8fTP() //  [R1]
         { []
         }
     {offset
       c8fTP: // global
           if (R1 & 7 == 1) goto u8fUQ; else goto u8fUR;
       u8fUQ: // global
           Sp = Sp + 8;
           call _c8fUz() args: 0, res: 0, upd: 0;
       u8fUR: // global
           Sp = Sp + 8;
           call _c8fUA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fTP_info" {
     block_c8fTP_info:
         const _c8fTP;
         const 0;
         const 30;
 },
 _c8fU6() //  [R1]
         { []
         }
     {offset
       c8fU6: // global
           if (R1 & 7 == 1) goto u8fUN; else goto c8fUp;
       u8fUN: // global
           Sp = Sp + 16;
           call _c8fUz() args: 0, res: 0, upd: 0;
       c8fUp: // global
           I64[Sp] = block_c8fUi_info;
           _s8ems::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8ems::P64;
           if (R1 & 7 != 0) goto u8fV6; else goto c8fUj;
       u8fV6: // global
           call _c8fUi(R1) args: 0, res: 0, upd: 0;
       c8fUj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fU6_info" {
     block_c8fU6_info:
         const _c8fU6;
         const 1;
         const 30;
 },
 _c8fUi() //  [R1]
         { []
         }
     {offset
       c8fUi: // global
           I64[Sp] = block_c8fUn_info;
           _s8emu::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8emu::I64;
           if (R1 & 7 != 0) goto u8fV8; else goto c8fUr;
       u8fV8: // global
           call _c8fUn(R1) args: 0, res: 0, upd: 0;
       c8fUr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fUi_info" {
     block_c8fUi_info:
         const _c8fUi;
         const 1;
         const 30;
 },
 _c8fUn() //  [R1]
         { []
         }
     {offset
       c8fUn: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8fUP; else goto u8fUO;
       u8fUP: // global
           Sp = Sp + 16;
           call _c8fUz() args: 0, res: 0, upd: 0;
       u8fUO: // global
           Sp = Sp + 16;
           call _c8fUA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fUn_info" {
     block_c8fUn_info:
         const _c8fUn;
         const 65;
         const 30;
 },
 _c8fUA() //  []
         { []
         }
     {offset
       c8fUA: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fUz() //  []
         { []
         }
     {offset
       c8fUz: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.968869103 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fWp: // global
           _s8emz::P64 = R3;
           R3 = R2;
           R2 = _s8emz::P64;
           call GHC.IO.Handle.Types.$fOrdBufferMode_$c<_entry(R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$c>_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$c>_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.97654981 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_info;
 },
 GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c8fWI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c8fWJ; else goto c8fWK;
       c8fWJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8fWK: // global
           I64[Sp - 16] = block_c8fWA_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8fYu; else goto c8fWB;
       u8fYu: // global
           call _c8fWA(R1) args: 0, res: 0, upd: 0;
       c8fWB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_info" {
     GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_info:
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8fWA() //  [R1]
         { []
         }
     {offset
       c8fWA: // global
           _s8emA::P64 = P64[Sp + 8];
           _c8fWH::P64 = R1 & 7;
           if (_c8fWH::P64 < 3) goto u8fYk; else goto c8fWG;
       u8fYk: // global
           if (_c8fWH::P64 < 2) goto c8fWE; else goto c8fWF;
       c8fWE: // global
           I64[Sp + 8] = block_c8fWN_info;
           R1 = _s8emA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fYr; else goto c8fWP;
       u8fYr: // global
           call _c8fWN() args: 0, res: 0, upd: 0;
       c8fWP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fWF: // global
           I64[Sp + 8] = block_c8fWW_info;
           R1 = _s8emA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fYs; else goto c8fWY;
       u8fYs: // global
           call _c8fWW(R1) args: 0, res: 0, upd: 0;
       c8fWY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fWG: // global
           I64[Sp - 8] = block_c8fXb_info;
           _s8emC::P64 = R1;
           _s8emG::P64 = P64[R1 + 5];
           R1 = _s8emA::P64;
           P64[Sp] = _s8emG::P64;
           P64[Sp + 8] = _s8emC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fYt; else goto c8fXd;
       u8fYt: // global
           call _c8fXb(R1) args: 0, res: 0, upd: 0;
       c8fXd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fWA_info" {
     block_c8fWA_info:
         const _c8fWA;
         const 1;
         const 30;
 },
 _c8fWN() //  []
         { []
         }
     {offset
       c8fWN: // global
           R1 = GHC.IO.Handle.Types.NoBuffering_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fWN_info" {
     block_c8fWN_info:
         const _c8fWN;
         const 0;
         const 30;
 },
 _c8fWW() //  [R1]
         { []
         }
     {offset
       c8fWW: // global
           if (R1 & 7 == 3) goto c8fX8; else goto c8fX4;
       c8fX8: // global
           R1 = GHC.IO.Handle.Types.LineBuffering_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8fX4: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fWW_info" {
     block_c8fWW_info:
         const _c8fWW;
         const 0;
         const 30;
 },
 _c8fXb() //  [R1]
         { []
         }
     {offset
       c8fXb: // global
           if (R1 & 7 == 3) goto c8fXo; else goto u8fYl;
       c8fXo: // global
           I64[Sp - 8] = block_c8fXm_info;
           _s8emH::P64 = R1;
           _s8emI::P64 = P64[R1 + 5];
           R1 = P64[Sp + 8];
           P64[Sp] = _s8emI::P64;
           P64[Sp + 8] = _s8emH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8fYv; else goto c8fXp;
       u8fYv: // global
           call _c8fXm(R1) args: 0, res: 0, upd: 0;
       c8fXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u8fYl: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 16;
           call _c8fYd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fXb_info" {
     block_c8fXb_info:
         const _c8fXb;
         const 2;
         const 30;
 },
 _c8fXm() //  [R1]
         { []
         }
     {offset
       c8fXm: // global
           _s8emI::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8fXw; else goto c8fXM;
       c8fXw: // global
           I64[Sp + 8] = block_c8fXt_info;
           R1 = _s8emI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8fYx; else goto c8fXx;
       u8fYx: // global
           call _c8fXt(R1) args: 0, res: 0, upd: 0;
       c8fXx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8fXM: // global
           I64[Sp] = block_c8fXK_info;
           _s8emM::P64 = P64[R1 + 6];
           R1 = _s8emI::P64;
           P64[Sp + 8] = _s8emM::P64;
           if (R1 & 7 != 0) goto u8fYy; else goto c8fXN;
       u8fYy: // global
           call _c8fXK(R1) args: 0, res: 0, upd: 0;
       c8fXN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fXm_info" {
     block_c8fXm_info:
         const _c8fXm;
         const 3;
         const 30;
 },
 _c8fXt() //  [R1]
         { []
         }
     {offset
       c8fXt: // global
           if (R1 & 7 == 1) goto u8fYp; else goto u8fYq;
       u8fYp: // global
           P64[Sp + 16] = P64[Sp + 8];
           Sp = Sp + 16;
           call _c8fYd() args: 0, res: 0, upd: 0;
       u8fYq: // global
           Sp = Sp + 16;
           call _c8fYe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fXt_info" {
     block_c8fXt_info:
         const _c8fXt;
         const 2;
         const 30;
 },
 _c8fXK() //  [R1]
         { []
         }
     {offset
       c8fXK: // global
           if (R1 & 7 == 1) goto u8fYm; else goto c8fY3;
       u8fYm: // global
           P64[Sp + 24] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c8fYd() args: 0, res: 0, upd: 0;
       c8fY3: // global
           I64[Sp] = block_c8fXW_info;
           _s8emO::P64 = P64[R1 + 6];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _s8emO::P64;
           if (R1 & 7 != 0) goto u8fYB; else goto c8fXX;
       u8fYB: // global
           call _c8fXW(R1) args: 0, res: 0, upd: 0;
       c8fXX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fXK_info" {
     block_c8fXK_info:
         const _c8fXK;
         const 3;
         const 30;
 },
 _c8fXW() //  [R1]
         { []
         }
     {offset
       c8fXW: // global
           I64[Sp] = block_c8fY1_info;
           _s8emQ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s8emQ::I64;
           if (R1 & 7 != 0) goto u8fYD; else goto c8fY5;
       u8fYD: // global
           call _c8fY1(R1) args: 0, res: 0, upd: 0;
       c8fY5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8fXW_info" {
     block_c8fXW_info:
         const _c8fXW;
         const 3;
         const 30;
 },
 _c8fY1() //  [R1]
         { []
         }
     {offset
       c8fY1: // global
           if (%MO_S_Ge_W64(I64[Sp + 8],
                            I64[R1 + 7])) goto u8fYo; else goto u8fYn;
       u8fYo: // global
           P64[Sp + 24] = P64[Sp + 16];
           Sp = Sp + 24;
           call _c8fYd() args: 0, res: 0, upd: 0;
       u8fYn: // global
           Sp = Sp + 24;
           call _c8fYe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c8fY1_info" {
     block_c8fY1_info:
         const _c8fY1;
         const 67;
         const 30;
 },
 _c8fYe() //  []
         { []
         }
     {offset
       c8fYe: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c8fYd() //  []
         { []
         }
     {offset
       c8fYd: // global
           R1 = P64[Sp] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.99698014 UTC

[section ""data" . GHC.IO.Handle.Types.$fOrdBufferMode_closure" {
     GHC.IO.Handle.Types.$fOrdBufferMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Handle.Types.$fEqBufferMode_closure+1;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$ccompare_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c<=_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$c>=_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmax_closure+2;
         const GHC.IO.Handle.Types.$fOrdBufferMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:22.999585517 UTC

[section ""data" . GHC.IO.Handle.Types.haOtherSide_closure" {
     GHC.IO.Handle.Types.haOtherSide_closure:
         const GHC.IO.Handle.Types.haOtherSide_info;
 },
 GHC.IO.Handle.Types.haOtherSide_entry() //  [R2]
         { []
         }
     {offset
       c8g03: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g04; else goto c8g05;
       c8g04: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haOtherSide_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g05: // global
           I64[Sp - 8] = block_c8g00_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g09; else goto c8g01;
       u8g09: // global
           call _c8g00(R1) args: 0, res: 0, upd: 0;
       c8g01: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haOtherSide_info" {
     GHC.IO.Handle.Types.haOtherSide_info:
         const GHC.IO.Handle.Types.haOtherSide_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g00() //  [R1]
         { []
         }
     {offset
       c8g00: // global
           R1 = P64[R1 + 127] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g00_info" {
     block_c8g00_info:
         const _c8g00;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.005342284 UTC

[section ""data" . GHC.IO.Handle.Types.haOutputNL_closure" {
     GHC.IO.Handle.Types.haOutputNL_closure:
         const GHC.IO.Handle.Types.haOutputNL_info;
 },
 GHC.IO.Handle.Types.haOutputNL_entry() //  [R2]
         { []
         }
     {offset
       c8g0t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g0u; else goto c8g0v;
       c8g0u: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haOutputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g0v: // global
           I64[Sp - 8] = block_c8g0q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g0z; else goto c8g0r;
       u8g0z: // global
           call _c8g0q(R1) args: 0, res: 0, upd: 0;
       c8g0r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haOutputNL_info" {
     GHC.IO.Handle.Types.haOutputNL_info:
         const GHC.IO.Handle.Types.haOutputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g0q() //  [R1]
         { []
         }
     {offset
       c8g0q: // global
           R1 = P64[R1 + 119] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g0q_info" {
     block_c8g0q_info:
         const _c8g0q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.010711516 UTC

[section ""data" . GHC.IO.Handle.Types.haInputNL_closure" {
     GHC.IO.Handle.Types.haInputNL_closure:
         const GHC.IO.Handle.Types.haInputNL_info;
 },
 GHC.IO.Handle.Types.haInputNL_entry() //  [R2]
         { []
         }
     {offset
       c8g0T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g0U; else goto c8g0V;
       c8g0U: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haInputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g0V: // global
           I64[Sp - 8] = block_c8g0Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g0Z; else goto c8g0R;
       u8g0Z: // global
           call _c8g0Q(R1) args: 0, res: 0, upd: 0;
       c8g0R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haInputNL_info" {
     GHC.IO.Handle.Types.haInputNL_info:
         const GHC.IO.Handle.Types.haInputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g0Q() //  [R1]
         { []
         }
     {offset
       c8g0Q: // global
           R1 = P64[R1 + 111] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g0Q_info" {
     block_c8g0Q_info:
         const _c8g0Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.016041616 UTC

[section ""data" . GHC.IO.Handle.Types.haCodec_closure" {
     GHC.IO.Handle.Types.haCodec_closure:
         const GHC.IO.Handle.Types.haCodec_info;
 },
 GHC.IO.Handle.Types.haCodec_entry() //  [R2]
         { []
         }
     {offset
       c8g1j: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g1k; else goto c8g1l;
       c8g1k: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haCodec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g1l: // global
           I64[Sp - 8] = block_c8g1g_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g1p; else goto c8g1h;
       u8g1p: // global
           call _c8g1g(R1) args: 0, res: 0, upd: 0;
       c8g1h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haCodec_info" {
     GHC.IO.Handle.Types.haCodec_info:
         const GHC.IO.Handle.Types.haCodec_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g1g() //  [R1]
         { []
         }
     {offset
       c8g1g: // global
           R1 = P64[R1 + 103] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g1g_info" {
     block_c8g1g_info:
         const _c8g1g;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.020687046 UTC

[section ""data" . GHC.IO.Handle.Types.haDecoder_closure" {
     GHC.IO.Handle.Types.haDecoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.024312781 UTC

[section ""data" . GHC.IO.Handle.Types.haEncoder_closure" {
     GHC.IO.Handle.Types.haEncoder_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.027028234 UTC

[section ""data" . GHC.IO.Handle.Types.haBuffers_closure" {
     GHC.IO.Handle.Types.haBuffers_closure:
         const GHC.IO.Handle.Types.haBuffers_info;
 },
 GHC.IO.Handle.Types.haBuffers_entry() //  [R2]
         { []
         }
     {offset
       c8g1L: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g1P; else goto c8g1Q;
       c8g1P: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haBuffers_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g1Q: // global
           I64[Sp - 8] = block_c8g1I_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g1U; else goto c8g1J;
       u8g1U: // global
           call _c8g1I(R1) args: 0, res: 0, upd: 0;
       c8g1J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haBuffers_info" {
     GHC.IO.Handle.Types.haBuffers_info:
         const GHC.IO.Handle.Types.haBuffers_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g1I() //  [R1]
         { []
         }
     {offset
       c8g1I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8g1T; else goto c8g1S;
       c8g1T: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8g1S: // global
           _s8eof::P64 = P64[R1 + 79];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s8eof::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g1I_info" {
     block_c8g1I_info:
         const _c8g1I;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.032786582 UTC

[section ""data" . GHC.IO.Handle.Types.haCharBuffer_closure" {
     GHC.IO.Handle.Types.haCharBuffer_closure:
         const GHC.IO.Handle.Types.haCharBuffer_info;
 },
 GHC.IO.Handle.Types.haCharBuffer_entry() //  [R2]
         { []
         }
     {offset
       c8g2e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g2i; else goto c8g2j;
       c8g2i: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haCharBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g2j: // global
           I64[Sp - 8] = block_c8g2b_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g2n; else goto c8g2c;
       u8g2n: // global
           call _c8g2b(R1) args: 0, res: 0, upd: 0;
       c8g2c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haCharBuffer_info" {
     GHC.IO.Handle.Types.haCharBuffer_info:
         const GHC.IO.Handle.Types.haCharBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g2b() //  [R1]
         { []
         }
     {offset
       c8g2b: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8g2m; else goto c8g2l;
       c8g2m: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8g2l: // global
           _s8eow::P64 = P64[R1 + 71];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s8eow::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g2b_info" {
     block_c8g2b_info:
         const _c8g2b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.037705081 UTC

[section ""data" . GHC.IO.Handle.Types.haLastDecode_closure" {
     GHC.IO.Handle.Types.haLastDecode_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.039912392 UTC

[section ""data" . GHC.IO.Handle.Types.haBufferMode_closure" {
     GHC.IO.Handle.Types.haBufferMode_closure:
         const GHC.IO.Handle.Types.haBufferMode_info;
 },
 GHC.IO.Handle.Types.haBufferMode_entry() //  [R2]
         { []
         }
     {offset
       c8g2I: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g2J; else goto c8g2K;
       c8g2J: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haBufferMode_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g2K: // global
           I64[Sp - 8] = block_c8g2F_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g2O; else goto c8g2G;
       u8g2O: // global
           call _c8g2F(R1) args: 0, res: 0, upd: 0;
       c8g2G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haBufferMode_info" {
     GHC.IO.Handle.Types.haBufferMode_info:
         const GHC.IO.Handle.Types.haBufferMode_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g2F() //  [R1]
         { []
         }
     {offset
       c8g2F: // global
           R1 = P64[R1 + 55] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g2F_info" {
     block_c8g2F_info:
         const _c8g2F;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.045732214 UTC

[section ""data" . GHC.IO.Handle.Types.haByteBuffer_closure" {
     GHC.IO.Handle.Types.haByteBuffer_closure:
         const GHC.IO.Handle.Types.haByteBuffer_info;
 },
 GHC.IO.Handle.Types.haByteBuffer_entry() //  [R2]
         { []
         }
     {offset
       c8g38: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g3c; else goto c8g3d;
       c8g3c: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haByteBuffer_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g3d: // global
           I64[Sp - 8] = block_c8g35_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g3h; else goto c8g36;
       u8g3h: // global
           call _c8g35(R1) args: 0, res: 0, upd: 0;
       c8g36: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haByteBuffer_info" {
     GHC.IO.Handle.Types.haByteBuffer_info:
         const GHC.IO.Handle.Types.haByteBuffer_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g35() //  [R1]
         { []
         }
     {offset
       c8g35: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8g3g; else goto c8g3f;
       c8g3g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8g3f: // global
           _s8ep3::P64 = P64[R1 + 47];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s8ep3::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g35_info" {
     block_c8g35_info:
         const _c8g35;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.051372107 UTC

[section ""data" . GHC.IO.Handle.Types.haType_closure" {
     GHC.IO.Handle.Types.haType_closure:
         const GHC.IO.Handle.Types.haType_info;
 },
 GHC.IO.Handle.Types.haType_entry() //  [R2]
         { []
         }
     {offset
       c8g3B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g3C; else goto c8g3D;
       c8g3C: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.haType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g3D: // global
           I64[Sp - 8] = block_c8g3y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g3H; else goto c8g3z;
       u8g3H: // global
           call _c8g3y(R1) args: 0, res: 0, upd: 0;
       c8g3z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.haType_info" {
     GHC.IO.Handle.Types.haType_info:
         const GHC.IO.Handle.Types.haType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g3y() //  [R1]
         { []
         }
     {offset
       c8g3y: // global
           R1 = P64[R1 + 39] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g3y_info" {
     block_c8g3y_info:
         const _c8g3y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.056626736 UTC

[section ""data" . GHC.IO.Handle.Types.haDevice_closure" {
     GHC.IO.Handle.Types.haDevice_closure:
         const ()_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.058820919 UTC

[section ""data" . GHC.IO.Handle.Types.outputNL_closure" {
     GHC.IO.Handle.Types.outputNL_closure:
         const GHC.IO.Handle.Types.outputNL_info;
 },
 GHC.IO.Handle.Types.outputNL_entry() //  [R2]
         { []
         }
     {offset
       c8g42: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g43; else goto c8g44;
       c8g43: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.outputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g44: // global
           I64[Sp - 8] = block_c8g3Z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g48; else goto c8g40;
       u8g48: // global
           call _c8g3Z(R1) args: 0, res: 0, upd: 0;
       c8g40: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.outputNL_info" {
     GHC.IO.Handle.Types.outputNL_info:
         const GHC.IO.Handle.Types.outputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g3Z() //  [R1]
         { []
         }
     {offset
       c8g3Z: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g3Z_info" {
     block_c8g3Z_info:
         const _c8g3Z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.064284937 UTC

[section ""data" . GHC.IO.Handle.Types.inputNL_closure" {
     GHC.IO.Handle.Types.inputNL_closure:
         const GHC.IO.Handle.Types.inputNL_info;
 },
 GHC.IO.Handle.Types.inputNL_entry() //  [R2]
         { []
         }
     {offset
       c8g4s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g4t; else goto c8g4u;
       c8g4t: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.inputNL_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g4u: // global
           I64[Sp - 8] = block_c8g4p_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g4y; else goto c8g4q;
       u8g4y: // global
           call _c8g4p(R1) args: 0, res: 0, upd: 0;
       c8g4q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.inputNL_info" {
     GHC.IO.Handle.Types.inputNL_info:
         const GHC.IO.Handle.Types.inputNL_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g4p() //  [R1]
         { []
         }
     {offset
       c8g4p: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g4p_info" {
     block_c8g4p_info:
         const _c8g4p;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.069957946 UTC

[section ""data" . GHC.IO.Handle.Types.isReadableHandleType_closure" {
     GHC.IO.Handle.Types.isReadableHandleType_closure:
         const GHC.IO.Handle.Types.isReadableHandleType_info;
 },
 GHC.IO.Handle.Types.isReadableHandleType_entry() //  [R2]
         { []
         }
     {offset
       c8g4X: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g4Y; else goto c8g4Z;
       c8g4Y: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.isReadableHandleType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g4Z: // global
           I64[Sp - 8] = block_c8g4P_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g5a; else goto c8g4Q;
       u8g5a: // global
           call _c8g4P(R1) args: 0, res: 0, upd: 0;
       c8g4Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.isReadableHandleType_info" {
     GHC.IO.Handle.Types.isReadableHandleType_info:
         const GHC.IO.Handle.Types.isReadableHandleType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g4P() //  [R1]
         { []
         }
     {offset
       c8g4P: // global
           _c8g4W::P64 = R1 & 7;
           if (_c8g4W::P64 == 3) goto c8g4V; else goto u8g59;
       u8g59: // global
           if (_c8g4W::P64 == 6) goto c8g4V; else goto c8g4T;
       c8g4V: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8g4T: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g4P_info" {
     block_c8g4P_info:
         const _c8g4P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.075709827 UTC

[section ""data" . GHC.IO.Handle.Types.isWritableHandleType_closure" {
     GHC.IO.Handle.Types.isWritableHandleType_closure:
         const GHC.IO.Handle.Types.isWritableHandleType_info;
 },
 GHC.IO.Handle.Types.isWritableHandleType_entry() //  [R2]
         { []
         }
     {offset
       c8g5D: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g5E; else goto c8g5F;
       c8g5E: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.isWritableHandleType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g5F: // global
           I64[Sp - 8] = block_c8g5u_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g5T; else goto c8g5v;
       u8g5T: // global
           call _c8g5u(R1) args: 0, res: 0, upd: 0;
       c8g5v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.isWritableHandleType_info" {
     GHC.IO.Handle.Types.isWritableHandleType_info:
         const GHC.IO.Handle.Types.isWritableHandleType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g5u() //  [R1]
         { []
         }
     {offset
       c8g5u: // global
           _c8g5C::P64 = R1 & 7;
           if (_c8g5C::P64 < 4) goto c8g5y; else goto u8g5S;
       c8g5y: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u8g5S: // global
           if (_c8g5C::P64 != 5) goto c8g5B; else goto c8g5B;
       c8g5B: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g5u_info" {
     block_c8g5u_info:
         const _c8g5u;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.081180915 UTC

[section ""data" . GHC.IO.Handle.Types.isReadWriteHandleType_closure" {
     GHC.IO.Handle.Types.isReadWriteHandleType_closure:
         const GHC.IO.Handle.Types.isReadWriteHandleType_info;
 },
 GHC.IO.Handle.Types.isReadWriteHandleType_entry() //  [R2]
         { []
         }
     {offset
       c8g6k: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g6l; else goto c8g6m;
       c8g6l: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.isReadWriteHandleType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g6m: // global
           I64[Sp - 8] = block_c8g6d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g6t; else goto c8g6e;
       u8g6t: // global
           call _c8g6d(R1) args: 0, res: 0, upd: 0;
       c8g6e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.isReadWriteHandleType_info" {
     GHC.IO.Handle.Types.isReadWriteHandleType_info:
         const GHC.IO.Handle.Types.isReadWriteHandleType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c8g6d() //  [R1]
         { []
         }
     {offset
       c8g6d: // global
           if (R1 & 7 == 6) goto c8g6i; else goto c8g6h;
       c8g6i: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8g6h: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g6d_info" {
     block_c8g6d_info:
         const _c8g6d;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.085963724 UTC

[section ""data" . GHC.IO.Handle.Types.nativeNewline_closure" {
     GHC.IO.Handle.Types.nativeNewline_closure:
         const GHC.IO.Handle.Types.LF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.087559805 UTC

[section ""data" . GHC.IO.Handle.Types.universalNewlineMode_closure" {
     GHC.IO.Handle.Types.universalNewlineMode_closure:
         const GHC.IO.Handle.Types.NewlineMode_con_info;
         const GHC.IO.Handle.Types.CRLF_closure+2;
         const GHC.IO.Handle.Types.LF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.089233158 UTC

[section ""data" . GHC.IO.Handle.Types.nativeNewlineMode_closure" {
     GHC.IO.Handle.Types.nativeNewlineMode_closure:
         const GHC.IO.Handle.Types.NewlineMode_con_info;
         const GHC.IO.Handle.Types.LF_closure+1;
         const GHC.IO.Handle.Types.LF_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.090930686 UTC

[section ""data" . GHC.IO.Handle.Types.noNewlineTranslation_closure" {
     GHC.IO.Handle.Types.noNewlineTranslation_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Handle.Types.nativeNewlineMode_closure+1;
         const 0;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.092674402 UTC

[section ""cstring" . GHC.IO.Handle.Types.showHandle1_bytes" {
     GHC.IO.Handle.Types.showHandle1_bytes:
         I8[] [123,104,97,110,100,108,101,58,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.095550035 UTC

[section ""data" . GHC.IO.Handle.Types.showHandle_closure" {
     GHC.IO.Handle.Types.showHandle_closure:
         const GHC.IO.Handle.Types.showHandle_info;
 },
 sat_s8epM_entry() //  [R1]
         { []
         }
     {offset
       c8g71: // global
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s8epM_info" {
     sat_s8epM_info:
         const sat_s8epM_entry;
         const 1;
         const 16;
 },
 sat_s8epN_entry() //  [R1]
         { []
         }
     {offset
       c8g74: // global
           _s8epN::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c8g75; else goto c8g76;
       c8g76: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8g78; else goto c8g77;
       c8g78: // global
           HpAlloc = 24;
           goto c8g75;
       c8g75: // global
           R1 = _s8epN::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8g77: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8epN::P64;
           _s8epK::P64 = P64[_s8epN::P64 + 16];
           _s8epL::P64 = P64[_s8epN::P64 + 24];
           I64[Hp - 16] = sat_s8epM_info;
           P64[Hp] = _s8epL::P64;
           R3 = Hp - 16;
           R2 = _s8epK::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8epN_info" {
     sat_s8epN_info:
         const sat_s8epN_entry;
         const 2;
         const 18;
 },
 GHC.IO.Handle.Types.showHandle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8g79: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8g7d; else goto c8g7c;
       c8g7d: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.showHandle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8g7c: // global
           I64[Hp - 24] = sat_s8epN_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.showHandle_info" {
     GHC.IO.Handle.Types.showHandle_info:
         const GHC.IO.Handle.Types.showHandle_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.102792556 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_info;
 },
 GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_entry() //  [R2, R3,
                                                           R4]
         { []
         }
     {offset
       c8g7D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8g7E; else goto c8g7F;
       c8g7E: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8g7F: // global
           I64[Sp - 16] = block_c8g7w_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8g7M; else goto c8g7x;
       u8g7M: // global
           call _c8g7w(R1) args: 0, res: 0, upd: 0;
       c8g7x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_info" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_info:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c8g7w() //  [R1]
         { []
         }
     {offset
       c8g7w: // global
           _s8epQ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8g7A; else goto c8g7B;
       c8g7A: // global
           R3 = _s8epQ::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c8g7B: // global
           R3 = _s8epQ::P64;
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g7w_info" {
     block_c8g7w_info:
         const _c8g7w;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.10953615 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_$cshow_closure" {
     GHC.IO.Handle.Types.$fShowHandle_$cshow_closure:
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_info;
         const 0;
 },
 sat_s8eq1_entry() //  [R1]
         { []
         }
     {offset
       c8g8c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8g8d; else goto c8g8e;
       c8g8d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8g8e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8eq1_info" {
     sat_s8eq1_info:
         const sat_s8eq1_entry;
         const 1;
         const 4294967312;
         const S8evg_srt+520;
 },
 sat_s8eq5_entry() //  [R1]
         { []
         }
     {offset
       c8g8l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8g8m; else goto c8g8n;
       c8g8m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8g8n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8eq5_info" {
     sat_s8eq5_info:
         const sat_s8eq5_entry;
         const 1;
         const 4294967312;
         const S8evg_srt+520;
 },
 GHC.IO.Handle.Types.$fShowHandle_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c8g8s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8g8t; else goto c8g8u;
       c8g8t: // global
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandle_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8g8u: // global
           I64[Sp - 8] = block_c8g83_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8g8B; else goto c8g84;
       u8g8B: // global
           call _c8g83(R1) args: 0, res: 0, upd: 0;
       c8g84: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle_$cshow_info" {
     GHC.IO.Handle.Types.$fShowHandle_$cshow_info:
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S8evg_srt+520;
 },
 _c8g83() //  [R1]
         { []
         }
     {offset
       c8g83: // global
           if (R1 & 7 == 1) goto c8g8p; else goto c8g8q;
       c8g8p: // global
           Hp = Hp + 24;
           _s8epY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8g8A; else goto c8g8w;
       c8g8w: // global
           _s8epZ::P64 = P64[_s8epY::P64 + 7];
           I64[Hp - 16] = sat_s8eq1_info;
           P64[Hp] = _s8epZ::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c8g8q: // global
           Hp = Hp + 24;
           _s8epY::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c8g8A; else goto c8g8z;
       c8g8A: // global
           HpAlloc = 24;
           R1 = _s8epY::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c8g8z: // global
           _s8eq2::P64 = P64[_s8epY::P64 + 6];
           I64[Hp - 16] = sat_s8eq5_info;
           P64[Hp] = _s8eq2::P64;
           R3 = Hp - 16;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g83_info" {
     block_c8g83_info:
         const _c8g83;
         const 0;
         const 4294967326;
         const S8evg_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.118626201 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle1_closure" {
     GHC.IO.Handle.Types.$fShowHandle1_closure:
         const GHC.IO.Handle.Types.$fShowHandle1_info;
 },
 GHC.IO.Handle.Types.$fShowHandle1_entry() //  [R2, R3]
         { []
         }
     {offset
       c8g9b: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8g9c; else goto c8g9d;
       c8g9c: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.$fShowHandle1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8g9d: // global
           I64[Sp - 16] = block_c8g94_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8g9k; else goto c8g95;
       u8g9k: // global
           call _c8g94(R1) args: 0, res: 0, upd: 0;
       c8g95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle1_info" {
     GHC.IO.Handle.Types.$fShowHandle1_info:
         const GHC.IO.Handle.Types.$fShowHandle1_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8g94() //  [R1]
         { []
         }
     {offset
       c8g94: // global
           _s8eq7::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c8g98; else goto c8g99;
       c8g98: // global
           R3 = _s8eq7::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       c8g99: // global
           R3 = _s8eq7::P64;
           R2 = P64[R1 + 6];
           Sp = Sp + 16;
           call GHC.IO.Handle.Types.showHandle_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8g94_info" {
     block_c8g94_info:
         const _c8g94;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.124188081 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_$cshowList_closure" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowList_closure:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowList_info;
 },
 GHC.IO.Handle.Types.$fShowHandle_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c8g9B: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.Types.$fShowHandle1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.$fShowHandle_$cshowList_info" {
     GHC.IO.Handle.Types.$fShowHandle_$cshowList_info:
         const GHC.IO.Handle.Types.$fShowHandle_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.127577565 UTC

[section ""data" . GHC.IO.Handle.Types.$fShowHandle_closure" {
     GHC.IO.Handle.Types.$fShowHandle_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.Types.$fShowHandle_$cshowsPrec_closure+3;
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_closure+1;
         const GHC.IO.Handle.Types.$fShowHandle_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.129292321 UTC

[section ""cstring" . GHC.IO.Handle.Types.$trModule4_bytes" {
     GHC.IO.Handle.Types.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.130920563 UTC

[section ""data" . GHC.IO.Handle.Types.$trModule3_closure" {
     GHC.IO.Handle.Types.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.132585211 UTC

[section ""cstring" . GHC.IO.Handle.Types.$trModule2_bytes" {
     GHC.IO.Handle.Types.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.134457143 UTC

[section ""data" . GHC.IO.Handle.Types.$trModule1_closure" {
     GHC.IO.Handle.Types.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.136133536 UTC

[section ""data" . GHC.IO.Handle.Types.$trModule_closure" {
     GHC.IO.Handle.Types.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.Types.$trModule3_closure+1;
         const GHC.IO.Handle.Types.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.137798951 UTC

[section ""data" . $krep_r8a59_closure" {
     $krep_r8a59_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.139523321 UTC

[section ""data" . $krep1_r8a5a_closure" {
     $krep1_r8a5a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcTextEncoding_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.141429451 UTC

[section ""data" . $krep2_r8a5b_closure" {
     $krep2_r8a5b_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.143036455 UTC

[section ""data" . $krep3_r8a5c_closure" {
     $krep3_r8a5c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.14467159 UTC

[section ""data" . $krep4_r8a5d_closure" {
     $krep4_r8a5d_closure:
         const :_con_info;
         const $krep_r8a59_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.146589534 UTC

[section ""data" . $krep5_r8a5e_closure" {
     $krep5_r8a5e_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep4_r8a5d_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.148256266 UTC

[section ""data" . $krep6_r8a5f_closure" {
     $krep6_r8a5f_closure:
         const :_con_info;
         const $krep1_r8a5a_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.1499265 UTC

[section ""data" . $krep7_r8a5g_closure" {
     $krep7_r8a5g_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8a5f_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.151579684 UTC

[section ""data" . $krep8_r8a5h_closure" {
     $krep8_r8a5h_closure:
         const :_con_info;
         const $krep3_r8a5c_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.153477849 UTC

[section ""data" . $krep9_r8a5i_closure" {
     $krep9_r8a5i_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep8_r8a5h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.155045308 UTC

[section ""data" . $krep10_r8a5j_closure" {
     $krep10_r8a5j_closure:
         const :_con_info;
         const $krep9_r8a5i_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.156673844 UTC

[section ""data" . $krep11_r8a5k_closure" {
     $krep11_r8a5k_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep10_r8a5j_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.15832966 UTC

[section ""data" . $krep12_r8a5l_closure" {
     $krep12_r8a5l_closure:
         const :_con_info;
         const $krep2_r8a5b_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.160147563 UTC

[section ""data" . $krep13_r8a5m_closure" {
     $krep13_r8a5m_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Buffer.$tcBuffer_closure;
         const $krep12_r8a5l_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.161769888 UTC

[section ""data" . $krep14_r8a5n_closure" {
     $krep14_r8a5n_closure:
         const :_con_info;
         const $krep13_r8a5m_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.163401828 UTC

[section ""data" . $krep15_r8a5o_closure" {
     $krep15_r8a5o_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep14_r8a5n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.16505772 UTC

[section ""data" . $krep16_r8a5p_closure" {
     $krep16_r8a5p_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep8_r8a5h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.16683758 UTC

[section ""data" . $krep17_r8a5q_closure" {
     $krep17_r8a5q_closure:
         const GHC.Types.KindRepVar_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.168409691 UTC

[section ""data" . $krep18_r8a5r_closure" {
     $krep18_r8a5r_closure:
         const :_con_info;
         const $krep17_r8a5q_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.170095645 UTC

[section ""data" . $krep19_r8a5s_closure" {
     $krep19_r8a5s_closure:
         const :_con_info;
         const $krep3_r8a5c_closure+1;
         const $krep18_r8a5r_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.171973318 UTC

[section ""data" . $krep20_r8a5t_closure" {
     $krep20_r8a5t_closure:
         const :_con_info;
         const $krep2_r8a5b_closure+1;
         const $krep19_r8a5s_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.174140303 UTC

[section ""data" . $krep21_r8a5u_closure" {
     $krep21_r8a5u_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure;
         const $krep20_r8a5t_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.175945729 UTC

[section ""data" . $krep22_r8a5v_closure" {
     $krep22_r8a5v_closure:
         const :_con_info;
         const $krep21_r8a5u_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.177802699 UTC

[section ""data" . $krep23_r8a5w_closure" {
     $krep23_r8a5w_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep22_r8a5v_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.180045949 UTC

[section ""data" . $krep24_r8a5x_closure" {
     $krep24_r8a5x_closure:
         const :_con_info;
         const $krep17_r8a5q_closure+2;
         const $krep14_r8a5n_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.181852775 UTC

[section ""data" . $krep25_r8a5y_closure" {
     $krep25_r8a5y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep24_r8a5x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.183728898 UTC

[section ""data" . $krep26_r8a5z_closure" {
     $krep26_r8a5z_closure:
         const :_con_info;
         const $krep25_r8a5y_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.188505013 UTC

[section ""data" . $krep27_r8a5A_closure" {
     $krep27_r8a5A_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep26_r8a5z_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.190827627 UTC

[section ""data" . $krep28_r8a5B_closure" {
     $krep28_r8a5B_closure:
         const GHC.Types.KindRepVar_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.192671669 UTC

[section ""data" . $krep29_r8a5C_closure" {
     $krep29_r8a5C_closure:
         const :_con_info;
         const $krep28_r8a5B_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.194612095 UTC

[section ""data" . $krep30_r8a5D_closure" {
     $krep30_r8a5D_closure:
         const :_con_info;
         const $krep2_r8a5b_closure+1;
         const $krep29_r8a5C_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.196856143 UTC

[section ""data" . $krep31_r8a5E_closure" {
     $krep31_r8a5E_closure:
         const :_con_info;
         const $krep3_r8a5c_closure+1;
         const $krep30_r8a5D_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.198738834 UTC

[section ""data" . $krep32_r8a5F_closure" {
     $krep32_r8a5F_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Encoding.Types.$tcBufferCodec_closure;
         const $krep31_r8a5E_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.200586412 UTC

[section ""data" . $krep33_r8a5G_closure" {
     $krep33_r8a5G_closure:
         const :_con_info;
         const $krep32_r8a5F_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.202964069 UTC

[section ""data" . $krep34_r8a5H_closure" {
     $krep34_r8a5H_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep33_r8a5G_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.205224923 UTC

[section ""data" . $krep35_r8a5I_closure" {
     $krep35_r8a5I_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.207110136 UTC

[section ""data" . $krep36_r8a5J_closure" {
     $krep36_r8a5J_closure:
         const :_con_info;
         const $krep35_r8a5I_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.20899467 UTC

[section ""data" . $krep37_r8a5K_closure" {
     $krep37_r8a5K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.ForeignPtr.$tcForeignPtr_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.210870184 UTC

[section ""data" . $krep38_r8a5L_closure" {
     $krep38_r8a5L_closure:
         const :_con_info;
         const GHC.Types.krep$*_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.2129036 UTC

[section ""data" . $krep39_r8a5M_closure" {
     $krep39_r8a5M_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Data.Typeable.Internal.$tcTypeable_closure;
         const $krep38_r8a5L_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.214591307 UTC

[section ""data" . $krep40_r8a5N_closure" {
     $krep40_r8a5N_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.216328642 UTC

[section ""data" . $krep41_r8a5O_closure" {
     $krep41_r8a5O_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.BufferedIO.$tcBufferedIO_closure;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.218637441 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcBufferList2_bytes" {
     GHC.IO.Handle.Types.$tcBufferList2_bytes:
         I8[] [66,117,102,102,101,114,76,105,115,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.22023815 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferList1_closure" {
     GHC.IO.Handle.Types.$tcBufferList1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcBufferList2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.221872069 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferList_closure" {
     GHC.IO.Handle.Types.$tcBufferList_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcBufferList1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 16602278556585116844;
         const 18164509953320487254;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.22362989 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListNil1_closure" {
     GHC.IO.Handle.Types.$tc'BufferListNil1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcBufferList_closure+1;
         const $krep36_r8a5J_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.225537559 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'BufferListNil3_bytes" {
     GHC.IO.Handle.Types.$tc'BufferListNil3_bytes:
         I8[] [39,66,117,102,102,101,114,76,105,115,116,78,105,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.227133694 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListNil2_closure" {
     GHC.IO.Handle.Types.$tc'BufferListNil2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'BufferListNil3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.228784381 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListNil_closure" {
     GHC.IO.Handle.Types.$tc'BufferListNil_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListNil2_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListNil1_closure+1;
         const 1776148480580179033;
         const 13181184993065174936;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.231053464 UTC

[section ""data" . $krep42_r8a5P_closure" {
     $krep42_r8a5P_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'BufferListNil1_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListNil1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.232949401 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListCons1_closure" {
     GHC.IO.Handle.Types.$tc'BufferListCons1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r8a5K_closure+1;
         const $krep42_r8a5P_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.234595459 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'BufferListCons3_bytes" {
     GHC.IO.Handle.Types.$tc'BufferListCons3_bytes:
         I8[] [39,66,117,102,102,101,114,76,105,115,116,67,111,110,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.23618345 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListCons2_closure" {
     GHC.IO.Handle.Types.$tc'BufferListCons2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'BufferListCons3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.238104739 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BufferListCons_closure" {
     GHC.IO.Handle.Types.$tc'BufferListCons_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListCons2_closure+1;
         const GHC.IO.Handle.Types.$tc'BufferListCons1_closure+4;
         const 17252346539814354939;
         const 274626690118510806;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.239860492 UTC

[section ""data" . $krep43_r8a5Q_closure" {
     $krep43_r8a5Q_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcBufferList_closure+1;
         const $krep8_r8a5h_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.241549819 UTC

[section ""data" . $krep44_r8a5R_closure" {
     $krep44_r8a5R_closure:
         const :_con_info;
         const $krep43_r8a5Q_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.243245436 UTC

[section ""data" . $krep45_r8a5S_closure" {
     $krep45_r8a5S_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep44_r8a5R_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.245048808 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcHandleType2_bytes" {
     GHC.IO.Handle.Types.$tcHandleType2_bytes:
         I8[] [72,97,110,100,108,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.247011688 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandleType1_closure" {
     GHC.IO.Handle.Types.$tcHandleType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcHandleType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.248621258 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandleType_closure" {
     GHC.IO.Handle.Types.$tcHandleType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcHandleType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 12652050740177317592;
         const 15012172050125063359;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.25041887 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'AppendHandle1_closure" {
     GHC.IO.Handle.Types.$tc'AppendHandle1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandleType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.252269351 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'ClosedHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'ClosedHandle2_bytes:
         I8[] [39,67,108,111,115,101,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.253906103 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ClosedHandle1_closure" {
     GHC.IO.Handle.Types.$tc'ClosedHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'ClosedHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.255657616 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ClosedHandle_closure" {
     GHC.IO.Handle.Types.$tc'ClosedHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'ClosedHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 3827246897052092772;
         const 908733983357893198;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.258085016 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'SemiClosedHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'SemiClosedHandle2_bytes:
         I8[] [39,83,101,109,105,67,108,111,115,101,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.259682343 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'SemiClosedHandle1_closure" {
     GHC.IO.Handle.Types.$tc'SemiClosedHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'SemiClosedHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.261434476 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'SemiClosedHandle_closure" {
     GHC.IO.Handle.Types.$tc'SemiClosedHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'SemiClosedHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 9212351547956271402;
         const 6570718180183054490;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.263231911 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'ReadHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'ReadHandle2_bytes:
         I8[] [39,82,101,97,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.265080106 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadHandle1_closure" {
     GHC.IO.Handle.Types.$tc'ReadHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'ReadHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.266703764 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadHandle_closure" {
     GHC.IO.Handle.Types.$tc'ReadHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'ReadHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 269968663592081974;
         const 17473723309710900549;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.268375461 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'WriteHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'WriteHandle2_bytes:
         I8[] [39,87,114,105,116,101,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.270614261 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'WriteHandle1_closure" {
     GHC.IO.Handle.Types.$tc'WriteHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'WriteHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.272327839 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'WriteHandle_closure" {
     GHC.IO.Handle.Types.$tc'WriteHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'WriteHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 18024523813608199082;
         const 4783872735135983851;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.274170368 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'AppendHandle3_bytes" {
     GHC.IO.Handle.Types.$tc'AppendHandle3_bytes:
         I8[] [39,65,112,112,101,110,100,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.27586624 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'AppendHandle2_closure" {
     GHC.IO.Handle.Types.$tc'AppendHandle2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'AppendHandle3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.277939711 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'AppendHandle_closure" {
     GHC.IO.Handle.Types.$tc'AppendHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle2_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 18423480119042393547;
         const 8911069045719960050;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.279772779 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'ReadWriteHandle2_bytes" {
     GHC.IO.Handle.Types.$tc'ReadWriteHandle2_bytes:
         I8[] [39,82,101,97,100,87,114,105,116,101,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.281571509 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadWriteHandle1_closure" {
     GHC.IO.Handle.Types.$tc'ReadWriteHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'ReadWriteHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.283716233 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'ReadWriteHandle_closure" {
     GHC.IO.Handle.Types.$tc'ReadWriteHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'ReadWriteHandle1_closure+1;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const 6962298179673541916;
         const 7858738479804269456;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.285973027 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcBufferMode2_bytes" {
     GHC.IO.Handle.Types.$tcBufferMode2_bytes:
         I8[] [66,117,102,102,101,114,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.287623575 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferMode1_closure" {
     GHC.IO.Handle.Types.$tcBufferMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcBufferMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.289561443 UTC

[section ""data" . GHC.IO.Handle.Types.$tcBufferMode_closure" {
     GHC.IO.Handle.Types.$tcBufferMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcBufferMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 2181253694666364469;
         const 18094997560331273583;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.291849981 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LineBuffering1_closure" {
     GHC.IO.Handle.Types.$tc'LineBuffering1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcBufferMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.293655193 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'NoBuffering2_bytes" {
     GHC.IO.Handle.Types.$tc'NoBuffering2_bytes:
         I8[] [39,78,111,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.295470317 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NoBuffering1_closure" {
     GHC.IO.Handle.Types.$tc'NoBuffering1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'NoBuffering2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.297364888 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NoBuffering_closure" {
     GHC.IO.Handle.Types.$tc'NoBuffering_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'NoBuffering1_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const 1829914617507863771;
         const 11519122601481432262;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.299474047 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'LineBuffering3_bytes" {
     GHC.IO.Handle.Types.$tc'LineBuffering3_bytes:
         I8[] [39,76,105,110,101,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.30112864 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LineBuffering2_closure" {
     GHC.IO.Handle.Types.$tc'LineBuffering2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'LineBuffering3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.303484851 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LineBuffering_closure" {
     GHC.IO.Handle.Types.$tc'LineBuffering_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering2_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const 6417231512954421547;
         const 14761155862500981941;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.30572897 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BlockBuffering1_closure" {
     GHC.IO.Handle.Types.$tc'BlockBuffering1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r8a5e_closure+1;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.307449053 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'BlockBuffering3_bytes" {
     GHC.IO.Handle.Types.$tc'BlockBuffering3_bytes:
         I8[] [39,66,108,111,99,107,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.309296854 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BlockBuffering2_closure" {
     GHC.IO.Handle.Types.$tc'BlockBuffering2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'BlockBuffering3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.311135965 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'BlockBuffering_closure" {
     GHC.IO.Handle.Types.$tc'BlockBuffering_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'BlockBuffering2_closure+1;
         const GHC.IO.Handle.Types.$tc'BlockBuffering1_closure+4;
         const 704611490471072872;
         const 15656058643765081689;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.313336967 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcNewline2_bytes" {
     GHC.IO.Handle.Types.$tcNewline2_bytes:
         I8[] [78,101,119,108,105,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.315076734 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewline1_closure" {
     GHC.IO.Handle.Types.$tcNewline1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcNewline2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.316855276 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewline_closure" {
     GHC.IO.Handle.Types.$tcNewline_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcNewline1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4144517894815066994;
         const 10872055347860317487;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.318974051 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'CRLF1_closure" {
     GHC.IO.Handle.Types.$tc'CRLF1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcNewline_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.320715386 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'LF2_bytes" {
     GHC.IO.Handle.Types.$tc'LF2_bytes:
         I8[] [39,76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.322420849 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LF1_closure" {
     GHC.IO.Handle.Types.$tc'LF1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'LF2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.324220072 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'LF_closure" {
     GHC.IO.Handle.Types.$tc'LF_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'LF1_closure+1;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const 8352565500432618804;
         const 14951155965269318914;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.326362353 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'CRLF3_bytes" {
     GHC.IO.Handle.Types.$tc'CRLF3_bytes:
         I8[] [39,67,82,76,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.328035589 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'CRLF2_closure" {
     GHC.IO.Handle.Types.$tc'CRLF2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.329823691 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'CRLF_closure" {
     GHC.IO.Handle.Types.$tc'CRLF_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'CRLF2_closure+1;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const 12041259567283068515;
         const 3210182148185771829;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.331625321 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcHandle__2_bytes" {
     GHC.IO.Handle.Types.$tcHandle__2_bytes:
         I8[] [72,97,110,100,108,101,95,95]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.333614025 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle__1_closure" {
     GHC.IO.Handle.Types.$tcHandle__1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcHandle__2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.33532562 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle___closure" {
     GHC.IO.Handle.Types.$tcHandle___closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcHandle__1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10675922960094776064;
         const 10563785792974977547;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.337133735 UTC

[section ""data" . $krep46_r8a5T_closure" {
     $krep46_r8a5T_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle___closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.338933888 UTC

[section ""data" . $krep47_r8a5U_closure" {
     $krep47_r8a5U_closure:
         const :_con_info;
         const $krep46_r8a5T_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.340923454 UTC

[section ""data" . $krep48_r8a5V_closure" {
     $krep48_r8a5V_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep47_r8a5U_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.342666071 UTC

[section ""data" . $krep49_r8a5W_closure" {
     $krep49_r8a5W_closure:
         const :_con_info;
         const $krep48_r8a5V_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.344433002 UTC

[section ""data" . $krep50_r8a5X_closure" {
     $krep50_r8a5X_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep49_r8a5W_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.346590317 UTC

[section ""data" . $krep51_r8a5Y_closure" {
     $krep51_r8a5Y_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep50_r8a5X_closure+1;
         const $krep46_r8a5T_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.348346837 UTC

[section ""data" . $krep52_r8a5Z_closure" {
     $krep52_r8a5Z_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep51_r8a5Y_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.350127841 UTC

[section ""data" . $krep53_r8a60_closure" {
     $krep53_r8a60_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep52_r8a5Z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.351946714 UTC

[section ""data" . $krep54_r8a61_closure" {
     $krep54_r8a61_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_r8a5g_closure+1;
         const $krep53_r8a60_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.354031927 UTC

[section ""data" . $krep55_r8a62_closure" {
     $krep55_r8a62_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep23_r8a5w_closure+1;
         const $krep54_r8a61_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.355812847 UTC

[section ""data" . $krep56_r8a63_closure" {
     $krep56_r8a63_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r8a5H_closure+1;
         const $krep55_r8a62_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.358186156 UTC

[section ""data" . $krep57_r8a64_closure" {
     $krep57_r8a64_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep45_r8a5S_closure+1;
         const $krep56_r8a63_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.35995487 UTC

[section ""data" . $krep58_r8a65_closure" {
     $krep58_r8a65_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_r8a5k_closure+1;
         const $krep57_r8a64_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.362023778 UTC

[section ""data" . $krep59_r8a66_closure" {
     $krep59_r8a66_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep27_r8a5A_closure+1;
         const $krep58_r8a65_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.363783101 UTC

[section ""data" . $krep60_r8a67_closure" {
     $krep60_r8a67_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'LineBuffering1_closure+1;
         const $krep59_r8a66_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.365620211 UTC

[section ""data" . $krep61_r8a68_closure" {
     $krep61_r8a68_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep15_r8a5o_closure+1;
         const $krep60_r8a67_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.367831706 UTC

[section ""data" . $krep62_r8a69_closure" {
     $krep62_r8a69_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'AppendHandle1_closure+1;
         const $krep61_r8a68_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.371366594 UTC

[section ""data" . $krep63_r8a6a_closure" {
     $krep63_r8a6a_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r8a5I_closure+2;
         const $krep62_r8a69_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.373269548 UTC

[section ""data" . $krep64_r8a6b_closure" {
     $krep64_r8a6b_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep39_r8a5M_closure+1;
         const $krep63_r8a6a_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.375190195 UTC

[section ""data" . $krep65_r8a6c_closure" {
     $krep65_r8a6c_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r8a5O_closure+1;
         const $krep64_r8a6b_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.377345902 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'Handle__1_closure" {
     GHC.IO.Handle.Types.$tc'Handle__1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep40_r8a5N_closure+1;
         const $krep65_r8a6c_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.379103508 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'Handle__3_bytes" {
     GHC.IO.Handle.Types.$tc'Handle__3_bytes:
         I8[] [39,72,97,110,100,108,101,95,95]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.380865116 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'Handle__2_closure" {
     GHC.IO.Handle.Types.$tc'Handle__2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'Handle__3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.382845583 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'Handle___closure" {
     GHC.IO.Handle.Types.$tc'Handle___closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'Handle__2_closure+1;
         const GHC.IO.Handle.Types.$tc'Handle__1_closure+4;
         const 15400920814375205416;
         const 14458810719499819570;
         const 3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.385013071 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tcHandle2_bytes" {
     GHC.IO.Handle.Types.$tcHandle2_bytes:
         I8[] [72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.387116985 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle1_closure" {
     GHC.IO.Handle.Types.$tcHandle1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tcHandle2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.388964826 UTC

[section ""data" . GHC.IO.Handle.Types.$tcHandle_closure" {
     GHC.IO.Handle.Types.$tcHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcHandle1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6808292778723485333;
         const 9239299165073943659;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.391302732 UTC

[section ""data" . $krep66_r8a6d_closure" {
     $krep66_r8a6d_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.393031222 UTC

[section ""data" . $krep67_r8a6e_closure" {
     $krep67_r8a6e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep48_r8a5V_closure+1;
         const $krep66_r8a6d_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.39491444 UTC

[section ""data" . $krep68_r8a6f_closure" {
     $krep68_r8a6f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep48_r8a5V_closure+1;
         const $krep67_r8a6e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.396744478 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'DuplexHandle1_closure" {
     GHC.IO.Handle.Types.$tc'DuplexHandle1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r8a5p_closure+1;
         const $krep68_r8a6f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.399338639 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'DuplexHandle3_bytes" {
     GHC.IO.Handle.Types.$tc'DuplexHandle3_bytes:
         I8[] [39,68,117,112,108,101,120,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.400992945 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'DuplexHandle2_closure" {
     GHC.IO.Handle.Types.$tc'DuplexHandle2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'DuplexHandle3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.402887212 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'DuplexHandle_closure" {
     GHC.IO.Handle.Types.$tc'DuplexHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'DuplexHandle2_closure+1;
         const GHC.IO.Handle.Types.$tc'DuplexHandle1_closure+4;
         const 477065760828861081;
         const 4557316572761143129;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.40509132 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'FileHandle1_closure" {
     GHC.IO.Handle.Types.$tc'FileHandle1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep16_r8a5p_closure+1;
         const $krep67_r8a6e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.406882857 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'FileHandle3_bytes" {
     GHC.IO.Handle.Types.$tc'FileHandle3_bytes:
         I8[] [39,70,105,108,101,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.408689628 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'FileHandle2_closure" {
     GHC.IO.Handle.Types.$tc'FileHandle2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'FileHandle3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.410573389 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'FileHandle_closure" {
     GHC.IO.Handle.Types.$tc'FileHandle_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'FileHandle2_closure+1;
         const GHC.IO.Handle.Types.$tc'FileHandle1_closure+4;
         const 5544613225695748436;
         const 8829945929965735507;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.412705138 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewlineMode1_closure" {
     GHC.IO.Handle.Types.$tcNewlineMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$fReadNewlineMode17_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.41479646 UTC

[section ""data" . GHC.IO.Handle.Types.$tcNewlineMode_closure" {
     GHC.IO.Handle.Types.$tcNewlineMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tcNewlineMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17953040817059389032;
         const 12498949339099960838;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.416635631 UTC

[section ""data" . $krep69_r8a6g_closure" {
     $krep69_r8a6g_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcNewlineMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.418423309 UTC

[section ""data" . $krep70_r8a6h_closure" {
     $krep70_r8a6h_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep69_r8a6g_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.420446021 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NewlineMode1_closure" {
     GHC.IO.Handle.Types.$tc'NewlineMode1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Handle.Types.$tc'CRLF1_closure+1;
         const $krep70_r8a6h_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.422218997 UTC

[section ""cstring" . GHC.IO.Handle.Types.$tc'NewlineMode3_bytes" {
     GHC.IO.Handle.Types.$tc'NewlineMode3_bytes:
         I8[] [39,78,101,119,108,105,110,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.423985969 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NewlineMode2_closure" {
     GHC.IO.Handle.Types.$tc'NewlineMode2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.Types.$tc'NewlineMode3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.426269468 UTC

[section ""data" . GHC.IO.Handle.Types.$tc'NewlineMode_closure" {
     GHC.IO.Handle.Types.$tc'NewlineMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.Types.$trModule_closure+1;
         const GHC.IO.Handle.Types.$tc'NewlineMode2_closure+1;
         const GHC.IO.Handle.Types.$tc'NewlineMode1_closure+4;
         const 4266278501114659446;
         const 17947462423734457010;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.428455337 UTC

[section ""data" . GHC.IO.Handle.Types.checkHandleInvariants1_closure" {
     GHC.IO.Handle.Types.checkHandleInvariants1_closure:
         const GHC.IO.Handle.Types.checkHandleInvariants1_info;
 },
 GHC.IO.Handle.Types.checkHandleInvariants1_entry() //  []
         { []
         }
     {offset
       c8gck: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.checkHandleInvariants1_info" {
     GHC.IO.Handle.Types.checkHandleInvariants1_info:
         const GHC.IO.Handle.Types.checkHandleInvariants1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.432137068 UTC

[section ""data" . GHC.IO.Handle.Types.checkHandleInvariants_closure" {
     GHC.IO.Handle.Types.checkHandleInvariants_closure:
         const GHC.IO.Handle.Types.checkHandleInvariants_info;
 },
 GHC.IO.Handle.Types.checkHandleInvariants_entry() //  [R2]
         { []
         }
     {offset
       c8gcx: // global
           R2 = R2;
           call GHC.IO.Handle.Types.checkHandleInvariants1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.checkHandleInvariants_info" {
     GHC.IO.Handle.Types.checkHandleInvariants_info:
         const GHC.IO.Handle.Types.checkHandleInvariants_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.436096706 UTC

[section ""data" . GHC.IO.Handle.Types.NewlineMode_closure" {
     GHC.IO.Handle.Types.NewlineMode_closure:
         const GHC.IO.Handle.Types.NewlineMode_info;
 },
 GHC.IO.Handle.Types.NewlineMode_entry() //  [R2, R3]
         { []
         }
     {offset
       c8gcJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8gcN; else goto c8gcM;
       c8gcN: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.NewlineMode_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8gcM: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.NewlineMode_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.NewlineMode_info" {
     GHC.IO.Handle.Types.NewlineMode_info:
         const GHC.IO.Handle.Types.NewlineMode_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.440239554 UTC

[section ""data" . GHC.IO.Handle.Types.LF_closure" {
     GHC.IO.Handle.Types.LF_closure:
         const GHC.IO.Handle.Types.LF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.442261943 UTC

[section ""data" . GHC.IO.Handle.Types.CRLF_closure" {
     GHC.IO.Handle.Types.CRLF_closure:
         const GHC.IO.Handle.Types.CRLF_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.443989317 UTC

[section ""data" . GHC.IO.Handle.Types.NoBuffering_closure" {
     GHC.IO.Handle.Types.NoBuffering_closure:
         const GHC.IO.Handle.Types.NoBuffering_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.445700698 UTC

[section ""data" . GHC.IO.Handle.Types.LineBuffering_closure" {
     GHC.IO.Handle.Types.LineBuffering_closure:
         const GHC.IO.Handle.Types.LineBuffering_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.448191425 UTC

[section ""data" . GHC.IO.Handle.Types.BlockBuffering_closure" {
     GHC.IO.Handle.Types.BlockBuffering_closure:
         const GHC.IO.Handle.Types.BlockBuffering_info;
 },
 GHC.IO.Handle.Types.BlockBuffering_entry() //  [R2]
         { []
         }
     {offset
       c8gd3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c8gd7; else goto c8gd6;
       c8gd7: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.BlockBuffering_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8gd6: // global
           I64[Hp - 8] = GHC.IO.Handle.Types.BlockBuffering_con_info;
           P64[Hp] = R2;
           R1 = Hp - 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BlockBuffering_info" {
     GHC.IO.Handle.Types.BlockBuffering_info:
         const GHC.IO.Handle.Types.BlockBuffering_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.451481869 UTC

[section ""data" . GHC.IO.Handle.Types.ClosedHandle_closure" {
     GHC.IO.Handle.Types.ClosedHandle_closure:
         const GHC.IO.Handle.Types.ClosedHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.453204326 UTC

[section ""data" . GHC.IO.Handle.Types.SemiClosedHandle_closure" {
     GHC.IO.Handle.Types.SemiClosedHandle_closure:
         const GHC.IO.Handle.Types.SemiClosedHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.455510799 UTC

[section ""data" . GHC.IO.Handle.Types.ReadHandle_closure" {
     GHC.IO.Handle.Types.ReadHandle_closure:
         const GHC.IO.Handle.Types.ReadHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.457152466 UTC

[section ""data" . GHC.IO.Handle.Types.WriteHandle_closure" {
     GHC.IO.Handle.Types.WriteHandle_closure:
         const GHC.IO.Handle.Types.WriteHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.458858689 UTC

[section ""data" . GHC.IO.Handle.Types.AppendHandle_closure" {
     GHC.IO.Handle.Types.AppendHandle_closure:
         const GHC.IO.Handle.Types.AppendHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.460524274 UTC

[section ""data" . GHC.IO.Handle.Types.ReadWriteHandle_closure" {
     GHC.IO.Handle.Types.ReadWriteHandle_closure:
         const GHC.IO.Handle.Types.ReadWriteHandle_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.462463949 UTC

[section ""data" . GHC.IO.Handle.Types.BufferListNil_closure" {
     GHC.IO.Handle.Types.BufferListNil_closure:
         const GHC.IO.Handle.Types.BufferListNil_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.464795073 UTC

[section ""data" . GHC.IO.Handle.Types.BufferListCons_closure" {
     GHC.IO.Handle.Types.BufferListCons_closure:
         const GHC.IO.Handle.Types.BufferListCons_info;
 },
 GHC.IO.Handle.Types.BufferListCons_entry() //  [R2, R3]
         { []
         }
     {offset
       c8gdq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8gdu; else goto c8gdt;
       c8gdu: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.BufferListCons_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8gdt: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.BufferListCons_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BufferListCons_info" {
     GHC.IO.Handle.Types.BufferListCons_info:
         const GHC.IO.Handle.Types.BufferListCons_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.470441932 UTC

[section ""data" . GHC.IO.Handle.Types.Handle___closure" {
     GHC.IO.Handle.Types.Handle___closure:
         const GHC.IO.Handle.Types.Handle___info;
 },
 GHC.IO.Handle.Types.Handle___slow() //  [R1]
         { []
         }
     {offset
       c8gdC: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Handle.Types.Handle___entry(R6,
                                                   R5,
                                                   R4,
                                                   R3,
                                                   R2,
                                                   R1) args: 96, res: 0, upd: 8;
     }
 },
 GHC.IO.Handle.Types.Handle___entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c8gdH: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto c8gdL; else goto c8gdK;
       c8gdL: // global
           HpAlloc = 136;
           R1 = GHC.IO.Handle.Types.Handle___closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 136, res: 0, upd: 8;
       c8gdK: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = R2;
           P64[Hp - 112] = R3;
           P64[Hp - 104] = R4;
           P64[Hp - 96] = R5;
           P64[Hp - 88] = R6;
           P64[Hp - 80] = P64[Sp];
           P64[Hp - 72] = P64[Sp + 8];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 24];
           P64[Hp - 48] = P64[Sp + 32];
           P64[Hp - 40] = P64[Sp + 40];
           P64[Hp - 32] = P64[Sp + 48];
           P64[Hp - 24] = P64[Sp + 56];
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 72];
           P64[Hp] = P64[Sp + 80];
           R1 = Hp - 127;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.Handle___info" {
     GHC.IO.Handle.Types.Handle___info:
         const GHC.IO.Handle.Types.Handle___entry;
         const 0;
         const 14;
         const 68719476736;
         const 0;
         const 16;
         const GHC.IO.Handle.Types.Handle___slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.475765898 UTC

[section ""data" . GHC.IO.Handle.Types.FileHandle_closure" {
     GHC.IO.Handle.Types.FileHandle_closure:
         const GHC.IO.Handle.Types.FileHandle_info;
 },
 GHC.IO.Handle.Types.FileHandle_entry() //  [R2, R3]
         { []
         }
     {offset
       c8gea: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8gee; else goto c8ged;
       c8gee: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.FileHandle_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8ged: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.FileHandle_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.FileHandle_info" {
     GHC.IO.Handle.Types.FileHandle_info:
         const GHC.IO.Handle.Types.FileHandle_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.479771787 UTC

[section ""data" . GHC.IO.Handle.Types.DuplexHandle_closure" {
     GHC.IO.Handle.Types.DuplexHandle_closure:
         const GHC.IO.Handle.Types.DuplexHandle_info;
 },
 GHC.IO.Handle.Types.DuplexHandle_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c8geq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c8geu; else goto c8get;
       c8geu: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.Types.DuplexHandle_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c8get: // global
           I64[Hp - 24] = GHC.IO.Handle.Types.DuplexHandle_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 22;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.DuplexHandle_info" {
     GHC.IO.Handle.Types.DuplexHandle_info:
         const GHC.IO.Handle.Types.DuplexHandle_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.483349812 UTC

[section ""cstring" . i8geC_str" {
     i8geC_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,78,101,119,108,105,110,101,77,111,100,101]
 },
 GHC.IO.Handle.Types.NewlineMode_con_entry() //  [R1]
         { []
         }
     {offset
       c8geB: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.NewlineMode_con_info" {
     GHC.IO.Handle.Types.NewlineMode_con_info:
         const GHC.IO.Handle.Types.NewlineMode_con_entry;
         const 2;
         const 4;
         const i8geC_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.486634146 UTC

[section ""relreadonly" . GHC.IO.Handle.Types.Newline_closure_tbl" {
     GHC.IO.Handle.Types.Newline_closure_tbl:
         const GHC.IO.Handle.Types.LF_closure+1;
         const GHC.IO.Handle.Types.CRLF_closure+2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.488462997 UTC

[section ""cstring" . i8geK_str" {
     i8geK_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,76,70]
 },
 GHC.IO.Handle.Types.LF_con_entry() //  [R1]
         { []
         }
     {offset
       c8geJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.LF_con_info" {
     GHC.IO.Handle.Types.LF_con_info:
         const GHC.IO.Handle.Types.LF_con_entry;
         const 4294967296;
         const 3;
         const i8geK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.492307156 UTC

[section ""cstring" . i8geR_str" {
     i8geR_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,67,82,76,70]
 },
 GHC.IO.Handle.Types.CRLF_con_entry() //  [R1]
         { []
         }
     {offset
       c8geQ: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.CRLF_con_info" {
     GHC.IO.Handle.Types.CRLF_con_info:
         const GHC.IO.Handle.Types.CRLF_con_entry;
         const 4294967296;
         const 4294967299;
         const i8geR_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.495410169 UTC

[section ""cstring" . i8geY_str" {
     i8geY_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,78,111,66,117,102,102,101,114,105,110,103]
 },
 GHC.IO.Handle.Types.NoBuffering_con_entry() //  [R1]
         { []
         }
     {offset
       c8geX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.NoBuffering_con_info" {
     GHC.IO.Handle.Types.NoBuffering_con_info:
         const GHC.IO.Handle.Types.NoBuffering_con_entry;
         const 4294967296;
         const 3;
         const i8geY_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.499640247 UTC

[section ""cstring" . i8gf5_str" {
     i8gf5_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,76,105,110,101,66,117,102,102,101,114,105,110,103]
 },
 GHC.IO.Handle.Types.LineBuffering_con_entry() //  [R1]
         { []
         }
     {offset
       c8gf4: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.LineBuffering_con_info" {
     GHC.IO.Handle.Types.LineBuffering_con_info:
         const GHC.IO.Handle.Types.LineBuffering_con_entry;
         const 4294967296;
         const 4294967299;
         const i8gf5_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.502887427 UTC

[section ""cstring" . i8gfc_str" {
     i8gfc_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,66,108,111,99,107,66,117,102,102,101,114,105,110,103]
 },
 GHC.IO.Handle.Types.BlockBuffering_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfb: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BlockBuffering_con_info" {
     GHC.IO.Handle.Types.BlockBuffering_con_info:
         const GHC.IO.Handle.Types.BlockBuffering_con_entry;
         const 1;
         const 8589934594;
         const i8gfc_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.506026034 UTC

[section ""relreadonly" . GHC.IO.Handle.Types.HandleType_closure_tbl" {
     GHC.IO.Handle.Types.HandleType_closure_tbl:
         const GHC.IO.Handle.Types.ClosedHandle_closure+1;
         const GHC.IO.Handle.Types.SemiClosedHandle_closure+2;
         const GHC.IO.Handle.Types.ReadHandle_closure+3;
         const GHC.IO.Handle.Types.WriteHandle_closure+4;
         const GHC.IO.Handle.Types.AppendHandle_closure+5;
         const GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.508297252 UTC

[section ""cstring" . i8gfk_str" {
     i8gfk_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,67,108,111,115,101,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.ClosedHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfj: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.ClosedHandle_con_info" {
     GHC.IO.Handle.Types.ClosedHandle_con_info:
         const GHC.IO.Handle.Types.ClosedHandle_con_entry;
         const 4294967296;
         const 3;
         const i8gfk_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.512174023 UTC

[section ""cstring" . i8gfr_str" {
     i8gfr_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,83,101,109,105,67,108,111,115,101,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.SemiClosedHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfq: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.SemiClosedHandle_con_info" {
     GHC.IO.Handle.Types.SemiClosedHandle_con_info:
         const GHC.IO.Handle.Types.SemiClosedHandle_con_entry;
         const 4294967296;
         const 4294967299;
         const i8gfr_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.515755949 UTC

[section ""cstring" . i8gfy_str" {
     i8gfy_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,82,101,97,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.ReadHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfx: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.ReadHandle_con_info" {
     GHC.IO.Handle.Types.ReadHandle_con_info:
         const GHC.IO.Handle.Types.ReadHandle_con_entry;
         const 4294967296;
         const 8589934595;
         const i8gfy_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.519040812 UTC

[section ""cstring" . i8gfF_str" {
     i8gfF_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,87,114,105,116,101,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.WriteHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfE: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.WriteHandle_con_info" {
     GHC.IO.Handle.Types.WriteHandle_con_info:
         const GHC.IO.Handle.Types.WriteHandle_con_entry;
         const 4294967296;
         const 12884901891;
         const i8gfF_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.52327527 UTC

[section ""cstring" . i8gfM_str" {
     i8gfM_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,65,112,112,101,110,100,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.AppendHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfL: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.AppendHandle_con_info" {
     GHC.IO.Handle.Types.AppendHandle_con_info:
         const GHC.IO.Handle.Types.AppendHandle_con_entry;
         const 4294967296;
         const 17179869187;
         const i8gfM_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.526554316 UTC

[section ""cstring" . i8gfT_str" {
     i8gfT_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,82,101,97,100,87,114,105,116,101,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.ReadWriteHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfS: // global
           R1 = R1 + 6;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.ReadWriteHandle_con_info" {
     GHC.IO.Handle.Types.ReadWriteHandle_con_info:
         const GHC.IO.Handle.Types.ReadWriteHandle_con_entry;
         const 4294967296;
         const 21474836483;
         const i8gfT_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.530219443 UTC

[section ""cstring" . i8gg0_str" {
     i8gg0_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,66,117,102,102,101,114,76,105,115,116,78,105,108]
 },
 GHC.IO.Handle.Types.BufferListNil_con_entry() //  [R1]
         { []
         }
     {offset
       c8gfZ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BufferListNil_con_info" {
     GHC.IO.Handle.Types.BufferListNil_con_info:
         const GHC.IO.Handle.Types.BufferListNil_con_entry;
         const 4294967296;
         const 3;
         const i8gg0_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.534043809 UTC

[section ""cstring" . i8gg7_str" {
     i8gg7_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,66,117,102,102,101,114,76,105,115,116,67,111,110,115]
 },
 GHC.IO.Handle.Types.BufferListCons_con_entry() //  [R1]
         { []
         }
     {offset
       c8gg6: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.BufferListCons_con_info" {
     GHC.IO.Handle.Types.BufferListCons_con_info:
         const GHC.IO.Handle.Types.BufferListCons_con_entry;
         const 2;
         const 4294967300;
         const i8gg7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.537920702 UTC

[section ""cstring" . i8gge_str" {
     i8gge_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,72,97,110,100,108,101,95,95]
 },
 GHC.IO.Handle.Types.Handle___con_entry() //  [R1]
         { []
         }
     {offset
       c8ggd: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.Handle___con_info" {
     GHC.IO.Handle.Types.Handle___con_info:
         const GHC.IO.Handle.Types.Handle___con_entry;
         const 16;
         const 1;
         const i8gge_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.541410303 UTC

[section ""cstring" . i8ggl_str" {
     i8ggl_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,70,105,108,101,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.FileHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8ggk: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.FileHandle_con_info" {
     GHC.IO.Handle.Types.FileHandle_con_info:
         const GHC.IO.Handle.Types.FileHandle_con_entry;
         const 2;
         const 4;
         const i8ggl_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.545659426 UTC

[section ""cstring" . i8ggs_str" {
     i8ggs_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,84,121,112,101,115,46,68,117,112,108,101,120,72,97,110,100,108,101]
 },
 GHC.IO.Handle.Types.DuplexHandle_con_entry() //  [R1]
         { []
         }
     {offset
       c8ggr: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.Types.DuplexHandle_con_info" {
     GHC.IO.Handle.Types.DuplexHandle_con_info:
         const GHC.IO.Handle.Types.DuplexHandle_con_entry;
         const 3;
         const 4294967297;
         const i8ggs_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:23.549532406 UTC

[section ""relreadonly" . S8evg_srt" {
     S8evg_srt:
         const GHC.IO.Handle.Types.$w$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowHandleType1_closure;
         const GHC.IO.Handle.Types.$fShowHandleType3_closure;
         const GHC.IO.Handle.Types.$fShowHandleType5_closure;
         const GHC.IO.Handle.Types.$fShowHandleType7_closure;
         const GHC.IO.Handle.Types.$fShowHandleType9_closure;
         const GHC.IO.Handle.Types.$fShowHandleType11_closure;
         const GHC.IO.Handle.Types.$fShowHandleType_$cshow_closure;
         const GHC.IO.Handle.Types.$fReadNewline6_closure;
         const GHC.IO.Handle.Types.$fReadNewline10_closure;
         const GHC.IO.Handle.Types.$fShowNewline_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowNewline_$cshow_closure;
         const GHC.IO.Handle.Types.$fShowNewline1_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.IO.Handle.Types.$w$cshowsPrec1_closure;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowNewlineMode_$cshow_closure;
         const GHC.IO.Handle.Types.$fShowNewlineMode1_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Handle.Types.$fReadNewline_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Handle.Types.$fReadNewline2_closure;
         const GHC.IO.Handle.Types.$fReadNewline_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Handle.Types.$fReadNewline1_closure;
         const GHC.IO.Handle.Types.$fReadNewline_$creadListPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewline12_closure;
         const Text.Read.Lex.$wexpect_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode3_closure;
         const GHC.Read.readField_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode6_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode11_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode8_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode12_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_lexeme_closure;
         const GHC.IO.Handle.Types.$w$creadPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_lexeme1_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode2_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadsPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode1_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode_$creadListPrec_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode18_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode12_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode8_closure;
         const GHC.Show.$fShowMaybe_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode3_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshowsPrec_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode5_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode6_closure;
         const GHC.Show.$fShowMaybe1_closure;
         const GHC.Show.$fShowMaybe4_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode_$cshow_closure;
         const GHC.IO.Handle.Types.$fShowBufferMode1_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_sps_closure;
         const GHC.Read.choose2_closure;
         const GHC.Read.$fReadInt_closure;
         const GHC.Read.$fReadMaybe1_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_lexeme_closure;
         const Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode2_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadsPrec_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode1_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode_$creadListPrec_closure;
         const GHC.IO.Handle.Types.$fReadBufferMode14_closure;
         const GHC.IO.Handle.Types.$fReadNewlineMode4_closure;
         const GHC.IO.Handle.Types.$fShowHandle_$cshow_closure;
 }]

