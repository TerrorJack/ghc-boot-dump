
==================== Raw Cmm ====================
2018-03-16 16:03:09.395127415 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:09.396899146 UTC

[section ""data" . GHC.IO.Device.ready_closure" {
     GHC.IO.Device.ready_closure:
         const GHC.IO.Device.ready_info;
 },
 GHC.IO.Device.ready_entry() //  [R2]
         { []
         }
     {offset
       c84cF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84cG; else goto c84cH;
       c84cG: // global
           R2 = R2;
           R1 = GHC.IO.Device.ready_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84cH: // global
           I64[Sp - 8] = block_c84cC_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84cL; else goto c84cD;
       u84cL: // global
           call _c84cC(R1) args: 0, res: 0, upd: 0;
       c84cD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.ready_info" {
     GHC.IO.Device.ready_info:
         const GHC.IO.Device.ready_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84cC() //  [R1]
         { []
         }
     {offset
       c84cC: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84cC_info" {
     block_c84cC_info:
         const _c84cC;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.402256607 UTC

[section ""data" . GHC.IO.Device.close_closure" {
     GHC.IO.Device.close_closure:
         const GHC.IO.Device.close_info;
 },
 GHC.IO.Device.close_entry() //  [R2]
         { []
         }
     {offset
       c84d2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84d3; else goto c84d4;
       c84d3: // global
           R2 = R2;
           R1 = GHC.IO.Device.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84d4: // global
           I64[Sp - 8] = block_c84cZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84d8; else goto c84d0;
       u84d8: // global
           call _c84cZ(R1) args: 0, res: 0, upd: 0;
       c84d0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.close_info" {
     GHC.IO.Device.close_info:
         const GHC.IO.Device.close_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84cZ() //  [R1]
         { []
         }
     {offset
       c84cZ: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84cZ_info" {
     block_c84cZ_info:
         const _c84cZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.40752022 UTC

[section ""data" . GHC.IO.Device.isTerminal_closure" {
     GHC.IO.Device.isTerminal_closure:
         const GHC.IO.Device.isTerminal_info;
 },
 GHC.IO.Device.isTerminal_entry() //  [R2]
         { []
         }
     {offset
       c84dp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84dq; else goto c84dr;
       c84dq: // global
           R2 = R2;
           R1 = GHC.IO.Device.isTerminal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84dr: // global
           I64[Sp - 8] = block_c84dm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84dv; else goto c84dn;
       u84dv: // global
           call _c84dm(R1) args: 0, res: 0, upd: 0;
       c84dn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.isTerminal_info" {
     GHC.IO.Device.isTerminal_info:
         const GHC.IO.Device.isTerminal_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84dm() //  [R1]
         { []
         }
     {offset
       c84dm: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84dm_info" {
     block_c84dm_info:
         const _c84dm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.413406306 UTC

[section ""data" . GHC.IO.Device.isSeekable_closure" {
     GHC.IO.Device.isSeekable_closure:
         const GHC.IO.Device.isSeekable_info;
 },
 GHC.IO.Device.isSeekable_entry() //  [R2]
         { []
         }
     {offset
       c84dM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84dN; else goto c84dO;
       c84dN: // global
           R2 = R2;
           R1 = GHC.IO.Device.isSeekable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84dO: // global
           I64[Sp - 8] = block_c84dJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84dS; else goto c84dK;
       u84dS: // global
           call _c84dJ(R1) args: 0, res: 0, upd: 0;
       c84dK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.isSeekable_info" {
     GHC.IO.Device.isSeekable_info:
         const GHC.IO.Device.isSeekable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84dJ() //  [R1]
         { []
         }
     {offset
       c84dJ: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84dJ_info" {
     block_c84dJ_info:
         const _c84dJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.4186426 UTC

[section ""data" . GHC.IO.Device.seek_closure" {
     GHC.IO.Device.seek_closure:
         const GHC.IO.Device.seek_info;
 },
 GHC.IO.Device.seek_entry() //  [R2]
         { []
         }
     {offset
       c84e9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84ea; else goto c84eb;
       c84ea: // global
           R2 = R2;
           R1 = GHC.IO.Device.seek_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84eb: // global
           I64[Sp - 8] = block_c84e6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84ef; else goto c84e7;
       u84ef: // global
           call _c84e6(R1) args: 0, res: 0, upd: 0;
       c84e7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.seek_info" {
     GHC.IO.Device.seek_info:
         const GHC.IO.Device.seek_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84e6() //  [R1]
         { []
         }
     {offset
       c84e6: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84e6_info" {
     block_c84e6_info:
         const _c84e6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.424162108 UTC

[section ""data" . GHC.IO.Device.tell_closure" {
     GHC.IO.Device.tell_closure:
         const GHC.IO.Device.tell_info;
 },
 GHC.IO.Device.tell_entry() //  [R2]
         { []
         }
     {offset
       c84ew: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84ex; else goto c84ey;
       c84ex: // global
           R2 = R2;
           R1 = GHC.IO.Device.tell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84ey: // global
           I64[Sp - 8] = block_c84et_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84eC; else goto c84eu;
       u84eC: // global
           call _c84et(R1) args: 0, res: 0, upd: 0;
       c84eu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.tell_info" {
     GHC.IO.Device.tell_info:
         const GHC.IO.Device.tell_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84et() //  [R1]
         { []
         }
     {offset
       c84et: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84et_info" {
     block_c84et_info:
         const _c84et;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.43020654 UTC

[section ""data" . GHC.IO.Device.getSize_closure" {
     GHC.IO.Device.getSize_closure:
         const GHC.IO.Device.getSize_info;
 },
 GHC.IO.Device.getSize_entry() //  [R2]
         { []
         }
     {offset
       c84eT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84eU; else goto c84eV;
       c84eU: // global
           R2 = R2;
           R1 = GHC.IO.Device.getSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84eV: // global
           I64[Sp - 8] = block_c84eQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84eZ; else goto c84eR;
       u84eZ: // global
           call _c84eQ(R1) args: 0, res: 0, upd: 0;
       c84eR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.getSize_info" {
     GHC.IO.Device.getSize_info:
         const GHC.IO.Device.getSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84eQ() //  [R1]
         { []
         }
     {offset
       c84eQ: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84eQ_info" {
     block_c84eQ_info:
         const _c84eQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.435342052 UTC

[section ""data" . GHC.IO.Device.setSize_closure" {
     GHC.IO.Device.setSize_closure:
         const GHC.IO.Device.setSize_info;
 },
 GHC.IO.Device.setSize_entry() //  [R2]
         { []
         }
     {offset
       c84fg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84fh; else goto c84fi;
       c84fh: // global
           R2 = R2;
           R1 = GHC.IO.Device.setSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84fi: // global
           I64[Sp - 8] = block_c84fd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84fm; else goto c84fe;
       u84fm: // global
           call _c84fd(R1) args: 0, res: 0, upd: 0;
       c84fe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.setSize_info" {
     GHC.IO.Device.setSize_info:
         const GHC.IO.Device.setSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84fd() //  [R1]
         { []
         }
     {offset
       c84fd: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84fd_info" {
     block_c84fd_info:
         const _c84fd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.440539342 UTC

[section ""data" . GHC.IO.Device.setEcho_closure" {
     GHC.IO.Device.setEcho_closure:
         const GHC.IO.Device.setEcho_info;
 },
 GHC.IO.Device.setEcho_entry() //  [R2]
         { []
         }
     {offset
       c84fD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84fE; else goto c84fF;
       c84fE: // global
           R2 = R2;
           R1 = GHC.IO.Device.setEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84fF: // global
           I64[Sp - 8] = block_c84fA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84fJ; else goto c84fB;
       u84fJ: // global
           call _c84fA(R1) args: 0, res: 0, upd: 0;
       c84fB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.setEcho_info" {
     GHC.IO.Device.setEcho_info:
         const GHC.IO.Device.setEcho_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84fA() //  [R1]
         { []
         }
     {offset
       c84fA: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84fA_info" {
     block_c84fA_info:
         const _c84fA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.445733488 UTC

[section ""data" . GHC.IO.Device.getEcho_closure" {
     GHC.IO.Device.getEcho_closure:
         const GHC.IO.Device.getEcho_info;
 },
 GHC.IO.Device.getEcho_entry() //  [R2]
         { []
         }
     {offset
       c84g0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84g1; else goto c84g2;
       c84g1: // global
           R2 = R2;
           R1 = GHC.IO.Device.getEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84g2: // global
           I64[Sp - 8] = block_c84fX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84g6; else goto c84fY;
       u84g6: // global
           call _c84fX(R1) args: 0, res: 0, upd: 0;
       c84fY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.getEcho_info" {
     GHC.IO.Device.getEcho_info:
         const GHC.IO.Device.getEcho_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84fX() //  [R1]
         { []
         }
     {offset
       c84fX: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84fX_info" {
     block_c84fX_info:
         const _c84fX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.450865157 UTC

[section ""data" . GHC.IO.Device.setRaw_closure" {
     GHC.IO.Device.setRaw_closure:
         const GHC.IO.Device.setRaw_info;
 },
 GHC.IO.Device.setRaw_entry() //  [R2]
         { []
         }
     {offset
       c84gn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84go; else goto c84gp;
       c84go: // global
           R2 = R2;
           R1 = GHC.IO.Device.setRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84gp: // global
           I64[Sp - 8] = block_c84gk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84gt; else goto c84gl;
       u84gt: // global
           call _c84gk(R1) args: 0, res: 0, upd: 0;
       c84gl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.setRaw_info" {
     GHC.IO.Device.setRaw_info:
         const GHC.IO.Device.setRaw_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84gk() //  [R1]
         { []
         }
     {offset
       c84gk: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84gk_info" {
     block_c84gk_info:
         const _c84gk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.456508603 UTC

[section ""data" . GHC.IO.Device.devType_closure" {
     GHC.IO.Device.devType_closure:
         const GHC.IO.Device.devType_info;
 },
 GHC.IO.Device.devType_entry() //  [R2]
         { []
         }
     {offset
       c84gK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84gL; else goto c84gM;
       c84gL: // global
           R2 = R2;
           R1 = GHC.IO.Device.devType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84gM: // global
           I64[Sp - 8] = block_c84gH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84gQ; else goto c84gI;
       u84gQ: // global
           call _c84gH(R1) args: 0, res: 0, upd: 0;
       c84gI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.devType_info" {
     GHC.IO.Device.devType_info:
         const GHC.IO.Device.devType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84gH() //  [R1]
         { []
         }
     {offset
       c84gH: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84gH_info" {
     block_c84gH_info:
         const _c84gH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.462480667 UTC

[section ""data" . GHC.IO.Device.dup_closure" {
     GHC.IO.Device.dup_closure:
         const GHC.IO.Device.dup_info;
 },
 GHC.IO.Device.dup_entry() //  [R2]
         { []
         }
     {offset
       c84h7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84h8; else goto c84h9;
       c84h8: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84h9: // global
           I64[Sp - 8] = block_c84h4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84hd; else goto c84h5;
       u84hd: // global
           call _c84h4(R1) args: 0, res: 0, upd: 0;
       c84h5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.dup_info" {
     GHC.IO.Device.dup_info:
         const GHC.IO.Device.dup_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84h4() //  [R1]
         { []
         }
     {offset
       c84h4: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84h4_info" {
     block_c84h4_info:
         const _c84h4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.46760196 UTC

[section ""data" . GHC.IO.Device.dup2_closure" {
     GHC.IO.Device.dup2_closure:
         const GHC.IO.Device.dup2_info;
 },
 GHC.IO.Device.dup2_entry() //  [R2]
         { []
         }
     {offset
       c84hu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84hv; else goto c84hw;
       c84hv: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84hw: // global
           I64[Sp - 8] = block_c84hr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84hA; else goto c84hs;
       u84hA: // global
           call _c84hr(R1) args: 0, res: 0, upd: 0;
       c84hs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.dup2_info" {
     GHC.IO.Device.dup2_info:
         const GHC.IO.Device.dup2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84hr() //  [R1]
         { []
         }
     {offset
       c84hr: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84hr_info" {
     block_c84hr_info:
         const _c84hr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.472576809 UTC

[section ""data" . GHC.IO.Device.read_closure" {
     GHC.IO.Device.read_closure:
         const GHC.IO.Device.read_info;
 },
 GHC.IO.Device.read_entry() //  [R2]
         { []
         }
     {offset
       c84hR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84hS; else goto c84hT;
       c84hS: // global
           R2 = R2;
           R1 = GHC.IO.Device.read_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84hT: // global
           I64[Sp - 8] = block_c84hO_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84hX; else goto c84hP;
       u84hX: // global
           call _c84hO(R1) args: 0, res: 0, upd: 0;
       c84hP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.read_info" {
     GHC.IO.Device.read_info:
         const GHC.IO.Device.read_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84hO() //  [R1]
         { []
         }
     {offset
       c84hO: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84hO_info" {
     block_c84hO_info:
         const _c84hO;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.47770522 UTC

[section ""data" . GHC.IO.Device.readNonBlocking_closure" {
     GHC.IO.Device.readNonBlocking_closure:
         const GHC.IO.Device.readNonBlocking_info;
 },
 GHC.IO.Device.readNonBlocking_entry() //  [R2]
         { []
         }
     {offset
       c84ie: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84if; else goto c84ig;
       c84if: // global
           R2 = R2;
           R1 = GHC.IO.Device.readNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84ig: // global
           I64[Sp - 8] = block_c84ib_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84ik; else goto c84ic;
       u84ik: // global
           call _c84ib(R1) args: 0, res: 0, upd: 0;
       c84ic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.readNonBlocking_info" {
     GHC.IO.Device.readNonBlocking_info:
         const GHC.IO.Device.readNonBlocking_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84ib() //  [R1]
         { []
         }
     {offset
       c84ib: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84ib_info" {
     block_c84ib_info:
         const _c84ib;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.482639382 UTC

[section ""data" . GHC.IO.Device.write_closure" {
     GHC.IO.Device.write_closure:
         const GHC.IO.Device.write_info;
 },
 GHC.IO.Device.write_entry() //  [R2]
         { []
         }
     {offset
       c84iB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84iC; else goto c84iD;
       c84iC: // global
           R2 = R2;
           R1 = GHC.IO.Device.write_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84iD: // global
           I64[Sp - 8] = block_c84iy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84iH; else goto c84iz;
       u84iH: // global
           call _c84iy(R1) args: 0, res: 0, upd: 0;
       c84iz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.write_info" {
     GHC.IO.Device.write_info:
         const GHC.IO.Device.write_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84iy() //  [R1]
         { []
         }
     {offset
       c84iy: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84iy_info" {
     block_c84iy_info:
         const _c84iy;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.487825075 UTC

[section ""data" . GHC.IO.Device.writeNonBlocking_closure" {
     GHC.IO.Device.writeNonBlocking_closure:
         const GHC.IO.Device.writeNonBlocking_info;
 },
 GHC.IO.Device.writeNonBlocking_entry() //  [R2]
         { []
         }
     {offset
       c84iY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84iZ; else goto c84j0;
       c84iZ: // global
           R2 = R2;
           R1 = GHC.IO.Device.writeNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84j0: // global
           I64[Sp - 8] = block_c84iV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84j4; else goto c84iW;
       u84j4: // global
           call _c84iV(R1) args: 0, res: 0, upd: 0;
       c84iW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.writeNonBlocking_info" {
     GHC.IO.Device.writeNonBlocking_info:
         const GHC.IO.Device.writeNonBlocking_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84iV() //  [R1]
         { []
         }
     {offset
       c84iV: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84iV_info" {
     block_c84iV_info:
         const _c84iV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.493835157 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode16_bytes" {
     GHC.IO.Device.$fReadSeekMode16_bytes:
         I8[] [65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.495981822 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode15_closure" {
     GHC.IO.Device.$fReadSeekMode15_closure:
         const GHC.IO.Device.$fReadSeekMode15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode15_entry() //  [R1]
         { []
         }
     {offset
       c84jl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84jm; else goto c84jn;
       c84jm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84jn: // global
           (_c84ji::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84ji::I64 == 0) goto c84jk; else goto c84jj;
       c84jk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84jj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84ji::I64;
           R2 = GHC.IO.Device.$fReadSeekMode16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode15_info" {
     GHC.IO.Device.$fReadSeekMode15_info:
         const GHC.IO.Device.$fReadSeekMode15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.499341213 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode12_bytes" {
     GHC.IO.Device.$fReadSeekMode12_bytes:
         I8[] [82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.503614559 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode11_closure" {
     GHC.IO.Device.$fReadSeekMode11_closure:
         const GHC.IO.Device.$fReadSeekMode11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode11_entry() //  [R1]
         { []
         }
     {offset
       c84jC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84jD; else goto c84jE;
       c84jD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84jE: // global
           (_c84jz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84jz::I64 == 0) goto c84jB; else goto c84jA;
       c84jB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84jA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84jz::I64;
           R2 = GHC.IO.Device.$fReadSeekMode12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode11_info" {
     GHC.IO.Device.$fReadSeekMode11_info:
         const GHC.IO.Device.$fReadSeekMode11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.507539746 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode8_bytes" {
     GHC.IO.Device.$fReadSeekMode8_bytes:
         I8[] [83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.510239756 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode7_closure" {
     GHC.IO.Device.$fReadSeekMode7_closure:
         const GHC.IO.Device.$fReadSeekMode7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode7_entry() //  [R1]
         { []
         }
     {offset
       c84jT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84jU; else goto c84jV;
       c84jU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84jV: // global
           (_c84jQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84jQ::I64 == 0) goto c84jS; else goto c84jR;
       c84jS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84jR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84jQ::I64;
           R2 = GHC.IO.Device.$fReadSeekMode8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode7_info" {
     GHC.IO.Device.$fReadSeekMode7_info:
         const GHC.IO.Device.$fReadSeekMode7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.515771038 UTC

[section ""data" . GHC.IO.Device.$w$cshowsPrec_closure" {
     GHC.IO.Device.$w$cshowsPrec_closure:
         const GHC.IO.Device.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c84kf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84kg; else goto c84kh;
       c84kg: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84kh: // global
           I64[Sp - 16] = block_c84k7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84ks; else goto c84k8;
       u84ks: // global
           call _c84k7(R1) args: 0, res: 0, upd: 0;
       c84k8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cshowsPrec_info" {
     GHC.IO.Device.$w$cshowsPrec_info:
         const GHC.IO.Device.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S82hF_srt;
 },
 _c84k7() //  [R1]
         { []
         }
     {offset
       c84k7: // global
           _s8250::P64 = P64[Sp + 8];
           _c84ke::P64 = R1 & 7;
           if (_c84ke::P64 < 3) goto u84kr; else goto c84kd;
       u84kr: // global
           if (_c84ke::P64 < 2) goto c84kb; else goto c84kc;
       c84kb: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c84kc: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c84kd: // global
           R3 = _s8250::P64;
           R2 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84k7_info" {
     block_c84k7_info:
         const _c84k7;
         const 1;
         const 30064771102;
         const S82hF_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.522745694 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c84kH: // global
           _s8253::P64 = R3;
           R3 = R4;
           R2 = _s8253::P64;
           call GHC.IO.Device.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S82hF_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.527414097 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshow_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshow_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshow_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c84l0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84l1; else goto c84l2;
       c84l1: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fShowSeekMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84l2: // global
           I64[Sp - 8] = block_c84kS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84ld; else goto c84kT;
       u84ld: // global
           call _c84kS(R1) args: 0, res: 0, upd: 0;
       c84kT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fShowSeekMode_$cshow_info" {
     GHC.IO.Device.$fShowSeekMode_$cshow_info:
         const GHC.IO.Device.$fShowSeekMode_$cshow_entry;
         const 0;
         const 98784247822;
         const 4294967301;
         const S82hF_srt;
 },
 _c84kS() //  [R1]
         { []
         }
     {offset
       c84kS: // global
           _c84kZ::P64 = R1 & 7;
           if (_c84kZ::P64 < 3) goto u84lc; else goto c84kY;
       u84lc: // global
           if (_c84kZ::P64 < 2) goto c84kW; else goto c84kX;
       c84kW: // global
           R1 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84kX: // global
           R1 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84kY: // global
           R1 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84kS_info" {
     block_c84kS_info:
         const _c84kS;
         const 0;
         const 30064771102;
         const S82hF_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.534478639 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowList_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c84lv: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fShowSeekMode_$cshowList_info" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_info:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S82hF_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.538220617 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_closure" {
     GHC.IO.Device.$fShowSeekMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure+3;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure+1;
         const GHC.IO.Device.$fShowSeekMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.541147445 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode14_closure" {
     GHC.IO.Device.$fReadSeekMode14_closure:
         const GHC.IO.Device.$fReadSeekMode14_info;
 },
 GHC.IO.Device.$fReadSeekMode14_entry() //  [R3]
         { []
         }
     {offset
       c84lH: // global
           R2 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode14_info" {
     GHC.IO.Device.$fReadSeekMode14_info:
         const GHC.IO.Device.$fReadSeekMode14_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.544495982 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode13_closure" {
     GHC.IO.Device.$fReadSeekMode13_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$fReadSeekMode14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.546790686 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode10_closure" {
     GHC.IO.Device.$fReadSeekMode10_closure:
         const GHC.IO.Device.$fReadSeekMode10_info;
 },
 GHC.IO.Device.$fReadSeekMode10_entry() //  [R3]
         { []
         }
     {offset
       c84lT: // global
           R2 = GHC.IO.Device.RelativeSeek_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode10_info" {
     GHC.IO.Device.$fReadSeekMode10_info:
         const GHC.IO.Device.$fReadSeekMode10_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.54982517 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode9_closure" {
     GHC.IO.Device.$fReadSeekMode9_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode10_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.551821657 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode6_closure" {
     GHC.IO.Device.$fReadSeekMode6_closure:
         const GHC.IO.Device.$fReadSeekMode6_info;
 },
 GHC.IO.Device.$fReadSeekMode6_entry() //  [R3]
         { []
         }
     {offset
       c84m5: // global
           R2 = GHC.IO.Device.SeekFromEnd_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode6_info" {
     GHC.IO.Device.$fReadSeekMode6_info:
         const GHC.IO.Device.$fReadSeekMode6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.554910433 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode5_closure" {
     GHC.IO.Device.$fReadSeekMode5_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode6_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.556657625 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode4_closure" {
     GHC.IO.Device.$fReadSeekMode4_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.558439464 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode3_closure" {
     GHC.IO.Device.$fReadSeekMode3_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode9_closure+1;
         const GHC.IO.Device.$fReadSeekMode4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.560228821 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_sps_closure" {
     GHC.IO.Device.$fReadSeekMode_sps_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode13_closure+1;
         const GHC.IO.Device.$fReadSeekMode3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.563310473 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode2_closure" {
     GHC.IO.Device.$fReadSeekMode2_closure:
         const GHC.IO.Device.$fReadSeekMode2_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode2_entry() //  [R2]
         { []
         }
     {offset
       c84mk: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode2_info" {
     GHC.IO.Device.$fReadSeekMode2_info:
         const GHC.IO.Device.$fReadSeekMode2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S82hF_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.567038539 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode1_closure" {
     GHC.IO.Device.$fReadSeekMode1_closure:
         const GHC.IO.Device.$fReadSeekMode1_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c84mv: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode1_info" {
     GHC.IO.Device.$fReadSeekMode1_info:
         const GHC.IO.Device.$fReadSeekMode1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S82hF_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.570954811 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_info;
         const 0;
 },
 sat_s825h_entry() //  [R1]
         { []
         }
     {offset
       c84mK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84mL; else goto c84mM;
       c84mL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84mM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s825h_info" {
     sat_s825h_info:
         const sat_s825h_entry;
         const 1;
         const 12884901904;
         const S82hF_srt+56;
 },
 GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c84mN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c84mR; else goto c84mQ;
       c84mR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84mQ: // global
           I64[Hp - 16] = sat_s825h_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_info" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_info:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S82hF_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.576503377 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c84n6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84n7; else goto c84n8;
       c84n7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84n8: // global
           (_c84n3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84n3::I64 == 0) goto c84n5; else goto c84n4;
       c84n5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84n4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84n3::I64;
           R2 = GHC.IO.Device.$fReadSeekMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_info" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_info:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S82hF_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.581138402 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode17_closure" {
     GHC.IO.Device.$fReadSeekMode17_closure:
         const GHC.IO.Device.$fReadSeekMode17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode17_entry() //  [R1]
         { []
         }
     {offset
       c84nm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84nn; else goto c84no;
       c84nn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84no: // global
           (_c84nj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84nj::I64 == 0) goto c84nl; else goto c84nk;
       c84nl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84nk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84nj::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode17_info" {
     GHC.IO.Device.$fReadSeekMode17_info:
         const GHC.IO.Device.$fReadSeekMode17_entry;
         const 0;
         const 4294967317;
         const S82hF_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.585107294 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadList_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadList_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadList_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c84nA: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode17_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode_$creadList_info" {
     GHC.IO.Device.$fReadSeekMode_$creadList_info:
         const GHC.IO.Device.$fReadSeekMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S82hF_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.588385977 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_closure" {
     GHC.IO.Device.$fReadSeekMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure+1;
         const GHC.IO.Device.$fReadSeekMode_$creadList_closure+1;
         const GHC.IO.Device.$fReadSeekMode1_closure+2;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.59228613 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c==_closure" {
     GHC.IO.Device.$fEqSeekMode_$c==_closure:
         const GHC.IO.Device.$fEqSeekMode_$c==_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c84nU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84nV; else goto c84nW;
       c84nV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84nW: // global
           I64[Sp - 16] = block_c84nM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84oT; else goto c84nN;
       u84oT: // global
           call _c84nM(R1) args: 0, res: 0, upd: 0;
       c84nN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqSeekMode_$c==_info" {
     GHC.IO.Device.$fEqSeekMode_$c==_info:
         const GHC.IO.Device.$fEqSeekMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84nM() //  [R1]
         { []
         }
     {offset
       c84nM: // global
           _s825j::P64 = P64[Sp + 8];
           _c84nT::P64 = R1 & 7;
           if (_c84nT::P64 < 3) goto u84oJ; else goto c84nS;
       u84oJ: // global
           if (_c84nT::P64 < 2) goto c84nQ; else goto c84nR;
       c84nQ: // global
           I64[Sp + 8] = block_c84nZ_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84oQ; else goto c84o1;
       u84oQ: // global
           call _c84nZ(R1) args: 0, res: 0, upd: 0;
       c84o1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84nR: // global
           I64[Sp + 8] = block_c84oe_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84oR; else goto c84og;
       u84oR: // global
           call _c84oe(R1) args: 0, res: 0, upd: 0;
       c84og: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84nS: // global
           I64[Sp + 8] = block_c84ot_info;
           R1 = _s825j::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84oS; else goto c84ov;
       u84oS: // global
           call _c84ot(R1) args: 0, res: 0, upd: 0;
       c84ov: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84nM_info" {
     block_c84nM_info:
         const _c84nM;
         const 1;
         const 30;
 },
 _c84nZ() //  [R1]
         { []
         }
     {offset
       c84nZ: // global
           if (R1 & 7 == 1) goto u84oK; else goto u84oL;
       u84oK: // global
           Sp = Sp + 8;
           call _c84oF() args: 0, res: 0, upd: 0;
       u84oL: // global
           Sp = Sp + 8;
           call _c84oB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84nZ_info" {
     block_c84nZ_info:
         const _c84nZ;
         const 0;
         const 30;
 },
 _c84oe() //  [R1]
         { []
         }
     {offset
       c84oe: // global
           if (R1 & 7 == 2) goto u84oM; else goto u84oN;
       u84oM: // global
           Sp = Sp + 8;
           call _c84oF() args: 0, res: 0, upd: 0;
       u84oN: // global
           Sp = Sp + 8;
           call _c84oB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84oe_info" {
     block_c84oe_info:
         const _c84oe;
         const 0;
         const 30;
 },
 _c84ot() //  [R1]
         { []
         }
     {offset
       c84ot: // global
           if (R1 & 7 == 3) goto u84oO; else goto u84oP;
       u84oO: // global
           Sp = Sp + 8;
           call _c84oF() args: 0, res: 0, upd: 0;
       u84oP: // global
           Sp = Sp + 8;
           call _c84oB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84ot_info" {
     block_c84ot_info:
         const _c84ot;
         const 0;
         const 30;
 },
 _c84oF() //  []
         { []
         }
     {offset
       c84oF: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84oB() //  []
         { []
         }
     {offset
       c84oB: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.60706453 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c/=_closure" {
     GHC.IO.Device.$fEqSeekMode_$c/=_closure:
         const GHC.IO.Device.$fEqSeekMode_$c/=_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c84pK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84pL; else goto c84pM;
       c84pL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84pM: // global
           I64[Sp - 16] = block_c84pC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84qJ; else goto c84pD;
       u84qJ: // global
           call _c84pC(R1) args: 0, res: 0, upd: 0;
       c84pD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqSeekMode_$c/=_info" {
     GHC.IO.Device.$fEqSeekMode_$c/=_info:
         const GHC.IO.Device.$fEqSeekMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84pC() //  [R1]
         { []
         }
     {offset
       c84pC: // global
           _s825p::P64 = P64[Sp + 8];
           _c84pJ::P64 = R1 & 7;
           if (_c84pJ::P64 < 3) goto u84qz; else goto c84pI;
       u84qz: // global
           if (_c84pJ::P64 < 2) goto c84pG; else goto c84pH;
       c84pG: // global
           I64[Sp + 8] = block_c84pP_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84qG; else goto c84pR;
       u84qG: // global
           call _c84pP(R1) args: 0, res: 0, upd: 0;
       c84pR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84pH: // global
           I64[Sp + 8] = block_c84q4_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84qH; else goto c84q6;
       u84qH: // global
           call _c84q4(R1) args: 0, res: 0, upd: 0;
       c84q6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84pI: // global
           I64[Sp + 8] = block_c84qj_info;
           R1 = _s825p::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84qI; else goto c84ql;
       u84qI: // global
           call _c84qj(R1) args: 0, res: 0, upd: 0;
       c84ql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84pC_info" {
     block_c84pC_info:
         const _c84pC;
         const 1;
         const 30;
 },
 _c84pP() //  [R1]
         { []
         }
     {offset
       c84pP: // global
           if (R1 & 7 == 1) goto u84qA; else goto u84qB;
       u84qA: // global
           Sp = Sp + 8;
           call _c84qv() args: 0, res: 0, upd: 0;
       u84qB: // global
           Sp = Sp + 8;
           call _c84qr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84pP_info" {
     block_c84pP_info:
         const _c84pP;
         const 0;
         const 30;
 },
 _c84q4() //  [R1]
         { []
         }
     {offset
       c84q4: // global
           if (R1 & 7 == 2) goto u84qC; else goto u84qD;
       u84qC: // global
           Sp = Sp + 8;
           call _c84qv() args: 0, res: 0, upd: 0;
       u84qD: // global
           Sp = Sp + 8;
           call _c84qr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84q4_info" {
     block_c84q4_info:
         const _c84q4;
         const 0;
         const 30;
 },
 _c84qj() //  [R1]
         { []
         }
     {offset
       c84qj: // global
           if (R1 & 7 == 3) goto u84qE; else goto u84qF;
       u84qE: // global
           Sp = Sp + 8;
           call _c84qv() args: 0, res: 0, upd: 0;
       u84qF: // global
           Sp = Sp + 8;
           call _c84qr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84qj_info" {
     block_c84qj_info:
         const _c84qj;
         const 0;
         const 30;
 },
 _c84qv() //  []
         { []
         }
     {offset
       c84qv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84qr() //  []
         { []
         }
     {offset
       c84qr: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.618453903 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_closure" {
     GHC.IO.Device.$fEqSeekMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqSeekMode_$c==_closure+2;
         const GHC.IO.Device.$fEqSeekMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.623313572 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c==_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c==_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c==_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c84rC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84rD; else goto c84rE;
       c84rD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84rE: // global
           I64[Sp - 16] = block_c84rt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84sV; else goto c84ru;
       u84sV: // global
           call _c84rt(R1) args: 0, res: 0, upd: 0;
       c84ru: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqIODeviceType_$c==_info" {
     GHC.IO.Device.$fEqIODeviceType_$c==_info:
         const GHC.IO.Device.$fEqIODeviceType_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84rt() //  [R1]
         { []
         }
     {offset
       c84rt: // global
           _s825v::P64 = P64[Sp + 8];
           _c84rB::P64 = R1 & 7;
           if (_c84rB::P64 < 3) goto u84sH; else goto u84sI;
       u84sH: // global
           if (_c84rB::P64 < 2) goto c84rx; else goto c84ry;
       c84rx: // global
           I64[Sp + 8] = block_c84rH_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sR; else goto c84rJ;
       u84sR: // global
           call _c84rH(R1) args: 0, res: 0, upd: 0;
       c84rJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84ry: // global
           I64[Sp + 8] = block_c84rW_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sS; else goto c84rY;
       u84sS: // global
           call _c84rW(R1) args: 0, res: 0, upd: 0;
       c84rY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u84sI: // global
           if (_c84rB::P64 < 4) goto c84rz; else goto c84rA;
       c84rz: // global
           I64[Sp + 8] = block_c84sb_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sT; else goto c84sd;
       u84sT: // global
           call _c84sb(R1) args: 0, res: 0, upd: 0;
       c84sd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84rA: // global
           I64[Sp + 8] = block_c84sq_info;
           R1 = _s825v::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84sU; else goto c84ss;
       u84sU: // global
           call _c84sq(R1) args: 0, res: 0, upd: 0;
       c84ss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84rt_info" {
     block_c84rt_info:
         const _c84rt;
         const 1;
         const 30;
 },
 _c84rH() //  [R1]
         { []
         }
     {offset
       c84rH: // global
           if (R1 & 7 == 1) goto u84sJ; else goto u84sK;
       u84sJ: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sK: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84rH_info" {
     block_c84rH_info:
         const _c84rH;
         const 0;
         const 30;
 },
 _c84rW() //  [R1]
         { []
         }
     {offset
       c84rW: // global
           if (R1 & 7 == 2) goto u84sL; else goto u84sM;
       u84sL: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sM: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84rW_info" {
     block_c84rW_info:
         const _c84rW;
         const 0;
         const 30;
 },
 _c84sb() //  [R1]
         { []
         }
     {offset
       c84sb: // global
           if (R1 & 7 == 3) goto u84sN; else goto u84sO;
       u84sN: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sO: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84sb_info" {
     block_c84sb_info:
         const _c84sb;
         const 0;
         const 30;
 },
 _c84sq() //  [R1]
         { []
         }
     {offset
       c84sq: // global
           if (R1 & 7 == 4) goto u84sP; else goto u84sQ;
       u84sP: // global
           Sp = Sp + 8;
           call _c84sC() args: 0, res: 0, upd: 0;
       u84sQ: // global
           Sp = Sp + 8;
           call _c84sy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84sq_info" {
     block_c84sq_info:
         const _c84sq;
         const 0;
         const 30;
 },
 _c84sC() //  []
         { []
         }
     {offset
       c84sC: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84sy() //  []
         { []
         }
     {offset
       c84sy: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.639734835 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c/=_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c84tV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84tW; else goto c84tX;
       c84tW: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84tX: // global
           I64[Sp - 16] = block_c84tM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84ve; else goto c84tN;
       u84ve: // global
           call _c84tM(R1) args: 0, res: 0, upd: 0;
       c84tN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqIODeviceType_$c/=_info" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_info:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84tM() //  [R1]
         { []
         }
     {offset
       c84tM: // global
           _s825C::P64 = P64[Sp + 8];
           _c84tU::P64 = R1 & 7;
           if (_c84tU::P64 < 3) goto u84v0; else goto u84v1;
       u84v0: // global
           if (_c84tU::P64 < 2) goto c84tQ; else goto c84tR;
       c84tQ: // global
           I64[Sp + 8] = block_c84u0_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84va; else goto c84u2;
       u84va: // global
           call _c84u0(R1) args: 0, res: 0, upd: 0;
       c84u2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84tR: // global
           I64[Sp + 8] = block_c84uf_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84vb; else goto c84uh;
       u84vb: // global
           call _c84uf(R1) args: 0, res: 0, upd: 0;
       c84uh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u84v1: // global
           if (_c84tU::P64 < 4) goto c84tS; else goto c84tT;
       c84tS: // global
           I64[Sp + 8] = block_c84uu_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84vc; else goto c84uw;
       u84vc: // global
           call _c84uu(R1) args: 0, res: 0, upd: 0;
       c84uw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84tT: // global
           I64[Sp + 8] = block_c84uJ_info;
           R1 = _s825C::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84vd; else goto c84uL;
       u84vd: // global
           call _c84uJ(R1) args: 0, res: 0, upd: 0;
       c84uL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84tM_info" {
     block_c84tM_info:
         const _c84tM;
         const 1;
         const 30;
 },
 _c84u0() //  [R1]
         { []
         }
     {offset
       c84u0: // global
           if (R1 & 7 == 1) goto u84v2; else goto u84v3;
       u84v2: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v3: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84u0_info" {
     block_c84u0_info:
         const _c84u0;
         const 0;
         const 30;
 },
 _c84uf() //  [R1]
         { []
         }
     {offset
       c84uf: // global
           if (R1 & 7 == 2) goto u84v4; else goto u84v5;
       u84v4: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v5: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84uf_info" {
     block_c84uf_info:
         const _c84uf;
         const 0;
         const 30;
 },
 _c84uu() //  [R1]
         { []
         }
     {offset
       c84uu: // global
           if (R1 & 7 == 3) goto u84v6; else goto u84v7;
       u84v6: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v7: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84uu_info" {
     block_c84uu_info:
         const _c84uu;
         const 0;
         const 30;
 },
 _c84uJ() //  [R1]
         { []
         }
     {offset
       c84uJ: // global
           if (R1 & 7 == 4) goto u84v8; else goto u84v9;
       u84v8: // global
           Sp = Sp + 8;
           call _c84uV() args: 0, res: 0, upd: 0;
       u84v9: // global
           Sp = Sp + 8;
           call _c84uR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84uJ_info" {
     block_c84uJ_info:
         const _c84uJ;
         const 0;
         const 30;
 },
 _c84uV() //  []
         { []
         }
     {offset
       c84uV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84uR() //  []
         { []
         }
     {offset
       c84uR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.652644952 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_closure" {
     GHC.IO.Device.$fEqIODeviceType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqIODeviceType_$c==_closure+2;
         const GHC.IO.Device.$fEqIODeviceType_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.655025637 UTC

[section ""data" . $dmisSeekable1_r81Zn_closure" {
     $dmisSeekable1_r81Zn_closure:
         const $dmisSeekable1_r81Zn_info;
 },
 $dmisSeekable1_r81Zn_entry() //  []
         { []
         }
     {offset
       c84w6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmisSeekable1_r81Zn_info" {
     $dmisSeekable1_r81Zn_info:
         const $dmisSeekable1_r81Zn_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.658318375 UTC

[section ""data" . GHC.IO.Device.$dmisSeekable_closure" {
     GHC.IO.Device.$dmisSeekable_closure:
         const GHC.IO.Device.$dmisSeekable_info;
 },
 GHC.IO.Device.$dmisSeekable_entry() //  [R2, R3]
         { []
         }
     {offset
       c84wi: // global
           R3 = R3;
           R2 = R2;
           call $dmisSeekable1_r81Zn_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmisSeekable_info" {
     GHC.IO.Device.$dmisSeekable_info:
         const GHC.IO.Device.$dmisSeekable_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.661809647 UTC

[section ""data" . $dmisTerminal1_r81Zo_closure" {
     $dmisTerminal1_r81Zo_closure:
         const $dmisTerminal1_r81Zo_info;
 },
 $dmisTerminal1_r81Zo_entry() //  []
         { []
         }
     {offset
       c84wt: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmisTerminal1_r81Zo_info" {
     $dmisTerminal1_r81Zo_info:
         const $dmisTerminal1_r81Zo_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.665080457 UTC

[section ""data" . GHC.IO.Device.$dmisTerminal_closure" {
     GHC.IO.Device.$dmisTerminal_closure:
         const GHC.IO.Device.$dmisTerminal_info;
 },
 GHC.IO.Device.$dmisTerminal_entry() //  [R2, R3]
         { []
         }
     {offset
       c84wF: // global
           R3 = R3;
           R2 = R2;
           call $dmisTerminal1_r81Zo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmisTerminal_info" {
     GHC.IO.Device.$dmisTerminal_info:
         const GHC.IO.Device.$dmisTerminal_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.668429993 UTC

[section ""data" . GHC.IO.Device.$dmdup1_closure" {
     GHC.IO.Device.$dmdup1_closure:
         const GHC.IO.Device.$dmdup1_info;
         const 0;
 },
 GHC.IO.Device.$dmdup1_entry() //  []
         { []
         }
     {offset
       c84wQ: // global
           R3 = GHC.IO.Exception.unsupportedOperation_closure;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmdup1_info" {
     GHC.IO.Device.$dmdup1_info:
         const GHC.IO.Device.$dmdup1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S82hF_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.672289335 UTC

[section ""data" . $dmseek1_r81Zp_closure" {
     $dmseek1_r81Zp_closure:
         const $dmseek1_r81Zp_info;
         const 0;
 },
 $dmseek1_r81Zp_entry() //  []
         { []
         }
     {offset
       c84x1: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmseek1_r81Zp_info" {
     $dmseek1_r81Zp_info:
         const $dmseek1_r81Zp_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.675847432 UTC

[section ""data" . GHC.IO.Device.$dmseek_closure" {
     GHC.IO.Device.$dmseek_closure:
         const GHC.IO.Device.$dmseek_info;
         const 0;
 },
 GHC.IO.Device.$dmseek_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c84xc: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmseek1_r81Zp_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmseek_info" {
     GHC.IO.Device.$dmseek_info:
         const GHC.IO.Device.$dmseek_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S82hF_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.679017516 UTC

[section ""data" . $dmtell1_r81Zq_closure" {
     $dmtell1_r81Zq_closure:
         const $dmtell1_r81Zq_info;
         const 0;
 },
 $dmtell1_r81Zq_entry() //  []
         { []
         }
     {offset
       c84xn: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmtell1_r81Zq_info" {
     $dmtell1_r81Zq_info:
         const $dmtell1_r81Zq_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.68221999 UTC

[section ""data" . GHC.IO.Device.$dmtell_closure" {
     GHC.IO.Device.$dmtell_closure:
         const GHC.IO.Device.$dmtell_info;
         const 0;
 },
 GHC.IO.Device.$dmtell_entry() //  [R2, R3]
         { []
         }
     {offset
       c84xy: // global
           R3 = R3;
           R2 = R2;
           call $dmtell1_r81Zq_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmtell_info" {
     GHC.IO.Device.$dmtell_info:
         const GHC.IO.Device.$dmtell_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.68571148 UTC

[section ""data" . $dmgetSize1_r81Zr_closure" {
     $dmgetSize1_r81Zr_closure:
         const $dmgetSize1_r81Zr_info;
         const 0;
 },
 $dmgetSize1_r81Zr_entry() //  []
         { []
         }
     {offset
       c84xJ: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmgetSize1_r81Zr_info" {
     $dmgetSize1_r81Zr_info:
         const $dmgetSize1_r81Zr_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.688973535 UTC

[section ""data" . GHC.IO.Device.$dmgetSize_closure" {
     GHC.IO.Device.$dmgetSize_closure:
         const GHC.IO.Device.$dmgetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmgetSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c84xU: // global
           R3 = R3;
           R2 = R2;
           call $dmgetSize1_r81Zr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmgetSize_info" {
     GHC.IO.Device.$dmgetSize_info:
         const GHC.IO.Device.$dmgetSize_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.692187174 UTC

[section ""data" . $dmsetSize1_r81Zs_closure" {
     $dmsetSize1_r81Zs_closure:
         const $dmsetSize1_r81Zs_info;
         const 0;
 },
 $dmsetSize1_r81Zs_entry() //  []
         { []
         }
     {offset
       c84y5: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsetSize1_r81Zs_info" {
     $dmsetSize1_r81Zs_info:
         const $dmsetSize1_r81Zs_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.695754499 UTC

[section ""data" . GHC.IO.Device.$dmsetSize_closure" {
     GHC.IO.Device.$dmsetSize_closure:
         const GHC.IO.Device.$dmsetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmsetSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c84yg: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetSize1_r81Zs_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmsetSize_info" {
     GHC.IO.Device.$dmsetSize_info:
         const GHC.IO.Device.$dmsetSize_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.699643488 UTC

[section ""data" . $dmsetEcho1_r81Zt_closure" {
     $dmsetEcho1_r81Zt_closure:
         const $dmsetEcho1_r81Zt_info;
         const 0;
 },
 $dmsetEcho1_r81Zt_entry() //  []
         { []
         }
     {offset
       c84yr: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsetEcho1_r81Zt_info" {
     $dmsetEcho1_r81Zt_info:
         const $dmsetEcho1_r81Zt_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.7028313 UTC

[section ""data" . GHC.IO.Device.$dmsetEcho_closure" {
     GHC.IO.Device.$dmsetEcho_closure:
         const GHC.IO.Device.$dmsetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmsetEcho_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c84yC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetEcho1_r81Zt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmsetEcho_info" {
     GHC.IO.Device.$dmsetEcho_info:
         const GHC.IO.Device.$dmsetEcho_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.706093453 UTC

[section ""data" . $dmgetEcho1_r81Zu_closure" {
     $dmgetEcho1_r81Zu_closure:
         const $dmgetEcho1_r81Zu_info;
         const 0;
 },
 $dmgetEcho1_r81Zu_entry() //  []
         { []
         }
     {offset
       c84yN: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmgetEcho1_r81Zu_info" {
     $dmgetEcho1_r81Zu_info:
         const $dmgetEcho1_r81Zu_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.709232361 UTC

[section ""data" . GHC.IO.Device.$dmgetEcho_closure" {
     GHC.IO.Device.$dmgetEcho_closure:
         const GHC.IO.Device.$dmgetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmgetEcho_entry() //  [R2, R3]
         { []
         }
     {offset
       c84yY: // global
           R3 = R3;
           R2 = R2;
           call $dmgetEcho1_r81Zu_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmgetEcho_info" {
     GHC.IO.Device.$dmgetEcho_info:
         const GHC.IO.Device.$dmgetEcho_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.712987677 UTC

[section ""data" . $dmsetRaw1_r81Zv_closure" {
     $dmsetRaw1_r81Zv_closure:
         const $dmsetRaw1_r81Zv_info;
         const 0;
 },
 $dmsetRaw1_r81Zv_entry() //  []
         { []
         }
     {offset
       c84z9: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsetRaw1_r81Zv_info" {
     $dmsetRaw1_r81Zv_info:
         const $dmsetRaw1_r81Zv_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.716158196 UTC

[section ""data" . GHC.IO.Device.$dmsetRaw_closure" {
     GHC.IO.Device.$dmsetRaw_closure:
         const GHC.IO.Device.$dmsetRaw_info;
         const 0;
 },
 GHC.IO.Device.$dmsetRaw_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c84zk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetRaw1_r81Zv_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmsetRaw_info" {
     GHC.IO.Device.$dmsetRaw_info:
         const GHC.IO.Device.$dmsetRaw_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.719474914 UTC

[section ""data" . $dmdup3_r81Zw_closure" {
     $dmdup3_r81Zw_closure:
         const $dmdup3_r81Zw_info;
         const 0;
 },
 $dmdup3_r81Zw_entry() //  []
         { []
         }
     {offset
       c84zv: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmdup3_r81Zw_info" {
     $dmdup3_r81Zw_info:
         const $dmdup3_r81Zw_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.723079928 UTC

[section ""data" . GHC.IO.Device.$dmdup_closure" {
     GHC.IO.Device.$dmdup_closure:
         const GHC.IO.Device.$dmdup_info;
         const 0;
 },
 GHC.IO.Device.$dmdup_entry() //  [R2, R3]
         { []
         }
     {offset
       c84zG: // global
           R3 = R3;
           R2 = R2;
           call $dmdup3_r81Zw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmdup_info" {
     GHC.IO.Device.$dmdup_info:
         const GHC.IO.Device.$dmdup_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S82hF_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.726420389 UTC

[section ""data" . $dmdup4_r81Zx_closure" {
     $dmdup4_r81Zx_closure:
         const $dmdup4_r81Zx_info;
         const 0;
 },
 $dmdup4_r81Zx_entry() //  []
         { []
         }
     {offset
       c84zR: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmdup4_r81Zx_info" {
     $dmdup4_r81Zx_info:
         const $dmdup4_r81Zx_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.730551006 UTC

[section ""data" . GHC.IO.Device.$dmdup2_closure" {
     GHC.IO.Device.$dmdup2_closure:
         const GHC.IO.Device.$dmdup2_info;
         const 0;
 },
 GHC.IO.Device.$dmdup2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c84A2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmdup4_r81Zx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmdup2_info" {
     GHC.IO.Device.$dmdup2_info:
         const GHC.IO.Device.$dmdup2_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S82hF_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.735901027 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$ccompare_closure" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_closure:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Al: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Am; else goto c84An;
       c84Am: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84An: // global
           I64[Sp - 16] = block_c84Ad_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Bw; else goto c84Ae;
       u84Bw: // global
           call _c84Ad(R1) args: 0, res: 0, upd: 0;
       c84Ae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$ccompare_info" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_info:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84Ad() //  [R1]
         { []
         }
     {offset
       c84Ad: // global
           _s826n::P64 = P64[Sp + 8];
           _c84Ak::P64 = R1 & 7;
           if (_c84Ak::P64 < 3) goto u84Bi; else goto c84Aj;
       u84Bi: // global
           if (_c84Ak::P64 < 2) goto c84Ah; else goto c84Ai;
       c84Ah: // global
           I64[Sp + 8] = block_c84Aq_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Bt; else goto c84As;
       u84Bt: // global
           call _c84Aq(R1) args: 0, res: 0, upd: 0;
       c84As: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Ai: // global
           I64[Sp + 8] = block_c84AJ_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Bu; else goto c84AL;
       u84Bu: // global
           call _c84AJ(R1) args: 0, res: 0, upd: 0;
       c84AL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Aj: // global
           I64[Sp + 8] = block_c84B2_info;
           R1 = _s826n::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Bv; else goto c84B4;
       u84Bv: // global
           call _c84B2(R1) args: 0, res: 0, upd: 0;
       c84B4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Ad_info" {
     block_c84Ad_info:
         const _c84Ad;
         const 1;
         const 30;
 },
 _c84Aq() //  [R1]
         { []
         }
     {offset
       c84Aq: // global
           _c84Bh::P64 = R1 & 7;
           if (_c84Bh::P64 < 3) goto u84Bj; else goto u84Bl;
       u84Bj: // global
           if (_c84Bh::P64 < 2) goto u84Bn; else goto u84Bm;
       u84Bn: // global
           Sp = Sp + 8;
           call _c84Be() args: 0, res: 0, upd: 0;
       u84Bm: // global
           Sp = Sp + 8;
           goto u84By;
       u84Bl: // global
           Sp = Sp + 8;
           goto u84By;
       u84By: // global
           call _c84AZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84Aq_info" {
     block_c84Aq_info:
         const _c84Aq;
         const 0;
         const 30;
 },
 _c84AJ() //  [R1]
         { []
         }
     {offset
       c84AJ: // global
           _c84Bg::P64 = R1 & 7;
           if (_c84Bg::P64 < 3) goto u84Bk; else goto u84Bo;
       u84Bk: // global
           if (_c84Bg::P64 < 2) goto u84Bq; else goto u84Bp;
       u84Bq: // global
           Sp = Sp + 8;
           call _c84Ba() args: 0, res: 0, upd: 0;
       u84Bp: // global
           Sp = Sp + 8;
           call _c84Be() args: 0, res: 0, upd: 0;
       u84Bo: // global
           Sp = Sp + 8;
           call _c84AZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84AJ_info" {
     block_c84AJ_info:
         const _c84AJ;
         const 0;
         const 30;
 },
 _c84AZ() //  []
         { []
         }
     {offset
       c84AZ: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84B2() //  [R1]
         { []
         }
     {offset
       c84B2: // global
           if (R1 & 7 == 3) goto u84Br; else goto u84Bs;
       u84Br: // global
           Sp = Sp + 8;
           call _c84Be() args: 0, res: 0, upd: 0;
       u84Bs: // global
           Sp = Sp + 8;
           call _c84Ba() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84B2_info" {
     block_c84B2_info:
         const _c84B2;
         const 0;
         const 30;
 },
 _c84Be() //  []
         { []
         }
     {offset
       c84Be: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84Ba() //  []
         { []
         }
     {offset
       c84Ba: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.75033761 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Cq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Cr; else goto c84Cs;
       c84Cr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Cs: // global
           I64[Sp - 16] = block_c84Ci_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Dm; else goto c84Cj;
       u84Dm: // global
           call _c84Ci(R1) args: 0, res: 0, upd: 0;
       c84Cj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c<_info" {
     GHC.IO.Device.$fOrdSeekMode_$c<_info:
         const GHC.IO.Device.$fOrdSeekMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84Ci() //  [R1]
         { []
         }
     {offset
       c84Ci: // global
           _s826t::P64 = P64[Sp + 8];
           _c84Cp::P64 = R1 & 7;
           if (_c84Cp::P64 < 3) goto u84Dc; else goto c84Co;
       u84Dc: // global
           if (_c84Cp::P64 < 2) goto c84Cm; else goto c84Cn;
       c84Cm: // global
           I64[Sp + 8] = block_c84Cv_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Dj; else goto c84Cx;
       u84Dj: // global
           call _c84Cv(R1) args: 0, res: 0, upd: 0;
       c84Cx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Cn: // global
           I64[Sp + 8] = block_c84CO_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Dk; else goto c84CQ;
       u84Dk: // global
           call _c84CO(R1) args: 0, res: 0, upd: 0;
       c84CQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Co: // global
           I64[Sp + 8] = block_c84D3_info;
           R1 = _s826t::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Dl; else goto c84D5;
       u84Dl: // global
           call _c84D3() args: 0, res: 0, upd: 0;
       c84D5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Ci_info" {
     block_c84Ci_info:
         const _c84Ci;
         const 1;
         const 30;
 },
 _c84Cv() //  [R1]
         { []
         }
     {offset
       c84Cv: // global
           _c84Db::P64 = R1 & 7;
           if (_c84Db::P64 < 3) goto u84Dd; else goto u84De;
       u84Dd: // global
           if (_c84Db::P64 < 2) goto u84Dg; else goto u84Df;
       u84Dg: // global
           Sp = Sp + 8;
           call _c84CW() args: 0, res: 0, upd: 0;
       u84Df: // global
           Sp = Sp + 8;
           goto u84Do;
       u84De: // global
           Sp = Sp + 8;
           goto u84Do;
       u84Do: // global
           call _c84D0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84Cv_info" {
     block_c84Cv_info:
         const _c84Cv;
         const 0;
         const 30;
 },
 _c84CO() //  [R1]
         { []
         }
     {offset
       c84CO: // global
           if (R1 & 7 == 3) goto u84Dh; else goto u84Di;
       u84Dh: // global
           Sp = Sp + 8;
           call _c84D0() args: 0, res: 0, upd: 0;
       u84Di: // global
           Sp = Sp + 8;
           call _c84CW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84CO_info" {
     block_c84CO_info:
         const _c84CO;
         const 0;
         const 30;
 },
 _c84D0() //  []
         { []
         }
     {offset
       c84D0: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84CW() //  []
         { []
         }
     {offset
       c84CW: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84D3() //  []
         { []
         }
     {offset
       c84D3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84D3_info" {
     block_c84D3_info:
         const _c84D3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.763519999 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Ec: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Ed; else goto c84Ee;
       c84Ed: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Ee: // global
           I64[Sp - 16] = block_c84E4_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84F1; else goto c84E5;
       u84F1: // global
           call _c84E4(R1) args: 0, res: 0, upd: 0;
       c84E5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c<=_info" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_info:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84E4() //  [R1]
         { []
         }
     {offset
       c84E4: // global
           _s826y::P64 = P64[Sp + 8];
           _c84Eb::P64 = R1 & 7;
           if (_c84Eb::P64 < 3) goto u84EY; else goto c84Ea;
       u84EY: // global
           if (_c84Eb::P64 < 2) goto c84E8; else goto c84E9;
       c84E8: // global
           _s826B::I64 = 0;
           goto s826A;
       c84E9: // global
           _s826B::I64 = 1;
           goto s826A;
       c84Ea: // global
           _s826B::I64 = 2;
           goto s826A;
       s826A: // global
           I64[Sp] = block_c84Ei_info;
           R1 = _s826y::P64;
           I64[Sp + 8] = _s826B::I64;
           if (R1 & 7 != 0) goto u84F0; else goto c84Ek;
       u84F0: // global
           call _c84Ei(R1) args: 0, res: 0, upd: 0;
       c84Ek: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84E4_info" {
     block_c84E4_info:
         const _c84E4;
         const 1;
         const 30;
 },
 _c84Ei() //  [R1]
         { []
         }
     {offset
       c84Ei: // global
           _s826B::I64 = I64[Sp + 8];
           _c84EX::P64 = R1 & 7;
           if (_c84EX::P64 < 3) goto u84EZ; else goto c84EN;
       u84EZ: // global
           if (_c84EX::P64 < 2) goto c84Ev; else goto c84EE;
       c84Ev: // global
           if (%MO_S_Ge_W64(_s826B::I64, 0)) goto c84EL; else goto c84EM;
       c84EE: // global
           if (%MO_S_Ge_W64(_s826B::I64, 1)) goto c84EL; else goto c84EM;
       c84EN: // global
           if (%MO_S_Ge_W64(_s826B::I64, 2)) goto c84EL; else goto c84EM;
       c84EL: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84EM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Ei_info" {
     block_c84Ei_info:
         const _c84Ei;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.772296445 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmax_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Ft: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84Fu; else goto c84Fv;
       c84Fu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Fv: // global
           I64[Sp - 24] = block_c84Fn_info;
           _s826I::P64 = R3;
           R3 = R3;
           _s826H::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826H::P64;
           P64[Sp - 8] = _s826I::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$cmax_info" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_info:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84Fn() //  [R1]
         { []
         }
     {offset
       c84Fn: // global
           if (R1 & 7 == 1) goto c84Fq; else goto c84Fr;
       c84Fq: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84Fr: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Fn_info" {
     block_c84Fn_info:
         const _c84Fn;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.779014755 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c84G4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84G5; else goto c84G6;
       c84G5: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84G6: // global
           I64[Sp - 16] = block_c84FW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84GT; else goto c84FX;
       u84GT: // global
           call _c84FW(R1) args: 0, res: 0, upd: 0;
       c84FX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c>=_info" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_info:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84FW() //  [R1]
         { []
         }
     {offset
       c84FW: // global
           _s826L::P64 = P64[Sp + 8];
           _c84G3::P64 = R1 & 7;
           if (_c84G3::P64 < 3) goto u84GQ; else goto c84G2;
       u84GQ: // global
           if (_c84G3::P64 < 2) goto c84G0; else goto c84G1;
       c84G0: // global
           _s826N::I64 = 0;
           goto s826M;
       c84G1: // global
           _s826N::I64 = 1;
           goto s826M;
       c84G2: // global
           _s826N::I64 = 2;
           goto s826M;
       s826M: // global
           I64[Sp] = block_c84Ga_info;
           R1 = _s826L::P64;
           I64[Sp + 8] = _s826N::I64;
           if (R1 & 7 != 0) goto u84GS; else goto c84Gc;
       u84GS: // global
           call _c84Ga(R1) args: 0, res: 0, upd: 0;
       c84Gc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84FW_info" {
     block_c84FW_info:
         const _c84FW;
         const 1;
         const 30;
 },
 _c84Ga() //  [R1]
         { []
         }
     {offset
       c84Ga: // global
           _s826N::I64 = I64[Sp + 8];
           _c84GP::P64 = R1 & 7;
           if (_c84GP::P64 < 3) goto u84GR; else goto c84GF;
       u84GR: // global
           if (_c84GP::P64 < 2) goto c84Gn; else goto c84Gw;
       c84Gn: // global
           if (%MO_S_Ge_W64(_s826N::I64, 0)) goto c84GD; else goto c84GE;
       c84Gw: // global
           if (%MO_S_Ge_W64(_s826N::I64, 1)) goto c84GD; else goto c84GE;
       c84GF: // global
           if (%MO_S_Ge_W64(_s826N::I64, 2)) goto c84GD; else goto c84GE;
       c84GD: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84GE: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Ga_info" {
     block_c84Ga_info:
         const _c84Ga;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.786673952 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Hf: // global
           _s826U::P64 = R3;
           R3 = R2;
           R2 = _s826U::P64;
           call GHC.IO.Device.$fOrdSeekMode_$c<_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c>_info" {
     GHC.IO.Device.$fOrdSeekMode_$c>_info:
         const GHC.IO.Device.$fOrdSeekMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.79079095 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmin_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Hw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84Hx; else goto c84Hy;
       c84Hx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Hy: // global
           I64[Sp - 24] = block_c84Hq_info;
           _s826W::P64 = R3;
           R3 = R3;
           _s826V::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s826V::P64;
           P64[Sp - 8] = _s826W::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$cmin_info" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_info:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84Hq() //  [R1]
         { []
         }
     {offset
       c84Hq: // global
           if (R1 & 7 == 1) goto c84Ht; else goto c84Hu;
       c84Ht: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84Hu: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Hq_info" {
     block_c84Hq_info:
         const _c84Hq;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.796190374 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_closure" {
     GHC.IO.Device.$fOrdSeekMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Device.$fEqSeekMode_closure+1;
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmax_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.800764023 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeIndex_closure" {
     GHC.IO.Device.$w$cunsafeIndex_closure:
         const GHC.IO.Device.$w$cunsafeIndex_info;
 },
 GHC.IO.Device.$w$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c84I6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84I7; else goto c84I8;
       c84I7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84I8: // global
           I64[Sp - 16] = block_c84HY_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Jl; else goto c84HZ;
       u84Jl: // global
           call _c84HY(R1) args: 0, res: 0, upd: 0;
       c84HZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cunsafeIndex_info" {
     GHC.IO.Device.$w$cunsafeIndex_info:
         const GHC.IO.Device.$w$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84HY() //  [R1]
         { []
         }
     {offset
       c84HY: // global
           _s826Z::P64 = P64[Sp + 8];
           _c84I5::P64 = R1 & 7;
           if (_c84I5::P64 < 3) goto u84J7; else goto c84I4;
       u84J7: // global
           if (_c84I5::P64 < 2) goto c84I2; else goto c84I3;
       c84I2: // global
           I64[Sp + 8] = block_c84Ib_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Ji; else goto c84Id;
       u84Ji: // global
           call _c84Ib(R1) args: 0, res: 0, upd: 0;
       c84Id: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84I3: // global
           I64[Sp + 8] = block_c84Iu_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Jj; else goto c84Iw;
       u84Jj: // global
           call _c84Iu(R1) args: 0, res: 0, upd: 0;
       c84Iw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84I4: // global
           I64[Sp + 8] = block_c84IN_info;
           R1 = _s826Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Jk; else goto c84IP;
       u84Jk: // global
           call _c84IN(R1) args: 0, res: 0, upd: 0;
       c84IP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84HY_info" {
     block_c84HY_info:
         const _c84HY;
         const 1;
         const 30;
 },
 _c84Ib() //  [R1]
         { []
         }
     {offset
       c84Ib: // global
           _c84J6::P64 = R1 & 7;
           if (_c84J6::P64 < 3) goto u84J8; else goto c84Ir;
       u84J8: // global
           if (_c84J6::P64 < 2) goto u84Jc; else goto u84Jb;
       u84Jc: // global
           Sp = Sp + 8;
           call _c84J3() args: 0, res: 0, upd: 0;
       u84Jb: // global
           Sp = Sp + 8;
           call _c84IK() args: 0, res: 0, upd: 0;
       c84Ir: // global
           R1 = 2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Ib_info" {
     block_c84Ib_info:
         const _c84Ib;
         const 0;
         const 30;
 },
 _c84Iu() //  [R1]
         { []
         }
     {offset
       c84Iu: // global
           _c84J5::P64 = R1 & 7;
           if (_c84J5::P64 < 3) goto u84J9; else goto u84Jd;
       u84J9: // global
           if (_c84J5::P64 < 2) goto u84Jf; else goto u84Je;
       u84Jf: // global
           Sp = Sp + 8;
           call _c84IZ() args: 0, res: 0, upd: 0;
       u84Je: // global
           Sp = Sp + 8;
           call _c84J3() args: 0, res: 0, upd: 0;
       u84Jd: // global
           Sp = Sp + 8;
           call _c84IK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84Iu_info" {
     block_c84Iu_info:
         const _c84Iu;
         const 0;
         const 30;
 },
 _c84IK() //  []
         { []
         }
     {offset
       c84IK: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84IN() //  [R1]
         { []
         }
     {offset
       c84IN: // global
           _c84J4::P64 = R1 & 7;
           if (_c84J4::P64 < 3) goto u84Ja; else goto u84Jg;
       u84Ja: // global
           if (_c84J4::P64 < 2) goto c84IV; else goto u84Jh;
       c84IV: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u84Jh: // global
           Sp = Sp + 8;
           call _c84IZ() args: 0, res: 0, upd: 0;
       u84Jg: // global
           Sp = Sp + 8;
           call _c84J3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84IN_info" {
     block_c84IN_info:
         const _c84IN;
         const 0;
         const 30;
 },
 _c84IZ() //  []
         { []
         }
     {offset
       c84IZ: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84J3() //  []
         { []
         }
     {offset
       c84J3: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.816990842 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Ka: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Ki; else goto c84Kj;
       c84Ki: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Kj: // global
           I64[Sp - 16] = block_c84K7_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Ko; else goto c84K8;
       u84Ko: // global
           call _c84K7(R1) args: 0, res: 0, upd: 0;
       c84K8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84K7() //  [R1]
         { []
         }
     {offset
       c84K7: // global
           _s8275::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c84Kd_info;
           R3 = _s8275::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84K7_info" {
     block_c84K7_info:
         const _c84K7;
         const 1;
         const 30;
 },
 _c84Kd() //  [R1]
         { []
         }
     {offset
       c84Kd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Kn; else goto c84Km;
       c84Kn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84Km: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Kd_info" {
     block_c84Kd_info:
         const _c84Kd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.826854685 UTC

[section ""data" . GHC.IO.Device.$w$cinRange_closure" {
     GHC.IO.Device.$w$cinRange_closure:
         const GHC.IO.Device.$w$cinRange_info;
 },
 GHC.IO.Device.$w$cinRange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c84KQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84KR; else goto c84KS;
       c84KR: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c84KS: // global
           I64[Sp - 24] = block_c84KI_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u84Mc; else goto c84KJ;
       u84Mc: // global
           call _c84KI(R1) args: 0, res: 0, upd: 0;
       c84KJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cinRange_info" {
     GHC.IO.Device.$w$cinRange_info:
         const GHC.IO.Device.$w$cinRange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c84KI() //  [R1]
         { []
         }
     {offset
       c84KI: // global
           _s827b::P64 = P64[Sp + 8];
           _c84KP::P64 = R1 & 7;
           if (_c84KP::P64 < 3) goto u84M8; else goto c84KO;
       u84M8: // global
           if (_c84KP::P64 < 2) goto c84KM; else goto c84KN;
       c84KM: // global
           _s827e::I64 = 0;
           goto s827d;
       c84KN: // global
           _s827e::I64 = 1;
           goto s827d;
       c84KO: // global
           _s827e::I64 = 2;
           goto s827d;
       s827d: // global
           I64[Sp] = block_c84KY_info;
           R1 = _s827b::P64;
           I64[Sp + 8] = _s827e::I64;
           if (R1 & 7 != 0) goto u84Mb; else goto c84Lz;
       u84Mb: // global
           call _c84KY(R1) args: 0, res: 0, upd: 0;
       c84Lz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84KI_info" {
     block_c84KI_info:
         const _c84KI;
         const 2;
         const 30;
 },
 _c84KY() //  [R1]
         { []
         }
     {offset
       c84KY: // global
           _s827c::P64 = P64[Sp + 16];
           _c84LX::P64 = R1 & 7;
           if (_c84LX::P64 < 3) goto u84M9; else goto c84LN;
       u84M9: // global
           if (_c84LX::P64 < 2) goto c84LF; else goto c84LJ;
       c84LF: // global
           _s827g::I64 = 0;
           goto s827f;
       c84LJ: // global
           _s827g::I64 = 1;
           goto s827f;
       c84LN: // global
           _s827g::I64 = 2;
           goto s827f;
       s827f: // global
           I64[Sp] = block_c84L3_info;
           R1 = _s827c::P64;
           I64[Sp + 16] = _s827g::I64;
           if (R1 & 7 != 0) goto u84Md; else goto c84L5;
       u84Md: // global
           call _c84L3(R1) args: 0, res: 0, upd: 0;
       c84L5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84KY_info" {
     block_c84KY_info:
         const _c84KY;
         const 66;
         const 30;
 },
 _c84L3() //  [R1]
         { []
         }
     {offset
       c84L3: // global
           _s827e::I64 = I64[Sp + 8];
           _s827g::I64 = I64[Sp + 16];
           _c84LY::P64 = R1 & 7;
           if (_c84LY::P64 < 3) goto u84Ma; else goto c84Ly;
       u84Ma: // global
           if (_c84LY::P64 < 2) goto c84Lg; else goto c84Lp;
       c84Lg: // global
           if (%MO_S_Lt_W64(0, _s827e::I64)) goto c84Lw; else goto c84Le;
       c84Le: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Lp: // global
           if (%MO_S_Lt_W64(1, _s827e::I64)) goto c84Lw; else goto c84Lo;
       c84Lo: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Ly: // global
           if (%MO_S_Lt_W64(2, _s827e::I64)) goto c84Lw; else goto c84Lx;
       c84Lw: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Lx: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s827g::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84L3_info" {
     block_c84L3_info:
         const _c84L3;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.83844024 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cinRange_closure" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_closure:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c84MP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84MQ; else goto c84MR;
       c84MQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84MR: // global
           I64[Sp - 16] = block_c84MM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84MV; else goto c84MN;
       u84MV: // global
           call _c84MM(R1) args: 0, res: 0, upd: 0;
       c84MN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cinRange_info" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_info:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84MM() //  [R1]
         { []
         }
     {offset
       c84MM: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84MM_info" {
     block_c84MM_info:
         const _c84MM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.84364351 UTC

[section ""data" . lvl_r81Zy_closure" {
     lvl_r81Zy_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.845685712 UTC

[section ""data" . lvl1_r81Zz_closure" {
     lvl1_r81Zz_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.848067573 UTC

[section ""data" . lvl2_r81ZA_closure" {
     lvl2_r81ZA_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.851094343 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info;
 },
 GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c84Nk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Nl; else goto c84Nm;
       c84Nl: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Nm: // global
           I64[Sp - 8] = block_c84Nc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84Nx; else goto c84Nd;
       u84Nx: // global
           call _c84Nc(R1) args: 0, res: 0, upd: 0;
       c84Nd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84Nc() //  [R1]
         { []
         }
     {offset
       c84Nc: // global
           _c84Nj::P64 = R1 & 7;
           if (_c84Nj::P64 < 3) goto u84Nw; else goto c84Ni;
       u84Nw: // global
           if (_c84Nj::P64 < 2) goto c84Ng; else goto c84Nh;
       c84Ng: // global
           R1 = lvl_r81Zy_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Nh: // global
           R1 = lvl1_r81Zz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84Ni: // global
           R1 = lvl2_r81ZA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Nc_info" {
     block_c84Nc_info:
         const _c84Nc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.858146218 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go1_closure" {
     GHC.IO.Device.$fIxSeekMode_go1_closure:
         const GHC.IO.Device.$fIxSeekMode_go1_info;
 },
 sat_s827B_entry() //  [R1]
         { []
         }
     {offset
       c84NX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84NY; else goto c84NZ;
       c84NY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84NZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827z::I64 = I64[R1 + 16];
           if (_s827z::I64 != 0) goto c84NV; else goto c84NW;
       c84NV: // global
           R2 = _s827z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c84NW: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s827B_info" {
     sat_s827B_info:
         const sat_s827B_entry;
         const 4294967296;
         const 17;
 },
 sat_s827y_entry() //  [R1]
         { []
         }
     {offset
       c84O6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84O7; else goto c84O8;
       c84O7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84O8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s827y_info" {
     sat_s827y_info:
         const sat_s827y_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fIxSeekMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c84Oa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c84Oe; else goto c84Od;
       c84Oe: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Od: // global
           I64[Hp - 64] = sat_s827B_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_go1_info" {
     GHC.IO.Device.$fIxSeekMode_go1_info:
         const GHC.IO.Device.$fIxSeekMode_go1_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.866430733 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go_closure" {
     GHC.IO.Device.$fIxSeekMode_go_closure:
         const GHC.IO.Device.$fIxSeekMode_go_info;
 },
 sat_s827G_entry() //  [R1]
         { []
         }
     {offset
       c84OJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84OK; else goto c84OL;
       c84OK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84OL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827E::I64 = I64[R1 + 16];
           if (_s827E::I64 != 1) goto c84OH; else goto c84OI;
       c84OH: // global
           R2 = _s827E::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c84OI: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s827G_info" {
     sat_s827G_info:
         const sat_s827G_entry;
         const 4294967296;
         const 17;
 },
 sat_s827D_entry() //  [R1]
         { []
         }
     {offset
       c84OS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84OT; else goto c84OU;
       c84OT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84OU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s827D_info" {
     sat_s827D_info:
         const sat_s827D_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fIxSeekMode_go_entry() //  [R2]
         { []
         }
     {offset
       c84OW: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c84P0; else goto c84OZ;
       c84P0: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84OZ: // global
           I64[Hp - 64] = sat_s827G_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827D_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_go_info" {
     GHC.IO.Device.$fIxSeekMode_go_info:
         const GHC.IO.Device.$fIxSeekMode_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.874912898 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go3_closure" {
     GHC.IO.Device.$fEnumSeekMode_go3_closure:
         const GHC.IO.Device.$fEnumSeekMode_go3_info;
 },
 sat_s827L_entry() //  [R1]
         { []
         }
     {offset
       c84Pv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Pw; else goto c84Px;
       c84Pw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Px: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s827J::I64 = I64[R1 + 16];
           if (_s827J::I64 != 2) goto c84Pt; else goto c84Pu;
       c84Pt: // global
           R2 = _s827J::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c84Pu: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s827L_info" {
     sat_s827L_info:
         const sat_s827L_entry;
         const 4294967296;
         const 17;
 },
 sat_s827I_entry() //  [R1]
         { []
         }
     {offset
       c84PE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84PF; else goto c84PG;
       c84PF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84PG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s827I_info" {
     sat_s827I_info:
         const sat_s827I_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fEnumSeekMode_go3_entry() //  [R2]
         { []
         }
     {offset
       c84PI: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c84PM; else goto c84PL;
       c84PM: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84PL: // global
           I64[Hp - 64] = sat_s827L_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s827I_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go3_info" {
     GHC.IO.Device.$fEnumSeekMode_go3_info:
         const GHC.IO.Device.$fEnumSeekMode_go3_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.883327214 UTC

[section ""data" . GHC.IO.Device.$w$crange_closure" {
     GHC.IO.Device.$w$crange_closure:
         const GHC.IO.Device.$w$crange_info;
 },
 GHC.IO.Device.$w$crange_entry() //  [R2, R3]
         { []
         }
     {offset
       c84Qj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Qk; else goto c84Ql;
       c84Qk: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84Ql: // global
           I64[Sp - 16] = block_c84Qb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84R8; else goto c84Qc;
       u84R8: // global
           call _c84Qb(R1) args: 0, res: 0, upd: 0;
       c84Qc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$crange_info" {
     GHC.IO.Device.$w$crange_info:
         const GHC.IO.Device.$w$crange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84Qb() //  [R1]
         { []
         }
     {offset
       c84Qb: // global
           _s827N::P64 = P64[Sp + 8];
           _c84Qi::P64 = R1 & 7;
           if (_c84Qi::P64 < 3) goto u84R5; else goto c84Qh;
       u84R5: // global
           if (_c84Qi::P64 < 2) goto c84Qf; else goto c84Qg;
       c84Qf: // global
           _s827P::I64 = 0;
           goto s827O;
       c84Qg: // global
           _s827P::I64 = 1;
           goto s827O;
       c84Qh: // global
           _s827P::I64 = 2;
           goto s827O;
       s827O: // global
           I64[Sp] = block_c84Qp_info;
           R1 = _s827N::P64;
           I64[Sp + 8] = _s827P::I64;
           if (R1 & 7 != 0) goto u84R7; else goto c84Qr;
       u84R7: // global
           call _c84Qp(R1) args: 0, res: 0, upd: 0;
       c84Qr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Qb_info" {
     block_c84Qb_info:
         const _c84Qb;
         const 1;
         const 30;
 },
 _c84Qp() //  [R1]
         { []
         }
     {offset
       c84Qp: // global
           _s827P::I64 = I64[Sp + 8];
           _c84R4::P64 = R1 & 7;
           if (_c84R4::P64 < 3) goto u84R6; else goto c84QU;
       u84R6: // global
           if (_c84R4::P64 < 2) goto c84QC; else goto c84QL;
       c84QC: // global
           if (%MO_S_Gt_W64(_s827P::I64, 0)) goto c84QT; else goto c84Qz;
       c84Qz: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c84QL: // global
           if (%MO_S_Gt_W64(_s827P::I64, 1)) goto c84QT; else goto c84QJ;
       c84QJ: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c84QU: // global
           if (%MO_S_Gt_W64(_s827P::I64, 2)) goto c84QT; else goto c84QS;
       c84QT: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c84QS: // global
           R2 = _s827P::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Qp_info" {
     block_c84Qp_info:
         const _c84Qp;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.892219201 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crange_closure" {
     GHC.IO.Device.$fIxSeekMode_$crange_closure:
         const GHC.IO.Device.$fIxSeekMode_$crange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crange_entry() //  [R2]
         { []
         }
     {offset
       c84Rw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Rx; else goto c84Ry;
       c84Rx: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Ry: // global
           I64[Sp - 8] = block_c84Rt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84RC; else goto c84Ru;
       u84RC: // global
           call _c84Rt(R1) args: 0, res: 0, upd: 0;
       c84Ru: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$crange_info" {
     GHC.IO.Device.$fIxSeekMode_$crange_info:
         const GHC.IO.Device.$fIxSeekMode_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84Rt() //  [R1]
         { []
         }
     {offset
       c84Rt: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Rt_info" {
     block_c84Rt_info:
         const _c84Rt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.899711879 UTC

[section ""data" . GHC.IO.Device.$w$crangeSize_closure" {
     GHC.IO.Device.$w$crangeSize_closure:
         const GHC.IO.Device.$w$crangeSize_info;
 },
 GHC.IO.Device.$w$crangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c84RW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84RX; else goto c84RY;
       c84RX: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84RY: // global
           I64[Sp - 24] = block_c84RQ_info;
           R4 = R3;
           _s8280::P64 = R3;
           R3 = R3;
           _s827Z::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s827Z::P64;
           P64[Sp - 8] = _s8280::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$crangeSize_info" {
     GHC.IO.Device.$w$crangeSize_info:
         const GHC.IO.Device.$w$crangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84RQ() //  [R1]
         { []
         }
     {offset
       c84RQ: // global
           if (R1 & 7 == 1) goto u84Tf; else goto c84RU;
       u84Tf: // global
           Sp = Sp + 24;
           call _c84T2() args: 0, res: 0, upd: 0;
       c84RU: // global
           _s827Z::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c84S4_info;
           R1 = _s827Z::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tn; else goto c84S6;
       u84Tn: // global
           call _c84S4(R1) args: 0, res: 0, upd: 0;
       c84S6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84RQ_info" {
     block_c84RQ_info:
         const _c84RQ;
         const 2;
         const 30;
 },
 _c84S4() //  [R1]
         { []
         }
     {offset
       c84S4: // global
           _s8280::P64 = P64[Sp + 8];
           _c84T7::P64 = R1 & 7;
           if (_c84T7::P64 < 3) goto u84Tb; else goto c84SR;
       u84Tb: // global
           if (_c84T7::P64 < 2) goto c84Sd; else goto c84Sx;
       c84Sd: // global
           I64[Sp + 8] = block_c84Sa_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tp; else goto c84Se;
       u84Tp: // global
           call _c84Sa(R1) args: 0, res: 0, upd: 0;
       c84Se: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84Sx: // global
           I64[Sp + 8] = block_c84Sv_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tq; else goto c84Sy;
       u84Tq: // global
           call _c84Sv(R1) args: 0, res: 0, upd: 0;
       c84Sy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84SR: // global
           I64[Sp + 8] = block_c84SP_info;
           R1 = _s8280::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Tr; else goto c84SS;
       u84Tr: // global
           call _c84SP(R1) args: 0, res: 0, upd: 0;
       c84SS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84S4_info" {
     block_c84S4_info:
         const _c84S4;
         const 1;
         const 30;
 },
 _c84Sa() //  [R1]
         { []
         }
     {offset
       c84Sa: // global
           _c84Ta::P64 = R1 & 7;
           if (_c84Ta::P64 < 3) goto u84Tc; else goto c84Ss;
       u84Tc: // global
           if (_c84Ta::P64 < 2) goto u84Th; else goto u84Tg;
       u84Th: // global
           Sp = Sp + 8;
           call _c84T6() args: 0, res: 0, upd: 0;
       u84Tg: // global
           Sp = Sp + 8;
           call _c84SM() args: 0, res: 0, upd: 0;
       c84Ss: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Sa_info" {
     block_c84Sa_info:
         const _c84Sa;
         const 0;
         const 30;
 },
 _c84Sv() //  [R1]
         { []
         }
     {offset
       c84Sv: // global
           _c84T9::P64 = R1 & 7;
           if (_c84T9::P64 < 3) goto u84Td; else goto u84Ti;
       u84Td: // global
           if (_c84T9::P64 < 2) goto u84Tk; else goto u84Tj;
       u84Tk: // global
           Sp = Sp + 8;
           call _c84T2() args: 0, res: 0, upd: 0;
       u84Tj: // global
           Sp = Sp + 8;
           call _c84T6() args: 0, res: 0, upd: 0;
       u84Ti: // global
           Sp = Sp + 8;
           call _c84SM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84Sv_info" {
     block_c84Sv_info:
         const _c84Sv;
         const 0;
         const 30;
 },
 _c84SM() //  []
         { []
         }
     {offset
       c84SM: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84SP() //  [R1]
         { []
         }
     {offset
       c84SP: // global
           _c84T8::P64 = R1 & 7;
           if (_c84T8::P64 < 3) goto u84Te; else goto u84Tl;
       u84Te: // global
           if (_c84T8::P64 < 2) goto c84SY; else goto u84Tm;
       c84SY: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u84Tm: // global
           Sp = Sp + 8;
           call _c84T2() args: 0, res: 0, upd: 0;
       u84Tl: // global
           Sp = Sp + 8;
           call _c84T6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84SP_info" {
     block_c84SP_info:
         const _c84SP;
         const 0;
         const 30;
 },
 _c84T2() //  []
         { []
         }
     {offset
       c84T2: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84T6() //  []
         { []
         }
     {offset
       c84T6: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.914855553 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c84Ul: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Ut; else goto c84Uu;
       c84Ut: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Uu: // global
           I64[Sp - 8] = block_c84Ui_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84Uz; else goto c84Uj;
       u84Uz: // global
           call _c84Ui(R1) args: 0, res: 0, upd: 0;
       c84Uj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$crangeSize_info" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_info:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84Ui() //  [R1]
         { []
         }
     {offset
       c84Ui: // global
           I64[Sp] = block_c84Uo_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Ui_info" {
     block_c84Ui_info:
         const _c84Ui;
         const 0;
         const 30;
 },
 _c84Uo() //  [R1]
         { []
         }
     {offset
       c84Uo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Uy; else goto c84Ux;
       c84Uy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84Ux: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Uo_info" {
     block_c84Uo_info:
         const _c84Uo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.924003098 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeRangeSize_closure" {
     GHC.IO.Device.$w$cunsafeRangeSize_closure:
         const GHC.IO.Device.$w$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c84UZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84V0; else goto c84V1;
       c84V0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84V1: // global
           I64[Sp - 16] = block_c84UR_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84We; else goto c84US;
       u84We: // global
           call _c84UR(R1) args: 0, res: 0, upd: 0;
       c84US: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cunsafeRangeSize_info" {
     GHC.IO.Device.$w$cunsafeRangeSize_info:
         const GHC.IO.Device.$w$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c84UR() //  [R1]
         { []
         }
     {offset
       c84UR: // global
           _s828c::P64 = P64[Sp + 8];
           _c84UY::P64 = R1 & 7;
           if (_c84UY::P64 < 3) goto u84W0; else goto c84UX;
       u84W0: // global
           if (_c84UY::P64 < 2) goto c84UV; else goto c84UW;
       c84UV: // global
           I64[Sp + 8] = block_c84V4_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Wb; else goto c84V6;
       u84Wb: // global
           call _c84V4(R1) args: 0, res: 0, upd: 0;
       c84V6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84UW: // global
           I64[Sp + 8] = block_c84Vn_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Wc; else goto c84Vp;
       u84Wc: // global
           call _c84Vn(R1) args: 0, res: 0, upd: 0;
       c84Vp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c84UX: // global
           I64[Sp + 8] = block_c84VG_info;
           R1 = _s828c::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u84Wd; else goto c84VI;
       u84Wd: // global
           call _c84VG(R1) args: 0, res: 0, upd: 0;
       c84VI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84UR_info" {
     block_c84UR_info:
         const _c84UR;
         const 1;
         const 30;
 },
 _c84V4() //  [R1]
         { []
         }
     {offset
       c84V4: // global
           _c84VZ::P64 = R1 & 7;
           if (_c84VZ::P64 < 3) goto u84W1; else goto c84Vk;
       u84W1: // global
           if (_c84VZ::P64 < 2) goto u84W5; else goto u84W4;
       u84W5: // global
           Sp = Sp + 8;
           call _c84VW() args: 0, res: 0, upd: 0;
       u84W4: // global
           Sp = Sp + 8;
           call _c84VD() args: 0, res: 0, upd: 0;
       c84Vk: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84V4_info" {
     block_c84V4_info:
         const _c84V4;
         const 0;
         const 30;
 },
 _c84Vn() //  [R1]
         { []
         }
     {offset
       c84Vn: // global
           _c84VY::P64 = R1 & 7;
           if (_c84VY::P64 < 3) goto u84W2; else goto u84W6;
       u84W2: // global
           if (_c84VY::P64 < 2) goto u84W8; else goto u84W7;
       u84W8: // global
           Sp = Sp + 8;
           call _c84VS() args: 0, res: 0, upd: 0;
       u84W7: // global
           Sp = Sp + 8;
           call _c84VW() args: 0, res: 0, upd: 0;
       u84W6: // global
           Sp = Sp + 8;
           call _c84VD() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84Vn_info" {
     block_c84Vn_info:
         const _c84Vn;
         const 0;
         const 30;
 },
 _c84VD() //  []
         { []
         }
     {offset
       c84VD: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84VG() //  [R1]
         { []
         }
     {offset
       c84VG: // global
           _c84VX::P64 = R1 & 7;
           if (_c84VX::P64 < 3) goto u84W3; else goto u84W9;
       u84W3: // global
           if (_c84VX::P64 < 2) goto c84VO; else goto u84Wa;
       c84VO: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u84Wa: // global
           Sp = Sp + 8;
           call _c84VS() args: 0, res: 0, upd: 0;
       u84W9: // global
           Sp = Sp + 8;
           call _c84VW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c84VG_info" {
     block_c84VG_info:
         const _c84VG;
         const 0;
         const 30;
 },
 _c84VS() //  []
         { []
         }
     {offset
       c84VS: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c84VW() //  []
         { []
         }
     {offset
       c84VW: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.938273625 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c84X3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c84Xb; else goto c84Xc;
       c84Xb: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c84Xc: // global
           I64[Sp - 8] = block_c84X0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u84Xh; else goto c84X1;
       u84Xh: // global
           call _c84X0(R1) args: 0, res: 0, upd: 0;
       c84X1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c84X0() //  [R1]
         { []
         }
     {offset
       c84X0: // global
           I64[Sp] = block_c84X6_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84X0_info" {
     block_c84X0_info:
         const _c84X0;
         const 0;
         const 30;
 },
 _c84X6() //  [R1]
         { []
         }
     {offset
       c84X6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Xg; else goto c84Xf;
       c84Xg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84Xf: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84X6_info" {
     block_c84X6_info:
         const _c84X6;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.946061092 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cindex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cindex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cindex_info;
         const 0;
 },
 GHC.IO.Device.$fIxSeekMode_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c84XC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84XD; else goto c84XE;
       c84XD: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c84XE: // global
           I64[Sp - 16] = block_c84Xz_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u84Y2; else goto c84XA;
       u84Y2: // global
           call _c84Xz(R1) args: 0, res: 0, upd: 0;
       c84XA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cindex_info" {
     GHC.IO.Device.$fIxSeekMode_$cindex_info:
         const GHC.IO.Device.$fIxSeekMode_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S82hF_srt+208;
 },
 _c84Xz() //  [R1]
         { []
         }
     {offset
       c84Xz: // global
           I64[Sp - 8] = block_c84XH_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s828p::P64 = P64[R1 + 7];
           R2 = _s828p::P64;
           P64[Sp] = _s828p::P64;
           Sp = Sp - 8;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84Xz_info" {
     block_c84Xz_info:
         const _c84Xz;
         const 1;
         const 4294967326;
         const S82hF_srt+208;
 },
 _c84XH() //  [R1]
         { []
         }
     {offset
       c84XH: // global
           if (R1 & 7 == 1) goto c84XO; else goto c84XX;
       c84XO: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c84XX: // global
           _s828n::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c84XR_info;
           R3 = _s828n::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c84XH_info" {
     block_c84XH_info:
         const _c84XH;
         const 2;
         const 4294967326;
         const S82hF_srt+208;
 },
 _c84XR() //  [R1]
         { []
         }
     {offset
       c84XR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c84Y0; else goto c84XZ;
       c84Y0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c84XZ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c84XR_info" {
     block_c84XR_info:
         const _c84XR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.95402157 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_closure" {
     GHC.IO.Device.$fIxSeekMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.Device.$fOrdSeekMode_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$crange_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cinRange_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.955736231 UTC

[section ""cstring" . lvl3_r81ZB_bytes" {
     lvl3_r81ZB_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.957979592 UTC

[section ""data" . lvl4_r81ZC_closure" {
     lvl4_r81ZC_closure:
         const lvl4_r81ZC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r81ZC_entry() //  [R1]
         { []
         }
     {offset
       c84Yu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Yv; else goto c84Yw;
       c84Yv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Yw: // global
           (_c84Yr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84Yr::I64 == 0) goto c84Yt; else goto c84Ys;
       c84Yt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84Ys: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84Yr::I64;
           R2 = lvl3_r81ZB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r81ZC_info" {
     lvl4_r81ZC_info:
         const lvl4_r81ZC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.961414525 UTC

[section ""cstring" . GHC.IO.Device.$trModule4_bytes" {
     GHC.IO.Device.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.963999521 UTC

[section ""data" . lvl5_r81ZD_closure" {
     lvl5_r81ZD_closure:
         const lvl5_r81ZD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r81ZD_entry() //  [R1]
         { []
         }
     {offset
       c84YL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84YM; else goto c84YN;
       c84YM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84YN: // global
           (_c84YI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84YI::I64 == 0) goto c84YK; else goto c84YJ;
       c84YK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84YJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84YI::I64;
           R2 = GHC.IO.Device.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r81ZD_info" {
     lvl5_r81ZD_info:
         const lvl5_r81ZD_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.967326154 UTC

[section ""cstring" . GHC.IO.Device.$trModule2_bytes" {
     GHC.IO.Device.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.969473818 UTC

[section ""data" . lvl6_r81ZE_closure" {
     lvl6_r81ZE_closure:
         const lvl6_r81ZE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r81ZE_entry() //  [R1]
         { []
         }
     {offset
       c84Z2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Z3; else goto c84Z4;
       c84Z3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Z4: // global
           (_c84YZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84YZ::I64 == 0) goto c84Z1; else goto c84Z0;
       c84Z1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84Z0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84YZ::I64;
           R2 = GHC.IO.Device.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r81ZE_info" {
     lvl6_r81ZE_info:
         const lvl6_r81ZE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.972772212 UTC

[section ""cstring" . lvl7_r81ZF_bytes" {
     lvl7_r81ZF_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,68,101,118,105,99,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.974826667 UTC

[section ""data" . lvl8_r81ZG_closure" {
     lvl8_r81ZG_closure:
         const lvl8_r81ZG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r81ZG_entry() //  [R1]
         { []
         }
     {offset
       c84Zj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c84Zk; else goto c84Zl;
       c84Zk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84Zl: // global
           (_c84Zg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84Zg::I64 == 0) goto c84Zi; else goto c84Zh;
       c84Zi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84Zh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84Zg::I64;
           R2 = lvl7_r81ZF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_r81ZG_info" {
     lvl8_r81ZG_info:
         const lvl8_r81ZG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.978727157 UTC

[section ""data" . lvl9_r81ZH_closure" {
     lvl9_r81ZH_closure:
         const GHC.Types.I#_con_info;
         const 173;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.980246688 UTC

[section ""data" . lvl10_r81ZI_closure" {
     lvl10_r81ZI_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.981857249 UTC

[section ""data" . lvl11_r81ZJ_closure" {
     lvl11_r81ZJ_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.983495403 UTC

[section ""data" . lvl12_r81ZK_closure" {
     lvl12_r81ZK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl5_r81ZD_closure;
         const lvl6_r81ZE_closure;
         const lvl8_r81ZG_closure;
         const lvl9_r81ZH_closure+1;
         const lvl10_r81ZI_closure+1;
         const lvl9_r81ZH_closure+1;
         const lvl11_r81ZJ_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.985233074 UTC

[section ""data" . lvl13_r81ZL_closure" {
     lvl13_r81ZL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl4_r81ZC_closure;
         const lvl12_r81ZK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.986966185 UTC

[section ""cstring" . lvl14_r81ZM_bytes" {
     lvl14_r81ZM_bytes:
         I8[] [112,114,101,100,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.989558153 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode4_closure" {
     GHC.IO.Device.$fEnumSeekMode4_closure:
         const GHC.IO.Device.$fEnumSeekMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode4_entry() //  [R1]
         { []
         }
     {offset
       c84ZH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c84ZI; else goto c84ZJ;
       c84ZI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c84ZJ: // global
           (_c84ZC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c84ZC::I64 == 0) goto c84ZE; else goto c84ZD;
       c84ZE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c84ZD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c84ZC::I64;
           I64[Sp - 24] = block_c84ZF_info;
           R2 = lvl14_r81ZM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode4_info" {
     GHC.IO.Device.$fEnumSeekMode4_info:
         const GHC.IO.Device.$fEnumSeekMode4_entry;
         const 0;
         const 12884901909;
         const S82hF_srt+224;
 },
 _c84ZF() //  [R1]
         { []
         }
     {offset
       c84ZF: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c84ZF_info" {
     block_c84ZF_info:
         const _c84ZF;
         const 0;
         const 12884901918;
         const S82hF_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:09.995830421 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cpred_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c8509: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c850a; else goto c850b;
       c850a: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c850b: // global
           I64[Sp - 8] = block_c8501_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u850m; else goto c8502;
       u850m: // global
           call _c8501(R1) args: 0, res: 0, upd: 0;
       c8502: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cpred_info" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_info:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S82hF_srt+240;
 },
 _c8501() //  [R1]
         { []
         }
     {offset
       c8501: // global
           _c8508::P64 = R1 & 7;
           if (_c8508::P64 < 3) goto u850l; else goto c8507;
       u850l: // global
           if (_c8508::P64 < 2) goto c8505; else goto c8506;
       c8505: // global
           R1 = GHC.IO.Device.$fEnumSeekMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8506: // global
           R1 = GHC.IO.Device.AbsoluteSeek_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8507: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8501_info" {
     block_c8501_info:
         const _c8501;
         const 0;
         const 4294967326;
         const S82hF_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.000488008 UTC

[section ""cstring" . lvl15_r81ZN_bytes" {
     lvl15_r81ZN_bytes:
         I8[] [115,117,99,99,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.002776175 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode5_closure" {
     GHC.IO.Device.$fEnumSeekMode5_closure:
         const GHC.IO.Device.$fEnumSeekMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode5_entry() //  [R1]
         { []
         }
     {offset
       c850J: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c850K; else goto c850L;
       c850K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c850L: // global
           (_c850E::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c850E::I64 == 0) goto c850G; else goto c850F;
       c850G: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c850F: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c850E::I64;
           I64[Sp - 24] = block_c850H_info;
           R2 = lvl15_r81ZN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode5_info" {
     GHC.IO.Device.$fEnumSeekMode5_info:
         const GHC.IO.Device.$fEnumSeekMode5_entry;
         const 0;
         const 12884901909;
         const S82hF_srt+224;
 },
 _c850H() //  [R1]
         { []
         }
     {offset
       c850H: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c850H_info" {
     block_c850H_info:
         const _c850H;
         const 0;
         const 12884901918;
         const S82hF_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.008339257 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$csucc_closure" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_closure:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c851b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c851c; else goto c851d;
       c851c: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c851d: // global
           I64[Sp - 8] = block_c8513_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u851o; else goto c8514;
       u851o: // global
           call _c8513(R1) args: 0, res: 0, upd: 0;
       c8514: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$csucc_info" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_info:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S82hF_srt+256;
 },
 _c8513() //  [R1]
         { []
         }
     {offset
       c8513: // global
           _c851a::P64 = R1 & 7;
           if (_c851a::P64 < 3) goto u851n; else goto c8519;
       u851n: // global
           if (_c851a::P64 < 2) goto c8517; else goto c8518;
       c8517: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8518: // global
           R1 = GHC.IO.Device.SeekFromEnd_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8519: // global
           R1 = GHC.IO.Device.$fEnumSeekMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8513_info" {
     block_c8513_info:
         const _c8513;
         const 0;
         const 4294967326;
         const S82hF_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.014628657 UTC

[section ""cstring" . lvl16_r81ZO_bytes" {
     lvl16_r81ZO_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.016117278 UTC

[section ""cstring" . lvl17_r81ZP_bytes" {
     lvl17_r81ZP_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.018325795 UTC

[section ""data" . lvl18_r81ZQ_closure" {
     lvl18_r81ZQ_closure:
         const lvl18_r81ZQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r81ZQ_entry() //  [R1]
         { []
         }
     {offset
       c851K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c851L; else goto c851M;
       c851L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c851M: // global
           (_c851H::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c851H::I64 == 0) goto c851J; else goto c851I;
       c851J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c851I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c851H::I64;
           R2 = lvl17_r81ZP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_r81ZQ_info" {
     lvl18_r81ZQ_info:
         const lvl18_r81ZQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.022677005 UTC

[section ""data" . lvl19_r81ZR_closure" {
     lvl19_r81ZR_closure:
         const lvl19_r81ZR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r81ZR_entry() //  [R1]
         { []
         }
     {offset
       c8523: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c8524; else goto c8525;
       c8524: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8525: // global
           (_c851X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c851X::I64 == 0) goto c851Z; else goto c851Y;
       c851Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c851Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c851X::I64;
           I64[Sp - 24] = block_c8520_info;
           R4 = lvl18_r81ZQ_closure;
           R3 = 2;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r81ZR_info" {
     lvl19_r81ZR_info:
         const lvl19_r81ZR_entry;
         const 0;
         const 4294967317;
         const S82hF_srt+272;
 },
 _c8520() //  [R1, R2]
         { []
         }
     {offset
       c8520: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8528; else goto c8527;
       c8528: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c8527: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c8520_info" {
     block_c8520_info:
         const _c8520;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.028676312 UTC

[section ""data" . lvl20_r81ZS_closure" {
     lvl20_r81ZS_closure:
         const lvl20_r81ZS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r81ZS_entry() //  [R1]
         { []
         }
     {offset
       c852q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c852r; else goto c852s;
       c852r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c852s: // global
           (_c852n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c852n::I64 == 0) goto c852p; else goto c852o;
       c852p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c852o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c852n::I64;
           R3 = lvl19_r81ZR_closure;
           R2 = lvl16_r81ZO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_r81ZS_info" {
     lvl20_r81ZS_info:
         const lvl20_r81ZS_entry;
         const 0;
         const 4294967317;
         const S82hF_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.031908395 UTC

[section ""cstring" . lvl21_r81ZT_bytes" {
     lvl21_r81ZT_bytes:
         I8[] [116,111,69,110,117,109,123,83,101,101,107,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.035061837 UTC

[section ""data" . GHC.IO.Device.$wlvl_closure" {
     GHC.IO.Device.$wlvl_closure:
         const GHC.IO.Device.$wlvl_info;
         const 0;
 },
 sat_s828G_entry() //  [R1]
         { []
         }
     {offset
       c852M: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c852N; else goto c852O;
       c852N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c852O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c852J_info;
           R4 = lvl20_r81ZS_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s828G_info" {
     sat_s828G_info:
         const sat_s828G_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+288;
 },
 _c852J() //  [R1, R2]
         { []
         }
     {offset
       c852J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c852R; else goto c852Q;
       c852R: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c852Q: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c852J_info" {
     block_c852J_info:
         const _c852J;
         const 0;
         const 30;
 },
 GHC.IO.Device.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c852U: // global
           _s828C::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c852V; else goto c852W;
       c852W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c852Y; else goto c852X;
       c852Y: // global
           HpAlloc = 24;
           goto c852V;
       c852V: // global
           R2 = _s828C::I64;
           R1 = GHC.IO.Device.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c852X: // global
           I64[Hp - 16] = sat_s828G_info;
           I64[Hp] = _s828C::I64;
           I64[Sp - 8] = block_c852S_info;
           R3 = Hp - 16;
           R2 = lvl21_r81ZT_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$wlvl_info" {
     GHC.IO.Device.$wlvl_info:
         const GHC.IO.Device.$wlvl_entry;
         const 0;
         const 3311419785230;
         const 4294967300;
         const S82hF_srt+224;
 },
 _c852S() //  [R1]
         { []
         }
     {offset
       c852S: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c852S_info" {
     block_c852S_info:
         const _c852S;
         const 0;
         const 12884901918;
         const S82hF_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.043641732 UTC

[section ""data" . GHC.IO.Device.$w$ctoEnum_closure" {
     GHC.IO.Device.$w$ctoEnum_closure:
         const GHC.IO.Device.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c853r: // global
           _s828I::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c853z; else goto c853q;
       c853q: // global
           if (%MO_S_Gt_W64(_s828I::I64, 2)) goto c853z; else goto c853A;
       c853z: // global
           R2 = _s828I::I64;
           call GHC.IO.Device.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c853A: // global
           R1 = I64[(_s828I::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$ctoEnum_info" {
     GHC.IO.Device.$w$ctoEnum_info:
         const GHC.IO.Device.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S82hF_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.047606753 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c853O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c853P; else goto c853Q;
       c853P: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c853Q: // global
           I64[Sp - 8] = block_c853L_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u853U; else goto c853M;
       u853U: // global
           call _c853L(R1) args: 0, res: 0, upd: 0;
       c853M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S82hF_srt+304;
 },
 _c853L() //  [R1]
         { []
         }
     {offset
       c853L: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c853L_info" {
     block_c853L_info:
         const _c853L;
         const 0;
         const 4294967326;
         const S82hF_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.052667417 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode3_closure" {
     GHC.IO.Device.$fEnumSeekMode3_closure:
         const GHC.IO.Device.$fEnumSeekMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode3_entry() //  [R1]
         { []
         }
     {offset
       c854a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c854b; else goto c854c;
       c854b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c854c: // global
           (_c8547::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c8547::I64 == 0) goto c8549; else goto c8548;
       c8549: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c8548: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c8547::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode3_info" {
     GHC.IO.Device.$fEnumSeekMode3_info:
         const GHC.IO.Device.$fEnumSeekMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.056558756 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode2_closure" {
     GHC.IO.Device.$fEnumSeekMode2_closure:
         const GHC.IO.Device.$fEnumSeekMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode2_entry() //  [R1]
         { []
         }
     {offset
       c854q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c854r; else goto c854s;
       c854r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c854s: // global
           (_c854n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c854n::I64 == 0) goto c854p; else goto c854o;
       c854p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c854o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c854n::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode2_info" {
     GHC.IO.Device.$fEnumSeekMode2_info:
         const GHC.IO.Device.$fEnumSeekMode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.060980644 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode1_closure" {
     GHC.IO.Device.$fEnumSeekMode1_closure:
         const GHC.IO.Device.$fEnumSeekMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode1_entry() //  [R1]
         { []
         }
     {offset
       c854G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c854H; else goto c854I;
       c854H: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c854I: // global
           (_c854D::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c854D::I64 == 0) goto c854F; else goto c854E;
       c854F: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c854E: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c854D::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode1_info" {
     GHC.IO.Device.$fEnumSeekMode1_info:
         const GHC.IO.Device.$fEnumSeekMode1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.06528709 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c8552: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8553; else goto c8554;
       c8553: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8554: // global
           I64[Sp - 8] = block_c854U_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u855f; else goto c854V;
       u855f: // global
           call _c854U(R1) args: 0, res: 0, upd: 0;
       c854V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S82hF_srt+320;
 },
 _c854U() //  [R1]
         { []
         }
     {offset
       c854U: // global
           _c8551::P64 = R1 & 7;
           if (_c8551::P64 < 3) goto u855e; else goto c8550;
       u855e: // global
           if (_c8551::P64 < 2) goto c854Y; else goto c854Z;
       c854Y: // global
           R1 = GHC.IO.Device.$fEnumSeekMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c854Z: // global
           R1 = GHC.IO.Device.$fEnumSeekMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8550: // global
           R1 = GHC.IO.Device.$fEnumSeekMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c854U_info" {
     block_c854U_info:
         const _c854U;
         const 0;
         const 30064771102;
         const S82hF_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.086842666 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info;
 },
 sat_s8297_entry() //  [R1]
         { []
         }
     {offset
       c856e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856f; else goto c856g;
       c856f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8297_info" {
     sat_s8297_info:
         const sat_s8297_entry;
         const 8589934593;
         const 15;
 },
 sat_s8295_entry() //  [R1]
         { []
         }
     {offset
       c856l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856m; else goto c856n;
       c856m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856n: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8295_info" {
     sat_s8295_info:
         const sat_s8295_entry;
         const 4294967296;
         const 17;
 },
 sat_s8298_entry() //  [R1]
         { []
         }
     {offset
       c856t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856u; else goto c856v;
       c856u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8298_info" {
     sat_s8298_info:
         const sat_s8298_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s8292_entry() //  [R1, R2]
         { []
         }
     {offset
       c856z: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c856D; else goto c856C;
       c856D: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c856C: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c856x; else goto c856y;
       c856x: // global
           _s8290::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s8297_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s8290::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s8295_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c856y: // global
           I64[Hp - 80] = sat_s8298_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c856F::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c856F::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s8292_info" {
     go_dn_s8292_info:
         const go_dn_s8292_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s8299_entry() //  [R1]
         { []
         }
     {offset
       c856G: // global
           _s8299::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c856H; else goto c856I;
       c856I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c856K; else goto c856J;
       c856K: // global
           HpAlloc = 24;
           goto c856H;
       c856H: // global
           R1 = _s8299::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856J: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s8299::P64;
           _s828V::I64 = I64[_s8299::P64 + 24];
           _s8290::I64 = _s828V::I64 - I64[_s8299::P64 + 16];
           I64[Hp - 16] = go_dn_s8292_info;
           I64[Hp - 8] = _s8290::I64;
           I64[Hp] = 2 - _s8290::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s8292_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s8299_info" {
     sat_s8299_info:
         const sat_s8299_entry;
         const 8589934592;
         const 20;
 },
 sat_s828Z_entry() //  [R1]
         { []
         }
     {offset
       c856P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c856Q; else goto c856R;
       c856Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c856R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s828Z_info" {
     sat_s828Z_info:
         const sat_s828Z_entry;
         const 4294967296;
         const 17;
 },
 sat_s829b_entry() //  [R1]
         { []
         }
     {offset
       c8570: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8571; else goto c8572;
       c8571: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8572: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829b_info" {
     sat_s829b_info:
         const sat_s829b_entry;
         const 4294967296;
         const 17;
 },
 sat_s829l_entry() //  [R1]
         { []
         }
     {offset
       c857v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c857w; else goto c857x;
       c857w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c857x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829l_info" {
     sat_s829l_info:
         const sat_s829l_entry;
         const 8589934593;
         const 15;
 },
 sat_s829j_entry() //  [R1]
         { []
         }
     {offset
       c857C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c857D; else goto c857E;
       c857D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c857E: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829j_info" {
     sat_s829j_info:
         const sat_s829j_entry;
         const 4294967296;
         const 17;
 },
 sat_s829m_entry() //  [R1]
         { []
         }
     {offset
       c857K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c857L; else goto c857M;
       c857L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c857M: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829m_info" {
     sat_s829m_info:
         const sat_s829m_entry;
         const 4294967296;
         const 17;
 },
 go_up_s829g_entry() //  [R1, R2]
         { []
         }
     {offset
       c857Q: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c857U; else goto c857T;
       c857U: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c857T: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c857O; else goto c857P;
       c857O: // global
           _s829e::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829l_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829e::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829j_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c857P: // global
           I64[Hp - 80] = sat_s829m_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c857W::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c857W::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s829g_info" {
     go_up_s829g_info:
         const go_up_s829g_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s829n_entry() //  [R1]
         { []
         }
     {offset
       c857X: // global
           _s829n::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c857Y; else goto c857Z;
       c857Z: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8581; else goto c8580;
       c8581: // global
           HpAlloc = 24;
           goto c857Y;
       c857Y: // global
           R1 = _s829n::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8580: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829n::P64;
           _s828V::I64 = I64[_s829n::P64 + 24];
           _s829e::I64 = _s828V::I64 - I64[_s829n::P64 + 16];
           I64[Hp - 16] = go_up_s829g_info;
           I64[Hp - 8] = _s829e::I64;
           I64[Hp] = 2 - _s829e::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829g_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829n_info" {
     sat_s829n_info:
         const sat_s829n_entry;
         const 8589934592;
         const 20;
 },
 sat_s829d_entry() //  [R1]
         { []
         }
     {offset
       c8586: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8587; else goto c8588;
       c8587: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8588: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829d_info" {
     sat_s829d_info:
         const sat_s829d_entry;
         const 4294967296;
         const 17;
 },
 sat_s829p_entry() //  [R1]
         { []
         }
     {offset
       c858h: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c858i; else goto c858j;
       c858i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c858j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829p_info" {
     sat_s829p_info:
         const sat_s829p_entry;
         const 4294967296;
         const 17;
 },
 sat_s829A_entry() //  [R1]
         { []
         }
     {offset
       c858P: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c858Q; else goto c858R;
       c858Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c858R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829A_info" {
     sat_s829A_info:
         const sat_s829A_entry;
         const 8589934593;
         const 15;
 },
 sat_s829y_entry() //  [R1]
         { []
         }
     {offset
       c858W: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c858X; else goto c858Y;
       c858X: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c858Y: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829y_info" {
     sat_s829y_info:
         const sat_s829y_entry;
         const 4294967296;
         const 17;
 },
 sat_s829B_entry() //  [R1]
         { []
         }
     {offset
       c8594: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8595; else goto c8596;
       c8595: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8596: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829B_info" {
     sat_s829B_info:
         const sat_s829B_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s829v_entry() //  [R1, R2]
         { []
         }
     {offset
       c859a: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c859e; else goto c859d;
       c859e: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c859d: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c8598; else goto c8599;
       c8598: // global
           _s829t::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829A_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829t::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c8599: // global
           I64[Hp - 80] = sat_s829B_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c859g::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c859g::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s829v_info" {
     go_dn_s829v_info:
         const go_dn_s829v_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s829C_entry() //  [R1]
         { []
         }
     {offset
       c859h: // global
           _s829C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c859i; else goto c859j;
       c859j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c859l; else goto c859k;
       c859l: // global
           HpAlloc = 24;
           goto c859i;
       c859i: // global
           R1 = _s829C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c859k: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829C::P64;
           _s828V::I64 = I64[_s829C::P64 + 24];
           _s829t::I64 = _s828V::I64 - I64[_s829C::P64 + 16];
           I64[Hp - 16] = go_dn_s829v_info;
           I64[Hp - 8] = _s829t::I64;
           I64[Hp] = 0 - _s829t::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s829v_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829C_info" {
     sat_s829C_info:
         const sat_s829C_entry;
         const 8589934592;
         const 20;
 },
 sat_s829s_entry() //  [R1]
         { []
         }
     {offset
       c859q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c859r; else goto c859s;
       c859r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c859s: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829s_info" {
     sat_s829s_info:
         const sat_s829s_entry;
         const 4294967296;
         const 17;
 },
 sat_s829E_entry() //  [R1]
         { []
         }
     {offset
       c859B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c859C; else goto c859D;
       c859C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c859D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829E_info" {
     sat_s829E_info:
         const sat_s829E_entry;
         const 4294967296;
         const 17;
 },
 sat_s829O_entry() //  [R1]
         { []
         }
     {offset
       c85a6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85a7; else goto c85a8;
       c85a7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85a8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829O_info" {
     sat_s829O_info:
         const sat_s829O_entry;
         const 8589934593;
         const 15;
 },
 sat_s829M_entry() //  [R1]
         { []
         }
     {offset
       c85ad: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ae; else goto c85af;
       c85ae: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85af: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829M_info" {
     sat_s829M_info:
         const sat_s829M_entry;
         const 4294967296;
         const 17;
 },
 sat_s829P_entry() //  [R1]
         { []
         }
     {offset
       c85al: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85am; else goto c85an;
       c85am: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85an: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829P_info" {
     sat_s829P_info:
         const sat_s829P_entry;
         const 4294967296;
         const 17;
 },
 go_up_s829J_entry() //  [R1, R2]
         { []
         }
     {offset
       c85ar: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85av; else goto c85au;
       c85av: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85au: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85ap; else goto c85aq;
       c85ap: // global
           _s829H::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s829O_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s829H::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829M_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85aq: // global
           I64[Hp - 80] = sat_s829P_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85ax::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85ax::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s829J_info" {
     go_up_s829J_info:
         const go_up_s829J_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s829Q_entry() //  [R1]
         { []
         }
     {offset
       c85ay: // global
           _s829Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85az; else goto c85aA;
       c85aA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85aC; else goto c85aB;
       c85aC: // global
           HpAlloc = 24;
           goto c85az;
       c85az: // global
           R1 = _s829Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85aB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s829Q::P64;
           _s828V::I64 = I64[_s829Q::P64 + 24];
           _s829H::I64 = _s828V::I64 - I64[_s829Q::P64 + 16];
           I64[Hp - 16] = go_up_s829J_info;
           I64[Hp - 8] = _s829H::I64;
           I64[Hp] = 0 - _s829H::I64;
           R2 = _s828V::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s829J_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829Q_info" {
     sat_s829Q_info:
         const sat_s829Q_entry;
         const 8589934592;
         const 20;
 },
 sat_s829G_entry() //  [R1]
         { []
         }
     {offset
       c85aH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85aI; else goto c85aJ;
       c85aI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85aJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829G_info" {
     sat_s829G_info:
         const sat_s829G_entry;
         const 4294967296;
         const 17;
 },
 sat_s829S_entry() //  [R1]
         { []
         }
     {offset
       c85aS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85aT; else goto c85aU;
       c85aT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85aU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829S_info" {
     sat_s829S_info:
         const sat_s829S_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c85b3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85b4; else goto c85b5;
       c85b4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c85b5: // global
           I64[Sp - 16] = block_c85aV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u85cn; else goto c85aW;
       u85cn: // global
           call _c85aV(R1) args: 0, res: 0, upd: 0;
       c85aW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c85aV() //  [R1]
         { []
         }
     {offset
       c85aV: // global
           _s828R::P64 = P64[Sp + 8];
           _c85b2::P64 = R1 & 7;
           if (_c85b2::P64 < 3) goto u85cf; else goto c85b1;
       u85cf: // global
           if (_c85b2::P64 < 2) goto c85aZ; else goto c85b0;
       c85aZ: // global
           _s828T::I64 = 0;
           goto s828S;
       c85b0: // global
           _s828T::I64 = 1;
           goto s828S;
       c85b1: // global
           _s828T::I64 = 2;
           goto s828S;
       s828S: // global
           I64[Sp] = block_c85b6_info;
           R1 = _s828R::P64;
           I64[Sp + 8] = _s828T::I64;
           if (R1 & 7 != 0) goto u85cm; else goto c85bQ;
       u85cm: // global
           call _c85b6(R1) args: 0, res: 0, upd: 0;
       c85bQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c85aV_info" {
     block_c85aV_info:
         const _c85aV;
         const 1;
         const 30;
 },
 _c85b6() //  [R1]
         { []
         }
     {offset
       c85b6: // global
           _c85ce::P64 = R1 & 7;
           if (_c85ce::P64 < 3) goto u85cg; else goto c85c4;
       u85cg: // global
           if (_c85ce::P64 < 2) goto c85bW; else goto c85c0;
       c85bW: // global
           I64[Sp] = 0;
           goto u85cq;
       c85c0: // global
           I64[Sp] = 1;
           goto u85cq;
       c85c4: // global
           I64[Sp] = 2;
           goto u85cq;
       u85cq: // global
           call _c855F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c85b6_info" {
     block_c85b6_info:
         const _c85b6;
         const 65;
         const 30;
 },
 _c855F() //  []
         { []
         }
     {offset
       c855F: // global
           Hp = Hp + 80;
           _s828V::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c85ba; else goto c85b9;
       c85ba: // global
           HpAlloc = 80;
           I64[Sp] = block_c855E_info;
           R1 = _s828V::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c85b9: // global
           _s828T::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s828T::I64,
                            _s828V::I64)) goto c85bv; else goto c85bP;
       c85bv: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c85bk; else goto c85bt;
       c85bk: // global
           if (%MO_S_Le_W64(2, _s828V::I64)) goto c85bd; else goto c85bi;
       c85bd: // global
           I64[Hp - 72] = sat_s8299_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s828Z_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bi: // global
           if (%MO_S_Gt_W64(2, _s828T::I64)) goto c85bM; else goto c85bg;
       c85bg: // global
           I64[Hp - 72] = sat_s829b_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85be::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85be::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bt: // global
           if (%MO_S_Ge_W64(2, _s828V::I64)) goto c85bn; else goto c85bs;
       c85bn: // global
           I64[Hp - 72] = sat_s829n_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829d_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bs: // global
           if (%MO_S_Lt_W64(2, _s828T::I64)) goto c85bM; else goto c85bq;
       c85bq: // global
           I64[Hp - 72] = sat_s829p_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85bo::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85bo::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bP: // global
           if (%MO_S_Lt_W64(_s828V::I64,
                            _s828T::I64)) goto c85bF; else goto c85bO;
       c85bF: // global
           if (%MO_S_Le_W64(0, _s828V::I64)) goto c85by; else goto c85bD;
       c85by: // global
           I64[Hp - 72] = sat_s829C_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829s_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bD: // global
           if (%MO_S_Gt_W64(0, _s828T::I64)) goto c85bM; else goto c85bB;
       c85bB: // global
           I64[Hp - 72] = sat_s829E_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85bz::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85bz::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bO: // global
           if (%MO_S_Ge_W64(0, _s828V::I64)) goto c85bI; else goto c85bN;
       c85bI: // global
           I64[Hp - 72] = sat_s829Q_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = _s828V::I64;
           I64[Hp - 40] = sat_s829G_info;
           I64[Hp - 24] = _s828T::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bN: // global
           if (%MO_S_Lt_W64(0, _s828T::I64)) goto c85bM; else goto c85bL;
       c85bM: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85bL: // global
           I64[Hp - 72] = sat_s829S_info;
           I64[Hp - 56] = _s828T::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85bJ::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85bJ::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c855E() //  [R1]
         { []
         }
     {offset
       c855E: // global
           I64[Sp] = R1;
           call _c855F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c855E_info" {
     block_c855E_info:
         const _c855E;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.1528449 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go2_closure" {
     GHC.IO.Device.$fEnumSeekMode_go2_closure:
         const GHC.IO.Device.$fEnumSeekMode_go2_info;
         const 0;
 },
 sat_s82a1_entry() //  [R1]
         { []
         }
     {offset
       c85gc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85gd; else goto c85ge;
       c85gd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85ge: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829Z::I64 = I64[R1 + 16];
           if (_s829Z::I64 != 0) goto c85ga; else goto c85gb;
       c85ga: // global
           R2 = _s829Z::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c85gb: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82a1_info" {
     sat_s82a1_info:
         const sat_s82a1_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+352;
 },
 sat_s829Y_entry() //  [R1]
         { []
         }
     {offset
       c85gq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85gr; else goto c85gz;
       c85gr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85gz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s829V::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s829V::I64, 0)) goto c85gx; else goto c85gp;
       c85gp: // global
           if (%MO_S_Gt_W64(_s829V::I64, 2)) goto c85gx; else goto c85gy;
       c85gx: // global
           R2 = _s829V::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85gy: // global
           R1 = I64[(_s829V::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s829Y_info" {
     sat_s829Y_info:
         const sat_s829Y_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_go2_entry() //  [R2]
         { []
         }
     {offset
       c85gB: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c85gF; else goto c85gE;
       c85gF: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85gE: // global
           I64[Hp - 64] = sat_s82a1_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s829Y_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go2_info" {
     GHC.IO.Device.$fEnumSeekMode_go2_info:
         const GHC.IO.Device.$fEnumSeekMode_go2_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const S82hF_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.163928474 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go1_closure" {
     GHC.IO.Device.$fEnumSeekMode_go1_closure:
         const GHC.IO.Device.$fEnumSeekMode_go1_info;
         const 0;
 },
 sat_s82a8_entry() //  [R1]
         { []
         }
     {offset
       c85ha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85hb; else goto c85hc;
       c85hb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85hc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a6::I64 = I64[R1 + 16];
           if (_s82a6::I64 != 1) goto c85h8; else goto c85h9;
       c85h8: // global
           R2 = _s82a6::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c85h9: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82a8_info" {
     sat_s82a8_info:
         const sat_s82a8_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+360;
 },
 sat_s82a5_entry() //  [R1]
         { []
         }
     {offset
       c85ho: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85hp; else goto c85hx;
       c85hp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85hx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a2::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a2::I64, 0)) goto c85hv; else goto c85hn;
       c85hn: // global
           if (%MO_S_Gt_W64(_s82a2::I64, 2)) goto c85hv; else goto c85hw;
       c85hv: // global
           R2 = _s82a2::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85hw: // global
           R1 = I64[(_s82a2::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82a5_info" {
     sat_s82a5_info:
         const sat_s82a5_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c85hz: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c85hD; else goto c85hC;
       c85hD: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85hC: // global
           I64[Hp - 64] = sat_s82a8_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82a5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go1_info" {
     GHC.IO.Device.$fEnumSeekMode_go1_info:
         const GHC.IO.Device.$fEnumSeekMode_go1_entry;
         const 0;
         const 1103806595086;
         const 4294967300;
         const S82hF_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.172285374 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go_closure" {
     GHC.IO.Device.$fEnumSeekMode_go_closure:
         const GHC.IO.Device.$fEnumSeekMode_go_info;
         const 0;
 },
 sat_s82af_entry() //  [R1]
         { []
         }
     {offset
       c85i8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85i9; else goto c85ia;
       c85i9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85ia: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ad::I64 = I64[R1 + 16];
           if (_s82ad::I64 != 2) goto c85i6; else goto c85i7;
       c85i6: // global
           R2 = _s82ad::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c85i7: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82af_info" {
     sat_s82af_info:
         const sat_s82af_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+368;
 },
 sat_s82ac_entry() //  [R1]
         { []
         }
     {offset
       c85im: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85in; else goto c85iv;
       c85in: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85iv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82a9::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82a9::I64, 0)) goto c85it; else goto c85il;
       c85il: // global
           if (%MO_S_Gt_W64(_s82a9::I64, 2)) goto c85it; else goto c85iu;
       c85it: // global
           R2 = _s82a9::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85iu: // global
           R1 = I64[(_s82a9::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82ac_info" {
     sat_s82ac_info:
         const sat_s82ac_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_go_entry() //  [R2]
         { []
         }
     {offset
       c85ix: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c85iB; else goto c85iA;
       c85iB: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85iA: // global
           I64[Hp - 64] = sat_s82af_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82ac_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go_info" {
     GHC.IO.Device.$fEnumSeekMode_go_info:
         const GHC.IO.Device.$fEnumSeekMode_go_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const S82hF_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.180983548 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c85j8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85j9; else goto c85ja;
       c85j9: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c85ja: // global
           I64[Sp - 16] = block_c85j0_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u85jX; else goto c85j1;
       u85jX: // global
           call _c85j0(R1) args: 0, res: 0, upd: 0;
       c85j1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S82hF_srt+352;
 },
 _c85j0() //  [R1]
         { []
         }
     {offset
       c85j0: // global
           _s82ah::P64 = P64[Sp + 8];
           _c85j7::P64 = R1 & 7;
           if (_c85j7::P64 < 3) goto u85jU; else goto c85j6;
       u85jU: // global
           if (_c85j7::P64 < 2) goto c85j4; else goto c85j5;
       c85j4: // global
           _s82aj::I64 = 0;
           goto s82ai;
       c85j5: // global
           _s82aj::I64 = 1;
           goto s82ai;
       c85j6: // global
           _s82aj::I64 = 2;
           goto s82ai;
       s82ai: // global
           I64[Sp] = block_c85je_info;
           R1 = _s82ah::P64;
           I64[Sp + 8] = _s82aj::I64;
           if (R1 & 7 != 0) goto u85jW; else goto c85jg;
       u85jW: // global
           call _c85je(R1) args: 0, res: 0, upd: 0;
       c85jg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c85j0_info" {
     block_c85j0_info:
         const _c85j0;
         const 1;
         const 30064771102;
         const S82hF_srt+352;
 },
 _c85je() //  [R1]
         { []
         }
     {offset
       c85je: // global
           _s82aj::I64 = I64[Sp + 8];
           _c85jT::P64 = R1 & 7;
           if (_c85jT::P64 < 3) goto u85jV; else goto c85jJ;
       u85jV: // global
           if (_c85jT::P64 < 2) goto c85jr; else goto c85jA;
       c85jr: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 0)) goto c85jI; else goto c85jo;
       c85jo: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c85jA: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 1)) goto c85jI; else goto c85jy;
       c85jy: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c85jJ: // global
           if (%MO_S_Gt_W64(_s82aj::I64, 2)) goto c85jI; else goto c85jH;
       c85jI: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85jH: // global
           R2 = _s82aj::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85je_info" {
     block_c85je_info:
         const _c85je;
         const 65;
         const 30064771102;
         const S82hF_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.217029631 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s82aL_entry() //  [R1]
         { []
         }
     {offset
       c85l1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85l2; else goto c85l3;
       c85l2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85l3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82aL_info" {
     sat_s82aL_info:
         const sat_s82aL_entry;
         const 8589934593;
         const 4294967311;
         const S82hF_srt+296;
 },
 sat_s82aJ_entry() //  [R1]
         { []
         }
     {offset
       c85ld: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85le; else goto c85lm;
       c85le: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85lm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c85lk; else goto c85lc;
       c85lc: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c85lk; else goto c85ll;
       c85lk: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85ll: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82aJ_info" {
     sat_s82aJ_info:
         const sat_s82aJ_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82aO_entry() //  [R1]
         { []
         }
     {offset
       c85lx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ly; else goto c85lG;
       c85ly: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85lG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82aF::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82aF::I64, 0)) goto c85lE; else goto c85lw;
       c85lw: // global
           if (%MO_S_Gt_W64(_s82aF::I64, 2)) goto c85lE; else goto c85lF;
       c85lE: // global
           R2 = _s82aF::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85lF: // global
           R1 = I64[(_s82aF::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82aO_info" {
     sat_s82aO_info:
         const sat_s82aO_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 go_dn_s82aE_entry() //  [R1, R2]
         { []
         }
     {offset
       c85lK: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85lO; else goto c85lN;
       c85lO: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85lN: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c85lI; else goto c85lJ;
       c85lI: // global
           _s82aC::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82aL_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aC::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82aJ_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85lJ: // global
           I64[Hp - 80] = sat_s82aO_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85lQ::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85lQ::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s82aE_info" {
     go_dn_s82aE_info:
         const go_dn_s82aE_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S82hF_srt+296;
 },
 sat_s82aP_entry() //  [R1]
         { []
         }
     {offset
       c85lR: // global
           _s82aP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85lS; else goto c85lT;
       c85lT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85lV; else goto c85lU;
       c85lV: // global
           HpAlloc = 24;
           goto c85lS;
       c85lS: // global
           R1 = _s82aP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85lU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82aP::P64;
           _s82av::I64 = I64[_s82aP::P64 + 24];
           _s82aC::I64 = _s82av::I64 - I64[_s82aP::P64 + 16];
           I64[Hp - 16] = go_dn_s82aE_info;
           I64[Hp - 8] = _s82aC::I64;
           I64[Hp] = 0 - _s82aC::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82aE_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82aP_info" {
     sat_s82aP_info:
         const sat_s82aP_entry;
         const 8589934592;
         const 4294967316;
         const S82hF_srt+296;
 },
 sat_s82aB_entry() //  [R1]
         { []
         }
     {offset
       c85m5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85m6; else goto c85me;
       c85m6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85me: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85mc; else goto c85m4;
       c85m4: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85mc; else goto c85md;
       c85mc: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85md: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82aB_info" {
     sat_s82aB_info:
         const sat_s82aB_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82aT_entry() //  [R1]
         { []
         }
     {offset
       c85ms: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85mt; else goto c85mB;
       c85mt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85mB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85mz; else goto c85mr;
       c85mr: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85mz; else goto c85mA;
       c85mz: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85mA: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82aT_info" {
     sat_s82aT_info:
         const sat_s82aT_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82b7_entry() //  [R1]
         { []
         }
     {offset
       c85n4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85n5; else goto c85n6;
       c85n5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85n6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82b7_info" {
     sat_s82b7_info:
         const sat_s82b7_entry;
         const 8589934593;
         const 4294967311;
         const S82hF_srt+296;
 },
 sat_s82b5_entry() //  [R1]
         { []
         }
     {offset
       c85ng: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85nh; else goto c85np;
       c85nh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85np: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c85nn; else goto c85nf;
       c85nf: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c85nn; else goto c85no;
       c85nn: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85no: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82b5_info" {
     sat_s82b5_info:
         const sat_s82b5_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82ba_entry() //  [R1]
         { []
         }
     {offset
       c85nA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85nB; else goto c85nJ;
       c85nB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85nJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82b1::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82b1::I64, 0)) goto c85nH; else goto c85nz;
       c85nz: // global
           if (%MO_S_Gt_W64(_s82b1::I64, 2)) goto c85nH; else goto c85nI;
       c85nH: // global
           R2 = _s82b1::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85nI: // global
           R1 = I64[(_s82b1::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82ba_info" {
     sat_s82ba_info:
         const sat_s82ba_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 go_up_s82b0_entry() //  [R1, R2]
         { []
         }
     {offset
       c85nN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85nR; else goto c85nQ;
       c85nR: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85nQ: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85nL; else goto c85nM;
       c85nL: // global
           _s82aY::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82b7_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82aY::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82b5_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85nM: // global
           I64[Hp - 80] = sat_s82ba_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85nT::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85nT::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s82b0_info" {
     go_up_s82b0_info:
         const go_up_s82b0_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S82hF_srt+296;
 },
 sat_s82bb_entry() //  [R1]
         { []
         }
     {offset
       c85nU: // global
           _s82bb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85nV; else goto c85nW;
       c85nW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85nY; else goto c85nX;
       c85nY: // global
           HpAlloc = 24;
           goto c85nV;
       c85nV: // global
           R1 = _s82bb::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85nX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bb::P64;
           _s82av::I64 = I64[_s82bb::P64 + 24];
           _s82aY::I64 = _s82av::I64 - I64[_s82bb::P64 + 16];
           I64[Hp - 16] = go_up_s82b0_info;
           I64[Hp - 8] = _s82aY::I64;
           I64[Hp] = 0 - _s82aY::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82b0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bb_info" {
     sat_s82bb_info:
         const sat_s82bb_entry;
         const 8589934592;
         const 4294967316;
         const S82hF_srt+296;
 },
 sat_s82aX_entry() //  [R1]
         { []
         }
     {offset
       c85o8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85o9; else goto c85oh;
       c85o9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85oh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85of; else goto c85o7;
       c85o7: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85of; else goto c85og;
       c85of: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85og: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82aX_info" {
     sat_s82aX_info:
         const sat_s82aX_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82bf_entry() //  [R1]
         { []
         }
     {offset
       c85ov: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ow; else goto c85oE;
       c85ow: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85oE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85oC; else goto c85ou;
       c85ou: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85oC; else goto c85oD;
       c85oC: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85oD: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bf_info" {
     sat_s82bf_info:
         const sat_s82bf_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82bu_entry() //  [R1]
         { []
         }
     {offset
       c85pb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85pc; else goto c85pd;
       c85pc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85pd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bu_info" {
     sat_s82bu_info:
         const sat_s82bu_entry;
         const 8589934593;
         const 4294967311;
         const S82hF_srt+296;
 },
 sat_s82bs_entry() //  [R1]
         { []
         }
     {offset
       c85pn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85po; else goto c85pw;
       c85po: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85pw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c85pu; else goto c85pm;
       c85pm: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c85pu; else goto c85pv;
       c85pu: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85pv: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bs_info" {
     sat_s82bs_info:
         const sat_s82bs_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82bx_entry() //  [R1]
         { []
         }
     {offset
       c85pH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85pI; else goto c85pQ;
       c85pI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85pQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bo::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bo::I64, 0)) goto c85pO; else goto c85pG;
       c85pG: // global
           if (%MO_S_Gt_W64(_s82bo::I64, 2)) goto c85pO; else goto c85pP;
       c85pO: // global
           R2 = _s82bo::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85pP: // global
           R1 = I64[(_s82bo::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bx_info" {
     sat_s82bx_info:
         const sat_s82bx_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 go_dn_s82bn_entry() //  [R1, R2]
         { []
         }
     {offset
       c85pU: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85pY; else goto c85pX;
       c85pY: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85pX: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c85pS; else goto c85pT;
       c85pS: // global
           _s82bl::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bu_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bl::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bs_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85pT: // global
           I64[Hp - 80] = sat_s82bx_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85q0::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85q0::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s82bn_info" {
     go_dn_s82bn_info:
         const go_dn_s82bn_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S82hF_srt+296;
 },
 sat_s82by_entry() //  [R1]
         { []
         }
     {offset
       c85q1: // global
           _s82by::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85q2; else goto c85q3;
       c85q3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85q5; else goto c85q4;
       c85q5: // global
           HpAlloc = 24;
           goto c85q2;
       c85q2: // global
           R1 = _s82by::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85q4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82by::P64;
           _s82av::I64 = I64[_s82by::P64 + 24];
           _s82bl::I64 = _s82av::I64 - I64[_s82by::P64 + 16];
           I64[Hp - 16] = go_dn_s82bn_info;
           I64[Hp - 8] = _s82bl::I64;
           I64[Hp] = 1 - _s82bl::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82bn_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82by_info" {
     sat_s82by_info:
         const sat_s82by_entry;
         const 8589934592;
         const 4294967316;
         const S82hF_srt+296;
 },
 sat_s82bk_entry() //  [R1]
         { []
         }
     {offset
       c85qf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85qg; else goto c85qo;
       c85qg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85qo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85qm; else goto c85qe;
       c85qe: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85qm; else goto c85qn;
       c85qm: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85qn: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bk_info" {
     sat_s82bk_info:
         const sat_s82bk_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82bC_entry() //  [R1]
         { []
         }
     {offset
       c85qC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85qD; else goto c85qL;
       c85qD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85qL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85qJ; else goto c85qB;
       c85qB: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85qJ; else goto c85qK;
       c85qJ: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85qK: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bC_info" {
     sat_s82bC_info:
         const sat_s82bC_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82bQ_entry() //  [R1]
         { []
         }
     {offset
       c85re: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85rf; else goto c85rg;
       c85rf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85rg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bQ_info" {
     sat_s82bQ_info:
         const sat_s82bQ_entry;
         const 8589934593;
         const 4294967311;
         const S82hF_srt+296;
 },
 sat_s82bO_entry() //  [R1]
         { []
         }
     {offset
       c85rq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85rr; else goto c85rz;
       c85rr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85rz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c85rx; else goto c85rp;
       c85rp: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c85rx; else goto c85ry;
       c85rx: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85ry: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bO_info" {
     sat_s82bO_info:
         const sat_s82bO_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82bT_entry() //  [R1]
         { []
         }
     {offset
       c85rK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85rL; else goto c85rT;
       c85rL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85rT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82bK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82bK::I64, 0)) goto c85rR; else goto c85rJ;
       c85rJ: // global
           if (%MO_S_Gt_W64(_s82bK::I64, 2)) goto c85rR; else goto c85rS;
       c85rR: // global
           R2 = _s82bK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85rS: // global
           R1 = I64[(_s82bK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bT_info" {
     sat_s82bT_info:
         const sat_s82bT_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 go_up_s82bJ_entry() //  [R1, R2]
         { []
         }
     {offset
       c85rX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85s1; else goto c85s0;
       c85s1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85s0: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85rV; else goto c85rW;
       c85rV: // global
           _s82bH::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82bQ_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82bH::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82bO_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85rW: // global
           I64[Hp - 80] = sat_s82bT_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85s3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85s3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s82bJ_info" {
     go_up_s82bJ_info:
         const go_up_s82bJ_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S82hF_srt+296;
 },
 sat_s82bU_entry() //  [R1]
         { []
         }
     {offset
       c85s4: // global
           _s82bU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85s5; else goto c85s6;
       c85s6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85s8; else goto c85s7;
       c85s8: // global
           HpAlloc = 24;
           goto c85s5;
       c85s5: // global
           R1 = _s82bU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85s7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82bU::P64;
           _s82av::I64 = I64[_s82bU::P64 + 24];
           _s82bH::I64 = _s82av::I64 - I64[_s82bU::P64 + 16];
           I64[Hp - 16] = go_up_s82bJ_info;
           I64[Hp - 8] = _s82bH::I64;
           I64[Hp] = 1 - _s82bH::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82bJ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bU_info" {
     sat_s82bU_info:
         const sat_s82bU_entry;
         const 8589934592;
         const 4294967316;
         const S82hF_srt+296;
 },
 sat_s82bG_entry() //  [R1]
         { []
         }
     {offset
       c85si: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85sj; else goto c85sr;
       c85sj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85sr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85sp; else goto c85sh;
       c85sh: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85sp; else goto c85sq;
       c85sp: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85sq: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bG_info" {
     sat_s82bG_info:
         const sat_s82bG_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82bY_entry() //  [R1]
         { []
         }
     {offset
       c85sF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85sG; else goto c85sO;
       c85sG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85sO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85sM; else goto c85sE;
       c85sE: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85sM; else goto c85sN;
       c85sM: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85sN: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82bY_info" {
     sat_s82bY_info:
         const sat_s82bY_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82cd_entry() //  [R1]
         { []
         }
     {offset
       c85tl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85tm; else goto c85tn;
       c85tm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85tn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cd_info" {
     sat_s82cd_info:
         const sat_s82cd_entry;
         const 8589934593;
         const 4294967311;
         const S82hF_srt+296;
 },
 sat_s82cb_entry() //  [R1]
         { []
         }
     {offset
       c85tx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85ty; else goto c85tG;
       c85ty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85tG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c85tE; else goto c85tw;
       c85tw: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c85tE; else goto c85tF;
       c85tE: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85tF: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cb_info" {
     sat_s82cb_info:
         const sat_s82cb_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82cg_entry() //  [R1]
         { []
         }
     {offset
       c85tR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85tS; else goto c85u0;
       c85tS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85u0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82c7::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82c7::I64, 0)) goto c85tY; else goto c85tQ;
       c85tQ: // global
           if (%MO_S_Gt_W64(_s82c7::I64, 2)) goto c85tY; else goto c85tZ;
       c85tY: // global
           R2 = _s82c7::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85tZ: // global
           R1 = I64[(_s82c7::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cg_info" {
     sat_s82cg_info:
         const sat_s82cg_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 go_dn_s82c6_entry() //  [R1, R2]
         { []
         }
     {offset
       c85u4: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85u8; else goto c85u7;
       c85u8: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85u7: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c85u2; else goto c85u3;
       c85u2: // global
           _s82c4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cd_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82c4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cb_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85u3: // global
           I64[Hp - 80] = sat_s82cg_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85ua::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85ua::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s82c6_info" {
     go_dn_s82c6_info:
         const go_dn_s82c6_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S82hF_srt+296;
 },
 sat_s82ch_entry() //  [R1]
         { []
         }
     {offset
       c85ub: // global
           _s82ch::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85uc; else goto c85ud;
       c85ud: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85uf; else goto c85ue;
       c85uf: // global
           HpAlloc = 24;
           goto c85uc;
       c85uc: // global
           R1 = _s82ch::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85ue: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82ch::P64;
           _s82av::I64 = I64[_s82ch::P64 + 24];
           _s82c4::I64 = _s82av::I64 - I64[_s82ch::P64 + 16];
           I64[Hp - 16] = go_dn_s82c6_info;
           I64[Hp - 8] = _s82c4::I64;
           I64[Hp] = 2 - _s82c4::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s82c6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82ch_info" {
     sat_s82ch_info:
         const sat_s82ch_entry;
         const 8589934592;
         const 4294967316;
         const S82hF_srt+296;
 },
 sat_s82c3_entry() //  [R1]
         { []
         }
     {offset
       c85up: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85uq; else goto c85uy;
       c85uq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85uy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85uw; else goto c85uo;
       c85uo: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85uw; else goto c85ux;
       c85uw: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85ux: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82c3_info" {
     sat_s82c3_info:
         const sat_s82c3_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82cl_entry() //  [R1]
         { []
         }
     {offset
       c85uM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85uN; else goto c85uV;
       c85uN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85uV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85uT; else goto c85uL;
       c85uL: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85uT; else goto c85uU;
       c85uT: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85uU: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cl_info" {
     sat_s82cl_info:
         const sat_s82cl_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82cz_entry() //  [R1]
         { []
         }
     {offset
       c85vo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85vp; else goto c85vq;
       c85vp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85vq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cz_info" {
     sat_s82cz_info:
         const sat_s82cz_entry;
         const 8589934593;
         const 4294967311;
         const S82hF_srt+296;
 },
 sat_s82cx_entry() //  [R1]
         { []
         }
     {offset
       c85vA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85vB; else goto c85vJ;
       c85vB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85vJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c85vH; else goto c85vz;
       c85vz: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c85vH; else goto c85vI;
       c85vH: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85vI: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cx_info" {
     sat_s82cx_info:
         const sat_s82cx_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82cC_entry() //  [R1]
         { []
         }
     {offset
       c85vU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85vV; else goto c85w3;
       c85vV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85w3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82ct::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82ct::I64, 0)) goto c85w1; else goto c85vT;
       c85vT: // global
           if (%MO_S_Gt_W64(_s82ct::I64, 2)) goto c85w1; else goto c85w2;
       c85w1: // global
           R2 = _s82ct::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85w2: // global
           R1 = I64[(_s82ct::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cC_info" {
     sat_s82cC_info:
         const sat_s82cC_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 go_up_s82cs_entry() //  [R1, R2]
         { []
         }
     {offset
       c85w7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c85wb; else goto c85wa;
       c85wb: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85wa: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c85w5; else goto c85w6;
       c85w5: // global
           _s82cq::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s82cz_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s82cq::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s82cx_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85w6: // global
           I64[Hp - 80] = sat_s82cC_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c85wd::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c85wd::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s82cs_info" {
     go_up_s82cs_info:
         const go_up_s82cs_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S82hF_srt+296;
 },
 sat_s82cD_entry() //  [R1]
         { []
         }
     {offset
       c85we: // global
           _s82cD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c85wf; else goto c85wg;
       c85wg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c85wi; else goto c85wh;
       c85wi: // global
           HpAlloc = 24;
           goto c85wf;
       c85wf: // global
           R1 = _s82cD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85wh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s82cD::P64;
           _s82av::I64 = I64[_s82cD::P64 + 24];
           _s82cq::I64 = _s82av::I64 - I64[_s82cD::P64 + 16];
           I64[Hp - 16] = go_up_s82cs_info;
           I64[Hp - 8] = _s82cq::I64;
           I64[Hp] = 2 - _s82cq::I64;
           R2 = _s82av::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s82cs_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cD_info" {
     sat_s82cD_info:
         const sat_s82cD_entry;
         const 8589934592;
         const 4294967316;
         const S82hF_srt+296;
 },
 sat_s82cp_entry() //  [R1]
         { []
         }
     {offset
       c85ws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85wt; else goto c85wB;
       c85wt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85wB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85wz; else goto c85wr;
       c85wr: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85wz; else goto c85wA;
       c85wz: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85wA: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cp_info" {
     sat_s82cp_info:
         const sat_s82cp_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 sat_s82cH_entry() //  [R1]
         { []
         }
     {offset
       c85wP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c85wQ; else goto c85wY;
       c85wQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c85wY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s82at::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s82at::I64, 0)) goto c85wW; else goto c85wO;
       c85wO: // global
           if (%MO_S_Gt_W64(_s82at::I64, 2)) goto c85wW; else goto c85wX;
       c85wW: // global
           R2 = _s82at::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c85wX: // global
           R1 = I64[(_s82at::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s82cH_info" {
     sat_s82cH_info:
         const sat_s82cH_entry;
         const 4294967296;
         const 4294967313;
         const S82hF_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c85x7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c85x8; else goto c85x9;
       c85x8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c85x9: // global
           I64[Sp - 24] = block_c85wZ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u85yP; else goto c85x0;
       u85yP: // global
           call _c85wZ(R1) args: 0, res: 0, upd: 0;
       c85x0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const S82hF_srt+296;
 },
 _c85wZ() //  [R1]
         { []
         }
     {offset
       c85wZ: // global
           _s82aq::P64 = P64[Sp + 8];
           _c85x6::P64 = R1 & 7;
           if (_c85x6::P64 < 3) goto u85yM; else goto c85x5;
       u85yM: // global
           if (_c85x6::P64 < 2) goto c85x3; else goto c85x4;
       c85x3: // global
           _s82at::I64 = 0;
           goto s82as;
       c85x4: // global
           _s82at::I64 = 1;
           goto s82as;
       c85x5: // global
           _s82at::I64 = 2;
           goto s82as;
       s82as: // global
           I64[Sp] = block_c85xa_info;
           R1 = _s82aq::P64;
           I64[Sp + 8] = _s82at::I64;
           if (R1 & 7 != 0) goto u85yO; else goto c85yl;
       u85yO: // global
           call _c85xa(R1) args: 0, res: 0, upd: 0;
       c85yl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c85wZ_info" {
     block_c85wZ_info:
         const _c85wZ;
         const 2;
         const 4294967326;
         const S82hF_srt+296;
 },
 _c85xa() //  [R1]
         { []
         }
     {offset
       c85xa: // global
           _s82ar::P64 = P64[Sp + 16];
           _c85yJ::P64 = R1 & 7;
           if (_c85yJ::P64 < 3) goto u85yN; else goto c85yz;
       u85yN: // global
           if (_c85yJ::P64 < 2) goto c85yr; else goto c85yv;
       c85yr: // global
           _s82av::I64 = 0;
           goto s82au;
       c85yv: // global
           _s82av::I64 = 1;
           goto s82au;
       c85yz: // global
           _s82av::I64 = 2;
           goto s82au;
       s82au: // global
           I64[Sp] = block_c85ks_info;
           R1 = _s82ar::P64;
           I64[Sp + 16] = _s82av::I64;
           if (R1 & 7 != 0) goto u85yQ; else goto c85kt;
       u85yQ: // global
           call _c85ks(R1) args: 0, res: 0, upd: 0;
       c85kt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c85xa_info" {
     block_c85xa_info:
         const _c85xa;
         const 66;
         const 4294967326;
         const S82hF_srt+296;
 },
 _c85ks() //  [R1]
         { []
         }
     {offset
       c85ks: // global
           _s82at::I64 = I64[Sp + 8];
           _s82av::I64 = I64[Sp + 16];
           _c85yK::P64 = R1 & 7;
           if (_c85yK::P64 < 3) goto u85yL; else goto c85xY;
       u85yL: // global
           if (_c85yK::P64 < 2) goto c85xe; else goto c85xB;
       c85xe: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c85y1; else goto c85xg;
       c85xg: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c85xr; else goto c85xA;
       c85xr: // global
           if (%MO_S_Le_W64(0, _s82av::I64)) goto c85xk; else goto c85xp;
       c85xk: // global
           I64[Hp - 72] = sat_s82aP_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aB_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xp: // global
           if (%MO_S_Gt_W64(0, _s82at::I64)) goto c85yi; else goto c85xn;
       c85xn: // global
           I64[Hp - 72] = sat_s82aT_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xl::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xl::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xA: // global
           if (%MO_S_Ge_W64(0, _s82av::I64)) goto c85xu; else goto c85xz;
       c85xu: // global
           I64[Hp - 72] = sat_s82bb_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82aX_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xz: // global
           if (%MO_S_Lt_W64(0, _s82at::I64)) goto c85yi; else goto c85xx;
       c85xx: // global
           I64[Hp - 72] = sat_s82bf_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xv::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xv::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xB: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c85y1; else goto c85xD;
       c85xD: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c85xO; else goto c85xX;
       c85xO: // global
           if (%MO_S_Le_W64(1, _s82av::I64)) goto c85xH; else goto c85xM;
       c85xH: // global
           I64[Hp - 72] = sat_s82by_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bk_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xM: // global
           if (%MO_S_Gt_W64(1, _s82at::I64)) goto c85yi; else goto c85xK;
       c85xK: // global
           I64[Hp - 72] = sat_s82bC_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xI::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xI::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xX: // global
           if (%MO_S_Ge_W64(1, _s82av::I64)) goto c85xR; else goto c85xW;
       c85xR: // global
           I64[Hp - 72] = sat_s82bU_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82bG_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xW: // global
           if (%MO_S_Lt_W64(1, _s82at::I64)) goto c85yi; else goto c85xU;
       c85xU: // global
           I64[Hp - 72] = sat_s82bY_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85xS::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85xS::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85xY: // global
           Hp = Hp + 80;
           _s82aw::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c85y1; else goto c85y0;
       c85y1: // global
           HpAlloc = 80;
           R1 = _s82aw::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c85y0: // global
           if (%MO_S_Lt_W64(_s82av::I64,
                            _s82at::I64)) goto c85yb; else goto c85yk;
       c85yb: // global
           if (%MO_S_Le_W64(2, _s82av::I64)) goto c85y4; else goto c85y9;
       c85y4: // global
           I64[Hp - 72] = sat_s82ch_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82c3_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85y9: // global
           if (%MO_S_Gt_W64(2, _s82at::I64)) goto c85yi; else goto c85y7;
       c85y7: // global
           I64[Hp - 72] = sat_s82cl_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85y5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85y5::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85yk: // global
           if (%MO_S_Ge_W64(2, _s82av::I64)) goto c85ye; else goto c85yj;
       c85ye: // global
           I64[Hp - 72] = sat_s82cD_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = _s82av::I64;
           I64[Hp - 40] = sat_s82cp_info;
           I64[Hp - 24] = _s82at::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85yj: // global
           if (%MO_S_Lt_W64(2, _s82at::I64)) goto c85yi; else goto c85yh;
       c85yi: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c85yh: // global
           I64[Hp - 72] = sat_s82cH_info;
           I64[Hp - 56] = _s82at::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c85yf::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c85yf::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85ks_info" {
     block_c85ks_info:
         const _c85ks;
         const 194;
         const 4294967326;
         const S82hF_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.312278482 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_closure" {
     GHC.IO.Device.$fEnumSeekMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.314076116 UTC

[section ""data" . GHC.IO.Device.$trModule3_closure" {
     GHC.IO.Device.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.315660137 UTC

[section ""data" . GHC.IO.Device.$trModule1_closure" {
     GHC.IO.Device.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.317368871 UTC

[section ""data" . GHC.IO.Device.$trModule_closure" {
     GHC.IO.Device.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Device.$trModule3_closure+1;
         const GHC.IO.Device.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.319174953 UTC

[section ""data" . $krep_r81ZU_closure" {
     $krep_r81ZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.320867303 UTC

[section ""data" . $krep1_r81ZV_closure" {
     $krep1_r81ZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.322627468 UTC

[section ""data" . $krep2_r81ZW_closure" {
     $krep2_r81ZW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.324282284 UTC

[section ""data" . $krep3_r81ZX_closure" {
     $krep3_r81ZX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.325951039 UTC

[section ""data" . $krep4_r81ZY_closure" {
     $krep4_r81ZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.327679862 UTC

[section ""data" . $krep5_r81ZZ_closure" {
     $krep5_r81ZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.329317421 UTC

[section ""data" . $krep6_r8200_closure" {
     $krep6_r8200_closure:
         const :_con_info;
         const $krep3_r81ZX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.330978361 UTC

[section ""data" . $krep7_r8201_closure" {
     $krep7_r8201_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.333220364 UTC

[section ""data" . $krep8_r8202_closure" {
     $krep8_r8202_closure:
         const :_con_info;
         const $krep1_r81ZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.334886707 UTC

[section ""data" . $krep9_r8203_closure" {
     $krep9_r8203_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r8202_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.336480767 UTC

[section ""data" . $krep10_r8204_closure" {
     $krep10_r8204_closure:
         const :_con_info;
         const $krep2_r81ZW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.338446987 UTC

[section ""data" . $krep11_r8205_closure" {
     $krep11_r8205_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep10_r8204_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.340062069 UTC

[section ""data" . $krep12_r8206_closure" {
     $krep12_r8206_closure:
         const :_con_info;
         const $krep4_r81ZY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.341712118 UTC

[section ""data" . $krep13_r8207_closure" {
     $krep13_r8207_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r8206_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.343351148 UTC

[section ""data" . $krep14_r8208_closure" {
     $krep14_r8208_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.345019796 UTC

[section ""data" . $krep15_r8209_closure" {
     $krep15_r8209_closure:
         const :_con_info;
         const $krep14_r8208_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.346745297 UTC

[section ""data" . $krep16_r820a_closure" {
     $krep16_r820a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep15_r8209_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.348459436 UTC

[section ""data" . $krep17_r820b_closure" {
     $krep17_r820b_closure:
         const :_con_info;
         const $krep_r81ZU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.350160429 UTC

[section ""data" . $krep18_r820c_closure" {
     $krep18_r820c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep17_r820b_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.351932244 UTC

[section ""data" . $krep19_r820d_closure" {
     $krep19_r820d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.354628651 UTC

[section ""data" . $krep20_r820e_closure" {
     $krep20_r820e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep7_r8201_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.356380034 UTC

[section ""data" . $krep21_r820f_closure" {
     $krep21_r820f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.358765223 UTC

[section ""data" . $krep22_r820g_closure" {
     $krep22_r820g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep16_r820a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.360440173 UTC

[section ""data" . $krep23_r820h_closure" {
     $krep23_r820h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.363555498 UTC

[section ""data" . $krep24_r820i_closure" {
     $krep24_r820i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep21_r820f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.365305864 UTC

[section ""data" . $krep25_r820j_closure" {
     $krep25_r820j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r81ZV_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.367051235 UTC

[section ""data" . $krep26_r820k_closure" {
     $krep26_r820k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep19_r820d_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.368737759 UTC

[section ""data" . $krep27_r820l_closure" {
     $krep27_r820l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep20_r820e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.370418545 UTC

[section ""data" . $krep28_r820m_closure" {
     $krep28_r820m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep22_r820g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.372108059 UTC

[section ""data" . GHC.IO.Device.$tcIODevice1_closure" {
     GHC.IO.Device.$tcIODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep5_r81ZZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.374539136 UTC

[section ""data" . $krep29_r820n_closure" {
     $krep29_r820n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.376199762 UTC

[section ""data" . $krep30_r820o_closure" {
     $krep30_r820o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep28_r820m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.37800948 UTC

[section ""data" . $krep31_r820p_closure" {
     $krep31_r820p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep27_r820l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.37967354 UTC

[section ""data" . $krep32_r820q_closure" {
     $krep32_r820q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep26_r820k_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.381734266 UTC

[section ""data" . $krep33_r820r_closure" {
     $krep33_r820r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.383470753 UTC

[section ""data" . $krep34_r820s_closure" {
     $krep34_r820s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep24_r820i_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.385751682 UTC

[section ""data" . $krep35_r820t_closure" {
     $krep35_r820t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep23_r820h_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.387474378 UTC

[section ""data" . $krep36_r820u_closure" {
     $krep36_r820u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.389128203 UTC

[section ""data" . $krep37_r820v_closure" {
     $krep37_r820v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.390898804 UTC

[section ""data" . $krep38_r820w_closure" {
     $krep38_r820w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep9_r8203_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.392637521 UTC

[section ""data" . $krep39_r820x_closure" {
     $krep39_r820x_closure:
         const :_con_info;
         const $krep29_r820n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.394764113 UTC

[section ""data" . $krep40_r820y_closure" {
     $krep40_r820y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.396488418 UTC

[section ""data" . $krep41_r820z_closure" {
     $krep41_r820z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep40_r820y_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.398252341 UTC

[section ""data" . $krep42_r820A_closure" {
     $krep42_r820A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep41_r820z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.399922543 UTC

[section ""cstring" . GHC.IO.Device.$tcRawIO2_bytes" {
     GHC.IO.Device.$tcRawIO2_bytes:
         I8[] [82,97,119,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.401550094 UTC

[section ""data" . GHC.IO.Device.$tcRawIO1_closure" {
     GHC.IO.Device.$tcRawIO1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcRawIO2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.403323818 UTC

[section ""data" . GHC.IO.Device.$tcRawIO_closure" {
     GHC.IO.Device.$tcRawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcRawIO1_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 15458836890887680490;
         const 11407217875184880147;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.405138792 UTC

[section ""data" . $krep43_r820B_closure" {
     $krep43_r820B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcRawIO_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.406886863 UTC

[section ""data" . $krep44_r820C_closure" {
     $krep44_r820C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep43_r820B_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.408607221 UTC

[section ""data" . $krep45_r820D_closure" {
     $krep45_r820D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep32_r820q_closure+4;
         const $krep44_r820C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.410901912 UTC

[section ""data" . $krep46_r820E_closure" {
     $krep46_r820E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep30_r820o_closure+4;
         const $krep45_r820D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.41265691 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO1_closure" {
     GHC.IO.Device.$tc'C:RawIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep46_r820E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.414442652 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:RawIO3_bytes" {
     GHC.IO.Device.$tc'C:RawIO3_bytes:
         I8[] [39,67,58,82,97,119,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.416090229 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO2_closure" {
     GHC.IO.Device.$tc'C:RawIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:RawIO3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.418077324 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO_closure" {
     GHC.IO.Device.$tc'C:RawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:RawIO2_closure+1;
         const GHC.IO.Device.$tc'C:RawIO1_closure+4;
         const 6403037956050298954;
         const 14520964482680400738;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.41976538 UTC

[section ""cstring" . GHC.IO.Device.$tcIODeviceType2_bytes" {
     GHC.IO.Device.$tcIODeviceType2_bytes:
         I8[] [73,79,68,101,118,105,99,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.421444594 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType1_closure" {
     GHC.IO.Device.$tcIODeviceType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODeviceType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.423225573 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType_closure" {
     GHC.IO.Device.$tcIODeviceType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODeviceType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4175968526489202383;
         const 17718566430225243048;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.424959742 UTC

[section ""data" . GHC.IO.Device.$tc'Directory1_closure" {
     GHC.IO.Device.$tc'Directory1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODeviceType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.427236085 UTC

[section ""cstring" . GHC.IO.Device.$tc'Directory3_bytes" {
     GHC.IO.Device.$tc'Directory3_bytes:
         I8[] [39,68,105,114,101,99,116,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.428870583 UTC

[section ""data" . GHC.IO.Device.$tc'Directory2_closure" {
     GHC.IO.Device.$tc'Directory2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Directory3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.430541153 UTC

[section ""data" . GHC.IO.Device.$tc'Directory_closure" {
     GHC.IO.Device.$tc'Directory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Directory2_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 12008838926528382233;
         const 639950492613404225;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.432239122 UTC

[section ""cstring" . GHC.IO.Device.$tc'Stream2_bytes" {
     GHC.IO.Device.$tc'Stream2_bytes:
         I8[] [39,83,116,114,101,97,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.434772241 UTC

[section ""data" . GHC.IO.Device.$tc'Stream1_closure" {
     GHC.IO.Device.$tc'Stream1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Stream2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.437022765 UTC

[section ""data" . GHC.IO.Device.$tc'Stream_closure" {
     GHC.IO.Device.$tc'Stream_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Stream1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 39573928359804366;
         const 741010449601335383;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.438828712 UTC

[section ""cstring" . GHC.IO.Device.$tc'RegularFile2_bytes" {
     GHC.IO.Device.$tc'RegularFile2_bytes:
         I8[] [39,82,101,103,117,108,97,114,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.440488189 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile1_closure" {
     GHC.IO.Device.$tc'RegularFile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RegularFile2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.442221311 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile_closure" {
     GHC.IO.Device.$tc'RegularFile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RegularFile1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 2184574052715259025;
         const 14349593064521146856;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.443959673 UTC

[section ""cstring" . GHC.IO.Device.$tc'RawDevice2_bytes" {
     GHC.IO.Device.$tc'RawDevice2_bytes:
         I8[] [39,82,97,119,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.446054238 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice1_closure" {
     GHC.IO.Device.$tc'RawDevice1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RawDevice2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.447704034 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice_closure" {
     GHC.IO.Device.$tc'RawDevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RawDevice1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 13599710032796319976;
         const 8789152980205417013;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.449535693 UTC

[section ""data" . $krep47_r820F_closure" {
     $krep47_r820F_closure:
         const :_con_info;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.451170128 UTC

[section ""data" . $krep48_r820G_closure" {
     $krep48_r820G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep47_r820F_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.452853582 UTC

[section ""data" . $krep49_r820H_closure" {
     $krep49_r820H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep48_r820G_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.454475642 UTC

[section ""cstring" . GHC.IO.Device.$tcSeekMode2_bytes" {
     GHC.IO.Device.$tcSeekMode2_bytes:
         I8[] [83,101,101,107,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.45613452 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode1_closure" {
     GHC.IO.Device.$tcSeekMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcSeekMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.458155074 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode_closure" {
     GHC.IO.Device.$tcSeekMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcSeekMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17698211299654630015;
         const 5588778824401988676;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.459914781 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek1_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcSeekMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.461649833 UTC

[section ""cstring" . GHC.IO.Device.$tc'AbsoluteSeek3_bytes" {
     GHC.IO.Device.$tc'AbsoluteSeek3_bytes:
         I8[] [39,65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.463866501 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek2_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.465891757 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek2_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 5610789579148926753;
         const 3433733041722086784;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.467650248 UTC

[section ""cstring" . GHC.IO.Device.$tc'RelativeSeek2_bytes" {
     GHC.IO.Device.$tc'RelativeSeek2_bytes:
         I8[] [39,82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.469265275 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek1_closure" {
     GHC.IO.Device.$tc'RelativeSeek1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RelativeSeek2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.470952698 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek_closure" {
     GHC.IO.Device.$tc'RelativeSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RelativeSeek1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 15906895381304752726;
         const 1738065871578000433;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.472678539 UTC

[section ""cstring" . GHC.IO.Device.$tc'SeekFromEnd2_bytes" {
     GHC.IO.Device.$tc'SeekFromEnd2_bytes:
         I8[] [39,83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.474341297 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd1_closure" {
     GHC.IO.Device.$tc'SeekFromEnd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'SeekFromEnd2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.476061442 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd_closure" {
     GHC.IO.Device.$tc'SeekFromEnd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'SeekFromEnd1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 16344961357916628519;
         const 5039033320700315004;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.478103674 UTC

[section ""data" . $krep50_r820I_closure" {
     $krep50_r820I_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.479800847 UTC

[section ""data" . $krep51_r820J_closure" {
     $krep51_r820J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep50_r820I_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.481465949 UTC

[section ""cstring" . GHC.IO.Device.$tcIODevice3_bytes" {
     GHC.IO.Device.$tcIODevice3_bytes:
         I8[] [73,79,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.48312036 UTC

[section ""data" . GHC.IO.Device.$tcIODevice2_closure" {
     GHC.IO.Device.$tcIODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODevice3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.484881409 UTC

[section ""data" . GHC.IO.Device.$tcIODevice_closure" {
     GHC.IO.Device.$tcIODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODevice2_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 4764642859795697036;
         const 7163668738257247953;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.486704191 UTC

[section ""data" . $krep52_r820K_closure" {
     $krep52_r820K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.489043277 UTC

[section ""data" . $krep53_r820L_closure" {
     $krep53_r820L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep42_r820A_closure+4;
         const $krep52_r820K_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.491266655 UTC

[section ""data" . $krep54_r820M_closure" {
     $krep54_r820M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r820z_closure+4;
         const $krep53_r820L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.492855356 UTC

[section ""data" . $krep55_r820N_closure" {
     $krep55_r820N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep49_r820H_closure+4;
         const $krep54_r820M_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.494532127 UTC

[section ""data" . $krep56_r820O_closure" {
     $krep56_r820O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep55_r820N_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.496237391 UTC

[section ""data" . $krep57_r820P_closure" {
     $krep57_r820P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep56_r820O_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.497916623 UTC

[section ""data" . $krep58_r820Q_closure" {
     $krep58_r820Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep57_r820P_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.499528458 UTC

[section ""data" . $krep59_r820R_closure" {
     $krep59_r820R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep33_r820r_closure+4;
         const $krep58_r820Q_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.501113772 UTC

[section ""data" . $krep60_r820S_closure" {
     $krep60_r820S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep59_r820R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.503101411 UTC

[section ""data" . $krep61_r820T_closure" {
     $krep61_r820T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep60_r820S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.504720062 UTC

[section ""data" . $krep62_r820U_closure" {
     $krep62_r820U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep51_r820J_closure+4;
         const $krep61_r820T_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.50641477 UTC

[section ""data" . $krep63_r820V_closure" {
     $krep63_r820V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep62_r820U_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.508129037 UTC

[section ""data" . $krep64_r820W_closure" {
     $krep64_r820W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep63_r820V_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.509860348 UTC

[section ""data" . $krep65_r820X_closure" {
     $krep65_r820X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep36_r820u_closure+4;
         const $krep64_r820W_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.511576853 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice1_closure" {
     GHC.IO.Device.$tc'C:IODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r820s_closure+4;
         const $krep65_r820X_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.513867213 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:IODevice3_bytes" {
     GHC.IO.Device.$tc'C:IODevice3_bytes:
         I8[] [39,67,58,73,79,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.515486493 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice2_closure" {
     GHC.IO.Device.$tc'C:IODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:IODevice3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.517201436 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice_closure" {
     GHC.IO.Device.$tc'C:IODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:IODevice2_closure+1;
         const GHC.IO.Device.$tc'C:IODevice1_closure+4;
         const 15352604720075066134;
         const 14084350618605203122;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.519362707 UTC

[section ""data" . GHC.IO.Device.AbsoluteSeek_closure" {
     GHC.IO.Device.AbsoluteSeek_closure:
         const GHC.IO.Device.AbsoluteSeek_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.521104269 UTC

[section ""data" . GHC.IO.Device.RelativeSeek_closure" {
     GHC.IO.Device.RelativeSeek_closure:
         const GHC.IO.Device.RelativeSeek_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.522794774 UTC

[section ""data" . GHC.IO.Device.SeekFromEnd_closure" {
     GHC.IO.Device.SeekFromEnd_closure:
         const GHC.IO.Device.SeekFromEnd_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.524341419 UTC

[section ""data" . GHC.IO.Device.Directory_closure" {
     GHC.IO.Device.Directory_closure:
         const GHC.IO.Device.Directory_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.526105617 UTC

[section ""data" . GHC.IO.Device.Stream_closure" {
     GHC.IO.Device.Stream_closure:
         const GHC.IO.Device.Stream_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.52774948 UTC

[section ""data" . GHC.IO.Device.RegularFile_closure" {
     GHC.IO.Device.RegularFile_closure:
         const GHC.IO.Device.RegularFile_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.529776184 UTC

[section ""data" . GHC.IO.Device.RawDevice_closure" {
     GHC.IO.Device.RawDevice_closure:
         const GHC.IO.Device.RawDevice_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.532697423 UTC

[section ""data" . GHC.IO.Device.C:IODevice_closure" {
     GHC.IO.Device.C:IODevice_closure:
         const GHC.IO.Device.C:IODevice_info;
 },
 GHC.IO.Device.C:IODevice_slow() //  [R1]
         { []
         }
     {offset
       c85G0: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Device.C:IODevice_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.IO.Device.C:IODevice_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c85G5: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c85G9; else goto c85G8;
       c85G9: // global
           HpAlloc = 120;
           R1 = GHC.IO.Device.C:IODevice_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c85G8: // global
           I64[Hp - 112] = GHC.IO.Device.C:IODevice_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:IODevice_info" {
     GHC.IO.Device.C:IODevice_info:
         const GHC.IO.Device.C:IODevice_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.IO.Device.C:IODevice_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.538057328 UTC

[section ""data" . GHC.IO.Device.C:RawIO_closure" {
     GHC.IO.Device.C:RawIO_closure:
         const GHC.IO.Device.C:RawIO_info;
 },
 GHC.IO.Device.C:RawIO_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c85Gv: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c85Gz; else goto c85Gy;
       c85Gz: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.C:RawIO_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c85Gy: // global
           I64[Hp - 32] = GHC.IO.Device.C:RawIO_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:RawIO_info" {
     GHC.IO.Device.C:RawIO_info:
         const GHC.IO.Device.C:RawIO_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.541602301 UTC

[section ""relreadonly" . GHC.IO.Device.SeekMode_closure_tbl" {
     GHC.IO.Device.SeekMode_closure_tbl:
         const GHC.IO.Device.AbsoluteSeek_closure+1;
         const GHC.IO.Device.RelativeSeek_closure+2;
         const GHC.IO.Device.SeekFromEnd_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.544088213 UTC

[section ""cstring" . i84ch_str" {
     i84ch_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,65,98,115,111,108,117,116,101,83,101,101,107]
 },
 GHC.IO.Device.AbsoluteSeek_con_entry() //  [R1]
         { []
         }
     {offset
       c85GG: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.AbsoluteSeek_con_info" {
     GHC.IO.Device.AbsoluteSeek_con_info:
         const GHC.IO.Device.AbsoluteSeek_con_entry;
         const 4294967296;
         const 3;
         const i84ch_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.547142301 UTC

[section ""cstring" . i84cj_str" {
     i84cj_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,108,97,116,105,118,101,83,101,101,107]
 },
 GHC.IO.Device.RelativeSeek_con_entry() //  [R1]
         { []
         }
     {offset
       c85GM: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.RelativeSeek_con_info" {
     GHC.IO.Device.RelativeSeek_con_info:
         const GHC.IO.Device.RelativeSeek_con_entry;
         const 4294967296;
         const 4294967299;
         const i84cj_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.550687026 UTC

[section ""cstring" . i84cl_str" {
     i84cl_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,101,101,107,70,114,111,109,69,110,100]
 },
 GHC.IO.Device.SeekFromEnd_con_entry() //  [R1]
         { []
         }
     {offset
       c85GS: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.SeekFromEnd_con_info" {
     GHC.IO.Device.SeekFromEnd_con_info:
         const GHC.IO.Device.SeekFromEnd_con_entry;
         const 4294967296;
         const 8589934595;
         const i84cl_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.553729866 UTC

[section ""relreadonly" . GHC.IO.Device.IODeviceType_closure_tbl" {
     GHC.IO.Device.IODeviceType_closure_tbl:
         const GHC.IO.Device.Directory_closure+1;
         const GHC.IO.Device.Stream_closure+2;
         const GHC.IO.Device.RegularFile_closure+3;
         const GHC.IO.Device.RawDevice_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.555561547 UTC

[section ""cstring" . i84cn_str" {
     i84cn_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,68,105,114,101,99,116,111,114,121]
 },
 GHC.IO.Device.Directory_con_entry() //  [R1]
         { []
         }
     {offset
       c85GZ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.Directory_con_info" {
     GHC.IO.Device.Directory_con_info:
         const GHC.IO.Device.Directory_con_entry;
         const 4294967296;
         const 3;
         const i84cn_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.558689212 UTC

[section ""cstring" . i84cp_str" {
     i84cp_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,116,114,101,97,109]
 },
 GHC.IO.Device.Stream_con_entry() //  [R1]
         { []
         }
     {offset
       c85H5: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.Stream_con_info" {
     GHC.IO.Device.Stream_con_info:
         const GHC.IO.Device.Stream_con_entry;
         const 4294967296;
         const 4294967299;
         const i84cp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.562201778 UTC

[section ""cstring" . i84cr_str" {
     i84cr_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,103,117,108,97,114,70,105,108,101]
 },
 GHC.IO.Device.RegularFile_con_entry() //  [R1]
         { []
         }
     {offset
       c85Hb: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.RegularFile_con_info" {
     GHC.IO.Device.RegularFile_con_info:
         const GHC.IO.Device.RegularFile_con_entry;
         const 4294967296;
         const 8589934595;
         const i84cr_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.565232051 UTC

[section ""cstring" . i84ct_str" {
     i84ct_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,97,119,68,101,118,105,99,101]
 },
 GHC.IO.Device.RawDevice_con_entry() //  [R1]
         { []
         }
     {offset
       c85Hh: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.RawDevice_con_info" {
     GHC.IO.Device.RawDevice_con_info:
         const GHC.IO.Device.RawDevice_con_entry;
         const 4294967296;
         const 12884901891;
         const i84ct_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.568323463 UTC

[section ""cstring" . i84cv_str" {
     i84cv_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,73,79,68,101,118,105,99,101]
 },
 GHC.IO.Device.C:IODevice_con_entry() //  [R1]
         { []
         }
     {offset
       c85Hn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:IODevice_con_info" {
     GHC.IO.Device.C:IODevice_con_info:
         const GHC.IO.Device.C:IODevice_con_entry;
         const 14;
         const 1;
         const i84cv_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.572038565 UTC

[section ""cstring" . i84cx_str" {
     i84cx_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,82,97,119,73,79]
 },
 GHC.IO.Device.C:RawIO_con_entry() //  [R1]
         { []
         }
     {offset
       c85Ht: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:RawIO_con_info" {
     GHC.IO.Device.C:RawIO_con_info:
         const GHC.IO.Device.C:RawIO_con_entry;
         const 4;
         const 1;
         const i84cx_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:10.575699496 UTC

[section ""relreadonly" . S82hF_srt" {
     S82hF_srt:
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$w$cshowsPrec_closure;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Device.$fReadSeekMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Device.$fReadSeekMode2_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Device.$fReadSeekMode1_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const GHC.IO.Device.$fReadSeekMode17_closure;
         const GHC.IO.Exception.unsupportedOperation_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.Device.$dmdup1_closure;
         const $dmseek1_r81Zp_closure;
         const $dmtell1_r81Zq_closure;
         const $dmgetSize1_r81Zr_closure;
         const $dmsetSize1_r81Zs_closure;
         const $dmsetEcho1_r81Zt_closure;
         const $dmgetEcho1_r81Zu_closure;
         const $dmsetRaw1_r81Zv_closure;
         const $dmdup3_r81Zw_closure;
         const $dmdup4_r81Zx_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r81ZL_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
         const GHC.IO.Device.$fEnumSeekMode4_closure;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
         const GHC.IO.Device.$fEnumSeekMode5_closure;
         const lvl18_r81ZQ_closure;
         const lvl19_r81ZR_closure;
         const lvl20_r81ZS_closure;
         const GHC.IO.Device.$wlvl_closure;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
         const GHC.IO.Device.$w$ctoEnum_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
         const GHC.IO.Device.$fEnumSeekMode1_closure;
         const GHC.IO.Device.$fEnumSeekMode2_closure;
         const GHC.IO.Device.$fEnumSeekMode3_closure;
         const GHC.IO.Device.$fEnumSeekMode_go2_closure;
         const GHC.IO.Device.$fEnumSeekMode_go1_closure;
         const GHC.IO.Device.$fEnumSeekMode_go_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.257924538 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:03:13.262049003 UTC

[section ""data" . GHC.IO.Device.ready_closure" {
     GHC.IO.Device.ready_closure:
         const GHC.IO.Device.ready_info;
 },
 GHC.IO.Device.ready_entry() //  [R2]
         { []
         }
     {offset
       c85Ts: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Tt; else goto c85Tu;
       c85Tt: // global
           R2 = R2;
           R1 = GHC.IO.Device.ready_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Tu: // global
           I64[Sp - 8] = block_c85Tp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Ty; else goto c85Tq;
       u85Ty: // global
           call _c85Tp(R1) args: 0, res: 0, upd: 0;
       c85Tq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.ready_info" {
     GHC.IO.Device.ready_info:
         const GHC.IO.Device.ready_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Tp() //  [R1]
         { []
         }
     {offset
       c85Tp: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Tp_info" {
     block_c85Tp_info:
         const _c85Tp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.267619616 UTC

[section ""data" . GHC.IO.Device.close_closure" {
     GHC.IO.Device.close_closure:
         const GHC.IO.Device.close_info;
 },
 GHC.IO.Device.close_entry() //  [R2]
         { []
         }
     {offset
       c85TQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85TR; else goto c85TS;
       c85TR: // global
           R2 = R2;
           R1 = GHC.IO.Device.close_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85TS: // global
           I64[Sp - 8] = block_c85TN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85TW; else goto c85TO;
       u85TW: // global
           call _c85TN(R1) args: 0, res: 0, upd: 0;
       c85TO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.close_info" {
     GHC.IO.Device.close_info:
         const GHC.IO.Device.close_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85TN() //  [R1]
         { []
         }
     {offset
       c85TN: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85TN_info" {
     block_c85TN_info:
         const _c85TN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.275144948 UTC

[section ""data" . GHC.IO.Device.isTerminal_closure" {
     GHC.IO.Device.isTerminal_closure:
         const GHC.IO.Device.isTerminal_info;
 },
 GHC.IO.Device.isTerminal_entry() //  [R2]
         { []
         }
     {offset
       c85Ue: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Uf; else goto c85Ug;
       c85Uf: // global
           R2 = R2;
           R1 = GHC.IO.Device.isTerminal_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Ug: // global
           I64[Sp - 8] = block_c85Ub_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Uk; else goto c85Uc;
       u85Uk: // global
           call _c85Ub(R1) args: 0, res: 0, upd: 0;
       c85Uc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.isTerminal_info" {
     GHC.IO.Device.isTerminal_info:
         const GHC.IO.Device.isTerminal_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Ub() //  [R1]
         { []
         }
     {offset
       c85Ub: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Ub_info" {
     block_c85Ub_info:
         const _c85Ub;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.284906932 UTC

[section ""data" . GHC.IO.Device.isSeekable_closure" {
     GHC.IO.Device.isSeekable_closure:
         const GHC.IO.Device.isSeekable_info;
 },
 GHC.IO.Device.isSeekable_entry() //  [R2]
         { []
         }
     {offset
       c85UC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85UD; else goto c85UE;
       c85UD: // global
           R2 = R2;
           R1 = GHC.IO.Device.isSeekable_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85UE: // global
           I64[Sp - 8] = block_c85Uz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85UI; else goto c85UA;
       u85UI: // global
           call _c85Uz(R1) args: 0, res: 0, upd: 0;
       c85UA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.isSeekable_info" {
     GHC.IO.Device.isSeekable_info:
         const GHC.IO.Device.isSeekable_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Uz() //  [R1]
         { []
         }
     {offset
       c85Uz: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Uz_info" {
     block_c85Uz_info:
         const _c85Uz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.294092044 UTC

[section ""data" . GHC.IO.Device.seek_closure" {
     GHC.IO.Device.seek_closure:
         const GHC.IO.Device.seek_info;
 },
 GHC.IO.Device.seek_entry() //  [R2]
         { []
         }
     {offset
       c85V0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85V1; else goto c85V2;
       c85V1: // global
           R2 = R2;
           R1 = GHC.IO.Device.seek_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85V2: // global
           I64[Sp - 8] = block_c85UX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85V6; else goto c85UY;
       u85V6: // global
           call _c85UX(R1) args: 0, res: 0, upd: 0;
       c85UY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.seek_info" {
     GHC.IO.Device.seek_info:
         const GHC.IO.Device.seek_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85UX() //  [R1]
         { []
         }
     {offset
       c85UX: // global
           R1 = P64[R1 + 39];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85UX_info" {
     block_c85UX_info:
         const _c85UX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.300001331 UTC

[section ""data" . GHC.IO.Device.tell_closure" {
     GHC.IO.Device.tell_closure:
         const GHC.IO.Device.tell_info;
 },
 GHC.IO.Device.tell_entry() //  [R2]
         { []
         }
     {offset
       c85Vo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Vp; else goto c85Vq;
       c85Vp: // global
           R2 = R2;
           R1 = GHC.IO.Device.tell_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Vq: // global
           I64[Sp - 8] = block_c85Vl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Vu; else goto c85Vm;
       u85Vu: // global
           call _c85Vl(R1) args: 0, res: 0, upd: 0;
       c85Vm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.tell_info" {
     GHC.IO.Device.tell_info:
         const GHC.IO.Device.tell_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Vl() //  [R1]
         { []
         }
     {offset
       c85Vl: // global
           R1 = P64[R1 + 47];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Vl_info" {
     block_c85Vl_info:
         const _c85Vl;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.305475831 UTC

[section ""data" . GHC.IO.Device.getSize_closure" {
     GHC.IO.Device.getSize_closure:
         const GHC.IO.Device.getSize_info;
 },
 GHC.IO.Device.getSize_entry() //  [R2]
         { []
         }
     {offset
       c85VM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85VN; else goto c85VO;
       c85VN: // global
           R2 = R2;
           R1 = GHC.IO.Device.getSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85VO: // global
           I64[Sp - 8] = block_c85VJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85VS; else goto c85VK;
       u85VS: // global
           call _c85VJ(R1) args: 0, res: 0, upd: 0;
       c85VK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.getSize_info" {
     GHC.IO.Device.getSize_info:
         const GHC.IO.Device.getSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85VJ() //  [R1]
         { []
         }
     {offset
       c85VJ: // global
           R1 = P64[R1 + 55];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85VJ_info" {
     block_c85VJ_info:
         const _c85VJ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.311392158 UTC

[section ""data" . GHC.IO.Device.setSize_closure" {
     GHC.IO.Device.setSize_closure:
         const GHC.IO.Device.setSize_info;
 },
 GHC.IO.Device.setSize_entry() //  [R2]
         { []
         }
     {offset
       c85Wa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Wb; else goto c85Wc;
       c85Wb: // global
           R2 = R2;
           R1 = GHC.IO.Device.setSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Wc: // global
           I64[Sp - 8] = block_c85W7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Wg; else goto c85W8;
       u85Wg: // global
           call _c85W7(R1) args: 0, res: 0, upd: 0;
       c85W8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.setSize_info" {
     GHC.IO.Device.setSize_info:
         const GHC.IO.Device.setSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85W7() //  [R1]
         { []
         }
     {offset
       c85W7: // global
           R1 = P64[R1 + 63];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85W7_info" {
     block_c85W7_info:
         const _c85W7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.316651162 UTC

[section ""data" . GHC.IO.Device.setEcho_closure" {
     GHC.IO.Device.setEcho_closure:
         const GHC.IO.Device.setEcho_info;
 },
 GHC.IO.Device.setEcho_entry() //  [R2]
         { []
         }
     {offset
       c85Wy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Wz; else goto c85WA;
       c85Wz: // global
           R2 = R2;
           R1 = GHC.IO.Device.setEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85WA: // global
           I64[Sp - 8] = block_c85Wv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85WE; else goto c85Ww;
       u85WE: // global
           call _c85Wv(R1) args: 0, res: 0, upd: 0;
       c85Ww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.setEcho_info" {
     GHC.IO.Device.setEcho_info:
         const GHC.IO.Device.setEcho_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Wv() //  [R1]
         { []
         }
     {offset
       c85Wv: // global
           R1 = P64[R1 + 71];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Wv_info" {
     block_c85Wv_info:
         const _c85Wv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.322077485 UTC

[section ""data" . GHC.IO.Device.getEcho_closure" {
     GHC.IO.Device.getEcho_closure:
         const GHC.IO.Device.getEcho_info;
 },
 GHC.IO.Device.getEcho_entry() //  [R2]
         { []
         }
     {offset
       c85WW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85WX; else goto c85WY;
       c85WX: // global
           R2 = R2;
           R1 = GHC.IO.Device.getEcho_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85WY: // global
           I64[Sp - 8] = block_c85WT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85X2; else goto c85WU;
       u85X2: // global
           call _c85WT(R1) args: 0, res: 0, upd: 0;
       c85WU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.getEcho_info" {
     GHC.IO.Device.getEcho_info:
         const GHC.IO.Device.getEcho_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85WT() //  [R1]
         { []
         }
     {offset
       c85WT: // global
           R1 = P64[R1 + 79];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85WT_info" {
     block_c85WT_info:
         const _c85WT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.327487167 UTC

[section ""data" . GHC.IO.Device.setRaw_closure" {
     GHC.IO.Device.setRaw_closure:
         const GHC.IO.Device.setRaw_info;
 },
 GHC.IO.Device.setRaw_entry() //  [R2]
         { []
         }
     {offset
       c85Xk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Xl; else goto c85Xm;
       c85Xl: // global
           R2 = R2;
           R1 = GHC.IO.Device.setRaw_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Xm: // global
           I64[Sp - 8] = block_c85Xh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Xq; else goto c85Xi;
       u85Xq: // global
           call _c85Xh(R1) args: 0, res: 0, upd: 0;
       c85Xi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.setRaw_info" {
     GHC.IO.Device.setRaw_info:
         const GHC.IO.Device.setRaw_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Xh() //  [R1]
         { []
         }
     {offset
       c85Xh: // global
           R1 = P64[R1 + 87];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Xh_info" {
     block_c85Xh_info:
         const _c85Xh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.334205423 UTC

[section ""data" . GHC.IO.Device.devType_closure" {
     GHC.IO.Device.devType_closure:
         const GHC.IO.Device.devType_info;
 },
 GHC.IO.Device.devType_entry() //  [R2]
         { []
         }
     {offset
       c85XI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85XJ; else goto c85XK;
       c85XJ: // global
           R2 = R2;
           R1 = GHC.IO.Device.devType_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85XK: // global
           I64[Sp - 8] = block_c85XF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85XO; else goto c85XG;
       u85XO: // global
           call _c85XF(R1) args: 0, res: 0, upd: 0;
       c85XG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.devType_info" {
     GHC.IO.Device.devType_info:
         const GHC.IO.Device.devType_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85XF() //  [R1]
         { []
         }
     {offset
       c85XF: // global
           R1 = P64[R1 + 95];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85XF_info" {
     block_c85XF_info:
         const _c85XF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.339501464 UTC

[section ""data" . GHC.IO.Device.dup_closure" {
     GHC.IO.Device.dup_closure:
         const GHC.IO.Device.dup_info;
 },
 GHC.IO.Device.dup_entry() //  [R2]
         { []
         }
     {offset
       c85Y6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Y7; else goto c85Y8;
       c85Y7: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Y8: // global
           I64[Sp - 8] = block_c85Y3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Yc; else goto c85Y4;
       u85Yc: // global
           call _c85Y3(R1) args: 0, res: 0, upd: 0;
       c85Y4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.dup_info" {
     GHC.IO.Device.dup_info:
         const GHC.IO.Device.dup_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Y3() //  [R1]
         { []
         }
     {offset
       c85Y3: // global
           R1 = P64[R1 + 103];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Y3_info" {
     block_c85Y3_info:
         const _c85Y3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.344797595 UTC

[section ""data" . GHC.IO.Device.dup2_closure" {
     GHC.IO.Device.dup2_closure:
         const GHC.IO.Device.dup2_info;
 },
 GHC.IO.Device.dup2_entry() //  [R2]
         { []
         }
     {offset
       c85Yu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Yv; else goto c85Yw;
       c85Yv: // global
           R2 = R2;
           R1 = GHC.IO.Device.dup2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Yw: // global
           I64[Sp - 8] = block_c85Yr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85YA; else goto c85Ys;
       u85YA: // global
           call _c85Yr(R1) args: 0, res: 0, upd: 0;
       c85Ys: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.dup2_info" {
     GHC.IO.Device.dup2_info:
         const GHC.IO.Device.dup2_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Yr() //  [R1]
         { []
         }
     {offset
       c85Yr: // global
           R1 = P64[R1 + 111];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Yr_info" {
     block_c85Yr_info:
         const _c85Yr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.350299832 UTC

[section ""data" . GHC.IO.Device.read_closure" {
     GHC.IO.Device.read_closure:
         const GHC.IO.Device.read_info;
 },
 GHC.IO.Device.read_entry() //  [R2]
         { []
         }
     {offset
       c85YS: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85YT; else goto c85YU;
       c85YT: // global
           R2 = R2;
           R1 = GHC.IO.Device.read_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85YU: // global
           I64[Sp - 8] = block_c85YP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85YY; else goto c85YQ;
       u85YY: // global
           call _c85YP(R1) args: 0, res: 0, upd: 0;
       c85YQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.read_info" {
     GHC.IO.Device.read_info:
         const GHC.IO.Device.read_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85YP() //  [R1]
         { []
         }
     {offset
       c85YP: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85YP_info" {
     block_c85YP_info:
         const _c85YP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.35621938 UTC

[section ""data" . GHC.IO.Device.readNonBlocking_closure" {
     GHC.IO.Device.readNonBlocking_closure:
         const GHC.IO.Device.readNonBlocking_info;
 },
 GHC.IO.Device.readNonBlocking_entry() //  [R2]
         { []
         }
     {offset
       c85Zg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85Zh; else goto c85Zi;
       c85Zh: // global
           R2 = R2;
           R1 = GHC.IO.Device.readNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85Zi: // global
           I64[Sp - 8] = block_c85Zd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85Zm; else goto c85Ze;
       u85Zm: // global
           call _c85Zd(R1) args: 0, res: 0, upd: 0;
       c85Ze: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.readNonBlocking_info" {
     GHC.IO.Device.readNonBlocking_info:
         const GHC.IO.Device.readNonBlocking_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85Zd() //  [R1]
         { []
         }
     {offset
       c85Zd: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85Zd_info" {
     block_c85Zd_info:
         const _c85Zd;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.361569494 UTC

[section ""data" . GHC.IO.Device.write_closure" {
     GHC.IO.Device.write_closure:
         const GHC.IO.Device.write_info;
 },
 GHC.IO.Device.write_entry() //  [R2]
         { []
         }
     {offset
       c85ZE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c85ZF; else goto c85ZG;
       c85ZF: // global
           R2 = R2;
           R1 = GHC.IO.Device.write_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c85ZG: // global
           I64[Sp - 8] = block_c85ZB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u85ZK; else goto c85ZC;
       u85ZK: // global
           call _c85ZB(R1) args: 0, res: 0, upd: 0;
       c85ZC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.write_info" {
     GHC.IO.Device.write_info:
         const GHC.IO.Device.write_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85ZB() //  [R1]
         { []
         }
     {offset
       c85ZB: // global
           R1 = P64[R1 + 23];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85ZB_info" {
     block_c85ZB_info:
         const _c85ZB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.367055779 UTC

[section ""data" . GHC.IO.Device.writeNonBlocking_closure" {
     GHC.IO.Device.writeNonBlocking_closure:
         const GHC.IO.Device.writeNonBlocking_info;
 },
 GHC.IO.Device.writeNonBlocking_entry() //  [R2]
         { []
         }
     {offset
       c8602: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c8603; else goto c8604;
       c8603: // global
           R2 = R2;
           R1 = GHC.IO.Device.writeNonBlocking_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8604: // global
           I64[Sp - 8] = block_c85ZZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u8608; else goto c8600;
       u8608: // global
           call _c85ZZ(R1) args: 0, res: 0, upd: 0;
       c8600: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.writeNonBlocking_info" {
     GHC.IO.Device.writeNonBlocking_info:
         const GHC.IO.Device.writeNonBlocking_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c85ZZ() //  [R1]
         { []
         }
     {offset
       c85ZZ: // global
           R1 = P64[R1 + 31];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c85ZZ_info" {
     block_c85ZZ_info:
         const _c85ZZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.372452031 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode16_bytes" {
     GHC.IO.Device.$fReadSeekMode16_bytes:
         I8[] [65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.374724998 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode15_closure" {
     GHC.IO.Device.$fReadSeekMode15_closure:
         const GHC.IO.Device.$fReadSeekMode15_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode15_entry() //  [R1]
         { []
         }
     {offset
       c860q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c860r; else goto c860s;
       c860r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c860s: // global
           (_c860n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c860n::I64 == 0) goto c860p; else goto c860o;
       c860p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c860o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c860n::I64;
           R2 = GHC.IO.Device.$fReadSeekMode16_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode15_info" {
     GHC.IO.Device.$fReadSeekMode15_info:
         const GHC.IO.Device.$fReadSeekMode15_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.378287254 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode12_bytes" {
     GHC.IO.Device.$fReadSeekMode12_bytes:
         I8[] [82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.380546793 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode11_closure" {
     GHC.IO.Device.$fReadSeekMode11_closure:
         const GHC.IO.Device.$fReadSeekMode11_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode11_entry() //  [R1]
         { []
         }
     {offset
       c860I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c860J; else goto c860K;
       c860J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c860K: // global
           (_c860F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c860F::I64 == 0) goto c860H; else goto c860G;
       c860H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c860G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c860F::I64;
           R2 = GHC.IO.Device.$fReadSeekMode12_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode11_info" {
     GHC.IO.Device.$fReadSeekMode11_info:
         const GHC.IO.Device.$fReadSeekMode11_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.384257535 UTC

[section ""cstring" . GHC.IO.Device.$fReadSeekMode8_bytes" {
     GHC.IO.Device.$fReadSeekMode8_bytes:
         I8[] [83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.386605814 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode7_closure" {
     GHC.IO.Device.$fReadSeekMode7_closure:
         const GHC.IO.Device.$fReadSeekMode7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode7_entry() //  [R1]
         { []
         }
     {offset
       c8610: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8611; else goto c8612;
       c8611: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c8612: // global
           (_c860X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c860X::I64 == 0) goto c860Z; else goto c860Y;
       c860Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c860Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c860X::I64;
           R2 = GHC.IO.Device.$fReadSeekMode8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode7_info" {
     GHC.IO.Device.$fReadSeekMode7_info:
         const GHC.IO.Device.$fReadSeekMode7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.391871342 UTC

[section ""data" . GHC.IO.Device.$w$cshowsPrec_closure" {
     GHC.IO.Device.$w$cshowsPrec_closure:
         const GHC.IO.Device.$w$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       c861n: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c861o; else goto c861p;
       c861o: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c861p: // global
           I64[Sp - 16] = block_c861f_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u861A; else goto c861g;
       u861A: // global
           call _c861f(R1) args: 0, res: 0, upd: 0;
       c861g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cshowsPrec_info" {
     GHC.IO.Device.$w$cshowsPrec_info:
         const GHC.IO.Device.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S861B_srt;
 },
 _c861f() //  [R1]
         { []
         }
     {offset
       c861f: // global
           _s85LB::P64 = P64[Sp + 8];
           _c861m::P64 = R1 & 7;
           if (_c861m::P64 < 3) goto u861z; else goto c861l;
       u861z: // global
           if (_c861m::P64 < 2) goto c861j; else goto c861k;
       c861j: // global
           R3 = _s85LB::P64;
           R2 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c861k: // global
           R3 = _s85LB::P64;
           R2 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c861l: // global
           R3 = _s85LB::P64;
           R2 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c861f_info" {
     block_c861f_info:
         const _c861f;
         const 1;
         const 30064771102;
         const S861B_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.397620926 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       c861R: // global
           _s85LE::P64 = R3;
           R3 = R4;
           R2 = _s85LE::P64;
           call GHC.IO.Device.$w$cshowsPrec_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info" {
     GHC.IO.Device.$fShowSeekMode_$cshowsPrec_info:
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const S861B_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.401669303 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshow_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshow_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshow_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c862a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c862b; else goto c862c;
       c862b: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fShowSeekMode_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c862c: // global
           I64[Sp - 8] = block_c8622_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u862n; else goto c8623;
       u862n: // global
           call _c8622(R1) args: 0, res: 0, upd: 0;
       c8623: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fShowSeekMode_$cshow_info" {
     GHC.IO.Device.$fShowSeekMode_$cshow_info:
         const GHC.IO.Device.$fShowSeekMode_$cshow_entry;
         const 0;
         const 98784247822;
         const 4294967301;
         const S861B_srt;
 },
 _c8622() //  [R1]
         { []
         }
     {offset
       c8622: // global
           _c8629::P64 = R1 & 7;
           if (_c8629::P64 < 3) goto u862m; else goto c8628;
       u862m: // global
           if (_c8629::P64 < 2) goto c8626; else goto c8627;
       c8626: // global
           R1 = GHC.IO.Device.$fReadSeekMode15_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8627: // global
           R1 = GHC.IO.Device.$fReadSeekMode11_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c8628: // global
           R1 = GHC.IO.Device.$fReadSeekMode7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8622_info" {
     block_c8622_info:
         const _c8622;
         const 0;
         const 30064771102;
         const S861B_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.407123487 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_$cshowList_closure" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_closure:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_info;
         const 0;
 },
 GHC.IO.Device.$fShowSeekMode_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c862G: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fShowSeekMode_$cshowList_info" {
     GHC.IO.Device.$fShowSeekMode_$cshowList_info:
         const GHC.IO.Device.$fShowSeekMode_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S861B_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.410898058 UTC

[section ""data" . GHC.IO.Device.$fShowSeekMode_closure" {
     GHC.IO.Device.$fShowSeekMode_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Device.$fShowSeekMode_$cshowsPrec_closure+3;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure+1;
         const GHC.IO.Device.$fShowSeekMode_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.412968353 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode14_closure" {
     GHC.IO.Device.$fReadSeekMode14_closure:
         const GHC.IO.Device.$fReadSeekMode14_info;
 },
 GHC.IO.Device.$fReadSeekMode14_entry() //  [R3]
         { []
         }
     {offset
       c862S: // global
           R2 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode14_info" {
     GHC.IO.Device.$fReadSeekMode14_info:
         const GHC.IO.Device.$fReadSeekMode14_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.416135707 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode13_closure" {
     GHC.IO.Device.$fReadSeekMode13_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$fReadSeekMode14_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.418264673 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode10_closure" {
     GHC.IO.Device.$fReadSeekMode10_closure:
         const GHC.IO.Device.$fReadSeekMode10_info;
 },
 GHC.IO.Device.$fReadSeekMode10_entry() //  [R3]
         { []
         }
     {offset
       c8634: // global
           R2 = GHC.IO.Device.RelativeSeek_closure+2;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode10_info" {
     GHC.IO.Device.$fReadSeekMode10_info:
         const GHC.IO.Device.$fReadSeekMode10_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.421459392 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode9_closure" {
     GHC.IO.Device.$fReadSeekMode9_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode10_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.423540267 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode6_closure" {
     GHC.IO.Device.$fReadSeekMode6_closure:
         const GHC.IO.Device.$fReadSeekMode6_info;
 },
 GHC.IO.Device.$fReadSeekMode6_entry() //  [R3]
         { []
         }
     {offset
       c863g: // global
           R2 = GHC.IO.Device.SeekFromEnd_closure+3;
           R1 = R3;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode6_info" {
     GHC.IO.Device.$fReadSeekMode6_info:
         const GHC.IO.Device.$fReadSeekMode6_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.426858858 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode5_closure" {
     GHC.IO.Device.$fReadSeekMode5_closure:
         const (,)_con_info;
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode6_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.428687579 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode4_closure" {
     GHC.IO.Device.$fReadSeekMode4_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode5_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.431067678 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode3_closure" {
     GHC.IO.Device.$fReadSeekMode3_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode9_closure+1;
         const GHC.IO.Device.$fReadSeekMode4_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.432835537 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_sps_closure" {
     GHC.IO.Device.$fReadSeekMode_sps_closure:
         const :_con_info;
         const GHC.IO.Device.$fReadSeekMode13_closure+1;
         const GHC.IO.Device.$fReadSeekMode3_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.435005672 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode2_closure" {
     GHC.IO.Device.$fReadSeekMode2_closure:
         const GHC.IO.Device.$fReadSeekMode2_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode2_entry() //  [R2]
         { []
         }
     {offset
       c863v: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode_sps_closure+2;
           call GHC.Read.choose2_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode2_info" {
     GHC.IO.Device.$fReadSeekMode2_info:
         const GHC.IO.Device.$fReadSeekMode2_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S861B_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.438612744 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode1_closure" {
     GHC.IO.Device.$fReadSeekMode1_closure:
         const GHC.IO.Device.$fReadSeekMode1_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       c863G: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           call GHC.Read.list3_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode1_info" {
     GHC.IO.Device.$fReadSeekMode1_info:
         const GHC.IO.Device.$fReadSeekMode1_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S861B_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.443343047 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_info;
         const 0;
 },
 sat_s85LS_entry() //  [R1]
         { []
         }
     {offset
       c863V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c863W; else goto c863X;
       c863W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c863X: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R4 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R3 = P64[R1 + 16];
           R2 = GHC.IO.Device.$fReadSeekMode2_closure+1;
           Sp = Sp - 16;
           call GHC.Read.list3_entry(R4, R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85LS_info" {
     sat_s85LS_info:
         const sat_s85LS_entry;
         const 1;
         const 12884901904;
         const S861B_srt+56;
 },
 GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry() //  [R2]
         { []
         }
     {offset
       c863Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c8642; else goto c8641;
       c8642: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8641: // global
           I64[Hp - 16] = sat_s85LS_info;
           P64[Hp] = R2;
           R2 = Hp - 16;
           R1 = Text.ParserCombinators.ReadP.run_closure+2;
           call stg_ap_p_fast(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode_$creadsPrec_info" {
     GHC.IO.Device.$fReadSeekMode_$creadsPrec_info:
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_entry;
         const 0;
         const 30064771086;
         const 4294967301;
         const S861B_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.449223981 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry() //  [R1]
         { []
         }
     {offset
       c864l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c864m; else goto c864n;
       c864m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c864n: // global
           (_c864i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c864i::I64 == 0) goto c864k; else goto c864j;
       c864k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c864j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c864i::I64;
           R2 = GHC.IO.Device.$fReadSeekMode1_closure+2;
           Sp = Sp - 16;
           call GHC.Read.list_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode_$creadListPrec_info" {
     GHC.IO.Device.$fReadSeekMode_$creadListPrec_info:
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_entry;
         const 0;
         const 12884901909;
         const S861B_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.454086919 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode17_closure" {
     GHC.IO.Device.$fReadSeekMode17_closure:
         const GHC.IO.Device.$fReadSeekMode17_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode17_entry() //  [R1]
         { []
         }
     {offset
       c864C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c864D; else goto c864E;
       c864D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c864E: // global
           (_c864z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c864z::I64 == 0) goto c864B; else goto c864A;
       c864B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c864A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c864z::I64;
           R3 = Text.ParserCombinators.ReadP.$fApplicativeP_$cpure_closure+1;
           R2 = GHC.Read.$fRead()7_closure;
           R1 = GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode17_info" {
     GHC.IO.Device.$fReadSeekMode17_info:
         const GHC.IO.Device.$fReadSeekMode17_entry;
         const 0;
         const 4294967317;
         const S861B_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.458138994 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_$creadList_closure" {
     GHC.IO.Device.$fReadSeekMode_$creadList_closure:
         const GHC.IO.Device.$fReadSeekMode_$creadList_info;
         const 0;
 },
 GHC.IO.Device.$fReadSeekMode_$creadList_entry() //  [R2]
         { []
         }
     {offset
       c864S: // global
           R3 = R2;
           R2 = GHC.IO.Device.$fReadSeekMode17_closure;
           call Text.ParserCombinators.ReadP.run_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fReadSeekMode_$creadList_info" {
     GHC.IO.Device.$fReadSeekMode_$creadList_info:
         const GHC.IO.Device.$fReadSeekMode_$creadList_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const S861B_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.461544434 UTC

[section ""data" . GHC.IO.Device.$fReadSeekMode_closure" {
     GHC.IO.Device.$fReadSeekMode_closure:
         const GHC.Read.C:Read_con_info;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure+1;
         const GHC.IO.Device.$fReadSeekMode_$creadList_closure+1;
         const GHC.IO.Device.$fReadSeekMode1_closure+2;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.46785115 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c==_closure" {
     GHC.IO.Device.$fEqSeekMode_$c==_closure:
         const GHC.IO.Device.$fEqSeekMode_$c==_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c865c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c865d; else goto c865e;
       c865d: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c865e: // global
           I64[Sp - 16] = block_c8654_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u866b; else goto c8655;
       u866b: // global
           call _c8654(R1) args: 0, res: 0, upd: 0;
       c8655: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqSeekMode_$c==_info" {
     GHC.IO.Device.$fEqSeekMode_$c==_info:
         const GHC.IO.Device.$fEqSeekMode_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8654() //  [R1]
         { []
         }
     {offset
       c8654: // global
           _s85LU::P64 = P64[Sp + 8];
           _c865b::P64 = R1 & 7;
           if (_c865b::P64 < 3) goto u8661; else goto c865a;
       u8661: // global
           if (_c865b::P64 < 2) goto c8658; else goto c8659;
       c8658: // global
           I64[Sp + 8] = block_c865h_info;
           R1 = _s85LU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8668; else goto c865j;
       u8668: // global
           call _c865h(R1) args: 0, res: 0, upd: 0;
       c865j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8659: // global
           I64[Sp + 8] = block_c865w_info;
           R1 = _s85LU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8669; else goto c865y;
       u8669: // global
           call _c865w(R1) args: 0, res: 0, upd: 0;
       c865y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c865a: // global
           I64[Sp + 8] = block_c865L_info;
           R1 = _s85LU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u866a; else goto c865N;
       u866a: // global
           call _c865L(R1) args: 0, res: 0, upd: 0;
       c865N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8654_info" {
     block_c8654_info:
         const _c8654;
         const 1;
         const 30;
 },
 _c865h() //  [R1]
         { []
         }
     {offset
       c865h: // global
           if (R1 & 7 == 1) goto u8662; else goto u8663;
       u8662: // global
           Sp = Sp + 8;
           call _c865X() args: 0, res: 0, upd: 0;
       u8663: // global
           Sp = Sp + 8;
           call _c865T() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c865h_info" {
     block_c865h_info:
         const _c865h;
         const 0;
         const 30;
 },
 _c865w() //  [R1]
         { []
         }
     {offset
       c865w: // global
           if (R1 & 7 == 2) goto u8664; else goto u8665;
       u8664: // global
           Sp = Sp + 8;
           call _c865X() args: 0, res: 0, upd: 0;
       u8665: // global
           Sp = Sp + 8;
           call _c865T() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c865w_info" {
     block_c865w_info:
         const _c865w;
         const 0;
         const 30;
 },
 _c865L() //  [R1]
         { []
         }
     {offset
       c865L: // global
           if (R1 & 7 == 3) goto u8666; else goto u8667;
       u8666: // global
           Sp = Sp + 8;
           call _c865X() args: 0, res: 0, upd: 0;
       u8667: // global
           Sp = Sp + 8;
           call _c865T() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c865L_info" {
     block_c865L_info:
         const _c865L;
         const 0;
         const 30;
 },
 _c865X() //  []
         { []
         }
     {offset
       c865X: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c865T() //  []
         { []
         }
     {offset
       c865T: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.482221298 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_$c/=_closure" {
     GHC.IO.Device.$fEqSeekMode_$c/=_closure:
         const GHC.IO.Device.$fEqSeekMode_$c/=_info;
 },
 GHC.IO.Device.$fEqSeekMode_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c8678: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8679; else goto c867a;
       c8679: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqSeekMode_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c867a: // global
           I64[Sp - 16] = block_c8670_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u8687; else goto c8671;
       u8687: // global
           call _c8670(R1) args: 0, res: 0, upd: 0;
       c8671: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqSeekMode_$c/=_info" {
     GHC.IO.Device.$fEqSeekMode_$c/=_info:
         const GHC.IO.Device.$fEqSeekMode_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c8670() //  [R1]
         { []
         }
     {offset
       c8670: // global
           _s85M0::P64 = P64[Sp + 8];
           _c8677::P64 = R1 & 7;
           if (_c8677::P64 < 3) goto u867X; else goto c8676;
       u867X: // global
           if (_c8677::P64 < 2) goto c8674; else goto c8675;
       c8674: // global
           I64[Sp + 8] = block_c867d_info;
           R1 = _s85M0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8684; else goto c867f;
       u8684: // global
           call _c867d(R1) args: 0, res: 0, upd: 0;
       c867f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8675: // global
           I64[Sp + 8] = block_c867s_info;
           R1 = _s85M0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8685; else goto c867u;
       u8685: // global
           call _c867s(R1) args: 0, res: 0, upd: 0;
       c867u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8676: // global
           I64[Sp + 8] = block_c867H_info;
           R1 = _s85M0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u8686; else goto c867J;
       u8686: // global
           call _c867H(R1) args: 0, res: 0, upd: 0;
       c867J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c8670_info" {
     block_c8670_info:
         const _c8670;
         const 1;
         const 30;
 },
 _c867d() //  [R1]
         { []
         }
     {offset
       c867d: // global
           if (R1 & 7 == 1) goto u867Y; else goto u867Z;
       u867Y: // global
           Sp = Sp + 8;
           call _c867T() args: 0, res: 0, upd: 0;
       u867Z: // global
           Sp = Sp + 8;
           call _c867P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c867d_info" {
     block_c867d_info:
         const _c867d;
         const 0;
         const 30;
 },
 _c867s() //  [R1]
         { []
         }
     {offset
       c867s: // global
           if (R1 & 7 == 2) goto u8680; else goto u8681;
       u8680: // global
           Sp = Sp + 8;
           call _c867T() args: 0, res: 0, upd: 0;
       u8681: // global
           Sp = Sp + 8;
           call _c867P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c867s_info" {
     block_c867s_info:
         const _c867s;
         const 0;
         const 30;
 },
 _c867H() //  [R1]
         { []
         }
     {offset
       c867H: // global
           if (R1 & 7 == 3) goto u8682; else goto u8683;
       u8682: // global
           Sp = Sp + 8;
           call _c867T() args: 0, res: 0, upd: 0;
       u8683: // global
           Sp = Sp + 8;
           call _c867P() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c867H_info" {
     block_c867H_info:
         const _c867H;
         const 0;
         const 30;
 },
 _c867T() //  []
         { []
         }
     {offset
       c867T: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c867P() //  []
         { []
         }
     {offset
       c867P: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.49446417 UTC

[section ""data" . GHC.IO.Device.$fEqSeekMode_closure" {
     GHC.IO.Device.$fEqSeekMode_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqSeekMode_$c==_closure+2;
         const GHC.IO.Device.$fEqSeekMode_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.498852174 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c==_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c==_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c==_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       c8696: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8697; else goto c8698;
       c8697: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c8698: // global
           I64[Sp - 16] = block_c868X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86ap; else goto c868Y;
       u86ap: // global
           call _c868X(R1) args: 0, res: 0, upd: 0;
       c868Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqIODeviceType_$c==_info" {
     GHC.IO.Device.$fEqIODeviceType_$c==_info:
         const GHC.IO.Device.$fEqIODeviceType_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c868X() //  [R1]
         { []
         }
     {offset
       c868X: // global
           _s85M6::P64 = P64[Sp + 8];
           _c8695::P64 = R1 & 7;
           if (_c8695::P64 < 3) goto u86ab; else goto u86ac;
       u86ab: // global
           if (_c8695::P64 < 2) goto c8691; else goto c8692;
       c8691: // global
           I64[Sp + 8] = block_c869b_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86al; else goto c869d;
       u86al: // global
           call _c869b(R1) args: 0, res: 0, upd: 0;
       c869d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8692: // global
           I64[Sp + 8] = block_c869q_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86am; else goto c869s;
       u86am: // global
           call _c869q(R1) args: 0, res: 0, upd: 0;
       c869s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u86ac: // global
           if (_c8695::P64 < 4) goto c8693; else goto c8694;
       c8693: // global
           I64[Sp + 8] = block_c869F_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86an; else goto c869H;
       u86an: // global
           call _c869F(R1) args: 0, res: 0, upd: 0;
       c869H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c8694: // global
           I64[Sp + 8] = block_c869U_info;
           R1 = _s85M6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86ao; else goto c869W;
       u86ao: // global
           call _c869U(R1) args: 0, res: 0, upd: 0;
       c869W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c868X_info" {
     block_c868X_info:
         const _c868X;
         const 1;
         const 30;
 },
 _c869b() //  [R1]
         { []
         }
     {offset
       c869b: // global
           if (R1 & 7 == 1) goto u86ad; else goto u86ae;
       u86ad: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ae: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c869b_info" {
     block_c869b_info:
         const _c869b;
         const 0;
         const 30;
 },
 _c869q() //  [R1]
         { []
         }
     {offset
       c869q: // global
           if (R1 & 7 == 2) goto u86af; else goto u86ag;
       u86af: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ag: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c869q_info" {
     block_c869q_info:
         const _c869q;
         const 0;
         const 30;
 },
 _c869F() //  [R1]
         { []
         }
     {offset
       c869F: // global
           if (R1 & 7 == 3) goto u86ah; else goto u86ai;
       u86ah: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ai: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c869F_info" {
     block_c869F_info:
         const _c869F;
         const 0;
         const 30;
 },
 _c869U() //  [R1]
         { []
         }
     {offset
       c869U: // global
           if (R1 & 7 == 4) goto u86aj; else goto u86ak;
       u86aj: // global
           Sp = Sp + 8;
           call _c86a6() args: 0, res: 0, upd: 0;
       u86ak: // global
           Sp = Sp + 8;
           call _c86a2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c869U_info" {
     block_c869U_info:
         const _c869U;
         const 0;
         const 30;
 },
 _c86a6() //  []
         { []
         }
     {offset
       c86a6: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86a2() //  []
         { []
         }
     {offset
       c86a2: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.515087208 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_$c/=_closure" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_closure:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_info;
 },
 GHC.IO.Device.$fEqIODeviceType_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       c86bw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86bx; else goto c86by;
       c86bx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEqIODeviceType_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86by: // global
           I64[Sp - 16] = block_c86bn_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86cP; else goto c86bo;
       u86cP: // global
           call _c86bn(R1) args: 0, res: 0, upd: 0;
       c86bo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEqIODeviceType_$c/=_info" {
     GHC.IO.Device.$fEqIODeviceType_$c/=_info:
         const GHC.IO.Device.$fEqIODeviceType_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86bn() //  [R1]
         { []
         }
     {offset
       c86bn: // global
           _s85Md::P64 = P64[Sp + 8];
           _c86bv::P64 = R1 & 7;
           if (_c86bv::P64 < 3) goto u86cB; else goto u86cC;
       u86cB: // global
           if (_c86bv::P64 < 2) goto c86br; else goto c86bs;
       c86br: // global
           I64[Sp + 8] = block_c86bB_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cL; else goto c86bD;
       u86cL: // global
           call _c86bB(R1) args: 0, res: 0, upd: 0;
       c86bD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86bs: // global
           I64[Sp + 8] = block_c86bQ_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cM; else goto c86bS;
       u86cM: // global
           call _c86bQ(R1) args: 0, res: 0, upd: 0;
       c86bS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       u86cC: // global
           if (_c86bv::P64 < 4) goto c86bt; else goto c86bu;
       c86bt: // global
           I64[Sp + 8] = block_c86c5_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cN; else goto c86c7;
       u86cN: // global
           call _c86c5(R1) args: 0, res: 0, upd: 0;
       c86c7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86bu: // global
           I64[Sp + 8] = block_c86ck_info;
           R1 = _s85Md::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86cO; else goto c86cm;
       u86cO: // global
           call _c86ck(R1) args: 0, res: 0, upd: 0;
       c86cm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86bn_info" {
     block_c86bn_info:
         const _c86bn;
         const 1;
         const 30;
 },
 _c86bB() //  [R1]
         { []
         }
     {offset
       c86bB: // global
           if (R1 & 7 == 1) goto u86cD; else goto u86cE;
       u86cD: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cE: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86bB_info" {
     block_c86bB_info:
         const _c86bB;
         const 0;
         const 30;
 },
 _c86bQ() //  [R1]
         { []
         }
     {offset
       c86bQ: // global
           if (R1 & 7 == 2) goto u86cF; else goto u86cG;
       u86cF: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cG: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86bQ_info" {
     block_c86bQ_info:
         const _c86bQ;
         const 0;
         const 30;
 },
 _c86c5() //  [R1]
         { []
         }
     {offset
       c86c5: // global
           if (R1 & 7 == 3) goto u86cH; else goto u86cI;
       u86cH: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cI: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86c5_info" {
     block_c86c5_info:
         const _c86c5;
         const 0;
         const 30;
 },
 _c86ck() //  [R1]
         { []
         }
     {offset
       c86ck: // global
           if (R1 & 7 == 4) goto u86cJ; else goto u86cK;
       u86cJ: // global
           Sp = Sp + 8;
           call _c86cw() args: 0, res: 0, upd: 0;
       u86cK: // global
           Sp = Sp + 8;
           call _c86cs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86ck_info" {
     block_c86ck_info:
         const _c86ck;
         const 0;
         const 30;
 },
 _c86cw() //  []
         { []
         }
     {offset
       c86cw: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86cs() //  []
         { []
         }
     {offset
       c86cs: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.528776875 UTC

[section ""data" . GHC.IO.Device.$fEqIODeviceType_closure" {
     GHC.IO.Device.$fEqIODeviceType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Device.$fEqIODeviceType_$c==_closure+2;
         const GHC.IO.Device.$fEqIODeviceType_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.531065639 UTC

[section ""data" . $dmisSeekable1_r81Zn_closure" {
     $dmisSeekable1_r81Zn_closure:
         const $dmisSeekable1_r81Zn_info;
 },
 $dmisSeekable1_r81Zn_entry() //  []
         { []
         }
     {offset
       c86dO: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmisSeekable1_r81Zn_info" {
     $dmisSeekable1_r81Zn_info:
         const $dmisSeekable1_r81Zn_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.535151344 UTC

[section ""data" . GHC.IO.Device.$dmisSeekable_closure" {
     GHC.IO.Device.$dmisSeekable_closure:
         const GHC.IO.Device.$dmisSeekable_info;
 },
 GHC.IO.Device.$dmisSeekable_entry() //  [R2, R3]
         { []
         }
     {offset
       c86e1: // global
           R3 = R3;
           R2 = R2;
           call $dmisSeekable1_r81Zn_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmisSeekable_info" {
     GHC.IO.Device.$dmisSeekable_info:
         const GHC.IO.Device.$dmisSeekable_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.538496241 UTC

[section ""data" . $dmisTerminal1_r81Zo_closure" {
     $dmisTerminal1_r81Zo_closure:
         const $dmisTerminal1_r81Zo_info;
 },
 $dmisTerminal1_r81Zo_entry() //  []
         { []
         }
     {offset
       c86ec: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmisTerminal1_r81Zo_info" {
     $dmisTerminal1_r81Zo_info:
         const $dmisTerminal1_r81Zo_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.541892811 UTC

[section ""data" . GHC.IO.Device.$dmisTerminal_closure" {
     GHC.IO.Device.$dmisTerminal_closure:
         const GHC.IO.Device.$dmisTerminal_info;
 },
 GHC.IO.Device.$dmisTerminal_entry() //  [R2, R3]
         { []
         }
     {offset
       c86ep: // global
           R3 = R3;
           R2 = R2;
           call $dmisTerminal1_r81Zo_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmisTerminal_info" {
     GHC.IO.Device.$dmisTerminal_info:
         const GHC.IO.Device.$dmisTerminal_entry;
         const 0;
         const 14;
         const 12884901903;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.545576965 UTC

[section ""data" . GHC.IO.Device.$dmdup1_closure" {
     GHC.IO.Device.$dmdup1_closure:
         const GHC.IO.Device.$dmdup1_info;
         const 0;
 },
 GHC.IO.Device.$dmdup1_entry() //  []
         { []
         }
     {offset
       c86eA: // global
           R3 = GHC.IO.Exception.unsupportedOperation_closure;
           R2 = GHC.IO.Exception.$fxExceptionIOException_closure;
           call GHC.IO.throwIO1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmdup1_info" {
     GHC.IO.Device.$dmdup1_info:
         const GHC.IO.Device.$dmdup1_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const S861B_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.548980375 UTC

[section ""data" . $dmseek1_r81Zp_closure" {
     $dmseek1_r81Zp_closure:
         const $dmseek1_r81Zp_info;
         const 0;
 },
 $dmseek1_r81Zp_entry() //  []
         { []
         }
     {offset
       c86eL: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmseek1_r81Zp_info" {
     $dmseek1_r81Zp_info:
         const $dmseek1_r81Zp_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.552451079 UTC

[section ""data" . GHC.IO.Device.$dmseek_closure" {
     GHC.IO.Device.$dmseek_closure:
         const GHC.IO.Device.$dmseek_info;
         const 0;
 },
 GHC.IO.Device.$dmseek_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c86eW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmseek1_r81Zp_entry(R5, R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmseek_info" {
     GHC.IO.Device.$dmseek_info:
         const GHC.IO.Device.$dmseek_entry;
         const 0;
         const 4294967310;
         const 21474836504;
         const S861B_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.55641889 UTC

[section ""data" . $dmtell1_r81Zq_closure" {
     $dmtell1_r81Zq_closure:
         const $dmtell1_r81Zq_info;
         const 0;
 },
 $dmtell1_r81Zq_entry() //  []
         { []
         }
     {offset
       c86f7: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmtell1_r81Zq_info" {
     $dmtell1_r81Zq_info:
         const $dmtell1_r81Zq_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.559799327 UTC

[section ""data" . GHC.IO.Device.$dmtell_closure" {
     GHC.IO.Device.$dmtell_closure:
         const GHC.IO.Device.$dmtell_info;
         const 0;
 },
 GHC.IO.Device.$dmtell_entry() //  [R2, R3]
         { []
         }
     {offset
       c86fi: // global
           R3 = R3;
           R2 = R2;
           call $dmtell1_r81Zq_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmtell_info" {
     GHC.IO.Device.$dmtell_info:
         const GHC.IO.Device.$dmtell_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.563137229 UTC

[section ""data" . $dmgetSize1_r81Zr_closure" {
     $dmgetSize1_r81Zr_closure:
         const $dmgetSize1_r81Zr_info;
         const 0;
 },
 $dmgetSize1_r81Zr_entry() //  []
         { []
         }
     {offset
       c86ft: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmgetSize1_r81Zr_info" {
     $dmgetSize1_r81Zr_info:
         const $dmgetSize1_r81Zr_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.566581004 UTC

[section ""data" . GHC.IO.Device.$dmgetSize_closure" {
     GHC.IO.Device.$dmgetSize_closure:
         const GHC.IO.Device.$dmgetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmgetSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c86fE: // global
           R3 = R3;
           R2 = R2;
           call $dmgetSize1_r81Zr_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmgetSize_info" {
     GHC.IO.Device.$dmgetSize_info:
         const GHC.IO.Device.$dmgetSize_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.570116873 UTC

[section ""data" . $dmsetSize1_r81Zs_closure" {
     $dmsetSize1_r81Zs_closure:
         const $dmsetSize1_r81Zs_info;
         const 0;
 },
 $dmsetSize1_r81Zs_entry() //  []
         { []
         }
     {offset
       c86fP: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsetSize1_r81Zs_info" {
     $dmsetSize1_r81Zs_info:
         const $dmsetSize1_r81Zs_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.57442583 UTC

[section ""data" . GHC.IO.Device.$dmsetSize_closure" {
     GHC.IO.Device.$dmsetSize_closure:
         const GHC.IO.Device.$dmsetSize_info;
         const 0;
 },
 GHC.IO.Device.$dmsetSize_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c86g0: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetSize1_r81Zs_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmsetSize_info" {
     GHC.IO.Device.$dmsetSize_info:
         const GHC.IO.Device.$dmsetSize_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.577910232 UTC

[section ""data" . $dmsetEcho1_r81Zt_closure" {
     $dmsetEcho1_r81Zt_closure:
         const $dmsetEcho1_r81Zt_info;
         const 0;
 },
 $dmsetEcho1_r81Zt_entry() //  []
         { []
         }
     {offset
       c86gb: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsetEcho1_r81Zt_info" {
     $dmsetEcho1_r81Zt_info:
         const $dmsetEcho1_r81Zt_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.581434976 UTC

[section ""data" . GHC.IO.Device.$dmsetEcho_closure" {
     GHC.IO.Device.$dmsetEcho_closure:
         const GHC.IO.Device.$dmsetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmsetEcho_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c86gm: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetEcho1_r81Zt_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmsetEcho_info" {
     GHC.IO.Device.$dmsetEcho_info:
         const GHC.IO.Device.$dmsetEcho_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.584844203 UTC

[section ""data" . $dmgetEcho1_r81Zu_closure" {
     $dmgetEcho1_r81Zu_closure:
         const $dmgetEcho1_r81Zu_info;
         const 0;
 },
 $dmgetEcho1_r81Zu_entry() //  []
         { []
         }
     {offset
       c86gx: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmgetEcho1_r81Zu_info" {
     $dmgetEcho1_r81Zu_info:
         const $dmgetEcho1_r81Zu_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.588283746 UTC

[section ""data" . GHC.IO.Device.$dmgetEcho_closure" {
     GHC.IO.Device.$dmgetEcho_closure:
         const GHC.IO.Device.$dmgetEcho_info;
         const 0;
 },
 GHC.IO.Device.$dmgetEcho_entry() //  [R2, R3]
         { []
         }
     {offset
       c86gI: // global
           R3 = R3;
           R2 = R2;
           call $dmgetEcho1_r81Zu_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmgetEcho_info" {
     GHC.IO.Device.$dmgetEcho_info:
         const GHC.IO.Device.$dmgetEcho_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.591819581 UTC

[section ""data" . $dmsetRaw1_r81Zv_closure" {
     $dmsetRaw1_r81Zv_closure:
         const $dmsetRaw1_r81Zv_info;
         const 0;
 },
 $dmsetRaw1_r81Zv_entry() //  []
         { []
         }
     {offset
       c86gT: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmsetRaw1_r81Zv_info" {
     $dmsetRaw1_r81Zv_info:
         const $dmsetRaw1_r81Zv_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.595778181 UTC

[section ""data" . GHC.IO.Device.$dmsetRaw_closure" {
     GHC.IO.Device.$dmsetRaw_closure:
         const GHC.IO.Device.$dmsetRaw_info;
         const 0;
 },
 GHC.IO.Device.$dmsetRaw_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c86h4: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmsetRaw1_r81Zv_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmsetRaw_info" {
     GHC.IO.Device.$dmsetRaw_info:
         const GHC.IO.Device.$dmsetRaw_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.599205518 UTC

[section ""data" . $dmdup3_r81Zw_closure" {
     $dmdup3_r81Zw_closure:
         const $dmdup3_r81Zw_info;
         const 0;
 },
 $dmdup3_r81Zw_entry() //  []
         { []
         }
     {offset
       c86hf: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmdup3_r81Zw_info" {
     $dmdup3_r81Zw_info:
         const $dmdup3_r81Zw_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.602613154 UTC

[section ""data" . GHC.IO.Device.$dmdup_closure" {
     GHC.IO.Device.$dmdup_closure:
         const GHC.IO.Device.$dmdup_info;
         const 0;
 },
 GHC.IO.Device.$dmdup_entry() //  [R2, R3]
         { []
         }
     {offset
       c86hq: // global
           R3 = R3;
           R2 = R2;
           call $dmdup3_r81Zw_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmdup_info" {
     GHC.IO.Device.$dmdup_info:
         const GHC.IO.Device.$dmdup_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const S861B_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.606108339 UTC

[section ""data" . $dmdup4_r81Zx_closure" {
     $dmdup4_r81Zx_closure:
         const $dmdup4_r81Zx_info;
         const 0;
 },
 $dmdup4_r81Zx_entry() //  []
         { []
         }
     {offset
       c86hB: // global
           call GHC.IO.Device.$dmdup1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . $dmdup4_r81Zx_info" {
     $dmdup4_r81Zx_info:
         const $dmdup4_r81Zx_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.609667378 UTC

[section ""data" . GHC.IO.Device.$dmdup2_closure" {
     GHC.IO.Device.$dmdup2_closure:
         const GHC.IO.Device.$dmdup2_info;
         const 0;
 },
 GHC.IO.Device.$dmdup2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c86hM: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call $dmdup4_r81Zx_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$dmdup2_info" {
     GHC.IO.Device.$dmdup2_info:
         const GHC.IO.Device.$dmdup2_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const S861B_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.615979742 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$ccompare_closure" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_closure:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$ccompare_entry() //  [R2, R3]
         { []
         }
     {offset
       c86i5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86i6; else goto c86i7;
       c86i6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$ccompare_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86i7: // global
           I64[Sp - 16] = block_c86hX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86jg; else goto c86hY;
       u86jg: // global
           call _c86hX(R1) args: 0, res: 0, upd: 0;
       c86hY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$ccompare_info" {
     GHC.IO.Device.$fOrdSeekMode_$ccompare_info:
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86hX() //  [R1]
         { []
         }
     {offset
       c86hX: // global
           _s85MY::P64 = P64[Sp + 8];
           _c86i4::P64 = R1 & 7;
           if (_c86i4::P64 < 3) goto u86j2; else goto c86i3;
       u86j2: // global
           if (_c86i4::P64 < 2) goto c86i1; else goto c86i2;
       c86i1: // global
           I64[Sp + 8] = block_c86ia_info;
           R1 = _s85MY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86jd; else goto c86ic;
       u86jd: // global
           call _c86ia(R1) args: 0, res: 0, upd: 0;
       c86ic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86i2: // global
           I64[Sp + 8] = block_c86it_info;
           R1 = _s85MY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86je; else goto c86iv;
       u86je: // global
           call _c86it(R1) args: 0, res: 0, upd: 0;
       c86iv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86i3: // global
           I64[Sp + 8] = block_c86iM_info;
           R1 = _s85MY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86jf; else goto c86iO;
       u86jf: // global
           call _c86iM(R1) args: 0, res: 0, upd: 0;
       c86iO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86hX_info" {
     block_c86hX_info:
         const _c86hX;
         const 1;
         const 30;
 },
 _c86ia() //  [R1]
         { []
         }
     {offset
       c86ia: // global
           _c86j1::P64 = R1 & 7;
           if (_c86j1::P64 < 3) goto u86j3; else goto u86j5;
       u86j3: // global
           if (_c86j1::P64 < 2) goto u86j7; else goto u86j6;
       u86j7: // global
           Sp = Sp + 8;
           call _c86iY() args: 0, res: 0, upd: 0;
       u86j6: // global
           Sp = Sp + 8;
           goto u86ji;
       u86j5: // global
           Sp = Sp + 8;
           goto u86ji;
       u86ji: // global
           call _c86iJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86ia_info" {
     block_c86ia_info:
         const _c86ia;
         const 0;
         const 30;
 },
 _c86it() //  [R1]
         { []
         }
     {offset
       c86it: // global
           _c86j0::P64 = R1 & 7;
           if (_c86j0::P64 < 3) goto u86j4; else goto u86j8;
       u86j4: // global
           if (_c86j0::P64 < 2) goto u86ja; else goto u86j9;
       u86ja: // global
           Sp = Sp + 8;
           call _c86iU() args: 0, res: 0, upd: 0;
       u86j9: // global
           Sp = Sp + 8;
           call _c86iY() args: 0, res: 0, upd: 0;
       u86j8: // global
           Sp = Sp + 8;
           call _c86iJ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86it_info" {
     block_c86it_info:
         const _c86it;
         const 0;
         const 30;
 },
 _c86iJ() //  []
         { []
         }
     {offset
       c86iJ: // global
           R1 = GHC.Types.LT_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86iM() //  [R1]
         { []
         }
     {offset
       c86iM: // global
           if (R1 & 7 == 3) goto u86jb; else goto u86jc;
       u86jb: // global
           Sp = Sp + 8;
           call _c86iY() args: 0, res: 0, upd: 0;
       u86jc: // global
           Sp = Sp + 8;
           call _c86iU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86iM_info" {
     block_c86iM_info:
         const _c86iM;
         const 0;
         const 30;
 },
 _c86iY() //  []
         { []
         }
     {offset
       c86iY: // global
           R1 = GHC.Types.EQ_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86iU() //  []
         { []
         }
     {offset
       c86iU: // global
           R1 = GHC.Types.GT_closure+3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.632520286 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<_entry() //  [R2, R3]
         { []
         }
     {offset
       c86kh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86ki; else goto c86kj;
       c86ki: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86kj: // global
           I64[Sp - 16] = block_c86k9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86ld; else goto c86ka;
       u86ld: // global
           call _c86k9(R1) args: 0, res: 0, upd: 0;
       c86ka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c<_info" {
     GHC.IO.Device.$fOrdSeekMode_$c<_info:
         const GHC.IO.Device.$fOrdSeekMode_$c<_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86k9() //  [R1]
         { []
         }
     {offset
       c86k9: // global
           _s85N4::P64 = P64[Sp + 8];
           _c86kg::P64 = R1 & 7;
           if (_c86kg::P64 < 3) goto u86l3; else goto c86kf;
       u86l3: // global
           if (_c86kg::P64 < 2) goto c86kd; else goto c86ke;
       c86kd: // global
           I64[Sp + 8] = block_c86km_info;
           R1 = _s85N4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86la; else goto c86ko;
       u86la: // global
           call _c86km(R1) args: 0, res: 0, upd: 0;
       c86ko: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86ke: // global
           I64[Sp + 8] = block_c86kF_info;
           R1 = _s85N4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86lb; else goto c86kH;
       u86lb: // global
           call _c86kF(R1) args: 0, res: 0, upd: 0;
       c86kH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86kf: // global
           I64[Sp + 8] = block_c86kU_info;
           R1 = _s85N4::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86lc; else goto c86kW;
       u86lc: // global
           call _c86kU() args: 0, res: 0, upd: 0;
       c86kW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86k9_info" {
     block_c86k9_info:
         const _c86k9;
         const 1;
         const 30;
 },
 _c86km() //  [R1]
         { []
         }
     {offset
       c86km: // global
           _c86l2::P64 = R1 & 7;
           if (_c86l2::P64 < 3) goto u86l4; else goto u86l5;
       u86l4: // global
           if (_c86l2::P64 < 2) goto u86l7; else goto u86l6;
       u86l7: // global
           Sp = Sp + 8;
           call _c86kN() args: 0, res: 0, upd: 0;
       u86l6: // global
           Sp = Sp + 8;
           goto u86lf;
       u86l5: // global
           Sp = Sp + 8;
           goto u86lf;
       u86lf: // global
           call _c86kR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86km_info" {
     block_c86km_info:
         const _c86km;
         const 0;
         const 30;
 },
 _c86kF() //  [R1]
         { []
         }
     {offset
       c86kF: // global
           if (R1 & 7 == 3) goto u86l8; else goto u86l9;
       u86l8: // global
           Sp = Sp + 8;
           call _c86kR() args: 0, res: 0, upd: 0;
       u86l9: // global
           Sp = Sp + 8;
           call _c86kN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86kF_info" {
     block_c86kF_info:
         const _c86kF;
         const 0;
         const 30;
 },
 _c86kR() //  []
         { []
         }
     {offset
       c86kR: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86kN() //  []
         { []
         }
     {offset
       c86kN: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86kU() //  []
         { []
         }
     {offset
       c86kU: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86kU_info" {
     block_c86kU_info:
         const _c86kU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.648045991 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c<=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c<=_entry() //  [R2, R3]
         { []
         }
     {offset
       c86ma: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86mb; else goto c86mc;
       c86mb: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c<=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86mc: // global
           I64[Sp - 16] = block_c86m2_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86mZ; else goto c86m3;
       u86mZ: // global
           call _c86m2(R1) args: 0, res: 0, upd: 0;
       c86m3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c<=_info" {
     GHC.IO.Device.$fOrdSeekMode_$c<=_info:
         const GHC.IO.Device.$fOrdSeekMode_$c<=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86m2() //  [R1]
         { []
         }
     {offset
       c86m2: // global
           _s85N9::P64 = P64[Sp + 8];
           _c86m9::P64 = R1 & 7;
           if (_c86m9::P64 < 3) goto u86mW; else goto c86m8;
       u86mW: // global
           if (_c86m9::P64 < 2) goto c86m6; else goto c86m7;
       c86m6: // global
           _s85Nc::I64 = 0;
           goto s85Nb;
       c86m7: // global
           _s85Nc::I64 = 1;
           goto s85Nb;
       c86m8: // global
           _s85Nc::I64 = 2;
           goto s85Nb;
       s85Nb: // global
           I64[Sp] = block_c86mg_info;
           R1 = _s85N9::P64;
           I64[Sp + 8] = _s85Nc::I64;
           if (R1 & 7 != 0) goto u86mY; else goto c86mi;
       u86mY: // global
           call _c86mg(R1) args: 0, res: 0, upd: 0;
       c86mi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86m2_info" {
     block_c86m2_info:
         const _c86m2;
         const 1;
         const 30;
 },
 _c86mg() //  [R1]
         { []
         }
     {offset
       c86mg: // global
           _s85Nc::I64 = I64[Sp + 8];
           _c86mV::P64 = R1 & 7;
           if (_c86mV::P64 < 3) goto u86mX; else goto c86mL;
       u86mX: // global
           if (_c86mV::P64 < 2) goto c86mt; else goto c86mC;
       c86mt: // global
           if (%MO_S_Ge_W64(_s85Nc::I64, 0)) goto c86mJ; else goto c86mK;
       c86mC: // global
           if (%MO_S_Ge_W64(_s85Nc::I64, 1)) goto c86mJ; else goto c86mK;
       c86mL: // global
           if (%MO_S_Ge_W64(_s85Nc::I64, 2)) goto c86mJ; else goto c86mK;
       c86mJ: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86mK: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86mg_info" {
     block_c86mg_info:
         const _c86mg;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.659045176 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmax_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmax_entry() //  [R2, R3]
         { []
         }
     {offset
       c86nv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86nw; else goto c86nx;
       c86nw: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmax_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86nx: // global
           I64[Sp - 24] = block_c86np_info;
           _s85Nj::P64 = R3;
           R3 = R3;
           _s85Ni::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s85Ni::P64;
           P64[Sp - 8] = _s85Nj::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$cmax_info" {
     GHC.IO.Device.$fOrdSeekMode_$cmax_info:
         const GHC.IO.Device.$fOrdSeekMode_$cmax_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86np() //  [R1]
         { []
         }
     {offset
       c86np: // global
           if (R1 & 7 == 1) goto c86ns; else goto c86nt;
       c86ns: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86nt: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86np_info" {
     block_c86np_info:
         const _c86np;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.665965113 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>=_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>=_entry() //  [R2, R3]
         { []
         }
     {offset
       c86o7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86o8; else goto c86o9;
       c86o8: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$c>=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86o9: // global
           I64[Sp - 16] = block_c86nZ_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86oW; else goto c86o0;
       u86oW: // global
           call _c86nZ(R1) args: 0, res: 0, upd: 0;
       c86o0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c>=_info" {
     GHC.IO.Device.$fOrdSeekMode_$c>=_info:
         const GHC.IO.Device.$fOrdSeekMode_$c>=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86nZ() //  [R1]
         { []
         }
     {offset
       c86nZ: // global
           _s85Nm::P64 = P64[Sp + 8];
           _c86o6::P64 = R1 & 7;
           if (_c86o6::P64 < 3) goto u86oT; else goto c86o5;
       u86oT: // global
           if (_c86o6::P64 < 2) goto c86o3; else goto c86o4;
       c86o3: // global
           _s85No::I64 = 0;
           goto s85Nn;
       c86o4: // global
           _s85No::I64 = 1;
           goto s85Nn;
       c86o5: // global
           _s85No::I64 = 2;
           goto s85Nn;
       s85Nn: // global
           I64[Sp] = block_c86od_info;
           R1 = _s85Nm::P64;
           I64[Sp + 8] = _s85No::I64;
           if (R1 & 7 != 0) goto u86oV; else goto c86of;
       u86oV: // global
           call _c86od(R1) args: 0, res: 0, upd: 0;
       c86of: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86nZ_info" {
     block_c86nZ_info:
         const _c86nZ;
         const 1;
         const 30;
 },
 _c86od() //  [R1]
         { []
         }
     {offset
       c86od: // global
           _s85No::I64 = I64[Sp + 8];
           _c86oS::P64 = R1 & 7;
           if (_c86oS::P64 < 3) goto u86oU; else goto c86oI;
       u86oU: // global
           if (_c86oS::P64 < 2) goto c86oq; else goto c86oz;
       c86oq: // global
           if (%MO_S_Ge_W64(_s85No::I64, 0)) goto c86oG; else goto c86oH;
       c86oz: // global
           if (%MO_S_Ge_W64(_s85No::I64, 1)) goto c86oG; else goto c86oH;
       c86oI: // global
           if (%MO_S_Ge_W64(_s85No::I64, 2)) goto c86oG; else goto c86oH;
       c86oG: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86oH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86od_info" {
     block_c86od_info:
         const _c86od;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.675759497 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$c>_closure" {
     GHC.IO.Device.$fOrdSeekMode_$c>_closure:
         const GHC.IO.Device.$fOrdSeekMode_$c>_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$c>_entry() //  [R2, R3]
         { []
         }
     {offset
       c86pm: // global
           _s85Nv::P64 = R3;
           R3 = R2;
           R2 = _s85Nv::P64;
           call GHC.IO.Device.$fOrdSeekMode_$c<_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$c>_info" {
     GHC.IO.Device.$fOrdSeekMode_$c>_info:
         const GHC.IO.Device.$fOrdSeekMode_$c>_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.685055124 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_$cmin_closure" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_closure:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_info;
 },
 GHC.IO.Device.$fOrdSeekMode_$cmin_entry() //  [R2, R3]
         { []
         }
     {offset
       c86pD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86pE; else goto c86pF;
       c86pE: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fOrdSeekMode_$cmin_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86pF: // global
           I64[Sp - 24] = block_c86px_info;
           _s85Nx::P64 = R3;
           R3 = R3;
           _s85Nw::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s85Nw::P64;
           P64[Sp - 8] = _s85Nx::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$fOrdSeekMode_$c<=_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fOrdSeekMode_$cmin_info" {
     GHC.IO.Device.$fOrdSeekMode_$cmin_info:
         const GHC.IO.Device.$fOrdSeekMode_$cmin_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86px() //  [R1]
         { []
         }
     {offset
       c86px: // global
           if (R1 & 7 == 1) goto c86pA; else goto c86pB;
       c86pA: // global
           R1 = P64[Sp + 16] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86pB: // global
           R1 = P64[Sp + 8] & (-8);
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86px_info" {
     block_c86px_info:
         const _c86px;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.692019579 UTC

[section ""data" . GHC.IO.Device.$fOrdSeekMode_closure" {
     GHC.IO.Device.$fOrdSeekMode_closure:
         const GHC.Classes.C:Ord_con_info;
         const GHC.IO.Device.$fEqSeekMode_closure+1;
         const GHC.IO.Device.$fOrdSeekMode_$ccompare_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c<=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$c>=_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmax_closure+2;
         const GHC.IO.Device.$fOrdSeekMode_$cmin_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.697093655 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeIndex_closure" {
     GHC.IO.Device.$w$cunsafeIndex_closure:
         const GHC.IO.Device.$w$cunsafeIndex_info;
 },
 GHC.IO.Device.$w$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c86qe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86qf; else goto c86qg;
       c86qf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86qg: // global
           I64[Sp - 16] = block_c86q6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86rt; else goto c86q7;
       u86rt: // global
           call _c86q6(R1) args: 0, res: 0, upd: 0;
       c86q7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cunsafeIndex_info" {
     GHC.IO.Device.$w$cunsafeIndex_info:
         const GHC.IO.Device.$w$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86q6() //  [R1]
         { []
         }
     {offset
       c86q6: // global
           _s85NA::P64 = P64[Sp + 8];
           _c86qd::P64 = R1 & 7;
           if (_c86qd::P64 < 3) goto u86rf; else goto c86qc;
       u86rf: // global
           if (_c86qd::P64 < 2) goto c86qa; else goto c86qb;
       c86qa: // global
           I64[Sp + 8] = block_c86qj_info;
           R1 = _s85NA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86rq; else goto c86ql;
       u86rq: // global
           call _c86qj(R1) args: 0, res: 0, upd: 0;
       c86ql: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86qb: // global
           I64[Sp + 8] = block_c86qC_info;
           R1 = _s85NA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86rr; else goto c86qE;
       u86rr: // global
           call _c86qC(R1) args: 0, res: 0, upd: 0;
       c86qE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86qc: // global
           I64[Sp + 8] = block_c86qV_info;
           R1 = _s85NA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86rs; else goto c86qX;
       u86rs: // global
           call _c86qV(R1) args: 0, res: 0, upd: 0;
       c86qX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86q6_info" {
     block_c86q6_info:
         const _c86q6;
         const 1;
         const 30;
 },
 _c86qj() //  [R1]
         { []
         }
     {offset
       c86qj: // global
           _c86re::P64 = R1 & 7;
           if (_c86re::P64 < 3) goto u86rg; else goto c86qz;
       u86rg: // global
           if (_c86re::P64 < 2) goto u86rk; else goto u86rj;
       u86rk: // global
           Sp = Sp + 8;
           call _c86rb() args: 0, res: 0, upd: 0;
       u86rj: // global
           Sp = Sp + 8;
           call _c86qS() args: 0, res: 0, upd: 0;
       c86qz: // global
           R1 = 2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86qj_info" {
     block_c86qj_info:
         const _c86qj;
         const 0;
         const 30;
 },
 _c86qC() //  [R1]
         { []
         }
     {offset
       c86qC: // global
           _c86rd::P64 = R1 & 7;
           if (_c86rd::P64 < 3) goto u86rh; else goto u86rl;
       u86rh: // global
           if (_c86rd::P64 < 2) goto u86rn; else goto u86rm;
       u86rn: // global
           Sp = Sp + 8;
           call _c86r7() args: 0, res: 0, upd: 0;
       u86rm: // global
           Sp = Sp + 8;
           call _c86rb() args: 0, res: 0, upd: 0;
       u86rl: // global
           Sp = Sp + 8;
           call _c86qS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86qC_info" {
     block_c86qC_info:
         const _c86qC;
         const 0;
         const 30;
 },
 _c86qS() //  []
         { []
         }
     {offset
       c86qS: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86qV() //  [R1]
         { []
         }
     {offset
       c86qV: // global
           _c86rc::P64 = R1 & 7;
           if (_c86rc::P64 < 3) goto u86ri; else goto u86ro;
       u86ri: // global
           if (_c86rc::P64 < 2) goto c86r3; else goto u86rp;
       c86r3: // global
           R1 = (-2);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u86rp: // global
           Sp = Sp + 8;
           call _c86r7() args: 0, res: 0, upd: 0;
       u86ro: // global
           Sp = Sp + 8;
           call _c86rb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86qV_info" {
     block_c86qV_info:
         const _c86qV;
         const 0;
         const 30;
 },
 _c86r7() //  []
         { []
         }
     {offset
       c86r7: // global
           R1 = (-1);
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86rb() //  []
         { []
         }
     {offset
       c86rb: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.712486011 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry() //  [R2, R3]
         { []
         }
     {offset
       c86sm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86su; else goto c86sv;
       c86su: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86sv: // global
           I64[Sp - 16] = block_c86sj_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86sA; else goto c86sk;
       u86sA: // global
           call _c86sj(R1) args: 0, res: 0, upd: 0;
       c86sk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_info:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86sj() //  [R1]
         { []
         }
     {offset
       c86sj: // global
           _s85NG::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c86sp_info;
           R3 = _s85NG::P64;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86sj_info" {
     block_c86sj_info:
         const _c86sj;
         const 1;
         const 30;
 },
 _c86sp() //  [R1]
         { []
         }
     {offset
       c86sp: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86sz; else goto c86sy;
       c86sz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86sy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86sp_info" {
     block_c86sp_info:
         const _c86sp;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.722051286 UTC

[section ""data" . GHC.IO.Device.$w$cinRange_closure" {
     GHC.IO.Device.$w$cinRange_closure:
         const GHC.IO.Device.$w$cinRange_info;
 },
 GHC.IO.Device.$w$cinRange_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c86t5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86t6; else goto c86t7;
       c86t6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cinRange_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c86t7: // global
           I64[Sp - 24] = block_c86sX_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u86ur; else goto c86sY;
       u86ur: // global
           call _c86sX(R1) args: 0, res: 0, upd: 0;
       c86sY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cinRange_info" {
     GHC.IO.Device.$w$cinRange_info:
         const GHC.IO.Device.$w$cinRange_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c86sX() //  [R1]
         { []
         }
     {offset
       c86sX: // global
           _s85NM::P64 = P64[Sp + 8];
           _c86t4::P64 = R1 & 7;
           if (_c86t4::P64 < 3) goto u86un; else goto c86t3;
       u86un: // global
           if (_c86t4::P64 < 2) goto c86t1; else goto c86t2;
       c86t1: // global
           _s85NP::I64 = 0;
           goto s85NO;
       c86t2: // global
           _s85NP::I64 = 1;
           goto s85NO;
       c86t3: // global
           _s85NP::I64 = 2;
           goto s85NO;
       s85NO: // global
           I64[Sp] = block_c86td_info;
           R1 = _s85NM::P64;
           I64[Sp + 8] = _s85NP::I64;
           if (R1 & 7 != 0) goto u86uq; else goto c86tO;
       u86uq: // global
           call _c86td(R1) args: 0, res: 0, upd: 0;
       c86tO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86sX_info" {
     block_c86sX_info:
         const _c86sX;
         const 2;
         const 30;
 },
 _c86td() //  [R1]
         { []
         }
     {offset
       c86td: // global
           _s85NN::P64 = P64[Sp + 16];
           _c86uc::P64 = R1 & 7;
           if (_c86uc::P64 < 3) goto u86uo; else goto c86u2;
       u86uo: // global
           if (_c86uc::P64 < 2) goto c86tU; else goto c86tY;
       c86tU: // global
           _s85NR::I64 = 0;
           goto s85NQ;
       c86tY: // global
           _s85NR::I64 = 1;
           goto s85NQ;
       c86u2: // global
           _s85NR::I64 = 2;
           goto s85NQ;
       s85NQ: // global
           I64[Sp] = block_c86ti_info;
           R1 = _s85NN::P64;
           I64[Sp + 16] = _s85NR::I64;
           if (R1 & 7 != 0) goto u86us; else goto c86tk;
       u86us: // global
           call _c86ti(R1) args: 0, res: 0, upd: 0;
       c86tk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86td_info" {
     block_c86td_info:
         const _c86td;
         const 66;
         const 30;
 },
 _c86ti() //  [R1]
         { []
         }
     {offset
       c86ti: // global
           _s85NP::I64 = I64[Sp + 8];
           _s85NR::I64 = I64[Sp + 16];
           _c86ud::P64 = R1 & 7;
           if (_c86ud::P64 < 3) goto u86up; else goto c86tN;
       u86up: // global
           if (_c86ud::P64 < 2) goto c86tv; else goto c86tE;
       c86tv: // global
           if (%MO_S_Lt_W64(0, _s85NP::I64)) goto c86tL; else goto c86tt;
       c86tt: // global
           R1 = I64[(%MO_S_Le_W64(0,
                                  _s85NR::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86tE: // global
           if (%MO_S_Lt_W64(1, _s85NP::I64)) goto c86tL; else goto c86tD;
       c86tD: // global
           R1 = I64[(%MO_S_Le_W64(1,
                                  _s85NR::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86tN: // global
           if (%MO_S_Lt_W64(2, _s85NP::I64)) goto c86tL; else goto c86tM;
       c86tL: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86tM: // global
           R1 = I64[(%MO_S_Le_W64(2,
                                  _s85NR::I64) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86ti_info" {
     block_c86ti_info:
         const _c86ti;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.73366517 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cinRange_closure" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_closure:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cinRange_entry() //  [R2, R3]
         { []
         }
     {offset
       c86vb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86vc; else goto c86vd;
       c86vc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cinRange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86vd: // global
           I64[Sp - 16] = block_c86v8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86vh; else goto c86v9;
       u86vh: // global
           call _c86v8(R1) args: 0, res: 0, upd: 0;
       c86v9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cinRange_info" {
     GHC.IO.Device.$fIxSeekMode_$cinRange_info:
         const GHC.IO.Device.$fIxSeekMode_$cinRange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86v8() //  [R1]
         { []
         }
     {offset
       c86v8: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86v8_info" {
     block_c86v8_info:
         const _c86v8;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.738793172 UTC

[section ""data" . lvl_r81Zy_closure" {
     lvl_r81Zy_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.740538563 UTC

[section ""data" . lvl1_r81Zz_closure" {
     lvl1_r81Zz_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.742385746 UTC

[section ""data" . lvl2_r81ZA_closure" {
     lvl2_r81ZA_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.745423458 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info;
 },
 GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry() //  [R2]
         { []
         }
     {offset
       c86vH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86vI; else goto c86vJ;
       c86vI: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86vJ: // global
           I64[Sp - 8] = block_c86vz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86vU; else goto c86vA;
       u86vU: // global
           call _c86vz(R1) args: 0, res: 0, upd: 0;
       c86vA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info" {
     GHC.IO.Device.$fEnumSeekMode_$cfromEnum_info:
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c86vz() //  [R1]
         { []
         }
     {offset
       c86vz: // global
           _c86vG::P64 = R1 & 7;
           if (_c86vG::P64 < 3) goto u86vT; else goto c86vF;
       u86vT: // global
           if (_c86vG::P64 < 2) goto c86vD; else goto c86vE;
       c86vD: // global
           R1 = lvl_r81Zy_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86vE: // global
           R1 = lvl1_r81Zz_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86vF: // global
           R1 = lvl2_r81ZA_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86vz_info" {
     block_c86vz_info:
         const _c86vz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.753401342 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go1_closure" {
     GHC.IO.Device.$fIxSeekMode_go1_closure:
         const GHC.IO.Device.$fIxSeekMode_go1_info;
 },
 sat_s85Oc_entry() //  [R1]
         { []
         }
     {offset
       c86wl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86wm; else goto c86wn;
       c86wm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86wn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Oa::I64 = I64[R1 + 16];
           if (_s85Oa::I64 != 0) goto c86wj; else goto c86wk;
       c86wj: // global
           R2 = _s85Oa::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c86wk: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Oc_info" {
     sat_s85Oc_info:
         const sat_s85Oc_entry;
         const 4294967296;
         const 17;
 },
 sat_s85O9_entry() //  [R1]
         { []
         }
     {offset
       c86wu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86wv; else goto c86ww;
       c86wv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86ww: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85O9_info" {
     sat_s85O9_info:
         const sat_s85O9_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fIxSeekMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c86wy: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c86wC; else goto c86wB;
       c86wC: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86wB: // global
           I64[Hp - 64] = sat_s85Oc_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85O9_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_go1_info" {
     GHC.IO.Device.$fIxSeekMode_go1_info:
         const GHC.IO.Device.$fIxSeekMode_go1_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.762453574 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_go_closure" {
     GHC.IO.Device.$fIxSeekMode_go_closure:
         const GHC.IO.Device.$fIxSeekMode_go_info;
 },
 sat_s85Oh_entry() //  [R1]
         { []
         }
     {offset
       c86xe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86xf; else goto c86xg;
       c86xf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86xg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Of::I64 = I64[R1 + 16];
           if (_s85Of::I64 != 1) goto c86xc; else goto c86xd;
       c86xc: // global
           R2 = _s85Of::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c86xd: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Oh_info" {
     sat_s85Oh_info:
         const sat_s85Oh_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Oe_entry() //  [R1]
         { []
         }
     {offset
       c86xn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86xo; else goto c86xp;
       c86xo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86xp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Oe_info" {
     sat_s85Oe_info:
         const sat_s85Oe_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fIxSeekMode_go_entry() //  [R2]
         { []
         }
     {offset
       c86xr: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c86xv; else goto c86xu;
       c86xv: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86xu: // global
           I64[Hp - 64] = sat_s85Oh_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Oe_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_go_info" {
     GHC.IO.Device.$fIxSeekMode_go_info:
         const GHC.IO.Device.$fIxSeekMode_go_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.772068951 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go3_closure" {
     GHC.IO.Device.$fEnumSeekMode_go3_closure:
         const GHC.IO.Device.$fEnumSeekMode_go3_info;
 },
 sat_s85Om_entry() //  [R1]
         { []
         }
     {offset
       c86y7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86y8; else goto c86y9;
       c86y8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86y9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Ok::I64 = I64[R1 + 16];
           if (_s85Ok::I64 != 2) goto c86y5; else goto c86y6;
       c86y5: // global
           R2 = _s85Ok::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
       c86y6: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Om_info" {
     sat_s85Om_info:
         const sat_s85Om_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Oj_entry() //  [R1]
         { []
         }
     {offset
       c86yg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86yh; else goto c86yi;
       c86yh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86yi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Oj_info" {
     sat_s85Oj_info:
         const sat_s85Oj_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fEnumSeekMode_go3_entry() //  [R2]
         { []
         }
     {offset
       c86yk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c86yo; else goto c86yn;
       c86yo: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86yn: // global
           I64[Hp - 64] = sat_s85Om_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Oj_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go3_info" {
     GHC.IO.Device.$fEnumSeekMode_go3_info:
         const GHC.IO.Device.$fEnumSeekMode_go3_entry;
         const 0;
         const 14;
         const 4294967300;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.781171724 UTC

[section ""data" . GHC.IO.Device.$w$crange_closure" {
     GHC.IO.Device.$w$crange_closure:
         const GHC.IO.Device.$w$crange_info;
 },
 GHC.IO.Device.$w$crange_entry() //  [R2, R3]
         { []
         }
     {offset
       c86z2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86z3; else goto c86z4;
       c86z3: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crange_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86z4: // global
           I64[Sp - 16] = block_c86yU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86zR; else goto c86yV;
       u86zR: // global
           call _c86yU(R1) args: 0, res: 0, upd: 0;
       c86yV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$crange_info" {
     GHC.IO.Device.$w$crange_info:
         const GHC.IO.Device.$w$crange_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86yU() //  [R1]
         { []
         }
     {offset
       c86yU: // global
           _s85Oo::P64 = P64[Sp + 8];
           _c86z1::P64 = R1 & 7;
           if (_c86z1::P64 < 3) goto u86zO; else goto c86z0;
       u86zO: // global
           if (_c86z1::P64 < 2) goto c86yY; else goto c86yZ;
       c86yY: // global
           _s85Oq::I64 = 0;
           goto s85Op;
       c86yZ: // global
           _s85Oq::I64 = 1;
           goto s85Op;
       c86z0: // global
           _s85Oq::I64 = 2;
           goto s85Op;
       s85Op: // global
           I64[Sp] = block_c86z8_info;
           R1 = _s85Oo::P64;
           I64[Sp + 8] = _s85Oq::I64;
           if (R1 & 7 != 0) goto u86zQ; else goto c86za;
       u86zQ: // global
           call _c86z8(R1) args: 0, res: 0, upd: 0;
       c86za: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86yU_info" {
     block_c86yU_info:
         const _c86yU;
         const 1;
         const 30;
 },
 _c86z8() //  [R1]
         { []
         }
     {offset
       c86z8: // global
           _s85Oq::I64 = I64[Sp + 8];
           _c86zN::P64 = R1 & 7;
           if (_c86zN::P64 < 3) goto u86zP; else goto c86zD;
       u86zP: // global
           if (_c86zN::P64 < 2) goto c86zl; else goto c86zu;
       c86zl: // global
           if (%MO_S_Gt_W64(_s85Oq::I64, 0)) goto c86zC; else goto c86zi;
       c86zi: // global
           R2 = _s85Oq::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c86zu: // global
           if (%MO_S_Gt_W64(_s85Oq::I64, 1)) goto c86zC; else goto c86zs;
       c86zs: // global
           R2 = _s85Oq::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fIxSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
       c86zD: // global
           if (%MO_S_Gt_W64(_s85Oq::I64, 2)) goto c86zC; else goto c86zB;
       c86zC: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86zB: // global
           R2 = _s85Oq::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86z8_info" {
     block_c86z8_info:
         const _c86z8;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.789738118 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crange_closure" {
     GHC.IO.Device.$fIxSeekMode_$crange_closure:
         const GHC.IO.Device.$fIxSeekMode_$crange_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crange_entry() //  [R2]
         { []
         }
     {offset
       c86Ai: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Aj; else goto c86Ak;
       c86Aj: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crange_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Ak: // global
           I64[Sp - 8] = block_c86Af_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Ao; else goto c86Ag;
       u86Ao: // global
           call _c86Af(R1) args: 0, res: 0, upd: 0;
       c86Ag: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$crange_info" {
     GHC.IO.Device.$fIxSeekMode_$crange_info:
         const GHC.IO.Device.$fIxSeekMode_$crange_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c86Af() //  [R1]
         { []
         }
     {offset
       c86Af: // global
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$crange_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Af_info" {
     block_c86Af_info:
         const _c86Af;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.798192964 UTC

[section ""data" . GHC.IO.Device.$w$crangeSize_closure" {
     GHC.IO.Device.$w$crangeSize_closure:
         const GHC.IO.Device.$w$crangeSize_info;
 },
 GHC.IO.Device.$w$crangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c86AJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86AK; else goto c86AL;
       c86AK: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$crangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86AL: // global
           I64[Sp - 24] = block_c86AD_info;
           R4 = R3;
           _s85OB::P64 = R3;
           R3 = R3;
           _s85OA::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _s85OA::P64;
           P64[Sp - 8] = _s85OB::P64;
           Sp = Sp - 24;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$crangeSize_info" {
     GHC.IO.Device.$w$crangeSize_info:
         const GHC.IO.Device.$w$crangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86AD() //  [R1]
         { []
         }
     {offset
       c86AD: // global
           if (R1 & 7 == 1) goto u86C2; else goto c86AH;
       u86C2: // global
           Sp = Sp + 24;
           call _c86BP() args: 0, res: 0, upd: 0;
       c86AH: // global
           _s85OA::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c86AR_info;
           R1 = _s85OA::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Ca; else goto c86AT;
       u86Ca: // global
           call _c86AR(R1) args: 0, res: 0, upd: 0;
       c86AT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86AD_info" {
     block_c86AD_info:
         const _c86AD;
         const 2;
         const 30;
 },
 _c86AR() //  [R1]
         { []
         }
     {offset
       c86AR: // global
           _s85OB::P64 = P64[Sp + 8];
           _c86BU::P64 = R1 & 7;
           if (_c86BU::P64 < 3) goto u86BY; else goto c86BE;
       u86BY: // global
           if (_c86BU::P64 < 2) goto c86B0; else goto c86Bk;
       c86B0: // global
           I64[Sp + 8] = block_c86AX_info;
           R1 = _s85OB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Cc; else goto c86B1;
       u86Cc: // global
           call _c86AX(R1) args: 0, res: 0, upd: 0;
       c86B1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86Bk: // global
           I64[Sp + 8] = block_c86Bi_info;
           R1 = _s85OB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Cd; else goto c86Bl;
       u86Cd: // global
           call _c86Bi(R1) args: 0, res: 0, upd: 0;
       c86Bl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86BE: // global
           I64[Sp + 8] = block_c86BC_info;
           R1 = _s85OB::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86Ce; else goto c86BF;
       u86Ce: // global
           call _c86BC(R1) args: 0, res: 0, upd: 0;
       c86BF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86AR_info" {
     block_c86AR_info:
         const _c86AR;
         const 1;
         const 30;
 },
 _c86AX() //  [R1]
         { []
         }
     {offset
       c86AX: // global
           _c86BX::P64 = R1 & 7;
           if (_c86BX::P64 < 3) goto u86BZ; else goto c86Bf;
       u86BZ: // global
           if (_c86BX::P64 < 2) goto u86C4; else goto u86C3;
       u86C4: // global
           Sp = Sp + 8;
           call _c86BT() args: 0, res: 0, upd: 0;
       u86C3: // global
           Sp = Sp + 8;
           call _c86Bz() args: 0, res: 0, upd: 0;
       c86Bf: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86AX_info" {
     block_c86AX_info:
         const _c86AX;
         const 0;
         const 30;
 },
 _c86Bi() //  [R1]
         { []
         }
     {offset
       c86Bi: // global
           _c86BW::P64 = R1 & 7;
           if (_c86BW::P64 < 3) goto u86C0; else goto u86C5;
       u86C0: // global
           if (_c86BW::P64 < 2) goto u86C7; else goto u86C6;
       u86C7: // global
           Sp = Sp + 8;
           call _c86BP() args: 0, res: 0, upd: 0;
       u86C6: // global
           Sp = Sp + 8;
           call _c86BT() args: 0, res: 0, upd: 0;
       u86C5: // global
           Sp = Sp + 8;
           call _c86Bz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86Bi_info" {
     block_c86Bi_info:
         const _c86Bi;
         const 0;
         const 30;
 },
 _c86Bz() //  []
         { []
         }
     {offset
       c86Bz: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86BC() //  [R1]
         { []
         }
     {offset
       c86BC: // global
           _c86BV::P64 = R1 & 7;
           if (_c86BV::P64 < 3) goto u86C1; else goto u86C8;
       u86C1: // global
           if (_c86BV::P64 < 2) goto c86BL; else goto u86C9;
       c86BL: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u86C9: // global
           Sp = Sp + 8;
           call _c86BP() args: 0, res: 0, upd: 0;
       u86C8: // global
           Sp = Sp + 8;
           call _c86BT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86BC_info" {
     block_c86BC_info:
         const _c86BC;
         const 0;
         const 30;
 },
 _c86BP() //  []
         { []
         }
     {offset
       c86BP: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86BT() //  []
         { []
         }
     {offset
       c86BT: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.815444167 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$crangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$crangeSize_entry() //  [R2]
         { []
         }
     {offset
       c86Dd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Dl; else goto c86Dm;
       c86Dl: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$crangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Dm: // global
           I64[Sp - 8] = block_c86Da_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Dr; else goto c86Db;
       u86Dr: // global
           call _c86Da(R1) args: 0, res: 0, upd: 0;
       c86Db: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$crangeSize_info" {
     GHC.IO.Device.$fIxSeekMode_$crangeSize_info:
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c86Da() //  [R1]
         { []
         }
     {offset
       c86Da: // global
           I64[Sp] = block_c86Dg_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$crangeSize_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Da_info" {
     block_c86Da_info:
         const _c86Da;
         const 0;
         const 30;
 },
 _c86Dg() //  [R1]
         { []
         }
     {offset
       c86Dg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86Dq; else goto c86Dp;
       c86Dq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86Dp: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Dg_info" {
     block_c86Dg_info:
         const _c86Dg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.824670173 UTC

[section ""data" . GHC.IO.Device.$w$cunsafeRangeSize_closure" {
     GHC.IO.Device.$w$cunsafeRangeSize_closure:
         const GHC.IO.Device.$w$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$w$cunsafeRangeSize_entry() //  [R2, R3]
         { []
         }
     {offset
       c86DU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86DV; else goto c86DW;
       c86DV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$w$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86DW: // global
           I64[Sp - 16] = block_c86DM_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86F9; else goto c86DN;
       u86F9: // global
           call _c86DM(R1) args: 0, res: 0, upd: 0;
       c86DN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$cunsafeRangeSize_info" {
     GHC.IO.Device.$w$cunsafeRangeSize_info:
         const GHC.IO.Device.$w$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86DM() //  [R1]
         { []
         }
     {offset
       c86DM: // global
           _s85ON::P64 = P64[Sp + 8];
           _c86DT::P64 = R1 & 7;
           if (_c86DT::P64 < 3) goto u86EV; else goto c86DS;
       u86EV: // global
           if (_c86DT::P64 < 2) goto c86DQ; else goto c86DR;
       c86DQ: // global
           I64[Sp + 8] = block_c86DZ_info;
           R1 = _s85ON::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86F6; else goto c86E1;
       u86F6: // global
           call _c86DZ(R1) args: 0, res: 0, upd: 0;
       c86E1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86DR: // global
           I64[Sp + 8] = block_c86Ei_info;
           R1 = _s85ON::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86F7; else goto c86Ek;
       u86F7: // global
           call _c86Ei(R1) args: 0, res: 0, upd: 0;
       c86Ek: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c86DS: // global
           I64[Sp + 8] = block_c86EB_info;
           R1 = _s85ON::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u86F8; else goto c86ED;
       u86F8: // global
           call _c86EB(R1) args: 0, res: 0, upd: 0;
       c86ED: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86DM_info" {
     block_c86DM_info:
         const _c86DM;
         const 1;
         const 30;
 },
 _c86DZ() //  [R1]
         { []
         }
     {offset
       c86DZ: // global
           _c86EU::P64 = R1 & 7;
           if (_c86EU::P64 < 3) goto u86EW; else goto c86Ef;
       u86EW: // global
           if (_c86EU::P64 < 2) goto u86F0; else goto u86EZ;
       u86F0: // global
           Sp = Sp + 8;
           call _c86ER() args: 0, res: 0, upd: 0;
       u86EZ: // global
           Sp = Sp + 8;
           call _c86Ey() args: 0, res: 0, upd: 0;
       c86Ef: // global
           R1 = 3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86DZ_info" {
     block_c86DZ_info:
         const _c86DZ;
         const 0;
         const 30;
 },
 _c86Ei() //  [R1]
         { []
         }
     {offset
       c86Ei: // global
           _c86ET::P64 = R1 & 7;
           if (_c86ET::P64 < 3) goto u86EX; else goto u86F1;
       u86EX: // global
           if (_c86ET::P64 < 2) goto u86F3; else goto u86F2;
       u86F3: // global
           Sp = Sp + 8;
           call _c86EN() args: 0, res: 0, upd: 0;
       u86F2: // global
           Sp = Sp + 8;
           call _c86ER() args: 0, res: 0, upd: 0;
       u86F1: // global
           Sp = Sp + 8;
           call _c86Ey() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86Ei_info" {
     block_c86Ei_info:
         const _c86Ei;
         const 0;
         const 30;
 },
 _c86Ey() //  []
         { []
         }
     {offset
       c86Ey: // global
           R1 = 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86EB() //  [R1]
         { []
         }
     {offset
       c86EB: // global
           _c86ES::P64 = R1 & 7;
           if (_c86ES::P64 < 3) goto u86EY; else goto u86F4;
       u86EY: // global
           if (_c86ES::P64 < 2) goto c86EJ; else goto u86F5;
       c86EJ: // global
           R1 = (-1);
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       u86F5: // global
           Sp = Sp + 8;
           call _c86EN() args: 0, res: 0, upd: 0;
       u86F4: // global
           Sp = Sp + 8;
           call _c86ER() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86EB_info" {
     block_c86EB_info:
         const _c86EB;
         const 0;
         const 30;
 },
 _c86EN() //  []
         { []
         }
     {offset
       c86EN: // global
           R1 = 0;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86ER() //  []
         { []
         }
     {offset
       c86ER: // global
           R1 = 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.839113202 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info;
 },
 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry() //  [R2]
         { []
         }
     {offset
       c86G2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Ga; else goto c86Gb;
       c86Ga: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Gb: // global
           I64[Sp - 8] = block_c86FZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Gg; else goto c86G0;
       u86Gg: // global
           call _c86FZ(R1) args: 0, res: 0, upd: 0;
       c86G0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info" {
     GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_info:
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c86FZ() //  [R1]
         { []
         }
     {offset
       c86FZ: // global
           I64[Sp] = block_c86G5_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           call GHC.IO.Device.$w$cunsafeRangeSize_entry(R3,
                                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86FZ_info" {
     block_c86FZ_info:
         const _c86FZ;
         const 0;
         const 30;
 },
 _c86G5() //  [R1]
         { []
         }
     {offset
       c86G5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86Gf; else goto c86Ge;
       c86Gf: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86Ge: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86G5_info" {
     block_c86G5_info:
         const _c86G5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.847271259 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_$cindex_closure" {
     GHC.IO.Device.$fIxSeekMode_$cindex_closure:
         const GHC.IO.Device.$fIxSeekMode_$cindex_info;
         const 0;
 },
 GHC.IO.Device.$fIxSeekMode_$cindex_entry() //  [R2, R3]
         { []
         }
     {offset
       c86GE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86GF; else goto c86GG;
       c86GF: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fIxSeekMode_$cindex_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86GG: // global
           I64[Sp - 16] = block_c86GB_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86H4; else goto c86GC;
       u86H4: // global
           call _c86GB(R1) args: 0, res: 0, upd: 0;
       c86GC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fIxSeekMode_$cindex_info" {
     GHC.IO.Device.$fIxSeekMode_$cindex_info:
         const GHC.IO.Device.$fIxSeekMode_$cindex_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const S861B_srt+208;
 },
 _c86GB() //  [R1]
         { []
         }
     {offset
       c86GB: // global
           I64[Sp - 8] = block_c86GJ_info;
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           _s85P0::P64 = P64[R1 + 7];
           R2 = _s85P0::P64;
           P64[Sp] = _s85P0::P64;
           Sp = Sp - 8;
           call GHC.IO.Device.$w$cinRange_entry(R4,
                                                R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86GB_info" {
     block_c86GB_info:
         const _c86GB;
         const 1;
         const 4294967326;
         const S861B_srt+208;
 },
 _c86GJ() //  [R1]
         { []
         }
     {offset
       c86GJ: // global
           if (R1 & 7 == 1) goto c86GQ; else goto c86GZ;
       c86GQ: // global
           R1 = GHC.Arr.hopelessIndexError_closure;
           Sp = Sp + 24;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86GZ: // global
           _s85OY::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_c86GT_info;
           R3 = _s85OY::P64;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Device.$w$cunsafeIndex_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86GJ_info" {
     block_c86GJ_info:
         const _c86GJ;
         const 2;
         const 4294967326;
         const S861B_srt+208;
 },
 _c86GT() //  [R1]
         { []
         }
     {offset
       c86GT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c86H2; else goto c86H1;
       c86H2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86H1: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86GT_info" {
     block_c86GT_info:
         const _c86GT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.856518537 UTC

[section ""data" . GHC.IO.Device.$fIxSeekMode_closure" {
     GHC.IO.Device.$fIxSeekMode_closure:
         const GHC.Arr.C:Ix_con_info;
         const GHC.IO.Device.$fOrdSeekMode_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$crange_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeIndex_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$cinRange_closure+2;
         const GHC.IO.Device.$fIxSeekMode_$crangeSize_closure+1;
         const GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.858330396 UTC

[section ""cstring" . lvl3_r81ZB_bytes" {
     lvl3_r81ZB_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.860661151 UTC

[section ""data" . lvl4_r81ZC_closure" {
     lvl4_r81ZC_closure:
         const lvl4_r81ZC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r81ZC_entry() //  [R1]
         { []
         }
     {offset
       c86HA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86HB; else goto c86HC;
       c86HB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86HC: // global
           (_c86Hx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Hx::I64 == 0) goto c86Hz; else goto c86Hy;
       c86Hz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86Hy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Hx::I64;
           R2 = lvl3_r81ZB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_r81ZC_info" {
     lvl4_r81ZC_info:
         const lvl4_r81ZC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.864459252 UTC

[section ""cstring" . GHC.IO.Device.$trModule4_bytes" {
     GHC.IO.Device.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.866890658 UTC

[section ""data" . lvl5_r81ZD_closure" {
     lvl5_r81ZD_closure:
         const lvl5_r81ZD_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r81ZD_entry() //  [R1]
         { []
         }
     {offset
       c86HS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86HT; else goto c86HU;
       c86HT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86HU: // global
           (_c86HP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86HP::I64 == 0) goto c86HR; else goto c86HQ;
       c86HR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86HQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86HP::I64;
           R2 = GHC.IO.Device.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r81ZD_info" {
     lvl5_r81ZD_info:
         const lvl5_r81ZD_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.870670356 UTC

[section ""cstring" . GHC.IO.Device.$trModule2_bytes" {
     GHC.IO.Device.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.873190642 UTC

[section ""data" . lvl6_r81ZE_closure" {
     lvl6_r81ZE_closure:
         const lvl6_r81ZE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r81ZE_entry() //  [R1]
         { []
         }
     {offset
       c86Ia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ib; else goto c86Ic;
       c86Ib: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Ic: // global
           (_c86I7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86I7::I64 == 0) goto c86I9; else goto c86I8;
       c86I9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86I8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86I7::I64;
           R2 = GHC.IO.Device.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_r81ZE_info" {
     lvl6_r81ZE_info:
         const lvl6_r81ZE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.877429296 UTC

[section ""cstring" . lvl7_r81ZF_bytes" {
     lvl7_r81ZF_bytes:
         I8[] [46,47,71,72,67,47,73,79,47,68,101,118,105,99,101,46,104,115]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.879703466 UTC

[section ""data" . lvl8_r81ZG_closure" {
     lvl8_r81ZG_closure:
         const lvl8_r81ZG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r81ZG_entry() //  [R1]
         { []
         }
     {offset
       c86Is: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86It; else goto c86Iu;
       c86It: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Iu: // global
           (_c86Ip::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Ip::I64 == 0) goto c86Ir; else goto c86Iq;
       c86Ir: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86Iq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Ip::I64;
           R2 = lvl7_r81ZF_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl8_r81ZG_info" {
     lvl8_r81ZG_info:
         const lvl8_r81ZG_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.884599567 UTC

[section ""data" . lvl9_r81ZH_closure" {
     lvl9_r81ZH_closure:
         const GHC.Types.I#_con_info;
         const 173;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.886486203 UTC

[section ""data" . lvl10_r81ZI_closure" {
     lvl10_r81ZI_closure:
         const GHC.Types.I#_con_info;
         const 16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.888186657 UTC

[section ""data" . lvl11_r81ZJ_closure" {
     lvl11_r81ZJ_closure:
         const GHC.Types.I#_con_info;
         const 20;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.889982239 UTC

[section ""data" . lvl12_r81ZK_closure" {
     lvl12_r81ZK_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl5_r81ZD_closure;
         const lvl6_r81ZE_closure;
         const lvl8_r81ZG_closure;
         const lvl9_r81ZH_closure+1;
         const lvl10_r81ZI_closure+1;
         const lvl9_r81ZH_closure+1;
         const lvl11_r81ZJ_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.891932471 UTC

[section ""data" . lvl13_r81ZL_closure" {
     lvl13_r81ZL_closure:
         const GHC.Stack.Types.PushCallStack_con_info;
         const lvl4_r81ZC_closure;
         const lvl12_r81ZK_closure+1;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.895397401 UTC

[section ""cstring" . lvl14_r81ZM_bytes" {
     lvl14_r81ZM_bytes:
         I8[] [112,114,101,100,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,112,114,101,100,39,32,111,102,32,102,105,114,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.898821687 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode4_closure" {
     GHC.IO.Device.$fEnumSeekMode4_closure:
         const GHC.IO.Device.$fEnumSeekMode4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode4_entry() //  [R1]
         { []
         }
     {offset
       c86IR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86IS; else goto c86IT;
       c86IS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86IT: // global
           (_c86IM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86IM::I64 == 0) goto c86IO; else goto c86IN;
       c86IO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86IN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86IM::I64;
           I64[Sp - 24] = block_c86IP_info;
           R2 = lvl14_r81ZM_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode4_info" {
     GHC.IO.Device.$fEnumSeekMode4_info:
         const GHC.IO.Device.$fEnumSeekMode4_entry;
         const 0;
         const 12884901909;
         const S861B_srt+224;
 },
 _c86IP() //  [R1]
         { []
         }
     {offset
       c86IP: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c86IP_info" {
     block_c86IP_info:
         const _c86IP;
         const 0;
         const 12884901918;
         const S861B_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.9051851 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cpred_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cpred_entry() //  [R2]
         { []
         }
     {offset
       c86Jl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Jm; else goto c86Jn;
       c86Jm: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Jn: // global
           I64[Sp - 8] = block_c86Jd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Jy; else goto c86Je;
       u86Jy: // global
           call _c86Jd(R1) args: 0, res: 0, upd: 0;
       c86Je: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cpred_info" {
     GHC.IO.Device.$fEnumSeekMode_$cpred_info:
         const GHC.IO.Device.$fEnumSeekMode_$cpred_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S861B_srt+240;
 },
 _c86Jd() //  [R1]
         { []
         }
     {offset
       c86Jd: // global
           _c86Jk::P64 = R1 & 7;
           if (_c86Jk::P64 < 3) goto u86Jx; else goto c86Jj;
       u86Jx: // global
           if (_c86Jk::P64 < 2) goto c86Jh; else goto c86Ji;
       c86Jh: // global
           R1 = GHC.IO.Device.$fEnumSeekMode4_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86Ji: // global
           R1 = GHC.IO.Device.AbsoluteSeek_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Jj: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Jd_info" {
     block_c86Jd_info:
         const _c86Jd;
         const 0;
         const 4294967326;
         const S861B_srt+248;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.910790851 UTC

[section ""cstring" . lvl15_r81ZN_bytes" {
     lvl15_r81ZN_bytes:
         I8[] [115,117,99,99,123,83,101,101,107,77,111,100,101,125,58,32,116,114,105,101,100,32,116,111,32,116,97,107,101,32,96,115,117,99,99,39,32,111,102,32,108,97,115,116,32,116,97,103,32,105,110,32,101,110,117,109,101,114,97,116,105,111,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.913718589 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode5_closure" {
     GHC.IO.Device.$fEnumSeekMode5_closure:
         const GHC.IO.Device.$fEnumSeekMode5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode5_entry() //  [R1]
         { []
         }
     {offset
       c86JW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86JX; else goto c86JY;
       c86JX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86JY: // global
           (_c86JR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86JR::I64 == 0) goto c86JT; else goto c86JS;
       c86JT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86JS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86JR::I64;
           I64[Sp - 24] = block_c86JU_info;
           R2 = lvl15_r81ZN_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode5_info" {
     GHC.IO.Device.$fEnumSeekMode5_info:
         const GHC.IO.Device.$fEnumSeekMode5_entry;
         const 0;
         const 12884901909;
         const S861B_srt+224;
 },
 _c86JU() //  [R1]
         { []
         }
     {offset
       c86JU: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c86JU_info" {
     block_c86JU_info:
         const _c86JU;
         const 0;
         const 12884901918;
         const S861B_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.920797145 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$csucc_closure" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_closure:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$csucc_entry() //  [R2]
         { []
         }
     {offset
       c86Kq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Kr; else goto c86Ks;
       c86Kr: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Ks: // global
           I64[Sp - 8] = block_c86Ki_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86KD; else goto c86Kj;
       u86KD: // global
           call _c86Ki(R1) args: 0, res: 0, upd: 0;
       c86Kj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$csucc_info" {
     GHC.IO.Device.$fEnumSeekMode_$csucc_info:
         const GHC.IO.Device.$fEnumSeekMode_$csucc_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S861B_srt+256;
 },
 _c86Ki() //  [R1]
         { []
         }
     {offset
       c86Ki: // global
           _c86Kp::P64 = R1 & 7;
           if (_c86Kp::P64 < 3) goto u86KC; else goto c86Ko;
       u86KC: // global
           if (_c86Kp::P64 < 2) goto c86Km; else goto c86Kn;
       c86Km: // global
           R1 = GHC.IO.Device.RelativeSeek_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Kn: // global
           R1 = GHC.IO.Device.SeekFromEnd_closure+3;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Ko: // global
           R1 = GHC.IO.Device.$fEnumSeekMode5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Ki_info" {
     block_c86Ki_info:
         const _c86Ki;
         const 0;
         const 4294967326;
         const S861B_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.926545815 UTC

[section ""cstring" . lvl16_r81ZO_bytes" {
     lvl16_r81ZO_bytes:
         I8[] [41,32,105,115,32,111,117,116,115,105,100,101,32,111,102,32,101,110,117,109,101,114,97,116,105,111,110,39,115,32,114,97,110,103,101,32,40,48,44]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.928712244 UTC

[section ""cstring" . lvl17_r81ZP_bytes" {
     lvl17_r81ZP_bytes:
         I8[] [41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.931834386 UTC

[section ""data" . lvl18_r81ZQ_closure" {
     lvl18_r81ZQ_closure:
         const lvl18_r81ZQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_r81ZQ_entry() //  [R1]
         { []
         }
     {offset
       c86L0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86L1; else goto c86L2;
       c86L1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86L2: // global
           (_c86KX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86KX::I64 == 0) goto c86KZ; else goto c86KY;
       c86KZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86KY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86KX::I64;
           R2 = lvl17_r81ZP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_r81ZQ_info" {
     lvl18_r81ZQ_info:
         const lvl18_r81ZQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.937072758 UTC

[section ""data" . lvl19_r81ZR_closure" {
     lvl19_r81ZR_closure:
         const lvl19_r81ZR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_r81ZR_entry() //  [R1]
         { []
         }
     {offset
       c86Lk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86Ll; else goto c86Lm;
       c86Ll: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Lm: // global
           (_c86Le::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Le::I64 == 0) goto c86Lg; else goto c86Lf;
       c86Lg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86Lf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Le::I64;
           I64[Sp - 24] = block_c86Lh_info;
           R4 = lvl18_r81ZQ_closure;
           R3 = 2;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_r81ZR_info" {
     lvl19_r81ZR_info:
         const lvl19_r81ZR_entry;
         const 0;
         const 4294967317;
         const S861B_srt+272;
 },
 _c86Lh() //  [R1, R2]
         { []
         }
     {offset
       c86Lh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Lp; else goto c86Lo;
       c86Lp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c86Lo: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c86Lh_info" {
     block_c86Lh_info:
         const _c86Lh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.944053207 UTC

[section ""data" . lvl20_r81ZS_closure" {
     lvl20_r81ZS_closure:
         const lvl20_r81ZS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_r81ZS_entry() //  [R1]
         { []
         }
     {offset
       c86LK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86LL; else goto c86LM;
       c86LL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86LM: // global
           (_c86LH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86LH::I64 == 0) goto c86LJ; else goto c86LI;
       c86LJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86LI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86LH::I64;
           R3 = lvl19_r81ZR_closure;
           R2 = lvl16_r81ZO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_r81ZS_info" {
     lvl20_r81ZS_info:
         const lvl20_r81ZS_entry;
         const 0;
         const 4294967317;
         const S861B_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.947771037 UTC

[section ""cstring" . lvl21_r81ZT_bytes" {
     lvl21_r81ZT_bytes:
         I8[] [116,111,69,110,117,109,123,83,101,101,107,77,111,100,101,125,58,32,116,97,103,32,40]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.951230161 UTC

[section ""data" . GHC.IO.Device.$wlvl_closure" {
     GHC.IO.Device.$wlvl_closure:
         const GHC.IO.Device.$wlvl_info;
         const 0;
 },
 sat_s85Ph_entry() //  [R1]
         { []
         }
     {offset
       c86M7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c86M8; else goto c86M9;
       c86M8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86M9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c86M4_info;
           R4 = lvl20_r81ZS_closure;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Ph_info" {
     sat_s85Ph_info:
         const sat_s85Ph_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+288;
 },
 _c86M4() //  [R1, R2]
         { []
         }
     {offset
       c86M4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Mc; else goto c86Mb;
       c86Mc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c86Mb: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c86M4_info" {
     block_c86M4_info:
         const _c86M4;
         const 0;
         const 30;
 },
 GHC.IO.Device.$wlvl_entry() //  [R2]
         { []
         }
     {offset
       c86Mf: // global
           _s85Pd::I64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c86Mg; else goto c86Mh;
       c86Mh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Mj; else goto c86Mi;
       c86Mj: // global
           HpAlloc = 24;
           goto c86Mg;
       c86Mg: // global
           R2 = _s85Pd::I64;
           R1 = GHC.IO.Device.$wlvl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Mi: // global
           I64[Hp - 16] = sat_s85Ph_info;
           I64[Hp] = _s85Pd::I64;
           I64[Sp - 8] = block_c86Md_info;
           R3 = Hp - 16;
           R2 = lvl21_r81ZT_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$wlvl_info" {
     GHC.IO.Device.$wlvl_info:
         const GHC.IO.Device.$wlvl_entry;
         const 0;
         const 3311419785230;
         const 4294967300;
         const S861B_srt+224;
 },
 _c86Md() //  [R1]
         { []
         }
     {offset
       c86Md: // global
           R3 = R1;
           R2 = lvl13_r81ZL_closure+2;
           Sp = Sp + 8;
           call GHC.Err.error_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Md_info" {
     block_c86Md_info:
         const _c86Md;
         const 0;
         const 12884901918;
         const S861B_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.960648919 UTC

[section ""data" . GHC.IO.Device.$w$ctoEnum_closure" {
     GHC.IO.Device.$w$ctoEnum_closure:
         const GHC.IO.Device.$w$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$w$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c86MR: // global
           _s85Pj::I64 = R2;
           if (%MO_S_Lt_W64(R2, 0)) goto c86MZ; else goto c86MQ;
       c86MQ: // global
           if (%MO_S_Gt_W64(_s85Pj::I64, 2)) goto c86MZ; else goto c86N0;
       c86MZ: // global
           R2 = _s85Pj::I64;
           call GHC.IO.Device.$wlvl_entry(R2) args: 8, res: 0, upd: 8;
       c86N0: // global
           R1 = I64[(_s85Pj::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$w$ctoEnum_info" {
     GHC.IO.Device.$w$ctoEnum_info:
         const GHC.IO.Device.$w$ctoEnum_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const S861B_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.96589797 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry() //  [R2]
         { []
         }
     {offset
       c86Nf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Ng; else goto c86Nh;
       c86Ng: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Nh: // global
           I64[Sp - 8] = block_c86Nc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86Nl; else goto c86Nd;
       u86Nl: // global
           call _c86Nc(R1) args: 0, res: 0, upd: 0;
       c86Nd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info" {
     GHC.IO.Device.$fEnumSeekMode_$ctoEnum_info:
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S861B_srt+304;
 },
 _c86Nc() //  [R1]
         { []
         }
     {offset
       c86Nc: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Device.$w$ctoEnum_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Nc_info" {
     block_c86Nc_info:
         const _c86Nc;
         const 0;
         const 4294967326;
         const S861B_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.971506354 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode3_closure" {
     GHC.IO.Device.$fEnumSeekMode3_closure:
         const GHC.IO.Device.$fEnumSeekMode3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode3_entry() //  [R1]
         { []
         }
     {offset
       c86NC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86ND; else goto c86NE;
       c86ND: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86NE: // global
           (_c86Nz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86Nz::I64 == 0) goto c86NB; else goto c86NA;
       c86NB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86NA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86Nz::I64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode3_info" {
     GHC.IO.Device.$fEnumSeekMode3_info:
         const GHC.IO.Device.$fEnumSeekMode3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.975700527 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode2_closure" {
     GHC.IO.Device.$fEnumSeekMode2_closure:
         const GHC.IO.Device.$fEnumSeekMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode2_entry() //  [R1]
         { []
         }
     {offset
       c86NT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86NU; else goto c86NV;
       c86NU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86NV: // global
           (_c86NQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86NQ::I64 == 0) goto c86NS; else goto c86NR;
       c86NS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86NR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86NQ::I64;
           R2 = 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode2_info" {
     GHC.IO.Device.$fEnumSeekMode2_info:
         const GHC.IO.Device.$fEnumSeekMode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.979930383 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode1_closure" {
     GHC.IO.Device.$fEnumSeekMode1_closure:
         const GHC.IO.Device.$fEnumSeekMode1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode1_entry() //  [R1]
         { []
         }
     {offset
       c86Oa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ob; else goto c86Oc;
       c86Ob: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Oc: // global
           (_c86O7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c86O7::I64 == 0) goto c86O9; else goto c86O8;
       c86O9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c86O8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c86O7::I64;
           R2 = 2;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go3_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode1_info" {
     GHC.IO.Device.$fEnumSeekMode1_info:
         const GHC.IO.Device.$fEnumSeekMode1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:13.985276878 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry() //  [R2]
         { []
         }
     {offset
       c86Ox: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c86Oy; else goto c86Oz;
       c86Oy: // global
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Oz: // global
           I64[Sp - 8] = block_c86Op_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u86OK; else goto c86Oq;
       u86OK: // global
           call _c86Op(R1) args: 0, res: 0, upd: 0;
       c86Oq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFrom_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_entry;
         const 0;
         const 64424509454;
         const 4294967301;
         const S861B_srt+320;
 },
 _c86Op() //  [R1]
         { []
         }
     {offset
       c86Op: // global
           _c86Ow::P64 = R1 & 7;
           if (_c86Ow::P64 < 3) goto u86OJ; else goto c86Ov;
       u86OJ: // global
           if (_c86Ow::P64 < 2) goto c86Ot; else goto c86Ou;
       c86Ot: // global
           R1 = GHC.IO.Device.$fEnumSeekMode3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86Ou: // global
           R1 = GHC.IO.Device.$fEnumSeekMode2_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c86Ov: // global
           R1 = GHC.IO.Device.$fEnumSeekMode1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Op_info" {
     block_c86Op_info:
         const _c86Op;
         const 0;
         const 30064771102;
         const S861B_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.008494053 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info;
 },
 sat_s85PI_entry() //  [R1]
         { []
         }
     {offset
       c86PK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86PL; else goto c86PM;
       c86PL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86PM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85PD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PI_info" {
     sat_s85PI_info:
         const sat_s85PI_entry;
         const 8589934593;
         const 15;
 },
 sat_s85PG_entry() //  [R1]
         { []
         }
     {offset
       c86PR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86PS; else goto c86PT;
       c86PS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86PT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PG_info" {
     sat_s85PG_info:
         const sat_s85PG_entry;
         const 4294967296;
         const 17;
 },
 sat_s85PJ_entry() //  [R1]
         { []
         }
     {offset
       c86PZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Q0; else goto c86Q1;
       c86Q0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Q1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PJ_info" {
     sat_s85PJ_info:
         const sat_s85PJ_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s85PD_entry() //  [R1, R2]
         { []
         }
     {offset
       c86Q5: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86Q9; else goto c86Q8;
       c86Q9: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Q8: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c86Q3; else goto c86Q4;
       c86Q3: // global
           _s85PB::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85PI_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85PB::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85PG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Q4: // global
           I64[Hp - 80] = sat_s85PJ_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86Qb::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86Qb::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s85PD_info" {
     go_dn_s85PD_info:
         const go_dn_s85PD_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s85PK_entry() //  [R1]
         { []
         }
     {offset
       c86Qc: // global
           _s85PK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86Qd; else goto c86Qe;
       c86Qe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Qg; else goto c86Qf;
       c86Qg: // global
           HpAlloc = 24;
           goto c86Qd;
       c86Qd: // global
           R1 = _s85PK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Qf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85PK::P64;
           _s85Pw::I64 = I64[_s85PK::P64 + 24];
           _s85PB::I64 = _s85Pw::I64 - I64[_s85PK::P64 + 16];
           I64[Hp - 16] = go_dn_s85PD_info;
           I64[Hp - 8] = _s85PB::I64;
           I64[Hp] = 2 - _s85PB::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85PD_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PK_info" {
     sat_s85PK_info:
         const sat_s85PK_entry;
         const 8589934592;
         const 20;
 },
 sat_s85PA_entry() //  [R1]
         { []
         }
     {offset
       c86Ql: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Qm; else goto c86Qn;
       c86Qm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Qn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PA_info" {
     sat_s85PA_info:
         const sat_s85PA_entry;
         const 4294967296;
         const 17;
 },
 sat_s85PM_entry() //  [R1]
         { []
         }
     {offset
       c86Qw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Qx; else goto c86Qy;
       c86Qx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Qy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PM_info" {
     sat_s85PM_info:
         const sat_s85PM_entry;
         const 4294967296;
         const 17;
 },
 sat_s85PW_entry() //  [R1]
         { []
         }
     {offset
       c86R1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86R2; else goto c86R3;
       c86R2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86R3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85PR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PW_info" {
     sat_s85PW_info:
         const sat_s85PW_entry;
         const 8589934593;
         const 15;
 },
 sat_s85PU_entry() //  [R1]
         { []
         }
     {offset
       c86R8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86R9; else goto c86Ra;
       c86R9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Ra: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PU_info" {
     sat_s85PU_info:
         const sat_s85PU_entry;
         const 4294967296;
         const 17;
 },
 sat_s85PX_entry() //  [R1]
         { []
         }
     {offset
       c86Rg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Rh; else goto c86Ri;
       c86Rh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Ri: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PX_info" {
     sat_s85PX_info:
         const sat_s85PX_entry;
         const 4294967296;
         const 17;
 },
 go_up_s85PR_entry() //  [R1, R2]
         { []
         }
     {offset
       c86Rm: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86Rq; else goto c86Rp;
       c86Rq: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86Rp: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c86Rk; else goto c86Rl;
       c86Rk: // global
           _s85PP::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85PW_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85PP::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85PU_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Rl: // global
           I64[Hp - 80] = sat_s85PX_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86Rs::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86Rs::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s85PR_info" {
     go_up_s85PR_info:
         const go_up_s85PR_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s85PY_entry() //  [R1]
         { []
         }
     {offset
       c86Rt: // global
           _s85PY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ru; else goto c86Rv;
       c86Rv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86Rx; else goto c86Rw;
       c86Rx: // global
           HpAlloc = 24;
           goto c86Ru;
       c86Ru: // global
           R1 = _s85PY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Rw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85PY::P64;
           _s85Pw::I64 = I64[_s85PY::P64 + 24];
           _s85PP::I64 = _s85Pw::I64 - I64[_s85PY::P64 + 16];
           I64[Hp - 16] = go_up_s85PR_info;
           I64[Hp - 8] = _s85PP::I64;
           I64[Hp] = 2 - _s85PP::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85PR_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PY_info" {
     sat_s85PY_info:
         const sat_s85PY_entry;
         const 8589934592;
         const 20;
 },
 sat_s85PO_entry() //  [R1]
         { []
         }
     {offset
       c86RC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86RD; else goto c86RE;
       c86RD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86RE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85PO_info" {
     sat_s85PO_info:
         const sat_s85PO_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Q0_entry() //  [R1]
         { []
         }
     {offset
       c86RN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86RO; else goto c86RP;
       c86RO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86RP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Q0_info" {
     sat_s85Q0_info:
         const sat_s85Q0_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Qb_entry() //  [R1]
         { []
         }
     {offset
       c86Sl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Sm; else goto c86Sn;
       c86Sm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Sn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85Q6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qb_info" {
     sat_s85Qb_info:
         const sat_s85Qb_entry;
         const 8589934593;
         const 15;
 },
 sat_s85Q9_entry() //  [R1]
         { []
         }
     {offset
       c86Ss: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86St; else goto c86Su;
       c86St: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Su: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Q9_info" {
     sat_s85Q9_info:
         const sat_s85Q9_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Qc_entry() //  [R1]
         { []
         }
     {offset
       c86SA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86SB; else goto c86SC;
       c86SB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86SC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qc_info" {
     sat_s85Qc_info:
         const sat_s85Qc_entry;
         const 4294967296;
         const 17;
 },
 go_dn_s85Q6_entry() //  [R1, R2]
         { []
         }
     {offset
       c86SG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86SK; else goto c86SJ;
       c86SK: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86SJ: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c86SE; else goto c86SF;
       c86SE: // global
           _s85Q4::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Qb_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Q4::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Q9_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86SF: // global
           I64[Hp - 80] = sat_s85Qc_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86SM::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86SM::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s85Q6_info" {
     go_dn_s85Q6_info:
         const go_dn_s85Q6_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s85Qd_entry() //  [R1]
         { []
         }
     {offset
       c86SN: // global
           _s85Qd::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86SO; else goto c86SP;
       c86SP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86SR; else goto c86SQ;
       c86SR: // global
           HpAlloc = 24;
           goto c86SO;
       c86SO: // global
           R1 = _s85Qd::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86SQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Qd::P64;
           _s85Pw::I64 = I64[_s85Qd::P64 + 24];
           _s85Q4::I64 = _s85Pw::I64 - I64[_s85Qd::P64 + 16];
           I64[Hp - 16] = go_dn_s85Q6_info;
           I64[Hp - 8] = _s85Q4::I64;
           I64[Hp] = 0 - _s85Q4::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85Q6_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qd_info" {
     sat_s85Qd_info:
         const sat_s85Qd_entry;
         const 8589934592;
         const 20;
 },
 sat_s85Q3_entry() //  [R1]
         { []
         }
     {offset
       c86SW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86SX; else goto c86SY;
       c86SX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86SY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Q3_info" {
     sat_s85Q3_info:
         const sat_s85Q3_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Qf_entry() //  [R1]
         { []
         }
     {offset
       c86T7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86T8; else goto c86T9;
       c86T8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86T9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qf_info" {
     sat_s85Qf_info:
         const sat_s85Qf_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Qp_entry() //  [R1]
         { []
         }
     {offset
       c86TC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86TD; else goto c86TE;
       c86TD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86TE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85Qk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qp_info" {
     sat_s85Qp_info:
         const sat_s85Qp_entry;
         const 8589934593;
         const 15;
 },
 sat_s85Qn_entry() //  [R1]
         { []
         }
     {offset
       c86TJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86TK; else goto c86TL;
       c86TK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86TL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qn_info" {
     sat_s85Qn_info:
         const sat_s85Qn_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Qq_entry() //  [R1]
         { []
         }
     {offset
       c86TR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86TS; else goto c86TT;
       c86TS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86TT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qq_info" {
     sat_s85Qq_info:
         const sat_s85Qq_entry;
         const 4294967296;
         const 17;
 },
 go_up_s85Qk_entry() //  [R1, R2]
         { []
         }
     {offset
       c86TX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c86U1; else goto c86U0;
       c86U1: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c86U0: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c86TV; else goto c86TW;
       c86TV: // global
           _s85Qi::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Qp_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Qi::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Qn_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86TW: // global
           I64[Hp - 80] = sat_s85Qq_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c86U3::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c86U3::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s85Qk_info" {
     go_up_s85Qk_info:
         const go_up_s85Qk_entry;
         const 8589934592;
         const 13;
         const 4294967300;
 },
 sat_s85Qr_entry() //  [R1]
         { []
         }
     {offset
       c86U4: // global
           _s85Qr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c86U5; else goto c86U6;
       c86U6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c86U8; else goto c86U7;
       c86U8: // global
           HpAlloc = 24;
           goto c86U5;
       c86U5: // global
           R1 = _s85Qr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86U7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Qr::P64;
           _s85Pw::I64 = I64[_s85Qr::P64 + 24];
           _s85Qi::I64 = _s85Pw::I64 - I64[_s85Qr::P64 + 16];
           I64[Hp - 16] = go_up_s85Qk_info;
           I64[Hp - 8] = _s85Qi::I64;
           I64[Hp] = 0 - _s85Qi::I64;
           R2 = _s85Pw::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85Qk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qr_info" {
     sat_s85Qr_info:
         const sat_s85Qr_entry;
         const 8589934592;
         const 20;
 },
 sat_s85Qh_entry() //  [R1]
         { []
         }
     {offset
       c86Ud: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Ue; else goto c86Uf;
       c86Ue: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Uf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qh_info" {
     sat_s85Qh_info:
         const sat_s85Qh_entry;
         const 4294967296;
         const 17;
 },
 sat_s85Qt_entry() //  [R1]
         { []
         }
     {offset
       c86Uo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86Up; else goto c86Uq;
       c86Up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c86Uq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R1 = I64[(I64[R1 + 16] << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qt_info" {
     sat_s85Qt_info:
         const sat_s85Qt_entry;
         const 4294967296;
         const 17;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry() //  [R2, R3]
         { []
         }
     {offset
       c86Uz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c86UA; else goto c86UB;
       c86UA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c86UB: // global
           I64[Sp - 16] = block_c86Ur_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u86VT; else goto c86Us;
       u86VT: // global
           call _c86Ur(R1) args: 0, res: 0, upd: 0;
       c86Us: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c86Ur() //  [R1]
         { []
         }
     {offset
       c86Ur: // global
           _s85Ps::P64 = P64[Sp + 8];
           _c86Uy::P64 = R1 & 7;
           if (_c86Uy::P64 < 3) goto u86VL; else goto c86Ux;
       u86VL: // global
           if (_c86Uy::P64 < 2) goto c86Uv; else goto c86Uw;
       c86Uv: // global
           _s85Pu::I64 = 0;
           goto s85Pt;
       c86Uw: // global
           _s85Pu::I64 = 1;
           goto s85Pt;
       c86Ux: // global
           _s85Pu::I64 = 2;
           goto s85Pt;
       s85Pt: // global
           I64[Sp] = block_c86UC_info;
           R1 = _s85Ps::P64;
           I64[Sp + 8] = _s85Pu::I64;
           if (R1 & 7 != 0) goto u86VS; else goto c86Vm;
       u86VS: // global
           call _c86UC(R1) args: 0, res: 0, upd: 0;
       c86Vm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c86Ur_info" {
     block_c86Ur_info:
         const _c86Ur;
         const 1;
         const 30;
 },
 _c86UC() //  [R1]
         { []
         }
     {offset
       c86UC: // global
           _c86VK::P64 = R1 & 7;
           if (_c86VK::P64 < 3) goto u86VM; else goto c86VA;
       u86VM: // global
           if (_c86VK::P64 < 2) goto c86Vs; else goto c86Vw;
       c86Vs: // global
           I64[Sp] = 0;
           goto u86VW;
       c86Vw: // global
           I64[Sp] = 1;
           goto u86VW;
       c86VA: // global
           I64[Sp] = 2;
           goto u86VW;
       u86VW: // global
           call _c86Pb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86UC_info" {
     block_c86UC_info:
         const _c86UC;
         const 65;
         const 30;
 },
 _c86Pb() //  []
         { []
         }
     {offset
       c86Pb: // global
           Hp = Hp + 80;
           _s85Pw::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto c86UG; else goto c86UF;
       c86UG: // global
           HpAlloc = 80;
           I64[Sp] = block_c86Pa_info;
           R1 = _s85Pw::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c86UF: // global
           _s85Pu::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_s85Pu::I64,
                            _s85Pw::I64)) goto c86V1; else goto c86Vl;
       c86V1: // global
           if (%MO_S_Lt_W64(_s85Pw::I64,
                            _s85Pu::I64)) goto c86UQ; else goto c86UZ;
       c86UQ: // global
           if (%MO_S_Le_W64(2, _s85Pw::I64)) goto c86UJ; else goto c86UO;
       c86UJ: // global
           I64[Hp - 72] = sat_s85PK_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85PA_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86UO: // global
           if (%MO_S_Gt_W64(2, _s85Pu::I64)) goto c86Vi; else goto c86UM;
       c86UM: // global
           I64[Hp - 72] = sat_s85PM_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86UK::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86UK::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86UZ: // global
           if (%MO_S_Ge_W64(2, _s85Pw::I64)) goto c86UT; else goto c86UY;
       c86UT: // global
           I64[Hp - 72] = sat_s85PY_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85PO_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86UY: // global
           if (%MO_S_Lt_W64(2, _s85Pu::I64)) goto c86Vi; else goto c86UW;
       c86UW: // global
           I64[Hp - 72] = sat_s85Q0_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86UU::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86UU::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vl: // global
           if (%MO_S_Lt_W64(_s85Pw::I64,
                            _s85Pu::I64)) goto c86Vb; else goto c86Vk;
       c86Vb: // global
           if (%MO_S_Le_W64(0, _s85Pw::I64)) goto c86V4; else goto c86V9;
       c86V4: // global
           I64[Hp - 72] = sat_s85Qd_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85Q3_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86V9: // global
           if (%MO_S_Gt_W64(0, _s85Pu::I64)) goto c86Vi; else goto c86V7;
       c86V7: // global
           I64[Hp - 72] = sat_s85Qf_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86V5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86V5::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vk: // global
           if (%MO_S_Ge_W64(0, _s85Pw::I64)) goto c86Ve; else goto c86Vj;
       c86Ve: // global
           I64[Hp - 72] = sat_s85Qr_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = _s85Pw::I64;
           I64[Hp - 40] = sat_s85Qh_info;
           I64[Hp - 24] = _s85Pu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vj: // global
           if (%MO_S_Lt_W64(0, _s85Pu::I64)) goto c86Vi; else goto c86Vh;
       c86Vi: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c86Vh: // global
           I64[Hp - 72] = sat_s85Qt_info;
           I64[Hp - 56] = _s85Pu::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c86Vf::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c86Vf::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c86Pa() //  [R1]
         { []
         }
     {offset
       c86Pa: // global
           I64[Sp] = R1;
           call _c86Pb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c86Pa_info" {
     block_c86Pa_info:
         const _c86Pa;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.07647291 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go2_closure" {
     GHC.IO.Device.$fEnumSeekMode_go2_closure:
         const GHC.IO.Device.$fEnumSeekMode_go2_info;
         const 0;
 },
 sat_s85QC_entry() //  [R1]
         { []
         }
     {offset
       c871o: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c871p; else goto c871q;
       c871p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c871q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QA::I64 = I64[R1 + 16];
           if (_s85QA::I64 != 0) goto c871m; else goto c871n;
       c871m: // global
           R2 = _s85QA::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 24, res: 0, upd: 24;
       c871n: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85QC_info" {
     sat_s85QC_info:
         const sat_s85QC_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+352;
 },
 sat_s85Qz_entry() //  [R1]
         { []
         }
     {offset
       c871C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c871D; else goto c871L;
       c871D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c871L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Qw::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Qw::I64, 0)) goto c871J; else goto c871B;
       c871B: // global
           if (%MO_S_Gt_W64(_s85Qw::I64, 2)) goto c871J; else goto c871K;
       c871J: // global
           R2 = _s85Qw::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c871K: // global
           R1 = I64[(_s85Qw::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Qz_info" {
     sat_s85Qz_info:
         const sat_s85Qz_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_go2_entry() //  [R2]
         { []
         }
     {offset
       c871N: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c871R; else goto c871Q;
       c871R: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c871Q: // global
           I64[Hp - 64] = sat_s85QC_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Qz_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go2_info" {
     GHC.IO.Device.$fEnumSeekMode_go2_info:
         const GHC.IO.Device.$fEnumSeekMode_go2_entry;
         const 0;
         const 554050781198;
         const 4294967300;
         const S861B_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.088048275 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go1_closure" {
     GHC.IO.Device.$fEnumSeekMode_go1_closure:
         const GHC.IO.Device.$fEnumSeekMode_go1_info;
         const 0;
 },
 sat_s85QJ_entry() //  [R1]
         { []
         }
     {offset
       c872t: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c872u; else goto c872v;
       c872u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c872v: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QH::I64 = I64[R1 + 16];
           if (_s85QH::I64 != 1) goto c872r; else goto c872s;
       c872r: // global
           R2 = _s85QH::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 24, res: 0, upd: 24;
       c872s: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85QJ_info" {
     sat_s85QJ_info:
         const sat_s85QJ_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+360;
 },
 sat_s85QG_entry() //  [R1]
         { []
         }
     {offset
       c872H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c872I; else goto c872Q;
       c872I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c872Q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QD::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85QD::I64, 0)) goto c872O; else goto c872G;
       c872G: // global
           if (%MO_S_Gt_W64(_s85QD::I64, 2)) goto c872O; else goto c872P;
       c872O: // global
           R2 = _s85QD::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c872P: // global
           R1 = I64[(_s85QD::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85QG_info" {
     sat_s85QG_info:
         const sat_s85QG_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_go1_entry() //  [R2]
         { []
         }
     {offset
       c872S: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c872W; else goto c872V;
       c872W: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c872V: // global
           I64[Hp - 64] = sat_s85QJ_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85QG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go1_info" {
     GHC.IO.Device.$fEnumSeekMode_go1_info:
         const GHC.IO.Device.$fEnumSeekMode_go1_entry;
         const 0;
         const 1103806595086;
         const 4294967300;
         const S861B_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.102663547 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_go_closure" {
     GHC.IO.Device.$fEnumSeekMode_go_closure:
         const GHC.IO.Device.$fEnumSeekMode_go_info;
         const 0;
 },
 sat_s85QQ_entry() //  [R1]
         { []
         }
     {offset
       c873y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c873z; else goto c873A;
       c873z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c873A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QO::I64 = I64[R1 + 16];
           if (_s85QO::I64 != 2) goto c873w; else goto c873x;
       c873w: // global
           R2 = _s85QO::I64 + 1;
           Sp = Sp - 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 24, res: 0, upd: 24;
       c873x: // global
           R1 = []_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85QQ_info" {
     sat_s85QQ_info:
         const sat_s85QQ_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+368;
 },
 sat_s85QN_entry() //  [R1]
         { []
         }
     {offset
       c873M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c873N; else goto c873V;
       c873N: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c873V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85QK::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85QK::I64, 0)) goto c873T; else goto c873L;
       c873L: // global
           if (%MO_S_Gt_W64(_s85QK::I64, 2)) goto c873T; else goto c873U;
       c873T: // global
           R2 = _s85QK::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c873U: // global
           R1 = I64[(_s85QK::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85QN_info" {
     sat_s85QN_info:
         const sat_s85QN_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_go_entry() //  [R2]
         { []
         }
     {offset
       c873X: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c8741; else goto c8740;
       c8741: // global
           HpAlloc = 72;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c8740: // global
           I64[Hp - 64] = sat_s85QQ_info;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85QN_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_go_info" {
     GHC.IO.Device.$fEnumSeekMode_go_info:
         const GHC.IO.Device.$fEnumSeekMode_go_entry;
         const 0;
         const 2203318222862;
         const 4294967300;
         const S861B_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.120305399 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info;
         const 0;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry() //  [R2, R3]
         { []
         }
     {offset
       c874F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c874G; else goto c874H;
       c874G: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c874H: // global
           I64[Sp - 16] = block_c874x_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u875u; else goto c874y;
       u875u: // global
           call _c874x(R1) args: 0, res: 0, upd: 0;
       c874y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_entry;
         const 0;
         const 64424509454;
         const 8589934607;
         const S861B_srt+352;
 },
 _c874x() //  [R1]
         { []
         }
     {offset
       c874x: // global
           _s85QS::P64 = P64[Sp + 8];
           _c874E::P64 = R1 & 7;
           if (_c874E::P64 < 3) goto u875r; else goto c874D;
       u875r: // global
           if (_c874E::P64 < 2) goto c874B; else goto c874C;
       c874B: // global
           _s85QU::I64 = 0;
           goto s85QT;
       c874C: // global
           _s85QU::I64 = 1;
           goto s85QT;
       c874D: // global
           _s85QU::I64 = 2;
           goto s85QT;
       s85QT: // global
           I64[Sp] = block_c874L_info;
           R1 = _s85QS::P64;
           I64[Sp + 8] = _s85QU::I64;
           if (R1 & 7 != 0) goto u875t; else goto c874N;
       u875t: // global
           call _c874L(R1) args: 0, res: 0, upd: 0;
       c874N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c874x_info" {
     block_c874x_info:
         const _c874x;
         const 1;
         const 30064771102;
         const S861B_srt+352;
 },
 _c874L() //  [R1]
         { []
         }
     {offset
       c874L: // global
           _s85QU::I64 = I64[Sp + 8];
           _c875q::P64 = R1 & 7;
           if (_c875q::P64 < 3) goto u875s; else goto c875g;
       u875s: // global
           if (_c875q::P64 < 2) goto c874Y; else goto c8757;
       c874Y: // global
           if (%MO_S_Gt_W64(_s85QU::I64, 0)) goto c875f; else goto c874V;
       c874V: // global
           R2 = _s85QU::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go2_entry(R2) args: 8, res: 0, upd: 8;
       c8757: // global
           if (%MO_S_Gt_W64(_s85QU::I64, 1)) goto c875f; else goto c8755;
       c8755: // global
           R2 = _s85QU::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go1_entry(R2) args: 8, res: 0, upd: 8;
       c875g: // global
           if (%MO_S_Gt_W64(_s85QU::I64, 2)) goto c875f; else goto c875e;
       c875f: // global
           R1 = []_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c875e: // global
           R2 = _s85QU::I64;
           Sp = Sp + 16;
           call GHC.IO.Device.$fEnumSeekMode_go_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c874L_info" {
     block_c874L_info:
         const _c874L;
         const 65;
         const 30064771102;
         const S861B_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.163563873 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info;
         const 0;
 },
 sat_s85Rm_entry() //  [R1]
         { []
         }
     {offset
       c876B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c876C; else goto c876D;
       c876C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c876D: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85Rf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Rm_info" {
     sat_s85Rm_info:
         const sat_s85Rm_entry;
         const 8589934593;
         const 4294967311;
         const S861B_srt+296;
 },
 sat_s85Rk_entry() //  [R1]
         { []
         }
     {offset
       c876N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c876O; else goto c876W;
       c876O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c876W: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Rg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Rg::I64, 0)) goto c876U; else goto c876M;
       c876M: // global
           if (%MO_S_Gt_W64(_s85Rg::I64, 2)) goto c876U; else goto c876V;
       c876U: // global
           R2 = _s85Rg::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c876V: // global
           R1 = I64[(_s85Rg::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Rk_info" {
     sat_s85Rk_info:
         const sat_s85Rk_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Rp_entry() //  [R1]
         { []
         }
     {offset
       c8777: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8778; else goto c877g;
       c8778: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c877g: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Rg::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Rg::I64, 0)) goto c877e; else goto c8776;
       c8776: // global
           if (%MO_S_Gt_W64(_s85Rg::I64, 2)) goto c877e; else goto c877f;
       c877e: // global
           R2 = _s85Rg::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c877f: // global
           R1 = I64[(_s85Rg::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Rp_info" {
     sat_s85Rp_info:
         const sat_s85Rp_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 go_dn_s85Rf_entry() //  [R1, R2]
         { []
         }
     {offset
       c877k: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c877o; else goto c877n;
       c877o: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c877n: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c877i; else goto c877j;
       c877i: // global
           _s85Rd::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Rm_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Rd::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Rk_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c877j: // global
           I64[Hp - 80] = sat_s85Rp_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c877q::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c877q::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s85Rf_info" {
     go_dn_s85Rf_info:
         const go_dn_s85Rf_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S861B_srt+296;
 },
 sat_s85Rq_entry() //  [R1]
         { []
         }
     {offset
       c877r: // global
           _s85Rq::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c877s; else goto c877t;
       c877t: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c877v; else goto c877u;
       c877v: // global
           HpAlloc = 24;
           goto c877s;
       c877s: // global
           R1 = _s85Rq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c877u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Rq::P64;
           _s85R6::I64 = I64[_s85Rq::P64 + 24];
           _s85Rd::I64 = _s85R6::I64 - I64[_s85Rq::P64 + 16];
           I64[Hp - 16] = go_dn_s85Rf_info;
           I64[Hp - 8] = _s85Rd::I64;
           I64[Hp] = 0 - _s85Rd::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85Rf_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Rq_info" {
     sat_s85Rq_info:
         const sat_s85Rq_entry;
         const 8589934592;
         const 4294967316;
         const S861B_srt+296;
 },
 sat_s85Rc_entry() //  [R1]
         { []
         }
     {offset
       c877F: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c877G; else goto c877O;
       c877G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c877O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c877M; else goto c877E;
       c877E: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c877M; else goto c877N;
       c877M: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c877N: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Rc_info" {
     sat_s85Rc_info:
         const sat_s85Rc_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Ru_entry() //  [R1]
         { []
         }
     {offset
       c8782: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c8783; else goto c878b;
       c8783: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c878b: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c8789; else goto c8781;
       c8781: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c8789; else goto c878a;
       c8789: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c878a: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Ru_info" {
     sat_s85Ru_info:
         const sat_s85Ru_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85RI_entry() //  [R1]
         { []
         }
     {offset
       c878E: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c878F; else goto c878G;
       c878F: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c878G: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85RB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85RI_info" {
     sat_s85RI_info:
         const sat_s85RI_entry;
         const 8589934593;
         const 4294967311;
         const S861B_srt+296;
 },
 sat_s85RG_entry() //  [R1]
         { []
         }
     {offset
       c878Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c878R; else goto c878Z;
       c878R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c878Z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RC::I64, 0)) goto c878X; else goto c878P;
       c878P: // global
           if (%MO_S_Gt_W64(_s85RC::I64, 2)) goto c878X; else goto c878Y;
       c878X: // global
           R2 = _s85RC::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c878Y: // global
           R1 = I64[(_s85RC::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85RG_info" {
     sat_s85RG_info:
         const sat_s85RG_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85RL_entry() //  [R1]
         { []
         }
     {offset
       c879a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c879b; else goto c879j;
       c879b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c879j: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RC::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RC::I64, 0)) goto c879h; else goto c8799;
       c8799: // global
           if (%MO_S_Gt_W64(_s85RC::I64, 2)) goto c879h; else goto c879i;
       c879h: // global
           R2 = _s85RC::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c879i: // global
           R1 = I64[(_s85RC::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85RL_info" {
     sat_s85RL_info:
         const sat_s85RL_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 go_up_s85RB_entry() //  [R1, R2]
         { []
         }
     {offset
       c879n: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c879r; else goto c879q;
       c879r: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c879q: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c879l; else goto c879m;
       c879l: // global
           _s85Rz::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85RI_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Rz::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85RG_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c879m: // global
           I64[Hp - 80] = sat_s85RL_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c879t::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c879t::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s85RB_info" {
     go_up_s85RB_info:
         const go_up_s85RB_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S861B_srt+296;
 },
 sat_s85RM_entry() //  [R1]
         { []
         }
     {offset
       c879u: // global
           _s85RM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c879v; else goto c879w;
       c879w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c879y; else goto c879x;
       c879y: // global
           HpAlloc = 24;
           goto c879v;
       c879v: // global
           R1 = _s85RM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c879x: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85RM::P64;
           _s85R6::I64 = I64[_s85RM::P64 + 24];
           _s85Rz::I64 = _s85R6::I64 - I64[_s85RM::P64 + 16];
           I64[Hp - 16] = go_up_s85RB_info;
           I64[Hp - 8] = _s85Rz::I64;
           I64[Hp] = 0 - _s85Rz::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85RB_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85RM_info" {
     sat_s85RM_info:
         const sat_s85RM_entry;
         const 8589934592;
         const 4294967316;
         const S861B_srt+296;
 },
 sat_s85Ry_entry() //  [R1]
         { []
         }
     {offset
       c879I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c879J; else goto c879R;
       c879J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c879R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c879P; else goto c879H;
       c879H: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c879P; else goto c879Q;
       c879P: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c879Q: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Ry_info" {
     sat_s85Ry_info:
         const sat_s85Ry_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85RQ_entry() //  [R1]
         { []
         }
     {offset
       c87a5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87a6; else goto c87ae;
       c87a6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87ae: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87ac; else goto c87a4;
       c87a4: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87ac; else goto c87ad;
       c87ac: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ad: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85RQ_info" {
     sat_s85RQ_info:
         const sat_s85RQ_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85S5_entry() //  [R1]
         { []
         }
     {offset
       c87aL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87aM; else goto c87aN;
       c87aM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87aN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85RY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85S5_info" {
     sat_s85S5_info:
         const sat_s85S5_entry;
         const 8589934593;
         const 4294967311;
         const S861B_srt+296;
 },
 sat_s85S3_entry() //  [R1]
         { []
         }
     {offset
       c87aX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87aY; else goto c87b6;
       c87aY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87b6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RZ::I64, 0)) goto c87b4; else goto c87aW;
       c87aW: // global
           if (%MO_S_Gt_W64(_s85RZ::I64, 2)) goto c87b4; else goto c87b5;
       c87b4: // global
           R2 = _s85RZ::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87b5: // global
           R1 = I64[(_s85RZ::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85S3_info" {
     sat_s85S3_info:
         const sat_s85S3_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85S8_entry() //  [R1]
         { []
         }
     {offset
       c87bh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87bi; else goto c87bq;
       c87bi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87bq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85RZ::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85RZ::I64, 0)) goto c87bo; else goto c87bg;
       c87bg: // global
           if (%MO_S_Gt_W64(_s85RZ::I64, 2)) goto c87bo; else goto c87bp;
       c87bo: // global
           R2 = _s85RZ::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87bp: // global
           R1 = I64[(_s85RZ::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85S8_info" {
     sat_s85S8_info:
         const sat_s85S8_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 go_dn_s85RY_entry() //  [R1, R2]
         { []
         }
     {offset
       c87bu: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87by; else goto c87bx;
       c87by: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87bx: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c87bs; else goto c87bt;
       c87bs: // global
           _s85RW::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85S5_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85RW::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85S3_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87bt: // global
           I64[Hp - 80] = sat_s85S8_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87bA::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87bA::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s85RY_info" {
     go_dn_s85RY_info:
         const go_dn_s85RY_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S861B_srt+296;
 },
 sat_s85S9_entry() //  [R1]
         { []
         }
     {offset
       c87bB: // global
           _s85S9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87bC; else goto c87bD;
       c87bD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87bF; else goto c87bE;
       c87bF: // global
           HpAlloc = 24;
           goto c87bC;
       c87bC: // global
           R1 = _s85S9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87bE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85S9::P64;
           _s85R6::I64 = I64[_s85S9::P64 + 24];
           _s85RW::I64 = _s85R6::I64 - I64[_s85S9::P64 + 16];
           I64[Hp - 16] = go_dn_s85RY_info;
           I64[Hp - 8] = _s85RW::I64;
           I64[Hp] = 1 - _s85RW::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85RY_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85S9_info" {
     sat_s85S9_info:
         const sat_s85S9_entry;
         const 8589934592;
         const 4294967316;
         const S861B_srt+296;
 },
 sat_s85RV_entry() //  [R1]
         { []
         }
     {offset
       c87bP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87bQ; else goto c87bY;
       c87bQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87bY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87bW; else goto c87bO;
       c87bO: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87bW; else goto c87bX;
       c87bW: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87bX: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85RV_info" {
     sat_s85RV_info:
         const sat_s85RV_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Sd_entry() //  [R1]
         { []
         }
     {offset
       c87cc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87cd; else goto c87cl;
       c87cd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87cl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87cj; else goto c87cb;
       c87cb: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87cj; else goto c87ck;
       c87cj: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ck: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Sd_info" {
     sat_s85Sd_info:
         const sat_s85Sd_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Sr_entry() //  [R1]
         { []
         }
     {offset
       c87cO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87cP; else goto c87cQ;
       c87cP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87cQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85Sk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Sr_info" {
     sat_s85Sr_info:
         const sat_s85Sr_entry;
         const 8589934593;
         const 4294967311;
         const S861B_srt+296;
 },
 sat_s85Sp_entry() //  [R1]
         { []
         }
     {offset
       c87d0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87d1; else goto c87d9;
       c87d1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87d9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Sl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Sl::I64, 0)) goto c87d7; else goto c87cZ;
       c87cZ: // global
           if (%MO_S_Gt_W64(_s85Sl::I64, 2)) goto c87d7; else goto c87d8;
       c87d7: // global
           R2 = _s85Sl::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87d8: // global
           R1 = I64[(_s85Sl::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Sp_info" {
     sat_s85Sp_info:
         const sat_s85Sp_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Su_entry() //  [R1]
         { []
         }
     {offset
       c87dk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87dl; else goto c87dt;
       c87dl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87dt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85Sl::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85Sl::I64, 0)) goto c87dr; else goto c87dj;
       c87dj: // global
           if (%MO_S_Gt_W64(_s85Sl::I64, 2)) goto c87dr; else goto c87ds;
       c87dr: // global
           R2 = _s85Sl::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ds: // global
           R1 = I64[(_s85Sl::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Su_info" {
     sat_s85Su_info:
         const sat_s85Su_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 go_up_s85Sk_entry() //  [R1, R2]
         { []
         }
     {offset
       c87dx: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87dB; else goto c87dA;
       c87dB: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87dA: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c87dv; else goto c87dw;
       c87dv: // global
           _s85Si::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Sr_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85Si::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85Sp_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87dw: // global
           I64[Hp - 80] = sat_s85Su_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87dD::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87dD::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s85Sk_info" {
     go_up_s85Sk_info:
         const go_up_s85Sk_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S861B_srt+296;
 },
 sat_s85Sv_entry() //  [R1]
         { []
         }
     {offset
       c87dE: // global
           _s85Sv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87dF; else goto c87dG;
       c87dG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87dI; else goto c87dH;
       c87dI: // global
           HpAlloc = 24;
           goto c87dF;
       c87dF: // global
           R1 = _s85Sv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87dH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Sv::P64;
           _s85R6::I64 = I64[_s85Sv::P64 + 24];
           _s85Si::I64 = _s85R6::I64 - I64[_s85Sv::P64 + 16];
           I64[Hp - 16] = go_up_s85Sk_info;
           I64[Hp - 8] = _s85Si::I64;
           I64[Hp] = 1 - _s85Si::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85Sk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Sv_info" {
     sat_s85Sv_info:
         const sat_s85Sv_entry;
         const 8589934592;
         const 4294967316;
         const S861B_srt+296;
 },
 sat_s85Sh_entry() //  [R1]
         { []
         }
     {offset
       c87dS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87dT; else goto c87e1;
       c87dT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87e1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87dZ; else goto c87dR;
       c87dR: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87dZ; else goto c87e0;
       c87dZ: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87e0: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Sh_info" {
     sat_s85Sh_info:
         const sat_s85Sh_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Sz_entry() //  [R1]
         { []
         }
     {offset
       c87ef: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87eg; else goto c87eo;
       c87eg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87eo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87em; else goto c87ee;
       c87ee: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87em; else goto c87en;
       c87em: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87en: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Sz_info" {
     sat_s85Sz_info:
         const sat_s85Sz_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85SO_entry() //  [R1]
         { []
         }
     {offset
       c87eV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87eW; else goto c87eX;
       c87eW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87eX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_dn_s85SH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85SO_info" {
     sat_s85SO_info:
         const sat_s85SO_entry;
         const 8589934593;
         const 4294967311;
         const S861B_srt+296;
 },
 sat_s85SM_entry() //  [R1]
         { []
         }
     {offset
       c87f7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87f8; else goto c87fg;
       c87f8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87fg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85SI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85SI::I64, 0)) goto c87fe; else goto c87f6;
       c87f6: // global
           if (%MO_S_Gt_W64(_s85SI::I64, 2)) goto c87fe; else goto c87ff;
       c87fe: // global
           R2 = _s85SI::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ff: // global
           R1 = I64[(_s85SI::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85SM_info" {
     sat_s85SM_info:
         const sat_s85SM_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85SR_entry() //  [R1]
         { []
         }
     {offset
       c87fr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87fs; else goto c87fA;
       c87fs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87fA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85SI::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85SI::I64, 0)) goto c87fy; else goto c87fq;
       c87fq: // global
           if (%MO_S_Gt_W64(_s85SI::I64, 2)) goto c87fy; else goto c87fz;
       c87fy: // global
           R2 = _s85SI::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87fz: // global
           R1 = I64[(_s85SI::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85SR_info" {
     sat_s85SR_info:
         const sat_s85SR_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 go_dn_s85SH_entry() //  [R1, R2]
         { []
         }
     {offset
       c87fE: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87fI; else goto c87fH;
       c87fI: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87fH: // global
           if (%MO_S_Ge_W64(R2, I64[R1 + 15])) goto c87fC; else goto c87fD;
       c87fC: // global
           _s85SF::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85SO_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85SF::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85SM_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87fD: // global
           I64[Hp - 80] = sat_s85SR_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87fK::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87fK::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_dn_s85SH_info" {
     go_dn_s85SH_info:
         const go_dn_s85SH_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S861B_srt+296;
 },
 sat_s85SS_entry() //  [R1]
         { []
         }
     {offset
       c87fL: // global
           _s85SS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87fM; else goto c87fN;
       c87fN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87fP; else goto c87fO;
       c87fP: // global
           HpAlloc = 24;
           goto c87fM;
       c87fM: // global
           R1 = _s85SS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87fO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85SS::P64;
           _s85R6::I64 = I64[_s85SS::P64 + 24];
           _s85SF::I64 = _s85R6::I64 - I64[_s85SS::P64 + 16];
           I64[Hp - 16] = go_dn_s85SH_info;
           I64[Hp - 8] = _s85SF::I64;
           I64[Hp] = 2 - _s85SF::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_dn_s85SH_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85SS_info" {
     sat_s85SS_info:
         const sat_s85SS_entry;
         const 8589934592;
         const 4294967316;
         const S861B_srt+296;
 },
 sat_s85SE_entry() //  [R1]
         { []
         }
     {offset
       c87fZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87g0; else goto c87g8;
       c87g0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87g8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87g6; else goto c87fY;
       c87fY: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87g6; else goto c87g7;
       c87g6: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87g7: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85SE_info" {
     sat_s85SE_info:
         const sat_s85SE_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85SW_entry() //  [R1]
         { []
         }
     {offset
       c87gm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87gn; else goto c87gv;
       c87gn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87gv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87gt; else goto c87gl;
       c87gl: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87gt; else goto c87gu;
       c87gt: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87gu: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85SW_info" {
     sat_s85SW_info:
         const sat_s85SW_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Ta_entry() //  [R1]
         { []
         }
     {offset
       c87gY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87gZ; else goto c87h0;
       c87gZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87h0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = I64[R1 + 32] + I64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 16;
           call go_up_s85T3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Ta_info" {
     sat_s85Ta_info:
         const sat_s85Ta_entry;
         const 8589934593;
         const 4294967311;
         const S861B_srt+296;
 },
 sat_s85T8_entry() //  [R1]
         { []
         }
     {offset
       c87ha: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87hb; else goto c87hj;
       c87hb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87hj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85T4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85T4::I64, 0)) goto c87hh; else goto c87h9;
       c87h9: // global
           if (%MO_S_Gt_W64(_s85T4::I64, 2)) goto c87hh; else goto c87hi;
       c87hh: // global
           R2 = _s85T4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87hi: // global
           R1 = I64[(_s85T4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85T8_info" {
     sat_s85T8_info:
         const sat_s85T8_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Td_entry() //  [R1]
         { []
         }
     {offset
       c87hu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87hv; else goto c87hD;
       c87hv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87hD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85T4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85T4::I64, 0)) goto c87hB; else goto c87ht;
       c87ht: // global
           if (%MO_S_Gt_W64(_s85T4::I64, 2)) goto c87hB; else goto c87hC;
       c87hB: // global
           R2 = _s85T4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87hC: // global
           R1 = I64[(_s85T4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Td_info" {
     sat_s85Td_info:
         const sat_s85Td_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 go_up_s85T3_entry() //  [R1, R2]
         { []
         }
     {offset
       c87hH: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c87hL; else goto c87hK;
       c87hL: // global
           HpAlloc = 88;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c87hK: // global
           if (%MO_S_Le_W64(R2, I64[R1 + 15])) goto c87hF; else goto c87hG;
       c87hF: // global
           _s85T1::I64 = I64[R1 + 7];
           I64[Hp - 80] = sat_s85Ta_info;
           P64[Hp - 64] = R1;
           I64[Hp - 56] = _s85T1::I64;
           I64[Hp - 48] = R2;
           I64[Hp - 40] = sat_s85T8_info;
           I64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 80;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87hG: // global
           I64[Hp - 80] = sat_s85Td_info;
           I64[Hp - 64] = R2;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 80;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           _c87hN::P64 = Hp - 54;
           Hp = Hp - 40;
           R1 = _c87hN::P64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . go_up_s85T3_info" {
     go_up_s85T3_info:
         const go_up_s85T3_entry;
         const 8589934592;
         const 4294967309;
         const 4294967300;
         const S861B_srt+296;
 },
 sat_s85Te_entry() //  [R1]
         { []
         }
     {offset
       c87hO: // global
           _s85Te::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c87hP; else goto c87hQ;
       c87hQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c87hS; else goto c87hR;
       c87hS: // global
           HpAlloc = 24;
           goto c87hP;
       c87hP: // global
           R1 = _s85Te::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87hR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s85Te::P64;
           _s85R6::I64 = I64[_s85Te::P64 + 24];
           _s85T1::I64 = _s85R6::I64 - I64[_s85Te::P64 + 16];
           I64[Hp - 16] = go_up_s85T3_info;
           I64[Hp - 8] = _s85T1::I64;
           I64[Hp] = 2 - _s85T1::I64;
           R2 = _s85R6::I64;
           R1 = Hp - 15;
           Sp = Sp - 16;
           call go_up_s85T3_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Te_info" {
     sat_s85Te_info:
         const sat_s85Te_entry;
         const 8589934592;
         const 4294967316;
         const S861B_srt+296;
 },
 sat_s85T0_entry() //  [R1]
         { []
         }
     {offset
       c87i2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87i3; else goto c87ib;
       c87i3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87ib: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87i9; else goto c87i1;
       c87i1: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87i9; else goto c87ia;
       c87i9: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ia: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85T0_info" {
     sat_s85T0_info:
         const sat_s85T0_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 sat_s85Ti_entry() //  [R1]
         { []
         }
     {offset
       c87ip: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c87iq; else goto c87iy;
       c87iq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c87iy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s85R4::I64 = I64[R1 + 16];
           if (%MO_S_Lt_W64(_s85R4::I64, 0)) goto c87iw; else goto c87io;
       c87io: // global
           if (%MO_S_Gt_W64(_s85R4::I64, 2)) goto c87iw; else goto c87ix;
       c87iw: // global
           R2 = _s85R4::I64;
           Sp = Sp - 16;
           call GHC.IO.Device.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c87ix: // global
           R1 = I64[(_s85R4::I64 << 3) + GHC.IO.Device.SeekMode_closure_tbl];
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s85Ti_info" {
     sat_s85Ti_info:
         const sat_s85Ti_entry;
         const 4294967296;
         const 4294967313;
         const S861B_srt+296;
 },
 GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       c87iH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c87iI; else goto c87iJ;
       c87iI: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87iJ: // global
           I64[Sp - 24] = block_c87iz_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u87kp; else goto c87iA;
       u87kp: // global
           call _c87iz(R1) args: 0, res: 0, upd: 0;
       c87iA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info" {
     GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_info:
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_entry;
         const 0;
         const 8800387989518;
         const 12884901911;
         const S861B_srt+296;
 },
 _c87iz() //  [R1]
         { []
         }
     {offset
       c87iz: // global
           _s85R1::P64 = P64[Sp + 8];
           _c87iG::P64 = R1 & 7;
           if (_c87iG::P64 < 3) goto u87km; else goto c87iF;
       u87km: // global
           if (_c87iG::P64 < 2) goto c87iD; else goto c87iE;
       c87iD: // global
           _s85R4::I64 = 0;
           goto s85R3;
       c87iE: // global
           _s85R4::I64 = 1;
           goto s85R3;
       c87iF: // global
           _s85R4::I64 = 2;
           goto s85R3;
       s85R3: // global
           I64[Sp] = block_c87iK_info;
           R1 = _s85R1::P64;
           I64[Sp + 8] = _s85R4::I64;
           if (R1 & 7 != 0) goto u87ko; else goto c87jV;
       u87ko: // global
           call _c87iK(R1) args: 0, res: 0, upd: 0;
       c87jV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c87iz_info" {
     block_c87iz_info:
         const _c87iz;
         const 2;
         const 4294967326;
         const S861B_srt+296;
 },
 _c87iK() //  [R1]
         { []
         }
     {offset
       c87iK: // global
           _s85R2::P64 = P64[Sp + 16];
           _c87kj::P64 = R1 & 7;
           if (_c87kj::P64 < 3) goto u87kn; else goto c87k9;
       u87kn: // global
           if (_c87kj::P64 < 2) goto c87k1; else goto c87k5;
       c87k1: // global
           _s85R6::I64 = 0;
           goto s85R5;
       c87k5: // global
           _s85R6::I64 = 1;
           goto s85R5;
       c87k9: // global
           _s85R6::I64 = 2;
           goto s85R5;
       s85R5: // global
           I64[Sp] = block_c8762_info;
           R1 = _s85R2::P64;
           I64[Sp + 16] = _s85R6::I64;
           if (R1 & 7 != 0) goto u87kq; else goto c8763;
       u87kq: // global
           call _c8762(R1) args: 0, res: 0, upd: 0;
       c8763: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c87iK_info" {
     block_c87iK_info:
         const _c87iK;
         const 66;
         const 4294967326;
         const S861B_srt+296;
 },
 _c8762() //  [R1]
         { []
         }
     {offset
       c8762: // global
           _s85R4::I64 = I64[Sp + 8];
           _s85R6::I64 = I64[Sp + 16];
           _c87kk::P64 = R1 & 7;
           if (_c87kk::P64 < 3) goto u87kl; else goto c87jy;
       u87kl: // global
           if (_c87kk::P64 < 2) goto c87iO; else goto c87jb;
       c87iO: // global
           Hp = Hp + 80;
           _s85R7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c87jB; else goto c87iQ;
       c87iQ: // global
           if (%MO_S_Lt_W64(_s85R6::I64,
                            _s85R4::I64)) goto c87j1; else goto c87ja;
       c87j1: // global
           if (%MO_S_Le_W64(0, _s85R6::I64)) goto c87iU; else goto c87iZ;
       c87iU: // global
           I64[Hp - 72] = sat_s85Rq_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85Rc_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87iZ: // global
           if (%MO_S_Gt_W64(0, _s85R4::I64)) goto c87jS; else goto c87iX;
       c87iX: // global
           I64[Hp - 72] = sat_s85Ru_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87iV::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87iV::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87ja: // global
           if (%MO_S_Ge_W64(0, _s85R6::I64)) goto c87j4; else goto c87j9;
       c87j4: // global
           I64[Hp - 72] = sat_s85RM_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85Ry_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87j9: // global
           if (%MO_S_Lt_W64(0, _s85R4::I64)) goto c87jS; else goto c87j7;
       c87j7: // global
           I64[Hp - 72] = sat_s85RQ_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87j5::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87j5::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jb: // global
           Hp = Hp + 80;
           _s85R7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c87jB; else goto c87jd;
       c87jd: // global
           if (%MO_S_Lt_W64(_s85R6::I64,
                            _s85R4::I64)) goto c87jo; else goto c87jx;
       c87jo: // global
           if (%MO_S_Le_W64(1, _s85R6::I64)) goto c87jh; else goto c87jm;
       c87jh: // global
           I64[Hp - 72] = sat_s85S9_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85RV_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jm: // global
           if (%MO_S_Gt_W64(1, _s85R4::I64)) goto c87jS; else goto c87jk;
       c87jk: // global
           I64[Hp - 72] = sat_s85Sd_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87ji::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87ji::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jx: // global
           if (%MO_S_Ge_W64(1, _s85R6::I64)) goto c87jr; else goto c87jw;
       c87jr: // global
           I64[Hp - 72] = sat_s85Sv_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85Sh_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jw: // global
           if (%MO_S_Lt_W64(1, _s85R4::I64)) goto c87jS; else goto c87ju;
       c87ju: // global
           I64[Hp - 72] = sat_s85Sz_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87js::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87js::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jy: // global
           Hp = Hp + 80;
           _s85R7::P64 = R1;
           if (Hp > HpLim) (likely: False) goto c87jB; else goto c87jA;
       c87jB: // global
           HpAlloc = 80;
           R1 = _s85R7::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c87jA: // global
           if (%MO_S_Lt_W64(_s85R6::I64,
                            _s85R4::I64)) goto c87jL; else goto c87jU;
       c87jL: // global
           if (%MO_S_Le_W64(2, _s85R6::I64)) goto c87jE; else goto c87jJ;
       c87jE: // global
           I64[Hp - 72] = sat_s85SS_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85SE_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jJ: // global
           if (%MO_S_Gt_W64(2, _s85R4::I64)) goto c87jS; else goto c87jH;
       c87jH: // global
           I64[Hp - 72] = sat_s85SW_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87jF::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87jF::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jU: // global
           if (%MO_S_Ge_W64(2, _s85R6::I64)) goto c87jO; else goto c87jT;
       c87jO: // global
           I64[Hp - 72] = sat_s85Te_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = _s85R6::I64;
           I64[Hp - 40] = sat_s85T0_info;
           I64[Hp - 24] = _s85R4::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 72;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jT: // global
           if (%MO_S_Lt_W64(2, _s85R4::I64)) goto c87jS; else goto c87jR;
       c87jS: // global
           Hp = Hp - 80;
           R1 = []_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c87jR: // global
           I64[Hp - 72] = sat_s85Ti_info;
           I64[Hp - 56] = _s85R4::I64;
           I64[Hp - 48] = :_con_info;
           P64[Hp - 40] = Hp - 72;
           P64[Hp - 32] = GHC.Types.[]_closure+1;
           _c87jP::P64 = Hp - 46;
           Hp = Hp - 32;
           R1 = _c87jP::P64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c8762_info" {
     block_c8762_info:
         const _c8762;
         const 194;
         const 4294967326;
         const S861B_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.263784415 UTC

[section ""data" . GHC.IO.Device.$fEnumSeekMode_closure" {
     GHC.IO.Device.$fEnumSeekMode_closure:
         const GHC.Enum.C:Enum_con_info;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cfromEnum_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure+1;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThen_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure+2;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.265794218 UTC

[section ""data" . GHC.IO.Device.$trModule3_closure" {
     GHC.IO.Device.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.267529563 UTC

[section ""data" . GHC.IO.Device.$trModule1_closure" {
     GHC.IO.Device.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.269372694 UTC

[section ""data" . GHC.IO.Device.$trModule_closure" {
     GHC.IO.Device.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Device.$trModule3_closure+1;
         const GHC.IO.Device.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.271198884 UTC

[section ""data" . $krep_r81ZU_closure" {
     $krep_r81ZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord8_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.272962686 UTC

[section ""data" . $krep1_r81ZV_closure" {
     $krep1_r81ZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.274840191 UTC

[section ""data" . $krep2_r81ZW_closure" {
     $krep2_r81ZW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.276743783 UTC

[section ""data" . $krep3_r81ZX_closure" {
     $krep3_r81ZX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.27904698 UTC

[section ""data" . $krep4_r81ZY_closure" {
     $krep4_r81ZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcBool_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.28077555 UTC

[section ""data" . $krep5_r81ZZ_closure" {
     $krep5_r81ZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.282635934 UTC

[section ""data" . $krep6_r8200_closure" {
     $krep6_r8200_closure:
         const :_con_info;
         const $krep3_r81ZX_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.284792977 UTC

[section ""data" . $krep7_r8201_closure" {
     $krep7_r8201_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.286725343 UTC

[section ""data" . $krep8_r8202_closure" {
     $krep8_r8202_closure:
         const :_con_info;
         const $krep1_r81ZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.288398297 UTC

[section ""data" . $krep9_r8203_closure" {
     $krep9_r8203_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep8_r8202_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.290200467 UTC

[section ""data" . $krep10_r8204_closure" {
     $krep10_r8204_closure:
         const :_con_info;
         const $krep2_r81ZW_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.291897273 UTC

[section ""data" . $krep11_r8205_closure" {
     $krep11_r8205_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep10_r8204_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.293932352 UTC

[section ""data" . $krep12_r8206_closure" {
     $krep12_r8206_closure:
         const :_con_info;
         const $krep4_r81ZY_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.29622579 UTC

[section ""data" . $krep13_r8207_closure" {
     $krep13_r8207_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep12_r8206_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.298052669 UTC

[section ""data" . $krep14_r8208_closure" {
     $krep14_r8208_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Base.$tcMaybe_closure;
         const $krep6_r8200_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.299805066 UTC

[section ""data" . $krep15_r8209_closure" {
     $krep15_r8209_closure:
         const :_con_info;
         const $krep14_r8208_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.301608508 UTC

[section ""data" . $krep16_r820a_closure" {
     $krep16_r820a_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep15_r8209_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.303418236 UTC

[section ""data" . $krep17_r820b_closure" {
     $krep17_r820b_closure:
         const :_con_info;
         const $krep_r81ZU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.305138724 UTC

[section ""data" . $krep18_r820c_closure" {
     $krep18_r820c_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Ptr.$tcPtr_closure;
         const $krep17_r820b_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.307005993 UTC

[section ""data" . $krep19_r820d_closure" {
     $krep19_r820d_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.308764378 UTC

[section ""data" . $krep20_r820e_closure" {
     $krep20_r820e_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep7_r8201_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.311014911 UTC

[section ""data" . $krep21_r820f_closure" {
     $krep21_r820f_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.312846362 UTC

[section ""data" . $krep22_r820g_closure" {
     $krep22_r820g_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r81ZX_closure+1;
         const $krep16_r820a_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.315288872 UTC

[section ""data" . $krep23_r820h_closure" {
     $krep23_r820h_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.317003605 UTC

[section ""data" . $krep24_r820i_closure" {
     $krep24_r820i_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_r81ZY_closure+1;
         const $krep21_r820f_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.31886177 UTC

[section ""data" . $krep25_r820j_closure" {
     $krep25_r820j_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r81ZV_closure+1;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.320625589 UTC

[section ""data" . $krep26_r820k_closure" {
     $krep26_r820k_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep19_r820d_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.322545756 UTC

[section ""data" . $krep27_r820l_closure" {
     $krep27_r820l_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep20_r820e_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.324269835 UTC

[section ""data" . $krep28_r820m_closure" {
     $krep28_r820m_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep18_r820c_closure+1;
         const $krep22_r820g_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.326125371 UTC

[section ""data" . GHC.IO.Device.$tcIODevice1_closure" {
     GHC.IO.Device.$tcIODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*_closure;
         const $krep5_r81ZZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.327900717 UTC

[section ""data" . $krep29_r820n_closure" {
     $krep29_r820n_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.329718298 UTC

[section ""data" . $krep30_r820o_closure" {
     $krep30_r820o_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep28_r820m_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.331566659 UTC

[section ""data" . $krep31_r820p_closure" {
     $krep31_r820p_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep27_r820l_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.334077439 UTC

[section ""data" . $krep32_r820q_closure" {
     $krep32_r820q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep26_r820k_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.335796216 UTC

[section ""data" . $krep33_r820r_closure" {
     $krep33_r820r_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.3375552 UTC

[section ""data" . $krep34_r820s_closure" {
     $krep34_r820s_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep24_r820i_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.339250333 UTC

[section ""data" . $krep35_r820t_closure" {
     $krep35_r820t_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep23_r820h_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.341070302 UTC

[section ""data" . $krep36_r820u_closure" {
     $krep36_r820u_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep11_r8205_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.344497351 UTC

[section ""data" . $krep37_r820v_closure" {
     $krep37_r820v_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep13_r8207_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.346302746 UTC

[section ""data" . $krep38_r820w_closure" {
     $krep38_r820w_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep9_r8203_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.347999526 UTC

[section ""data" . $krep39_r820x_closure" {
     $krep39_r820x_closure:
         const :_con_info;
         const $krep29_r820n_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.349833497 UTC

[section ""data" . $krep40_r820y_closure" {
     $krep40_r820y_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.351652333 UTC

[section ""data" . $krep41_r820z_closure" {
     $krep41_r820z_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep40_r820y_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.354062545 UTC

[section ""data" . $krep42_r820A_closure" {
     $krep42_r820A_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep41_r820z_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.355816946 UTC

[section ""cstring" . GHC.IO.Device.$tcRawIO2_bytes" {
     GHC.IO.Device.$tcRawIO2_bytes:
         I8[] [82,97,119,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.357551353 UTC

[section ""data" . GHC.IO.Device.$tcRawIO1_closure" {
     GHC.IO.Device.$tcRawIO1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcRawIO2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.359396126 UTC

[section ""data" . GHC.IO.Device.$tcRawIO_closure" {
     GHC.IO.Device.$tcRawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcRawIO1_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 15458836890887680490;
         const 11407217875184880147;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.361210889 UTC

[section ""data" . $krep43_r820B_closure" {
     $krep43_r820B_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcRawIO_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.363233757 UTC

[section ""data" . $krep44_r820C_closure" {
     $krep44_r820C_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep43_r820B_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.365047296 UTC

[section ""data" . $krep45_r820D_closure" {
     $krep45_r820D_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep32_r820q_closure+4;
         const $krep44_r820C_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.366839363 UTC

[section ""data" . $krep46_r820E_closure" {
     $krep46_r820E_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep30_r820o_closure+4;
         const $krep45_r820D_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.368655178 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO1_closure" {
     GHC.IO.Device.$tc'C:RawIO1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep31_r820p_closure+4;
         const $krep46_r820E_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.370587758 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:RawIO3_bytes" {
     GHC.IO.Device.$tc'C:RawIO3_bytes:
         I8[] [39,67,58,82,97,119,73,79]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.372806281 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO2_closure" {
     GHC.IO.Device.$tc'C:RawIO2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:RawIO3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.374692977 UTC

[section ""data" . GHC.IO.Device.$tc'C:RawIO_closure" {
     GHC.IO.Device.$tc'C:RawIO_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:RawIO2_closure+1;
         const GHC.IO.Device.$tc'C:RawIO1_closure+4;
         const 6403037956050298954;
         const 14520964482680400738;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.376476409 UTC

[section ""cstring" . GHC.IO.Device.$tcIODeviceType2_bytes" {
     GHC.IO.Device.$tcIODeviceType2_bytes:
         I8[] [73,79,68,101,118,105,99,101,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.378329488 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType1_closure" {
     GHC.IO.Device.$tcIODeviceType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODeviceType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.380201869 UTC

[section ""data" . GHC.IO.Device.$tcIODeviceType_closure" {
     GHC.IO.Device.$tcIODeviceType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODeviceType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 4175968526489202383;
         const 17718566430225243048;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.382177849 UTC

[section ""data" . GHC.IO.Device.$tc'Directory1_closure" {
     GHC.IO.Device.$tc'Directory1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODeviceType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.384047993 UTC

[section ""cstring" . GHC.IO.Device.$tc'Directory3_bytes" {
     GHC.IO.Device.$tc'Directory3_bytes:
         I8[] [39,68,105,114,101,99,116,111,114,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.38594129 UTC

[section ""data" . GHC.IO.Device.$tc'Directory2_closure" {
     GHC.IO.Device.$tc'Directory2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Directory3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.387809158 UTC

[section ""data" . GHC.IO.Device.$tc'Directory_closure" {
     GHC.IO.Device.$tc'Directory_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Directory2_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 12008838926528382233;
         const 639950492613404225;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.390253729 UTC

[section ""cstring" . GHC.IO.Device.$tc'Stream2_bytes" {
     GHC.IO.Device.$tc'Stream2_bytes:
         I8[] [39,83,116,114,101,97,109]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.391982793 UTC

[section ""data" . GHC.IO.Device.$tc'Stream1_closure" {
     GHC.IO.Device.$tc'Stream1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'Stream2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.394346202 UTC

[section ""data" . GHC.IO.Device.$tc'Stream_closure" {
     GHC.IO.Device.$tc'Stream_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'Stream1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 39573928359804366;
         const 741010449601335383;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.396180477 UTC

[section ""cstring" . GHC.IO.Device.$tc'RegularFile2_bytes" {
     GHC.IO.Device.$tc'RegularFile2_bytes:
         I8[] [39,82,101,103,117,108,97,114,70,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.397950554 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile1_closure" {
     GHC.IO.Device.$tc'RegularFile1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RegularFile2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.399705774 UTC

[section ""data" . GHC.IO.Device.$tc'RegularFile_closure" {
     GHC.IO.Device.$tc'RegularFile_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RegularFile1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 2184574052715259025;
         const 14349593064521146856;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.401550458 UTC

[section ""cstring" . GHC.IO.Device.$tc'RawDevice2_bytes" {
     GHC.IO.Device.$tc'RawDevice2_bytes:
         I8[] [39,82,97,119,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.403217793 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice1_closure" {
     GHC.IO.Device.$tc'RawDevice1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RawDevice2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.405011637 UTC

[section ""data" . GHC.IO.Device.$tc'RawDevice_closure" {
     GHC.IO.Device.$tc'RawDevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RawDevice1_closure+1;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const 13599710032796319976;
         const 8789152980205417013;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.407008373 UTC

[section ""data" . $krep47_r820F_closure" {
     $krep47_r820F_closure:
         const :_con_info;
         const GHC.IO.Device.$tc'Directory1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.409448452 UTC

[section ""data" . $krep48_r820G_closure" {
     $krep48_r820G_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep47_r820F_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.411116102 UTC

[section ""data" . $krep49_r820H_closure" {
     $krep49_r820H_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep48_r820G_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.412731696 UTC

[section ""cstring" . GHC.IO.Device.$tcSeekMode2_bytes" {
     GHC.IO.Device.$tcSeekMode2_bytes:
         I8[] [83,101,101,107,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.414585648 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode1_closure" {
     GHC.IO.Device.$tcSeekMode1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcSeekMode2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.416367888 UTC

[section ""data" . GHC.IO.Device.$tcSeekMode_closure" {
     GHC.IO.Device.$tcSeekMode_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcSeekMode1_closure+1;
         const GHC.Types.krep$*_closure;
         const 17698211299654630015;
         const 5588778824401988676;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.418268586 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek1_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcSeekMode_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.420017922 UTC

[section ""cstring" . GHC.IO.Device.$tc'AbsoluteSeek3_bytes" {
     GHC.IO.Device.$tc'AbsoluteSeek3_bytes:
         I8[] [39,65,98,115,111,108,117,116,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.421844302 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek2_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.423781966 UTC

[section ""data" . GHC.IO.Device.$tc'AbsoluteSeek_closure" {
     GHC.IO.Device.$tc'AbsoluteSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek2_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 5610789579148926753;
         const 3433733041722086784;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.426820021 UTC

[section ""cstring" . GHC.IO.Device.$tc'RelativeSeek2_bytes" {
     GHC.IO.Device.$tc'RelativeSeek2_bytes:
         I8[] [39,82,101,108,97,116,105,118,101,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.428499041 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek1_closure" {
     GHC.IO.Device.$tc'RelativeSeek1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'RelativeSeek2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.430301088 UTC

[section ""data" . GHC.IO.Device.$tc'RelativeSeek_closure" {
     GHC.IO.Device.$tc'RelativeSeek_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'RelativeSeek1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 15906895381304752726;
         const 1738065871578000433;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.431998547 UTC

[section ""cstring" . GHC.IO.Device.$tc'SeekFromEnd2_bytes" {
     GHC.IO.Device.$tc'SeekFromEnd2_bytes:
         I8[] [39,83,101,101,107,70,114,111,109,69,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.43383755 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd1_closure" {
     GHC.IO.Device.$tc'SeekFromEnd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'SeekFromEnd2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.435635836 UTC

[section ""data" . GHC.IO.Device.$tc'SeekFromEnd_closure" {
     GHC.IO.Device.$tc'SeekFromEnd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'SeekFromEnd1_closure+1;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const 16344961357916628519;
         const 5039033320700315004;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.43760408 UTC

[section ""data" . $krep50_r820I_closure" {
     $krep50_r820I_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.IO.Device.$tc'AbsoluteSeek1_closure+1;
         const $krep25_r820j_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.439347613 UTC

[section ""data" . $krep51_r820J_closure" {
     $krep51_r820J_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_r820n_closure+2;
         const $krep50_r820I_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.44109714 UTC

[section ""cstring" . GHC.IO.Device.$tcIODevice3_bytes" {
     GHC.IO.Device.$tcIODevice3_bytes:
         I8[] [73,79,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.443055334 UTC

[section ""data" . GHC.IO.Device.$tcIODevice2_closure" {
     GHC.IO.Device.$tcIODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tcIODevice3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.445537911 UTC

[section ""data" . GHC.IO.Device.$tcIODevice_closure" {
     GHC.IO.Device.$tcIODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tcIODevice2_closure+1;
         const GHC.IO.Device.$tcIODevice1_closure+4;
         const 4764642859795697036;
         const 7163668738257247953;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.447296169 UTC

[section ""data" . $krep52_r820K_closure" {
     $krep52_r820K_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Device.$tcIODevice_closure+1;
         const $krep39_r820x_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.448944896 UTC

[section ""data" . $krep53_r820L_closure" {
     $krep53_r820L_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep42_r820A_closure+4;
         const $krep52_r820K_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.450706419 UTC

[section ""data" . $krep54_r820M_closure" {
     $krep54_r820M_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep41_r820z_closure+4;
         const $krep53_r820L_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.452388377 UTC

[section ""data" . $krep55_r820N_closure" {
     $krep55_r820N_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep49_r820H_closure+4;
         const $krep54_r820M_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.454273633 UTC

[section ""data" . $krep56_r820O_closure" {
     $krep56_r820O_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep55_r820N_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.455998266 UTC

[section ""data" . $krep57_r820P_closure" {
     $krep57_r820P_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep56_r820O_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.457848287 UTC

[section ""data" . $krep58_r820Q_closure" {
     $krep58_r820Q_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep35_r820t_closure+4;
         const $krep57_r820P_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.459710981 UTC

[section ""data" . $krep59_r820R_closure" {
     $krep59_r820R_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep33_r820r_closure+4;
         const $krep58_r820Q_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.461581392 UTC

[section ""data" . $krep60_r820S_closure" {
     $krep60_r820S_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep59_r820R_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.46390782 UTC

[section ""data" . $krep61_r820T_closure" {
     $krep61_r820T_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep38_r820w_closure+4;
         const $krep60_r820S_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.46568499 UTC

[section ""data" . $krep62_r820U_closure" {
     $krep62_r820U_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep51_r820J_closure+4;
         const $krep61_r820T_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.467409633 UTC

[section ""data" . $krep63_r820V_closure" {
     $krep63_r820V_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep62_r820U_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.46913385 UTC

[section ""data" . $krep64_r820W_closure" {
     $krep64_r820W_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep37_r820v_closure+4;
         const $krep63_r820V_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.47099775 UTC

[section ""data" . $krep65_r820X_closure" {
     $krep65_r820X_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep36_r820u_closure+4;
         const $krep64_r820W_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.472712715 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice1_closure" {
     GHC.IO.Device.$tc'C:IODevice1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep34_r820s_closure+4;
         const $krep65_r820X_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.474552236 UTC

[section ""cstring" . GHC.IO.Device.$tc'C:IODevice3_bytes" {
     GHC.IO.Device.$tc'C:IODevice3_bytes:
         I8[] [39,67,58,73,79,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.476231187 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice2_closure" {
     GHC.IO.Device.$tc'C:IODevice2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Device.$tc'C:IODevice3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.479703459 UTC

[section ""data" . GHC.IO.Device.$tc'C:IODevice_closure" {
     GHC.IO.Device.$tc'C:IODevice_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Device.$trModule_closure+1;
         const GHC.IO.Device.$tc'C:IODevice2_closure+1;
         const GHC.IO.Device.$tc'C:IODevice1_closure+4;
         const 15352604720075066134;
         const 14084350618605203122;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.481729244 UTC

[section ""data" . GHC.IO.Device.AbsoluteSeek_closure" {
     GHC.IO.Device.AbsoluteSeek_closure:
         const GHC.IO.Device.AbsoluteSeek_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.483922359 UTC

[section ""data" . GHC.IO.Device.RelativeSeek_closure" {
     GHC.IO.Device.RelativeSeek_closure:
         const GHC.IO.Device.RelativeSeek_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.485696901 UTC

[section ""data" . GHC.IO.Device.SeekFromEnd_closure" {
     GHC.IO.Device.SeekFromEnd_closure:
         const GHC.IO.Device.SeekFromEnd_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.48731283 UTC

[section ""data" . GHC.IO.Device.Directory_closure" {
     GHC.IO.Device.Directory_closure:
         const GHC.IO.Device.Directory_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.488919708 UTC

[section ""data" . GHC.IO.Device.Stream_closure" {
     GHC.IO.Device.Stream_closure:
         const GHC.IO.Device.Stream_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.490661155 UTC

[section ""data" . GHC.IO.Device.RegularFile_closure" {
     GHC.IO.Device.RegularFile_closure:
         const GHC.IO.Device.RegularFile_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.49234885 UTC

[section ""data" . GHC.IO.Device.RawDevice_closure" {
     GHC.IO.Device.RawDevice_closure:
         const GHC.IO.Device.RawDevice_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.495408248 UTC

[section ""data" . GHC.IO.Device.C:IODevice_closure" {
     GHC.IO.Device.C:IODevice_closure:
         const GHC.IO.Device.C:IODevice_info;
 },
 GHC.IO.Device.C:IODevice_slow() //  [R1]
         { []
         }
     {offset
       c87u4: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.IO.Device.C:IODevice_entry(R6,
                                               R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 80, res: 0, upd: 8;
     }
 },
 GHC.IO.Device.C:IODevice_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       c87u9: // global
           Hp = Hp + 120;
           if (Hp > HpLim) (likely: False) goto c87ud; else goto c87uc;
       c87ud: // global
           HpAlloc = 120;
           R1 = GHC.IO.Device.C:IODevice_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 120, res: 0, upd: 8;
       c87uc: // global
           I64[Hp - 112] = GHC.IO.Device.C:IODevice_con_info;
           P64[Hp - 104] = R2;
           P64[Hp - 96] = R3;
           P64[Hp - 88] = R4;
           P64[Hp - 80] = R5;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 40];
           P64[Hp - 16] = P64[Sp + 48];
           P64[Hp - 8] = P64[Sp + 56];
           P64[Hp] = P64[Sp + 64];
           R1 = Hp - 111;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:IODevice_info" {
     GHC.IO.Device.C:IODevice_info:
         const GHC.IO.Device.C:IODevice_entry;
         const 0;
         const 14;
         const 60129542144;
         const 0;
         const 14;
         const GHC.IO.Device.C:IODevice_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.500892368 UTC

[section ""data" . GHC.IO.Device.C:RawIO_closure" {
     GHC.IO.Device.C:RawIO_closure:
         const GHC.IO.Device.C:RawIO_info;
 },
 GHC.IO.Device.C:RawIO_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c87uA: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c87uE; else goto c87uD;
       c87uE: // global
           HpAlloc = 40;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Device.C:RawIO_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c87uD: // global
           I64[Hp - 32] = GHC.IO.Device.C:RawIO_con_info;
           P64[Hp - 24] = R2;
           P64[Hp - 16] = R3;
           P64[Hp - 8] = R4;
           P64[Hp] = R5;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:RawIO_info" {
     GHC.IO.Device.C:RawIO_info:
         const GHC.IO.Device.C:RawIO_entry;
         const 0;
         const 14;
         const 17179869208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.504725126 UTC

[section ""relreadonly" . GHC.IO.Device.SeekMode_closure_tbl" {
     GHC.IO.Device.SeekMode_closure_tbl:
         const GHC.IO.Device.AbsoluteSeek_closure+1;
         const GHC.IO.Device.RelativeSeek_closure+2;
         const GHC.IO.Device.SeekFromEnd_closure+3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.50661069 UTC

[section ""cstring" . i87uN_str" {
     i87uN_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,65,98,115,111,108,117,116,101,83,101,101,107]
 },
 GHC.IO.Device.AbsoluteSeek_con_entry() //  [R1]
         { []
         }
     {offset
       c87uM: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.AbsoluteSeek_con_info" {
     GHC.IO.Device.AbsoluteSeek_con_info:
         const GHC.IO.Device.AbsoluteSeek_con_entry;
         const 4294967296;
         const 3;
         const i87uN_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.509843819 UTC

[section ""cstring" . i87uU_str" {
     i87uU_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,108,97,116,105,118,101,83,101,101,107]
 },
 GHC.IO.Device.RelativeSeek_con_entry() //  [R1]
         { []
         }
     {offset
       c87uT: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.RelativeSeek_con_info" {
     GHC.IO.Device.RelativeSeek_con_info:
         const GHC.IO.Device.RelativeSeek_con_entry;
         const 4294967296;
         const 4294967299;
         const i87uU_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.513055399 UTC

[section ""cstring" . i87v1_str" {
     i87v1_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,101,101,107,70,114,111,109,69,110,100]
 },
 GHC.IO.Device.SeekFromEnd_con_entry() //  [R1]
         { []
         }
     {offset
       c87v0: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.SeekFromEnd_con_info" {
     GHC.IO.Device.SeekFromEnd_con_info:
         const GHC.IO.Device.SeekFromEnd_con_entry;
         const 4294967296;
         const 8589934595;
         const i87v1_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.516220163 UTC

[section ""relreadonly" . GHC.IO.Device.IODeviceType_closure_tbl" {
     GHC.IO.Device.IODeviceType_closure_tbl:
         const GHC.IO.Device.Directory_closure+1;
         const GHC.IO.Device.Stream_closure+2;
         const GHC.IO.Device.RegularFile_closure+3;
         const GHC.IO.Device.RawDevice_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.518220956 UTC

[section ""cstring" . i87v9_str" {
     i87v9_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,68,105,114,101,99,116,111,114,121]
 },
 GHC.IO.Device.Directory_con_entry() //  [R1]
         { []
         }
     {offset
       c87v8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.Directory_con_info" {
     GHC.IO.Device.Directory_con_info:
         const GHC.IO.Device.Directory_con_entry;
         const 4294967296;
         const 3;
         const i87v9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.522100418 UTC

[section ""cstring" . i87vg_str" {
     i87vg_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,83,116,114,101,97,109]
 },
 GHC.IO.Device.Stream_con_entry() //  [R1]
         { []
         }
     {offset
       c87vf: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.Stream_con_info" {
     GHC.IO.Device.Stream_con_info:
         const GHC.IO.Device.Stream_con_entry;
         const 4294967296;
         const 4294967299;
         const i87vg_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.526964522 UTC

[section ""cstring" . i87vn_str" {
     i87vn_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,101,103,117,108,97,114,70,105,108,101]
 },
 GHC.IO.Device.RegularFile_con_entry() //  [R1]
         { []
         }
     {offset
       c87vm: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.RegularFile_con_info" {
     GHC.IO.Device.RegularFile_con_info:
         const GHC.IO.Device.RegularFile_con_entry;
         const 4294967296;
         const 8589934595;
         const i87vn_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.531731271 UTC

[section ""cstring" . i87vu_str" {
     i87vu_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,82,97,119,68,101,118,105,99,101]
 },
 GHC.IO.Device.RawDevice_con_entry() //  [R1]
         { []
         }
     {offset
       c87vt: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.RawDevice_con_info" {
     GHC.IO.Device.RawDevice_con_info:
         const GHC.IO.Device.RawDevice_con_entry;
         const 4294967296;
         const 12884901891;
         const i87vu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.535650862 UTC

[section ""cstring" . i87vB_str" {
     i87vB_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,73,79,68,101,118,105,99,101]
 },
 GHC.IO.Device.C:IODevice_con_entry() //  [R1]
         { []
         }
     {offset
       c87vA: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:IODevice_con_info" {
     GHC.IO.Device.C:IODevice_con_info:
         const GHC.IO.Device.C:IODevice_con_entry;
         const 14;
         const 1;
         const i87vB_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.539481814 UTC

[section ""cstring" . i87vI_str" {
     i87vI_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,68,101,118,105,99,101,46,67,58,82,97,119,73,79]
 },
 GHC.IO.Device.C:RawIO_con_entry() //  [R1]
         { []
         }
     {offset
       c87vH: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Device.C:RawIO_con_info" {
     GHC.IO.Device.C:RawIO_con_info:
         const GHC.IO.Device.C:RawIO_con_entry;
         const 4;
         const 1;
         const i87vI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:03:14.544113034 UTC

[section ""relreadonly" . S861B_srt" {
     S861B_srt:
         const GHC.IO.Device.$fReadSeekMode7_closure;
         const GHC.IO.Device.$fReadSeekMode11_closure;
         const GHC.IO.Device.$fReadSeekMode15_closure;
         const GHC.IO.Device.$w$cshowsPrec_closure;
         const GHC.IO.Device.$fShowSeekMode_$cshow_closure;
         const GHC.Read.choose2_closure;
         const GHC.IO.Device.$fReadSeekMode_sps_closure;
         const GHC.Read.list3_closure;
         const GHC.IO.Device.$fReadSeekMode2_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadsPrec_closure;
         const GHC.Read.list_closure;
         const GHC.IO.Device.$fReadSeekMode1_closure;
         const GHC.IO.Device.$fReadSeekMode_$creadListPrec_closure;
         const GHC.IO.Device.$fReadSeekMode17_closure;
         const GHC.IO.Exception.unsupportedOperation_closure;
         const GHC.IO.Exception.$fxExceptionIOException_closure;
         const GHC.IO.Device.$dmdup1_closure;
         const $dmseek1_r81Zp_closure;
         const $dmtell1_r81Zq_closure;
         const $dmgetSize1_r81Zr_closure;
         const $dmsetSize1_r81Zs_closure;
         const $dmsetEcho1_r81Zt_closure;
         const $dmgetEcho1_r81Zu_closure;
         const $dmsetRaw1_r81Zv_closure;
         const $dmdup3_r81Zw_closure;
         const $dmdup4_r81Zx_closure;
         const GHC.Arr.hopelessIndexError_closure;
         const GHC.IO.Device.$fIxSeekMode_$cindex_closure;
         const GHC.Err.error_closure;
         const lvl13_r81ZL_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cpred_closure;
         const GHC.IO.Device.$fEnumSeekMode4_closure;
         const GHC.IO.Device.$fEnumSeekMode_$csucc_closure;
         const GHC.IO.Device.$fEnumSeekMode5_closure;
         const lvl18_r81ZQ_closure;
         const lvl19_r81ZR_closure;
         const lvl20_r81ZS_closure;
         const GHC.IO.Device.$wlvl_closure;
         const GHC.IO.Device.$fEnumSeekMode_$ctoEnum_closure;
         const GHC.IO.Device.$w$ctoEnum_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFrom_closure;
         const GHC.IO.Device.$fEnumSeekMode1_closure;
         const GHC.IO.Device.$fEnumSeekMode2_closure;
         const GHC.IO.Device.$fEnumSeekMode3_closure;
         const GHC.IO.Device.$fEnumSeekMode_go2_closure;
         const GHC.IO.Device.$fEnumSeekMode_go1_closure;
         const GHC.IO.Device.$fEnumSeekMode_go_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromTo_closure;
         const GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo_closure;
 }]

