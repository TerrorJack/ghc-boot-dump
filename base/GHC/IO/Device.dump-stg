
==================== Pre unarise: ====================
2018-03-16 16:03:08.673222008 UTC

GHC.IO.Device.ready
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLL),U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s820Z]
        case v_s820Z of {
          GHC.IO.Device.C:IODevice v_s8211 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s8211;
        };

GHC.IO.Device.close
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLL),U(A,U,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s821f]
        case v_s821f of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   v_s821i [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s821i;
        };

GHC.IO.Device.isTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLL),U(A,A,U,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s821v]
        case v_s821v of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s821z [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s821z;
        };

GHC.IO.Device.isSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLL),U(A,A,A,U,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s821L]
        case v_s821L of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s821Q [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s821Q;
        };

GHC.IO.Device.seek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLL),U(A,A,A,A,U,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s8221]
        case v_s8221 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s8227 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s8227;
        };

GHC.IO.Device.tell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLL),U(A,A,A,A,A,U,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s822h]
        case v_s822h of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s822o [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s822o;
        };

GHC.IO.Device.getSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLL),U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)>] =
    [] \r [v_s822x]
        case v_s822x of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s822F [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s822F;
        };

GHC.IO.Device.setSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLL),U(A,A,A,A,A,A,A,U,A,A,A,A,A,A)>] =
    [] \r [v_s822N]
        case v_s822N of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s822W [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s822W;
        };

GHC.IO.Device.setEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLL),U(A,A,A,A,A,A,A,A,U,A,A,A,A,A)>] =
    [] \r [v_s8233]
        case v_s8233 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s823d [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s823d;
        };

GHC.IO.Device.getEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLL),U(A,A,A,A,A,A,A,A,A,U,A,A,A,A)>] =
    [] \r [v_s823j]
        case v_s823j of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s823u [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s823u;
        };

GHC.IO.Device.setRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLL),U(A,A,A,A,A,A,A,A,A,A,U,A,A,A)>] =
    [] \r [v_s823z]
        case v_s823z of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s823L [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s823L;
        };

GHC.IO.Device.devType
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.IO.Device.IODeviceType
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLL),U(A,A,A,A,A,A,A,A,A,A,A,U,A,A)>] =
    [] \r [v_s823P]
        case v_s823P of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s8242 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s8242;
        };

GHC.IO.Device.dup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSL),U(A,A,A,A,A,A,A,A,A,A,A,A,U,A)>] =
    [] \r [v_s8245]
        case v_s8245 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s824j [Occ=Once]
                                   _ [Occ=Dead] ->
              v_s824j;
        };

GHC.IO.Device.dup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLS),U(A,A,A,A,A,A,A,A,A,A,A,A,A,U)>] =
    [] \r [v_s824l]
        case v_s824l of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s824A [Occ=Once] ->
              v_s824A;
        };

GHC.IO.Device.read
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s824B]
        case v_s824B of {
          GHC.IO.Device.C:RawIO v_s824D [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s824D;
        };

GHC.IO.Device.readNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s824H]
        case v_s824H of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                v_s824K [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s824K;
        };

GHC.IO.Device.write
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s824N]
        case v_s824N of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s824R [Occ=Once]
                                _ [Occ=Dead] ->
              v_s824R;
        };

GHC.IO.Device.writeNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s824T]
        case v_s824T of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s824Y [Occ=Once] ->
              v_s824Y;
        };

GHC.IO.Device.$fReadSeekMode16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AbsoluteSeek"#;

GHC.IO.Device.$fReadSeekMode15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode16;

GHC.IO.Device.$fReadSeekMode12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RelativeSeek"#;

GHC.IO.Device.$fReadSeekMode11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode12;

GHC.IO.Device.$fReadSeekMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekFromEnd"#;

GHC.IO.Device.$fReadSeekMode7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode8;

GHC.IO.Device.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s824Z w1_s8250]
        case w_s824Z of {
          GHC.IO.Device.AbsoluteSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode15 w1_s8250;
          GHC.IO.Device.RelativeSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode11 w1_s8250;
          GHC.IO.Device.SeekFromEnd ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode7 w1_s8250;
        };

GHC.IO.Device.$fShowSeekMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8252 w1_s8253 w2_s8254]
        GHC.IO.Device.$w$cshowsPrec w1_s8253 w2_s8254;

GHC.IO.Device.$fShowSeekMode_$cshow
  :: GHC.IO.Device.SeekMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8255]
        case x_s8255 of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fReadSeekMode15;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fReadSeekMode11;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fReadSeekMode7;
        };

GHC.IO.Device.$fShowSeekMode_$cshowList
  :: [GHC.IO.Device.SeekMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8257 s_s8258]
        GHC.Show.showList__ GHC.IO.Device.$w$cshowsPrec ls_s8257 s_s8258;

GHC.IO.Device.$fShowSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Device.$fShowSeekMode_$cshowsPrec
                                    GHC.IO.Device.$fShowSeekMode_$cshow
                                    GHC.IO.Device.$fShowSeekMode_$cshowList];

GHC.IO.Device.$fReadSeekMode14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8259 k_s825a] k_s825a GHC.IO.Device.AbsoluteSeek;

GHC.IO.Device.$fReadSeekMode13
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode15
                        GHC.IO.Device.$fReadSeekMode14];

GHC.IO.Device.$fReadSeekMode10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s825b k_s825c] k_s825c GHC.IO.Device.RelativeSeek;

GHC.IO.Device.$fReadSeekMode9
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode11
                        GHC.IO.Device.$fReadSeekMode10];

GHC.IO.Device.$fReadSeekMode6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s825d k_s825e] k_s825e GHC.IO.Device.SeekFromEnd;

GHC.IO.Device.$fReadSeekMode5
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode7
                        GHC.IO.Device.$fReadSeekMode6];

GHC.IO.Device.$fReadSeekMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode5 GHC.Types.[]];

GHC.IO.Device.$fReadSeekMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode9
                      GHC.IO.Device.$fReadSeekMode4];

GHC.IO.Device.$fReadSeekMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode13
                      GHC.IO.Device.$fReadSeekMode3];

GHC.IO.Device.$fReadSeekMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s825f]
        GHC.Read.choose2 GHC.IO.Device.$fReadSeekMode_sps eta_s825f;

GHC.IO.Device.$fReadSeekMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Device.$fReadSeekMode2 eta_B2 eta_B1;

GHC.IO.Device.$fReadSeekMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s825g]
        let {
          sat_s825h [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Device.SeekMode
          [LclId] =
              [n_s825g] \u []
                  GHC.Read.list3
                      GHC.IO.Device.$fReadSeekMode2
                      n_s825g
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s825h;

GHC.IO.Device.$fReadSeekMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Device.$fReadSeekMode1;

GHC.IO.Device.$fReadSeekMode17
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u []
        GHC.IO.Device.$fReadSeekMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Device.$fReadSeekMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Device.$fReadSeekMode17 eta_B1;

GHC.IO.Device.$fReadSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Device.$fReadSeekMode_$creadsPrec
                                    GHC.IO.Device.$fReadSeekMode_$creadList
                                    GHC.IO.Device.$fReadSeekMode1
                                    GHC.IO.Device.$fReadSeekMode_$creadListPrec];

GHC.IO.Device.$fEqSeekMode_$c==
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s825i ds1_s825j]
        case ds_s825i of {
          GHC.IO.Device.AbsoluteSeek ->
              case ds1_s825j of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case ds1_s825j of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case ds1_s825j of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqSeekMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s825o eta1_s825p]
        case eta_s825o of {
          GHC.IO.Device.AbsoluteSeek ->
              case eta1_s825p of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.RelativeSeek ->
              case eta1_s825p of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case eta1_s825p of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqSeekMode_$c==
                                     GHC.IO.Device.$fEqSeekMode_$c/=];

GHC.IO.Device.$fEqIODeviceType_$c==
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s825u ds1_s825v]
        case ds_s825u of {
          GHC.IO.Device.Directory ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Directory -> GHC.Types.True [];
              };
          GHC.IO.Device.Stream ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Stream -> GHC.Types.True [];
              };
          GHC.IO.Device.RegularFile ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RegularFile -> GHC.Types.True [];
              };
          GHC.IO.Device.RawDevice ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RawDevice -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqIODeviceType_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s825B eta1_s825C]
        case eta_s825B of {
          GHC.IO.Device.Directory ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Directory -> GHC.Types.False [];
              };
          GHC.IO.Device.Stream ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Stream -> GHC.Types.False [];
              };
          GHC.IO.Device.RegularFile ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RegularFile -> GHC.Types.False [];
              };
          GHC.IO.Device.RawDevice ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RawDevice -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqIODeviceType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.IODeviceType
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqIODeviceType_$c==
                                     GHC.IO.Device.$fEqIODeviceType_$c/=];

$dmisSeekable1_r81Zn
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s825I ds_s825J s_s825K]
        (#,#) [s_s825K GHC.Types.False];

GHC.IO.Device.$dmisSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmisSeekable1_r81Zn eta_B3 eta_B2 eta_B1;

$dmisTerminal1_r81Zo
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s825L ds_s825M s_s825N]
        (#,#) [s_s825N GHC.Types.False];

GHC.IO.Device.$dmisTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmisTerminal1_r81Zo eta_B3 eta_B2 eta_B1;

GHC.IO.Device.$dmdup1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s825O]
        GHC.IO.throwIO1
            GHC.IO.Exception.$fxExceptionIOException
            GHC.IO.Exception.unsupportedOperation
            eta_s825O;

$dmseek1_r81Zp
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s825P
                    eta1_s825Q
                    eta2_s825R
                    eta3_s825S
                    eta4_s825T]
        GHC.IO.Device.$dmdup1 eta4_s825T;

GHC.IO.Device.$dmseek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        $dmseek1_r81Zp eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

$dmtell1_r81Zq
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s825U eta1_s825V eta2_s825W]
        GHC.IO.Device.$dmdup1 eta2_s825W;

GHC.IO.Device.$dmtell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $dmtell1_r81Zq eta_B3 eta_B2 eta_B1;

$dmgetSize1_r81Zr
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s825X ds_s825Y eta_s825Z]
        GHC.IO.Device.$dmdup1 eta_s825Z;

GHC.IO.Device.$dmgetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmgetSize1_r81Zr eta_B3 eta_B2 eta_B1;

$dmsetSize1_r81Zs
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s8260 eta1_s8261 eta2_s8262 eta3_s8263]
        GHC.IO.Device.$dmdup1 eta3_s8263;

GHC.IO.Device.$dmsetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmsetSize1_r81Zs eta_B4 eta_B3 eta_B2 eta_B1;

$dmsetEcho1_r81Zt
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s8264 eta1_s8265 eta2_s8266 eta3_s8267]
        GHC.IO.Device.$dmdup1 eta3_s8267;

GHC.IO.Device.$dmsetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmsetEcho1_r81Zt eta_B4 eta_B3 eta_B2 eta_B1;

$dmgetEcho1_r81Zu
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s8268 eta1_s8269 eta2_s826a]
        GHC.IO.Device.$dmdup1 eta2_s826a;

GHC.IO.Device.$dmgetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmgetEcho1_r81Zu eta_B3 eta_B2 eta_B1;

$dmsetRaw1_r81Zv
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s826b ds_s826c ds1_s826d eta_s826e]
        GHC.IO.Device.$dmdup1 eta_s826e;

GHC.IO.Device.$dmsetRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmsetRaw1_r81Zv eta_B4 eta_B3 eta_B2 eta_B1;

$dmdup3_r81Zw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s826f eta1_s826g eta2_s826h]
        GHC.IO.Device.$dmdup1 eta2_s826h;

GHC.IO.Device.$dmdup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $dmdup3_r81Zw eta_B3 eta_B2 eta_B1;

$dmdup4_r81Zx
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s826i eta1_s826j eta2_s826k eta3_s826l]
        GHC.IO.Device.$dmdup1 eta3_s826l;

GHC.IO.Device.$dmdup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmdup4_r81Zx eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Device.$fOrdSeekMode_$ccompare
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826m b_s826n]
        case a_s826m of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s826n of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.EQ [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.LT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s826n of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.GT [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.EQ [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s826n of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.EQ [];
              };
        };

GHC.IO.Device.$fOrdSeekMode_$c<
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826s b_s826t]
        case a_s826s of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s826t of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s826t of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s826t of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Device.$fOrdSeekMode_$c<=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826y b_s826z]
        let-no-escape {
          $j_s826A [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [a_s826y] \r [a#_s826B]
                  case a_s826y of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s826B 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s826B 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s826B 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case b_s826z of {
            GHC.IO.Device.AbsoluteSeek -> $j_s826A 0#;
            GHC.IO.Device.RelativeSeek -> $j_s826A 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s826A 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$cmax
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s826H y_s826I]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s826H y_s826I of {
          GHC.Types.False -> x_s826H;
          GHC.Types.True -> y_s826I;
        };

GHC.IO.Device.$fOrdSeekMode_$c>=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826K b_s826L]
        let-no-escape {
          $j_s826M [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s826L] \r [a#_s826N]
                  case b_s826L of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s826N 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s826N 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s826N 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case a_s826K of {
            GHC.IO.Device.AbsoluteSeek -> $j_s826M 0#;
            GHC.IO.Device.RelativeSeek -> $j_s826M 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s826M 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$c>
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826T b_s826U]
        GHC.IO.Device.$fOrdSeekMode_$c< b_s826U a_s826T;

GHC.IO.Device.$fOrdSeekMode_$cmin
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s826V y_s826W]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s826V y_s826W of {
          GHC.Types.False -> y_s826W;
          GHC.Types.True -> x_s826V;
        };

GHC.IO.Device.$fOrdSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Device.$fEqSeekMode
                                      GHC.IO.Device.$fOrdSeekMode_$ccompare
                                      GHC.IO.Device.$fOrdSeekMode_$c<
                                      GHC.IO.Device.$fOrdSeekMode_$c<=
                                      GHC.IO.Device.$fOrdSeekMode_$c>
                                      GHC.IO.Device.$fOrdSeekMode_$c>=
                                      GHC.IO.Device.$fOrdSeekMode_$cmax
                                      GHC.IO.Device.$fOrdSeekMode_$cmin];

GHC.IO.Device.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s826Y w_s826Z]
        case ww_s826Y of {
          GHC.IO.Device.AbsoluteSeek ->
              case w_s826Z of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.RelativeSeek ->
              case w_s826Z of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case w_s826Z of {
                GHC.IO.Device.AbsoluteSeek -> -2#;
                GHC.IO.Device.RelativeSeek -> -1#;
                GHC.IO.Device.SeekFromEnd -> 0#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s8274 w1_s8275]
        case w_s8274 of {
          (,) ww1_s8277 [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.Device.$w$cunsafeIndex ww1_s8277 w1_s8275
              of
              ww3_s8279
              { __DEFAULT -> GHC.Types.I# [ww3_s8279];
              };
        };

GHC.IO.Device.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s827a ww1_s827b w_s827c]
        let-no-escape {
          $j_s827d [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s827b w_s827c] \r [a#_s827e]
                  let-no-escape {
                    $j1_s827f [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s827c a#_s827e] \r [b#_s827g]
                            case w_s827c of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [0# a#_s827e] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s827g] of sat_s827j {
                                          __DEFAULT -> tagToEnum# [sat_s827j];
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [1# a#_s827e] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s827g] of sat_s827l {
                                          __DEFAULT -> tagToEnum# [sat_s827l];
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [2# a#_s827e] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s827g] of sat_s827n {
                                          __DEFAULT -> tagToEnum# [sat_s827n];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s827b of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s827f 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s827f 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s827f 2#;
                    };
        } in 
          case ww_s827a of {
            GHC.IO.Device.AbsoluteSeek -> $j_s827d 0#;
            GHC.IO.Device.RelativeSeek -> $j_s827d 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s827d 2#;
          };

GHC.IO.Device.$fIxSeekMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s827q w1_s827r]
        case w_s827q of {
          (,) ww1_s827t [Occ=Once] ww2_s827u [Occ=Once] ->
              GHC.IO.Device.$w$cinRange ww1_s827t ww2_s827u w1_s827r;
        };

lvl_r81Zy :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r81Zz :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r81ZA :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

GHC.IO.Device.$fEnumSeekMode_$cfromEnum
  :: GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s827v]
        case a_s827v of {
          GHC.IO.Device.AbsoluteSeek -> lvl_r81Zy;
          GHC.IO.Device.RelativeSeek -> lvl1_r81Zz;
          GHC.IO.Device.SeekFromEnd -> lvl2_r81ZA;
        };

GHC.IO.Device.$fIxSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s827x]
        let {
          sat_s827B [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s827x] \u []
                  case x_s827x of wild_s827z {
                    __DEFAULT ->
                        case +# [wild_s827z 1#] of sat_s827A {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 sat_s827A;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s827y [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s827x] \u [] tagToEnum# [x_s827x];
        } in  : [sat_s827y sat_s827B];

GHC.IO.Device.$fIxSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s827C]
        let {
          sat_s827G [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s827C] \u []
                  case x_s827C of wild_s827E {
                    __DEFAULT ->
                        case +# [wild_s827E 1#] of sat_s827F {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go sat_s827F;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s827D [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s827C] \u [] tagToEnum# [x_s827C];
        } in  : [sat_s827D sat_s827G];

GHC.IO.Device.$fEnumSeekMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s827H]
        let {
          sat_s827L [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s827H] \u []
                  case x_s827H of wild_s827J {
                    __DEFAULT ->
                        case +# [wild_s827J 1#] of sat_s827K {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 sat_s827K;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s827I [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s827H] \u [] tagToEnum# [x_s827H];
        } in  : [sat_s827I sat_s827L];

GHC.IO.Device.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s827M ww1_s827N]
        let-no-escape {
          $j_s827O [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s827N] \r [a#_s827P]
                  case ww1_s827N of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [a#_s827P 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 a#_s827P;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [a#_s827P 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go a#_s827P;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [a#_s827P 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 a#_s827P;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s827M of {
            GHC.IO.Device.AbsoluteSeek -> $j_s827O 0#;
            GHC.IO.Device.RelativeSeek -> $j_s827O 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s827O 2#;
          };

GHC.IO.Device.$fIxSeekMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s827V]
        case w_s827V of {
          (,) ww1_s827X [Occ=Once] ww2_s827Y [Occ=Once] ->
              GHC.IO.Device.$w$crange ww1_s827X ww2_s827Y;
        };

GHC.IO.Device.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s827Z ww1_s8280]
        case GHC.IO.Device.$w$cinRange ww_s827Z ww1_s8280 ww1_s8280 of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s827Z of {
                GHC.IO.Device.AbsoluteSeek ->
                    case ww1_s8280 of {
                      GHC.IO.Device.AbsoluteSeek -> 1#;
                      GHC.IO.Device.RelativeSeek -> 2#;
                      GHC.IO.Device.SeekFromEnd -> 3#;
                    };
                GHC.IO.Device.RelativeSeek ->
                    case ww1_s8280 of {
                      GHC.IO.Device.AbsoluteSeek -> 0#;
                      GHC.IO.Device.RelativeSeek -> 1#;
                      GHC.IO.Device.SeekFromEnd -> 2#;
                    };
                GHC.IO.Device.SeekFromEnd ->
                    case ww1_s8280 of {
                      GHC.IO.Device.AbsoluteSeek -> -1#;
                      GHC.IO.Device.RelativeSeek -> 0#;
                      GHC.IO.Device.SeekFromEnd -> 1#;
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s8286]
        case w_s8286 of {
          (,) ww1_s8288 [Occ=Once] ww2_s8289 [Occ=Once] ->
              case GHC.IO.Device.$w$crangeSize ww1_s8288 ww2_s8289 of ww3_s828a {
                __DEFAULT -> GHC.Types.I# [ww3_s828a];
              };
        };

GHC.IO.Device.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s828b ww1_s828c]
        case ww_s828b of {
          GHC.IO.Device.AbsoluteSeek ->
              case ww1_s828c of {
                GHC.IO.Device.AbsoluteSeek -> 1#;
                GHC.IO.Device.RelativeSeek -> 2#;
                GHC.IO.Device.SeekFromEnd -> 3#;
              };
          GHC.IO.Device.RelativeSeek ->
              case ww1_s828c of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case ww1_s828c of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s828h]
        case w_s828h of {
          (,) ww1_s828j [Occ=Once] ww2_s828k [Occ=Once] ->
              case
                  GHC.IO.Device.$w$cunsafeRangeSize ww1_s828j ww2_s828k
              of
              ww3_s828l
              { __DEFAULT -> GHC.Types.I# [ww3_s828l];
              };
        };

GHC.IO.Device.$fIxSeekMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s828m eta1_s828n]
        case eta_s828m of {
          (,) ww1_s828p ww2_s828q [Occ=Once] ->
              case GHC.IO.Device.$w$cinRange ww1_s828p ww2_s828q eta1_s828n of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.Device.$w$cunsafeIndex ww1_s828p eta1_s828n
                    of
                    ww3_s828s
                    { __DEFAULT -> GHC.Types.I# [ww3_s828s];
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.Device.$fOrdSeekMode
                                 GHC.IO.Device.$fIxSeekMode_$crange
                                 GHC.IO.Device.$fIxSeekMode_$cindex
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex
                                 GHC.IO.Device.$fIxSeekMode_$cinRange
                                 GHC.IO.Device.$fIxSeekMode_$crangeSize
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize];

lvl3_r81ZB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl4_r81ZC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_r81ZB;

GHC.IO.Device.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl5_r81ZD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule4;

GHC.IO.Device.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Device"#;

lvl6_r81ZE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule2;

lvl7_r81ZF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Device.hs"#;

lvl8_r81ZG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl7_r81ZF;

lvl9_r81ZH :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [173#];

lvl10_r81ZI :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl11_r81ZJ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl12_r81ZK :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl5_r81ZD
                                           lvl6_r81ZE
                                           lvl8_r81ZG
                                           lvl9_r81ZH
                                           lvl10_r81ZI
                                           lvl9_r81ZH
                                           lvl11_r81ZJ];

lvl13_r81ZL :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl4_r81ZC
                                                  lvl12_r81ZK
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r81ZM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{SeekMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode4 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r81ZM of sat_s828t {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s828t;
        };

GHC.IO.Device.$fEnumSeekMode_$cpred
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s828u]
        case a_s828u of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode4;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.AbsoluteSeek [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.RelativeSeek [];
        };

lvl15_r81ZN :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{SeekMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode5 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r81ZN of sat_s828w {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s828w;
        };

GHC.IO.Device.$fEnumSeekMode_$csucc
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s828x]
        case a_s828x of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.RelativeSeek [];
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.SeekFromEnd [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode5;
        };

lvl16_r81ZO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r81ZP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r81ZQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r81ZP;

lvl19_r81ZR :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 2# lvl18_r81ZQ of {
          (#,#) ww5_s828A [Occ=Once] ww6_s828B [Occ=Once] ->
              : [ww5_s828A ww6_s828B];
        };

lvl20_r81ZS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r81ZO lvl19_r81ZR;

lvl21_r81ZT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{SeekMode}: tag ("#;

GHC.IO.Device.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s828C]
        let {
          sat_s828G [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s828C] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s828C lvl20_r81ZS of {
                    (#,#) ww5_s828E [Occ=Once] ww6_s828F [Occ=Once] ->
                        : [ww5_s828E ww6_s828F];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r81ZT sat_s828G
          of
          sat_s828H
          { __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s828H;
          };

GHC.IO.Device.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s828I]
        case >=# [ww_s828I 0#] of {
          __DEFAULT -> GHC.IO.Device.$wlvl ww_s828I;
          1# ->
              case <=# [ww_s828I 2#] of {
                __DEFAULT -> GHC.IO.Device.$wlvl ww_s828I;
                1# -> tagToEnum# [ww_s828I];
              };
        };

GHC.IO.Device.$fEnumSeekMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s828L]
        case w_s828L of {
          GHC.Types.I# ww1_s828N [Occ=Once] ->
              GHC.IO.Device.$w$ctoEnum ww1_s828N;
        };

GHC.IO.Device.$fEnumSeekMode3 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 0#;

GHC.IO.Device.$fEnumSeekMode2 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 1#;

GHC.IO.Device.$fEnumSeekMode1 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 2#;

GHC.IO.Device.$fEnumSeekMode_$cenumFrom
  :: GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s828O]
        case a_s828O of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode3;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fEnumSeekMode2;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode1;
        };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s828Q b_s828R]
        let-no-escape {
          $j_s828S [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s828R] \r [a#_s828T]
                  let-no-escape {
                    $j1_s828U [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s828T] \r [b#_s828V]
                            case ># [a#_s828T b#_s828V] of {
                              __DEFAULT ->
                                  case >=# [b#_s828V a#_s828T] of {
                                    __DEFAULT ->
                                        case ># [2# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s8299 [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s8290 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s8290]
                                                              of
                                                              y'_s8291 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s8292 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s8290
                                                                                    y'_s8291
                                                                                    go_dn_s8292] \r [x_s8293]
                                                                              case
                                                                                  <# [x_s8293
                                                                                      y'_s8291]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s8297 [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s8290
                                                                                           go_dn_s8292
                                                                                           x_s8293] \u []
                                                                                              case
                                                                                                  +# [x_s8293
                                                                                                      delta_s8290]
                                                                                              of
                                                                                              sat_s8296
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s8292
                                                                                                        sat_s8296;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s8295 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s8293] \u []
                                                                                              tagToEnum# [x_s8293];
                                                                                    } in 
                                                                                      : [sat_s8295
                                                                                         sat_s8297];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s8298 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s8293] \u []
                                                                                              tagToEnum# [x_s8293];
                                                                                    } in 
                                                                                      : [sat_s8298
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s8292 b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s828Z [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s828Z sat_s8299];
                                          1# ->
                                              case ># [2# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829b [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829b GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s829n [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s829e [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s829e]
                                                              of
                                                              y'_s829f [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s829g [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s829e
                                                                                    y'_s829f
                                                                                    go_up_s829g] \r [x_s829h]
                                                                              case
                                                                                  ># [x_s829h
                                                                                      y'_s829f]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s829l [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s829e
                                                                                           go_up_s829g
                                                                                           x_s829h] \u []
                                                                                              case
                                                                                                  +# [x_s829h
                                                                                                      delta_s829e]
                                                                                              of
                                                                                              sat_s829k
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s829g
                                                                                                        sat_s829k;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s829j [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829h] \u []
                                                                                              tagToEnum# [x_s829h];
                                                                                    } in 
                                                                                      : [sat_s829j
                                                                                         sat_s829l];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s829m [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829h] \u []
                                                                                              tagToEnum# [x_s829h];
                                                                                    } in 
                                                                                      : [sat_s829m
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s829g b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s829d [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s829d sat_s829n];
                                          1# ->
                                              case <# [2# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829p [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829p GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s828V a#_s828T] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s829C [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s829t [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s829t]
                                                              of
                                                              y'_s829u [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s829v [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s829t
                                                                                    y'_s829u
                                                                                    go_dn_s829v] \r [x_s829w]
                                                                              case
                                                                                  <# [x_s829w
                                                                                      y'_s829u]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s829A [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s829t
                                                                                           go_dn_s829v
                                                                                           x_s829w] \u []
                                                                                              case
                                                                                                  +# [x_s829w
                                                                                                      delta_s829t]
                                                                                              of
                                                                                              sat_s829z
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s829v
                                                                                                        sat_s829z;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s829y [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829w] \u []
                                                                                              tagToEnum# [x_s829w];
                                                                                    } in 
                                                                                      : [sat_s829y
                                                                                         sat_s829A];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s829B [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829w] \u []
                                                                                              tagToEnum# [x_s829w];
                                                                                    } in 
                                                                                      : [sat_s829B
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s829v b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s829s [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s829s sat_s829C];
                                          1# ->
                                              case ># [0# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829E [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829E GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s829Q [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s829H [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s829H]
                                                              of
                                                              y'_s829I [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s829J [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s829H
                                                                                    y'_s829I
                                                                                    go_up_s829J] \r [x_s829K]
                                                                              case
                                                                                  ># [x_s829K
                                                                                      y'_s829I]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s829O [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s829H
                                                                                           go_up_s829J
                                                                                           x_s829K] \u []
                                                                                              case
                                                                                                  +# [x_s829K
                                                                                                      delta_s829H]
                                                                                              of
                                                                                              sat_s829N
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s829J
                                                                                                        sat_s829N;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s829M [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829K] \u []
                                                                                              tagToEnum# [x_s829K];
                                                                                    } in 
                                                                                      : [sat_s829M
                                                                                         sat_s829O];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s829P [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829K] \u []
                                                                                              tagToEnum# [x_s829K];
                                                                                    } in 
                                                                                      : [sat_s829P
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s829J b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s829G [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s829G sat_s829Q];
                                          1# ->
                                              case <# [0# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829S [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829S GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s828R of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s828U 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s828U 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s828U 2#;
                    };
        } in 
          case a_s828Q of {
            GHC.IO.Device.AbsoluteSeek -> $j_s828S 0#;
            GHC.IO.Device.RelativeSeek -> $j_s828S 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s828S 2#;
          };

GHC.IO.Device.$fEnumSeekMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s829V]
        let {
          sat_s82a1 [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s829V] \u []
                  case x_s829V of wild_s829Z {
                    __DEFAULT ->
                        case +# [wild_s829Z 1#] of sat_s82a0 {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 sat_s82a0;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s829Y [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s829V] \u []
                  case >=# [x_s829V 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s829V;
                    1# ->
                        case <=# [x_s829V 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s829V;
                          1# -> tagToEnum# [x_s829V];
                        };
                  };
        } in  : [sat_s829Y sat_s82a1];

GHC.IO.Device.$fEnumSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s82a2]
        let {
          sat_s82a8 [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s82a2] \u []
                  case x_s82a2 of wild_s82a6 {
                    __DEFAULT ->
                        case +# [wild_s82a6 1#] of sat_s82a7 {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 sat_s82a7;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s82a5 [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s82a2] \u []
                  case >=# [x_s82a2 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s82a2;
                    1# ->
                        case <=# [x_s82a2 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s82a2;
                          1# -> tagToEnum# [x_s82a2];
                        };
                  };
        } in  : [sat_s82a5 sat_s82a8];

GHC.IO.Device.$fEnumSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s82a9]
        let {
          sat_s82af [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s82a9] \u []
                  case x_s82a9 of wild_s82ad {
                    __DEFAULT ->
                        case +# [wild_s82ad 1#] of sat_s82ae {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go sat_s82ae;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s82ac [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s82a9] \u []
                  case >=# [x_s82a9 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s82a9;
                    1# ->
                        case <=# [x_s82a9 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s82a9;
                          1# -> tagToEnum# [x_s82a9];
                        };
                  };
        } in  : [sat_s82ac sat_s82af];

GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s82ag y_s82ah]
        let-no-escape {
          $j_s82ai [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s82ah] \r [x1_s82aj]
                  case y_s82ah of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [x1_s82aj 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 x1_s82aj;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [x1_s82aj 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 x1_s82aj;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [x1_s82aj 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go x1_s82aj;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s82ag of {
            GHC.IO.Device.AbsoluteSeek -> $j_s82ai 0#;
            GHC.IO.Device.RelativeSeek -> $j_s82ai 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s82ai 2#;
          };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> [GHC.IO.Device.SeekMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s82ap x2_s82aq y_s82ar]
        let-no-escape {
          $j_s82as [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s82aq y_s82ar] \r [x4_s82at]
                  let-no-escape {
                    $j1_s82au [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s82ar x4_s82at] \r [x5_s82av]
                            case y_s82ar of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [x5_s82av x4_s82at] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82aP [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82aC [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s82aC]
                                                              of
                                                              y'_s82aD [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s82aE [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82aC
                                                                                    y'_s82aD
                                                                                    go_dn_s82aE] \r [x_s82aF]
                                                                              case
                                                                                  <# [x_s82aF
                                                                                      y'_s82aD]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82aL [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82aC
                                                                                           go_dn_s82aE
                                                                                           x_s82aF] \u []
                                                                                              case
                                                                                                  +# [x_s82aF
                                                                                                      delta_s82aC]
                                                                                              of
                                                                                              sat_s82aK
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s82aE
                                                                                                        sat_s82aK;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82aJ [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82aF] \u []
                                                                                              case
                                                                                                  >=# [x_s82aF
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82aF;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82aF
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82aF;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82aF];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82aJ
                                                                                         sat_s82aL];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82aO [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82aF] \u []
                                                                                              case
                                                                                                  >=# [x_s82aF
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82aF;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82aF
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82aF;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82aF];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82aO
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s82aE x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82aB [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82aB sat_s82aP];
                                          1# ->
                                              case ># [0# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82aT [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82aT GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82bb [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82aY [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s82aY]
                                                              of
                                                              y'_s82aZ [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s82b0 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82aY
                                                                                    y'_s82aZ
                                                                                    go_up_s82b0] \r [x_s82b1]
                                                                              case
                                                                                  ># [x_s82b1
                                                                                      y'_s82aZ]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82b7 [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82aY
                                                                                           go_up_s82b0
                                                                                           x_s82b1] \u []
                                                                                              case
                                                                                                  +# [x_s82b1
                                                                                                      delta_s82aY]
                                                                                              of
                                                                                              sat_s82b6
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s82b0
                                                                                                        sat_s82b6;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82b5 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82b1] \u []
                                                                                              case
                                                                                                  >=# [x_s82b1
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82b1;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82b1
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82b1;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82b1];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82b5
                                                                                         sat_s82b7];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82ba [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82b1] \u []
                                                                                              case
                                                                                                  >=# [x_s82b1
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82b1;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82b1
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82b1;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82b1];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82ba
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s82b0 x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82aX [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82aX sat_s82bb];
                                          1# ->
                                              case <# [0# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82bf [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82bf GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [x5_s82av x4_s82at] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82by [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82bl [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s82bl]
                                                              of
                                                              y'_s82bm [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s82bn [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82bl
                                                                                    y'_s82bm
                                                                                    go_dn_s82bn] \r [x_s82bo]
                                                                              case
                                                                                  <# [x_s82bo
                                                                                      y'_s82bm]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82bu [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82bl
                                                                                           go_dn_s82bn
                                                                                           x_s82bo] \u []
                                                                                              case
                                                                                                  +# [x_s82bo
                                                                                                      delta_s82bl]
                                                                                              of
                                                                                              sat_s82bt
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s82bn
                                                                                                        sat_s82bt;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82bs [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bo] \u []
                                                                                              case
                                                                                                  >=# [x_s82bo
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bo;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bo
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bo;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bo];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bs
                                                                                         sat_s82bu];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82bx [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bo] \u []
                                                                                              case
                                                                                                  >=# [x_s82bo
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bo;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bo
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bo;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bo];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bx
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s82bn x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82bk [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82bk sat_s82by];
                                          1# ->
                                              case ># [1# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82bC [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82bC GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82bU [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82bH [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s82bH]
                                                              of
                                                              y'_s82bI [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s82bJ [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82bH
                                                                                    y'_s82bI
                                                                                    go_up_s82bJ] \r [x_s82bK]
                                                                              case
                                                                                  ># [x_s82bK
                                                                                      y'_s82bI]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82bQ [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82bH
                                                                                           go_up_s82bJ
                                                                                           x_s82bK] \u []
                                                                                              case
                                                                                                  +# [x_s82bK
                                                                                                      delta_s82bH]
                                                                                              of
                                                                                              sat_s82bP
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s82bJ
                                                                                                        sat_s82bP;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82bO [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bK] \u []
                                                                                              case
                                                                                                  >=# [x_s82bK
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bK;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bK
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bK;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bK];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bO
                                                                                         sat_s82bQ];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82bT [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bK] \u []
                                                                                              case
                                                                                                  >=# [x_s82bK
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bK;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bK
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bK;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bK];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bT
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s82bJ x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82bG [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82bG sat_s82bU];
                                          1# ->
                                              case <# [1# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82bY [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82bY GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [x5_s82av x4_s82at] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82ch [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82c4 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s82c4]
                                                              of
                                                              y'_s82c5 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s82c6 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82c4
                                                                                    y'_s82c5
                                                                                    go_dn_s82c6] \r [x_s82c7]
                                                                              case
                                                                                  <# [x_s82c7
                                                                                      y'_s82c5]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82cd [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82c4
                                                                                           go_dn_s82c6
                                                                                           x_s82c7] \u []
                                                                                              case
                                                                                                  +# [x_s82c7
                                                                                                      delta_s82c4]
                                                                                              of
                                                                                              sat_s82cc
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s82c6
                                                                                                        sat_s82cc;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82cb [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82c7] \u []
                                                                                              case
                                                                                                  >=# [x_s82c7
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82c7;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82c7
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82c7;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82c7];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cb
                                                                                         sat_s82cd];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82cg [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82c7] \u []
                                                                                              case
                                                                                                  >=# [x_s82c7
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82c7;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82c7
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82c7;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82c7];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cg
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s82c6 x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82c3 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82c3 sat_s82ch];
                                          1# ->
                                              case ># [2# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82cl [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82cl GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82cD [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82cq [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s82cq]
                                                              of
                                                              y'_s82cr [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s82cs [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82cq
                                                                                    y'_s82cr
                                                                                    go_up_s82cs] \r [x_s82ct]
                                                                              case
                                                                                  ># [x_s82ct
                                                                                      y'_s82cr]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82cz [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82cq
                                                                                           go_up_s82cs
                                                                                           x_s82ct] \u []
                                                                                              case
                                                                                                  +# [x_s82ct
                                                                                                      delta_s82cq]
                                                                                              of
                                                                                              sat_s82cy
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s82cs
                                                                                                        sat_s82cy;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82cx [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82ct] \u []
                                                                                              case
                                                                                                  >=# [x_s82ct
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82ct;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82ct
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82ct;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82ct];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cx
                                                                                         sat_s82cz];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82cC [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82ct] \u []
                                                                                              case
                                                                                                  >=# [x_s82ct
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82ct;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82ct
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82ct;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82ct];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cC
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s82cs x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82cp [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82cp sat_s82cD];
                                          1# ->
                                              case <# [2# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82cH [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82cH GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s82aq of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s82au 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s82au 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s82au 2#;
                    };
        } in 
          case x1_s82ap of {
            GHC.IO.Device.AbsoluteSeek -> $j_s82as 0#;
            GHC.IO.Device.RelativeSeek -> $j_s82as 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s82as 2#;
          };

GHC.IO.Device.$fEnumSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.Device.$fEnumSeekMode_$csucc
                                    GHC.IO.Device.$fEnumSeekMode_$cpred
                                    GHC.IO.Device.$fEnumSeekMode_$ctoEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cfromEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFrom
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo];

GHC.IO.Device.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule4];

GHC.IO.Device.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule2];

GHC.IO.Device.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Device.$trModule3
                                     GHC.IO.Device.$trModule1];

$krep_r81ZU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep1_r81ZV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep2_r81ZW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep3_r81ZX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep4_r81ZY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep5_r81ZZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep6_r8200 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r81ZX GHC.Types.[]];

$krep7_r8201 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep6_r8200];

$krep8_r8202 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r81ZV GHC.Types.[]];

$krep9_r8203 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r8202];

$krep10_r8204 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r81ZW GHC.Types.[]];

$krep11_r8205 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep10_r8204];

$krep12_r8206 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r81ZY GHC.Types.[]];

$krep13_r8207 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r8206];

$krep14_r8208 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8200];

$krep15_r8209 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r8208 GHC.Types.[]];

$krep16_r820a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep15_r8209];

$krep17_r820b :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r81ZU GHC.Types.[]];

$krep18_r820c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep17_r820b];

$krep19_r820d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep11_r8205];

$krep20_r820e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep7_r8201];

$krep21_r820f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep13_r8207];

$krep22_r820g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep16_r820a];

$krep23_r820h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep11_r8205];

$krep24_r820i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep21_r820f];

$krep25_r820j :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r81ZV $krep11_r8205];

$krep26_r820k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep19_r820d];

$krep27_r820l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep20_r820e];

$krep28_r820m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep22_r820g];

GHC.IO.Device.$tcIODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep5_r81ZZ];

$krep29_r820n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep30_r820o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep28_r820m];

$krep31_r820p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep27_r820l];

$krep32_r820q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep26_r820k];

$krep33_r820r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep25_r820j];

$krep34_r820s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep24_r820i];

$krep35_r820t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep23_r820h];

$krep36_r820u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep11_r8205];

$krep37_r820v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep13_r8207];

$krep38_r820w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep9_r8203];

$krep39_r820x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep29_r820n GHC.Types.[]];

$krep40_r820y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep39_r820x];

$krep41_r820z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep40_r820y];

$krep42_r820A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep41_r820z];

GHC.IO.Device.$tcRawIO2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RawIO"#;

GHC.IO.Device.$tcRawIO1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcRawIO2];

GHC.IO.Device.$tcRawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15458836890887680490##
                                    11407217875184880147##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcRawIO1
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep43_r820B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcRawIO
                                              $krep39_r820x];

$krep44_r820C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep43_r820B];

$krep45_r820D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep32_r820q $krep44_r820C];

$krep46_r820E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep30_r820o $krep45_r820D];

GHC.IO.Device.$tc'C:RawIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep46_r820E];

GHC.IO.Device.$tc'C:RawIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:RawIO"#;

GHC.IO.Device.$tc'C:RawIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:RawIO3];

GHC.IO.Device.$tc'C:RawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6403037956050298954##
                                    14520964482680400738##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:RawIO2
                                    1#
                                    GHC.IO.Device.$tc'C:RawIO1];

GHC.IO.Device.$tcIODeviceType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODeviceType"#;

GHC.IO.Device.$tcIODeviceType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODeviceType2];

GHC.IO.Device.$tcIODeviceType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4175968526489202383##
                                    17718566430225243048##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODeviceType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'Directory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODeviceType
                                              GHC.Types.[]];

GHC.IO.Device.$tc'Directory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Directory"#;

GHC.IO.Device.$tc'Directory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Directory3];

GHC.IO.Device.$tc'Directory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12008838926528382233##
                                    639950492613404225##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Directory2
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'Stream2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Stream"#;

GHC.IO.Device.$tc'Stream1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Stream2];

GHC.IO.Device.$tc'Stream :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [39573928359804366##
                                    741010449601335383##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Stream1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RegularFile2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RegularFile"#;

GHC.IO.Device.$tc'RegularFile1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RegularFile2];

GHC.IO.Device.$tc'RegularFile :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2184574052715259025##
                                    14349593064521146856##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RegularFile1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RawDevice2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RawDevice"#;

GHC.IO.Device.$tc'RawDevice1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RawDevice2];

GHC.IO.Device.$tc'RawDevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13599710032796319976##
                                    8789152980205417013##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RawDevice1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

$krep47_r820F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$tc'Directory1 GHC.Types.[]];

$krep48_r820G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep47_r820F];

$krep49_r820H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep48_r820G];

GHC.IO.Device.$tcSeekMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekMode"#;

GHC.IO.Device.$tcSeekMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcSeekMode2];

GHC.IO.Device.$tcSeekMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17698211299654630015##
                                    5588778824401988676##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcSeekMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'AbsoluteSeek1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcSeekMode
                                              GHC.Types.[]];

GHC.IO.Device.$tc'AbsoluteSeek3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AbsoluteSeek"#;

GHC.IO.Device.$tc'AbsoluteSeek2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'AbsoluteSeek3];

GHC.IO.Device.$tc'AbsoluteSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5610789579148926753##
                                    3433733041722086784##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'AbsoluteSeek2
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'RelativeSeek2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RelativeSeek"#;

GHC.IO.Device.$tc'RelativeSeek1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RelativeSeek2];

GHC.IO.Device.$tc'RelativeSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15906895381304752726##
                                    1738065871578000433##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RelativeSeek1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'SeekFromEnd2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SeekFromEnd"#;

GHC.IO.Device.$tc'SeekFromEnd1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'SeekFromEnd2];

GHC.IO.Device.$tc'SeekFromEnd :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16344961357916628519##
                                    5039033320700315004##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'SeekFromEnd1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

$krep50_r820I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Device.$tc'AbsoluteSeek1
                                         $krep25_r820j];

$krep51_r820J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep50_r820I];

GHC.IO.Device.$tcIODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODevice"#;

GHC.IO.Device.$tcIODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODevice3];

GHC.IO.Device.$tcIODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4764642859795697036##
                                    7163668738257247953##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODevice2
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep52_r820K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep39_r820x];

$krep53_r820L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep42_r820A $krep52_r820K];

$krep54_r820M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r820z $krep53_r820L];

$krep55_r820N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep49_r820H $krep54_r820M];

$krep56_r820O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep55_r820N];

$krep57_r820P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep56_r820O];

$krep58_r820Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep57_r820P];

$krep59_r820R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep33_r820r $krep58_r820Q];

$krep60_r820S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep59_r820R];

$krep61_r820T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep60_r820S];

$krep62_r820U :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep51_r820J $krep61_r820T];

$krep63_r820V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep62_r820U];

$krep64_r820W :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep63_r820V];

$krep65_r820X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep36_r820u $krep64_r820W];

GHC.IO.Device.$tc'C:IODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r820s $krep65_r820X];

GHC.IO.Device.$tc'C:IODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IODevice"#;

GHC.IO.Device.$tc'C:IODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:IODevice3];

GHC.IO.Device.$tc'C:IODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15352604720075066134##
                                    14084350618605203122##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:IODevice2
                                    1#
                                    GHC.IO.Device.$tc'C:IODevice1];

GHC.IO.Device.AbsoluteSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.AbsoluteSeek! [];

GHC.IO.Device.RelativeSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RelativeSeek! [];

GHC.IO.Device.SeekFromEnd :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.SeekFromEnd! [];

GHC.IO.Device.Directory :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Directory! [];

GHC.IO.Device.Stream :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Stream! [];

GHC.IO.Device.RegularFile :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RegularFile! [];

GHC.IO.Device.RawDevice :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RawDevice! [];

GHC.IO.Device.C:IODevice
  :: forall a.
     (a
      -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a
         -> GHC.IO.Device.SeekMode
         -> GHC.Integer.Type.Integer
         -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Integer.Type.Integer -> GHC.Types.IO ())
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.IO.Device.IODeviceType)
     -> (a -> GHC.Types.IO a)
     -> (a -> a -> GHC.Types.IO a)
     -> GHC.IO.Device.IODevice a
[GblId[DataCon],
 Arity=14,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Device.C:IODevice [eta_Be
                                  eta_Bd
                                  eta_Bc
                                  eta_Bb
                                  eta_Ba
                                  eta_B9
                                  eta_B8
                                  eta_B7
                                  eta_B6
                                  eta_B5
                                  eta_B4
                                  eta_B3
                                  eta_B2
                                  eta_B1];

GHC.IO.Device.C:RawIO
  :: forall a.
     (a
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Types.Int
      -> GHC.Types.IO GHC.Types.Int)
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int))
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ())
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO GHC.Types.Int)
     -> GHC.IO.Device.RawIO a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Device.C:RawIO [eta_B4 eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:03:08.724148969 UTC

GHC.IO.Device.ready
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLL),U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s820Z]
        case v_s820Z of {
          GHC.IO.Device.C:IODevice v_s8211 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s8211;
        };

GHC.IO.Device.close
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLL),U(A,U,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s821f]
        case v_s821f of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   v_s821i [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s821i;
        };

GHC.IO.Device.isTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLL),U(A,A,U,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s821v]
        case v_s821v of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s821z [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s821z;
        };

GHC.IO.Device.isSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLL),U(A,A,A,U,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s821L]
        case v_s821L of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s821Q [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s821Q;
        };

GHC.IO.Device.seek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLL),U(A,A,A,A,U,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s8221]
        case v_s8221 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s8227 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s8227;
        };

GHC.IO.Device.tell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLL),U(A,A,A,A,A,U,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s822h]
        case v_s822h of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s822o [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s822o;
        };

GHC.IO.Device.getSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLL),U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)>] =
    [] \r [v_s822x]
        case v_s822x of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s822F [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s822F;
        };

GHC.IO.Device.setSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLL),U(A,A,A,A,A,A,A,U,A,A,A,A,A,A)>] =
    [] \r [v_s822N]
        case v_s822N of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s822W [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s822W;
        };

GHC.IO.Device.setEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLL),U(A,A,A,A,A,A,A,A,U,A,A,A,A,A)>] =
    [] \r [v_s8233]
        case v_s8233 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s823d [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s823d;
        };

GHC.IO.Device.getEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLL),U(A,A,A,A,A,A,A,A,A,U,A,A,A,A)>] =
    [] \r [v_s823j]
        case v_s823j of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s823u [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s823u;
        };

GHC.IO.Device.setRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLL),U(A,A,A,A,A,A,A,A,A,A,U,A,A,A)>] =
    [] \r [v_s823z]
        case v_s823z of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s823L [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s823L;
        };

GHC.IO.Device.devType
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.IO.Device.IODeviceType
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLL),U(A,A,A,A,A,A,A,A,A,A,A,U,A,A)>] =
    [] \r [v_s823P]
        case v_s823P of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s8242 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s8242;
        };

GHC.IO.Device.dup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSL),U(A,A,A,A,A,A,A,A,A,A,A,A,U,A)>] =
    [] \r [v_s8245]
        case v_s8245 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s824j [Occ=Once]
                                   _ [Occ=Dead] ->
              v_s824j;
        };

GHC.IO.Device.dup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLS),U(A,A,A,A,A,A,A,A,A,A,A,A,A,U)>] =
    [] \r [v_s824l]
        case v_s824l of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s824A [Occ=Once] ->
              v_s824A;
        };

GHC.IO.Device.read
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s824B]
        case v_s824B of {
          GHC.IO.Device.C:RawIO v_s824D [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s824D;
        };

GHC.IO.Device.readNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s824H]
        case v_s824H of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                v_s824K [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s824K;
        };

GHC.IO.Device.write
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s824N]
        case v_s824N of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s824R [Occ=Once]
                                _ [Occ=Dead] ->
              v_s824R;
        };

GHC.IO.Device.writeNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s824T]
        case v_s824T of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s824Y [Occ=Once] ->
              v_s824Y;
        };

GHC.IO.Device.$fReadSeekMode16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AbsoluteSeek"#;

GHC.IO.Device.$fReadSeekMode15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode16;

GHC.IO.Device.$fReadSeekMode12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RelativeSeek"#;

GHC.IO.Device.$fReadSeekMode11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode12;

GHC.IO.Device.$fReadSeekMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekFromEnd"#;

GHC.IO.Device.$fReadSeekMode7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode8;

GHC.IO.Device.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s824Z w1_s8250]
        case w_s824Z of {
          GHC.IO.Device.AbsoluteSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode15 w1_s8250;
          GHC.IO.Device.RelativeSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode11 w1_s8250;
          GHC.IO.Device.SeekFromEnd ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode7 w1_s8250;
        };

GHC.IO.Device.$fShowSeekMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s8252 w1_s8253 w2_s8254]
        GHC.IO.Device.$w$cshowsPrec w1_s8253 w2_s8254;

GHC.IO.Device.$fShowSeekMode_$cshow
  :: GHC.IO.Device.SeekMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s8255]
        case x_s8255 of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fReadSeekMode15;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fReadSeekMode11;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fReadSeekMode7;
        };

GHC.IO.Device.$fShowSeekMode_$cshowList
  :: [GHC.IO.Device.SeekMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s8257 s_s8258]
        GHC.Show.showList__ GHC.IO.Device.$w$cshowsPrec ls_s8257 s_s8258;

GHC.IO.Device.$fShowSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Device.$fShowSeekMode_$cshowsPrec
                                    GHC.IO.Device.$fShowSeekMode_$cshow
                                    GHC.IO.Device.$fShowSeekMode_$cshowList];

GHC.IO.Device.$fReadSeekMode14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s8259 k_s825a] k_s825a GHC.IO.Device.AbsoluteSeek;

GHC.IO.Device.$fReadSeekMode13
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode15
                        GHC.IO.Device.$fReadSeekMode14];

GHC.IO.Device.$fReadSeekMode10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s825b k_s825c] k_s825c GHC.IO.Device.RelativeSeek;

GHC.IO.Device.$fReadSeekMode9
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode11
                        GHC.IO.Device.$fReadSeekMode10];

GHC.IO.Device.$fReadSeekMode6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s825d k_s825e] k_s825e GHC.IO.Device.SeekFromEnd;

GHC.IO.Device.$fReadSeekMode5
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode7
                        GHC.IO.Device.$fReadSeekMode6];

GHC.IO.Device.$fReadSeekMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode5 GHC.Types.[]];

GHC.IO.Device.$fReadSeekMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode9
                      GHC.IO.Device.$fReadSeekMode4];

GHC.IO.Device.$fReadSeekMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode13
                      GHC.IO.Device.$fReadSeekMode3];

GHC.IO.Device.$fReadSeekMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s825f]
        GHC.Read.choose2 GHC.IO.Device.$fReadSeekMode_sps eta_s825f;

GHC.IO.Device.$fReadSeekMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Device.$fReadSeekMode2 eta_B2 eta_B1;

GHC.IO.Device.$fReadSeekMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s825g]
        let {
          sat_s825h [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Device.SeekMode
          [LclId] =
              [n_s825g] \u []
                  GHC.Read.list3
                      GHC.IO.Device.$fReadSeekMode2
                      n_s825g
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s825h;

GHC.IO.Device.$fReadSeekMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Device.$fReadSeekMode1;

GHC.IO.Device.$fReadSeekMode17
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u []
        GHC.IO.Device.$fReadSeekMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Device.$fReadSeekMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Device.$fReadSeekMode17 eta_B1;

GHC.IO.Device.$fReadSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Device.$fReadSeekMode_$creadsPrec
                                    GHC.IO.Device.$fReadSeekMode_$creadList
                                    GHC.IO.Device.$fReadSeekMode1
                                    GHC.IO.Device.$fReadSeekMode_$creadListPrec];

GHC.IO.Device.$fEqSeekMode_$c==
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s825i ds1_s825j]
        case ds_s825i of {
          GHC.IO.Device.AbsoluteSeek ->
              case ds1_s825j of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case ds1_s825j of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case ds1_s825j of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqSeekMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s825o eta1_s825p]
        case eta_s825o of {
          GHC.IO.Device.AbsoluteSeek ->
              case eta1_s825p of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.RelativeSeek ->
              case eta1_s825p of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case eta1_s825p of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqSeekMode_$c==
                                     GHC.IO.Device.$fEqSeekMode_$c/=];

GHC.IO.Device.$fEqIODeviceType_$c==
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s825u ds1_s825v]
        case ds_s825u of {
          GHC.IO.Device.Directory ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Directory -> GHC.Types.True [];
              };
          GHC.IO.Device.Stream ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Stream -> GHC.Types.True [];
              };
          GHC.IO.Device.RegularFile ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RegularFile -> GHC.Types.True [];
              };
          GHC.IO.Device.RawDevice ->
              case ds1_s825v of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RawDevice -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqIODeviceType_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s825B eta1_s825C]
        case eta_s825B of {
          GHC.IO.Device.Directory ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Directory -> GHC.Types.False [];
              };
          GHC.IO.Device.Stream ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Stream -> GHC.Types.False [];
              };
          GHC.IO.Device.RegularFile ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RegularFile -> GHC.Types.False [];
              };
          GHC.IO.Device.RawDevice ->
              case eta1_s825C of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RawDevice -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqIODeviceType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.IODeviceType
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqIODeviceType_$c==
                                     GHC.IO.Device.$fEqIODeviceType_$c/=];

$dmisSeekable1_r81Zn
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s825I ds_s825J void_0E]
        Unit# [GHC.Types.False];

GHC.IO.Device.$dmisSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmisSeekable1_r81Zn eta_B3 eta_B2 GHC.Prim.void#;

$dmisTerminal1_r81Zo
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s825L ds_s825M void_0E]
        Unit# [GHC.Types.False];

GHC.IO.Device.$dmisTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmisTerminal1_r81Zo eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Device.$dmdup1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.throwIO1
            GHC.IO.Exception.$fxExceptionIOException
            GHC.IO.Exception.unsupportedOperation
            GHC.Prim.void#;

$dmseek1_r81Zp
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s825P eta1_s825Q eta2_s825R eta3_s825S void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmseek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        $dmseek1_r81Zp eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmtell1_r81Zq
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s825U eta1_s825V void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmtell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmtell1_r81Zq eta_B3 eta_B2 GHC.Prim.void#;

$dmgetSize1_r81Zr
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s825X ds_s825Y void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmgetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmgetSize1_r81Zr eta_B3 eta_B2 GHC.Prim.void#;

$dmsetSize1_r81Zs
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s8260 eta1_s8261 eta2_s8262 void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmsetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmsetSize1_r81Zs eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmsetEcho1_r81Zt
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s8264 eta1_s8265 eta2_s8266 void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmsetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmsetEcho1_r81Zt eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmgetEcho1_r81Zu
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s8268 eta1_s8269 void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmgetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmgetEcho1_r81Zu eta_B3 eta_B2 GHC.Prim.void#;

$dmsetRaw1_r81Zv
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s826b ds_s826c ds1_s826d void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmsetRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmsetRaw1_r81Zv eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmdup3_r81Zw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s826f eta1_s826g void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmdup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmdup3_r81Zw eta_B3 eta_B2 GHC.Prim.void#;

$dmdup4_r81Zx
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s826i eta1_s826j eta2_s826k void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmdup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmdup4_r81Zx eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Device.$fOrdSeekMode_$ccompare
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826m b_s826n]
        case a_s826m of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s826n of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.EQ [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.LT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s826n of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.GT [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.EQ [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s826n of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.EQ [];
              };
        };

GHC.IO.Device.$fOrdSeekMode_$c<
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826s b_s826t]
        case a_s826s of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s826t of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s826t of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s826t of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Device.$fOrdSeekMode_$c<=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826y b_s826z]
        let-no-escape {
          $j_s826A [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [a_s826y] \r [a#_s826B]
                  case a_s826y of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s826B 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s826B 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s826B 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case b_s826z of {
            GHC.IO.Device.AbsoluteSeek -> $j_s826A 0#;
            GHC.IO.Device.RelativeSeek -> $j_s826A 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s826A 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$cmax
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s826H y_s826I]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s826H y_s826I of {
          GHC.Types.False -> x_s826H;
          GHC.Types.True -> y_s826I;
        };

GHC.IO.Device.$fOrdSeekMode_$c>=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826K b_s826L]
        let-no-escape {
          $j_s826M [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s826L] \r [a#_s826N]
                  case b_s826L of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s826N 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s826N 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s826N 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case a_s826K of {
            GHC.IO.Device.AbsoluteSeek -> $j_s826M 0#;
            GHC.IO.Device.RelativeSeek -> $j_s826M 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s826M 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$c>
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s826T b_s826U]
        GHC.IO.Device.$fOrdSeekMode_$c< b_s826U a_s826T;

GHC.IO.Device.$fOrdSeekMode_$cmin
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s826V y_s826W]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s826V y_s826W of {
          GHC.Types.False -> y_s826W;
          GHC.Types.True -> x_s826V;
        };

GHC.IO.Device.$fOrdSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Device.$fEqSeekMode
                                      GHC.IO.Device.$fOrdSeekMode_$ccompare
                                      GHC.IO.Device.$fOrdSeekMode_$c<
                                      GHC.IO.Device.$fOrdSeekMode_$c<=
                                      GHC.IO.Device.$fOrdSeekMode_$c>
                                      GHC.IO.Device.$fOrdSeekMode_$c>=
                                      GHC.IO.Device.$fOrdSeekMode_$cmax
                                      GHC.IO.Device.$fOrdSeekMode_$cmin];

GHC.IO.Device.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s826Y w_s826Z]
        case ww_s826Y of {
          GHC.IO.Device.AbsoluteSeek ->
              case w_s826Z of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.RelativeSeek ->
              case w_s826Z of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case w_s826Z of {
                GHC.IO.Device.AbsoluteSeek -> -2#;
                GHC.IO.Device.RelativeSeek -> -1#;
                GHC.IO.Device.SeekFromEnd -> 0#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s8274 w1_s8275]
        case w_s8274 of {
          (,) ww1_s8277 [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.Device.$w$cunsafeIndex ww1_s8277 w1_s8275
              of
              ww3_s8279
              { __DEFAULT -> GHC.Types.I# [ww3_s8279];
              };
        };

GHC.IO.Device.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s827a ww1_s827b w_s827c]
        let-no-escape {
          $j_s827d [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s827b w_s827c] \r [a#_s827e]
                  let-no-escape {
                    $j1_s827f [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s827c a#_s827e] \r [b#_s827g]
                            case w_s827c of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [0# a#_s827e] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s827g] of sat_s827j {
                                          __DEFAULT -> tagToEnum# [sat_s827j];
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [1# a#_s827e] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s827g] of sat_s827l {
                                          __DEFAULT -> tagToEnum# [sat_s827l];
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [2# a#_s827e] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s827g] of sat_s827n {
                                          __DEFAULT -> tagToEnum# [sat_s827n];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s827b of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s827f 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s827f 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s827f 2#;
                    };
        } in 
          case ww_s827a of {
            GHC.IO.Device.AbsoluteSeek -> $j_s827d 0#;
            GHC.IO.Device.RelativeSeek -> $j_s827d 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s827d 2#;
          };

GHC.IO.Device.$fIxSeekMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s827q w1_s827r]
        case w_s827q of {
          (,) ww1_s827t [Occ=Once] ww2_s827u [Occ=Once] ->
              GHC.IO.Device.$w$cinRange ww1_s827t ww2_s827u w1_s827r;
        };

lvl_r81Zy :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r81Zz :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r81ZA :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

GHC.IO.Device.$fEnumSeekMode_$cfromEnum
  :: GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s827v]
        case a_s827v of {
          GHC.IO.Device.AbsoluteSeek -> lvl_r81Zy;
          GHC.IO.Device.RelativeSeek -> lvl1_r81Zz;
          GHC.IO.Device.SeekFromEnd -> lvl2_r81ZA;
        };

GHC.IO.Device.$fIxSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s827x]
        let {
          sat_s827B [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s827x] \u []
                  case x_s827x of wild_s827z {
                    __DEFAULT ->
                        case +# [wild_s827z 1#] of sat_s827A {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 sat_s827A;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s827y [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s827x] \u [] tagToEnum# [x_s827x];
        } in  : [sat_s827y sat_s827B];

GHC.IO.Device.$fIxSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s827C]
        let {
          sat_s827G [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s827C] \u []
                  case x_s827C of wild_s827E {
                    __DEFAULT ->
                        case +# [wild_s827E 1#] of sat_s827F {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go sat_s827F;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s827D [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s827C] \u [] tagToEnum# [x_s827C];
        } in  : [sat_s827D sat_s827G];

GHC.IO.Device.$fEnumSeekMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s827H]
        let {
          sat_s827L [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s827H] \u []
                  case x_s827H of wild_s827J {
                    __DEFAULT ->
                        case +# [wild_s827J 1#] of sat_s827K {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 sat_s827K;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s827I [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s827H] \u [] tagToEnum# [x_s827H];
        } in  : [sat_s827I sat_s827L];

GHC.IO.Device.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s827M ww1_s827N]
        let-no-escape {
          $j_s827O [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s827N] \r [a#_s827P]
                  case ww1_s827N of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [a#_s827P 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 a#_s827P;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [a#_s827P 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go a#_s827P;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [a#_s827P 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 a#_s827P;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s827M of {
            GHC.IO.Device.AbsoluteSeek -> $j_s827O 0#;
            GHC.IO.Device.RelativeSeek -> $j_s827O 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s827O 2#;
          };

GHC.IO.Device.$fIxSeekMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s827V]
        case w_s827V of {
          (,) ww1_s827X [Occ=Once] ww2_s827Y [Occ=Once] ->
              GHC.IO.Device.$w$crange ww1_s827X ww2_s827Y;
        };

GHC.IO.Device.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s827Z ww1_s8280]
        case GHC.IO.Device.$w$cinRange ww_s827Z ww1_s8280 ww1_s8280 of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s827Z of {
                GHC.IO.Device.AbsoluteSeek ->
                    case ww1_s8280 of {
                      GHC.IO.Device.AbsoluteSeek -> 1#;
                      GHC.IO.Device.RelativeSeek -> 2#;
                      GHC.IO.Device.SeekFromEnd -> 3#;
                    };
                GHC.IO.Device.RelativeSeek ->
                    case ww1_s8280 of {
                      GHC.IO.Device.AbsoluteSeek -> 0#;
                      GHC.IO.Device.RelativeSeek -> 1#;
                      GHC.IO.Device.SeekFromEnd -> 2#;
                    };
                GHC.IO.Device.SeekFromEnd ->
                    case ww1_s8280 of {
                      GHC.IO.Device.AbsoluteSeek -> -1#;
                      GHC.IO.Device.RelativeSeek -> 0#;
                      GHC.IO.Device.SeekFromEnd -> 1#;
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s8286]
        case w_s8286 of {
          (,) ww1_s8288 [Occ=Once] ww2_s8289 [Occ=Once] ->
              case GHC.IO.Device.$w$crangeSize ww1_s8288 ww2_s8289 of ww3_s828a {
                __DEFAULT -> GHC.Types.I# [ww3_s828a];
              };
        };

GHC.IO.Device.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s828b ww1_s828c]
        case ww_s828b of {
          GHC.IO.Device.AbsoluteSeek ->
              case ww1_s828c of {
                GHC.IO.Device.AbsoluteSeek -> 1#;
                GHC.IO.Device.RelativeSeek -> 2#;
                GHC.IO.Device.SeekFromEnd -> 3#;
              };
          GHC.IO.Device.RelativeSeek ->
              case ww1_s828c of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case ww1_s828c of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s828h]
        case w_s828h of {
          (,) ww1_s828j [Occ=Once] ww2_s828k [Occ=Once] ->
              case
                  GHC.IO.Device.$w$cunsafeRangeSize ww1_s828j ww2_s828k
              of
              ww3_s828l
              { __DEFAULT -> GHC.Types.I# [ww3_s828l];
              };
        };

GHC.IO.Device.$fIxSeekMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s828m eta1_s828n]
        case eta_s828m of {
          (,) ww1_s828p ww2_s828q [Occ=Once] ->
              case GHC.IO.Device.$w$cinRange ww1_s828p ww2_s828q eta1_s828n of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.Device.$w$cunsafeIndex ww1_s828p eta1_s828n
                    of
                    ww3_s828s
                    { __DEFAULT -> GHC.Types.I# [ww3_s828s];
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.Device.$fOrdSeekMode
                                 GHC.IO.Device.$fIxSeekMode_$crange
                                 GHC.IO.Device.$fIxSeekMode_$cindex
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex
                                 GHC.IO.Device.$fIxSeekMode_$cinRange
                                 GHC.IO.Device.$fIxSeekMode_$crangeSize
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize];

lvl3_r81ZB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl4_r81ZC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_r81ZB;

GHC.IO.Device.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl5_r81ZD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule4;

GHC.IO.Device.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Device"#;

lvl6_r81ZE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule2;

lvl7_r81ZF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Device.hs"#;

lvl8_r81ZG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl7_r81ZF;

lvl9_r81ZH :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [173#];

lvl10_r81ZI :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl11_r81ZJ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl12_r81ZK :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl5_r81ZD
                                           lvl6_r81ZE
                                           lvl8_r81ZG
                                           lvl9_r81ZH
                                           lvl10_r81ZI
                                           lvl9_r81ZH
                                           lvl11_r81ZJ];

lvl13_r81ZL :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl4_r81ZC
                                                  lvl12_r81ZK
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r81ZM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{SeekMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode4 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r81ZM of sat_s828t {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s828t;
        };

GHC.IO.Device.$fEnumSeekMode_$cpred
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s828u]
        case a_s828u of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode4;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.AbsoluteSeek [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.RelativeSeek [];
        };

lvl15_r81ZN :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{SeekMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode5 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r81ZN of sat_s828w {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s828w;
        };

GHC.IO.Device.$fEnumSeekMode_$csucc
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s828x]
        case a_s828x of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.RelativeSeek [];
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.SeekFromEnd [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode5;
        };

lvl16_r81ZO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r81ZP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r81ZQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r81ZP;

lvl19_r81ZR :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 2# lvl18_r81ZQ of {
          (#,#) ww5_s828A [Occ=Once] ww6_s828B [Occ=Once] ->
              : [ww5_s828A ww6_s828B];
        };

lvl20_r81ZS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r81ZO lvl19_r81ZR;

lvl21_r81ZT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{SeekMode}: tag ("#;

GHC.IO.Device.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s828C]
        let {
          sat_s828G [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s828C] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s828C lvl20_r81ZS of {
                    (#,#) ww5_s828E [Occ=Once] ww6_s828F [Occ=Once] ->
                        : [ww5_s828E ww6_s828F];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r81ZT sat_s828G
          of
          sat_s828H
          { __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s828H;
          };

GHC.IO.Device.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s828I]
        case >=# [ww_s828I 0#] of {
          __DEFAULT -> GHC.IO.Device.$wlvl ww_s828I;
          1# ->
              case <=# [ww_s828I 2#] of {
                __DEFAULT -> GHC.IO.Device.$wlvl ww_s828I;
                1# -> tagToEnum# [ww_s828I];
              };
        };

GHC.IO.Device.$fEnumSeekMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s828L]
        case w_s828L of {
          GHC.Types.I# ww1_s828N [Occ=Once] ->
              GHC.IO.Device.$w$ctoEnum ww1_s828N;
        };

GHC.IO.Device.$fEnumSeekMode3 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 0#;

GHC.IO.Device.$fEnumSeekMode2 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 1#;

GHC.IO.Device.$fEnumSeekMode1 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 2#;

GHC.IO.Device.$fEnumSeekMode_$cenumFrom
  :: GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s828O]
        case a_s828O of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode3;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fEnumSeekMode2;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode1;
        };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s828Q b_s828R]
        let-no-escape {
          $j_s828S [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s828R] \r [a#_s828T]
                  let-no-escape {
                    $j1_s828U [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s828T] \r [b#_s828V]
                            case ># [a#_s828T b#_s828V] of {
                              __DEFAULT ->
                                  case >=# [b#_s828V a#_s828T] of {
                                    __DEFAULT ->
                                        case ># [2# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s8299 [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s8290 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s8290]
                                                              of
                                                              y'_s8291 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s8292 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s8290
                                                                                    y'_s8291
                                                                                    go_dn_s8292] \r [x_s8293]
                                                                              case
                                                                                  <# [x_s8293
                                                                                      y'_s8291]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s8297 [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s8290
                                                                                           go_dn_s8292
                                                                                           x_s8293] \u []
                                                                                              case
                                                                                                  +# [x_s8293
                                                                                                      delta_s8290]
                                                                                              of
                                                                                              sat_s8296
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s8292
                                                                                                        sat_s8296;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s8295 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s8293] \u []
                                                                                              tagToEnum# [x_s8293];
                                                                                    } in 
                                                                                      : [sat_s8295
                                                                                         sat_s8297];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s8298 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s8293] \u []
                                                                                              tagToEnum# [x_s8293];
                                                                                    } in 
                                                                                      : [sat_s8298
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s8292 b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s828Z [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s828Z sat_s8299];
                                          1# ->
                                              case ># [2# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829b [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829b GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s829n [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s829e [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s829e]
                                                              of
                                                              y'_s829f [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s829g [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s829e
                                                                                    y'_s829f
                                                                                    go_up_s829g] \r [x_s829h]
                                                                              case
                                                                                  ># [x_s829h
                                                                                      y'_s829f]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s829l [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s829e
                                                                                           go_up_s829g
                                                                                           x_s829h] \u []
                                                                                              case
                                                                                                  +# [x_s829h
                                                                                                      delta_s829e]
                                                                                              of
                                                                                              sat_s829k
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s829g
                                                                                                        sat_s829k;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s829j [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829h] \u []
                                                                                              tagToEnum# [x_s829h];
                                                                                    } in 
                                                                                      : [sat_s829j
                                                                                         sat_s829l];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s829m [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829h] \u []
                                                                                              tagToEnum# [x_s829h];
                                                                                    } in 
                                                                                      : [sat_s829m
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s829g b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s829d [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s829d sat_s829n];
                                          1# ->
                                              case <# [2# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829p [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829p GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s828V a#_s828T] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s829C [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s829t [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s829t]
                                                              of
                                                              y'_s829u [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s829v [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s829t
                                                                                    y'_s829u
                                                                                    go_dn_s829v] \r [x_s829w]
                                                                              case
                                                                                  <# [x_s829w
                                                                                      y'_s829u]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s829A [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s829t
                                                                                           go_dn_s829v
                                                                                           x_s829w] \u []
                                                                                              case
                                                                                                  +# [x_s829w
                                                                                                      delta_s829t]
                                                                                              of
                                                                                              sat_s829z
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s829v
                                                                                                        sat_s829z;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s829y [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829w] \u []
                                                                                              tagToEnum# [x_s829w];
                                                                                    } in 
                                                                                      : [sat_s829y
                                                                                         sat_s829A];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s829B [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829w] \u []
                                                                                              tagToEnum# [x_s829w];
                                                                                    } in 
                                                                                      : [sat_s829B
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s829v b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s829s [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s829s sat_s829C];
                                          1# ->
                                              case ># [0# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829E [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829E GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s828V] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s829Q [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s828T b#_s828V] \u []
                                                        case
                                                            -# [b#_s828V a#_s828T]
                                                        of
                                                        delta_s829H [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s829H]
                                                              of
                                                              y'_s829I [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s829J [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s829H
                                                                                    y'_s829I
                                                                                    go_up_s829J] \r [x_s829K]
                                                                              case
                                                                                  ># [x_s829K
                                                                                      y'_s829I]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s829O [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s829H
                                                                                           go_up_s829J
                                                                                           x_s829K] \u []
                                                                                              case
                                                                                                  +# [x_s829K
                                                                                                      delta_s829H]
                                                                                              of
                                                                                              sat_s829N
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s829J
                                                                                                        sat_s829N;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s829M [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829K] \u []
                                                                                              tagToEnum# [x_s829K];
                                                                                    } in 
                                                                                      : [sat_s829M
                                                                                         sat_s829O];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s829P [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s829K] \u []
                                                                                              tagToEnum# [x_s829K];
                                                                                    } in 
                                                                                      : [sat_s829P
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s829J b#_s828V;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s829G [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                              } in  : [sat_s829G sat_s829Q];
                                          1# ->
                                              case <# [0# a#_s828T] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s829S [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s828T] \u [] tagToEnum# [a#_s828T];
                                                    } in  : [sat_s829S GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s828R of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s828U 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s828U 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s828U 2#;
                    };
        } in 
          case a_s828Q of {
            GHC.IO.Device.AbsoluteSeek -> $j_s828S 0#;
            GHC.IO.Device.RelativeSeek -> $j_s828S 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s828S 2#;
          };

GHC.IO.Device.$fEnumSeekMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s829V]
        let {
          sat_s82a1 [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s829V] \u []
                  case x_s829V of wild_s829Z {
                    __DEFAULT ->
                        case +# [wild_s829Z 1#] of sat_s82a0 {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 sat_s82a0;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s829Y [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s829V] \u []
                  case >=# [x_s829V 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s829V;
                    1# ->
                        case <=# [x_s829V 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s829V;
                          1# -> tagToEnum# [x_s829V];
                        };
                  };
        } in  : [sat_s829Y sat_s82a1];

GHC.IO.Device.$fEnumSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s82a2]
        let {
          sat_s82a8 [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s82a2] \u []
                  case x_s82a2 of wild_s82a6 {
                    __DEFAULT ->
                        case +# [wild_s82a6 1#] of sat_s82a7 {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 sat_s82a7;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s82a5 [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s82a2] \u []
                  case >=# [x_s82a2 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s82a2;
                    1# ->
                        case <=# [x_s82a2 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s82a2;
                          1# -> tagToEnum# [x_s82a2];
                        };
                  };
        } in  : [sat_s82a5 sat_s82a8];

GHC.IO.Device.$fEnumSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s82a9]
        let {
          sat_s82af [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s82a9] \u []
                  case x_s82a9 of wild_s82ad {
                    __DEFAULT ->
                        case +# [wild_s82ad 1#] of sat_s82ae {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go sat_s82ae;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s82ac [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s82a9] \u []
                  case >=# [x_s82a9 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s82a9;
                    1# ->
                        case <=# [x_s82a9 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s82a9;
                          1# -> tagToEnum# [x_s82a9];
                        };
                  };
        } in  : [sat_s82ac sat_s82af];

GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s82ag y_s82ah]
        let-no-escape {
          $j_s82ai [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s82ah] \r [x1_s82aj]
                  case y_s82ah of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [x1_s82aj 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 x1_s82aj;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [x1_s82aj 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 x1_s82aj;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [x1_s82aj 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go x1_s82aj;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s82ag of {
            GHC.IO.Device.AbsoluteSeek -> $j_s82ai 0#;
            GHC.IO.Device.RelativeSeek -> $j_s82ai 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s82ai 2#;
          };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> [GHC.IO.Device.SeekMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s82ap x2_s82aq y_s82ar]
        let-no-escape {
          $j_s82as [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s82aq y_s82ar] \r [x4_s82at]
                  let-no-escape {
                    $j1_s82au [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s82ar x4_s82at] \r [x5_s82av]
                            case y_s82ar of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [x5_s82av x4_s82at] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82aP [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82aC [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s82aC]
                                                              of
                                                              y'_s82aD [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s82aE [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82aC
                                                                                    y'_s82aD
                                                                                    go_dn_s82aE] \r [x_s82aF]
                                                                              case
                                                                                  <# [x_s82aF
                                                                                      y'_s82aD]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82aL [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82aC
                                                                                           go_dn_s82aE
                                                                                           x_s82aF] \u []
                                                                                              case
                                                                                                  +# [x_s82aF
                                                                                                      delta_s82aC]
                                                                                              of
                                                                                              sat_s82aK
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s82aE
                                                                                                        sat_s82aK;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82aJ [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82aF] \u []
                                                                                              case
                                                                                                  >=# [x_s82aF
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82aF;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82aF
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82aF;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82aF];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82aJ
                                                                                         sat_s82aL];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82aO [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82aF] \u []
                                                                                              case
                                                                                                  >=# [x_s82aF
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82aF;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82aF
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82aF;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82aF];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82aO
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s82aE x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82aB [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82aB sat_s82aP];
                                          1# ->
                                              case ># [0# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82aT [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82aT GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82bb [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82aY [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s82aY]
                                                              of
                                                              y'_s82aZ [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s82b0 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82aY
                                                                                    y'_s82aZ
                                                                                    go_up_s82b0] \r [x_s82b1]
                                                                              case
                                                                                  ># [x_s82b1
                                                                                      y'_s82aZ]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82b7 [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82aY
                                                                                           go_up_s82b0
                                                                                           x_s82b1] \u []
                                                                                              case
                                                                                                  +# [x_s82b1
                                                                                                      delta_s82aY]
                                                                                              of
                                                                                              sat_s82b6
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s82b0
                                                                                                        sat_s82b6;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82b5 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82b1] \u []
                                                                                              case
                                                                                                  >=# [x_s82b1
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82b1;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82b1
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82b1;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82b1];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82b5
                                                                                         sat_s82b7];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82ba [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82b1] \u []
                                                                                              case
                                                                                                  >=# [x_s82b1
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82b1;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82b1
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82b1;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82b1];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82ba
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s82b0 x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82aX [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82aX sat_s82bb];
                                          1# ->
                                              case <# [0# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82bf [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82bf GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [x5_s82av x4_s82at] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82by [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82bl [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s82bl]
                                                              of
                                                              y'_s82bm [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s82bn [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82bl
                                                                                    y'_s82bm
                                                                                    go_dn_s82bn] \r [x_s82bo]
                                                                              case
                                                                                  <# [x_s82bo
                                                                                      y'_s82bm]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82bu [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82bl
                                                                                           go_dn_s82bn
                                                                                           x_s82bo] \u []
                                                                                              case
                                                                                                  +# [x_s82bo
                                                                                                      delta_s82bl]
                                                                                              of
                                                                                              sat_s82bt
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s82bn
                                                                                                        sat_s82bt;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82bs [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bo] \u []
                                                                                              case
                                                                                                  >=# [x_s82bo
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bo;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bo
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bo;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bo];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bs
                                                                                         sat_s82bu];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82bx [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bo] \u []
                                                                                              case
                                                                                                  >=# [x_s82bo
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bo;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bo
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bo;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bo];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bx
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s82bn x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82bk [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82bk sat_s82by];
                                          1# ->
                                              case ># [1# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82bC [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82bC GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82bU [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82bH [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s82bH]
                                                              of
                                                              y'_s82bI [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s82bJ [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82bH
                                                                                    y'_s82bI
                                                                                    go_up_s82bJ] \r [x_s82bK]
                                                                              case
                                                                                  ># [x_s82bK
                                                                                      y'_s82bI]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82bQ [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82bH
                                                                                           go_up_s82bJ
                                                                                           x_s82bK] \u []
                                                                                              case
                                                                                                  +# [x_s82bK
                                                                                                      delta_s82bH]
                                                                                              of
                                                                                              sat_s82bP
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s82bJ
                                                                                                        sat_s82bP;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82bO [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bK] \u []
                                                                                              case
                                                                                                  >=# [x_s82bK
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bK;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bK
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bK;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bK];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bO
                                                                                         sat_s82bQ];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82bT [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82bK] \u []
                                                                                              case
                                                                                                  >=# [x_s82bK
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82bK;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82bK
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82bK;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82bK];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82bT
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s82bJ x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82bG [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82bG sat_s82bU];
                                          1# ->
                                              case <# [1# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82bY [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82bY GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [x5_s82av x4_s82at] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82ch [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82c4 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s82c4]
                                                              of
                                                              y'_s82c5 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s82c6 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82c4
                                                                                    y'_s82c5
                                                                                    go_dn_s82c6] \r [x_s82c7]
                                                                              case
                                                                                  <# [x_s82c7
                                                                                      y'_s82c5]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82cd [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82c4
                                                                                           go_dn_s82c6
                                                                                           x_s82c7] \u []
                                                                                              case
                                                                                                  +# [x_s82c7
                                                                                                      delta_s82c4]
                                                                                              of
                                                                                              sat_s82cc
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s82c6
                                                                                                        sat_s82cc;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82cb [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82c7] \u []
                                                                                              case
                                                                                                  >=# [x_s82c7
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82c7;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82c7
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82c7;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82c7];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cb
                                                                                         sat_s82cd];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82cg [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82c7] \u []
                                                                                              case
                                                                                                  >=# [x_s82c7
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82c7;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82c7
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82c7;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82c7];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cg
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s82c6 x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82c3 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82c3 sat_s82ch];
                                          1# ->
                                              case ># [2# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82cl [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82cl GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s82av] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s82cD [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s82at x5_s82av] \u []
                                                        case
                                                            -# [x5_s82av x4_s82at]
                                                        of
                                                        delta_s82cq [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s82cq]
                                                              of
                                                              y'_s82cr [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s82cs [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s82cq
                                                                                    y'_s82cr
                                                                                    go_up_s82cs] \r [x_s82ct]
                                                                              case
                                                                                  ># [x_s82ct
                                                                                      y'_s82cr]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s82cz [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s82cq
                                                                                           go_up_s82cs
                                                                                           x_s82ct] \u []
                                                                                              case
                                                                                                  +# [x_s82ct
                                                                                                      delta_s82cq]
                                                                                              of
                                                                                              sat_s82cy
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s82cs
                                                                                                        sat_s82cy;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s82cx [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82ct] \u []
                                                                                              case
                                                                                                  >=# [x_s82ct
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82ct;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82ct
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82ct;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82ct];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cx
                                                                                         sat_s82cz];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s82cC [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s82ct] \u []
                                                                                              case
                                                                                                  >=# [x_s82ct
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s82ct;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s82ct
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s82ct;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s82ct];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s82cC
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s82cs x5_s82av;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s82cp [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s82at] \u []
                                                        case >=# [x4_s82at 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s82at;
                                                          1# ->
                                                              case <=# [x4_s82at 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# -> tagToEnum# [x4_s82at];
                                                              };
                                                        };
                                              } in  : [sat_s82cp sat_s82cD];
                                          1# ->
                                              case <# [2# x4_s82at] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s82cH [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s82at] \u []
                                                              case >=# [x4_s82at 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s82at;
                                                                1# ->
                                                                    case <=# [x4_s82at 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s82at;
                                                                      1# -> tagToEnum# [x4_s82at];
                                                                    };
                                                              };
                                                    } in  : [sat_s82cH GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s82aq of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s82au 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s82au 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s82au 2#;
                    };
        } in 
          case x1_s82ap of {
            GHC.IO.Device.AbsoluteSeek -> $j_s82as 0#;
            GHC.IO.Device.RelativeSeek -> $j_s82as 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s82as 2#;
          };

GHC.IO.Device.$fEnumSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.Device.$fEnumSeekMode_$csucc
                                    GHC.IO.Device.$fEnumSeekMode_$cpred
                                    GHC.IO.Device.$fEnumSeekMode_$ctoEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cfromEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFrom
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo];

GHC.IO.Device.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule4];

GHC.IO.Device.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule2];

GHC.IO.Device.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Device.$trModule3
                                     GHC.IO.Device.$trModule1];

$krep_r81ZU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep1_r81ZV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep2_r81ZW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep3_r81ZX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep4_r81ZY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep5_r81ZZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep6_r8200 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r81ZX GHC.Types.[]];

$krep7_r8201 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep6_r8200];

$krep8_r8202 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r81ZV GHC.Types.[]];

$krep9_r8203 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r8202];

$krep10_r8204 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r81ZW GHC.Types.[]];

$krep11_r8205 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep10_r8204];

$krep12_r8206 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r81ZY GHC.Types.[]];

$krep13_r8207 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r8206];

$krep14_r8208 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8200];

$krep15_r8209 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r8208 GHC.Types.[]];

$krep16_r820a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep15_r8209];

$krep17_r820b :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r81ZU GHC.Types.[]];

$krep18_r820c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep17_r820b];

$krep19_r820d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep11_r8205];

$krep20_r820e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep7_r8201];

$krep21_r820f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep13_r8207];

$krep22_r820g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep16_r820a];

$krep23_r820h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep11_r8205];

$krep24_r820i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep21_r820f];

$krep25_r820j :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r81ZV $krep11_r8205];

$krep26_r820k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep19_r820d];

$krep27_r820l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep20_r820e];

$krep28_r820m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep22_r820g];

GHC.IO.Device.$tcIODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep5_r81ZZ];

$krep29_r820n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep30_r820o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep28_r820m];

$krep31_r820p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep27_r820l];

$krep32_r820q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep26_r820k];

$krep33_r820r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep25_r820j];

$krep34_r820s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep24_r820i];

$krep35_r820t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep23_r820h];

$krep36_r820u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep11_r8205];

$krep37_r820v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep13_r8207];

$krep38_r820w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep9_r8203];

$krep39_r820x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep29_r820n GHC.Types.[]];

$krep40_r820y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep39_r820x];

$krep41_r820z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep40_r820y];

$krep42_r820A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep41_r820z];

GHC.IO.Device.$tcRawIO2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RawIO"#;

GHC.IO.Device.$tcRawIO1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcRawIO2];

GHC.IO.Device.$tcRawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15458836890887680490##
                                    11407217875184880147##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcRawIO1
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep43_r820B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcRawIO
                                              $krep39_r820x];

$krep44_r820C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep43_r820B];

$krep45_r820D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep32_r820q $krep44_r820C];

$krep46_r820E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep30_r820o $krep45_r820D];

GHC.IO.Device.$tc'C:RawIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep46_r820E];

GHC.IO.Device.$tc'C:RawIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:RawIO"#;

GHC.IO.Device.$tc'C:RawIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:RawIO3];

GHC.IO.Device.$tc'C:RawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6403037956050298954##
                                    14520964482680400738##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:RawIO2
                                    1#
                                    GHC.IO.Device.$tc'C:RawIO1];

GHC.IO.Device.$tcIODeviceType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODeviceType"#;

GHC.IO.Device.$tcIODeviceType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODeviceType2];

GHC.IO.Device.$tcIODeviceType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4175968526489202383##
                                    17718566430225243048##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODeviceType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'Directory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODeviceType
                                              GHC.Types.[]];

GHC.IO.Device.$tc'Directory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Directory"#;

GHC.IO.Device.$tc'Directory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Directory3];

GHC.IO.Device.$tc'Directory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12008838926528382233##
                                    639950492613404225##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Directory2
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'Stream2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Stream"#;

GHC.IO.Device.$tc'Stream1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Stream2];

GHC.IO.Device.$tc'Stream :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [39573928359804366##
                                    741010449601335383##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Stream1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RegularFile2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RegularFile"#;

GHC.IO.Device.$tc'RegularFile1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RegularFile2];

GHC.IO.Device.$tc'RegularFile :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2184574052715259025##
                                    14349593064521146856##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RegularFile1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RawDevice2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RawDevice"#;

GHC.IO.Device.$tc'RawDevice1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RawDevice2];

GHC.IO.Device.$tc'RawDevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13599710032796319976##
                                    8789152980205417013##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RawDevice1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

$krep47_r820F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$tc'Directory1 GHC.Types.[]];

$krep48_r820G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep47_r820F];

$krep49_r820H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep48_r820G];

GHC.IO.Device.$tcSeekMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekMode"#;

GHC.IO.Device.$tcSeekMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcSeekMode2];

GHC.IO.Device.$tcSeekMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17698211299654630015##
                                    5588778824401988676##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcSeekMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'AbsoluteSeek1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcSeekMode
                                              GHC.Types.[]];

GHC.IO.Device.$tc'AbsoluteSeek3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AbsoluteSeek"#;

GHC.IO.Device.$tc'AbsoluteSeek2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'AbsoluteSeek3];

GHC.IO.Device.$tc'AbsoluteSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5610789579148926753##
                                    3433733041722086784##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'AbsoluteSeek2
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'RelativeSeek2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RelativeSeek"#;

GHC.IO.Device.$tc'RelativeSeek1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RelativeSeek2];

GHC.IO.Device.$tc'RelativeSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15906895381304752726##
                                    1738065871578000433##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RelativeSeek1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'SeekFromEnd2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SeekFromEnd"#;

GHC.IO.Device.$tc'SeekFromEnd1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'SeekFromEnd2];

GHC.IO.Device.$tc'SeekFromEnd :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16344961357916628519##
                                    5039033320700315004##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'SeekFromEnd1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

$krep50_r820I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Device.$tc'AbsoluteSeek1
                                         $krep25_r820j];

$krep51_r820J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep50_r820I];

GHC.IO.Device.$tcIODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODevice"#;

GHC.IO.Device.$tcIODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODevice3];

GHC.IO.Device.$tcIODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4764642859795697036##
                                    7163668738257247953##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODevice2
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep52_r820K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep39_r820x];

$krep53_r820L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep42_r820A $krep52_r820K];

$krep54_r820M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r820z $krep53_r820L];

$krep55_r820N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep49_r820H $krep54_r820M];

$krep56_r820O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep55_r820N];

$krep57_r820P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep56_r820O];

$krep58_r820Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep57_r820P];

$krep59_r820R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep33_r820r $krep58_r820Q];

$krep60_r820S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep59_r820R];

$krep61_r820T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep60_r820S];

$krep62_r820U :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep51_r820J $krep61_r820T];

$krep63_r820V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep62_r820U];

$krep64_r820W :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep63_r820V];

$krep65_r820X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep36_r820u $krep64_r820W];

GHC.IO.Device.$tc'C:IODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r820s $krep65_r820X];

GHC.IO.Device.$tc'C:IODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IODevice"#;

GHC.IO.Device.$tc'C:IODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:IODevice3];

GHC.IO.Device.$tc'C:IODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15352604720075066134##
                                    14084350618605203122##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:IODevice2
                                    1#
                                    GHC.IO.Device.$tc'C:IODevice1];

GHC.IO.Device.AbsoluteSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.AbsoluteSeek! [];

GHC.IO.Device.RelativeSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RelativeSeek! [];

GHC.IO.Device.SeekFromEnd :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.SeekFromEnd! [];

GHC.IO.Device.Directory :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Directory! [];

GHC.IO.Device.Stream :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Stream! [];

GHC.IO.Device.RegularFile :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RegularFile! [];

GHC.IO.Device.RawDevice :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RawDevice! [];

GHC.IO.Device.C:IODevice
  :: forall a.
     (a
      -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a
         -> GHC.IO.Device.SeekMode
         -> GHC.Integer.Type.Integer
         -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Integer.Type.Integer -> GHC.Types.IO ())
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.IO.Device.IODeviceType)
     -> (a -> GHC.Types.IO a)
     -> (a -> a -> GHC.Types.IO a)
     -> GHC.IO.Device.IODevice a
[GblId[DataCon],
 Arity=14,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Device.C:IODevice [eta_Be
                                  eta_Bd
                                  eta_Bc
                                  eta_Bb
                                  eta_Ba
                                  eta_B9
                                  eta_B8
                                  eta_B7
                                  eta_B6
                                  eta_B5
                                  eta_B4
                                  eta_B3
                                  eta_B2
                                  eta_B1];

GHC.IO.Device.C:RawIO
  :: forall a.
     (a
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Types.Int
      -> GHC.Types.IO GHC.Types.Int)
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int))
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ())
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO GHC.Types.Int)
     -> GHC.IO.Device.RawIO a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Device.C:RawIO [eta_B4 eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:03:13.138084627 UTC

GHC.IO.Device.ready
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLL),U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85HA]
        case v_s85HA of {
          GHC.IO.Device.C:IODevice v_s85HC [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85HC;
        };

GHC.IO.Device.close
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLL),U(A,U,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85HQ]
        case v_s85HQ of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   v_s85HT [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85HT;
        };

GHC.IO.Device.isTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLL),U(A,A,U,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85I6]
        case v_s85I6 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Ia [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Ia;
        };

GHC.IO.Device.isSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLL),U(A,A,A,U,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85Im]
        case v_s85Im of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Ir [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Ir;
        };

GHC.IO.Device.seek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLL),U(A,A,A,A,U,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85IC]
        case v_s85IC of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85II [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85II;
        };

GHC.IO.Device.tell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLL),U(A,A,A,A,A,U,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85IS]
        case v_s85IS of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85IZ [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85IZ;
        };

GHC.IO.Device.getSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLL),U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)>] =
    [] \r [v_s85J8]
        case v_s85J8 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Jg [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Jg;
        };

GHC.IO.Device.setSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLL),U(A,A,A,A,A,A,A,U,A,A,A,A,A,A)>] =
    [] \r [v_s85Jo]
        case v_s85Jo of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Jx [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Jx;
        };

GHC.IO.Device.setEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLL),U(A,A,A,A,A,A,A,A,U,A,A,A,A,A)>] =
    [] \r [v_s85JE]
        case v_s85JE of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85JO [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85JO;
        };

GHC.IO.Device.getEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLL),U(A,A,A,A,A,A,A,A,A,U,A,A,A,A)>] =
    [] \r [v_s85JU]
        case v_s85JU of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85K5 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85K5;
        };

GHC.IO.Device.setRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLL),U(A,A,A,A,A,A,A,A,A,A,U,A,A,A)>] =
    [] \r [v_s85Ka]
        case v_s85Ka of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Km [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Km;
        };

GHC.IO.Device.devType
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.IO.Device.IODeviceType
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLL),U(A,A,A,A,A,A,A,A,A,A,A,U,A,A)>] =
    [] \r [v_s85Kq]
        case v_s85Kq of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85KD [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85KD;
        };

GHC.IO.Device.dup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSL),U(A,A,A,A,A,A,A,A,A,A,A,A,U,A)>] =
    [] \r [v_s85KG]
        case v_s85KG of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85KU [Occ=Once]
                                   _ [Occ=Dead] ->
              v_s85KU;
        };

GHC.IO.Device.dup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLS),U(A,A,A,A,A,A,A,A,A,A,A,A,A,U)>] =
    [] \r [v_s85KW]
        case v_s85KW of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Lb [Occ=Once] ->
              v_s85Lb;
        };

GHC.IO.Device.read
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s85Lc]
        case v_s85Lc of {
          GHC.IO.Device.C:RawIO v_s85Le [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s85Le;
        };

GHC.IO.Device.readNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s85Li]
        case v_s85Li of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                v_s85Ll [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s85Ll;
        };

GHC.IO.Device.write
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s85Lo]
        case v_s85Lo of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s85Ls [Occ=Once]
                                _ [Occ=Dead] ->
              v_s85Ls;
        };

GHC.IO.Device.writeNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s85Lu]
        case v_s85Lu of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s85Lz [Occ=Once] ->
              v_s85Lz;
        };

GHC.IO.Device.$fReadSeekMode16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AbsoluteSeek"#;

GHC.IO.Device.$fReadSeekMode15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode16;

GHC.IO.Device.$fReadSeekMode12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RelativeSeek"#;

GHC.IO.Device.$fReadSeekMode11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode12;

GHC.IO.Device.$fReadSeekMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekFromEnd"#;

GHC.IO.Device.$fReadSeekMode7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode8;

GHC.IO.Device.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s85LA w1_s85LB]
        case w_s85LA of {
          GHC.IO.Device.AbsoluteSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode15 w1_s85LB;
          GHC.IO.Device.RelativeSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode11 w1_s85LB;
          GHC.IO.Device.SeekFromEnd ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode7 w1_s85LB;
        };

GHC.IO.Device.$fShowSeekMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s85LD w1_s85LE w2_s85LF]
        GHC.IO.Device.$w$cshowsPrec w1_s85LE w2_s85LF;

GHC.IO.Device.$fShowSeekMode_$cshow
  :: GHC.IO.Device.SeekMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s85LG]
        case x_s85LG of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fReadSeekMode15;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fReadSeekMode11;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fReadSeekMode7;
        };

GHC.IO.Device.$fShowSeekMode_$cshowList
  :: [GHC.IO.Device.SeekMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s85LI s_s85LJ]
        GHC.Show.showList__ GHC.IO.Device.$w$cshowsPrec ls_s85LI s_s85LJ;

GHC.IO.Device.$fShowSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Device.$fShowSeekMode_$cshowsPrec
                                    GHC.IO.Device.$fShowSeekMode_$cshow
                                    GHC.IO.Device.$fShowSeekMode_$cshowList];

GHC.IO.Device.$fReadSeekMode14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s85LK k_s85LL] k_s85LL GHC.IO.Device.AbsoluteSeek;

GHC.IO.Device.$fReadSeekMode13
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode15
                        GHC.IO.Device.$fReadSeekMode14];

GHC.IO.Device.$fReadSeekMode10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s85LM k_s85LN] k_s85LN GHC.IO.Device.RelativeSeek;

GHC.IO.Device.$fReadSeekMode9
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode11
                        GHC.IO.Device.$fReadSeekMode10];

GHC.IO.Device.$fReadSeekMode6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s85LO k_s85LP] k_s85LP GHC.IO.Device.SeekFromEnd;

GHC.IO.Device.$fReadSeekMode5
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode7
                        GHC.IO.Device.$fReadSeekMode6];

GHC.IO.Device.$fReadSeekMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode5 GHC.Types.[]];

GHC.IO.Device.$fReadSeekMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode9
                      GHC.IO.Device.$fReadSeekMode4];

GHC.IO.Device.$fReadSeekMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode13
                      GHC.IO.Device.$fReadSeekMode3];

GHC.IO.Device.$fReadSeekMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s85LQ]
        GHC.Read.choose2 GHC.IO.Device.$fReadSeekMode_sps eta_s85LQ;

GHC.IO.Device.$fReadSeekMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Device.$fReadSeekMode2 eta_B2 eta_B1;

GHC.IO.Device.$fReadSeekMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s85LR]
        let {
          sat_s85LS [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Device.SeekMode
          [LclId] =
              [n_s85LR] \u []
                  GHC.Read.list3
                      GHC.IO.Device.$fReadSeekMode2
                      n_s85LR
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s85LS;

GHC.IO.Device.$fReadSeekMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Device.$fReadSeekMode1;

GHC.IO.Device.$fReadSeekMode17
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u []
        GHC.IO.Device.$fReadSeekMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Device.$fReadSeekMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Device.$fReadSeekMode17 eta_B1;

GHC.IO.Device.$fReadSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Device.$fReadSeekMode_$creadsPrec
                                    GHC.IO.Device.$fReadSeekMode_$creadList
                                    GHC.IO.Device.$fReadSeekMode1
                                    GHC.IO.Device.$fReadSeekMode_$creadListPrec];

GHC.IO.Device.$fEqSeekMode_$c==
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s85LT ds1_s85LU]
        case ds_s85LT of {
          GHC.IO.Device.AbsoluteSeek ->
              case ds1_s85LU of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case ds1_s85LU of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case ds1_s85LU of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqSeekMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s85LZ eta1_s85M0]
        case eta_s85LZ of {
          GHC.IO.Device.AbsoluteSeek ->
              case eta1_s85M0 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.RelativeSeek ->
              case eta1_s85M0 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case eta1_s85M0 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqSeekMode_$c==
                                     GHC.IO.Device.$fEqSeekMode_$c/=];

GHC.IO.Device.$fEqIODeviceType_$c==
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s85M5 ds1_s85M6]
        case ds_s85M5 of {
          GHC.IO.Device.Directory ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Directory -> GHC.Types.True [];
              };
          GHC.IO.Device.Stream ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Stream -> GHC.Types.True [];
              };
          GHC.IO.Device.RegularFile ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RegularFile -> GHC.Types.True [];
              };
          GHC.IO.Device.RawDevice ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RawDevice -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqIODeviceType_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s85Mc eta1_s85Md]
        case eta_s85Mc of {
          GHC.IO.Device.Directory ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Directory -> GHC.Types.False [];
              };
          GHC.IO.Device.Stream ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Stream -> GHC.Types.False [];
              };
          GHC.IO.Device.RegularFile ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RegularFile -> GHC.Types.False [];
              };
          GHC.IO.Device.RawDevice ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RawDevice -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqIODeviceType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.IODeviceType
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqIODeviceType_$c==
                                     GHC.IO.Device.$fEqIODeviceType_$c/=];

$dmisSeekable1_r81Zn
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85Mj ds_s85Mk s_s85Ml]
        (#,#) [s_s85Ml GHC.Types.False];

GHC.IO.Device.$dmisSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmisSeekable1_r81Zn eta_B3 eta_B2 eta_B1;

$dmisTerminal1_r81Zo
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85Mm ds_s85Mn s_s85Mo]
        (#,#) [s_s85Mo GHC.Types.False];

GHC.IO.Device.$dmisTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmisTerminal1_r81Zo eta_B3 eta_B2 eta_B1;

GHC.IO.Device.$dmdup1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [eta_s85Mp]
        GHC.IO.throwIO1
            GHC.IO.Exception.$fxExceptionIOException
            GHC.IO.Exception.unsupportedOperation
            eta_s85Mp;

$dmseek1_r81Zp
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85Mq
                    eta1_s85Mr
                    eta2_s85Ms
                    eta3_s85Mt
                    eta4_s85Mu]
        GHC.IO.Device.$dmdup1 eta4_s85Mu;

GHC.IO.Device.$dmseek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        $dmseek1_r81Zp eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

$dmtell1_r81Zq
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85Mv eta1_s85Mw eta2_s85Mx]
        GHC.IO.Device.$dmdup1 eta2_s85Mx;

GHC.IO.Device.$dmtell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $dmtell1_r81Zq eta_B3 eta_B2 eta_B1;

$dmgetSize1_r81Zr
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85My ds_s85Mz eta_s85MA]
        GHC.IO.Device.$dmdup1 eta_s85MA;

GHC.IO.Device.$dmgetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmgetSize1_r81Zr eta_B3 eta_B2 eta_B1;

$dmsetSize1_r81Zs
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MB eta1_s85MC eta2_s85MD eta3_s85ME]
        GHC.IO.Device.$dmdup1 eta3_s85ME;

GHC.IO.Device.$dmsetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmsetSize1_r81Zs eta_B4 eta_B3 eta_B2 eta_B1;

$dmsetEcho1_r81Zt
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MF eta1_s85MG eta2_s85MH eta3_s85MI]
        GHC.IO.Device.$dmdup1 eta3_s85MI;

GHC.IO.Device.$dmsetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmsetEcho1_r81Zt eta_B4 eta_B3 eta_B2 eta_B1;

$dmgetEcho1_r81Zu
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MJ eta1_s85MK eta2_s85ML]
        GHC.IO.Device.$dmdup1 eta2_s85ML;

GHC.IO.Device.$dmgetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        $dmgetEcho1_r81Zu eta_B3 eta_B2 eta_B1;

$dmsetRaw1_r81Zv
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85MM ds_s85MN ds1_s85MO eta_s85MP]
        GHC.IO.Device.$dmdup1 eta_s85MP;

GHC.IO.Device.$dmsetRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmsetRaw1_r81Zv eta_B4 eta_B3 eta_B2 eta_B1;

$dmdup3_r81Zw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MQ eta1_s85MR eta2_s85MS]
        GHC.IO.Device.$dmdup1 eta2_s85MS;

GHC.IO.Device.$dmdup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] $dmdup3_r81Zw eta_B3 eta_B2 eta_B1;

$dmdup4_r81Zx
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MT eta1_s85MU eta2_s85MV eta3_s85MW]
        GHC.IO.Device.$dmdup1 eta3_s85MW;

GHC.IO.Device.$dmdup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmdup4_r81Zx eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.Device.$fOrdSeekMode_$ccompare
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85MX b_s85MY]
        case a_s85MX of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s85MY of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.EQ [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.LT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s85MY of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.GT [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.EQ [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s85MY of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.EQ [];
              };
        };

GHC.IO.Device.$fOrdSeekMode_$c<
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85N3 b_s85N4]
        case a_s85N3 of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s85N4 of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s85N4 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s85N4 of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Device.$fOrdSeekMode_$c<=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85N9 b_s85Na]
        let-no-escape {
          $j_s85Nb [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [a_s85N9] \r [a#_s85Nc]
                  case a_s85N9 of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s85Nc 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s85Nc 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s85Nc 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case b_s85Na of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Nb 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Nb 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Nb 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$cmax
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s85Ni y_s85Nj]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s85Ni y_s85Nj of {
          GHC.Types.False -> x_s85Ni;
          GHC.Types.True -> y_s85Nj;
        };

GHC.IO.Device.$fOrdSeekMode_$c>=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85Nl b_s85Nm]
        let-no-escape {
          $j_s85Nn [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s85Nm] \r [a#_s85No]
                  case b_s85Nm of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s85No 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s85No 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s85No 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case a_s85Nl of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Nn 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Nn 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Nn 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$c>
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85Nu b_s85Nv]
        GHC.IO.Device.$fOrdSeekMode_$c< b_s85Nv a_s85Nu;

GHC.IO.Device.$fOrdSeekMode_$cmin
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s85Nw y_s85Nx]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s85Nw y_s85Nx of {
          GHC.Types.False -> y_s85Nx;
          GHC.Types.True -> x_s85Nw;
        };

GHC.IO.Device.$fOrdSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Device.$fEqSeekMode
                                      GHC.IO.Device.$fOrdSeekMode_$ccompare
                                      GHC.IO.Device.$fOrdSeekMode_$c<
                                      GHC.IO.Device.$fOrdSeekMode_$c<=
                                      GHC.IO.Device.$fOrdSeekMode_$c>
                                      GHC.IO.Device.$fOrdSeekMode_$c>=
                                      GHC.IO.Device.$fOrdSeekMode_$cmax
                                      GHC.IO.Device.$fOrdSeekMode_$cmin];

GHC.IO.Device.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85Nz w_s85NA]
        case ww_s85Nz of {
          GHC.IO.Device.AbsoluteSeek ->
              case w_s85NA of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.RelativeSeek ->
              case w_s85NA of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case w_s85NA of {
                GHC.IO.Device.AbsoluteSeek -> -2#;
                GHC.IO.Device.RelativeSeek -> -1#;
                GHC.IO.Device.SeekFromEnd -> 0#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s85NF w1_s85NG]
        case w_s85NF of {
          (,) ww1_s85NI [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.Device.$w$cunsafeIndex ww1_s85NI w1_s85NG
              of
              ww3_s85NK
              { __DEFAULT -> GHC.Types.I# [ww3_s85NK];
              };
        };

GHC.IO.Device.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85NL ww1_s85NM w_s85NN]
        let-no-escape {
          $j_s85NO [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s85NM w_s85NN] \r [a#_s85NP]
                  let-no-escape {
                    $j1_s85NQ [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s85NN a#_s85NP] \r [b#_s85NR]
                            case w_s85NN of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [0# a#_s85NP] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s85NR] of sat_s85NU {
                                          __DEFAULT -> tagToEnum# [sat_s85NU];
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [1# a#_s85NP] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s85NR] of sat_s85NW {
                                          __DEFAULT -> tagToEnum# [sat_s85NW];
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [2# a#_s85NP] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s85NR] of sat_s85NY {
                                          __DEFAULT -> tagToEnum# [sat_s85NY];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s85NM of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s85NQ 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s85NQ 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s85NQ 2#;
                    };
        } in 
          case ww_s85NL of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85NO 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85NO 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85NO 2#;
          };

GHC.IO.Device.$fIxSeekMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s85O1 w1_s85O2]
        case w_s85O1 of {
          (,) ww1_s85O4 [Occ=Once] ww2_s85O5 [Occ=Once] ->
              GHC.IO.Device.$w$cinRange ww1_s85O4 ww2_s85O5 w1_s85O2;
        };

lvl_r81Zy :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r81Zz :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r81ZA :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

GHC.IO.Device.$fEnumSeekMode_$cfromEnum
  :: GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s85O6]
        case a_s85O6 of {
          GHC.IO.Device.AbsoluteSeek -> lvl_r81Zy;
          GHC.IO.Device.RelativeSeek -> lvl1_r81Zz;
          GHC.IO.Device.SeekFromEnd -> lvl2_r81ZA;
        };

GHC.IO.Device.$fIxSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85O8]
        let {
          sat_s85Oc [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85O8] \u []
                  case x_s85O8 of wild_s85Oa {
                    __DEFAULT ->
                        case +# [wild_s85Oa 1#] of sat_s85Ob {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 sat_s85Ob;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s85O9 [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85O8] \u [] tagToEnum# [x_s85O8];
        } in  : [sat_s85O9 sat_s85Oc];

GHC.IO.Device.$fIxSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85Od]
        let {
          sat_s85Oh [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85Od] \u []
                  case x_s85Od of wild_s85Of {
                    __DEFAULT ->
                        case +# [wild_s85Of 1#] of sat_s85Og {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go sat_s85Og;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s85Oe [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85Od] \u [] tagToEnum# [x_s85Od];
        } in  : [sat_s85Oe sat_s85Oh];

GHC.IO.Device.$fEnumSeekMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85Oi]
        let {
          sat_s85Om [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85Oi] \u []
                  case x_s85Oi of wild_s85Ok {
                    __DEFAULT ->
                        case +# [wild_s85Ok 1#] of sat_s85Ol {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 sat_s85Ol;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s85Oj [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85Oi] \u [] tagToEnum# [x_s85Oi];
        } in  : [sat_s85Oj sat_s85Om];

GHC.IO.Device.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85On ww1_s85Oo]
        let-no-escape {
          $j_s85Op [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s85Oo] \r [a#_s85Oq]
                  case ww1_s85Oo of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [a#_s85Oq 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 a#_s85Oq;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [a#_s85Oq 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go a#_s85Oq;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [a#_s85Oq 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 a#_s85Oq;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s85On of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Op 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Op 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Op 2#;
          };

GHC.IO.Device.$fIxSeekMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s85Ow]
        case w_s85Ow of {
          (,) ww1_s85Oy [Occ=Once] ww2_s85Oz [Occ=Once] ->
              GHC.IO.Device.$w$crange ww1_s85Oy ww2_s85Oz;
        };

GHC.IO.Device.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s85OA ww1_s85OB]
        case GHC.IO.Device.$w$cinRange ww_s85OA ww1_s85OB ww1_s85OB of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s85OA of {
                GHC.IO.Device.AbsoluteSeek ->
                    case ww1_s85OB of {
                      GHC.IO.Device.AbsoluteSeek -> 1#;
                      GHC.IO.Device.RelativeSeek -> 2#;
                      GHC.IO.Device.SeekFromEnd -> 3#;
                    };
                GHC.IO.Device.RelativeSeek ->
                    case ww1_s85OB of {
                      GHC.IO.Device.AbsoluteSeek -> 0#;
                      GHC.IO.Device.RelativeSeek -> 1#;
                      GHC.IO.Device.SeekFromEnd -> 2#;
                    };
                GHC.IO.Device.SeekFromEnd ->
                    case ww1_s85OB of {
                      GHC.IO.Device.AbsoluteSeek -> -1#;
                      GHC.IO.Device.RelativeSeek -> 0#;
                      GHC.IO.Device.SeekFromEnd -> 1#;
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s85OH]
        case w_s85OH of {
          (,) ww1_s85OJ [Occ=Once] ww2_s85OK [Occ=Once] ->
              case GHC.IO.Device.$w$crangeSize ww1_s85OJ ww2_s85OK of ww3_s85OL {
                __DEFAULT -> GHC.Types.I# [ww3_s85OL];
              };
        };

GHC.IO.Device.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85OM ww1_s85ON]
        case ww_s85OM of {
          GHC.IO.Device.AbsoluteSeek ->
              case ww1_s85ON of {
                GHC.IO.Device.AbsoluteSeek -> 1#;
                GHC.IO.Device.RelativeSeek -> 2#;
                GHC.IO.Device.SeekFromEnd -> 3#;
              };
          GHC.IO.Device.RelativeSeek ->
              case ww1_s85ON of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case ww1_s85ON of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s85OS]
        case w_s85OS of {
          (,) ww1_s85OU [Occ=Once] ww2_s85OV [Occ=Once] ->
              case
                  GHC.IO.Device.$w$cunsafeRangeSize ww1_s85OU ww2_s85OV
              of
              ww3_s85OW
              { __DEFAULT -> GHC.Types.I# [ww3_s85OW];
              };
        };

GHC.IO.Device.$fIxSeekMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s85OX eta1_s85OY]
        case eta_s85OX of {
          (,) ww1_s85P0 ww2_s85P1 [Occ=Once] ->
              case GHC.IO.Device.$w$cinRange ww1_s85P0 ww2_s85P1 eta1_s85OY of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.Device.$w$cunsafeIndex ww1_s85P0 eta1_s85OY
                    of
                    ww3_s85P3
                    { __DEFAULT -> GHC.Types.I# [ww3_s85P3];
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.Device.$fOrdSeekMode
                                 GHC.IO.Device.$fIxSeekMode_$crange
                                 GHC.IO.Device.$fIxSeekMode_$cindex
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex
                                 GHC.IO.Device.$fIxSeekMode_$cinRange
                                 GHC.IO.Device.$fIxSeekMode_$crangeSize
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize];

lvl3_r81ZB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl4_r81ZC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_r81ZB;

GHC.IO.Device.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl5_r81ZD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule4;

GHC.IO.Device.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Device"#;

lvl6_r81ZE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule2;

lvl7_r81ZF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Device.hs"#;

lvl8_r81ZG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl7_r81ZF;

lvl9_r81ZH :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [173#];

lvl10_r81ZI :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl11_r81ZJ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl12_r81ZK :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl5_r81ZD
                                           lvl6_r81ZE
                                           lvl8_r81ZG
                                           lvl9_r81ZH
                                           lvl10_r81ZI
                                           lvl9_r81ZH
                                           lvl11_r81ZJ];

lvl13_r81ZL :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl4_r81ZC
                                                  lvl12_r81ZK
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r81ZM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{SeekMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode4 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r81ZM of sat_s85P4 {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s85P4;
        };

GHC.IO.Device.$fEnumSeekMode_$cpred
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s85P5]
        case a_s85P5 of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode4;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.AbsoluteSeek [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.RelativeSeek [];
        };

lvl15_r81ZN :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{SeekMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode5 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r81ZN of sat_s85P7 {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s85P7;
        };

GHC.IO.Device.$fEnumSeekMode_$csucc
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s85P8]
        case a_s85P8 of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.RelativeSeek [];
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.SeekFromEnd [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode5;
        };

lvl16_r81ZO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r81ZP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r81ZQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r81ZP;

lvl19_r81ZR :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 2# lvl18_r81ZQ of {
          (#,#) ww5_s85Pb [Occ=Once] ww6_s85Pc [Occ=Once] ->
              : [ww5_s85Pb ww6_s85Pc];
        };

lvl20_r81ZS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r81ZO lvl19_r81ZR;

lvl21_r81ZT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{SeekMode}: tag ("#;

GHC.IO.Device.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s85Pd]
        let {
          sat_s85Ph [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s85Pd] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s85Pd lvl20_r81ZS of {
                    (#,#) ww5_s85Pf [Occ=Once] ww6_s85Pg [Occ=Once] ->
                        : [ww5_s85Pf ww6_s85Pg];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r81ZT sat_s85Ph
          of
          sat_s85Pi
          { __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s85Pi;
          };

GHC.IO.Device.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s85Pj]
        case >=# [ww_s85Pj 0#] of {
          __DEFAULT -> GHC.IO.Device.$wlvl ww_s85Pj;
          1# ->
              case <=# [ww_s85Pj 2#] of {
                __DEFAULT -> GHC.IO.Device.$wlvl ww_s85Pj;
                1# -> tagToEnum# [ww_s85Pj];
              };
        };

GHC.IO.Device.$fEnumSeekMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s85Pm]
        case w_s85Pm of {
          GHC.Types.I# ww1_s85Po [Occ=Once] ->
              GHC.IO.Device.$w$ctoEnum ww1_s85Po;
        };

GHC.IO.Device.$fEnumSeekMode3 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 0#;

GHC.IO.Device.$fEnumSeekMode2 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 1#;

GHC.IO.Device.$fEnumSeekMode1 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 2#;

GHC.IO.Device.$fEnumSeekMode_$cenumFrom
  :: GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s85Pp]
        case a_s85Pp of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode3;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fEnumSeekMode2;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode1;
        };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85Pr b_s85Ps]
        let-no-escape {
          $j_s85Pt [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s85Ps] \r [a#_s85Pu]
                  let-no-escape {
                    $j1_s85Pv [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s85Pu] \r [b#_s85Pw]
                            case ># [a#_s85Pu b#_s85Pw] of {
                              __DEFAULT ->
                                  case >=# [b#_s85Pw a#_s85Pu] of {
                                    __DEFAULT ->
                                        case ># [2# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85PK [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85PB [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85PB]
                                                              of
                                                              y'_s85PC [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85PD [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85PB
                                                                                    y'_s85PC
                                                                                    go_dn_s85PD] \r [x_s85PE]
                                                                              case
                                                                                  <# [x_s85PE
                                                                                      y'_s85PC]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85PI [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85PB
                                                                                           go_dn_s85PD
                                                                                           x_s85PE] \u []
                                                                                              case
                                                                                                  +# [x_s85PE
                                                                                                      delta_s85PB]
                                                                                              of
                                                                                              sat_s85PH
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85PD
                                                                                                        sat_s85PH;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85PG [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PE] \u []
                                                                                              tagToEnum# [x_s85PE];
                                                                                    } in 
                                                                                      : [sat_s85PG
                                                                                         sat_s85PI];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85PJ [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PE] \u []
                                                                                              tagToEnum# [x_s85PE];
                                                                                    } in 
                                                                                      : [sat_s85PJ
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85PD b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85PA [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85PA sat_s85PK];
                                          1# ->
                                              case ># [2# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85PM [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85PM GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85PY [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85PP [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85PP]
                                                              of
                                                              y'_s85PQ [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85PR [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85PP
                                                                                    y'_s85PQ
                                                                                    go_up_s85PR] \r [x_s85PS]
                                                                              case
                                                                                  ># [x_s85PS
                                                                                      y'_s85PQ]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85PW [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85PP
                                                                                           go_up_s85PR
                                                                                           x_s85PS] \u []
                                                                                              case
                                                                                                  +# [x_s85PS
                                                                                                      delta_s85PP]
                                                                                              of
                                                                                              sat_s85PV
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85PR
                                                                                                        sat_s85PV;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85PU [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PS] \u []
                                                                                              tagToEnum# [x_s85PS];
                                                                                    } in 
                                                                                      : [sat_s85PU
                                                                                         sat_s85PW];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85PX [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PS] \u []
                                                                                              tagToEnum# [x_s85PS];
                                                                                    } in 
                                                                                      : [sat_s85PX
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85PR b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85PO [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85PO sat_s85PY];
                                          1# ->
                                              case <# [2# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Q0 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85Q0 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s85Pw a#_s85Pu] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Qd [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85Q4 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Q4]
                                                              of
                                                              y'_s85Q5 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85Q6 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Q4
                                                                                    y'_s85Q5
                                                                                    go_dn_s85Q6] \r [x_s85Q7]
                                                                              case
                                                                                  <# [x_s85Q7
                                                                                      y'_s85Q5]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Qb [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Q4
                                                                                           go_dn_s85Q6
                                                                                           x_s85Q7] \u []
                                                                                              case
                                                                                                  +# [x_s85Q7
                                                                                                      delta_s85Q4]
                                                                                              of
                                                                                              sat_s85Qa
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85Q6
                                                                                                        sat_s85Qa;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Q9 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Q7] \u []
                                                                                              tagToEnum# [x_s85Q7];
                                                                                    } in 
                                                                                      : [sat_s85Q9
                                                                                         sat_s85Qb];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Qc [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Q7] \u []
                                                                                              tagToEnum# [x_s85Q7];
                                                                                    } in 
                                                                                      : [sat_s85Qc
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85Q6 b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Q3 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85Q3 sat_s85Qd];
                                          1# ->
                                              case ># [0# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Qf [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85Qf GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Qr [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85Qi [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Qi]
                                                              of
                                                              y'_s85Qj [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85Qk [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Qi
                                                                                    y'_s85Qj
                                                                                    go_up_s85Qk] \r [x_s85Ql]
                                                                              case
                                                                                  ># [x_s85Ql
                                                                                      y'_s85Qj]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Qp [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Qi
                                                                                           go_up_s85Qk
                                                                                           x_s85Ql] \u []
                                                                                              case
                                                                                                  +# [x_s85Ql
                                                                                                      delta_s85Qi]
                                                                                              of
                                                                                              sat_s85Qo
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85Qk
                                                                                                        sat_s85Qo;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Qn [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Ql] \u []
                                                                                              tagToEnum# [x_s85Ql];
                                                                                    } in 
                                                                                      : [sat_s85Qn
                                                                                         sat_s85Qp];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Qq [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Ql] \u []
                                                                                              tagToEnum# [x_s85Ql];
                                                                                    } in 
                                                                                      : [sat_s85Qq
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85Qk b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Qh [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85Qh sat_s85Qr];
                                          1# ->
                                              case <# [0# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Qt [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85Qt GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s85Ps of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s85Pv 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s85Pv 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s85Pv 2#;
                    };
        } in 
          case a_s85Pr of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Pt 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Pt 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Pt 2#;
          };

GHC.IO.Device.$fEnumSeekMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85Qw]
        let {
          sat_s85QC [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85Qw] \u []
                  case x_s85Qw of wild_s85QA {
                    __DEFAULT ->
                        case +# [wild_s85QA 1#] of sat_s85QB {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 sat_s85QB;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s85Qz [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85Qw] \u []
                  case >=# [x_s85Qw 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s85Qw;
                    1# ->
                        case <=# [x_s85Qw 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s85Qw;
                          1# -> tagToEnum# [x_s85Qw];
                        };
                  };
        } in  : [sat_s85Qz sat_s85QC];

GHC.IO.Device.$fEnumSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85QD]
        let {
          sat_s85QJ [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85QD] \u []
                  case x_s85QD of wild_s85QH {
                    __DEFAULT ->
                        case +# [wild_s85QH 1#] of sat_s85QI {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 sat_s85QI;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s85QG [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85QD] \u []
                  case >=# [x_s85QD 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s85QD;
                    1# ->
                        case <=# [x_s85QD 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s85QD;
                          1# -> tagToEnum# [x_s85QD];
                        };
                  };
        } in  : [sat_s85QG sat_s85QJ];

GHC.IO.Device.$fEnumSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85QK]
        let {
          sat_s85QQ [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85QK] \u []
                  case x_s85QK of wild_s85QO {
                    __DEFAULT ->
                        case +# [wild_s85QO 1#] of sat_s85QP {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go sat_s85QP;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s85QN [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85QK] \u []
                  case >=# [x_s85QK 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s85QK;
                    1# ->
                        case <=# [x_s85QK 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s85QK;
                          1# -> tagToEnum# [x_s85QK];
                        };
                  };
        } in  : [sat_s85QN sat_s85QQ];

GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s85QR y_s85QS]
        let-no-escape {
          $j_s85QT [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s85QS] \r [x1_s85QU]
                  case y_s85QS of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [x1_s85QU 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 x1_s85QU;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [x1_s85QU 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 x1_s85QU;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [x1_s85QU 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go x1_s85QU;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s85QR of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85QT 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85QT 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85QT 2#;
          };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> [GHC.IO.Device.SeekMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s85R0 x2_s85R1 y_s85R2]
        let-no-escape {
          $j_s85R3 [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s85R1 y_s85R2] \r [x4_s85R4]
                  let-no-escape {
                    $j1_s85R5 [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s85R2 x4_s85R4] \r [x5_s85R6]
                            case y_s85R2 of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [x5_s85R6 x4_s85R4] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Rq [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85Rd [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Rd]
                                                              of
                                                              y'_s85Re [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85Rf [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Rd
                                                                                    y'_s85Re
                                                                                    go_dn_s85Rf] \r [x_s85Rg]
                                                                              case
                                                                                  <# [x_s85Rg
                                                                                      y'_s85Re]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Rm [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Rd
                                                                                           go_dn_s85Rf
                                                                                           x_s85Rg] \u []
                                                                                              case
                                                                                                  +# [x_s85Rg
                                                                                                      delta_s85Rd]
                                                                                              of
                                                                                              sat_s85Rl
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85Rf
                                                                                                        sat_s85Rl;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Rk [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Rg] \u []
                                                                                              case
                                                                                                  >=# [x_s85Rg
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Rg;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Rg
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Rg;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Rg];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Rk
                                                                                         sat_s85Rm];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Rp [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Rg] \u []
                                                                                              case
                                                                                                  >=# [x_s85Rg
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Rg;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Rg
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Rg;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Rg];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Rp
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85Rf x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Rc [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85Rc sat_s85Rq];
                                          1# ->
                                              case ># [0# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Ru [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Ru GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85RM [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85Rz [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Rz]
                                                              of
                                                              y'_s85RA [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85RB [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Rz
                                                                                    y'_s85RA
                                                                                    go_up_s85RB] \r [x_s85RC]
                                                                              case
                                                                                  ># [x_s85RC
                                                                                      y'_s85RA]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85RI [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Rz
                                                                                           go_up_s85RB
                                                                                           x_s85RC] \u []
                                                                                              case
                                                                                                  +# [x_s85RC
                                                                                                      delta_s85Rz]
                                                                                              of
                                                                                              sat_s85RH
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85RB
                                                                                                        sat_s85RH;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85RG [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RC] \u []
                                                                                              case
                                                                                                  >=# [x_s85RC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RC
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85RG
                                                                                         sat_s85RI];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85RL [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RC] \u []
                                                                                              case
                                                                                                  >=# [x_s85RC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RC
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85RL
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85RB x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Ry [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85Ry sat_s85RM];
                                          1# ->
                                              case <# [0# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85RQ [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85RQ GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [x5_s85R6 x4_s85R4] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85S9 [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85RW [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s85RW]
                                                              of
                                                              y'_s85RX [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85RY [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85RW
                                                                                    y'_s85RX
                                                                                    go_dn_s85RY] \r [x_s85RZ]
                                                                              case
                                                                                  <# [x_s85RZ
                                                                                      y'_s85RX]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85S5 [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85RW
                                                                                           go_dn_s85RY
                                                                                           x_s85RZ] \u []
                                                                                              case
                                                                                                  +# [x_s85RZ
                                                                                                      delta_s85RW]
                                                                                              of
                                                                                              sat_s85S4
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85RY
                                                                                                        sat_s85S4;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85S3 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RZ] \u []
                                                                                              case
                                                                                                  >=# [x_s85RZ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RZ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RZ
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RZ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RZ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85S3
                                                                                         sat_s85S5];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85S8 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RZ] \u []
                                                                                              case
                                                                                                  >=# [x_s85RZ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RZ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RZ
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RZ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RZ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85S8
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85RY x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85RV [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85RV sat_s85S9];
                                          1# ->
                                              case ># [1# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Sd [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Sd GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Sv [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85Si [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s85Si]
                                                              of
                                                              y'_s85Sj [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85Sk [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Si
                                                                                    y'_s85Sj
                                                                                    go_up_s85Sk] \r [x_s85Sl]
                                                                              case
                                                                                  ># [x_s85Sl
                                                                                      y'_s85Sj]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Sr [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Si
                                                                                           go_up_s85Sk
                                                                                           x_s85Sl] \u []
                                                                                              case
                                                                                                  +# [x_s85Sl
                                                                                                      delta_s85Si]
                                                                                              of
                                                                                              sat_s85Sq
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85Sk
                                                                                                        sat_s85Sq;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Sp [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Sl] \u []
                                                                                              case
                                                                                                  >=# [x_s85Sl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Sl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Sl
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Sl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Sl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Sp
                                                                                         sat_s85Sr];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Su [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Sl] \u []
                                                                                              case
                                                                                                  >=# [x_s85Sl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Sl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Sl
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Sl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Sl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Su
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85Sk x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Sh [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85Sh sat_s85Sv];
                                          1# ->
                                              case <# [1# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Sz [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Sz GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [x5_s85R6 x4_s85R4] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85SS [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85SF [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85SF]
                                                              of
                                                              y'_s85SG [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85SH [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85SF
                                                                                    y'_s85SG
                                                                                    go_dn_s85SH] \r [x_s85SI]
                                                                              case
                                                                                  <# [x_s85SI
                                                                                      y'_s85SG]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85SO [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85SF
                                                                                           go_dn_s85SH
                                                                                           x_s85SI] \u []
                                                                                              case
                                                                                                  +# [x_s85SI
                                                                                                      delta_s85SF]
                                                                                              of
                                                                                              sat_s85SN
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85SH
                                                                                                        sat_s85SN;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85SM [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85SI] \u []
                                                                                              case
                                                                                                  >=# [x_s85SI
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85SI;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85SI
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85SI;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85SI];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85SM
                                                                                         sat_s85SO];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85SR [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85SI] \u []
                                                                                              case
                                                                                                  >=# [x_s85SI
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85SI;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85SI
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85SI;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85SI];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85SR
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85SH x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85SE [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85SE sat_s85SS];
                                          1# ->
                                              case ># [2# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85SW [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85SW GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Te [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85T1 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85T1]
                                                              of
                                                              y'_s85T2 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85T3 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85T1
                                                                                    y'_s85T2
                                                                                    go_up_s85T3] \r [x_s85T4]
                                                                              case
                                                                                  ># [x_s85T4
                                                                                      y'_s85T2]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Ta [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85T1
                                                                                           go_up_s85T3
                                                                                           x_s85T4] \u []
                                                                                              case
                                                                                                  +# [x_s85T4
                                                                                                      delta_s85T1]
                                                                                              of
                                                                                              sat_s85T9
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85T3
                                                                                                        sat_s85T9;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85T8 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85T4] \u []
                                                                                              case
                                                                                                  >=# [x_s85T4
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85T4;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85T4
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85T4;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85T4];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85T8
                                                                                         sat_s85Ta];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Td [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85T4] \u []
                                                                                              case
                                                                                                  >=# [x_s85T4
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85T4;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85T4
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85T4;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85T4];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Td
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85T3 x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85T0 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85T0 sat_s85Te];
                                          1# ->
                                              case <# [2# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Ti [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Ti GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s85R1 of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s85R5 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s85R5 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s85R5 2#;
                    };
        } in 
          case x1_s85R0 of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85R3 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85R3 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85R3 2#;
          };

GHC.IO.Device.$fEnumSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.Device.$fEnumSeekMode_$csucc
                                    GHC.IO.Device.$fEnumSeekMode_$cpred
                                    GHC.IO.Device.$fEnumSeekMode_$ctoEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cfromEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFrom
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo];

GHC.IO.Device.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule4];

GHC.IO.Device.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule2];

GHC.IO.Device.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Device.$trModule3
                                     GHC.IO.Device.$trModule1];

$krep_r81ZU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep1_r81ZV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep2_r81ZW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep3_r81ZX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep4_r81ZY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep5_r81ZZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep6_r8200 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r81ZX GHC.Types.[]];

$krep7_r8201 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep6_r8200];

$krep8_r8202 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r81ZV GHC.Types.[]];

$krep9_r8203 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r8202];

$krep10_r8204 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r81ZW GHC.Types.[]];

$krep11_r8205 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep10_r8204];

$krep12_r8206 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r81ZY GHC.Types.[]];

$krep13_r8207 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r8206];

$krep14_r8208 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8200];

$krep15_r8209 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r8208 GHC.Types.[]];

$krep16_r820a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep15_r8209];

$krep17_r820b :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r81ZU GHC.Types.[]];

$krep18_r820c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep17_r820b];

$krep19_r820d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep11_r8205];

$krep20_r820e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep7_r8201];

$krep21_r820f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep13_r8207];

$krep22_r820g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep16_r820a];

$krep23_r820h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep11_r8205];

$krep24_r820i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep21_r820f];

$krep25_r820j :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r81ZV $krep11_r8205];

$krep26_r820k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep19_r820d];

$krep27_r820l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep20_r820e];

$krep28_r820m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep22_r820g];

GHC.IO.Device.$tcIODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep5_r81ZZ];

$krep29_r820n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep30_r820o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep28_r820m];

$krep31_r820p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep27_r820l];

$krep32_r820q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep26_r820k];

$krep33_r820r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep25_r820j];

$krep34_r820s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep24_r820i];

$krep35_r820t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep23_r820h];

$krep36_r820u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep11_r8205];

$krep37_r820v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep13_r8207];

$krep38_r820w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep9_r8203];

$krep39_r820x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep29_r820n GHC.Types.[]];

$krep40_r820y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep39_r820x];

$krep41_r820z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep40_r820y];

$krep42_r820A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep41_r820z];

GHC.IO.Device.$tcRawIO2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RawIO"#;

GHC.IO.Device.$tcRawIO1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcRawIO2];

GHC.IO.Device.$tcRawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15458836890887680490##
                                    11407217875184880147##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcRawIO1
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep43_r820B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcRawIO
                                              $krep39_r820x];

$krep44_r820C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep43_r820B];

$krep45_r820D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep32_r820q $krep44_r820C];

$krep46_r820E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep30_r820o $krep45_r820D];

GHC.IO.Device.$tc'C:RawIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep46_r820E];

GHC.IO.Device.$tc'C:RawIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:RawIO"#;

GHC.IO.Device.$tc'C:RawIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:RawIO3];

GHC.IO.Device.$tc'C:RawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6403037956050298954##
                                    14520964482680400738##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:RawIO2
                                    1#
                                    GHC.IO.Device.$tc'C:RawIO1];

GHC.IO.Device.$tcIODeviceType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODeviceType"#;

GHC.IO.Device.$tcIODeviceType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODeviceType2];

GHC.IO.Device.$tcIODeviceType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4175968526489202383##
                                    17718566430225243048##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODeviceType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'Directory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODeviceType
                                              GHC.Types.[]];

GHC.IO.Device.$tc'Directory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Directory"#;

GHC.IO.Device.$tc'Directory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Directory3];

GHC.IO.Device.$tc'Directory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12008838926528382233##
                                    639950492613404225##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Directory2
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'Stream2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Stream"#;

GHC.IO.Device.$tc'Stream1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Stream2];

GHC.IO.Device.$tc'Stream :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [39573928359804366##
                                    741010449601335383##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Stream1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RegularFile2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RegularFile"#;

GHC.IO.Device.$tc'RegularFile1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RegularFile2];

GHC.IO.Device.$tc'RegularFile :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2184574052715259025##
                                    14349593064521146856##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RegularFile1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RawDevice2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RawDevice"#;

GHC.IO.Device.$tc'RawDevice1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RawDevice2];

GHC.IO.Device.$tc'RawDevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13599710032796319976##
                                    8789152980205417013##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RawDevice1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

$krep47_r820F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$tc'Directory1 GHC.Types.[]];

$krep48_r820G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep47_r820F];

$krep49_r820H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep48_r820G];

GHC.IO.Device.$tcSeekMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekMode"#;

GHC.IO.Device.$tcSeekMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcSeekMode2];

GHC.IO.Device.$tcSeekMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17698211299654630015##
                                    5588778824401988676##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcSeekMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'AbsoluteSeek1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcSeekMode
                                              GHC.Types.[]];

GHC.IO.Device.$tc'AbsoluteSeek3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AbsoluteSeek"#;

GHC.IO.Device.$tc'AbsoluteSeek2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'AbsoluteSeek3];

GHC.IO.Device.$tc'AbsoluteSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5610789579148926753##
                                    3433733041722086784##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'AbsoluteSeek2
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'RelativeSeek2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RelativeSeek"#;

GHC.IO.Device.$tc'RelativeSeek1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RelativeSeek2];

GHC.IO.Device.$tc'RelativeSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15906895381304752726##
                                    1738065871578000433##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RelativeSeek1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'SeekFromEnd2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SeekFromEnd"#;

GHC.IO.Device.$tc'SeekFromEnd1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'SeekFromEnd2];

GHC.IO.Device.$tc'SeekFromEnd :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16344961357916628519##
                                    5039033320700315004##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'SeekFromEnd1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

$krep50_r820I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Device.$tc'AbsoluteSeek1
                                         $krep25_r820j];

$krep51_r820J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep50_r820I];

GHC.IO.Device.$tcIODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODevice"#;

GHC.IO.Device.$tcIODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODevice3];

GHC.IO.Device.$tcIODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4764642859795697036##
                                    7163668738257247953##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODevice2
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep52_r820K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep39_r820x];

$krep53_r820L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep42_r820A $krep52_r820K];

$krep54_r820M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r820z $krep53_r820L];

$krep55_r820N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep49_r820H $krep54_r820M];

$krep56_r820O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep55_r820N];

$krep57_r820P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep56_r820O];

$krep58_r820Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep57_r820P];

$krep59_r820R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep33_r820r $krep58_r820Q];

$krep60_r820S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep59_r820R];

$krep61_r820T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep60_r820S];

$krep62_r820U :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep51_r820J $krep61_r820T];

$krep63_r820V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep62_r820U];

$krep64_r820W :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep63_r820V];

$krep65_r820X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep36_r820u $krep64_r820W];

GHC.IO.Device.$tc'C:IODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r820s $krep65_r820X];

GHC.IO.Device.$tc'C:IODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IODevice"#;

GHC.IO.Device.$tc'C:IODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:IODevice3];

GHC.IO.Device.$tc'C:IODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15352604720075066134##
                                    14084350618605203122##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:IODevice2
                                    1#
                                    GHC.IO.Device.$tc'C:IODevice1];

GHC.IO.Device.AbsoluteSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.AbsoluteSeek! [];

GHC.IO.Device.RelativeSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RelativeSeek! [];

GHC.IO.Device.SeekFromEnd :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.SeekFromEnd! [];

GHC.IO.Device.Directory :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Directory! [];

GHC.IO.Device.Stream :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Stream! [];

GHC.IO.Device.RegularFile :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RegularFile! [];

GHC.IO.Device.RawDevice :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RawDevice! [];

GHC.IO.Device.C:IODevice
  :: forall a.
     (a
      -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a
         -> GHC.IO.Device.SeekMode
         -> GHC.Integer.Type.Integer
         -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Integer.Type.Integer -> GHC.Types.IO ())
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.IO.Device.IODeviceType)
     -> (a -> GHC.Types.IO a)
     -> (a -> a -> GHC.Types.IO a)
     -> GHC.IO.Device.IODevice a
[GblId[DataCon],
 Arity=14,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Device.C:IODevice [eta_Be
                                  eta_Bd
                                  eta_Bc
                                  eta_Bb
                                  eta_Ba
                                  eta_B9
                                  eta_B8
                                  eta_B7
                                  eta_B6
                                  eta_B5
                                  eta_B4
                                  eta_B3
                                  eta_B2
                                  eta_B1];

GHC.IO.Device.C:RawIO
  :: forall a.
     (a
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Types.Int
      -> GHC.Types.IO GHC.Types.Int)
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int))
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ())
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO GHC.Types.Int)
     -> GHC.IO.Device.RawIO a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Device.C:RawIO [eta_B4 eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:03:13.205455157 UTC

GHC.IO.Device.ready
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLLLLLLLLLL),U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85HA]
        case v_s85HA of {
          GHC.IO.Device.C:IODevice v_s85HC [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85HC;
        };

GHC.IO.Device.close
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLLLLLLLLLL),U(A,U,A,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85HQ]
        case v_s85HQ of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   v_s85HT [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85HT;
        };

GHC.IO.Device.isTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLLLLLLLLLL),U(A,A,U,A,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85I6]
        case v_s85I6 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Ia [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Ia;
        };

GHC.IO.Device.isSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLLLLLLLLLL),U(A,A,A,U,A,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85Im]
        case v_s85Im of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Ir [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Ir;
        };

GHC.IO.Device.seek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSLLLLLLLLL),U(A,A,A,A,U,A,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85IC]
        case v_s85IC of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85II [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85II;
        };

GHC.IO.Device.tell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLSLLLLLLLL),U(A,A,A,A,A,U,A,A,A,A,A,A,A,A)>] =
    [] \r [v_s85IS]
        case v_s85IS of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85IZ [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85IZ;
        };

GHC.IO.Device.getSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLSLLLLLLL),U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)>] =
    [] \r [v_s85J8]
        case v_s85J8 of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Jg [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Jg;
        };

GHC.IO.Device.setSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLSLLLLLL),U(A,A,A,A,A,A,A,U,A,A,A,A,A,A)>] =
    [] \r [v_s85Jo]
        case v_s85Jo of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Jx [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Jx;
        };

GHC.IO.Device.setEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLSLLLLL),U(A,A,A,A,A,A,A,A,U,A,A,A,A,A)>] =
    [] \r [v_s85JE]
        case v_s85JE of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85JO [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85JO;
        };

GHC.IO.Device.getEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLSLLLL),U(A,A,A,A,A,A,A,A,A,U,A,A,A,A)>] =
    [] \r [v_s85JU]
        case v_s85JU of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85K5 [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85K5;
        };

GHC.IO.Device.setRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLSLLL),U(A,A,A,A,A,A,A,A,A,A,U,A,A,A)>] =
    [] \r [v_s85Ka]
        case v_s85Ka of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Km [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85Km;
        };

GHC.IO.Device.devType
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.IO.Device.IODeviceType
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLSLL),U(A,A,A,A,A,A,A,A,A,A,A,U,A,A)>] =
    [] \r [v_s85Kq]
        case v_s85Kq of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85KD [Occ=Once]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead] ->
              v_s85KD;
        };

GHC.IO.Device.dup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLSL),U(A,A,A,A,A,A,A,A,A,A,A,A,U,A)>] =
    [] \r [v_s85KG]
        case v_s85KG of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85KU [Occ=Once]
                                   _ [Occ=Dead] ->
              v_s85KU;
        };

GHC.IO.Device.dup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLLLLLLLLLS),U(A,A,A,A,A,A,A,A,A,A,A,A,A,U)>] =
    [] \r [v_s85KW]
        case v_s85KW of {
          GHC.IO.Device.C:IODevice _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   _ [Occ=Dead]
                                   v_s85Lb [Occ=Once] ->
              v_s85Lb;
        };

GHC.IO.Device.read
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLL),U(U,A,A,A)>] =
    [] \r [v_s85Lc]
        case v_s85Lc of {
          GHC.IO.Device.C:RawIO v_s85Le [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s85Le;
        };

GHC.IO.Device.readNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLL),U(A,U,A,A)>] =
    [] \r [v_s85Li]
        case v_s85Li of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                v_s85Ll [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              v_s85Ll;
        };

GHC.IO.Device.write
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ()
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSL),U(A,A,U,A)>] =
    [] \r [v_s85Lo]
        case v_s85Lo of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s85Ls [Occ=Once]
                                _ [Occ=Dead] ->
              v_s85Ls;
        };

GHC.IO.Device.writeNonBlocking
  :: forall a.
     GHC.IO.Device.RawIO a =>
     a
     -> GHC.Ptr.Ptr GHC.Word.Word8
     -> GHC.Types.Int
     -> GHC.Types.IO GHC.Types.Int
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLS),U(A,A,A,U)>] =
    [] \r [v_s85Lu]
        case v_s85Lu of {
          GHC.IO.Device.C:RawIO _ [Occ=Dead]
                                _ [Occ=Dead]
                                _ [Occ=Dead]
                                v_s85Lz [Occ=Once] ->
              v_s85Lz;
        };

GHC.IO.Device.$fReadSeekMode16 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AbsoluteSeek"#;

GHC.IO.Device.$fReadSeekMode15 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode16;

GHC.IO.Device.$fReadSeekMode12 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RelativeSeek"#;

GHC.IO.Device.$fReadSeekMode11 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode12;

GHC.IO.Device.$fReadSeekMode8 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekFromEnd"#;

GHC.IO.Device.$fReadSeekMode7 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$fReadSeekMode8;

GHC.IO.Device.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s85LA w1_s85LB]
        case w_s85LA of {
          GHC.IO.Device.AbsoluteSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode15 w1_s85LB;
          GHC.IO.Device.RelativeSeek ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode11 w1_s85LB;
          GHC.IO.Device.SeekFromEnd ->
              GHC.Base.++ GHC.IO.Device.$fReadSeekMode7 w1_s85LB;
        };

GHC.IO.Device.$fShowSeekMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s85LD w1_s85LE w2_s85LF]
        GHC.IO.Device.$w$cshowsPrec w1_s85LE w2_s85LF;

GHC.IO.Device.$fShowSeekMode_$cshow
  :: GHC.IO.Device.SeekMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s85LG]
        case x_s85LG of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fReadSeekMode15;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fReadSeekMode11;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fReadSeekMode7;
        };

GHC.IO.Device.$fShowSeekMode_$cshowList
  :: [GHC.IO.Device.SeekMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s85LI s_s85LJ]
        GHC.Show.showList__ GHC.IO.Device.$w$cshowsPrec ls_s85LI s_s85LJ;

GHC.IO.Device.$fShowSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.Device.$fShowSeekMode_$cshowsPrec
                                    GHC.IO.Device.$fShowSeekMode_$cshow
                                    GHC.IO.Device.$fShowSeekMode_$cshowList];

GHC.IO.Device.$fReadSeekMode14
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s85LK k_s85LL] k_s85LL GHC.IO.Device.AbsoluteSeek;

GHC.IO.Device.$fReadSeekMode13
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode15
                        GHC.IO.Device.$fReadSeekMode14];

GHC.IO.Device.$fReadSeekMode10
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s85LM k_s85LN] k_s85LN GHC.IO.Device.RelativeSeek;

GHC.IO.Device.$fReadSeekMode9
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode11
                        GHC.IO.Device.$fReadSeekMode10];

GHC.IO.Device.$fReadSeekMode6
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s85LO k_s85LP] k_s85LP GHC.IO.Device.SeekFromEnd;

GHC.IO.Device.$fReadSeekMode5
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.Device.$fReadSeekMode7
                        GHC.IO.Device.$fReadSeekMode6];

GHC.IO.Device.$fReadSeekMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode5 GHC.Types.[]];

GHC.IO.Device.$fReadSeekMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode9
                      GHC.IO.Device.$fReadSeekMode4];

GHC.IO.Device.$fReadSeekMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.Device.SeekMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$fReadSeekMode13
                      GHC.IO.Device.$fReadSeekMode3];

GHC.IO.Device.$fReadSeekMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s85LQ]
        GHC.Read.choose2 GHC.IO.Device.$fReadSeekMode_sps eta_s85LQ;

GHC.IO.Device.$fReadSeekMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.Device.SeekMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.Device.$fReadSeekMode2 eta_B2 eta_B1;

GHC.IO.Device.$fReadSeekMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s85LR]
        let {
          sat_s85LS [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.Device.SeekMode
          [LclId] =
              [n_s85LR] \u []
                  GHC.Read.list3
                      GHC.IO.Device.$fReadSeekMode2
                      n_s85LR
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s85LS;

GHC.IO.Device.$fReadSeekMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec
       [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.Device.$fReadSeekMode1;

GHC.IO.Device.$fReadSeekMode17
  :: Text.ParserCombinators.ReadP.P [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u []
        GHC.IO.Device.$fReadSeekMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.Device.$fReadSeekMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.Device.$fReadSeekMode17 eta_B1;

GHC.IO.Device.$fReadSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.Device.$fReadSeekMode_$creadsPrec
                                    GHC.IO.Device.$fReadSeekMode_$creadList
                                    GHC.IO.Device.$fReadSeekMode1
                                    GHC.IO.Device.$fReadSeekMode_$creadListPrec];

GHC.IO.Device.$fEqSeekMode_$c==
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s85LT ds1_s85LU]
        case ds_s85LT of {
          GHC.IO.Device.AbsoluteSeek ->
              case ds1_s85LU of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case ds1_s85LU of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case ds1_s85LU of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqSeekMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s85LZ eta1_s85M0]
        case eta_s85LZ of {
          GHC.IO.Device.AbsoluteSeek ->
              case eta1_s85M0 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.RelativeSeek ->
              case eta1_s85M0 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.False [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case eta1_s85M0 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqSeekMode_$c==
                                     GHC.IO.Device.$fEqSeekMode_$c/=];

GHC.IO.Device.$fEqIODeviceType_$c==
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s85M5 ds1_s85M6]
        case ds_s85M5 of {
          GHC.IO.Device.Directory ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Directory -> GHC.Types.True [];
              };
          GHC.IO.Device.Stream ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.Stream -> GHC.Types.True [];
              };
          GHC.IO.Device.RegularFile ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RegularFile -> GHC.Types.True [];
              };
          GHC.IO.Device.RawDevice ->
              case ds1_s85M6 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.RawDevice -> GHC.Types.True [];
              };
        };

GHC.IO.Device.$fEqIODeviceType_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.Device.IODeviceType
     -> GHC.IO.Device.IODeviceType -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s85Mc eta1_s85Md]
        case eta_s85Mc of {
          GHC.IO.Device.Directory ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Directory -> GHC.Types.False [];
              };
          GHC.IO.Device.Stream ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.Stream -> GHC.Types.False [];
              };
          GHC.IO.Device.RegularFile ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RegularFile -> GHC.Types.False [];
              };
          GHC.IO.Device.RawDevice ->
              case eta1_s85Md of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.Device.RawDevice -> GHC.Types.False [];
              };
        };

GHC.IO.Device.$fEqIODeviceType [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.Device.IODeviceType
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.Device.$fEqIODeviceType_$c==
                                     GHC.IO.Device.$fEqIODeviceType_$c/=];

$dmisSeekable1_r81Zn
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85Mj ds_s85Mk void_0E]
        Unit# [GHC.Types.False];

GHC.IO.Device.$dmisSeekable
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmisSeekable1_r81Zn eta_B3 eta_B2 GHC.Prim.void#;

$dmisTerminal1_r81Zo
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85Mm ds_s85Mn void_0E]
        Unit# [GHC.Types.False];

GHC.IO.Device.$dmisTerminal
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,A><L,A><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmisTerminal1_r81Zo eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Device.$dmdup1
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [void_0E]
        GHC.IO.throwIO1
            GHC.IO.Exception.$fxExceptionIOException
            GHC.IO.Exception.unsupportedOperation
            GHC.Prim.void#;

$dmseek1_r81Zp
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85Mq eta1_s85Mr eta2_s85Ms eta3_s85Mt void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmseek
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.IO.Device.SeekMode
     -> GHC.Integer.Type.Integer
     -> GHC.Types.IO ()
[GblId, Arity=5, Str=<B,A><B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        $dmseek1_r81Zp eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmtell1_r81Zq
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85Mv eta1_s85Mw void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmtell
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmtell1_r81Zq eta_B3 eta_B2 GHC.Prim.void#;

$dmgetSize1_r81Zr
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Integer.Type.Integer #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85My ds_s85Mz void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmgetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Integer.Type.Integer
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmgetSize1_r81Zr eta_B3 eta_B2 GHC.Prim.void#;

$dmsetSize1_r81Zs
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Integer.Type.Integer
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MB eta1_s85MC eta2_s85MD void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmsetSize
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Integer.Type.Integer -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmsetSize1_r81Zs eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmsetEcho1_r81Zt
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MF eta1_s85MG eta2_s85MH void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmsetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmsetEcho1_r81Zt eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmgetEcho1_r81Zu
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MJ eta1_s85MK void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmgetEcho
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.IO GHC.Types.Bool
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmgetEcho1_r81Zu eta_B3 eta_B2 GHC.Prim.void#;

$dmsetRaw1_r81Zv
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Types.Bool
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [$dIODevice_s85MM ds_s85MN ds1_s85MO void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmsetRaw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a -> GHC.Types.Bool -> GHC.Types.IO ()
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmsetRaw1_r81Zv eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

$dmdup3_r81Zw
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MQ eta1_s85MR void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmdup
  :: forall a. GHC.IO.Device.IODevice a => a -> GHC.Types.IO a
[GblId, Arity=3, Str=<B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        $dmdup3_r81Zw eta_B3 eta_B2 GHC.Prim.void#;

$dmdup4_r81Zx
  :: forall a.
     GHC.IO.Device.IODevice a =>
     a
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    sat-only [] \r [eta_s85MT eta1_s85MU eta2_s85MV void_0E]
        GHC.IO.Device.$dmdup1 GHC.Prim.void#;

GHC.IO.Device.$dmdup2
  :: forall a. GHC.IO.Device.IODevice a => a -> a -> GHC.Types.IO a
[GblId, Arity=4, Str=<B,A><B,A><B,A><B,U>x, Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmdup4_r81Zx eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.Device.$fOrdSeekMode_$ccompare
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85MX b_s85MY]
        case a_s85MX of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s85MY of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.EQ [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.LT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s85MY of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.GT [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.EQ [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.LT [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s85MY of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.EQ [];
              };
        };

GHC.IO.Device.$fOrdSeekMode_$c<
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85N3 b_s85N4]
        case a_s85N3 of {
          GHC.IO.Device.AbsoluteSeek ->
              case b_s85N4 of {
                GHC.IO.Device.AbsoluteSeek -> GHC.Types.False [];
                GHC.IO.Device.RelativeSeek -> GHC.Types.True [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.RelativeSeek ->
              case b_s85N4 of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.Device.SeekFromEnd -> GHC.Types.True [];
              };
          GHC.IO.Device.SeekFromEnd ->
              case b_s85N4 of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.Device.$fOrdSeekMode_$c<=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85N9 b_s85Na]
        let-no-escape {
          $j_s85Nb [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [a_s85N9] \r [a#_s85Nc]
                  case a_s85N9 of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s85Nc 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s85Nc 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s85Nc 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case b_s85Na of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Nb 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Nb 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Nb 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$cmax
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s85Ni y_s85Nj]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s85Ni y_s85Nj of {
          GHC.Types.False -> x_s85Ni;
          GHC.Types.True -> y_s85Nj;
        };

GHC.IO.Device.$fOrdSeekMode_$c>=
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85Nl b_s85Nm]
        let-no-escape {
          $j_s85Nn [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s85Nm] \r [a#_s85No]
                  case b_s85Nm of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case <# [a#_s85No 0#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case <# [a#_s85No 1#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case <# [a#_s85No 2#] of {
                          __DEFAULT -> GHC.Types.True [];
                          1# -> GHC.Types.False [];
                        };
                  };
        } in 
          case a_s85Nl of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Nn 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Nn 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Nn 2#;
          };

GHC.IO.Device.$fOrdSeekMode_$c>
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85Nu b_s85Nv]
        GHC.IO.Device.$fOrdSeekMode_$c< b_s85Nv a_s85Nu;

GHC.IO.Device.$fOrdSeekMode_$cmin
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s85Nw y_s85Nx]
        case GHC.IO.Device.$fOrdSeekMode_$c<= x_s85Nw y_s85Nx of {
          GHC.Types.False -> y_s85Nx;
          GHC.Types.True -> x_s85Nw;
        };

GHC.IO.Device.$fOrdSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.Device.SeekMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.Device.$fEqSeekMode
                                      GHC.IO.Device.$fOrdSeekMode_$ccompare
                                      GHC.IO.Device.$fOrdSeekMode_$c<
                                      GHC.IO.Device.$fOrdSeekMode_$c<=
                                      GHC.IO.Device.$fOrdSeekMode_$c>
                                      GHC.IO.Device.$fOrdSeekMode_$c>=
                                      GHC.IO.Device.$fOrdSeekMode_$cmax
                                      GHC.IO.Device.$fOrdSeekMode_$cmin];

GHC.IO.Device.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85Nz w_s85NA]
        case ww_s85Nz of {
          GHC.IO.Device.AbsoluteSeek ->
              case w_s85NA of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.RelativeSeek ->
              case w_s85NA of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case w_s85NA of {
                GHC.IO.Device.AbsoluteSeek -> -2#;
                GHC.IO.Device.RelativeSeek -> -1#;
                GHC.IO.Device.SeekFromEnd -> 0#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s85NF w1_s85NG]
        case w_s85NF of {
          (,) ww1_s85NI [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.Device.$w$cunsafeIndex ww1_s85NI w1_s85NG
              of
              ww3_s85NK
              { __DEFAULT -> GHC.Types.I# [ww3_s85NK];
              };
        };

GHC.IO.Device.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85NL ww1_s85NM w_s85NN]
        let-no-escape {
          $j_s85NO [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s85NM w_s85NN] \r [a#_s85NP]
                  let-no-escape {
                    $j1_s85NQ [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s85NN a#_s85NP] \r [b#_s85NR]
                            case w_s85NN of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [0# a#_s85NP] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s85NR] of sat_s85NU {
                                          __DEFAULT -> tagToEnum# [sat_s85NU];
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [1# a#_s85NP] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s85NR] of sat_s85NW {
                                          __DEFAULT -> tagToEnum# [sat_s85NW];
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [2# a#_s85NP] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s85NR] of sat_s85NY {
                                          __DEFAULT -> tagToEnum# [sat_s85NY];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s85NM of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s85NQ 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s85NQ 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s85NQ 2#;
                    };
        } in 
          case ww_s85NL of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85NO 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85NO 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85NO 2#;
          };

GHC.IO.Device.$fIxSeekMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s85O1 w1_s85O2]
        case w_s85O1 of {
          (,) ww1_s85O4 [Occ=Once] ww2_s85O5 [Occ=Once] ->
              GHC.IO.Device.$w$cinRange ww1_s85O4 ww2_s85O5 w1_s85O2;
        };

lvl_r81Zy :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r81Zz :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r81ZA :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

GHC.IO.Device.$fEnumSeekMode_$cfromEnum
  :: GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s85O6]
        case a_s85O6 of {
          GHC.IO.Device.AbsoluteSeek -> lvl_r81Zy;
          GHC.IO.Device.RelativeSeek -> lvl1_r81Zz;
          GHC.IO.Device.SeekFromEnd -> lvl2_r81ZA;
        };

GHC.IO.Device.$fIxSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85O8]
        let {
          sat_s85Oc [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85O8] \u []
                  case x_s85O8 of wild_s85Oa {
                    __DEFAULT ->
                        case +# [wild_s85Oa 1#] of sat_s85Ob {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 sat_s85Ob;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s85O9 [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85O8] \u [] tagToEnum# [x_s85O8];
        } in  : [sat_s85O9 sat_s85Oc];

GHC.IO.Device.$fIxSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85Od]
        let {
          sat_s85Oh [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85Od] \u []
                  case x_s85Od of wild_s85Of {
                    __DEFAULT ->
                        case +# [wild_s85Of 1#] of sat_s85Og {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go sat_s85Og;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s85Oe [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85Od] \u [] tagToEnum# [x_s85Od];
        } in  : [sat_s85Oe sat_s85Oh];

GHC.IO.Device.$fEnumSeekMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85Oi]
        let {
          sat_s85Om [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85Oi] \u []
                  case x_s85Oi of wild_s85Ok {
                    __DEFAULT ->
                        case +# [wild_s85Ok 1#] of sat_s85Ol {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 sat_s85Ol;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s85Oj [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85Oi] \u [] tagToEnum# [x_s85Oi];
        } in  : [sat_s85Oj sat_s85Om];

GHC.IO.Device.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85On ww1_s85Oo]
        let-no-escape {
          $j_s85Op [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s85Oo] \r [a#_s85Oq]
                  case ww1_s85Oo of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [a#_s85Oq 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go1 a#_s85Oq;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [a#_s85Oq 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fIxSeekMode_go a#_s85Oq;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [a#_s85Oq 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go3 a#_s85Oq;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s85On of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Op 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Op 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Op 2#;
          };

GHC.IO.Device.$fIxSeekMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s85Ow]
        case w_s85Ow of {
          (,) ww1_s85Oy [Occ=Once] ww2_s85Oz [Occ=Once] ->
              GHC.IO.Device.$w$crange ww1_s85Oy ww2_s85Oz;
        };

GHC.IO.Device.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s85OA ww1_s85OB]
        case GHC.IO.Device.$w$cinRange ww_s85OA ww1_s85OB ww1_s85OB of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s85OA of {
                GHC.IO.Device.AbsoluteSeek ->
                    case ww1_s85OB of {
                      GHC.IO.Device.AbsoluteSeek -> 1#;
                      GHC.IO.Device.RelativeSeek -> 2#;
                      GHC.IO.Device.SeekFromEnd -> 3#;
                    };
                GHC.IO.Device.RelativeSeek ->
                    case ww1_s85OB of {
                      GHC.IO.Device.AbsoluteSeek -> 0#;
                      GHC.IO.Device.RelativeSeek -> 1#;
                      GHC.IO.Device.SeekFromEnd -> 2#;
                    };
                GHC.IO.Device.SeekFromEnd ->
                    case ww1_s85OB of {
                      GHC.IO.Device.AbsoluteSeek -> -1#;
                      GHC.IO.Device.RelativeSeek -> 0#;
                      GHC.IO.Device.SeekFromEnd -> 1#;
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s85OH]
        case w_s85OH of {
          (,) ww1_s85OJ [Occ=Once] ww2_s85OK [Occ=Once] ->
              case GHC.IO.Device.$w$crangeSize ww1_s85OJ ww2_s85OK of ww3_s85OL {
                __DEFAULT -> GHC.Types.I# [ww3_s85OL];
              };
        };

GHC.IO.Device.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s85OM ww1_s85ON]
        case ww_s85OM of {
          GHC.IO.Device.AbsoluteSeek ->
              case ww1_s85ON of {
                GHC.IO.Device.AbsoluteSeek -> 1#;
                GHC.IO.Device.RelativeSeek -> 2#;
                GHC.IO.Device.SeekFromEnd -> 3#;
              };
          GHC.IO.Device.RelativeSeek ->
              case ww1_s85ON of {
                GHC.IO.Device.AbsoluteSeek -> 0#;
                GHC.IO.Device.RelativeSeek -> 1#;
                GHC.IO.Device.SeekFromEnd -> 2#;
              };
          GHC.IO.Device.SeekFromEnd ->
              case ww1_s85ON of {
                GHC.IO.Device.AbsoluteSeek -> -1#;
                GHC.IO.Device.RelativeSeek -> 0#;
                GHC.IO.Device.SeekFromEnd -> 1#;
              };
        };

GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s85OS]
        case w_s85OS of {
          (,) ww1_s85OU [Occ=Once] ww2_s85OV [Occ=Once] ->
              case
                  GHC.IO.Device.$w$cunsafeRangeSize ww1_s85OU ww2_s85OV
              of
              ww3_s85OW
              { __DEFAULT -> GHC.Types.I# [ww3_s85OW];
              };
        };

GHC.IO.Device.$fIxSeekMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.Device.SeekMode, GHC.IO.Device.SeekMode)
     -> GHC.IO.Device.SeekMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s85OX eta1_s85OY]
        case eta_s85OX of {
          (,) ww1_s85P0 ww2_s85P1 [Occ=Once] ->
              case GHC.IO.Device.$w$cinRange ww1_s85P0 ww2_s85P1 eta1_s85OY of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.Device.$w$cunsafeIndex ww1_s85P0 eta1_s85OY
                    of
                    ww3_s85P3
                    { __DEFAULT -> GHC.Types.I# [ww3_s85P3];
                    };
              };
        };

GHC.IO.Device.$fIxSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.Device.$fOrdSeekMode
                                 GHC.IO.Device.$fIxSeekMode_$crange
                                 GHC.IO.Device.$fIxSeekMode_$cindex
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeIndex
                                 GHC.IO.Device.$fIxSeekMode_$cinRange
                                 GHC.IO.Device.$fIxSeekMode_$crangeSize
                                 GHC.IO.Device.$fIxSeekMode_$cunsafeRangeSize];

lvl3_r81ZB :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl4_r81ZC :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl3_r81ZB;

GHC.IO.Device.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl5_r81ZD :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule4;

GHC.IO.Device.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.Device"#;

lvl6_r81ZE :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.Device.$trModule2;

lvl7_r81ZF :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/Device.hs"#;

lvl8_r81ZG :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl7_r81ZF;

lvl9_r81ZH :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [173#];

lvl10_r81ZI :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [16#];

lvl11_r81ZJ :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [20#];

lvl12_r81ZK :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl5_r81ZD
                                           lvl6_r81ZE
                                           lvl8_r81ZG
                                           lvl9_r81ZH
                                           lvl10_r81ZI
                                           lvl9_r81ZH
                                           lvl11_r81ZJ];

lvl13_r81ZL :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl4_r81ZC
                                                  lvl12_r81ZK
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r81ZM :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{SeekMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode4 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r81ZM of sat_s85P4 {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s85P4;
        };

GHC.IO.Device.$fEnumSeekMode_$cpred
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s85P5]
        case a_s85P5 of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode4;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.AbsoluteSeek [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.RelativeSeek [];
        };

lvl15_r81ZN :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{SeekMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.Device.$fEnumSeekMode5 :: GHC.IO.Device.SeekMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r81ZN of sat_s85P7 {
          __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s85P7;
        };

GHC.IO.Device.$fEnumSeekMode_$csucc
  :: GHC.IO.Device.SeekMode -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s85P8]
        case a_s85P8 of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.RelativeSeek [];
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.SeekFromEnd [];
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode5;
        };

lvl16_r81ZO :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r81ZP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r81ZQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r81ZP;

lvl19_r81ZR :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 2# lvl18_r81ZQ of {
          (#,#) ww5_s85Pb [Occ=Once] ww6_s85Pc [Occ=Once] ->
              : [ww5_s85Pb ww6_s85Pc];
        };

lvl20_r81ZS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r81ZO lvl19_r81ZR;

lvl21_r81ZT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{SeekMode}: tag ("#;

GHC.IO.Device.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s85Pd]
        let {
          sat_s85Ph [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s85Pd] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s85Pd lvl20_r81ZS of {
                    (#,#) ww5_s85Pf [Occ=Once] ww6_s85Pg [Occ=Once] ->
                        : [ww5_s85Pf ww6_s85Pg];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r81ZT sat_s85Ph
          of
          sat_s85Pi
          { __DEFAULT -> GHC.Err.error lvl13_r81ZL sat_s85Pi;
          };

GHC.IO.Device.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s85Pj]
        case >=# [ww_s85Pj 0#] of {
          __DEFAULT -> GHC.IO.Device.$wlvl ww_s85Pj;
          1# ->
              case <=# [ww_s85Pj 2#] of {
                __DEFAULT -> GHC.IO.Device.$wlvl ww_s85Pj;
                1# -> tagToEnum# [ww_s85Pj];
              };
        };

GHC.IO.Device.$fEnumSeekMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.Device.SeekMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s85Pm]
        case w_s85Pm of {
          GHC.Types.I# ww1_s85Po [Occ=Once] ->
              GHC.IO.Device.$w$ctoEnum ww1_s85Po;
        };

GHC.IO.Device.$fEnumSeekMode3 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 0#;

GHC.IO.Device.$fEnumSeekMode2 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 1#;

GHC.IO.Device.$fEnumSeekMode1 :: [GHC.IO.Device.SeekMode]
[GblId] =
    [] \u [] GHC.IO.Device.$fEnumSeekMode_go3 2#;

GHC.IO.Device.$fEnumSeekMode_$cenumFrom
  :: GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s85Pp]
        case a_s85Pp of {
          GHC.IO.Device.AbsoluteSeek -> GHC.IO.Device.$fEnumSeekMode3;
          GHC.IO.Device.RelativeSeek -> GHC.IO.Device.$fEnumSeekMode2;
          GHC.IO.Device.SeekFromEnd -> GHC.IO.Device.$fEnumSeekMode1;
        };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s85Pr b_s85Ps]
        let-no-escape {
          $j_s85Pt [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s85Ps] \r [a#_s85Pu]
                  let-no-escape {
                    $j1_s85Pv [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s85Pu] \r [b#_s85Pw]
                            case ># [a#_s85Pu b#_s85Pw] of {
                              __DEFAULT ->
                                  case >=# [b#_s85Pw a#_s85Pu] of {
                                    __DEFAULT ->
                                        case ># [2# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85PK [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85PB [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85PB]
                                                              of
                                                              y'_s85PC [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85PD [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85PB
                                                                                    y'_s85PC
                                                                                    go_dn_s85PD] \r [x_s85PE]
                                                                              case
                                                                                  <# [x_s85PE
                                                                                      y'_s85PC]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85PI [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85PB
                                                                                           go_dn_s85PD
                                                                                           x_s85PE] \u []
                                                                                              case
                                                                                                  +# [x_s85PE
                                                                                                      delta_s85PB]
                                                                                              of
                                                                                              sat_s85PH
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85PD
                                                                                                        sat_s85PH;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85PG [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PE] \u []
                                                                                              tagToEnum# [x_s85PE];
                                                                                    } in 
                                                                                      : [sat_s85PG
                                                                                         sat_s85PI];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85PJ [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PE] \u []
                                                                                              tagToEnum# [x_s85PE];
                                                                                    } in 
                                                                                      : [sat_s85PJ
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85PD b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85PA [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85PA sat_s85PK];
                                          1# ->
                                              case ># [2# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85PM [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85PM GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85PY [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85PP [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85PP]
                                                              of
                                                              y'_s85PQ [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85PR [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85PP
                                                                                    y'_s85PQ
                                                                                    go_up_s85PR] \r [x_s85PS]
                                                                              case
                                                                                  ># [x_s85PS
                                                                                      y'_s85PQ]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85PW [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85PP
                                                                                           go_up_s85PR
                                                                                           x_s85PS] \u []
                                                                                              case
                                                                                                  +# [x_s85PS
                                                                                                      delta_s85PP]
                                                                                              of
                                                                                              sat_s85PV
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85PR
                                                                                                        sat_s85PV;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85PU [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PS] \u []
                                                                                              tagToEnum# [x_s85PS];
                                                                                    } in 
                                                                                      : [sat_s85PU
                                                                                         sat_s85PW];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85PX [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85PS] \u []
                                                                                              tagToEnum# [x_s85PS];
                                                                                    } in 
                                                                                      : [sat_s85PX
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85PR b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85PO [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85PO sat_s85PY];
                                          1# ->
                                              case <# [2# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Q0 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85Q0 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s85Pw a#_s85Pu] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Qd [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85Q4 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Q4]
                                                              of
                                                              y'_s85Q5 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85Q6 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Q4
                                                                                    y'_s85Q5
                                                                                    go_dn_s85Q6] \r [x_s85Q7]
                                                                              case
                                                                                  <# [x_s85Q7
                                                                                      y'_s85Q5]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Qb [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Q4
                                                                                           go_dn_s85Q6
                                                                                           x_s85Q7] \u []
                                                                                              case
                                                                                                  +# [x_s85Q7
                                                                                                      delta_s85Q4]
                                                                                              of
                                                                                              sat_s85Qa
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85Q6
                                                                                                        sat_s85Qa;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Q9 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Q7] \u []
                                                                                              tagToEnum# [x_s85Q7];
                                                                                    } in 
                                                                                      : [sat_s85Q9
                                                                                         sat_s85Qb];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Qc [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Q7] \u []
                                                                                              tagToEnum# [x_s85Q7];
                                                                                    } in 
                                                                                      : [sat_s85Qc
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85Q6 b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Q3 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85Q3 sat_s85Qd];
                                          1# ->
                                              case ># [0# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Qf [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85Qf GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s85Pw] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Qr [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [a#_s85Pu b#_s85Pw] \u []
                                                        case
                                                            -# [b#_s85Pw a#_s85Pu]
                                                        of
                                                        delta_s85Qi [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Qi]
                                                              of
                                                              y'_s85Qj [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85Qk [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Qi
                                                                                    y'_s85Qj
                                                                                    go_up_s85Qk] \r [x_s85Ql]
                                                                              case
                                                                                  ># [x_s85Ql
                                                                                      y'_s85Qj]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Qp [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Qi
                                                                                           go_up_s85Qk
                                                                                           x_s85Ql] \u []
                                                                                              case
                                                                                                  +# [x_s85Ql
                                                                                                      delta_s85Qi]
                                                                                              of
                                                                                              sat_s85Qo
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85Qk
                                                                                                        sat_s85Qo;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Qn [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Ql] \u []
                                                                                              tagToEnum# [x_s85Ql];
                                                                                    } in 
                                                                                      : [sat_s85Qn
                                                                                         sat_s85Qp];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Qq [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Ql] \u []
                                                                                              tagToEnum# [x_s85Ql];
                                                                                    } in 
                                                                                      : [sat_s85Qq
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85Qk b#_s85Pw;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Qh [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                              } in  : [sat_s85Qh sat_s85Qr];
                                          1# ->
                                              case <# [0# a#_s85Pu] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Qt [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [a#_s85Pu] \u [] tagToEnum# [a#_s85Pu];
                                                    } in  : [sat_s85Qt GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s85Ps of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s85Pv 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s85Pv 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s85Pv 2#;
                    };
        } in 
          case a_s85Pr of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85Pt 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85Pt 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85Pt 2#;
          };

GHC.IO.Device.$fEnumSeekMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85Qw]
        let {
          sat_s85QC [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85Qw] \u []
                  case x_s85Qw of wild_s85QA {
                    __DEFAULT ->
                        case +# [wild_s85QA 1#] of sat_s85QB {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 sat_s85QB;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s85Qz [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85Qw] \u []
                  case >=# [x_s85Qw 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s85Qw;
                    1# ->
                        case <=# [x_s85Qw 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s85Qw;
                          1# -> tagToEnum# [x_s85Qw];
                        };
                  };
        } in  : [sat_s85Qz sat_s85QC];

GHC.IO.Device.$fEnumSeekMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85QD]
        let {
          sat_s85QJ [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85QD] \u []
                  case x_s85QD of wild_s85QH {
                    __DEFAULT ->
                        case +# [wild_s85QH 1#] of sat_s85QI {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 sat_s85QI;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s85QG [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85QD] \u []
                  case >=# [x_s85QD 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s85QD;
                    1# ->
                        case <=# [x_s85QD 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s85QD;
                          1# -> tagToEnum# [x_s85QD];
                        };
                  };
        } in  : [sat_s85QG sat_s85QJ];

GHC.IO.Device.$fEnumSeekMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s85QK]
        let {
          sat_s85QQ [Occ=Once] :: [GHC.IO.Device.SeekMode]
          [LclId] =
              [x_s85QK] \u []
                  case x_s85QK of wild_s85QO {
                    __DEFAULT ->
                        case +# [wild_s85QO 1#] of sat_s85QP {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go sat_s85QP;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s85QN [Occ=Once] :: GHC.IO.Device.SeekMode
          [LclId] =
              [x_s85QK] \u []
                  case >=# [x_s85QK 0#] of {
                    __DEFAULT -> GHC.IO.Device.$wlvl x_s85QK;
                    1# ->
                        case <=# [x_s85QK 2#] of {
                          __DEFAULT -> GHC.IO.Device.$wlvl x_s85QK;
                          1# -> tagToEnum# [x_s85QK];
                        };
                  };
        } in  : [sat_s85QN sat_s85QQ];

GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode -> [GHC.IO.Device.SeekMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s85QR y_s85QS]
        let-no-escape {
          $j_s85QT [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s85QS] \r [x1_s85QU]
                  case y_s85QS of {
                    GHC.IO.Device.AbsoluteSeek ->
                        case ># [x1_s85QU 0#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go2 x1_s85QU;
                          1# -> [] [];
                        };
                    GHC.IO.Device.RelativeSeek ->
                        case ># [x1_s85QU 1#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go1 x1_s85QU;
                          1# -> [] [];
                        };
                    GHC.IO.Device.SeekFromEnd ->
                        case ># [x1_s85QU 2#] of {
                          __DEFAULT -> GHC.IO.Device.$fEnumSeekMode_go x1_s85QU;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s85QR of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85QT 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85QT 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85QT 2#;
          };

GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo
  :: GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> GHC.IO.Device.SeekMode
     -> [GHC.IO.Device.SeekMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s85R0 x2_s85R1 y_s85R2]
        let-no-escape {
          $j_s85R3 [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s85R1 y_s85R2] \r [x4_s85R4]
                  let-no-escape {
                    $j1_s85R5 [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.Device.SeekMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s85R2 x4_s85R4] \r [x5_s85R6]
                            case y_s85R2 of {
                              GHC.IO.Device.AbsoluteSeek ->
                                  case >=# [x5_s85R6 x4_s85R4] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Rq [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85Rd [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Rd]
                                                              of
                                                              y'_s85Re [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85Rf [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Rd
                                                                                    y'_s85Re
                                                                                    go_dn_s85Rf] \r [x_s85Rg]
                                                                              case
                                                                                  <# [x_s85Rg
                                                                                      y'_s85Re]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Rm [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Rd
                                                                                           go_dn_s85Rf
                                                                                           x_s85Rg] \u []
                                                                                              case
                                                                                                  +# [x_s85Rg
                                                                                                      delta_s85Rd]
                                                                                              of
                                                                                              sat_s85Rl
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85Rf
                                                                                                        sat_s85Rl;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Rk [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Rg] \u []
                                                                                              case
                                                                                                  >=# [x_s85Rg
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Rg;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Rg
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Rg;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Rg];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Rk
                                                                                         sat_s85Rm];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Rp [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Rg] \u []
                                                                                              case
                                                                                                  >=# [x_s85Rg
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Rg;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Rg
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Rg;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Rg];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Rp
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85Rf x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Rc [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85Rc sat_s85Rq];
                                          1# ->
                                              case ># [0# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Ru [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Ru GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85RM [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85Rz [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s85Rz]
                                                              of
                                                              y'_s85RA [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85RB [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Rz
                                                                                    y'_s85RA
                                                                                    go_up_s85RB] \r [x_s85RC]
                                                                              case
                                                                                  ># [x_s85RC
                                                                                      y'_s85RA]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85RI [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Rz
                                                                                           go_up_s85RB
                                                                                           x_s85RC] \u []
                                                                                              case
                                                                                                  +# [x_s85RC
                                                                                                      delta_s85Rz]
                                                                                              of
                                                                                              sat_s85RH
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85RB
                                                                                                        sat_s85RH;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85RG [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RC] \u []
                                                                                              case
                                                                                                  >=# [x_s85RC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RC
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85RG
                                                                                         sat_s85RI];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85RL [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RC] \u []
                                                                                              case
                                                                                                  >=# [x_s85RC
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RC;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RC
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RC;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RC];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85RL
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85RB x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Ry [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85Ry sat_s85RM];
                                          1# ->
                                              case <# [0# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85RQ [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85RQ GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.RelativeSeek ->
                                  case >=# [x5_s85R6 x4_s85R4] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85S9 [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85RW [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s85RW]
                                                              of
                                                              y'_s85RX [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85RY [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85RW
                                                                                    y'_s85RX
                                                                                    go_dn_s85RY] \r [x_s85RZ]
                                                                              case
                                                                                  <# [x_s85RZ
                                                                                      y'_s85RX]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85S5 [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85RW
                                                                                           go_dn_s85RY
                                                                                           x_s85RZ] \u []
                                                                                              case
                                                                                                  +# [x_s85RZ
                                                                                                      delta_s85RW]
                                                                                              of
                                                                                              sat_s85S4
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85RY
                                                                                                        sat_s85S4;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85S3 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RZ] \u []
                                                                                              case
                                                                                                  >=# [x_s85RZ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RZ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RZ
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RZ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RZ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85S3
                                                                                         sat_s85S5];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85S8 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85RZ] \u []
                                                                                              case
                                                                                                  >=# [x_s85RZ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85RZ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85RZ
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85RZ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85RZ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85S8
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85RY x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85RV [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85RV sat_s85S9];
                                          1# ->
                                              case ># [1# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Sd [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Sd GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Sv [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85Si [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s85Si]
                                                              of
                                                              y'_s85Sj [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85Sk [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85Si
                                                                                    y'_s85Sj
                                                                                    go_up_s85Sk] \r [x_s85Sl]
                                                                              case
                                                                                  ># [x_s85Sl
                                                                                      y'_s85Sj]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Sr [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85Si
                                                                                           go_up_s85Sk
                                                                                           x_s85Sl] \u []
                                                                                              case
                                                                                                  +# [x_s85Sl
                                                                                                      delta_s85Si]
                                                                                              of
                                                                                              sat_s85Sq
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85Sk
                                                                                                        sat_s85Sq;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85Sp [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Sl] \u []
                                                                                              case
                                                                                                  >=# [x_s85Sl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Sl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Sl
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Sl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Sl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Sp
                                                                                         sat_s85Sr];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Su [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85Sl] \u []
                                                                                              case
                                                                                                  >=# [x_s85Sl
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85Sl;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85Sl
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85Sl;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85Sl];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Su
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85Sk x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85Sh [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85Sh sat_s85Sv];
                                          1# ->
                                              case <# [1# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Sz [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Sz GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.Device.SeekFromEnd ->
                                  case >=# [x5_s85R6 x4_s85R4] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85SS [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85SF [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85SF]
                                                              of
                                                              y'_s85SG [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s85SH [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85SF
                                                                                    y'_s85SG
                                                                                    go_dn_s85SH] \r [x_s85SI]
                                                                              case
                                                                                  <# [x_s85SI
                                                                                      y'_s85SG]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85SO [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85SF
                                                                                           go_dn_s85SH
                                                                                           x_s85SI] \u []
                                                                                              case
                                                                                                  +# [x_s85SI
                                                                                                      delta_s85SF]
                                                                                              of
                                                                                              sat_s85SN
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s85SH
                                                                                                        sat_s85SN;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85SM [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85SI] \u []
                                                                                              case
                                                                                                  >=# [x_s85SI
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85SI;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85SI
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85SI;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85SI];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85SM
                                                                                         sat_s85SO];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85SR [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85SI] \u []
                                                                                              case
                                                                                                  >=# [x_s85SI
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85SI;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85SI
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85SI;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85SI];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85SR
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s85SH x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85SE [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85SE sat_s85SS];
                                          1# ->
                                              case ># [2# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85SW [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85SW GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s85R6] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s85Te [Occ=Once] :: [GHC.IO.Device.SeekMode]
                                                [LclId] =
                                                    [x4_s85R4 x5_s85R6] \u []
                                                        case
                                                            -# [x5_s85R6 x4_s85R4]
                                                        of
                                                        delta_s85T1 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s85T1]
                                                              of
                                                              y'_s85T2 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s85T3 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.Device.SeekMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s85T1
                                                                                    y'_s85T2
                                                                                    go_up_s85T3] \r [x_s85T4]
                                                                              case
                                                                                  ># [x_s85T4
                                                                                      y'_s85T2]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s85Ta [Occ=Once]
                                                                                        :: [GHC.IO.Device.SeekMode]
                                                                                      [LclId] =
                                                                                          [delta_s85T1
                                                                                           go_up_s85T3
                                                                                           x_s85T4] \u []
                                                                                              case
                                                                                                  +# [x_s85T4
                                                                                                      delta_s85T1]
                                                                                              of
                                                                                              sat_s85T9
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s85T3
                                                                                                        sat_s85T9;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s85T8 [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85T4] \u []
                                                                                              case
                                                                                                  >=# [x_s85T4
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85T4;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85T4
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85T4;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85T4];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85T8
                                                                                         sat_s85Ta];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s85Td [Occ=Once]
                                                                                        :: GHC.IO.Device.SeekMode
                                                                                      [LclId] =
                                                                                          [x_s85T4] \u []
                                                                                              case
                                                                                                  >=# [x_s85T4
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.Device.$wlvl
                                                                                                        x_s85T4;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s85T4
                                                                                                             2#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.Device.$wlvl
                                                                                                              x_s85T4;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s85T4];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s85Td
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s85T3 x5_s85R6;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s85T0 [Occ=Once] :: GHC.IO.Device.SeekMode
                                                [LclId] =
                                                    [x4_s85R4] \u []
                                                        case >=# [x4_s85R4 0#] of {
                                                          __DEFAULT -> GHC.IO.Device.$wlvl x4_s85R4;
                                                          1# ->
                                                              case <=# [x4_s85R4 2#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# -> tagToEnum# [x4_s85R4];
                                                              };
                                                        };
                                              } in  : [sat_s85T0 sat_s85Te];
                                          1# ->
                                              case <# [2# x4_s85R4] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s85Ti [Occ=Once] :: GHC.IO.Device.SeekMode
                                                      [LclId] =
                                                          [x4_s85R4] \u []
                                                              case >=# [x4_s85R4 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.Device.$wlvl x4_s85R4;
                                                                1# ->
                                                                    case <=# [x4_s85R4 2#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.Device.$wlvl
                                                                              x4_s85R4;
                                                                      1# -> tagToEnum# [x4_s85R4];
                                                                    };
                                                              };
                                                    } in  : [sat_s85Ti GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s85R1 of {
                      GHC.IO.Device.AbsoluteSeek -> $j1_s85R5 0#;
                      GHC.IO.Device.RelativeSeek -> $j1_s85R5 1#;
                      GHC.IO.Device.SeekFromEnd -> $j1_s85R5 2#;
                    };
        } in 
          case x1_s85R0 of {
            GHC.IO.Device.AbsoluteSeek -> $j_s85R3 0#;
            GHC.IO.Device.RelativeSeek -> $j_s85R3 1#;
            GHC.IO.Device.SeekFromEnd -> $j_s85R3 2#;
          };

GHC.IO.Device.$fEnumSeekMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.Device.SeekMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.Device.$fEnumSeekMode_$csucc
                                    GHC.IO.Device.$fEnumSeekMode_$cpred
                                    GHC.IO.Device.$fEnumSeekMode_$ctoEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cfromEnum
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFrom
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThen
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromTo
                                    GHC.IO.Device.$fEnumSeekMode_$cenumFromThenTo];

GHC.IO.Device.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule4];

GHC.IO.Device.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$trModule2];

GHC.IO.Device.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.Device.$trModule3
                                     GHC.IO.Device.$trModule1];

$krep_r81ZU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep1_r81ZV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

$krep2_r81ZW :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc()
                                              GHC.Types.[]];

$krep3_r81ZX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep4_r81ZY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcBool
                                              GHC.Types.[]];

$krep5_r81ZZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep6_r8200 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r81ZX GHC.Types.[]];

$krep7_r8201 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep6_r8200];

$krep8_r8202 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r81ZV GHC.Types.[]];

$krep9_r8203 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r8202];

$krep10_r8204 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep2_r81ZW GHC.Types.[]];

$krep11_r8205 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep10_r8204];

$krep12_r8206 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep4_r81ZY GHC.Types.[]];

$krep13_r8207 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r8206];

$krep14_r8208 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep6_r8200];

$krep15_r8209 :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep14_r8208 GHC.Types.[]];

$krep16_r820a :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep15_r8209];

$krep17_r820b :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r81ZU GHC.Types.[]];

$krep18_r820c :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Ptr.$tcPtr
                                              $krep17_r820b];

$krep19_r820d :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep11_r8205];

$krep20_r820e :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep7_r8201];

$krep21_r820f :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep13_r8207];

$krep22_r820g :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r81ZX $krep16_r820a];

$krep23_r820h :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep11_r8205];

$krep24_r820i :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep4_r81ZY $krep21_r820f];

$krep25_r820j :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r81ZV $krep11_r8205];

$krep26_r820k :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep19_r820d];

$krep27_r820l :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep20_r820e];

$krep28_r820m :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep18_r820c $krep22_r820g];

GHC.IO.Device.$tcIODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep5_r81ZZ];

$krep29_r820n :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep30_r820o :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep28_r820m];

$krep31_r820p :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep27_r820l];

$krep32_r820q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep26_r820k];

$krep33_r820r :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep25_r820j];

$krep34_r820s :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep24_r820i];

$krep35_r820t :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep23_r820h];

$krep36_r820u :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep11_r8205];

$krep37_r820v :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep13_r8207];

$krep38_r820w :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep9_r8203];

$krep39_r820x :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep29_r820n GHC.Types.[]];

$krep40_r820y :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep39_r820x];

$krep41_r820z :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep40_r820y];

$krep42_r820A :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep41_r820z];

GHC.IO.Device.$tcRawIO2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "RawIO"#;

GHC.IO.Device.$tcRawIO1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcRawIO2];

GHC.IO.Device.$tcRawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15458836890887680490##
                                    11407217875184880147##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcRawIO1
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep43_r820B :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcRawIO
                                              $krep39_r820x];

$krep44_r820C :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep43_r820B];

$krep45_r820D :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep32_r820q $krep44_r820C];

$krep46_r820E :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep30_r820o $krep45_r820D];

GHC.IO.Device.$tc'C:RawIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep31_r820p $krep46_r820E];

GHC.IO.Device.$tc'C:RawIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:RawIO"#;

GHC.IO.Device.$tc'C:RawIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:RawIO3];

GHC.IO.Device.$tc'C:RawIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6403037956050298954##
                                    14520964482680400738##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:RawIO2
                                    1#
                                    GHC.IO.Device.$tc'C:RawIO1];

GHC.IO.Device.$tcIODeviceType2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODeviceType"#;

GHC.IO.Device.$tcIODeviceType1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODeviceType2];

GHC.IO.Device.$tcIODeviceType :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4175968526489202383##
                                    17718566430225243048##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODeviceType1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'Directory1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODeviceType
                                              GHC.Types.[]];

GHC.IO.Device.$tc'Directory3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Directory"#;

GHC.IO.Device.$tc'Directory2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Directory3];

GHC.IO.Device.$tc'Directory :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12008838926528382233##
                                    639950492613404225##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Directory2
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'Stream2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Stream"#;

GHC.IO.Device.$tc'Stream1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'Stream2];

GHC.IO.Device.$tc'Stream :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [39573928359804366##
                                    741010449601335383##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'Stream1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RegularFile2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RegularFile"#;

GHC.IO.Device.$tc'RegularFile1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RegularFile2];

GHC.IO.Device.$tc'RegularFile :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2184574052715259025##
                                    14349593064521146856##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RegularFile1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

GHC.IO.Device.$tc'RawDevice2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RawDevice"#;

GHC.IO.Device.$tc'RawDevice1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RawDevice2];

GHC.IO.Device.$tc'RawDevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13599710032796319976##
                                    8789152980205417013##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RawDevice1
                                    0#
                                    GHC.IO.Device.$tc'Directory1];

$krep47_r820F :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.Device.$tc'Directory1 GHC.Types.[]];

$krep48_r820G :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep47_r820F];

$krep49_r820H :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep48_r820G];

GHC.IO.Device.$tcSeekMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "SeekMode"#;

GHC.IO.Device.$tcSeekMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcSeekMode2];

GHC.IO.Device.$tcSeekMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17698211299654630015##
                                    5588778824401988676##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcSeekMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.Device.$tc'AbsoluteSeek1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcSeekMode
                                              GHC.Types.[]];

GHC.IO.Device.$tc'AbsoluteSeek3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AbsoluteSeek"#;

GHC.IO.Device.$tc'AbsoluteSeek2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'AbsoluteSeek3];

GHC.IO.Device.$tc'AbsoluteSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [5610789579148926753##
                                    3433733041722086784##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'AbsoluteSeek2
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'RelativeSeek2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'RelativeSeek"#;

GHC.IO.Device.$tc'RelativeSeek1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'RelativeSeek2];

GHC.IO.Device.$tc'RelativeSeek :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15906895381304752726##
                                    1738065871578000433##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'RelativeSeek1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

GHC.IO.Device.$tc'SeekFromEnd2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'SeekFromEnd"#;

GHC.IO.Device.$tc'SeekFromEnd1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'SeekFromEnd2];

GHC.IO.Device.$tc'SeekFromEnd :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16344961357916628519##
                                    5039033320700315004##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'SeekFromEnd1
                                    0#
                                    GHC.IO.Device.$tc'AbsoluteSeek1];

$krep50_r820I :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.IO.Device.$tc'AbsoluteSeek1
                                         $krep25_r820j];

$krep51_r820J :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep29_r820n $krep50_r820I];

GHC.IO.Device.$tcIODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IODevice"#;

GHC.IO.Device.$tcIODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tcIODevice3];

GHC.IO.Device.$tcIODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4764642859795697036##
                                    7163668738257247953##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tcIODevice2
                                    0#
                                    GHC.IO.Device.$tcIODevice1];

$krep52_r820K :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Device.$tcIODevice
                                              $krep39_r820x];

$krep53_r820L :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep42_r820A $krep52_r820K];

$krep54_r820M :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep41_r820z $krep53_r820L];

$krep55_r820N :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep49_r820H $krep54_r820M];

$krep56_r820O :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep55_r820N];

$krep57_r820P :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep56_r820O];

$krep58_r820Q :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep35_r820t $krep57_r820P];

$krep59_r820R :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep33_r820r $krep58_r820Q];

$krep60_r820S :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep59_r820R];

$krep61_r820T :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep38_r820w $krep60_r820S];

$krep62_r820U :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep51_r820J $krep61_r820T];

$krep63_r820V :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep62_r820U];

$krep64_r820W :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep37_r820v $krep63_r820V];

$krep65_r820X :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep36_r820u $krep64_r820W];

GHC.IO.Device.$tc'C:IODevice1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep34_r820s $krep65_r820X];

GHC.IO.Device.$tc'C:IODevice3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:IODevice"#;

GHC.IO.Device.$tc'C:IODevice2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.Device.$tc'C:IODevice3];

GHC.IO.Device.$tc'C:IODevice :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15352604720075066134##
                                    14084350618605203122##
                                    GHC.IO.Device.$trModule
                                    GHC.IO.Device.$tc'C:IODevice2
                                    1#
                                    GHC.IO.Device.$tc'C:IODevice1];

GHC.IO.Device.AbsoluteSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.AbsoluteSeek! [];

GHC.IO.Device.RelativeSeek :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RelativeSeek! [];

GHC.IO.Device.SeekFromEnd :: GHC.IO.Device.SeekMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.SeekFromEnd! [];

GHC.IO.Device.Directory :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Directory! [];

GHC.IO.Device.Stream :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.Stream! [];

GHC.IO.Device.RegularFile :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RegularFile! [];

GHC.IO.Device.RawDevice :: GHC.IO.Device.IODeviceType
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.Device.RawDevice! [];

GHC.IO.Device.C:IODevice
  :: forall a.
     (a
      -> GHC.Types.Bool -> GHC.Types.Int -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a
         -> GHC.IO.Device.SeekMode
         -> GHC.Integer.Type.Integer
         -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Types.IO GHC.Integer.Type.Integer)
     -> (a -> GHC.Integer.Type.Integer -> GHC.Types.IO ())
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.Types.Bool)
     -> (a -> GHC.Types.Bool -> GHC.Types.IO ())
     -> (a -> GHC.Types.IO GHC.IO.Device.IODeviceType)
     -> (a -> GHC.Types.IO a)
     -> (a -> a -> GHC.Types.IO a)
     -> GHC.IO.Device.IODevice a
[GblId[DataCon],
 Arity=14,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_Be
           eta_Bd
           eta_Bc
           eta_Bb
           eta_Ba
           eta_B9
           eta_B8
           eta_B7
           eta_B6
           eta_B5
           eta_B4
           eta_B3
           eta_B2
           eta_B1]
        GHC.IO.Device.C:IODevice [eta_Be
                                  eta_Bd
                                  eta_Bc
                                  eta_Bb
                                  eta_Ba
                                  eta_B9
                                  eta_B8
                                  eta_B7
                                  eta_B6
                                  eta_B5
                                  eta_B4
                                  eta_B3
                                  eta_B2
                                  eta_B1];

GHC.IO.Device.C:RawIO
  :: forall a.
     (a
      -> GHC.Ptr.Ptr GHC.Word.Word8
      -> GHC.Types.Int
      -> GHC.Types.IO GHC.Types.Int)
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO (GHC.Base.Maybe GHC.Types.Int))
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8 -> GHC.Types.Int -> GHC.Types.IO ())
     -> (a
         -> GHC.Ptr.Ptr GHC.Word.Word8
         -> GHC.Types.Int
         -> GHC.Types.IO GHC.Types.Int)
     -> GHC.IO.Device.RawIO a
[GblId[DataCon],
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.Device.C:RawIO [eta_B4 eta_B3 eta_B2 eta_B1];

