
==================== Tidy Core ====================
2018-03-16 16:05:01.918463548 UTC

Result size of Tidy Core
  = {terms: 745, types: 1,187, coercions: 53, joins: 0/1}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
latin1 :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Latin1.latin1_checked}]
latin1 = Latin1.latin1_checked

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf8 :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF8.utf8}]
utf8 = UTF8.utf8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf8_bom :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF8.utf8_bom}]
utf8_bom = UTF8.utf8_bom

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf16 :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF16.utf16}]
utf16 = UTF16.utf16

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf16le :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF16.utf16le}]
utf16le = UTF16.utf16le

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf16be :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF16.utf16be}]
utf16be = UTF16.utf16be

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf32 :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF32.utf32}]
utf32 = UTF32.utf32

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf32le :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF32.utf32le}]
utf32le = UTF32.utf32le

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
utf32be :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= UTF32.utf32be}]
utf32be = UTF32.utf32be

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
char8 :: TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= Latin1.latin1}]
char8 = Latin1.latin1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r9XsW :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r9XsW = "mkTextEncoding"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_r9XsX :: [Char]
[GblId]
lvl1_r9XsX = unpackCString# lvl_r9XsW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_r9XsY :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_r9XsY = "unknown encoding:"#

-- RHS size: {terms: 15, types: 10, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding2
  :: forall a.
     String -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []]
GHC.IO.Encoding.mkTextEncoding2
  = \ (@ a_a9WXW)
      (e_a9WVg :: String)
      (eta_i8rDX :: State# RealWorld) ->
      raiseIO#
        @ GHC.Exception.SomeException
        @ a_a9WXW
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (GHC.IO.Exception.IOError
              (GHC.Base.Nothing @ GHC.IO.Handle.Types.Handle)
              GHC.IO.Exception.NoSuchThing
              lvl1_r9XsX
              (unpackAppendCString# lvl2_r9XsY e_a9WVg)
              (GHC.Base.Nothing @ Foreign.C.Types.CInt)
              (GHC.Base.Nothing @ GHC.IO.FilePath)))
        eta_i8rDX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.$trModule3
  = GHC.Types.TrNameS GHC.IO.Encoding.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.$trModule2 = "GHC.IO.Encoding"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Encoding.$trModule1
  = GHC.Types.TrNameS GHC.IO.Encoding.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.$trModule
  = GHC.Types.Module
      GHC.IO.Encoding.$trModule3 GHC.IO.Encoding.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding33 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.getFileSystemEncoding33 = "ISO_8859-1:1987"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding32 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding32
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding33

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding31 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.getFileSystemEncoding31 = "iso-ir-100"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding30 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding30
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding31

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding29 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.getFileSystemEncoding29 = "ISO_8859-1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding28 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding28
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding29

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding27 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.getFileSystemEncoding27 = "ISO-8859-1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding26 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding26
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding27

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding25 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding25 = "latin1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding24 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding24
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding25

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding23 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding23 = "l1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding22 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding22
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding23

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding21 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding21 = "IBM819"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding20 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding20
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding21

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding19 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding19 = "CP819"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding18 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding18
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding19

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding17 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.getFileSystemEncoding17 = "csISOLatin1"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding16 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding16
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding17

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding15 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding15
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding16
      (GHC.Types.[] @ [Char])

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding14 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding14
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding18
      GHC.IO.Encoding.getFileSystemEncoding15

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding13 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding13
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding20
      GHC.IO.Encoding.getFileSystemEncoding14

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding12 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding12
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding22
      GHC.IO.Encoding.getFileSystemEncoding13

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding11 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding11
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding24
      GHC.IO.Encoding.getFileSystemEncoding12

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding10 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding10
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding26
      GHC.IO.Encoding.getFileSystemEncoding11

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding9 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding9
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding28
      GHC.IO.Encoding.getFileSystemEncoding10

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding8 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding8
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding30
      GHC.IO.Encoding.getFileSystemEncoding9

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding7 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding7
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding32
      GHC.IO.Encoding.getFileSystemEncoding8

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding66 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.getFileSystemEncoding66 = "ANSI_X3.4-1968"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding65 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding65
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding66

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding64 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding64 = "iso-ir-6"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding63 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding63
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding64

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding62 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.getFileSystemEncoding62 = "ANSI_X3.4-1986"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding61 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding61
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding62

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding60 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Encoding.getFileSystemEncoding60 = "ISO_646.irv:1991"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding59 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding59
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding60

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding58 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding58 = "US-ASCII"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding57 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding57
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding58

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding56 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding56 = "us"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding55 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding55
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding56

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding54 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding54 = "IBM367"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding53 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding53
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding54

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding52 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding52 = "cp367"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding51 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding51
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding52

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding50 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding50 = "csASCII"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding49 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding49
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding50

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding48 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding48 = "ASCII"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding47 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding47
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding48

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding46 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.getFileSystemEncoding46 = "ISO646-US"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding45 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding45
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding46

-- RHS size: {terms: 3, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding44 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding44
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding45
      (GHC.Types.[] @ [Char])

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding43 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding43
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding47
      GHC.IO.Encoding.getFileSystemEncoding44

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding42 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding42
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding49
      GHC.IO.Encoding.getFileSystemEncoding43

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding41 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding41
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding51
      GHC.IO.Encoding.getFileSystemEncoding42

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding40 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding40
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding53
      GHC.IO.Encoding.getFileSystemEncoding41

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding39 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding39
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding55
      GHC.IO.Encoding.getFileSystemEncoding40

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding38 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding38
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding57
      GHC.IO.Encoding.getFileSystemEncoding39

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding37 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding37
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding59
      GHC.IO.Encoding.getFileSystemEncoding38

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding36 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding36
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding61
      GHC.IO.Encoding.getFileSystemEncoding37

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding35 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding35
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding63
      GHC.IO.Encoding.getFileSystemEncoding36

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding34 :: [[Char]]
[GblId,
 Str=m2,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Encoding.getFileSystemEncoding34
  = GHC.Types.:
      @ [Char]
      GHC.IO.Encoding.getFileSystemEncoding65
      GHC.IO.Encoding.getFileSystemEncoding35

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding68 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding68 = "UTF8"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding67 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding67
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding68

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding70 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding70 = "UTF32LE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding69 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding69
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding70

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding72 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding72 = "UTF32BE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding71 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding71
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding72

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding74 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding74 = "UTF32"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding73 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding73
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding74

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding76 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding76 = "UTF16LE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding75 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding75
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding76

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding78 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding78 = "UTF16BE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding77 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding77
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding78

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding80 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding80 = "UTF16"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding79 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.getFileSystemEncoding79
  = unpackCString# GHC.IO.Encoding.getFileSystemEncoding80

Rec {
-- RHS size: {terms: 36, types: 24, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding_go [Occ=LoopBreaker]
  :: [Char] -> [Char]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []]
GHC.IO.Encoding.getFileSystemEncoding_go
  = \ (ds_i7Jck :: [Char]) ->
      case ds_i7Jck of {
        [] -> GHC.Types.[] @ Char;
        : y_i7Jcp ys_i7Jcq ->
          case y_i7Jcp of { C# x_a3vE4 ->
          case x_a3vE4 of wild2_X2B {
            __DEFAULT ->
              GHC.Types.:
                @ Char
                (case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_i9X28
                        (ord# wild2_X2B) realWorld#
                 of
                 { (# ds1_i9X2d, ds2_i9X2e #) ->
                 case leWord# (int2Word# ds2_i9X2e) 1114111## of {
                   __DEFAULT -> GHC.Char.$wlvl ds2_i9X2e;
                   1# -> GHC.Types.C# (chr# ds2_i9X2e)
                 }
                 })
                (GHC.IO.Encoding.getFileSystemEncoding_go ys_i7Jcq);
            '-'# -> GHC.IO.Encoding.getFileSystemEncoding_go ys_i7Jcq
          }
          }
      }
end Rec }

-- RHS size: {terms: 17, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding6
  :: CodingFailureMode
     -> String
     -> State# RealWorld
     -> (# State# RealWorld, TextEncoding #)
[GblId, Arity=3, Str=<B,1*U><B,1*U><B,U>x, Unf=OtherCon []]
GHC.IO.Encoding.getFileSystemEncoding6
  = \ (cfm_a9WUX :: CodingFailureMode)
      (enc_a9WUY :: String)
      (ipv_i7IAy :: State# RealWorld) ->
      GHC.IO.Encoding.mkTextEncoding2
        @ TextEncoding
        (++
           @ Char
           enc_a9WUY
           (case cfm_a9WUX of {
              ErrorOnCodingFailure -> GHC.Types.[] @ Char;
              IgnoreCodingFailure ->
                GHC.IO.Encoding.Failure.codingFailureModeSuffix5;
              TransliterateCodingFailure ->
                GHC.IO.Encoding.Failure.codingFailureModeSuffix3;
              RoundtripFailure ->
                GHC.IO.Encoding.Failure.codingFailureModeSuffix1
            }))
        ipv_i7IAy

-- RHS size: {terms: 115, types: 103, coercions: 0, joins: 0/1}
GHC.IO.Encoding.getFileSystemEncoding5
  :: CodingFailureMode
     -> String
     -> State# RealWorld
     -> (# State# RealWorld, TextEncoding #)
[GblId,
 Arity=3,
 Str=<L,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 770 300}]
GHC.IO.Encoding.getFileSystemEncoding5
  = \ (cfm_a9WUX :: CodingFailureMode)
      (enc_a9WUY :: String)
      (eta_B1 :: State# RealWorld) ->
      let {
        ds_s9XcF [Dmd=<S,U>] :: [Char]
        [LclId]
        ds_s9XcF = GHC.IO.Encoding.getFileSystemEncoding_go enc_a9WUY } in
      case eqString ds_s9XcF GHC.IO.Encoding.getFileSystemEncoding79 of {
        False ->
          case eqString ds_s9XcF GHC.IO.Encoding.getFileSystemEncoding77 of {
            False ->
              case eqString ds_s9XcF GHC.IO.Encoding.getFileSystemEncoding75 of {
                False ->
                  case eqString ds_s9XcF GHC.IO.Encoding.getFileSystemEncoding73 of {
                    False ->
                      case eqString ds_s9XcF GHC.IO.Encoding.getFileSystemEncoding71 of {
                        False ->
                          case eqString ds_s9XcF GHC.IO.Encoding.getFileSystemEncoding69 of {
                            False ->
                              case eqString ds_s9XcF GHC.IO.Encoding.getFileSystemEncoding67 of {
                                False ->
                                  case elem
                                         @ String
                                         GHC.Classes.$fEq[]_$s$fEq[]1
                                         enc_a9WUY
                                         GHC.IO.Encoding.getFileSystemEncoding34
                                  of {
                                    False ->
                                      case elem
                                             @ String
                                             GHC.Classes.$fEq[]_$s$fEq[]1
                                             enc_a9WUY
                                             GHC.IO.Encoding.getFileSystemEncoding7
                                      of {
                                        False ->
                                          case GHC.IO.Encoding.Iconv.iconvEncoding2
                                                 cfm_a9WUX enc_a9WUY eta_B1
                                          of
                                          { (# ipv_i7IAy, ipv1_i7IAz #) ->
                                          case ipv1_i7IAz of {
                                            Nothing ->
                                              GHC.IO.Encoding.getFileSystemEncoding6
                                                cfm_a9WUX enc_a9WUY ipv_i7IAy;
                                            Just e_a9WV5 -> (# ipv_i7IAy, e_a9WV5 #)
                                          }
                                          };
                                        True -> (# eta_B1, Latin1.mkLatin1_checked cfm_a9WUX #)
                                      };
                                    True -> (# eta_B1, Latin1.mkAscii cfm_a9WUX #)
                                  };
                                True -> (# eta_B1, UTF8.mkUTF8 cfm_a9WUX #)
                              };
                            True -> (# eta_B1, UTF32.mkUTF32le cfm_a9WUX #)
                          };
                        True -> (# eta_B1, UTF32.mkUTF32be cfm_a9WUX #)
                      };
                    True -> (# eta_B1, UTF32.mkUTF32 cfm_a9WUX #)
                  };
                True -> (# eta_B1, UTF16.mkUTF16le cfm_a9WUX #)
              };
            True -> (# eta_B1, UTF16.mkUTF16be cfm_a9WUX #)
          };
        True -> (# eta_B1, UTF16.mkUTF16 cfm_a9WUX #)
      }

-- RHS size: {terms: 10, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding9 :: Char -> Bool
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(S),1*U(1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9X8J [Occ=Once!] :: Char) ->
                 case ds_d9X8J of { C# x_a3vE4 [Occ=Once!] ->
                 case x_a3vE4 of {
                   __DEFAULT -> GHC.Types.True;
                   '/'# -> GHC.Types.False
                 }
                 }}]
GHC.IO.Encoding.mkTextEncoding9
  = \ (ds_d9X8J :: Char) ->
      case ds_d9X8J of { C# x_a3vE4 ->
      case x_a3vE4 of {
        __DEFAULT -> GHC.Types.True;
        '/'# -> GHC.Types.False
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.mkTextEncoding4 = "//TRANSLIT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.mkTextEncoding3
  = unpackCString# GHC.IO.Encoding.mkTextEncoding4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding6 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Encoding.mkTextEncoding6 = "//ROUNDTRIP"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.mkTextEncoding5
  = unpackCString# GHC.IO.Encoding.mkTextEncoding6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.mkTextEncoding8 = "//IGNORE"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Encoding.mkTextEncoding7
  = unpackCString# GHC.IO.Encoding.mkTextEncoding8

-- RHS size: {terms: 48, types: 24, coercions: 0, joins: 0/0}
GHC.IO.Encoding.mkTextEncoding1
  :: String
     -> State# RealWorld -> (# State# RealWorld, TextEncoding #)
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 350 0}]
GHC.IO.Encoding.mkTextEncoding1
  = \ (e_a9WUS :: String) (eta_B1 :: State# RealWorld) ->
      case GHC.List.$wspan @ Char GHC.IO.Encoding.mkTextEncoding9 e_a9WUS
      of
      { (# ww1_i8hm4, ww2_i8hm5 #) ->
      case ww2_i8hm5 of wild_X41 {
        [] ->
          GHC.IO.Encoding.getFileSystemEncoding5
            GHC.IO.Encoding.Failure.ErrorOnCodingFailure ww1_i8hm4 eta_B1;
        : ipv_s9XaN ipv1_s9XaO ->
          case eqString wild_X41 GHC.IO.Encoding.mkTextEncoding7 of {
            False ->
              case eqString wild_X41 GHC.IO.Encoding.mkTextEncoding5 of {
                False ->
                  case eqString wild_X41 GHC.IO.Encoding.mkTextEncoding3 of {
                    False ->
                      GHC.IO.Encoding.mkTextEncoding2 @ TextEncoding e_a9WUS eta_B1;
                    True ->
                      GHC.IO.Encoding.getFileSystemEncoding5
                        GHC.IO.Encoding.Failure.TransliterateCodingFailure ww1_i8hm4 eta_B1
                  };
                True ->
                  GHC.IO.Encoding.getFileSystemEncoding5
                    GHC.IO.Encoding.Failure.RoundtripFailure ww1_i8hm4 eta_B1
              };
            True ->
              GHC.IO.Encoding.getFileSystemEncoding5
                GHC.IO.Encoding.Failure.IgnoreCodingFailure ww1_i8hm4 eta_B1
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
mkTextEncoding :: String -> IO TextEncoding
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.mkTextEncoding1
               `cast` (<String>_R ->_R Sym (GHC.Types.N:IO[0] <TextEncoding>_R)
                       :: (String
                           -> State# RealWorld -> (# State# RealWorld, TextEncoding #) :: *)
                          ~R# (String -> IO TextEncoding :: *))}]
mkTextEncoding
  = GHC.IO.Encoding.mkTextEncoding1
    `cast` (<String>_R ->_R Sym (GHC.Types.N:IO[0] <TextEncoding>_R)
            :: (String
                -> State# RealWorld -> (# State# RealWorld, TextEncoding #) :: *)
               ~R# (String -> IO TextEncoding :: *))

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getForeignEncoding4
  :: State# RealWorld -> (# State# RealWorld, TextEncoding #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 42 0}]
GHC.IO.Encoding.getForeignEncoding4
  = \ (s_X9219 [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_X9219 of s'_X921b { __DEFAULT ->
      GHC.IO.Encoding.getFileSystemEncoding5
        GHC.IO.Encoding.Failure.IgnoreCodingFailure
        Iconv.localeEncodingName
        s'_X921b
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getForeignEncoding3 :: TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getForeignEncoding3
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, TextEncoding #)
           GHC.IO.Encoding.getForeignEncoding4
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 28, types: 57, coercions: 8, joins: 0/0}
GHC.IO.Encoding.getForeignEncoding2
  :: State# RealWorld
     -> (# State# RealWorld, (IO TextEncoding, TextEncoding -> IO ()) #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 50 30}]
GHC.IO.Encoding.getForeignEncoding2
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case newMutVar#
             @ TextEncoding
             @ RealWorld
             GHC.IO.Encoding.getForeignEncoding3
             s'_i91ZE
      of
      { (# ipv_i8ttV, ipv1_i8ttW #) ->
      (# ipv_i8ttV,
         ((\ (eta_i7IB0 :: State# RealWorld) ->
             readMutVar# @ RealWorld @ TextEncoding ipv1_i8ttW eta_i7IB0)
          `cast` (Sym (GHC.Types.N:IO[0] <TextEncoding>_R)
                  :: (State# RealWorld -> (# State# RealWorld, TextEncoding #) :: *)
                     ~R# (IO TextEncoding :: *)),
          (\ (val_i7IB8 :: TextEncoding) (eta_i7IB9 :: State# RealWorld) ->
             case writeMutVar#
                    @ RealWorld @ TextEncoding ipv1_i8ttW val_i7IB8 eta_i7IB9
             of s2#_i7IBe
             { __DEFAULT ->
             (# s2#_i7IBe, GHC.Tuple.() #)
             })
          `cast` (<TextEncoding>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                  :: (TextEncoding
                      -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                     ~R# (TextEncoding -> IO () :: *))) #)
      }
      }

-- RHS size: {terms: 5, types: 45, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getForeignEncoding1
  :: (IO TextEncoding, TextEncoding -> IO ())
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getForeignEncoding1
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, (IO TextEncoding, TextEncoding -> IO ()) #)
           GHC.IO.Encoding.getForeignEncoding2
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
getForeignEncoding :: IO TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
getForeignEncoding
  = case GHC.IO.Encoding.getForeignEncoding1 of
    { (getForeignEncoding5_a9X1a, setForeignEncoding1_a9X1b) ->
    getForeignEncoding5_a9X1a
    }

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
setForeignEncoding :: TextEncoding -> IO ()
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
setForeignEncoding
  = case GHC.IO.Encoding.getForeignEncoding1 of
    { (getForeignEncoding5_a9X1a, setForeignEncoding1_a9X1b) ->
    setForeignEncoding1_a9X1b
    }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding4
  :: State# RealWorld -> (# State# RealWorld, TextEncoding #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 42 0}]
GHC.IO.Encoding.getFileSystemEncoding4
  = \ (s_X921c [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_X921c of s'_X921e { __DEFAULT ->
      GHC.IO.Encoding.getFileSystemEncoding5
        GHC.IO.Encoding.Failure.RoundtripFailure
        Iconv.localeEncodingName
        s'_X921e
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding3 :: TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding3
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, TextEncoding #)
           GHC.IO.Encoding.getFileSystemEncoding4
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 28, types: 57, coercions: 8, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding2
  :: State# RealWorld
     -> (# State# RealWorld, (IO TextEncoding, TextEncoding -> IO ()) #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 50 30}]
GHC.IO.Encoding.getFileSystemEncoding2
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case newMutVar#
             @ TextEncoding
             @ RealWorld
             GHC.IO.Encoding.getFileSystemEncoding3
             s'_i91ZE
      of
      { (# ipv_i8ttV, ipv1_i8ttW #) ->
      (# ipv_i8ttV,
         ((\ (eta_i7IB0 :: State# RealWorld) ->
             readMutVar# @ RealWorld @ TextEncoding ipv1_i8ttW eta_i7IB0)
          `cast` (Sym (GHC.Types.N:IO[0] <TextEncoding>_R)
                  :: (State# RealWorld -> (# State# RealWorld, TextEncoding #) :: *)
                     ~R# (IO TextEncoding :: *)),
          (\ (val_i7IB8 :: TextEncoding) (eta_i7IB9 :: State# RealWorld) ->
             case writeMutVar#
                    @ RealWorld @ TextEncoding ipv1_i8ttW val_i7IB8 eta_i7IB9
             of s2#_i7IBe
             { __DEFAULT ->
             (# s2#_i7IBe, GHC.Tuple.() #)
             })
          `cast` (<TextEncoding>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                  :: (TextEncoding
                      -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                     ~R# (TextEncoding -> IO () :: *))) #)
      }
      }

-- RHS size: {terms: 5, types: 45, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getFileSystemEncoding1
  :: (IO TextEncoding, TextEncoding -> IO ())
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getFileSystemEncoding1
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, (IO TextEncoding, TextEncoding -> IO ()) #)
           GHC.IO.Encoding.getFileSystemEncoding2
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
getFileSystemEncoding :: IO TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
getFileSystemEncoding
  = case GHC.IO.Encoding.getFileSystemEncoding1 of
    { (getFileSystemEncoding81_a9X1i, setFileSystemEncoding1_a9X1j) ->
    getFileSystemEncoding81_a9X1i
    }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
argvEncoding :: IO TextEncoding
[GblId,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= getFileSystemEncoding}]
argvEncoding = getFileSystemEncoding

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
setFileSystemEncoding :: TextEncoding -> IO ()
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
setFileSystemEncoding
  = case GHC.IO.Encoding.getFileSystemEncoding1 of
    { (getFileSystemEncoding81_a9X1i, setFileSystemEncoding1_a9X1j) ->
    setFileSystemEncoding1_a9X1j
    }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Encoding.initLocaleEncoding1
  :: State# RealWorld -> (# State# RealWorld, TextEncoding #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 42 0}]
GHC.IO.Encoding.initLocaleEncoding1
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      GHC.IO.Encoding.getFileSystemEncoding5
        GHC.IO.Encoding.Failure.ErrorOnCodingFailure
        Iconv.localeEncodingName
        s'_i91ZE
      }

-- RHS size: {terms: 5, types: 30, coercions: 0, joins: 0/0}
initLocaleEncoding :: TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
initLocaleEncoding
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, TextEncoding #)
           GHC.IO.Encoding.initLocaleEncoding1
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 28, types: 57, coercions: 8, joins: 0/0}
GHC.IO.Encoding.getLocaleEncoding2
  :: State# RealWorld
     -> (# State# RealWorld, (IO TextEncoding, TextEncoding -> IO ()) #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 50 30}]
GHC.IO.Encoding.getLocaleEncoding2
  = \ (s_i91ZD [OS=OneShot] :: State# RealWorld) ->
      case noDuplicate# @ RealWorld s_i91ZD of s'_i91ZE { __DEFAULT ->
      case newMutVar#
             @ TextEncoding @ RealWorld initLocaleEncoding s'_i91ZE
      of
      { (# ipv_i8ttV, ipv1_i8ttW #) ->
      (# ipv_i8ttV,
         ((\ (eta_i7IB0 :: State# RealWorld) ->
             readMutVar# @ RealWorld @ TextEncoding ipv1_i8ttW eta_i7IB0)
          `cast` (Sym (GHC.Types.N:IO[0] <TextEncoding>_R)
                  :: (State# RealWorld -> (# State# RealWorld, TextEncoding #) :: *)
                     ~R# (IO TextEncoding :: *)),
          (\ (val_i7IB8 :: TextEncoding) (eta_i7IB9 :: State# RealWorld) ->
             case writeMutVar#
                    @ RealWorld @ TextEncoding ipv1_i8ttW val_i7IB8 eta_i7IB9
             of s2#_i7IBe
             { __DEFAULT ->
             (# s2#_i7IBe, GHC.Tuple.() #)
             })
          `cast` (<TextEncoding>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                  :: (TextEncoding
                      -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                     ~R# (TextEncoding -> IO () :: *))) #)
      }
      }

-- RHS size: {terms: 5, types: 45, coercions: 0, joins: 0/0}
GHC.IO.Encoding.getLocaleEncoding1
  :: (IO TextEncoding, TextEncoding -> IO ())
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Encoding.getLocaleEncoding1
  = case runRW#
           @ ('TupleRep '['TupleRep '[], 'LiftedRep])
           @ (# State# RealWorld, (IO TextEncoding, TextEncoding -> IO ()) #)
           GHC.IO.Encoding.getLocaleEncoding2
    of
    { (# ipv_i91ZH, ipv1_i91ZI #) ->
    ipv1_i91ZI
    }

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
getLocaleEncoding :: IO TextEncoding
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
getLocaleEncoding
  = case GHC.IO.Encoding.getLocaleEncoding1 of
    { (getLocaleEncoding3_a9X1r, setLocaleEncoding1_a9X1s) ->
    getLocaleEncoding3_a9X1r
    }

-- RHS size: {terms: 4, types: 11, coercions: 0, joins: 0/0}
setLocaleEncoding :: TextEncoding -> IO ()
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=True, Expandable=False, Guidance=IF_ARGS [] 10 0}]
setLocaleEncoding
  = case GHC.IO.Encoding.getLocaleEncoding1 of
    { (getLocaleEncoding3_a9X1r, setLocaleEncoding1_a9X1s) ->
    setLocaleEncoding1_a9X1s
    }

-- RHS size: {terms: 17, types: 52, coercions: 0, joins: 0/0}
GHC.IO.Encoding.latin1_decode1
  :: Buffer Word8
     -> CharBuffer
     -> State# RealWorld
     -> (# State# RealWorld, (Buffer Word8, Buffer Char) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (input_a9WVb [Occ=Once] :: Buffer Word8)
                 (output_a9WVc [Occ=Once] :: CharBuffer)
                 (s_i7Vb0 [Occ=Once] :: State# RealWorld) ->
                 case GHC.IO.Encoding.Latin1.latin5 input_a9WVb output_a9WVc s_i7Vb0
                 of
                 { (# ipv_i7Vb3 [Occ=Once], ipv1_i7Vb4 [Occ=Once!] #) ->
                 (# ipv_i7Vb3,
                    case ipv1_i7Vb4 of
                    { (_ [Occ=Dead], input'_a9WVe [Occ=Once],
                       output'_a9WVf [Occ=Once]) ->
                    (input'_a9WVe, output'_a9WVf)
                    } #)
                 }}]
GHC.IO.Encoding.latin1_decode1
  = \ (input_a9WVb :: Buffer Word8)
      (output_a9WVc :: CharBuffer)
      (s_i7Vb0 :: State# RealWorld) ->
      case GHC.IO.Encoding.Latin1.latin5 input_a9WVb output_a9WVc s_i7Vb0
      of
      { (# ipv_i7Vb3, ipv1_i7Vb4 #) ->
      (# ipv_i7Vb3,
         case ipv1_i7Vb4 of { (_why_a9WVd, input'_a9WVe, output'_a9WVf) ->
         (input'_a9WVe, output'_a9WVf)
         } #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
latin1_decode
  :: Buffer Word8 -> CharBuffer -> IO (Buffer Word8, CharBuffer)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.latin1_decode1
               `cast` (<Buffer Word8>_R
                       ->_R <CharBuffer>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
                       :: (Buffer Word8
                           -> CharBuffer
                           -> State# RealWorld
                           -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
                          ~R# (Buffer Word8
                               -> CharBuffer -> IO (Buffer Word8, Buffer Char) :: *))}]
latin1_decode
  = GHC.IO.Encoding.latin1_decode1
    `cast` (<Buffer Word8>_R
            ->_R <CharBuffer>_R
            ->_R Sym (GHC.Types.N:IO[0] <(Buffer Word8, Buffer Char)>_R)
            :: (Buffer Word8
                -> CharBuffer
                -> State# RealWorld
                -> (# State# RealWorld, (Buffer Word8, Buffer Char) #) :: *)
               ~R# (Buffer Word8
                    -> CharBuffer -> IO (Buffer Word8, Buffer Char) :: *))

-- RHS size: {terms: 17, types: 52, coercions: 0, joins: 0/0}
GHC.IO.Encoding.latin1_encode1
  :: CharBuffer
     -> Buffer Word8
     -> State# RealWorld
     -> (# State# RealWorld, (Buffer Char, Buffer Word8) #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (input_a9WV6 [Occ=Once] :: CharBuffer)
                 (output_a9WV7 [Occ=Once] :: Buffer Word8)
                 (s_i7Vb0 [Occ=Once] :: State# RealWorld) ->
                 case GHC.IO.Encoding.Latin1.latin3 input_a9WV6 output_a9WV7 s_i7Vb0
                 of
                 { (# ipv_i7Vb3 [Occ=Once], ipv1_i7Vb4 [Occ=Once!] #) ->
                 (# ipv_i7Vb3,
                    case ipv1_i7Vb4 of
                    { (_ [Occ=Dead], input'_a9WV9 [Occ=Once],
                       output'_a9WVa [Occ=Once]) ->
                    (input'_a9WV9, output'_a9WVa)
                    } #)
                 }}]
GHC.IO.Encoding.latin1_encode1
  = \ (input_a9WV6 :: CharBuffer)
      (output_a9WV7 :: Buffer Word8)
      (s_i7Vb0 :: State# RealWorld) ->
      case GHC.IO.Encoding.Latin1.latin3 input_a9WV6 output_a9WV7 s_i7Vb0
      of
      { (# ipv_i7Vb3, ipv1_i7Vb4 #) ->
      (# ipv_i7Vb3,
         case ipv1_i7Vb4 of { (_why_a9WV8, input'_a9WV9, output'_a9WVa) ->
         (input'_a9WV9, output'_a9WVa)
         } #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
latin1_encode
  :: CharBuffer -> Buffer Word8 -> IO (CharBuffer, Buffer Word8)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),1*U(U,U,U,U,U,U)><S(LLLSLS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Encoding.latin1_encode1
               `cast` (<CharBuffer>_R
                       ->_R <Buffer Word8>_R
                       ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
                       :: (CharBuffer
                           -> Buffer Word8
                           -> State# RealWorld
                           -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
                          ~R# (CharBuffer
                               -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *))}]
latin1_encode
  = GHC.IO.Encoding.latin1_encode1
    `cast` (<CharBuffer>_R
            ->_R <Buffer Word8>_R
            ->_R Sym (GHC.Types.N:IO[0] <(Buffer Char, Buffer Word8)>_R)
            :: (CharBuffer
                -> Buffer Word8
                -> State# RealWorld
                -> (# State# RealWorld, (Buffer Char, Buffer Word8) #) :: *)
               ~R# (CharBuffer
                    -> Buffer Word8 -> IO (Buffer Char, Buffer Word8) :: *))


