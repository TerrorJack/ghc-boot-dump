
==================== Pre unarise: ====================
2018-03-16 16:03:14.663294346 UTC

GHC.IO.BufferedIO.newBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.BufferState
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLL),U(U,A,A,A,A,A)>] =
    [] \r [v_s87M4]
        case v_s87M4 of {
          GHC.IO.BufferedIO.C:BufferedIO v_s87M6 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87M6;
        };

GHC.IO.BufferedIO.fillReadBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLL),U(A,U,A,A,A,A)>] =
    [] \r [v_s87Mc]
        case v_s87Mc of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         v_s87Mf [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87Mf;
        };

GHC.IO.BufferedIO.fillReadBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLL),U(A,A,U,A,A,A)>] =
    [] \r [v_s87Mk]
        case v_s87Mk of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87Mo [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87Mo;
        };

GHC.IO.BufferedIO.emptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),U(A,A,A,U,A,A)>] =
    [] \r [v_s87Ms]
        case v_s87Ms of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87Mx [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87Mx;
        };

GHC.IO.BufferedIO.flushWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),U(A,A,A,A,U,A)>] =
    [] \r [v_s87MA]
        case v_s87MA of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87MG [Occ=Once]
                                         _ [Occ=Dead] ->
              v_s87MG;
        };

GHC.IO.BufferedIO.flushWriteBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLS),U(A,A,A,A,A,U)>] =
    [] \r [v_s87MI]
        case v_s87MI of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87MP [Occ=Once] ->
              v_s87MP;
        };

$dmemptyWriteBuffer1_r87Lu
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dBufferedIO_s87MQ _dev_s87MR buf_s87MS s_s87MT]
        let {
          sat_s87N1 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
          [LclId] =
              [buf_s87MS] \u []
                  case buf_s87MS of {
                    GHC.IO.Buffer.Buffer dt_s87MV [Occ=Once]
                                         dt1_s87MW [Occ=Once]
                                         _ [Occ=Dead]
                                         dt2_s87MY [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                        GHC.IO.Buffer.Buffer [dt_s87MV
                                              dt1_s87MW
                                              GHC.IO.Buffer.WriteBuffer
                                              dt2_s87MY
                                              0#
                                              0#];
                  };
        } in  (#,#) [s_s87MT sat_s87N1];

GHC.IO.BufferedIO.$dmemptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmemptyWriteBuffer1_r87Lu eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wreadBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87N2
           w1_s87N3
           ww_s87N4
           ww1_s87N5
           ww2_s87N6
           ww3_s87N7
           ww4_s87N8
           ww5_s87N9
           w2_s87Na]
        case -# [ww3_s87N7 ww5_s87N9] of sat_s87Nd {
          __DEFAULT ->
              let {
                sat_s87Ne [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87Nd];
              } in 
                case plusAddr# [ww_s87N4 ww5_s87N9] of sat_s87Nb {
                  __DEFAULT ->
                      let {
                        sat_s87Nc [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87Nb];
                      } in 
                        case
                            GHC.IO.Device.read w_s87N2 w1_s87N3 sat_s87Nc sat_s87Ne w2_s87Na
                        of
                        { (#,#) ipv_s87Ng [Occ=Once] ipv1_s87Nh ->
                              case touch# [ww1_s87N5 ipv_s87Ng] of s'_s87Ni {
                                __DEFAULT ->
                                    let {
                                      sat_s87Nm [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s87N4
                                           ww1_s87N5
                                           ww2_s87N6
                                           ww3_s87N7
                                           ww4_s87N8
                                           ww5_s87N9
                                           ipv1_s87Nh] \u []
                                              case ipv1_s87Nh of {
                                                GHC.Types.I# y_s87Nk [Occ=Once] ->
                                                    case +# [ww5_s87N9 y_s87Nk] of sat_s87Nl {
                                                      __DEFAULT ->
                                                          GHC.IO.Buffer.Buffer [ww_s87N4
                                                                                ww1_s87N5
                                                                                ww2_s87N6
                                                                                ww3_s87N7
                                                                                ww4_s87N8
                                                                                sat_s87Nl];
                                                    };
                                              }; } in
                                    let {
                                      sat_s87Nn [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s87Nh sat_s87Nm];
                                    } in  (#,#) [s'_s87Ni sat_s87Nn];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87No w1_s87Np w2_s87Nq w3_s87Nr]
        case w2_s87Nq of {
          GHC.IO.Buffer.Buffer ww1_s87Nt [Occ=Once]
                               ww2_s87Nu [Occ=Once]
                               ww3_s87Nv [Occ=Once]
                               ww4_s87Nw [Occ=Once]
                               ww5_s87Nx [Occ=Once]
                               ww6_s87Ny [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBuf
                  w_s87No
                  w1_s87Np
                  ww1_s87Nt
                  ww2_s87Nu
                  ww3_s87Nv
                  ww4_s87Nw
                  ww5_s87Nx
                  ww6_s87Ny
                  w3_s87Nr;
        };

GHC.IO.BufferedIO.readBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.readBuf1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wreadBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87Nz
           w1_s87NA
           ww_s87NB
           ww1_s87NC
           ww2_s87ND
           ww3_s87NE
           ww4_s87NF
           ww5_s87NG
           w2_s87NH]
        case -# [ww3_s87NE ww5_s87NG] of sat_s87NK {
          __DEFAULT ->
              let {
                sat_s87NL [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87NK];
              } in 
                case plusAddr# [ww_s87NB ww5_s87NG] of sat_s87NI {
                  __DEFAULT ->
                      let {
                        sat_s87NJ [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87NI];
                      } in 
                        case
                            GHC.IO.Device.readNonBlocking
                                w_s87Nz w1_s87NA sat_s87NJ sat_s87NL w2_s87NH
                        of
                        { (#,#) ipv_s87NN [Occ=Once] ipv1_s87NO [Occ=Once!] ->
                              case touch# [ww1_s87NC ipv_s87NN] of s'_s87NP {
                                __DEFAULT ->
                                    case ipv1_s87NO of wild_s87NQ {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_s87NR [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                CCCS GHC.IO.Buffer.Buffer! [ww_s87NB
                                                                            ww1_s87NC
                                                                            ww2_s87ND
                                                                            ww3_s87NE
                                                                            ww4_s87NF
                                                                            ww5_s87NG]; } in
                                          let {
                                            sat_s87NS [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.Base.Nothing sat_s87NR];
                                          } in  (#,#) [s'_s87NP sat_s87NS];
                                      GHC.Base.Just n_s87NT [Occ=Once!] ->
                                          let {
                                            sat_s87NX [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                [ww_s87NB
                                                 ww1_s87NC
                                                 ww2_s87ND
                                                 ww3_s87NE
                                                 ww4_s87NF
                                                 ww5_s87NG
                                                 n_s87NT] \u []
                                                    case n_s87NT of {
                                                      GHC.Types.I# y_s87NV [Occ=Once] ->
                                                          case +# [ww5_s87NG y_s87NV] of sat_s87NW {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s87NB
                                                                                      ww1_s87NC
                                                                                      ww2_s87ND
                                                                                      ww3_s87NE
                                                                                      ww4_s87NF
                                                                                      sat_s87NW];
                                                          };
                                                    }; } in
                                          let {
                                            sat_s87NY [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [wild_s87NQ sat_s87NX];
                                          } in  (#,#) [s'_s87NP sat_s87NY];
                                    };
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87NZ w1_s87O0 w2_s87O1 w3_s87O2]
        case w2_s87O1 of {
          GHC.IO.Buffer.Buffer ww1_s87O4 [Occ=Once]
                               ww2_s87O5 [Occ=Once]
                               ww3_s87O6 [Occ=Once]
                               ww4_s87O7 [Occ=Once]
                               ww5_s87O8 [Occ=Once]
                               ww6_s87O9 [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBufNonBlocking
                  w_s87NZ
                  w1_s87O0
                  ww1_s87O4
                  ww2_s87O5
                  ww3_s87O6
                  ww4_s87O7
                  ww5_s87O8
                  ww6_s87O9
                  w3_s87O2;
        };

GHC.IO.BufferedIO.readBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.readBufNonBlocking1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wwriteBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87Oa
           w1_s87Ob
           ww_s87Oc
           ww1_s87Od
           ww2_s87Oe
           ww3_s87Of
           ww4_s87Og
           ww5_s87Oh
           w2_s87Oi]
        case -# [ww5_s87Oh ww4_s87Og] of sat_s87Ol {
          __DEFAULT ->
              let {
                sat_s87Om [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87Ol];
              } in 
                case plusAddr# [ww_s87Oc ww4_s87Og] of sat_s87Oj {
                  __DEFAULT ->
                      let {
                        sat_s87Ok [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87Oj];
                      } in 
                        case
                            GHC.IO.Device.write w_s87Oa w1_s87Ob sat_s87Ok sat_s87Om w2_s87Oi
                        of
                        { (#,#) ipv_s87Oo [Occ=Once] _ [Occ=Dead] ->
                              case touch# [ww1_s87Od ipv_s87Oo] of s'_s87Oq {
                                __DEFAULT ->
                                    let {
                                      sat_s87Or [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [ww_s87Oc
                                                                      ww1_s87Od
                                                                      ww2_s87Oe
                                                                      ww3_s87Of
                                                                      0#
                                                                      0#];
                                    } in  (#,#) [s'_s87Oq sat_s87Or];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87Os w1_s87Ot w2_s87Ou w3_s87Ov]
        case w2_s87Ou of {
          GHC.IO.Buffer.Buffer ww1_s87Ox [Occ=Once]
                               ww2_s87Oy [Occ=Once]
                               ww3_s87Oz [Occ=Once]
                               ww4_s87OA [Occ=Once]
                               ww5_s87OB [Occ=Once]
                               ww6_s87OC [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBuf
                  w_s87Os
                  w1_s87Ot
                  ww1_s87Ox
                  ww2_s87Oy
                  ww3_s87Oz
                  ww4_s87OA
                  ww5_s87OB
                  ww6_s87OC
                  w3_s87Ov;
        };

GHC.IO.BufferedIO.writeBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.writeBuf1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wwriteBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87OD
           w1_s87OE
           ww_s87OF
           ww1_s87OG
           ww2_s87OH
           ww3_s87OI
           ww4_s87OJ
           ww5_s87OK
           w2_s87OL]
        case -# [ww5_s87OK ww4_s87OJ] of sat_s87OO {
          __DEFAULT ->
              let {
                sat_s87OP [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87OO];
              } in 
                case plusAddr# [ww_s87OF ww4_s87OJ] of sat_s87OM {
                  __DEFAULT ->
                      let {
                        sat_s87ON [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87OM];
                      } in 
                        case
                            GHC.IO.Device.writeNonBlocking
                                w_s87OD w1_s87OE sat_s87ON sat_s87OP w2_s87OL
                        of
                        { (#,#) ipv_s87OR [Occ=Once] ipv1_s87OS ->
                              case touch# [ww1_s87OG ipv_s87OR] of s'_s87OT {
                                __DEFAULT ->
                                    let {
                                      sat_s87OY [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s87OF
                                           ww1_s87OG
                                           ww2_s87OH
                                           ww3_s87OI
                                           ww4_s87OJ
                                           ww5_s87OK
                                           ipv1_s87OS] \u []
                                              case ipv1_s87OS of {
                                                GHC.Types.I# y_s87OV [Occ=Once] ->
                                                    case
                                                        +# [ww4_s87OJ y_s87OV]
                                                    of
                                                    x_s87OW [Dmd=<S,U>]
                                                    { __DEFAULT ->
                                                          case ==# [x_s87OW ww5_s87OK] of {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s87OF
                                                                                      ww1_s87OG
                                                                                      ww2_s87OH
                                                                                      ww3_s87OI
                                                                                      x_s87OW
                                                                                      ww5_s87OK];
                                                            1# ->
                                                                GHC.IO.Buffer.Buffer [ww_s87OF
                                                                                      ww1_s87OG
                                                                                      ww2_s87OH
                                                                                      ww3_s87OI
                                                                                      0#
                                                                                      0#];
                                                          };
                                                    };
                                              }; } in
                                    let {
                                      sat_s87OZ [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s87OS sat_s87OY];
                                    } in  (#,#) [s'_s87OT sat_s87OZ];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87P0 w1_s87P1 w2_s87P2 w3_s87P3]
        case w2_s87P2 of {
          GHC.IO.Buffer.Buffer ww1_s87P5 [Occ=Once]
                               ww2_s87P6 [Occ=Once]
                               ww3_s87P7 [Occ=Once]
                               ww4_s87P8 [Occ=Once]
                               ww5_s87P9 [Occ=Once]
                               ww6_s87Pa [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBufNonBlocking
                  w_s87P0
                  w1_s87P1
                  ww1_s87P5
                  ww2_s87P6
                  ww3_s87P7
                  ww4_s87P8
                  ww5_s87P9
                  ww6_s87Pa
                  w3_s87P3;
        };

GHC.IO.BufferedIO.writeBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.writeBufNonBlocking1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.BufferedIO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule4];

GHC.IO.BufferedIO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.BufferedIO"#;

GHC.IO.BufferedIO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule2];

GHC.IO.BufferedIO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.BufferedIO.$trModule3
                                     GHC.IO.BufferedIO.$trModule1];

$krep_r87Lv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r87Lw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r87Lx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBufferState
                                              GHC.Types.[]];

$krep3_r87Ly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep4_r87Lz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv GHC.Types.[]];

$krep5_r87LA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r87Lz];

$krep6_r87LB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r87Lw GHC.Types.[]];

$krep7_r87LC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep6_r87LB];

$krep8_r87LD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r87LC GHC.Types.[]];

$krep9_r87LE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r87LD];

$krep10_r87LF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv $krep8_r87LD];

$krep11_r87LG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep10_r87LF];

$krep12_r87LH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r87LG GHC.Types.[]];

$krep13_r87LI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r87LH];

$krep14_r87LJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r87LA $krep8_r87LD];

$krep15_r87LK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep14_r87LJ];

$krep16_r87LL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep15_r87LK GHC.Types.[]];

$krep17_r87LM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep16_r87LL];

$krep18_r87LN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r87Lx $krep9_r87LE];

$krep19_r87LO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep9_r87LE];

$krep20_r87LP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep13_r87LI];

$krep21_r87LQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep17_r87LM];

GHC.IO.BufferedIO.$tcBufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep3_r87Ly];

$krep22_r87LR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep23_r87LS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep21_r87LQ];

$krep24_r87LT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep20_r87LP];

$krep25_r87LU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep19_r87LO];

$krep26_r87LV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep18_r87LN];

GHC.IO.BufferedIO.$tcBufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferedIO"#;

GHC.IO.BufferedIO.$tcBufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tcBufferedIO3];

GHC.IO.BufferedIO.$tcBufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17350223970197035200##
                                    12646105049483783716##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tcBufferedIO2
                                    0#
                                    GHC.IO.BufferedIO.$tcBufferedIO1];

$krep27_r87LW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep22_r87LR GHC.Types.[]];

$krep28_r87LX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep27_r87LW];

$krep29_r87LY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep28_r87LX];

$krep30_r87LZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep29_r87LY];

$krep31_r87M0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep30_r87LZ];

$krep32_r87M1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r87LS $krep31_r87M0];

$krep33_r87M2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep32_r87M1];

GHC.IO.BufferedIO.$tc'C:BufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep26_r87LV $krep33_r87M2];

GHC.IO.BufferedIO.$tc'C:BufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:BufferedIO"#;

GHC.IO.BufferedIO.$tc'C:BufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tc'C:BufferedIO3];

GHC.IO.BufferedIO.$tc'C:BufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14745255964277825469##
                                    12324508286010448901##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO2
                                    1#
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO1];

GHC.IO.BufferedIO.C:BufferedIO
  :: forall dev.
     (dev
      -> GHC.IO.Buffer.BufferState
      -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Base.Maybe GHC.Types.Int,
               GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> GHC.IO.BufferedIO.BufferedIO dev
[GblId[DataCon],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.C:BufferedIO [eta_B6
                                        eta_B5
                                        eta_B4
                                        eta_B3
                                        eta_B2
                                        eta_B1];


==================== STG syntax: ====================
2018-03-16 16:03:14.676429271 UTC

GHC.IO.BufferedIO.newBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.BufferState
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLL),U(U,A,A,A,A,A)>] =
    [] \r [v_s87M4]
        case v_s87M4 of {
          GHC.IO.BufferedIO.C:BufferedIO v_s87M6 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87M6;
        };

GHC.IO.BufferedIO.fillReadBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLL),U(A,U,A,A,A,A)>] =
    [] \r [v_s87Mc]
        case v_s87Mc of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         v_s87Mf [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87Mf;
        };

GHC.IO.BufferedIO.fillReadBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLL),U(A,A,U,A,A,A)>] =
    [] \r [v_s87Mk]
        case v_s87Mk of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87Mo [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87Mo;
        };

GHC.IO.BufferedIO.emptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),U(A,A,A,U,A,A)>] =
    [] \r [v_s87Ms]
        case v_s87Ms of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87Mx [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s87Mx;
        };

GHC.IO.BufferedIO.flushWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),U(A,A,A,A,U,A)>] =
    [] \r [v_s87MA]
        case v_s87MA of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87MG [Occ=Once]
                                         _ [Occ=Dead] ->
              v_s87MG;
        };

GHC.IO.BufferedIO.flushWriteBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLS),U(A,A,A,A,A,U)>] =
    [] \r [v_s87MI]
        case v_s87MI of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s87MP [Occ=Once] ->
              v_s87MP;
        };

$dmemptyWriteBuffer1_r87Lu
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dBufferedIO_s87MQ _dev_s87MR buf_s87MS void_0E]
        let {
          sat_s87N1 [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
          [LclId] =
              [buf_s87MS] \u []
                  case buf_s87MS of {
                    GHC.IO.Buffer.Buffer dt_s87MV [Occ=Once]
                                         dt1_s87MW [Occ=Once]
                                         _ [Occ=Dead]
                                         dt2_s87MY [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                        GHC.IO.Buffer.Buffer [dt_s87MV
                                              dt1_s87MW
                                              GHC.IO.Buffer.WriteBuffer
                                              dt2_s87MY
                                              0#
                                              0#];
                  };
        } in  Unit# [sat_s87N1];

GHC.IO.BufferedIO.$dmemptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmemptyWriteBuffer1_r87Lu eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wreadBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87N2
           w1_s87N3
           ww_s87N4
           ww1_s87N5
           ww2_s87N6
           ww3_s87N7
           ww4_s87N8
           ww5_s87N9
           void_0E]
        case -# [ww3_s87N7 ww5_s87N9] of sat_s87Nd {
          __DEFAULT ->
              let {
                sat_s87Ne [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87Nd];
              } in 
                case plusAddr# [ww_s87N4 ww5_s87N9] of sat_s87Nb {
                  __DEFAULT ->
                      let {
                        sat_s87Nc [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87Nb];
                      } in 
                        case
                            GHC.IO.Device.read
                                w_s87N2 w1_s87N3 sat_s87Nc sat_s87Ne GHC.Prim.void#
                        of
                        { Unit# ipv1_s87Nh ->
                              case touch# [ww1_s87N5 GHC.Prim.void#] of s'_s87Ni {
                                (##) ->
                                    let {
                                      sat_s87Nm [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s87N4
                                           ww1_s87N5
                                           ww2_s87N6
                                           ww3_s87N7
                                           ww4_s87N8
                                           ww5_s87N9
                                           ipv1_s87Nh] \u []
                                              case ipv1_s87Nh of {
                                                GHC.Types.I# y_s87Nk [Occ=Once] ->
                                                    case +# [ww5_s87N9 y_s87Nk] of sat_s87Nl {
                                                      __DEFAULT ->
                                                          GHC.IO.Buffer.Buffer [ww_s87N4
                                                                                ww1_s87N5
                                                                                ww2_s87N6
                                                                                ww3_s87N7
                                                                                ww4_s87N8
                                                                                sat_s87Nl];
                                                    };
                                              }; } in
                                    let {
                                      sat_s87Nn [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s87Nh sat_s87Nm];
                                    } in  Unit# [sat_s87Nn];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87No w1_s87Np w2_s87Nq void_0E]
        case w2_s87Nq of {
          GHC.IO.Buffer.Buffer ww1_s87Nt [Occ=Once]
                               ww2_s87Nu [Occ=Once]
                               ww3_s87Nv [Occ=Once]
                               ww4_s87Nw [Occ=Once]
                               ww5_s87Nx [Occ=Once]
                               ww6_s87Ny [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBuf
                  w_s87No
                  w1_s87Np
                  ww1_s87Nt
                  ww2_s87Nu
                  ww3_s87Nv
                  ww4_s87Nw
                  ww5_s87Nx
                  ww6_s87Ny
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.readBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.readBuf1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wreadBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87Nz
           w1_s87NA
           ww_s87NB
           ww1_s87NC
           ww2_s87ND
           ww3_s87NE
           ww4_s87NF
           ww5_s87NG
           void_0E]
        case -# [ww3_s87NE ww5_s87NG] of sat_s87NK {
          __DEFAULT ->
              let {
                sat_s87NL [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87NK];
              } in 
                case plusAddr# [ww_s87NB ww5_s87NG] of sat_s87NI {
                  __DEFAULT ->
                      let {
                        sat_s87NJ [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87NI];
                      } in 
                        case
                            GHC.IO.Device.readNonBlocking
                                w_s87Nz w1_s87NA sat_s87NJ sat_s87NL GHC.Prim.void#
                        of
                        { Unit# ipv1_s87NO [Occ=Once!] ->
                              case touch# [ww1_s87NC GHC.Prim.void#] of s'_s87NP {
                                (##) ->
                                    case ipv1_s87NO of wild_s87NQ {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_s87NR [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                CCCS GHC.IO.Buffer.Buffer! [ww_s87NB
                                                                            ww1_s87NC
                                                                            ww2_s87ND
                                                                            ww3_s87NE
                                                                            ww4_s87NF
                                                                            ww5_s87NG]; } in
                                          let {
                                            sat_s87NS [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.Base.Nothing sat_s87NR];
                                          } in  Unit# [sat_s87NS];
                                      GHC.Base.Just n_s87NT [Occ=Once!] ->
                                          let {
                                            sat_s87NX [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                [ww_s87NB
                                                 ww1_s87NC
                                                 ww2_s87ND
                                                 ww3_s87NE
                                                 ww4_s87NF
                                                 ww5_s87NG
                                                 n_s87NT] \u []
                                                    case n_s87NT of {
                                                      GHC.Types.I# y_s87NV [Occ=Once] ->
                                                          case +# [ww5_s87NG y_s87NV] of sat_s87NW {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s87NB
                                                                                      ww1_s87NC
                                                                                      ww2_s87ND
                                                                                      ww3_s87NE
                                                                                      ww4_s87NF
                                                                                      sat_s87NW];
                                                          };
                                                    }; } in
                                          let {
                                            sat_s87NY [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [wild_s87NQ sat_s87NX];
                                          } in  Unit# [sat_s87NY];
                                    };
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87NZ w1_s87O0 w2_s87O1 void_0E]
        case w2_s87O1 of {
          GHC.IO.Buffer.Buffer ww1_s87O4 [Occ=Once]
                               ww2_s87O5 [Occ=Once]
                               ww3_s87O6 [Occ=Once]
                               ww4_s87O7 [Occ=Once]
                               ww5_s87O8 [Occ=Once]
                               ww6_s87O9 [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBufNonBlocking
                  w_s87NZ
                  w1_s87O0
                  ww1_s87O4
                  ww2_s87O5
                  ww3_s87O6
                  ww4_s87O7
                  ww5_s87O8
                  ww6_s87O9
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.readBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.readBufNonBlocking1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wwriteBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87Oa
           w1_s87Ob
           ww_s87Oc
           ww1_s87Od
           ww2_s87Oe
           ww3_s87Of
           ww4_s87Og
           ww5_s87Oh
           void_0E]
        case -# [ww5_s87Oh ww4_s87Og] of sat_s87Ol {
          __DEFAULT ->
              let {
                sat_s87Om [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87Ol];
              } in 
                case plusAddr# [ww_s87Oc ww4_s87Og] of sat_s87Oj {
                  __DEFAULT ->
                      let {
                        sat_s87Ok [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87Oj];
                      } in 
                        case
                            GHC.IO.Device.write
                                w_s87Oa w1_s87Ob sat_s87Ok sat_s87Om GHC.Prim.void#
                        of
                        { Unit# _ [Occ=Dead] ->
                              case touch# [ww1_s87Od GHC.Prim.void#] of s'_s87Oq {
                                (##) ->
                                    let {
                                      sat_s87Or [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [ww_s87Oc
                                                                      ww1_s87Od
                                                                      ww2_s87Oe
                                                                      ww3_s87Of
                                                                      0#
                                                                      0#];
                                    } in  Unit# [sat_s87Or];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87Os w1_s87Ot w2_s87Ou void_0E]
        case w2_s87Ou of {
          GHC.IO.Buffer.Buffer ww1_s87Ox [Occ=Once]
                               ww2_s87Oy [Occ=Once]
                               ww3_s87Oz [Occ=Once]
                               ww4_s87OA [Occ=Once]
                               ww5_s87OB [Occ=Once]
                               ww6_s87OC [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBuf
                  w_s87Os
                  w1_s87Ot
                  ww1_s87Ox
                  ww2_s87Oy
                  ww3_s87Oz
                  ww4_s87OA
                  ww5_s87OB
                  ww6_s87OC
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.writeBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.writeBuf1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wwriteBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87OD
           w1_s87OE
           ww_s87OF
           ww1_s87OG
           ww2_s87OH
           ww3_s87OI
           ww4_s87OJ
           ww5_s87OK
           void_0E]
        case -# [ww5_s87OK ww4_s87OJ] of sat_s87OO {
          __DEFAULT ->
              let {
                sat_s87OP [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s87OO];
              } in 
                case plusAddr# [ww_s87OF ww4_s87OJ] of sat_s87OM {
                  __DEFAULT ->
                      let {
                        sat_s87ON [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s87OM];
                      } in 
                        case
                            GHC.IO.Device.writeNonBlocking
                                w_s87OD w1_s87OE sat_s87ON sat_s87OP GHC.Prim.void#
                        of
                        { Unit# ipv1_s87OS ->
                              case touch# [ww1_s87OG GHC.Prim.void#] of s'_s87OT {
                                (##) ->
                                    let {
                                      sat_s87OY [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s87OF
                                           ww1_s87OG
                                           ww2_s87OH
                                           ww3_s87OI
                                           ww4_s87OJ
                                           ww5_s87OK
                                           ipv1_s87OS] \u []
                                              case ipv1_s87OS of {
                                                GHC.Types.I# y_s87OV [Occ=Once] ->
                                                    case
                                                        +# [ww4_s87OJ y_s87OV]
                                                    of
                                                    x_s87OW [Dmd=<S,U>]
                                                    { __DEFAULT ->
                                                          case ==# [x_s87OW ww5_s87OK] of {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s87OF
                                                                                      ww1_s87OG
                                                                                      ww2_s87OH
                                                                                      ww3_s87OI
                                                                                      x_s87OW
                                                                                      ww5_s87OK];
                                                            1# ->
                                                                GHC.IO.Buffer.Buffer [ww_s87OF
                                                                                      ww1_s87OG
                                                                                      ww2_s87OH
                                                                                      ww3_s87OI
                                                                                      0#
                                                                                      0#];
                                                          };
                                                    };
                                              }; } in
                                    let {
                                      sat_s87OZ [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s87OS sat_s87OY];
                                    } in  Unit# [sat_s87OZ];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s87P0 w1_s87P1 w2_s87P2 void_0E]
        case w2_s87P2 of {
          GHC.IO.Buffer.Buffer ww1_s87P5 [Occ=Once]
                               ww2_s87P6 [Occ=Once]
                               ww3_s87P7 [Occ=Once]
                               ww4_s87P8 [Occ=Once]
                               ww5_s87P9 [Occ=Once]
                               ww6_s87Pa [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBufNonBlocking
                  w_s87P0
                  w1_s87P1
                  ww1_s87P5
                  ww2_s87P6
                  ww3_s87P7
                  ww4_s87P8
                  ww5_s87P9
                  ww6_s87Pa
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.writeBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.writeBufNonBlocking1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.BufferedIO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule4];

GHC.IO.BufferedIO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.BufferedIO"#;

GHC.IO.BufferedIO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule2];

GHC.IO.BufferedIO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.BufferedIO.$trModule3
                                     GHC.IO.BufferedIO.$trModule1];

$krep_r87Lv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r87Lw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r87Lx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBufferState
                                              GHC.Types.[]];

$krep3_r87Ly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep4_r87Lz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv GHC.Types.[]];

$krep5_r87LA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r87Lz];

$krep6_r87LB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r87Lw GHC.Types.[]];

$krep7_r87LC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep6_r87LB];

$krep8_r87LD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r87LC GHC.Types.[]];

$krep9_r87LE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r87LD];

$krep10_r87LF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv $krep8_r87LD];

$krep11_r87LG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep10_r87LF];

$krep12_r87LH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r87LG GHC.Types.[]];

$krep13_r87LI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r87LH];

$krep14_r87LJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r87LA $krep8_r87LD];

$krep15_r87LK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep14_r87LJ];

$krep16_r87LL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep15_r87LK GHC.Types.[]];

$krep17_r87LM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep16_r87LL];

$krep18_r87LN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r87Lx $krep9_r87LE];

$krep19_r87LO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep9_r87LE];

$krep20_r87LP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep13_r87LI];

$krep21_r87LQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep17_r87LM];

GHC.IO.BufferedIO.$tcBufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep3_r87Ly];

$krep22_r87LR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep23_r87LS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep21_r87LQ];

$krep24_r87LT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep20_r87LP];

$krep25_r87LU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep19_r87LO];

$krep26_r87LV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep18_r87LN];

GHC.IO.BufferedIO.$tcBufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferedIO"#;

GHC.IO.BufferedIO.$tcBufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tcBufferedIO3];

GHC.IO.BufferedIO.$tcBufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17350223970197035200##
                                    12646105049483783716##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tcBufferedIO2
                                    0#
                                    GHC.IO.BufferedIO.$tcBufferedIO1];

$krep27_r87LW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep22_r87LR GHC.Types.[]];

$krep28_r87LX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep27_r87LW];

$krep29_r87LY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep28_r87LX];

$krep30_r87LZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep29_r87LY];

$krep31_r87M0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep30_r87LZ];

$krep32_r87M1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r87LS $krep31_r87M0];

$krep33_r87M2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep32_r87M1];

GHC.IO.BufferedIO.$tc'C:BufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep26_r87LV $krep33_r87M2];

GHC.IO.BufferedIO.$tc'C:BufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:BufferedIO"#;

GHC.IO.BufferedIO.$tc'C:BufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tc'C:BufferedIO3];

GHC.IO.BufferedIO.$tc'C:BufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14745255964277825469##
                                    12324508286010448901##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO2
                                    1#
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO1];

GHC.IO.BufferedIO.C:BufferedIO
  :: forall dev.
     (dev
      -> GHC.IO.Buffer.BufferState
      -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Base.Maybe GHC.Types.Int,
               GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> GHC.IO.BufferedIO.BufferedIO dev
[GblId[DataCon],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.C:BufferedIO [eta_B6
                                        eta_B5
                                        eta_B4
                                        eta_B3
                                        eta_B2
                                        eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:03:15.714674022 UTC

GHC.IO.BufferedIO.newBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.BufferState
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLL),U(U,A,A,A,A,A)>] =
    [] \r [v_s88dB]
        case v_s88dB of {
          GHC.IO.BufferedIO.C:BufferedIO v_s88dD [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88dD;
        };

GHC.IO.BufferedIO.fillReadBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLL),U(A,U,A,A,A,A)>] =
    [] \r [v_s88dJ]
        case v_s88dJ of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         v_s88dM [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88dM;
        };

GHC.IO.BufferedIO.fillReadBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLL),U(A,A,U,A,A,A)>] =
    [] \r [v_s88dR]
        case v_s88dR of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88dV [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88dV;
        };

GHC.IO.BufferedIO.emptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),U(A,A,A,U,A,A)>] =
    [] \r [v_s88dZ]
        case v_s88dZ of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88e4 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88e4;
        };

GHC.IO.BufferedIO.flushWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),U(A,A,A,A,U,A)>] =
    [] \r [v_s88e7]
        case v_s88e7 of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88ed [Occ=Once]
                                         _ [Occ=Dead] ->
              v_s88ed;
        };

GHC.IO.BufferedIO.flushWriteBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLS),U(A,A,A,A,A,U)>] =
    [] \r [v_s88ef]
        case v_s88ef of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88em [Occ=Once] ->
              v_s88em;
        };

$dmemptyWriteBuffer1_r87Lu
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dBufferedIO_s88en _dev_s88eo buf_s88ep s_s88eq]
        let {
          sat_s88ey [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
          [LclId] =
              [buf_s88ep] \u []
                  case buf_s88ep of {
                    GHC.IO.Buffer.Buffer dt_s88es [Occ=Once]
                                         dt1_s88et [Occ=Once]
                                         _ [Occ=Dead]
                                         dt2_s88ev [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                        GHC.IO.Buffer.Buffer [dt_s88es
                                              dt1_s88et
                                              GHC.IO.Buffer.WriteBuffer
                                              dt2_s88ev
                                              0#
                                              0#];
                  };
        } in  (#,#) [s_s88eq sat_s88ey];

GHC.IO.BufferedIO.$dmemptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        $dmemptyWriteBuffer1_r87Lu eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wreadBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88ez
           w1_s88eA
           ww_s88eB
           ww1_s88eC
           ww2_s88eD
           ww3_s88eE
           ww4_s88eF
           ww5_s88eG
           w2_s88eH]
        case -# [ww3_s88eE ww5_s88eG] of sat_s88eK {
          __DEFAULT ->
              let {
                sat_s88eL [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88eK];
              } in 
                case plusAddr# [ww_s88eB ww5_s88eG] of sat_s88eI {
                  __DEFAULT ->
                      let {
                        sat_s88eJ [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88eI];
                      } in 
                        case
                            GHC.IO.Device.read w_s88ez w1_s88eA sat_s88eJ sat_s88eL w2_s88eH
                        of
                        { (#,#) ipv_s88eN [Occ=Once] ipv1_s88eO ->
                              case touch# [ww1_s88eC ipv_s88eN] of s'_s88eP {
                                __DEFAULT ->
                                    let {
                                      sat_s88eT [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s88eB
                                           ww1_s88eC
                                           ww2_s88eD
                                           ww3_s88eE
                                           ww4_s88eF
                                           ww5_s88eG
                                           ipv1_s88eO] \u []
                                              case ipv1_s88eO of {
                                                GHC.Types.I# y_s88eR [Occ=Once] ->
                                                    case +# [ww5_s88eG y_s88eR] of sat_s88eS {
                                                      __DEFAULT ->
                                                          GHC.IO.Buffer.Buffer [ww_s88eB
                                                                                ww1_s88eC
                                                                                ww2_s88eD
                                                                                ww3_s88eE
                                                                                ww4_s88eF
                                                                                sat_s88eS];
                                                    };
                                              }; } in
                                    let {
                                      sat_s88eU [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s88eO sat_s88eT];
                                    } in  (#,#) [s'_s88eP sat_s88eU];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88eV w1_s88eW w2_s88eX w3_s88eY]
        case w2_s88eX of {
          GHC.IO.Buffer.Buffer ww1_s88f0 [Occ=Once]
                               ww2_s88f1 [Occ=Once]
                               ww3_s88f2 [Occ=Once]
                               ww4_s88f3 [Occ=Once]
                               ww5_s88f4 [Occ=Once]
                               ww6_s88f5 [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBuf
                  w_s88eV
                  w1_s88eW
                  ww1_s88f0
                  ww2_s88f1
                  ww3_s88f2
                  ww4_s88f3
                  ww5_s88f4
                  ww6_s88f5
                  w3_s88eY;
        };

GHC.IO.BufferedIO.readBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.readBuf1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wreadBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88f6
           w1_s88f7
           ww_s88f8
           ww1_s88f9
           ww2_s88fa
           ww3_s88fb
           ww4_s88fc
           ww5_s88fd
           w2_s88fe]
        case -# [ww3_s88fb ww5_s88fd] of sat_s88fh {
          __DEFAULT ->
              let {
                sat_s88fi [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88fh];
              } in 
                case plusAddr# [ww_s88f8 ww5_s88fd] of sat_s88ff {
                  __DEFAULT ->
                      let {
                        sat_s88fg [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88ff];
                      } in 
                        case
                            GHC.IO.Device.readNonBlocking
                                w_s88f6 w1_s88f7 sat_s88fg sat_s88fi w2_s88fe
                        of
                        { (#,#) ipv_s88fk [Occ=Once] ipv1_s88fl [Occ=Once!] ->
                              case touch# [ww1_s88f9 ipv_s88fk] of s'_s88fm {
                                __DEFAULT ->
                                    case ipv1_s88fl of wild_s88fn {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_s88fo [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                CCCS GHC.IO.Buffer.Buffer! [ww_s88f8
                                                                            ww1_s88f9
                                                                            ww2_s88fa
                                                                            ww3_s88fb
                                                                            ww4_s88fc
                                                                            ww5_s88fd]; } in
                                          let {
                                            sat_s88fp [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.Base.Nothing sat_s88fo];
                                          } in  (#,#) [s'_s88fm sat_s88fp];
                                      GHC.Base.Just n_s88fq [Occ=Once!] ->
                                          let {
                                            sat_s88fu [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                [ww_s88f8
                                                 ww1_s88f9
                                                 ww2_s88fa
                                                 ww3_s88fb
                                                 ww4_s88fc
                                                 ww5_s88fd
                                                 n_s88fq] \u []
                                                    case n_s88fq of {
                                                      GHC.Types.I# y_s88fs [Occ=Once] ->
                                                          case +# [ww5_s88fd y_s88fs] of sat_s88ft {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s88f8
                                                                                      ww1_s88f9
                                                                                      ww2_s88fa
                                                                                      ww3_s88fb
                                                                                      ww4_s88fc
                                                                                      sat_s88ft];
                                                          };
                                                    }; } in
                                          let {
                                            sat_s88fv [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [wild_s88fn sat_s88fu];
                                          } in  (#,#) [s'_s88fm sat_s88fv];
                                    };
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88fw w1_s88fx w2_s88fy w3_s88fz]
        case w2_s88fy of {
          GHC.IO.Buffer.Buffer ww1_s88fB [Occ=Once]
                               ww2_s88fC [Occ=Once]
                               ww3_s88fD [Occ=Once]
                               ww4_s88fE [Occ=Once]
                               ww5_s88fF [Occ=Once]
                               ww6_s88fG [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBufNonBlocking
                  w_s88fw
                  w1_s88fx
                  ww1_s88fB
                  ww2_s88fC
                  ww3_s88fD
                  ww4_s88fE
                  ww5_s88fF
                  ww6_s88fG
                  w3_s88fz;
        };

GHC.IO.BufferedIO.readBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.readBufNonBlocking1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wwriteBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88fH
           w1_s88fI
           ww_s88fJ
           ww1_s88fK
           ww2_s88fL
           ww3_s88fM
           ww4_s88fN
           ww5_s88fO
           w2_s88fP]
        case -# [ww5_s88fO ww4_s88fN] of sat_s88fS {
          __DEFAULT ->
              let {
                sat_s88fT [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88fS];
              } in 
                case plusAddr# [ww_s88fJ ww4_s88fN] of sat_s88fQ {
                  __DEFAULT ->
                      let {
                        sat_s88fR [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88fQ];
                      } in 
                        case
                            GHC.IO.Device.write w_s88fH w1_s88fI sat_s88fR sat_s88fT w2_s88fP
                        of
                        { (#,#) ipv_s88fV [Occ=Once] _ [Occ=Dead] ->
                              case touch# [ww1_s88fK ipv_s88fV] of s'_s88fX {
                                __DEFAULT ->
                                    let {
                                      sat_s88fY [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [ww_s88fJ
                                                                      ww1_s88fK
                                                                      ww2_s88fL
                                                                      ww3_s88fM
                                                                      0#
                                                                      0#];
                                    } in  (#,#) [s'_s88fX sat_s88fY];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88fZ w1_s88g0 w2_s88g1 w3_s88g2]
        case w2_s88g1 of {
          GHC.IO.Buffer.Buffer ww1_s88g4 [Occ=Once]
                               ww2_s88g5 [Occ=Once]
                               ww3_s88g6 [Occ=Once]
                               ww4_s88g7 [Occ=Once]
                               ww5_s88g8 [Occ=Once]
                               ww6_s88g9 [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBuf
                  w_s88fZ
                  w1_s88g0
                  ww1_s88g4
                  ww2_s88g5
                  ww3_s88g6
                  ww4_s88g7
                  ww5_s88g8
                  ww6_s88g9
                  w3_s88g2;
        };

GHC.IO.BufferedIO.writeBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.writeBuf1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$wwriteBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88ga
           w1_s88gb
           ww_s88gc
           ww1_s88gd
           ww2_s88ge
           ww3_s88gf
           ww4_s88gg
           ww5_s88gh
           w2_s88gi]
        case -# [ww5_s88gh ww4_s88gg] of sat_s88gl {
          __DEFAULT ->
              let {
                sat_s88gm [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88gl];
              } in 
                case plusAddr# [ww_s88gc ww4_s88gg] of sat_s88gj {
                  __DEFAULT ->
                      let {
                        sat_s88gk [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88gj];
                      } in 
                        case
                            GHC.IO.Device.writeNonBlocking
                                w_s88ga w1_s88gb sat_s88gk sat_s88gm w2_s88gi
                        of
                        { (#,#) ipv_s88go [Occ=Once] ipv1_s88gp ->
                              case touch# [ww1_s88gd ipv_s88go] of s'_s88gq {
                                __DEFAULT ->
                                    let {
                                      sat_s88gv [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s88gc
                                           ww1_s88gd
                                           ww2_s88ge
                                           ww3_s88gf
                                           ww4_s88gg
                                           ww5_s88gh
                                           ipv1_s88gp] \u []
                                              case ipv1_s88gp of {
                                                GHC.Types.I# y_s88gs [Occ=Once] ->
                                                    case
                                                        +# [ww4_s88gg y_s88gs]
                                                    of
                                                    x_s88gt [Dmd=<S,U>]
                                                    { __DEFAULT ->
                                                          case ==# [x_s88gt ww5_s88gh] of {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s88gc
                                                                                      ww1_s88gd
                                                                                      ww2_s88ge
                                                                                      ww3_s88gf
                                                                                      x_s88gt
                                                                                      ww5_s88gh];
                                                            1# ->
                                                                GHC.IO.Buffer.Buffer [ww_s88gc
                                                                                      ww1_s88gd
                                                                                      ww2_s88ge
                                                                                      ww3_s88gf
                                                                                      0#
                                                                                      0#];
                                                          };
                                                    };
                                              }; } in
                                    let {
                                      sat_s88gw [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s88gp sat_s88gv];
                                    } in  (#,#) [s'_s88gq sat_s88gw];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88gx w1_s88gy w2_s88gz w3_s88gA]
        case w2_s88gz of {
          GHC.IO.Buffer.Buffer ww1_s88gC [Occ=Once]
                               ww2_s88gD [Occ=Once]
                               ww3_s88gE [Occ=Once]
                               ww4_s88gF [Occ=Once]
                               ww5_s88gG [Occ=Once]
                               ww6_s88gH [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBufNonBlocking
                  w_s88gx
                  w1_s88gy
                  ww1_s88gC
                  ww2_s88gD
                  ww3_s88gE
                  ww4_s88gF
                  ww5_s88gG
                  ww6_s88gH
                  w3_s88gA;
        };

GHC.IO.BufferedIO.writeBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.writeBufNonBlocking1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.IO.BufferedIO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.BufferedIO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule4];

GHC.IO.BufferedIO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.BufferedIO"#;

GHC.IO.BufferedIO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule2];

GHC.IO.BufferedIO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.BufferedIO.$trModule3
                                     GHC.IO.BufferedIO.$trModule1];

$krep_r87Lv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r87Lw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r87Lx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBufferState
                                              GHC.Types.[]];

$krep3_r87Ly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep4_r87Lz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv GHC.Types.[]];

$krep5_r87LA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r87Lz];

$krep6_r87LB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r87Lw GHC.Types.[]];

$krep7_r87LC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep6_r87LB];

$krep8_r87LD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r87LC GHC.Types.[]];

$krep9_r87LE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r87LD];

$krep10_r87LF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv $krep8_r87LD];

$krep11_r87LG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep10_r87LF];

$krep12_r87LH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r87LG GHC.Types.[]];

$krep13_r87LI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r87LH];

$krep14_r87LJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r87LA $krep8_r87LD];

$krep15_r87LK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep14_r87LJ];

$krep16_r87LL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep15_r87LK GHC.Types.[]];

$krep17_r87LM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep16_r87LL];

$krep18_r87LN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r87Lx $krep9_r87LE];

$krep19_r87LO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep9_r87LE];

$krep20_r87LP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep13_r87LI];

$krep21_r87LQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep17_r87LM];

GHC.IO.BufferedIO.$tcBufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep3_r87Ly];

$krep22_r87LR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep23_r87LS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep21_r87LQ];

$krep24_r87LT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep20_r87LP];

$krep25_r87LU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep19_r87LO];

$krep26_r87LV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep18_r87LN];

GHC.IO.BufferedIO.$tcBufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferedIO"#;

GHC.IO.BufferedIO.$tcBufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tcBufferedIO3];

GHC.IO.BufferedIO.$tcBufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17350223970197035200##
                                    12646105049483783716##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tcBufferedIO2
                                    0#
                                    GHC.IO.BufferedIO.$tcBufferedIO1];

$krep27_r87LW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep22_r87LR GHC.Types.[]];

$krep28_r87LX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep27_r87LW];

$krep29_r87LY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep28_r87LX];

$krep30_r87LZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep29_r87LY];

$krep31_r87M0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep30_r87LZ];

$krep32_r87M1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r87LS $krep31_r87M0];

$krep33_r87M2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep32_r87M1];

GHC.IO.BufferedIO.$tc'C:BufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep26_r87LV $krep33_r87M2];

GHC.IO.BufferedIO.$tc'C:BufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:BufferedIO"#;

GHC.IO.BufferedIO.$tc'C:BufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tc'C:BufferedIO3];

GHC.IO.BufferedIO.$tc'C:BufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14745255964277825469##
                                    12324508286010448901##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO2
                                    1#
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO1];

GHC.IO.BufferedIO.C:BufferedIO
  :: forall dev.
     (dev
      -> GHC.IO.Buffer.BufferState
      -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Base.Maybe GHC.Types.Int,
               GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> GHC.IO.BufferedIO.BufferedIO dev
[GblId[DataCon],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.C:BufferedIO [eta_B6
                                        eta_B5
                                        eta_B4
                                        eta_B3
                                        eta_B2
                                        eta_B1];


==================== STG syntax: ====================
2018-03-16 16:03:15.727708017 UTC

GHC.IO.BufferedIO.newBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.BufferState
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLLLLL),U(U,A,A,A,A,A)>] =
    [] \r [v_s88dB]
        case v_s88dB of {
          GHC.IO.BufferedIO.C:BufferedIO v_s88dD [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88dD;
        };

GHC.IO.BufferedIO.fillReadBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSLLLL),U(A,U,A,A,A,A)>] =
    [] \r [v_s88dJ]
        case v_s88dJ of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         v_s88dM [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88dM;
        };

GHC.IO.BufferedIO.fillReadBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLSLLL),U(A,A,U,A,A,A)>] =
    [] \r [v_s88dR]
        case v_s88dR of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88dV [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88dV;
        };

GHC.IO.BufferedIO.emptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLSLL),U(A,A,A,U,A,A)>] =
    [] \r [v_s88dZ]
        case v_s88dZ of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88e4 [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
              v_s88e4;
        };

GHC.IO.BufferedIO.flushWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLSL),U(A,A,A,A,U,A)>] =
    [] \r [v_s88e7]
        case v_s88e7 of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88ed [Occ=Once]
                                         _ [Occ=Dead] ->
              v_s88ed;
        };

GHC.IO.BufferedIO.flushWriteBuffer0
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId[ClassOp],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LLLLLS),U(A,A,A,A,A,U)>] =
    [] \r [v_s88ef]
        case v_s88ef of {
          GHC.IO.BufferedIO.C:BufferedIO _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead]
                                         v_s88em [Occ=Once] ->
              v_s88em;
        };

$dmemptyWriteBuffer1_r87Lu
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [$dBufferedIO_s88en _dev_s88eo buf_s88ep void_0E]
        let {
          sat_s88ey [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
          [LclId] =
              [buf_s88ep] \u []
                  case buf_s88ep of {
                    GHC.IO.Buffer.Buffer dt_s88es [Occ=Once]
                                         dt1_s88et [Occ=Once]
                                         _ [Occ=Dead]
                                         dt2_s88ev [Occ=Once]
                                         _ [Occ=Dead]
                                         _ [Occ=Dead] ->
                        GHC.IO.Buffer.Buffer [dt_s88es
                                              dt1_s88et
                                              GHC.IO.Buffer.WriteBuffer
                                              dt2_s88ev
                                              0#
                                              0#];
                  };
        } in  Unit# [sat_s88ey];

GHC.IO.BufferedIO.$dmemptyWriteBuffer
  :: forall dev.
     GHC.IO.BufferedIO.BufferedIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,A><L,A><L,1*U(U,U,A,U,A,A)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        $dmemptyWriteBuffer1_r87Lu eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wreadBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88ez
           w1_s88eA
           ww_s88eB
           ww1_s88eC
           ww2_s88eD
           ww3_s88eE
           ww4_s88eF
           ww5_s88eG
           void_0E]
        case -# [ww3_s88eE ww5_s88eG] of sat_s88eK {
          __DEFAULT ->
              let {
                sat_s88eL [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88eK];
              } in 
                case plusAddr# [ww_s88eB ww5_s88eG] of sat_s88eI {
                  __DEFAULT ->
                      let {
                        sat_s88eJ [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88eI];
                      } in 
                        case
                            GHC.IO.Device.read
                                w_s88ez w1_s88eA sat_s88eJ sat_s88eL GHC.Prim.void#
                        of
                        { Unit# ipv1_s88eO ->
                              case touch# [ww1_s88eC GHC.Prim.void#] of s'_s88eP {
                                (##) ->
                                    let {
                                      sat_s88eT [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s88eB
                                           ww1_s88eC
                                           ww2_s88eD
                                           ww3_s88eE
                                           ww4_s88eF
                                           ww5_s88eG
                                           ipv1_s88eO] \u []
                                              case ipv1_s88eO of {
                                                GHC.Types.I# y_s88eR [Occ=Once] ->
                                                    case +# [ww5_s88eG y_s88eR] of sat_s88eS {
                                                      __DEFAULT ->
                                                          GHC.IO.Buffer.Buffer [ww_s88eB
                                                                                ww1_s88eC
                                                                                ww2_s88eD
                                                                                ww3_s88eE
                                                                                ww4_s88eF
                                                                                sat_s88eS];
                                                    };
                                              }; } in
                                    let {
                                      sat_s88eU [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s88eO sat_s88eT];
                                    } in  Unit# [sat_s88eU];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88eV w1_s88eW w2_s88eX void_0E]
        case w2_s88eX of {
          GHC.IO.Buffer.Buffer ww1_s88f0 [Occ=Once]
                               ww2_s88f1 [Occ=Once]
                               ww3_s88f2 [Occ=Once]
                               ww4_s88f3 [Occ=Once]
                               ww5_s88f4 [Occ=Once]
                               ww6_s88f5 [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBuf
                  w_s88eV
                  w1_s88eW
                  ww1_s88f0
                  ww2_s88f1
                  ww3_s88f2
                  ww4_s88f3
                  ww5_s88f4
                  ww6_s88f5
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.readBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(C(C(C(C(S(SL)))))LLL),1*U(1*C1(C1(C1(C1(U(U,U(U)))))),A,A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.readBuf1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wreadBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88f6
           w1_s88f7
           ww_s88f8
           ww1_s88f9
           ww2_s88fa
           ww3_s88fb
           ww4_s88fc
           ww5_s88fd
           void_0E]
        case -# [ww3_s88fb ww5_s88fd] of sat_s88fh {
          __DEFAULT ->
              let {
                sat_s88fi [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88fh];
              } in 
                case plusAddr# [ww_s88f8 ww5_s88fd] of sat_s88ff {
                  __DEFAULT ->
                      let {
                        sat_s88fg [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88ff];
                      } in 
                        case
                            GHC.IO.Device.readNonBlocking
                                w_s88f6 w1_s88f7 sat_s88fg sat_s88fi GHC.Prim.void#
                        of
                        { Unit# ipv1_s88fl [Occ=Once!] ->
                              case touch# [ww1_s88f9 GHC.Prim.void#] of s'_s88fm {
                                (##) ->
                                    case ipv1_s88fl of wild_s88fn {
                                      GHC.Base.Nothing ->
                                          let {
                                            sat_s88fo [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                CCCS GHC.IO.Buffer.Buffer! [ww_s88f8
                                                                            ww1_s88f9
                                                                            ww2_s88fa
                                                                            ww3_s88fb
                                                                            ww4_s88fc
                                                                            ww5_s88fd]; } in
                                          let {
                                            sat_s88fp [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [GHC.Base.Nothing sat_s88fo];
                                          } in  Unit# [sat_s88fp];
                                      GHC.Base.Just n_s88fq [Occ=Once!] ->
                                          let {
                                            sat_s88fu [Occ=Once]
                                              :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                            [LclId] =
                                                [ww_s88f8
                                                 ww1_s88f9
                                                 ww2_s88fa
                                                 ww3_s88fb
                                                 ww4_s88fc
                                                 ww5_s88fd
                                                 n_s88fq] \u []
                                                    case n_s88fq of {
                                                      GHC.Types.I# y_s88fs [Occ=Once] ->
                                                          case +# [ww5_s88fd y_s88fs] of sat_s88ft {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s88f8
                                                                                      ww1_s88f9
                                                                                      ww2_s88fa
                                                                                      ww3_s88fb
                                                                                      ww4_s88fc
                                                                                      sat_s88ft];
                                                          };
                                                    }; } in
                                          let {
                                            sat_s88fv [Occ=Once]
                                              :: (GHC.Base.Maybe GHC.Types.Int,
                                                  GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                            [LclId] =
                                                CCCS (,)! [wild_s88fn sat_s88fu];
                                          } in  Unit# [sat_s88fv];
                                    };
                              };
                        };
                };
        };

GHC.IO.BufferedIO.readBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Base.Maybe GHC.Types.Int,
            GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88fw w1_s88fx w2_s88fy void_0E]
        case w2_s88fy of {
          GHC.IO.Buffer.Buffer ww1_s88fB [Occ=Once]
                               ww2_s88fC [Occ=Once]
                               ww3_s88fD [Occ=Once]
                               ww4_s88fE [Occ=Once]
                               ww5_s88fF [Occ=Once]
                               ww6_s88fG [Occ=Once] ->
              GHC.IO.BufferedIO.$wreadBufNonBlocking
                  w_s88fw
                  w1_s88fx
                  ww1_s88fB
                  ww2_s88fC
                  ww3_s88fD
                  ww4_s88fE
                  ww5_s88fF
                  ww6_s88fG
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.readBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Base.Maybe GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LC(C(C(C(S(SS)))))LL),1*U(A,1*C1(C1(C1(C1(U(U,1*U))))),A,A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.readBufNonBlocking1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wwriteBuf [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88fH
           w1_s88fI
           ww_s88fJ
           ww1_s88fK
           ww2_s88fL
           ww3_s88fM
           ww4_s88fN
           ww5_s88fO
           void_0E]
        case -# [ww5_s88fO ww4_s88fN] of sat_s88fS {
          __DEFAULT ->
              let {
                sat_s88fT [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88fS];
              } in 
                case plusAddr# [ww_s88fJ ww4_s88fN] of sat_s88fQ {
                  __DEFAULT ->
                      let {
                        sat_s88fR [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88fQ];
                      } in 
                        case
                            GHC.IO.Device.write
                                w_s88fH w1_s88fI sat_s88fR sat_s88fT GHC.Prim.void#
                        of
                        { Unit# _ [Occ=Dead] ->
                              case touch# [ww1_s88fK GHC.Prim.void#] of s'_s88fX {
                                (##) ->
                                    let {
                                      sat_s88fY [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          CCCS GHC.IO.Buffer.Buffer! [ww_s88fJ
                                                                      ww1_s88fK
                                                                      ww2_s88fL
                                                                      ww3_s88fM
                                                                      0#
                                                                      0#];
                                    } in  Unit# [sat_s88fY];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBuf1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.IO.Buffer.Buffer GHC.Word.Word8 #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88fZ w1_s88g0 w2_s88g1 void_0E]
        case w2_s88g1 of {
          GHC.IO.Buffer.Buffer ww1_s88g4 [Occ=Once]
                               ww2_s88g5 [Occ=Once]
                               ww3_s88g6 [Occ=Once]
                               ww4_s88g7 [Occ=Once]
                               ww5_s88g8 [Occ=Once]
                               ww6_s88g9 [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBuf
                  w_s88fZ
                  w1_s88g0
                  ww1_s88g4
                  ww2_s88g5
                  ww3_s88g6
                  ww4_s88g7
                  ww5_s88g8
                  ww6_s88g9
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.writeBuf
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLC(C(C(C(S(SL)))))L),1*U(A,A,1*C1(C1(C1(C1(U(U,A))))),A)><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.writeBuf1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$wwriteBufNonBlocking [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.IO.Buffer.BufferState
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=9,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88ga
           w1_s88gb
           ww_s88gc
           ww1_s88gd
           ww2_s88ge
           ww3_s88gf
           ww4_s88gg
           ww5_s88gh
           void_0E]
        case -# [ww5_s88gh ww4_s88gg] of sat_s88gl {
          __DEFAULT ->
              let {
                sat_s88gm [Occ=Once] :: GHC.Types.Int
                [LclId] =
                    CCCS GHC.Types.I#! [sat_s88gl];
              } in 
                case plusAddr# [ww_s88gc ww4_s88gg] of sat_s88gj {
                  __DEFAULT ->
                      let {
                        sat_s88gk [Occ=Once] :: GHC.Ptr.Ptr GHC.Word.Word8
                        [LclId] =
                            CCCS GHC.Ptr.Ptr! [sat_s88gj];
                      } in 
                        case
                            GHC.IO.Device.writeNonBlocking
                                w_s88ga w1_s88gb sat_s88gk sat_s88gm GHC.Prim.void#
                        of
                        { Unit# ipv1_s88gp ->
                              case touch# [ww1_s88gd GHC.Prim.void#] of s'_s88gq {
                                (##) ->
                                    let {
                                      sat_s88gv [Occ=Once] :: GHC.IO.Buffer.Buffer GHC.Word.Word8
                                      [LclId] =
                                          [ww_s88gc
                                           ww1_s88gd
                                           ww2_s88ge
                                           ww3_s88gf
                                           ww4_s88gg
                                           ww5_s88gh
                                           ipv1_s88gp] \u []
                                              case ipv1_s88gp of {
                                                GHC.Types.I# y_s88gs [Occ=Once] ->
                                                    case
                                                        +# [ww4_s88gg y_s88gs]
                                                    of
                                                    x_s88gt [Dmd=<S,U>]
                                                    { __DEFAULT ->
                                                          case ==# [x_s88gt ww5_s88gh] of {
                                                            __DEFAULT ->
                                                                GHC.IO.Buffer.Buffer [ww_s88gc
                                                                                      ww1_s88gd
                                                                                      ww2_s88ge
                                                                                      ww3_s88gf
                                                                                      x_s88gt
                                                                                      ww5_s88gh];
                                                            1# ->
                                                                GHC.IO.Buffer.Buffer [ww_s88gc
                                                                                      ww1_s88gd
                                                                                      ww2_s88ge
                                                                                      ww3_s88gf
                                                                                      0#
                                                                                      0#];
                                                          };
                                                    };
                                              }; } in
                                    let {
                                      sat_s88gw [Occ=Once]
                                        :: (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
                                      [LclId] =
                                          CCCS (,)! [ipv1_s88gp sat_s88gv];
                                    } in  Unit# [sat_s88gw];
                              };
                        };
                };
        };

GHC.IO.BufferedIO.writeBufNonBlocking1 [InlPrag=NOUSERINLINE[0]]
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8) #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s88gx w1_s88gy w2_s88gz void_0E]
        case w2_s88gz of {
          GHC.IO.Buffer.Buffer ww1_s88gC [Occ=Once]
                               ww2_s88gD [Occ=Once]
                               ww3_s88gE [Occ=Once]
                               ww4_s88gF [Occ=Once]
                               ww5_s88gG [Occ=Once]
                               ww6_s88gH [Occ=Once] ->
              GHC.IO.BufferedIO.$wwriteBufNonBlocking
                  w_s88gx
                  w1_s88gy
                  ww1_s88gC
                  ww2_s88gD
                  ww3_s88gE
                  ww4_s88gF
                  ww5_s88gG
                  ww6_s88gH
                  GHC.Prim.void#;
        };

GHC.IO.BufferedIO.writeBufNonBlocking
  :: forall dev.
     GHC.IO.Device.RawIO dev =>
     dev
     -> GHC.IO.Buffer.Buffer GHC.Word.Word8
     -> GHC.Types.IO
          (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(LLLC(C(C(C(S(SL)))))),1*U(A,A,A,1*C1(C1(C1(C1(U(U,U(U)))))))><L,U><S(SLLSSS),1*U(U,U,U,U,U,U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.IO.BufferedIO.writeBufNonBlocking1
            eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.IO.BufferedIO.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.IO.BufferedIO.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule4];

GHC.IO.BufferedIO.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.BufferedIO"#;

GHC.IO.BufferedIO.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$trModule2];

GHC.IO.BufferedIO.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.BufferedIO.$trModule3
                                     GHC.IO.BufferedIO.$trModule1];

$krep_r87Lv :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r87Lw :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Word.$tcWord8
                                              GHC.Types.[]];

$krep2_r87Lx :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBufferState
                                              GHC.Types.[]];

$krep3_r87Ly :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcConstraint
                                              GHC.Types.[]];

$krep4_r87Lz :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv GHC.Types.[]];

$krep5_r87LA :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Base.$tcMaybe
                                              $krep4_r87Lz];

$krep6_r87LB :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep1_r87Lw GHC.Types.[]];

$krep7_r87LC :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.Buffer.$tcBuffer
                                              $krep6_r87LB];

$krep8_r87LD :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep7_r87LC GHC.Types.[]];

$krep9_r87LE :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep8_r87LD];

$krep10_r87LF :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r87Lv $krep8_r87LD];

$krep11_r87LG :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep10_r87LF];

$krep12_r87LH :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep11_r87LG GHC.Types.[]];

$krep13_r87LI :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep12_r87LH];

$krep14_r87LJ :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep5_r87LA $krep8_r87LD];

$krep15_r87LK :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Tuple.$tc(,)
                                              $krep14_r87LJ];

$krep16_r87LL :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep15_r87LK GHC.Types.[]];

$krep17_r87LM :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcIO
                                              $krep16_r87LL];

$krep18_r87LN :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r87Lx $krep9_r87LE];

$krep19_r87LO :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep9_r87LE];

$krep20_r87LP :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep13_r87LI];

$krep21_r87LQ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep7_r87LC $krep17_r87LM];

GHC.IO.BufferedIO.$tcBufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Types.krep$*
                                         $krep3_r87Ly];

$krep22_r87LR :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep23_r87LS :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep21_r87LQ];

$krep24_r87LT :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep20_r87LP];

$krep25_r87LU :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep19_r87LO];

$krep26_r87LV :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep22_r87LR $krep18_r87LN];

GHC.IO.BufferedIO.$tcBufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "BufferedIO"#;

GHC.IO.BufferedIO.$tcBufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tcBufferedIO3];

GHC.IO.BufferedIO.$tcBufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17350223970197035200##
                                    12646105049483783716##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tcBufferedIO2
                                    0#
                                    GHC.IO.BufferedIO.$tcBufferedIO1];

$krep27_r87LW :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep22_r87LR GHC.Types.[]];

$krep28_r87LX :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.BufferedIO.$tcBufferedIO
                                              $krep27_r87LW];

$krep29_r87LY :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep28_r87LX];

$krep30_r87LZ :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep29_r87LY];

$krep31_r87M0 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep25_r87LU $krep30_r87LZ];

$krep32_r87M1 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep23_r87LS $krep31_r87M0];

$krep33_r87M2 :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep24_r87LT $krep32_r87M1];

GHC.IO.BufferedIO.$tc'C:BufferedIO1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep26_r87LV $krep33_r87M2];

GHC.IO.BufferedIO.$tc'C:BufferedIO3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'C:BufferedIO"#;

GHC.IO.BufferedIO.$tc'C:BufferedIO2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.BufferedIO.$tc'C:BufferedIO3];

GHC.IO.BufferedIO.$tc'C:BufferedIO :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14745255964277825469##
                                    12324508286010448901##
                                    GHC.IO.BufferedIO.$trModule
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO2
                                    1#
                                    GHC.IO.BufferedIO.$tc'C:BufferedIO1];

GHC.IO.BufferedIO.C:BufferedIO
  :: forall dev.
     (dev
      -> GHC.IO.Buffer.BufferState
      -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Base.Maybe GHC.Types.Int,
               GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO (GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> (dev
         -> GHC.IO.Buffer.Buffer GHC.Word.Word8
         -> GHC.Types.IO
              (GHC.Types.Int, GHC.IO.Buffer.Buffer GHC.Word.Word8))
     -> GHC.IO.BufferedIO.BufferedIO dev
[GblId[DataCon],
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.IO.BufferedIO.C:BufferedIO [eta_B6
                                        eta_B5
                                        eta_B4
                                        eta_B3
                                        eta_B2
                                        eta_B1];

