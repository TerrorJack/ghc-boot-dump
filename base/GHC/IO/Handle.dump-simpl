
==================== Tidy Core ====================
2018-03-16 16:06:15.822421235 UTC

Result size of Tidy Core
  = {terms: 4,478, types: 8,511, coercions: 645, joins: 14/51}

-- RHS size: {terms: 14, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.$w$c== [InlPrag=NOUSERINLINE[0]]
  :: Handle -> HandlePosition -> Handle -> HandlePosition -> Bool
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,1*U><S,1*U><L,1*U><S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 80 10}]
GHC.IO.Handle.$w$c==
  = \ (ww_sbmYe :: Handle)
      (ww1_sbmYf :: HandlePosition)
      (ww2_sbmYj :: Handle)
      (ww3_sbmYk :: HandlePosition) ->
      case eqInteger# ww1_sbmYf ww3_sbmYk of {
        __DEFAULT -> GHC.Types.False;
        1# -> GHC.IO.Handle.Types.$fEqHandle_$c== ww_sbmYe ww2_sbmYj
      }

-- RHS size: {terms: 13, types: 8, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fEqHandlePosn_$c== [InlPrag=NOUSERINLINE[0]]
  :: HandlePosn -> HandlePosn -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sbmYa [Occ=Once!] :: HandlePosn)
                 (w1_sbmYb [Occ=Once!] :: HandlePosn) ->
                 case w_sbmYa of
                 { HandlePosn ww1_sbmYe [Occ=Once] ww2_sbmYf [Occ=Once] ->
                 case w1_sbmYb of
                 { HandlePosn ww4_sbmYj [Occ=Once] ww5_sbmYk [Occ=Once] ->
                 GHC.IO.Handle.$w$c== ww1_sbmYe ww2_sbmYf ww4_sbmYj ww5_sbmYk
                 }
                 }}]
GHC.IO.Handle.$fEqHandlePosn_$c==
  = \ (w_sbmYa :: HandlePosn) (w1_sbmYb :: HandlePosn) ->
      case w_sbmYa of { HandlePosn ww1_sbmYe ww2_sbmYf ->
      case w1_sbmYb of { HandlePosn ww4_sbmYj ww5_sbmYk ->
      GHC.IO.Handle.$w$c== ww1_sbmYe ww2_sbmYf ww4_sbmYj ww5_sbmYk
      }
      }

-- RHS size: {terms: 45, types: 51, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fEqHandlePosn_$c/= [InlPrag=INLINE (sat-args=2)]
  :: HandlePosn -> HandlePosn -> Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(1*U,1*U)><S(LS),1*U(1*U,1*U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=False,boring_ok=False)
         Tmpl= \ (x_a22b [Occ=Once!] :: HandlePosn)
                 (y_a22c [Occ=Once!] :: HandlePosn) ->
                 case x_a22b of
                 { HandlePosn h1_abjBC [Occ=Once!] p1_abjBD [Occ=Once] ->
                 case y_a22c of
                 { HandlePosn h2_abjBE [Occ=Once*!] p2_abjBF [Occ=Once] ->
                 case eqInteger# p1_abjBD p2_abjBF of {
                   __DEFAULT -> GHC.Types.True;
                   1# ->
                     case h1_abjBC of {
                       FileHandle _ [Occ=Dead] dt_ibkwy [Occ=Once] ->
                         case h2_abjBE of {
                           FileHandle _ [Occ=Dead] dt1_ibkwD [Occ=Once] ->
                             case sameMVar# @ RealWorld @ Handle__ dt_ibkwy dt1_ibkwD of {
                               __DEFAULT -> GHC.Types.True;
                               1# -> GHC.Types.False
                             };
                           DuplexHandle _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                             GHC.Types.True
                         };
                       DuplexHandle _ [Occ=Dead] dt_ibkwI [Occ=Once] _ [Occ=Dead] ->
                         case h2_abjBE of {
                           FileHandle _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.True;
                           DuplexHandle _ [Occ=Dead] dt2_ibkwP [Occ=Once] _ [Occ=Dead] ->
                             case sameMVar# @ RealWorld @ Handle__ dt_ibkwI dt2_ibkwP of {
                               __DEFAULT -> GHC.Types.True;
                               1# -> GHC.Types.False
                             }
                         }
                     }
                 }
                 }
                 }}]
GHC.IO.Handle.$fEqHandlePosn_$c/=
  = \ (eta_B2 :: HandlePosn) (eta1_B1 :: HandlePosn) ->
      case eta_B2 of { HandlePosn h1_abjBC p1_abjBD ->
      case eta1_B1 of { HandlePosn h2_abjBE p2_abjBF ->
      case eqInteger# p1_abjBD p2_abjBF of {
        __DEFAULT -> GHC.Types.True;
        1# ->
          case h1_abjBC of {
            FileHandle ds2_ibkwx dt_ibkwy ->
              case h2_abjBE of {
                FileHandle ds3_ibkwC dt1_ibkwD ->
                  case sameMVar# @ RealWorld @ Handle__ dt_ibkwy dt1_ibkwD of {
                    __DEFAULT -> GHC.Types.True;
                    1# -> GHC.Types.False
                  };
                DuplexHandle ipv_ibln6 ipv1_ibln7 ipv2_ibln8 -> GHC.Types.True
              };
            DuplexHandle ds2_ibkwH dt_ibkwI dt1_ibkwJ ->
              case h2_abjBE of {
                FileHandle ipv_iblna ipv1_iblnb -> GHC.Types.True;
                DuplexHandle ds3_ibkwO dt2_ibkwP dt3_ibkwQ ->
                  case sameMVar# @ RealWorld @ Handle__ dt_ibkwI dt2_ibkwP of {
                    __DEFAULT -> GHC.Types.True;
                    1# -> GHC.Types.False
                  }
              }
          }
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fEqHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq HandlePosn
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: HandlePosn
                        GHC.IO.Handle.$fEqHandlePosn_$c==
                        GHC.IO.Handle.$fEqHandlePosn_$c/=]
GHC.IO.Handle.$fEqHandlePosn
  = GHC.Classes.C:Eq
      @ HandlePosn
      GHC.IO.Handle.$fEqHandlePosn_$c==
      GHC.IO.Handle.$fEqHandlePosn_$c/=

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fShowHandlePosn2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.$fShowHandlePosn2 = " at position "#

-- RHS size: {terms: 41, types: 37, coercions: 0, joins: 0/0}
GHC.IO.Handle.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Handle -> HandlePosition -> String -> String
[GblId,
 Arity=3,
 Str=<S,1*U><L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [210 0 0] 380 0}]
GHC.IO.Handle.$w$cshowsPrec
  = \ (ww_sbmYs :: Handle)
      (ww1_sbmYt :: HandlePosition)
      (w_sbmYp :: String) ->
      case ww_sbmYs of {
        FileHandle file_ibkx4 dt_ibkx5 ->
          unpackAppendCString#
            GHC.IO.Handle.Types.showHandle1
            (++
               @ Char
               file_ibkx4
               (unpackAppendCString#
                  GHC.IO.Handle.Types.$fReadNewlineMode5
                  (unpackAppendCString#
                     GHC.IO.Handle.$fShowHandlePosn2
                     (case GHC.Show.$w$cshowsPrec4 0# ww1_sbmYt w_sbmYp of
                      { (# ww3_ibkxp, ww4_ibkxq #) ->
                      GHC.Types.: @ Char ww3_ibkxp ww4_ibkxq
                      }))));
        DuplexHandle file_ibkx8 dt_ibkx9 dt1_ibkxa ->
          unpackAppendCString#
            GHC.IO.Handle.Types.showHandle1
            (++
               @ Char
               file_ibkx8
               (unpackAppendCString#
                  GHC.IO.Handle.Types.$fReadNewlineMode5
                  (unpackAppendCString#
                     GHC.IO.Handle.$fShowHandlePosn2
                     (case GHC.Show.$w$cshowsPrec4 0# ww1_sbmYt w_sbmYp of
                      { (# ww3_ibkxp, ww4_ibkxq #) ->
                      GHC.Types.: @ Char ww3_ibkxp ww4_ibkxq
                      }))))
      }

-- RHS size: {terms: 10, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> HandlePosn -> ShowS
[GblId,
 Arity=3,
 Str=<L,A><S(SL),1*U(1*U,U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ _ [Occ=Dead]
                 (w1_sbmYo [Occ=Once!] :: HandlePosn)
                 (w2_sbmYp [Occ=Once] :: String) ->
                 case w1_sbmYo of
                 { HandlePosn ww1_sbmYs [Occ=Once] ww2_sbmYt [Occ=Once] ->
                 GHC.IO.Handle.$w$cshowsPrec ww1_sbmYs ww2_sbmYt w2_sbmYp
                 }}]
GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
  = \ _ [Occ=Dead] (w1_sbmYo :: HandlePosn) (w2_sbmYp :: String) ->
      case w1_sbmYo of { HandlePosn ww1_sbmYs ww2_sbmYt ->
      GHC.IO.Handle.$w$cshowsPrec ww1_sbmYs ww2_sbmYt w2_sbmYp
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fShowHandlePosn3 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.$fShowHandlePosn3 = GHC.Types.I# 0#

-- RHS size: {terms: 8, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fShowHandlePosn_$cshow :: HandlePosn -> String
[GblId,
 Arity=1,
 Str=<S(SL),1*U(1*U,U)>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: HandlePosn) ->
                 GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
                   GHC.IO.Handle.$fShowHandlePosn3 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.IO.Handle.$fShowHandlePosn_$cshow
  = \ (x_i7Jay :: HandlePosn) ->
      case x_i7Jay of { HandlePosn ww1_sbmYs ww2_sbmYt ->
      GHC.IO.Handle.$w$cshowsPrec
        ww1_sbmYs ww2_sbmYt (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fShowHandlePosn1 :: HandlePosn -> ShowS
[GblId,
 Arity=2,
 Str=<S(SL),1*U(1*U,U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 50 0}]
GHC.IO.Handle.$fShowHandlePosn1
  = \ (w_sbmYo :: HandlePosn) (w1_sbmYp :: String) ->
      case w_sbmYo of { HandlePosn ww1_sbmYs ww2_sbmYt ->
      GHC.IO.Handle.$w$cshowsPrec ww1_sbmYs ww2_sbmYt w1_sbmYp
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fShowHandlePosn_$cshowList :: [HandlePosn] -> ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [HandlePosn])
                 (s_i7JaC [Occ=Once] :: String) ->
                 showList__
                   @ HandlePosn GHC.IO.Handle.$fShowHandlePosn1 ls_i7JaB s_i7JaC}]
GHC.IO.Handle.$fShowHandlePosn_$cshowList
  = \ (ls_i7JaB :: [HandlePosn]) (s_i7JaC :: String) ->
      showList__
        @ HandlePosn GHC.IO.Handle.$fShowHandlePosn1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.IO.Handle.$fShowHandlePosn [InlPrag=NOUSERINLINE CONLIKE]
  :: Show HandlePosn
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: HandlePosn
                       GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
                       GHC.IO.Handle.$fShowHandlePosn_$cshow
                       GHC.IO.Handle.$fShowHandlePosn_$cshowList]
GHC.IO.Handle.$fShowHandlePosn
  = GHC.Show.C:Show
      @ HandlePosn
      GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec
      GHC.IO.Handle.$fShowHandlePosn_$cshow
      GHC.IO.Handle.$fShowHandlePosn_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hLookAhead3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hLookAhead3 = "hLookAhead"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hLookAhead2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hLookAhead2
  = unpackCString# GHC.IO.Handle.hLookAhead3

-- RHS size: {terms: 5, types: 2, coercions: 5, joins: 0/0}
GHC.IO.Handle.hLookAhead1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Char #)
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (handle_abjCn [Occ=Once] :: Handle) ->
                 GHC.IO.Handle.Internals.wantReadableHandle_1
                   @ Char
                   GHC.IO.Handle.hLookAhead2
                   handle_abjCn
                   (GHC.IO.Handle.Internals.hLookAhead_1
                    `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Char>_R)
                            :: (Handle__
                                -> State# RealWorld -> (# State# RealWorld, Char #) :: *)
                               ~R# (Handle__ -> IO Char :: *)))}]
GHC.IO.Handle.hLookAhead1
  = \ (handle_abjCn :: Handle) ->
      GHC.IO.Handle.Internals.wantReadableHandle_1
        @ Char
        GHC.IO.Handle.hLookAhead2
        handle_abjCn
        (GHC.IO.Handle.Internals.hLookAhead_1
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Char>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, Char #) :: *)
                    ~R# (Handle__ -> IO Char :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hLookAhead :: Handle -> IO Char
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hLookAhead1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Char>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Char #) :: *)
                          ~R# (Handle -> IO Char :: *))}]
hLookAhead
  = GHC.IO.Handle.hLookAhead1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Char>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Char #) :: *)
               ~R# (Handle -> IO Char :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFlush3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.hFlush3 = "hFlush"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFlush2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hFlush2 = unpackCString# GHC.IO.Handle.hFlush3

-- RHS size: {terms: 5, types: 2, coercions: 5, joins: 0/0}
GHC.IO.Handle.hFlush1
  :: Handle -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (handle_abjDf [Occ=Once] :: Handle) ->
                 GHC.IO.Handle.Internals.wantWritableHandle1
                   @ ()
                   GHC.IO.Handle.hFlush2
                   handle_abjDf
                   (GHC.IO.Handle.Internals.flushWriteBuffer1
                    `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                            :: (Handle__
                                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                               ~R# (Handle__ -> IO () :: *)))}]
GHC.IO.Handle.hFlush1
  = \ (handle_abjDf :: Handle) ->
      GHC.IO.Handle.Internals.wantWritableHandle1
        @ ()
        GHC.IO.Handle.hFlush2
        handle_abjDf
        (GHC.IO.Handle.Internals.flushWriteBuffer1
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                    ~R# (Handle__ -> IO () :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hFlush :: Handle -> IO ()
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hFlush1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> IO () :: *))}]
hFlush
  = GHC.IO.Handle.hFlush1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFlushAll4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hFlushAll4 = "hFlushAll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFlushAll3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hFlushAll3 = unpackCString# GHC.IO.Handle.hFlushAll4

-- RHS size: {terms: 12, types: 25, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFlushAll2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, ()) #)
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h__ibk5t :: Handle__)
                 (s1_ibk5u [Occ=Once] :: State# RealWorld) ->
                 case GHC.IO.Handle.Internals.flushBuffer1 h__ibk5t s1_ibk5u of
                 { (# ipv_ibk5x [Occ=Once], ipv1_ibk5y [Occ=Once] #) ->
                 (# ipv_ibk5x, (h__ibk5t, ipv1_ibk5y) #)
                 }}]
GHC.IO.Handle.hFlushAll2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case GHC.IO.Handle.Internals.flushBuffer1 h__ibk5t s1_ibk5u of
      { (# ipv_ibk5x, ipv1_ibk5y #) ->
      (# ipv_ibk5x, (h__ibk5t, ipv1_ibk5y) #)
      }

-- RHS size: {terms: 76, types: 133, coercions: 14, joins: 0/2}
GHC.IO.Handle.hFlushAll1
  :: Handle -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hFlushAll1
  = \ (handle_abjDg :: Handle) (eta_B1 :: State# RealWorld) ->
      case handle_abjDg of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblir [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, () #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblir
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, ())
                         GHC.IO.Handle.hFlushAll3
                         wild_ibk5j
                         (GHC.IO.Handle.hFlushAll2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, ())>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, ()) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, ()) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblir ipv_ibk5N;
            0# -> maskAsyncExceptions# @ () io_sblir ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblit [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, () #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblit
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, ())
                         GHC.IO.Handle.hFlushAll3
                         wild_ibk5j
                         (GHC.IO.Handle.hFlushAll2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, ())>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, ()) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, ()) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblit ipv_ibk6j;
            0# -> maskAsyncExceptions# @ () io_sblit ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hFlushAll :: Handle -> IO ()
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hFlushAll1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> IO () :: *))}]
hFlushAll
  = GHC.IO.Handle.hFlushAll1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetEcho7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Handle.hGetEcho7 = "hIsTerminalDevice"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetEcho_fun :: String
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hGetEcho_fun = unpackCString# GHC.IO.Handle.hGetEcho7

-- RHS size: {terms: 23, types: 85, coercions: 2, joins: 0/0}
GHC.IO.Handle.hGetEcho6
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Bool) #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 100 30}]
GHC.IO.Handle.hGetEcho6
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_X1e
      { Handle__ @ dev_abjU4 @ enc_state_abjU5 @ dec_state_abjU6
                 $dIODevice_abjU7 $dBufferedIO_abjU8 $dTypeable_abjU9 ds_dbkgW
                 ds1_dbkgX dt_dbkvf ds2_dbkgZ dt1_dbkvg dt2_dbkvh dt3_dbkvi
                 ds3_dbkh3 ds4_dbkh4 ds5_dbkh5 ds6_dbkh6 ds7_dbkh7 ds8_dbkh8 ->
      case ds1_dbkgX of {
        __DEFAULT ->
          case ((isTerminal @ dev_abjU4 $dIODevice_abjU7 ds_dbkgW)
                `cast` (GHC.Types.N:IO[0] <Bool>_R
                        :: (IO Bool :: *)
                           ~R# (State# RealWorld -> (# State# RealWorld, Bool #) :: *)))
                 s1_ibk5u
          of
          { (# ipv_ibk5x, ipv1_ibk5y #) ->
          (# ipv_ibk5x, (wild_X1e, ipv1_ibk5y) #)
          };
        ClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_closedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          }
      }
      }

-- RHS size: {terms: 76, types: 133, coercions: 14, joins: 0/2}
GHC.IO.Handle.hGetEcho5
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hGetEcho5
  = \ (handle_abjEU :: Handle) (eta_B1 :: State# RealWorld) ->
      case handle_abjEU of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblim [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblim
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hGetEcho_fun
                         wild_ibk5j
                         (GHC.IO.Handle.hGetEcho6
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblim ipv_ibk5N;
            0# -> maskAsyncExceptions# @ Bool io_sblim ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblip [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblip
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hGetEcho_fun
                         wild_ibk5j
                         (GHC.IO.Handle.hGetEcho6
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblip ipv_ibk6j;
            0# -> maskAsyncExceptions# @ Bool io_sblip ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hIsTerminalDevice :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hGetEcho5
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hIsTerminalDevice
  = GHC.IO.Handle.hGetEcho5
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rbnWB :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rbnWB = "hDuplicateTo"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rbnWC :: [Char]
[GblId]
lvl1_rbnWC = unpackCString# lvl_rbnWB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_rbnWD :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_rbnWD = "handles are incompatible"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_rbnWE :: [Char]
[GblId]
lvl3_rbnWE = unpackCString# lvl2_rbnWD

-- RHS size: {terms: 14, types: 10, coercions: 0, joins: 0/0}
ioe_dupHandlesNotCompatible_rbnWF
  :: forall a.
     Handle -> State# RealWorld -> (# State# RealWorld, a #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []]
ioe_dupHandlesNotCompatible_rbnWF
  = \ (@ a_abjPd)
      (h_abjGW :: Handle)
      (eta_ia4WI :: State# RealWorld) ->
      raiseIO#
        @ SomeException
        @ a_abjPd
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (GHC.IO.Exception.IOError
              (GHC.Base.Just @ Handle h_abjGW)
              GHC.IO.Exception.IllegalOperation
              lvl1_rbnWC
              lvl3_rbnWE
              (GHC.Base.Nothing @ Foreign.C.Types.CInt)
              (GHC.Base.Nothing @ FilePath)))
        eta_ia4WI

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.$trModule3
  = GHC.Types.TrNameS GHC.IO.Handle.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.$trModule2 = "GHC.IO.Handle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.$trModule1
  = GHC.Types.TrNameS GHC.IO.Handle.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.IO.Handle.$trModule
  = GHC.Types.Module
      GHC.IO.Handle.$trModule3 GHC.IO.Handle.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rbnWG :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_rbnWG
  = GHC.Types.KindRepTyConApp
      integer-simple-0.1.1.1:GHC.Integer.Type.$tcInteger
      (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rbnWH :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_rbnWH
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.Types.$tcHandle (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$tcHandlePosn2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.$tcHandlePosn2 = "HandlePosn"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$tcHandlePosn1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.$tcHandlePosn1
  = GHC.Types.TrNameS GHC.IO.Handle.$tcHandlePosn2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$tcHandlePosn :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.$tcHandlePosn
  = GHC.Types.TyCon
      14603627022044816180##
      6047646306417636971##
      GHC.IO.Handle.$trModule
      GHC.IO.Handle.$tcHandlePosn1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rbnWI :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_rbnWI
  = GHC.Types.KindRepTyConApp
      GHC.IO.Handle.$tcHandlePosn (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_rbnWJ :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep3_rbnWJ = GHC.Types.KindRepFun $krep_rbnWG $krep2_rbnWI

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$tc'HandlePosn1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.IO.Handle.$tc'HandlePosn1
  = GHC.Types.KindRepFun $krep1_rbnWH $krep3_rbnWJ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$tc'HandlePosn3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.$tc'HandlePosn3 = "'HandlePosn"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$tc'HandlePosn2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.IO.Handle.$tc'HandlePosn2
  = GHC.Types.TrNameS GHC.IO.Handle.$tc'HandlePosn3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.$tc'HandlePosn :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.$tc'HandlePosn
  = GHC.Types.TyCon
      2346493220596692855##
      1604707260447826943##
      GHC.IO.Handle.$trModule
      GHC.IO.Handle.$tc'HandlePosn2
      0#
      GHC.IO.Handle.$tc'HandlePosn1

-- RHS size: {terms: 49, types: 115, coercions: 2, joins: 1/1}
dupHandle__rbnWK
  :: forall dev.
     (IODevice dev, BufferedIO dev, Typeable dev) =>
     dev
     -> FilePath
     -> Maybe (MVar Handle__)
     -> Handle__
     -> Maybe HandleFinalizer
     -> State# RealWorld
     -> (# State# RealWorld, Handle #)
[GblId,
 Arity=9,
 Str=<L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><L,U(U,U,U,U,U,U)><L,U><L,U><L,U><L,U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []]
dupHandle__rbnWK
  = \ (@ dev_abjPj)
      ($dIODevice_abjPl :: IODevice dev_abjPj)
      ($dBufferedIO_abjPm :: BufferedIO dev_abjPj)
      ($dTypeable_abjPn :: Typeable dev_abjPj)
      (new_dev_abjGk :: dev_abjPj)
      (filepath_abjGl :: FilePath)
      (other_side_abjGm :: Maybe (MVar Handle__))
      (h__abjGn :: Handle__)
      (mb_finalizer_abjGB :: Maybe HandleFinalizer)
      (eta_B1 :: State# RealWorld) ->
      case h__abjGn of
      { Handle__ @ dev1_abjPo @ enc_state_abjPp @ dec_state_abjPq
                 $dIODevice1_abjPr $dBufferedIO1_abjPs $dTypeable1_abjPt ds_dbk8y
                 ds1_dbk8z dt_dbkux ds2_dbk8B dt1_dbkuy dt2_dbkuz dt3_dbkuA
                 ds3_dbk8F ds4_dbk8G ds5_dbk8H ds6_dbk8I ds7_dbk8J ds8_dbk8K ->
      join {
        $j_sblo3 [Dmd=<L,1*C1(C1(U(U,U)))>]
          :: State# RealWorld
             -> Maybe TextEncoding -> (# State# RealWorld, Handle #)
        [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
        $j_sblo3 (ipv_i7IAy [OS=OneShot] :: State# RealWorld)
                 (ipv1_i7IAz [OS=OneShot] :: Maybe TextEncoding)
          = GHC.IO.Handle.Internals.mkDuplexHandle5
              @ dev_abjPj
              $dIODevice_abjPl
              $dBufferedIO_abjPm
              $dTypeable_abjPn
              new_dev_abjGk
              filepath_abjGl
              ds1_dbk8z
              GHC.Types.True
              ipv1_i7IAz
              (GHC.IO.Handle.Types.NewlineMode ds6_dbk8I ds7_dbk8J)
              mb_finalizer_abjGB
              other_side_abjGm
              ipv_i7IAy } in
      case ds3_dbk8F of {
        Nothing -> jump $j_sblo3 eta_B1 (GHC.Base.Nothing @ TextEncoding);
        Just ipv_i7Ssm ->
          case GHC.IO.Encoding.getLocaleEncoding1 of
          { (getLocaleEncoding3_ibk84, setLocaleEncoding1_ibk85) ->
          case (getLocaleEncoding3_ibk84
                `cast` (GHC.Types.N:IO[0] <TextEncoding>_R
                        :: (IO TextEncoding :: *)
                           ~R# (State# RealWorld
                                -> (# State# RealWorld, TextEncoding #) :: *)))
                 eta_B1
          of
          { (# ipv1_i7Vb3, ipv2_i7Vb4 #) ->
          jump $j_sblo3 ipv1_i7Vb3 (GHC.Base.Just @ TextEncoding ipv2_i7Vb4)
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rbnWL :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_rbnWL
  = "Pattern match failure in do expression at GHC/IO/Handle.hs:713:7-20"#

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl5_rbnWM :: State# RealWorld -> (# State# RealWorld, Handle__ #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl5_rbnWM
  = \ (eta_B1 :: State# RealWorld) ->
      GHC.IO.failIO1 @ Handle__ (unpackCString# lvl4_rbnWL) eta_B1

-- RHS size: {terms: 55, types: 166, coercions: 18, joins: 0/0}
dupHandleTo_rbnWN
  :: FilePath
     -> Handle
     -> Maybe (MVar Handle__)
     -> Handle__
     -> Handle__
     -> Maybe HandleFinalizer
     -> State# RealWorld
     -> (# State# RealWorld, Handle__ #)
[GblId,
 Arity=7,
 Str=<L,U><L,U><L,U><S,1*U><S,1*U><L,1*U><S,U>,
 Unf=OtherCon []]
dupHandleTo_rbnWN
  = \ (filepath_abjGX :: FilePath)
      (h_abjGY :: Handle)
      (other_side_abjGZ :: Maybe (MVar Handle__))
      (hto__abjH0 :: Handle__)
      (h__abjHe :: Handle__)
      (mb_finalizer_abjHg :: Maybe HandleFinalizer)
      (eta_B1 :: State# RealWorld) ->
      case hto__abjH0 of
      { Handle__ @ dev_abjPS @ enc_state_abjPT @ dec_state_abjPU
                 $dIODevice_abjPV $dBufferedIO_abjPW $dTypeable_abjPX ds_dbkaa
                 ds1_dbkab dt_dbkuB ds2_dbkad dt1_dbkuC dt2_dbkuD dt3_dbkuE
                 ds3_dbkah ds4_dbkai ds5_dbkaj ds6_dbkak ds7_dbkal ds8_dbkam ->
      case h__abjHe of wild1_XO
      { Handle__ @ dev1_abjPY @ enc_state1_abjPZ @ dec_state1_abjQ0
                 $dIODevice1_abjQ1 $dBufferedIO1_abjQ2 $dTypeable1_abjQ3 ds9_dbkan
                 ds10_dbkao dt4_dbkuF ds11_dbkaq dt5_dbkuG dt6_dbkuH dt7_dbkuI
                 ds12_dbkau ds13_dbkav ds14_dbkaw ds15_dbkax ds16_dbkay
                 ds17_dbkaz ->
      case GHC.IO.Handle.Internals.flushBuffer1 wild1_XO eta_B1 of
      { (# ipv_i7JiK, ipv1_i7JiL #) ->
      case Data.Typeable.Internal.sameTypeRep
             @ *
             @ *
             @ dev_abjPS
             @ dev1_abjPY
             ($dTypeable_abjPX
              `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <dev_abjPS>_N
                      :: (Typeable dev_abjPS :: Constraint)
                         ~R# (Data.Typeable.Internal.TypeRep dev_abjPS :: *)))
             ($dTypeable1_abjQ3
              `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <dev1_abjPY>_N
                      :: (Typeable dev1_abjPY :: Constraint)
                         ~R# (Data.Typeable.Internal.TypeRep dev1_abjPY :: *)))
      of {
        False ->
          ioe_dupHandlesNotCompatible_rbnWF @ Handle__ h_abjGY ipv_i7JiK;
        True ->
          case ((dup2
                   @ dev1_abjPY
                   $dIODevice1_abjQ1
                   ds9_dbkan
                   (ds_dbkaa
                    `cast` (UnsafeCo representational dev_abjPS dev1_abjPY
                            :: (dev_abjPS :: *) ~R# (dev1_abjPY :: *))))
                `cast` (GHC.Types.N:IO[0] <dev1_abjPY>_R
                        :: (IO dev1_abjPY :: *)
                           ~R# (State# RealWorld -> (# State# RealWorld, dev1_abjPY #) :: *)))
                 ipv_i7JiK
          of
          { (# ipv2_i7IAy, ipv3_i7IAz #) ->
          case dupHandle__rbnWK
                 @ dev1_abjPY
                 $dIODevice1_abjQ1
                 $dBufferedIO1_abjQ2
                 $dTypeable1_abjQ3
                 (ds_dbkaa
                  `cast` (UnsafeCo representational dev_abjPS dev1_abjPY
                          :: (dev_abjPS :: *) ~R# (dev1_abjPY :: *)))
                 filepath_abjGX
                 other_side_abjGZ
                 wild1_XO
                 mb_finalizer_abjHg
                 ipv2_i7IAy
          of
          { (# ipv4_X7IDb, ipv5_X7IDd #) ->
          case ipv5_X7IDd of {
            FileHandle ds21_dbk8Y dt8_dbkuJ ->
              takeMVar# @ RealWorld @ Handle__ dt8_dbkuJ ipv4_X7IDb;
            DuplexHandle ipv6_sbkHl ipv7_sbkHm ipv8_sbkHn ->
              lvl5_rbnWM ipv4_X7IDb
          }
          }
          }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_rbnWO :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl6_rbnWO = "dupHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_rbnWP :: [Char]
[GblId]
lvl7_rbnWP = unpackCString# lvl6_rbnWO

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetNewlineMode3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.hSetNewlineMode3 = "hSetNewlineMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetNewlineMode2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hSetNewlineMode2
  = unpackCString# GHC.IO.Handle.hSetNewlineMode3

-- RHS size: {terms: 37, types: 78, coercions: 5, joins: 0/0}
GHC.IO.Handle.$whSetNewlineMode [InlPrag=NOUSERINLINE[0]]
  :: Handle
     -> Newline
     -> Newline
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Str=<S,1*U><L,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0 0] 100 0}]
GHC.IO.Handle.$whSetNewlineMode
  = \ (w_sbmZ5 :: Handle)
      (ww_sbmZa :: Newline)
      (ww1_sbmZb :: Newline)
      (w1_sbmZ7 :: State# RealWorld) ->
      GHC.IO.Handle.Internals.withAllHandles__1
        GHC.IO.Handle.hSetNewlineMode2
        w_sbmZ5
        ((\ (h__abjFx :: Handle__) (eta_X7 :: State# RealWorld) ->
            case h__abjFx of wild_Xw
            { Handle__ @ dev_abjSw @ enc_state_abjSx @ dec_state_abjSy
                       $dIODevice_abjSz $dBufferedIO_abjSA $dTypeable_abjSB ds_dbkf0
                       ds1_dbkf1 dt_dbkv3 ds2_dbkf3 dt1_dbkv4 dt2_dbkv5 dt3_dbkv6
                       ds3_dbkf7 ds4_dbkf8 ds5_dbkf9 ds6_dbkfa ds7_dbkfb ds8_dbkfc ->
            case GHC.IO.Handle.Internals.flushBuffer1 wild_Xw eta_X7 of
            { (# ipv_i7JiK, ipv1_i7JiL #) ->
            (# ipv_i7JiK,
               GHC.IO.Handle.Types.Handle__
                 @ dev_abjSw
                 @ enc_state_abjSx
                 @ dec_state_abjSy
                 $dIODevice_abjSz
                 $dBufferedIO_abjSA
                 $dTypeable_abjSB
                 ds_dbkf0
                 ds1_dbkf1
                 dt_dbkv3
                 ds2_dbkf3
                 dt1_dbkv4
                 dt2_dbkv5
                 dt3_dbkv6
                 ds3_dbkf7
                 ds4_dbkf8
                 ds5_dbkf9
                 ww_sbmZa
                 ww1_sbmZb
                 ds8_dbkfc #)
            }
            })
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Handle__>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, Handle__ #) :: *)
                    ~R# (Handle__ -> IO Handle__ :: *)))
        w1_sbmZ7

-- RHS size: {terms: 11, types: 7, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetNewlineMode1 [InlPrag=NOUSERINLINE[0]]
  :: Handle
     -> NewlineMode -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S,1*U><S,1*U(U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sbmZ5 [Occ=Once] :: Handle)
                 (w1_sbmZ6 [Occ=Once!] :: NewlineMode)
                 (w2_sbmZ7 [Occ=Once] :: State# RealWorld) ->
                 case w1_sbmZ6 of
                 { NewlineMode ww1_sbmZa [Occ=Once] ww2_sbmZb [Occ=Once] ->
                 GHC.IO.Handle.$whSetNewlineMode
                   w_sbmZ5 ww1_sbmZa ww2_sbmZb w2_sbmZ7
                 }}]
GHC.IO.Handle.hSetNewlineMode1
  = \ (w_sbmZ5 :: Handle)
      (w1_sbmZ6 :: NewlineMode)
      (w2_sbmZ7 :: State# RealWorld) ->
      case w1_sbmZ6 of { NewlineMode ww1_sbmZa ww2_sbmZb ->
      GHC.IO.Handle.$whSetNewlineMode
        w_sbmZ5 ww1_sbmZa ww2_sbmZb w2_sbmZ7
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hSetNewlineMode :: Handle -> NewlineMode -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U><S,1*U(U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSetNewlineMode1
               `cast` (<Handle>_R
                       ->_R <NewlineMode>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> NewlineMode
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> NewlineMode -> IO () :: *))}]
hSetNewlineMode
  = GHC.IO.Handle.hSetNewlineMode1
    `cast` (<Handle>_R
            ->_R <NewlineMode>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> NewlineMode
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> NewlineMode -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8_rbnWQ :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl8_rbnWQ = "hSetBinaryMode"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9_rbnWR :: [Char]
[GblId]
lvl9_rbnWR = unpackCString# lvl8_rbnWQ

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl10_rbnWS :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl10_rbnWS = "codec_state"#

-- RHS size: {terms: 4, types: 4, coercions: 0, joins: 0/0}
lvl11_rbnWT :: forall ds. ds
[GblId, Str=x]
lvl11_rbnWT
  = \ (@ ds_abjTr) ->
      errorWithoutStackTrace
        @ 'LiftedRep @ ds_abjTr (unpackCString# lvl10_rbnWS)

-- RHS size: {terms: 436, types: 870, coercions: 30, joins: 4/5}
GHC.IO.Handle.hSetBinaryMode1
  :: Handle -> Bool -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
GHC.IO.Handle.hSetBinaryMode1
  = \ (handle_abjF8 :: Handle)
      (bin_abjF9 :: Bool)
      (eta_B1 :: State# RealWorld) ->
      let {
        lvl48_sblju :: Newline
        [LclId]
        lvl48_sblju
          = case bin_abjF9 of { __DEFAULT -> GHC.IO.Handle.Types.LF } } in
      GHC.IO.Handle.Internals.withAllHandles__1
        lvl9_rbnWR
        handle_abjF8
        ((\ (h__abjFa :: Handle__) (eta1_X7 :: State# RealWorld) ->
            case h__abjFa of
            { Handle__ @ dev_abjSP @ enc_state_abjSQ @ dec_state_abjSR
                       $dIODevice_abjSS $dBufferedIO_abjST $dTypeable_abjSU ds_dbkg3
                       ds1_dbkg4 dt_dbkvb ds2_dbkg6 dt1_dbkvc dt2_dbkvd dt3_dbkve
                       ds3_dbkga ds4_dbkgb ds5_dbkgc ds6_dbkgd ds7_dbkge ds8_dbkgf ->
            case readMutVar#
                   @ RealWorld @ (Buffer CharBufElem) dt2_dbkvd eta1_X7
            of
            { (# ipv_ibkJv, ipv1_ibkJw #) ->
            case ipv1_ibkJw of
            { Buffer dt4_ibkJA dt5_ibkJB ds10_ibkJC dt6_ibkJD dt7_ibkJE
                     dt8_ibkJF ->
            join {
              $w$j_sbmZn [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U)>]
                :: State# RealWorld -> (# State# RealWorld, Handle__ #)
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $w$j_sbmZn (w_sbmZl [OS=OneShot] :: State# RealWorld)
                = join {
                    $w$j1_sbmZk [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U)>]
                      :: State# RealWorld -> (# State# RealWorld, Handle__ #)
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                    $w$j1_sbmZk (w1_sbmZi [OS=OneShot] :: State# RealWorld)
                      = join {
                          $j_sbloT [Dmd=<L,1*C1(C1(U))>]
                            :: State# RealWorld
                               -> Maybe TextEncoding -> (# State# RealWorld, Handle__ #)
                          [LclId[JoinId(2)], Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []]
                          $j_sbloT (ipv2_i7IAy [OS=OneShot] :: State# RealWorld)
                                   (ipv3_i7IAz [OS=OneShot] :: Maybe TextEncoding)
                            = case ipv3_i7IAz of wild2_ibkN9 {
                                Nothing ->
                                  case readMutVar#
                                         @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvb ipv2_i7IAy
                                  of
                                  { (# ipv4_X7IDm, ipv5_X7IDo #) ->
                                  case newMutVar#
                                         @ (Any, Buffer GHC.Word.Word8)
                                         @ RealWorld
                                         (lvl11_rbnWT @ Any, ipv5_X7IDo)
                                         ipv4_X7IDm
                                  of
                                  { (# ipv6_ia4ZV, ipv7_ia4ZW #) ->
                                  (# ipv6_ia4ZV,
                                     GHC.IO.Handle.Types.Handle__
                                       @ dev_abjSP
                                       @ Any
                                       @ Any
                                       $dIODevice_abjSS
                                       $dBufferedIO_abjST
                                       $dTypeable_abjSU
                                       ds_dbkg3
                                       ds1_dbkg4
                                       dt_dbkvb
                                       ds2_dbkg6
                                       ipv7_ia4ZW
                                       dt2_dbkvd
                                       dt3_dbkve
                                       (GHC.Base.Nothing @ (TextEncoder Any))
                                       (GHC.Base.Nothing @ (TextDecoder Any))
                                       (GHC.Base.Nothing @ TextEncoding)
                                       lvl48_sblju
                                       lvl48_sblju
                                       ds8_dbkgf #)
                                  }
                                  };
                                Just ds12_ibkNd ->
                                  case ds12_ibkNd of
                                  { TextEncoding @ dstate_ibkNi @ estate_ibkNj ds13_ibkNm ds14_ibkNn
                                                 ds15_ibkNo ->
                                  join {
                                    $j1_sblih [Dmd=<L,1*C1(C1(U))>]
                                      :: State# RealWorld
                                         -> Maybe (TextDecoder dstate_ibkNi)
                                         -> (# State# RealWorld, Handle__ #)
                                    [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
                                    $j1_sblih (ipv4_ibkNk [OS=OneShot] :: State# RealWorld)
                                              (ipv5_ibkNl [OS=OneShot]
                                                 :: Maybe (TextDecoder dstate_ibkNi))
                                      = case ds1_dbkg4 of wild4_ibkNq {
                                          __DEFAULT ->
                                            case readMutVar#
                                                   @ RealWorld
                                                   @ (Buffer GHC.Word.Word8)
                                                   dt_dbkvb
                                                   ipv4_ibkNk
                                            of
                                            { (# ipv6_X7IDm, ipv7_X7IDo #) ->
                                            case newMutVar#
                                                   @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                                   @ RealWorld
                                                   (lvl11_rbnWT @ dstate_ibkNi, ipv7_X7IDo)
                                                   ipv6_X7IDm
                                            of
                                            { (# ipv8_ia4ZV, ipv9_ia4ZW #) ->
                                            (# ipv8_ia4ZV,
                                               GHC.IO.Handle.Types.Handle__
                                                 @ dev_abjSP
                                                 @ estate_ibkNj
                                                 @ dstate_ibkNi
                                                 $dIODevice_abjSS
                                                 $dBufferedIO_abjST
                                                 $dTypeable_abjSU
                                                 ds_dbkg3
                                                 wild4_ibkNq
                                                 dt_dbkvb
                                                 ds2_dbkg6
                                                 ipv9_ia4ZW
                                                 dt2_dbkvd
                                                 dt3_dbkve
                                                 (GHC.Base.Nothing @ (TextEncoder estate_ibkNj))
                                                 ipv5_ibkNl
                                                 wild2_ibkN9
                                                 lvl48_sblju
                                                 lvl48_sblju
                                                 ds8_dbkgf #)
                                            }
                                            };
                                          WriteHandle ->
                                            case (ds15_ibkNo
                                                  `cast` (GHC.Types.N:IO[0]
                                                              <TextEncoder estate_ibkNj>_R
                                                          :: (IO (TextEncoder estate_ibkNj) :: *)
                                                             ~R# (State# RealWorld
                                                                  -> (# State# RealWorld,
                                                                        TextEncoder
                                                                          estate_ibkNj #) :: *)))
                                                   ipv4_ibkNk
                                            of
                                            { (# ipv6_ibkNv, ipv7_ibkNw #) ->
                                            case readMutVar#
                                                   @ RealWorld
                                                   @ (Buffer GHC.Word.Word8)
                                                   dt_dbkvb
                                                   ipv6_ibkNv
                                            of
                                            { (# ipv8_X7IDm, ipv9_X7IDo #) ->
                                            case newMutVar#
                                                   @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                                   @ RealWorld
                                                   (lvl11_rbnWT @ dstate_ibkNi, ipv9_X7IDo)
                                                   ipv8_X7IDm
                                            of
                                            { (# ipv10_ia4ZV, ipv11_ia4ZW #) ->
                                            (# ipv10_ia4ZV,
                                               GHC.IO.Handle.Types.Handle__
                                                 @ dev_abjSP
                                                 @ estate_ibkNj
                                                 @ dstate_ibkNi
                                                 $dIODevice_abjSS
                                                 $dBufferedIO_abjST
                                                 $dTypeable_abjSU
                                                 ds_dbkg3
                                                 GHC.IO.Handle.Types.WriteHandle
                                                 dt_dbkvb
                                                 ds2_dbkg6
                                                 ipv11_ia4ZW
                                                 dt2_dbkvd
                                                 dt3_dbkve
                                                 (GHC.Base.Just
                                                    @ (TextEncoder estate_ibkNj) ipv7_ibkNw)
                                                 ipv5_ibkNl
                                                 wild2_ibkN9
                                                 lvl48_sblju
                                                 lvl48_sblju
                                                 ds8_dbkgf #)
                                            }
                                            }
                                            };
                                          AppendHandle ->
                                            case (ds15_ibkNo
                                                  `cast` (GHC.Types.N:IO[0]
                                                              <TextEncoder estate_ibkNj>_R
                                                          :: (IO (TextEncoder estate_ibkNj) :: *)
                                                             ~R# (State# RealWorld
                                                                  -> (# State# RealWorld,
                                                                        TextEncoder
                                                                          estate_ibkNj #) :: *)))
                                                   ipv4_ibkNk
                                            of
                                            { (# ipv6_ibkNC, ipv7_ibkND #) ->
                                            case readMutVar#
                                                   @ RealWorld
                                                   @ (Buffer GHC.Word.Word8)
                                                   dt_dbkvb
                                                   ipv6_ibkNC
                                            of
                                            { (# ipv8_X7IDm, ipv9_X7IDo #) ->
                                            case newMutVar#
                                                   @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                                   @ RealWorld
                                                   (lvl11_rbnWT @ dstate_ibkNi, ipv9_X7IDo)
                                                   ipv8_X7IDm
                                            of
                                            { (# ipv10_ia4ZV, ipv11_ia4ZW #) ->
                                            (# ipv10_ia4ZV,
                                               GHC.IO.Handle.Types.Handle__
                                                 @ dev_abjSP
                                                 @ estate_ibkNj
                                                 @ dstate_ibkNi
                                                 $dIODevice_abjSS
                                                 $dBufferedIO_abjST
                                                 $dTypeable_abjSU
                                                 ds_dbkg3
                                                 GHC.IO.Handle.Types.AppendHandle
                                                 dt_dbkvb
                                                 ds2_dbkg6
                                                 ipv11_ia4ZW
                                                 dt2_dbkvd
                                                 dt3_dbkve
                                                 (GHC.Base.Just
                                                    @ (TextEncoder estate_ibkNj) ipv7_ibkND)
                                                 ipv5_ibkNl
                                                 wild2_ibkN9
                                                 lvl48_sblju
                                                 lvl48_sblju
                                                 ds8_dbkgf #)
                                            }
                                            }
                                            };
                                          ReadWriteHandle ->
                                            case (ds15_ibkNo
                                                  `cast` (GHC.Types.N:IO[0]
                                                              <TextEncoder estate_ibkNj>_R
                                                          :: (IO (TextEncoder estate_ibkNj) :: *)
                                                             ~R# (State# RealWorld
                                                                  -> (# State# RealWorld,
                                                                        TextEncoder
                                                                          estate_ibkNj #) :: *)))
                                                   ipv4_ibkNk
                                            of
                                            { (# ipv6_ibkNJ, ipv7_ibkNK #) ->
                                            case readMutVar#
                                                   @ RealWorld
                                                   @ (Buffer GHC.Word.Word8)
                                                   dt_dbkvb
                                                   ipv6_ibkNJ
                                            of
                                            { (# ipv8_X7IDm, ipv9_X7IDo #) ->
                                            case newMutVar#
                                                   @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                                   @ RealWorld
                                                   (lvl11_rbnWT @ dstate_ibkNi, ipv9_X7IDo)
                                                   ipv8_X7IDm
                                            of
                                            { (# ipv10_ia4ZV, ipv11_ia4ZW #) ->
                                            (# ipv10_ia4ZV,
                                               GHC.IO.Handle.Types.Handle__
                                                 @ dev_abjSP
                                                 @ estate_ibkNj
                                                 @ dstate_ibkNi
                                                 $dIODevice_abjSS
                                                 $dBufferedIO_abjST
                                                 $dTypeable_abjSU
                                                 ds_dbkg3
                                                 GHC.IO.Handle.Types.ReadWriteHandle
                                                 dt_dbkvb
                                                 ds2_dbkg6
                                                 ipv11_ia4ZW
                                                 dt2_dbkvd
                                                 dt3_dbkve
                                                 (GHC.Base.Just
                                                    @ (TextEncoder estate_ibkNj) ipv7_ibkNK)
                                                 ipv5_ibkNl
                                                 wild2_ibkN9
                                                 lvl48_sblju
                                                 lvl48_sblju
                                                 ds8_dbkgf #)
                                            }
                                            }
                                            }
                                        } } in
                                  case ds1_dbkg4 of {
                                    __DEFAULT ->
                                      jump $j1_sblih
                                        ipv2_i7IAy (GHC.Base.Nothing @ (TextDecoder dstate_ibkNi));
                                    ReadHandle ->
                                      case (ds14_ibkNn
                                            `cast` (GHC.Types.N:IO[0] <TextDecoder dstate_ibkNi>_R
                                                    :: (IO (TextDecoder dstate_ibkNi) :: *)
                                                       ~R# (State# RealWorld
                                                            -> (# State# RealWorld,
                                                                  TextDecoder
                                                                    dstate_ibkNi #) :: *)))
                                             ipv2_i7IAy
                                      of
                                      { (# ipv4_ibkNR, ipv5_ibkNS #) ->
                                      jump $j1_sblih
                                        ipv4_ibkNR
                                        (GHC.Base.Just @ (TextDecoder dstate_ibkNi) ipv5_ibkNS)
                                      };
                                    ReadWriteHandle ->
                                      case (ds14_ibkNn
                                            `cast` (GHC.Types.N:IO[0] <TextDecoder dstate_ibkNi>_R
                                                    :: (IO (TextDecoder dstate_ibkNi) :: *)
                                                       ~R# (State# RealWorld
                                                            -> (# State# RealWorld,
                                                                  TextDecoder
                                                                    dstate_ibkNi #) :: *)))
                                             ipv2_i7IAy
                                      of
                                      { (# ipv4_ibkNY, ipv5_ibkNZ #) ->
                                      jump $j1_sblih
                                        ipv4_ibkNY
                                        (GHC.Base.Just @ (TextDecoder dstate_ibkNi) ipv5_ibkNZ)
                                      }
                                  }
                                  }
                              } } in
                        case bin_abjF9 of {
                          False ->
                            case GHC.IO.Encoding.getLocaleEncoding1 of
                            { (getLocaleEncoding3_ibk84, setLocaleEncoding1_ibk85) ->
                            case (getLocaleEncoding3_ibk84
                                  `cast` (GHC.Types.N:IO[0] <TextEncoding>_R
                                          :: (IO TextEncoding :: *)
                                             ~R# (State# RealWorld
                                                  -> (# State# RealWorld, TextEncoding #) :: *)))
                                   w1_sbmZi
                            of
                            { (# ipv2_i7Vb3, ipv3_i7Vb4 #) ->
                            jump $j_sbloT ipv2_i7Vb3 (GHC.Base.Just @ TextEncoding ipv3_i7Vb4)
                            }
                            };
                          True -> jump $j_sbloT w1_sbmZi (GHC.Base.Nothing @ TextEncoding)
                        } } in
                  case ds4_dbkgb of {
                    Nothing ->
                      case ds3_dbkga of {
                        Nothing -> jump $w$j1_sbmZk w_sbmZl;
                        Just d_ibkMj ->
                          case d_ibkMj of
                          { BufferCodec ds12_ibkMn ds11_ibkMo ds13_ibkMp ds14_ibkMq
                                        ds15_ibkMr ->
                          case (ds13_ibkMp
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 w_sbmZl
                          of
                          { (# ipv2_X7Jlc, ipv3_X7Jle #) ->
                          jump $w$j1_sbmZk ipv2_X7Jlc
                          }
                          }
                      };
                    Just d_ibkMu ->
                      case d_ibkMu of
                      { BufferCodec ds12_ibkMy ds11_ibkMz ds13_ibkMA ds14_ibkMB
                                    ds15_ibkMC ->
                      case (ds13_ibkMA
                            `cast` (GHC.Types.N:IO[0] <()>_R
                                    :: (IO () :: *)
                                       ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                             w_sbmZl
                      of
                      { (# ipv2_ibkMG, ipv3_ibkMH #) ->
                      case ds3_dbkga of {
                        Nothing -> jump $w$j1_sbmZk ipv2_ibkMG;
                        Just d1_ibkMN ->
                          case d1_ibkMN of
                          { BufferCodec ds17_ibkMR ds18_ibkMS ds19_ibkMT ds20_ibkMU
                                        ds21_ibkMV ->
                          case (ds19_ibkMT
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 ipv2_ibkMG
                          of
                          { (# ipv4_X7Jlc, ipv5_X7Jle #) ->
                          jump $w$j1_sbmZk ipv4_X7Jlc
                          }
                          }
                      }
                      }
                      }
                  } } in
            case ds10_ibkJC of {
              ReadBuffer ->
                case readMutVar#
                       @ RealWorld @ (Buffer CharBufElem) dt2_dbkvd ipv_ibkJv
                of
                { (# ipv2_ibkKg, ipv3_ibkKh #) ->
                case ipv3_ibkKh of
                { Buffer dt10_ibkKl dt11_ibkKm ds11_ibkKn dt12_ibkKo dt13_ibkKp
                         dt14_ibkKq ->
                case ds11_ibkKn of {
                  ReadBuffer ->
                    case ==# dt13_ibkKp dt14_ibkKq of {
                      __DEFAULT ->
                        case readMutVar#
                               @ RealWorld
                               @ (dec_state_abjSR, Buffer GHC.Word.Word8)
                               dt1_dbkvc
                               ipv2_ibkKg
                        of
                        { (# ipv4_ibkKy, ipv5_ibkKz #) ->
                        case ipv5_ibkKz of { (codec_state_ibkKD, bbuf0_ibkKE) ->
                        case readMutVar#
                               @ RealWorld @ (Buffer CharBufElem) dt2_dbkvd ipv4_ibkKy
                        of
                        { (# ipv6_ibkKI, ipv7_ibkKJ #) ->
                        case writeMutVar#
                               @ RealWorld
                               @ (Buffer CharBufElem)
                               dt2_dbkvd
                               (case ipv7_ibkKJ of
                                { Buffer dt9_ibkKN dt15_ibkKO ds15_ibkKP dt16_ibkKQ dt17_ibkKR
                                         dt18_ibkKS ->
                                GHC.IO.Buffer.Buffer
                                  @ CharBufElem dt9_ibkKN dt15_ibkKO ds15_ibkKP dt16_ibkKQ 0# 0#
                                })
                               ipv6_ibkKI
                        of s2#_ibkKU
                        { __DEFAULT ->
                        case ipv7_ibkKJ of
                        { Buffer dt9_ibkKX dt15_ibkKY ds15_ibkKZ dt16_ibkL0 dt17_ibkL1
                                 dt18_ibkL2 ->
                        case dt17_ibkL1 of wild7_ibkL4 {
                          __DEFAULT ->
                            case ds4_dbkgb of {
                              Nothing ->
                                case writeMutVar#
                                       @ RealWorld
                                       @ (Buffer GHC.Word.Word8)
                                       dt_dbkvb
                                       (case bbuf0_ibkKE of
                                        { Buffer dt19_ibkLa dt20_ibkLb ds16_ibkLc dt21_ibkLd
                                                 dt22_ibkLe dt23_ibkLf ->
                                        GHC.IO.Buffer.Buffer
                                          @ GHC.Word.Word8
                                          dt19_ibkLa
                                          dt20_ibkLb
                                          ds16_ibkLc
                                          dt21_ibkLd
                                          (+# dt22_ibkLe wild7_ibkL4)
                                          dt23_ibkLf
                                        })
                                       s2#_ibkKU
                                of s2#1_ibkLh
                                { __DEFAULT ->
                                jump $w$j_sbmZn s2#1_ibkLh
                                };
                              Just decoder_ibkLj ->
                                case decoder_ibkLj of
                                { BufferCodec ds16_ibkLn ds17_ibkLo ds18_ibkLp ds19_ibkLq
                                              ds20_ibkLr ->
                                case ((ds20_ibkLr codec_state_ibkKD)
                                      `cast` (GHC.Types.N:IO[0] <()>_R
                                              :: (IO () :: *)
                                                 ~R# (State# RealWorld
                                                      -> (# State# RealWorld, () #) :: *)))
                                       s2#_ibkKU
                                of
                                { (# ipv8_ibkLv, ipv9_ibkLw #) ->
                                case GHC.IO.Handle.Internals.$wstreamEncode
                                       @ GHC.Word.Word8
                                       @ CharBufElem
                                       @ dec_state_abjSR
                                       ds16_ibkLn
                                       ds17_ibkLo
                                       bbuf0_ibkKE
                                       (GHC.IO.Buffer.Buffer
                                          @ CharBufElem
                                          dt9_ibkKX
                                          dt15_ibkKY
                                          ds15_ibkKZ
                                          wild7_ibkL4
                                          0#
                                          0#)
                                       ipv8_ibkLv
                                of
                                { (# ipv10_ibkLA, ipv11_ibkLB #) ->
                                case ipv11_ibkLB of { (bbuf1_ibkLF, cbuf1_ibkLG) ->
                                case writeMutVar#
                                       @ RealWorld
                                       @ (Buffer GHC.Word.Word8)
                                       dt_dbkvb
                                       bbuf1_ibkLF
                                       ipv10_ibkLA
                                of s2#1_ibkLI
                                { __DEFAULT ->
                                jump $w$j_sbmZn s2#1_ibkLI
                                }
                                }
                                }
                                }
                                }
                            };
                          0# ->
                            case writeMutVar#
                                   @ RealWorld
                                   @ (Buffer GHC.Word.Word8)
                                   dt_dbkvb
                                   bbuf0_ibkKE
                                   s2#_ibkKU
                            of s2#1_ibkLJ
                            { __DEFAULT ->
                            jump $w$j_sbmZn s2#1_ibkLJ
                            }
                        }
                        }
                        }
                        }
                        }
                        };
                      1# -> jump $w$j_sbmZn ipv2_ibkKg
                    };
                  WriteBuffer -> jump $w$j_sbmZn ipv2_ibkKg
                }
                }
                };
              WriteBuffer ->
                case ==# dt7_ibkJE dt8_ibkJF of {
                  __DEFAULT ->
                    case GHC.IO.Handle.Internals.flushCharBuffer2 of wild4_00 { };
                  1# -> jump $w$j_sbmZn ipv_ibkJv
                }
            }
            }
            }
            })
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Handle__>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, Handle__ #) :: *)
                    ~R# (Handle__ -> IO Handle__ :: *)))
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hSetBinaryMode :: Handle -> Bool -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSetBinaryMode1
               `cast` (<Handle>_R
                       ->_R <Bool>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> Bool -> IO () :: *))}]
hSetBinaryMode
  = GHC.IO.Handle.hSetBinaryMode1
    `cast` (<Handle>_R
            ->_R <Bool>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> Bool -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsSeekable4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hIsSeekable4 = "hIsSeekable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsSeekable3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hIsSeekable3
  = unpackCString# GHC.IO.Handle.hIsSeekable4

-- RHS size: {terms: 33, types: 105, coercions: 2, joins: 0/0}
GHC.IO.Handle.hIsSeekable2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Bool) #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 140 60}]
GHC.IO.Handle.hIsSeekable2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_X1G
      { Handle__ @ dev_abjV9 @ enc_state_abjVa @ dec_state_abjVb
                 $dIODevice_abjVc $dBufferedIO_abjVd $dTypeable_abjVe ds_dbkjz
                 ds1_dbkjA dt_dbkvr ds2_dbkjC dt1_dbkvs dt2_dbkvt dt3_dbkvu
                 ds3_dbkjG ds4_dbkjH ds5_dbkjI ds6_dbkjJ ds7_dbkjK ds8_dbkjL ->
      case ds1_dbkjA of {
        __DEFAULT ->
          case ((isSeekable @ dev_abjV9 $dIODevice_abjVc ds_dbkjz)
                `cast` (GHC.Types.N:IO[0] <Bool>_R
                        :: (IO Bool :: *)
                           ~R# (State# RealWorld -> (# State# RealWorld, Bool #) :: *)))
                 s1_ibk5u
          of
          { (# ipv_ibk5x, ipv1_ibk5y #) ->
          (# ipv_ibk5x, (wild_X1G, ipv1_ibk5y) #)
          };
        ClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_closedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          };
        SemiClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_semiclosedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          };
        AppendHandle -> (# s1_ibk5u, (wild_X1G, GHC.Types.False) #)
      }
      }

-- RHS size: {terms: 76, types: 133, coercions: 14, joins: 0/2}
GHC.IO.Handle.hIsSeekable1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hIsSeekable1
  = \ (handle_abjEa :: Handle) (eta_B1 :: State# RealWorld) ->
      case handle_abjEa of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblib [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblib
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsSeekable3
                         wild_ibk5j
                         (GHC.IO.Handle.hIsSeekable2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblib ipv_ibk5N;
            0# -> maskAsyncExceptions# @ Bool io_sblib ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblid [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblid
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsSeekable3
                         wild_ibk5j
                         (GHC.IO.Handle.hIsSeekable2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblid ipv_ibk6j;
            0# -> maskAsyncExceptions# @ Bool io_sblid ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hIsSeekable :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hIsSeekable1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hIsSeekable
  = GHC.IO.Handle.hIsSeekable1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetPosn4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.hGetPosn4 = "hGetPosn"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetPosn3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hGetPosn3 = unpackCString# GHC.IO.Handle.hGetPosn4

-- RHS size: {terms: 187, types: 340, coercions: 4, joins: 1/1}
GHC.IO.Handle.hGetPosn2
  :: Handle__ -> State# RealWorld -> (# State# RealWorld, Integer #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 549 0}]
GHC.IO.Handle.hGetPosn2
  = \ (handle__abjDG :: Handle__) (eta_B1 :: State# RealWorld) ->
      case handle__abjDG of
      { Handle__ @ dev_abjWC @ enc_state_abjWD @ dec_state_abjWE
                 $dIODevice_abjWF $dBufferedIO_abjWG $dTypeable_abjWH ds_dbkm0
                 ds1_dbkm1 dt_dbkvz ds2_dbkm3 dt1_dbkvA dt2_dbkvB dt3_dbkvC
                 ds3_dbkm7 ds4_dbkm8 ds5_dbkm9 ds6_dbkma ds7_dbkmb ds8_dbkmc ->
      case ((tell @ dev_abjWC $dIODevice_abjWF ds_dbkm0)
            `cast` (GHC.Types.N:IO[0] <Integer>_R
                    :: (IO Integer :: *)
                       ~R# (State# RealWorld -> (# State# RealWorld, Integer #) :: *)))
             eta_B1
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case readMutVar#
             @ RealWorld @ (Buffer CharBufElem) dt2_dbkvB ipv_i7IAy
      of
      { (# ipv2_ibkJv, ipv3_ibkJw #) ->
      case ipv3_ibkJw of
      { Buffer dt4_ibkJA dt5_ibkJB ds11_ibkJC dt6_ibkJD dt7_ibkJE
               dt8_ibkJF ->
      join {
        $w$j_sbmZB [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U(U,U))>]
          :: State# RealWorld -> (# State# RealWorld, Integer #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $w$j_sbmZB (w_sbmZz [OS=OneShot] :: State# RealWorld)
          = case readMutVar#
                   @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvz w_sbmZz
            of
            { (# ipv4_X7IDc, ipv5_X7IDe #) ->
            case readMutVar#
                   @ RealWorld @ (Buffer CharBufElem) dt2_dbkvB ipv4_X7IDc
            of
            { (# ipv6_X7IDm, ipv7_X7IDo #) ->
            (# ipv6_X7IDm,
               case ipv5_X7IDe of
               { Buffer dt10_ia4xp dt11_ia4xq ds14_ia4xr dt12_ia4xs dt13_ia4xt
                        dt14_ia4xu ->
               case ds14_ia4xr of {
                 ReadBuffer ->
                   minusInteger ipv1_i7IAz (smallInteger (-# dt14_ia4xu dt13_ia4xt));
                 WriteBuffer ->
                   plusInteger ipv1_i7IAz (smallInteger (-# dt14_ia4xu dt13_ia4xt))
               }
               } #)
            }
            } } in
      case ds11_ibkJC of {
        ReadBuffer ->
          case readMutVar#
                 @ RealWorld @ (Buffer CharBufElem) dt2_dbkvB ipv2_ibkJv
          of
          { (# ipv4_ibkKg, ipv5_ibkKh #) ->
          case ipv5_ibkKh of
          { Buffer dt10_ibkKl dt11_ibkKm ds13_ibkKn dt12_ibkKo dt13_ibkKp
                   dt14_ibkKq ->
          case ds13_ibkKn of {
            ReadBuffer ->
              case ==# dt13_ibkKp dt14_ibkKq of {
                __DEFAULT ->
                  case readMutVar#
                         @ RealWorld
                         @ (dec_state_abjWE, Buffer GHC.Word.Word8)
                         dt1_dbkvA
                         ipv4_ibkKg
                  of
                  { (# ipv6_ibkKy, ipv7_ibkKz #) ->
                  case ipv7_ibkKz of { (codec_state_ibkKD, bbuf0_ibkKE) ->
                  case readMutVar#
                         @ RealWorld @ (Buffer CharBufElem) dt2_dbkvB ipv6_ibkKy
                  of
                  { (# ipv8_ibkKI, ipv9_ibkKJ #) ->
                  case writeMutVar#
                         @ RealWorld
                         @ (Buffer CharBufElem)
                         dt2_dbkvB
                         (case ipv9_ibkKJ of
                          { Buffer dt9_ibkKN dt15_ibkKO ds16_ibkKP dt16_ibkKQ dt17_ibkKR
                                   dt18_ibkKS ->
                          GHC.IO.Buffer.Buffer
                            @ CharBufElem dt9_ibkKN dt15_ibkKO ds16_ibkKP dt16_ibkKQ 0# 0#
                          })
                         ipv8_ibkKI
                  of s2#_ibkKU
                  { __DEFAULT ->
                  case ipv9_ibkKJ of
                  { Buffer dt9_ibkKX dt15_ibkKY ds16_ibkKZ dt16_ibkL0 dt17_ibkL1
                           dt18_ibkL2 ->
                  case dt17_ibkL1 of wild7_ibkL4 {
                    __DEFAULT ->
                      case ds4_dbkm8 of {
                        Nothing ->
                          case writeMutVar#
                                 @ RealWorld
                                 @ (Buffer GHC.Word.Word8)
                                 dt_dbkvz
                                 (case bbuf0_ibkKE of
                                  { Buffer dt19_ibkLa dt20_ibkLb ds17_ibkLc dt21_ibkLd dt22_ibkLe
                                           dt23_ibkLf ->
                                  GHC.IO.Buffer.Buffer
                                    @ GHC.Word.Word8
                                    dt19_ibkLa
                                    dt20_ibkLb
                                    ds17_ibkLc
                                    dt21_ibkLd
                                    (+# dt22_ibkLe wild7_ibkL4)
                                    dt23_ibkLf
                                  })
                                 s2#_ibkKU
                          of s2#1_ibkLh
                          { __DEFAULT ->
                          jump $w$j_sbmZB s2#1_ibkLh
                          };
                        Just decoder_ibkLj ->
                          case decoder_ibkLj of
                          { BufferCodec ds17_ibkLn ds18_ibkLo ds19_ibkLp ds20_ibkLq
                                        ds21_ibkLr ->
                          case ((ds21_ibkLr codec_state_ibkKD)
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 s2#_ibkKU
                          of
                          { (# ipv10_ibkLv, ipv11_ibkLw #) ->
                          case GHC.IO.Handle.Internals.$wstreamEncode
                                 @ GHC.Word.Word8
                                 @ CharBufElem
                                 @ dec_state_abjWE
                                 ds17_ibkLn
                                 ds18_ibkLo
                                 bbuf0_ibkKE
                                 (GHC.IO.Buffer.Buffer
                                    @ CharBufElem dt9_ibkKX dt15_ibkKY ds16_ibkKZ wild7_ibkL4 0# 0#)
                                 ipv10_ibkLv
                          of
                          { (# ipv12_ibkLA, ipv13_ibkLB #) ->
                          case ipv13_ibkLB of { (bbuf1_ibkLF, cbuf1_ibkLG) ->
                          case writeMutVar#
                                 @ RealWorld
                                 @ (Buffer GHC.Word.Word8)
                                 dt_dbkvz
                                 bbuf1_ibkLF
                                 ipv12_ibkLA
                          of s2#1_ibkLI
                          { __DEFAULT ->
                          jump $w$j_sbmZB s2#1_ibkLI
                          }
                          }
                          }
                          }
                          }
                      };
                    0# ->
                      case writeMutVar#
                             @ RealWorld
                             @ (Buffer GHC.Word.Word8)
                             dt_dbkvz
                             bbuf0_ibkKE
                             s2#_ibkKU
                      of s2#1_ibkLJ
                      { __DEFAULT ->
                      jump $w$j_sbmZB s2#1_ibkLJ
                      }
                  }
                  }
                  }
                  }
                  }
                  };
                1# -> jump $w$j_sbmZB ipv4_ibkKg
              };
            WriteBuffer -> jump $w$j_sbmZB ipv4_ibkKg
          }
          }
          };
        WriteBuffer ->
          case ==# dt7_ibkJE dt8_ibkJF of {
            __DEFAULT ->
              case GHC.IO.Handle.Internals.flushCharBuffer2 of wild4_00 { };
            1# -> jump $w$j_sbmZB ipv2_ibkJv
          }
      }
      }
      }
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 5, joins: 0/0}
GHC.IO.Handle.hTell1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Integer #)
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (handle_abjDF [Occ=Once] :: Handle) ->
                 GHC.IO.Handle.Internals.wantSeekableHandle1
                   @ Integer
                   GHC.IO.Handle.hGetPosn3
                   handle_abjDF
                   (GHC.IO.Handle.hGetPosn2
                    `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                            :: (Handle__
                                -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                               ~R# (Handle__ -> IO Integer :: *)))}]
GHC.IO.Handle.hTell1
  = \ (handle_abjDF :: Handle) ->
      GHC.IO.Handle.Internals.wantSeekableHandle1
        @ Integer
        GHC.IO.Handle.hGetPosn3
        handle_abjDF
        (GHC.IO.Handle.hGetPosn2
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                    ~R# (Handle__ -> IO Integer :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hTell :: Handle -> IO Integer
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hTell1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                          ~R# (Handle -> IO Integer :: *))}]
hTell
  = GHC.IO.Handle.hTell1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
               ~R# (Handle -> IO Integer :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl12_rbnWU :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl12_rbnWU = "hSeek"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl13_rbnWV :: [Char]
[GblId]
lvl13_rbnWV = unpackCString# lvl12_rbnWU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl14_rbnWW :: Integer
[GblId, Unf=OtherCon []]
lvl14_rbnWW = 0

-- RHS size: {terms: 312, types: 440, coercions: 26, joins: 1/3}
GHC.IO.Handle.hSeek1
  :: Handle
     -> SeekMode
     -> Integer
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId, Arity=4, Str=<S,1*U><L,U><L,U><S,U>, Unf=OtherCon []]
GHC.IO.Handle.hSeek1
  = \ (handle_abjDl :: Handle)
      (mode_abjDm :: SeekMode)
      (offset_abjDn :: Integer)
      (eta_B1 :: State# RealWorld) ->
      let {
        lvl48_sbljM [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl48_sbljM
          = case integerToInt offset_abjDn of wild_i7Vf0 { __DEFAULT ->
            GHC.Types.I# wild_i7Vf0
            } } in
      let {
        lvl49_sbljL [Dmd=<L,U(U)>] :: Int
        [LclId]
        lvl49_sbljL
          = case geInteger# offset_abjDn lvl14_rbnWW of v_B2 { __DEFAULT ->
            GHC.Types.I# v_B2
            } } in
      GHC.IO.Handle.Internals.wantSeekableHandle1
        @ ()
        lvl13_rbnWV
        handle_abjDl
        ((\ (handle__abjDo :: Handle__)
            (eta1_X6 [OS=OneShot] :: State# RealWorld) ->
            case handle__abjDo of wild_X1K
            { Handle__ @ dev_abjXS @ enc_state_abjXT @ dec_state_abjXU
                       $dIODevice_abjXV $dBufferedIO_abjXW $dTypeable_abjXX ds_dbkn0
                       ds1_dbkn1 dt_dbkvD ds2_dbkn3 dt1_dbkvE dt2_dbkvF dt3_dbkvG
                       ds3_dbkn7 ds4_dbkn8 ds5_dbkn9 ds6_dbkna ds7_dbknb ds8_dbknc ->
            case readMutVar#
                   @ RealWorld @ (Buffer CharBufElem) dt2_dbkvF eta1_X6
            of
            { (# ipv_i7IAy, ipv1_i7IAz #) ->
            case ipv1_i7IAz of
            { Buffer dt4_ia4xp dt5_ia4xq ds10_ia4xr dt6_ia4xs dt7_ia4xt
                     dt8_ia4xu ->
            case ds10_ia4xr of {
              ReadBuffer ->
                join {
                  $j_sblrD [Dmd=<L,1*U(U,U)>] :: (# State# RealWorld, () #)
                  [LclId[JoinId(0)]]
                  $j_sblrD
                    = case readMutVar#
                             @ RealWorld @ (Buffer CharBufElem) dt2_dbkvF ipv_i7IAy
                      of
                      { (# ipv2_ibkKg, ipv3_ibkKh #) ->
                      case ipv3_ibkKh of
                      { Buffer dt9_ibkKl dt10_ibkKm ds12_ibkKn dt11_ibkKo dt12_ibkKp
                               dt13_ibkKq ->
                      case ds12_ibkKn of {
                        ReadBuffer ->
                          case ==# dt12_ibkKp dt13_ibkKq of {
                            __DEFAULT ->
                              case readMutVar#
                                     @ RealWorld
                                     @ (dec_state_abjXU, Buffer GHC.Word.Word8)
                                     dt1_dbkvE
                                     ipv2_ibkKg
                              of
                              { (# ipv4_ibkKy, ipv5_ibkKz #) ->
                              case ipv5_ibkKz of { (codec_state_ibkKD, bbuf0_ibkKE) ->
                              case readMutVar#
                                     @ RealWorld @ (Buffer CharBufElem) dt2_dbkvF ipv4_ibkKy
                              of
                              { (# ipv6_ibkKI, ipv7_ibkKJ #) ->
                              case writeMutVar#
                                     @ RealWorld
                                     @ (Buffer CharBufElem)
                                     dt2_dbkvF
                                     (case ipv7_ibkKJ of
                                      { Buffer dt14_ibkKN dt15_ibkKO ds15_ibkKP dt16_ibkKQ
                                               dt17_ibkKR dt18_ibkKS ->
                                      GHC.IO.Buffer.Buffer
                                        @ CharBufElem
                                        dt14_ibkKN
                                        dt15_ibkKO
                                        ds15_ibkKP
                                        dt16_ibkKQ
                                        0#
                                        0#
                                      })
                                     ipv6_ibkKI
                              of s2#_ibkKU
                              { __DEFAULT ->
                              case ipv7_ibkKJ of
                              { Buffer dt14_ibkKX dt15_ibkKY ds15_ibkKZ dt16_ibkL0 dt17_ibkL1
                                       dt18_ibkL2 ->
                              case dt17_ibkL1 of wild7_ibkL4 {
                                __DEFAULT ->
                                  case ds4_dbkn8 of {
                                    Nothing ->
                                      case writeMutVar#
                                             @ RealWorld
                                             @ (Buffer GHC.Word.Word8)
                                             dt_dbkvD
                                             (case bbuf0_ibkKE of
                                              { Buffer dt19_ibkLa dt20_ibkLb ds16_ibkLc dt21_ibkLd
                                                       dt22_ibkLe dt23_ibkLf ->
                                              GHC.IO.Buffer.Buffer
                                                @ GHC.Word.Word8
                                                dt19_ibkLa
                                                dt20_ibkLb
                                                ds16_ibkLc
                                                dt21_ibkLd
                                                (+# dt22_ibkLe wild7_ibkL4)
                                                dt23_ibkLf
                                              })
                                             s2#_ibkKU
                                      of s2#1_ibkLh
                                      { __DEFAULT ->
                                      case GHC.IO.Handle.Internals.flushBuffer2 wild_X1K s2#1_ibkLh
                                      of
                                      { (# ipv8_X7Jlk, ipv9_X7Jlm #) ->
                                      ((seek
                                          @ dev_abjXS
                                          $dIODevice_abjXV
                                          ds_dbkn0
                                          mode_abjDm
                                          offset_abjDn)
                                       `cast` (GHC.Types.N:IO[0] <()>_R
                                               :: (IO () :: *)
                                                  ~R# (State# RealWorld
                                                       -> (# State# RealWorld, () #) :: *)))
                                        ipv8_X7Jlk
                                      }
                                      };
                                    Just decoder_ibkLj ->
                                      case decoder_ibkLj of
                                      { BufferCodec ds16_ibkLn ds17_ibkLo ds18_ibkLp ds19_ibkLq
                                                    ds20_ibkLr ->
                                      case ((ds20_ibkLr codec_state_ibkKD)
                                            `cast` (GHC.Types.N:IO[0] <()>_R
                                                    :: (IO () :: *)
                                                       ~R# (State# RealWorld
                                                            -> (# State# RealWorld, () #) :: *)))
                                             s2#_ibkKU
                                      of
                                      { (# ipv8_ibkLv, ipv9_ibkLw #) ->
                                      case GHC.IO.Handle.Internals.$wstreamEncode
                                             @ GHC.Word.Word8
                                             @ CharBufElem
                                             @ dec_state_abjXU
                                             ds16_ibkLn
                                             ds17_ibkLo
                                             bbuf0_ibkKE
                                             (GHC.IO.Buffer.Buffer
                                                @ CharBufElem
                                                dt14_ibkKX
                                                dt15_ibkKY
                                                ds15_ibkKZ
                                                wild7_ibkL4
                                                0#
                                                0#)
                                             ipv8_ibkLv
                                      of
                                      { (# ipv10_ibkLA, ipv11_ibkLB #) ->
                                      case ipv11_ibkLB of { (bbuf1_ibkLF, cbuf1_ibkLG) ->
                                      case writeMutVar#
                                             @ RealWorld
                                             @ (Buffer GHC.Word.Word8)
                                             dt_dbkvD
                                             bbuf1_ibkLF
                                             ipv10_ibkLA
                                      of s2#1_ibkLI
                                      { __DEFAULT ->
                                      case GHC.IO.Handle.Internals.flushBuffer2 wild_X1K s2#1_ibkLI
                                      of
                                      { (# ipv12_X7Jlk, ipv13_X7Jlm #) ->
                                      ((seek
                                          @ dev_abjXS
                                          $dIODevice_abjXV
                                          ds_dbkn0
                                          mode_abjDm
                                          offset_abjDn)
                                       `cast` (GHC.Types.N:IO[0] <()>_R
                                               :: (IO () :: *)
                                                  ~R# (State# RealWorld
                                                       -> (# State# RealWorld, () #) :: *)))
                                        ipv12_X7Jlk
                                      }
                                      }
                                      }
                                      }
                                      }
                                      }
                                  };
                                0# ->
                                  case writeMutVar#
                                         @ RealWorld
                                         @ (Buffer GHC.Word.Word8)
                                         dt_dbkvD
                                         bbuf0_ibkKE
                                         s2#_ibkKU
                                  of s2#1_ibkLJ
                                  { __DEFAULT ->
                                  case GHC.IO.Handle.Internals.flushBuffer2 wild_X1K s2#1_ibkLJ of
                                  { (# ipv8_X7Jlk, ipv9_X7Jlm #) ->
                                  ((seek
                                      @ dev_abjXS $dIODevice_abjXV ds_dbkn0 mode_abjDm offset_abjDn)
                                   `cast` (GHC.Types.N:IO[0] <()>_R
                                           :: (IO () :: *)
                                              ~R# (State# RealWorld
                                                   -> (# State# RealWorld, () #) :: *)))
                                    ipv8_X7Jlk
                                  }
                                  }
                              }
                              }
                              }
                              }
                              }
                              };
                            1# ->
                              case GHC.IO.Handle.Internals.flushBuffer2 wild_X1K ipv2_ibkKg of
                              { (# ipv4_X7Jlk, ipv5_X7Jlm #) ->
                              ((seek
                                  @ dev_abjXS $dIODevice_abjXV ds_dbkn0 mode_abjDm offset_abjDn)
                               `cast` (GHC.Types.N:IO[0] <()>_R
                                       :: (IO () :: *)
                                          ~R# (State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)))
                                ipv4_X7Jlk
                              }
                          };
                        WriteBuffer ->
                          case GHC.IO.Handle.Internals.flushBuffer2 wild_X1K ipv2_ibkKg of
                          { (# ipv4_X7Jlk, ipv5_X7Jlm #) ->
                          ((seek
                              @ dev_abjXS $dIODevice_abjXV ds_dbkn0 mode_abjDm offset_abjDn)
                           `cast` (GHC.Types.N:IO[0] <()>_R
                                   :: (IO () :: *)
                                      ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                            ipv4_X7Jlk
                          }
                      }
                      }
                      } } in
                case mode_abjDm of {
                  __DEFAULT -> jump $j_sblrD;
                  RelativeSeek ->
                    case ds4_dbkn8 of {
                      Nothing ->
                        case lvl49_sbljL of { I# v1_B2 ->
                        case v1_B2 of {
                          __DEFAULT -> jump $j_sblrD;
                          1# ->
                            case ltInteger#
                                   offset_abjDn (smallInteger (-# dt8_ia4xu dt7_ia4xt))
                            of {
                              __DEFAULT -> jump $j_sblrD;
                              1# ->
                                case writeMutVar#
                                       @ RealWorld
                                       @ (Buffer CharBufElem)
                                       dt2_dbkvF
                                       (case lvl48_sbljM of { I# y_i7MX5 ->
                                        GHC.IO.Buffer.Buffer
                                          @ CharBufElem
                                          dt4_ia4xp
                                          dt5_ia4xq
                                          GHC.IO.Buffer.ReadBuffer
                                          dt6_ia4xs
                                          (+# dt7_ia4xt y_i7MX5)
                                          dt8_ia4xu
                                        })
                                       ipv_i7IAy
                                of s2#_i7IBe
                                { __DEFAULT ->
                                (# s2#_i7IBe, GHC.Tuple.() #)
                                }
                            }
                        }
                        };
                      Just ipv2_ia5sh -> jump $j_sblrD
                    }
                };
              WriteBuffer ->
                case readMutVar#
                       @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvD ipv_i7IAy
                of
                { (# ipv2_ibkCW, ipv3_ibkCX #) ->
                case ipv3_ibkCX of
                { Buffer dt9_ibkD1 dt10_ibkD2 ds12_ibkD3 dt11_ibkD4 dt12_ibkD5
                         dt13_ibkD6 ->
                case ds12_ibkD3 of {
                  ReadBuffer ->
                    ((seek
                        @ dev_abjXS $dIODevice_abjXV ds_dbkn0 mode_abjDm offset_abjDn)
                     `cast` (GHC.Types.N:IO[0] <()>_R
                             :: (IO () :: *)
                                ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                      ipv2_ibkCW;
                  WriteBuffer ->
                    case readMutVar#
                           @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvD ipv2_ibkCW
                    of
                    { (# ipv4_ibkDf, ipv5_ibkDg #) ->
                    case ipv5_ibkDg of wild5_ibkDi
                    { Buffer dt14_ibkDk dt15_ibkDl ds14_ibkDm dt16_ibkDn dt17_ibkDo
                             dt18_ibkDp ->
                    case ==# dt17_ibkDo dt18_ibkDp of {
                      __DEFAULT ->
                        case ((Buffered.flushWriteBuffer
                                 @ dev_abjXS $dBufferedIO_abjXW ds_dbkn0 wild5_ibkDi)
                              `cast` (GHC.Types.N:IO[0] <Buffer GHC.Word.Word8>_R
                                      :: (IO (Buffer GHC.Word.Word8) :: *)
                                         ~R# (State# RealWorld
                                              -> (# State# RealWorld,
                                                    Buffer GHC.Word.Word8 #) :: *)))
                               ipv4_ibkDf
                        of
                        { (# ipv6_ibkDu, ipv7_ibkDv #) ->
                        case writeMutVar#
                               @ RealWorld
                               @ (Buffer GHC.Word.Word8)
                               dt_dbkvD
                               ipv7_ibkDv
                               ipv6_ibkDu
                        of s2#_ibkDx
                        { __DEFAULT ->
                        ((seek
                            @ dev_abjXS $dIODevice_abjXV ds_dbkn0 mode_abjDm offset_abjDn)
                         `cast` (GHC.Types.N:IO[0] <()>_R
                                 :: (IO () :: *)
                                    ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                          s2#_ibkDx
                        }
                        };
                      1# ->
                        ((seek
                            @ dev_abjXS $dIODevice_abjXV ds_dbkn0 mode_abjDm offset_abjDn)
                         `cast` (GHC.Types.N:IO[0] <()>_R
                                 :: (IO () :: *)
                                    ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                          ipv4_ibkDf
                    }
                    }
                    }
                }
                }
                }
            }
            }
            }
            })
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                    ~R# (Handle__ -> IO () :: *)))
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 9, joins: 0/0}
hSeek :: Handle -> SeekMode -> Integer -> IO ()
[GblId,
 Arity=4,
 Str=<S,1*U><L,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSeek1
               `cast` (<Handle>_R
                       ->_R <SeekMode>_R
                       ->_R <Integer>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> SeekMode
                           -> Integer
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> SeekMode -> Integer -> IO () :: *))}]
hSeek
  = GHC.IO.Handle.hSeek1
    `cast` (<Handle>_R
            ->_R <SeekMode>_R
            ->_R <Integer>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> SeekMode
                -> Integer
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> SeekMode -> Integer -> IO () :: *))

-- RHS size: {terms: 10, types: 6, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetPosn1
  :: HandlePosn -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<S(SL),1*U(1*U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_dbknf [Occ=Once!] :: HandlePosn)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ds_dbknf of
                 { HandlePosn h_abjDj [Occ=Once] i_abjDk [Occ=Once] ->
                 GHC.IO.Handle.hSeek1
                   h_abjDj GHC.IO.Device.AbsoluteSeek i_abjDk eta_B1
                 }}]
GHC.IO.Handle.hSetPosn1
  = \ (ds_dbknf :: HandlePosn) (eta_B1 :: State# RealWorld) ->
      case ds_dbknf of { HandlePosn h_abjDj i_abjDk ->
      GHC.IO.Handle.hSeek1
        h_abjDj GHC.IO.Device.AbsoluteSeek i_abjDk eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hSetPosn :: HandlePosn -> IO ()
[GblId,
 Arity=2,
 Str=<S(SL),1*U(1*U,U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSetPosn1
               `cast` (<HandlePosn>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (HandlePosn
                           -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (HandlePosn -> IO () :: *))}]
hSetPosn
  = GHC.IO.Handle.hSetPosn1
    `cast` (<HandlePosn>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (HandlePosn
                -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (HandlePosn -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetEncoding4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hGetEncoding4 = "hGetEncoding"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetEncoding3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hGetEncoding3
  = unpackCString# GHC.IO.Handle.hGetEncoding4

-- RHS size: {terms: 10, types: 65, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetEncoding2
  :: Handle__
     -> State# RealWorld
     -> (# State# RealWorld, (Handle__, Maybe TextEncoding) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h__ibk5t [Occ=Once!] :: Handle__)
                 (s1_ibk5u [Occ=Once] :: State# RealWorld) ->
                 case h__ibk5t of wild_X1Q
                 { Handle__ @ dev_abjZy @ enc_state_abjZz @ dec_state_abjZA
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ds5_dbko0 [Occ=Once] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] ->
                 (# s1_ibk5u, (wild_X1Q, ds5_dbko0) #)
                 }}]
GHC.IO.Handle.hGetEncoding2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_X1Q
      { Handle__ @ dev_abjZy @ enc_state_abjZz @ dec_state_abjZA
                 $dIODevice_abjZB $dBufferedIO_abjZC $dTypeable_abjZD ds_dbknR
                 ds1_dbknS dt_dbkvM ds2_dbknU dt1_dbkvN dt2_dbkvO dt3_dbkvP
                 ds3_dbknY ds4_dbknZ ds5_dbko0 ds6_dbko1 ds7_dbko2 ds8_dbko3 ->
      (# s1_ibk5u, (wild_X1Q, ds5_dbko0) #)
      }

-- RHS size: {terms: 76, types: 149, coercions: 16, joins: 0/2}
GHC.IO.Handle.hGetEncoding1
  :: Handle
     -> State# RealWorld -> (# State# RealWorld, Maybe TextEncoding #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hGetEncoding1
  = \ (hdl_abjD0 :: Handle) (eta_B1 :: State# RealWorld) ->
      case hdl_abjD0 of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sbli5 [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Maybe TextEncoding #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sbli5
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Maybe TextEncoding)
                         GHC.IO.Handle.hGetEncoding3
                         wild_ibk5j
                         (GHC.IO.Handle.hGetEncoding2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Maybe TextEncoding)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld,
                                            (Handle__, Maybe TextEncoding) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Maybe TextEncoding) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sbli5 ipv_ibk5N;
            0# ->
              maskAsyncExceptions# @ (Maybe TextEncoding) io_sbli5 ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sbli7 [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Maybe TextEncoding #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sbli7
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Maybe TextEncoding)
                         GHC.IO.Handle.hGetEncoding3
                         wild_ibk5j
                         (GHC.IO.Handle.hGetEncoding2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Maybe TextEncoding)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld,
                                            (Handle__, Maybe TextEncoding) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Maybe TextEncoding) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sbli7 ipv_ibk6j;
            0# ->
              maskAsyncExceptions# @ (Maybe TextEncoding) io_sbli7 ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 6, joins: 0/0}
hGetEncoding :: Handle -> IO (Maybe TextEncoding)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hGetEncoding1
               `cast` (<Handle>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Maybe TextEncoding>_R)
                       :: (Handle
                           -> State# RealWorld
                           -> (# State# RealWorld, Maybe TextEncoding #) :: *)
                          ~R# (Handle -> IO (Maybe TextEncoding) :: *))}]
hGetEncoding
  = GHC.IO.Handle.hGetEncoding1
    `cast` (<Handle>_R
            ->_R Sym (GHC.Types.N:IO[0] <Maybe TextEncoding>_R)
            :: (Handle
                -> State# RealWorld
                -> (# State# RealWorld, Maybe TextEncoding #) :: *)
               ~R# (Handle -> IO (Maybe TextEncoding) :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl15_rbnWX :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl15_rbnWX = "hSetEncoding"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl16_rbnWY :: [Char]
[GblId]
lvl16_rbnWY = unpackCString# lvl15_rbnWX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl17_rbnWZ :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl17_rbnWZ = "last_decode"#

-- RHS size: {terms: 4, types: 7, coercions: 0, joins: 0/0}
lvl18_rbnX0 :: forall ds. (ds, Buffer GHC.Word.Word8)
[GblId, Str=x]
lvl18_rbnX0
  = \ (@ ds_abk06) ->
      errorWithoutStackTrace
        @ 'LiftedRep
        @ (ds_abk06, Buffer GHC.Word.Word8)
        (unpackCString# lvl17_rbnWZ)

-- RHS size: {terms: 370, types: 736, coercions: 28, joins: 3/4}
GHC.IO.Handle.hSetEncoding1
  :: Handle
     -> TextEncoding -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
GHC.IO.Handle.hSetEncoding1
  = \ (hdl_abjCG :: Handle)
      (encoding_abjCH :: TextEncoding)
      (eta_B1 :: State# RealWorld) ->
      let {
        lvl48_sblk1 :: Maybe TextEncoding
        [LclId, Unf=OtherCon []]
        lvl48_sblk1 = GHC.Base.Just @ TextEncoding encoding_abjCH } in
      GHC.IO.Handle.Internals.withAllHandles__1
        lvl16_rbnWY
        hdl_abjCG
        ((\ (h__abjCI :: Handle__) (eta1_X5 :: State# RealWorld) ->
            case h__abjCI of
            { Handle__ @ dev_abjZM @ enc_state_abjZN @ dec_state_abjZO
                       $dIODevice_abjZP $dBufferedIO_abjZQ $dTypeable_abjZR ds_dbkoz
                       ds1_dbkoA dt_dbkvQ ds2_dbkoC dt1_dbkvR dt2_dbkvS dt3_dbkvT
                       ds3_dbkoG ds4_dbkoH ds5_dbkoI ds6_dbkoJ ds7_dbkoK ds8_dbkoL ->
            case readMutVar#
                   @ RealWorld @ (Buffer CharBufElem) dt2_dbkvS eta1_X5
            of
            { (# ipv_ibkJv, ipv1_ibkJw #) ->
            case ipv1_ibkJw of
            { Buffer dt4_ibkJA dt5_ibkJB ds10_ibkJC dt6_ibkJD dt7_ibkJE
                     dt8_ibkJF ->
            join {
              $w$j_sbmZT [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U)>]
                :: State# RealWorld -> (# State# RealWorld, Handle__ #)
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $w$j_sbmZT (w_sbmZR [OS=OneShot] :: State# RealWorld)
                = join {
                    $w$j1_sbmZQ [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U)>]
                      :: State# RealWorld -> (# State# RealWorld, Handle__ #)
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                    $w$j1_sbmZQ (w1_sbmZO [OS=OneShot] :: State# RealWorld)
                      = case encoding_abjCH of
                        { TextEncoding @ dstate_ibkNi @ estate_ibkNj ds12_ibkNm ds13_ibkNn
                                       ds14_ibkNo ->
                        join {
                          $j_sbli3 [Dmd=<L,1*C1(C1(U))>]
                            :: State# RealWorld
                               -> Maybe (TextDecoder dstate_ibkNi)
                               -> (# State# RealWorld, Handle__ #)
                          [LclId[JoinId(2)], Arity=2, Str=<S,U><L,U>, Unf=OtherCon []]
                          $j_sbli3 (ipv2_ibkNk [OS=OneShot] :: State# RealWorld)
                                   (ipv3_ibkNl [OS=OneShot] :: Maybe (TextDecoder dstate_ibkNi))
                            = case ds1_dbkoA of wild3_ibkNq {
                                __DEFAULT ->
                                  case readMutVar#
                                         @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvQ ipv2_ibkNk
                                  of
                                  { (# ipv4_i7IAy, ipv5_i7IAz #) ->
                                  case newMutVar#
                                         @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                         @ RealWorld
                                         (lvl18_rbnX0 @ dstate_ibkNi)
                                         ipv4_i7IAy
                                  of
                                  { (# ipv6_ia4ZV, ipv7_ia4ZW #) ->
                                  (# ipv6_ia4ZV,
                                     GHC.IO.Handle.Types.Handle__
                                       @ dev_abjZM
                                       @ estate_ibkNj
                                       @ dstate_ibkNi
                                       $dIODevice_abjZP
                                       $dBufferedIO_abjZQ
                                       $dTypeable_abjZR
                                       ds_dbkoz
                                       wild3_ibkNq
                                       dt_dbkvQ
                                       ds2_dbkoC
                                       ipv7_ia4ZW
                                       dt2_dbkvS
                                       dt3_dbkvT
                                       (GHC.Base.Nothing @ (TextEncoder estate_ibkNj))
                                       ipv3_ibkNl
                                       lvl48_sblk1
                                       ds6_dbkoJ
                                       ds7_dbkoK
                                       ds8_dbkoL #)
                                  }
                                  };
                                WriteHandle ->
                                  case (ds14_ibkNo
                                        `cast` (GHC.Types.N:IO[0] <TextEncoder estate_ibkNj>_R
                                                :: (IO (TextEncoder estate_ibkNj) :: *)
                                                   ~R# (State# RealWorld
                                                        -> (# State# RealWorld,
                                                              TextEncoder estate_ibkNj #) :: *)))
                                         ipv2_ibkNk
                                  of
                                  { (# ipv4_ibkNv, ipv5_ibkNw #) ->
                                  case readMutVar#
                                         @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvQ ipv4_ibkNv
                                  of
                                  { (# ipv6_i7IAy, ipv7_i7IAz #) ->
                                  case newMutVar#
                                         @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                         @ RealWorld
                                         (lvl18_rbnX0 @ dstate_ibkNi)
                                         ipv6_i7IAy
                                  of
                                  { (# ipv8_ia4ZV, ipv9_ia4ZW #) ->
                                  (# ipv8_ia4ZV,
                                     GHC.IO.Handle.Types.Handle__
                                       @ dev_abjZM
                                       @ estate_ibkNj
                                       @ dstate_ibkNi
                                       $dIODevice_abjZP
                                       $dBufferedIO_abjZQ
                                       $dTypeable_abjZR
                                       ds_dbkoz
                                       GHC.IO.Handle.Types.WriteHandle
                                       dt_dbkvQ
                                       ds2_dbkoC
                                       ipv9_ia4ZW
                                       dt2_dbkvS
                                       dt3_dbkvT
                                       (GHC.Base.Just @ (TextEncoder estate_ibkNj) ipv5_ibkNw)
                                       ipv3_ibkNl
                                       lvl48_sblk1
                                       ds6_dbkoJ
                                       ds7_dbkoK
                                       ds8_dbkoL #)
                                  }
                                  }
                                  };
                                AppendHandle ->
                                  case (ds14_ibkNo
                                        `cast` (GHC.Types.N:IO[0] <TextEncoder estate_ibkNj>_R
                                                :: (IO (TextEncoder estate_ibkNj) :: *)
                                                   ~R# (State# RealWorld
                                                        -> (# State# RealWorld,
                                                              TextEncoder estate_ibkNj #) :: *)))
                                         ipv2_ibkNk
                                  of
                                  { (# ipv4_ibkNC, ipv5_ibkND #) ->
                                  case readMutVar#
                                         @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvQ ipv4_ibkNC
                                  of
                                  { (# ipv6_i7IAy, ipv7_i7IAz #) ->
                                  case newMutVar#
                                         @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                         @ RealWorld
                                         (lvl18_rbnX0 @ dstate_ibkNi)
                                         ipv6_i7IAy
                                  of
                                  { (# ipv8_ia4ZV, ipv9_ia4ZW #) ->
                                  (# ipv8_ia4ZV,
                                     GHC.IO.Handle.Types.Handle__
                                       @ dev_abjZM
                                       @ estate_ibkNj
                                       @ dstate_ibkNi
                                       $dIODevice_abjZP
                                       $dBufferedIO_abjZQ
                                       $dTypeable_abjZR
                                       ds_dbkoz
                                       GHC.IO.Handle.Types.AppendHandle
                                       dt_dbkvQ
                                       ds2_dbkoC
                                       ipv9_ia4ZW
                                       dt2_dbkvS
                                       dt3_dbkvT
                                       (GHC.Base.Just @ (TextEncoder estate_ibkNj) ipv5_ibkND)
                                       ipv3_ibkNl
                                       lvl48_sblk1
                                       ds6_dbkoJ
                                       ds7_dbkoK
                                       ds8_dbkoL #)
                                  }
                                  }
                                  };
                                ReadWriteHandle ->
                                  case (ds14_ibkNo
                                        `cast` (GHC.Types.N:IO[0] <TextEncoder estate_ibkNj>_R
                                                :: (IO (TextEncoder estate_ibkNj) :: *)
                                                   ~R# (State# RealWorld
                                                        -> (# State# RealWorld,
                                                              TextEncoder estate_ibkNj #) :: *)))
                                         ipv2_ibkNk
                                  of
                                  { (# ipv4_ibkNJ, ipv5_ibkNK #) ->
                                  case readMutVar#
                                         @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvQ ipv4_ibkNJ
                                  of
                                  { (# ipv6_i7IAy, ipv7_i7IAz #) ->
                                  case newMutVar#
                                         @ (dstate_ibkNi, Buffer GHC.Word.Word8)
                                         @ RealWorld
                                         (lvl18_rbnX0 @ dstate_ibkNi)
                                         ipv6_i7IAy
                                  of
                                  { (# ipv8_ia4ZV, ipv9_ia4ZW #) ->
                                  (# ipv8_ia4ZV,
                                     GHC.IO.Handle.Types.Handle__
                                       @ dev_abjZM
                                       @ estate_ibkNj
                                       @ dstate_ibkNi
                                       $dIODevice_abjZP
                                       $dBufferedIO_abjZQ
                                       $dTypeable_abjZR
                                       ds_dbkoz
                                       GHC.IO.Handle.Types.ReadWriteHandle
                                       dt_dbkvQ
                                       ds2_dbkoC
                                       ipv9_ia4ZW
                                       dt2_dbkvS
                                       dt3_dbkvT
                                       (GHC.Base.Just @ (TextEncoder estate_ibkNj) ipv5_ibkNK)
                                       ipv3_ibkNl
                                       lvl48_sblk1
                                       ds6_dbkoJ
                                       ds7_dbkoK
                                       ds8_dbkoL #)
                                  }
                                  }
                                  }
                              } } in
                        case ds1_dbkoA of {
                          __DEFAULT ->
                            jump $j_sbli3
                              w1_sbmZO (GHC.Base.Nothing @ (TextDecoder dstate_ibkNi));
                          ReadHandle ->
                            case (ds13_ibkNn
                                  `cast` (GHC.Types.N:IO[0] <TextDecoder dstate_ibkNi>_R
                                          :: (IO (TextDecoder dstate_ibkNi) :: *)
                                             ~R# (State# RealWorld
                                                  -> (# State# RealWorld,
                                                        TextDecoder dstate_ibkNi #) :: *)))
                                   w1_sbmZO
                            of
                            { (# ipv2_ibkNR, ipv3_ibkNS #) ->
                            jump $j_sbli3
                              ipv2_ibkNR (GHC.Base.Just @ (TextDecoder dstate_ibkNi) ipv3_ibkNS)
                            };
                          ReadWriteHandle ->
                            case (ds13_ibkNn
                                  `cast` (GHC.Types.N:IO[0] <TextDecoder dstate_ibkNi>_R
                                          :: (IO (TextDecoder dstate_ibkNi) :: *)
                                             ~R# (State# RealWorld
                                                  -> (# State# RealWorld,
                                                        TextDecoder dstate_ibkNi #) :: *)))
                                   w1_sbmZO
                            of
                            { (# ipv2_ibkNY, ipv3_ibkNZ #) ->
                            jump $j_sbli3
                              ipv2_ibkNY (GHC.Base.Just @ (TextDecoder dstate_ibkNi) ipv3_ibkNZ)
                            }
                        }
                        } } in
                  case ds4_dbkoH of {
                    Nothing ->
                      case ds3_dbkoG of {
                        Nothing -> jump $w$j1_sbmZQ w_sbmZR;
                        Just d_ibkMj ->
                          case d_ibkMj of
                          { BufferCodec ds12_ibkMn ds11_ibkMo ds13_ibkMp ds14_ibkMq
                                        ds15_ibkMr ->
                          case (ds13_ibkMp
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 w_sbmZR
                          of
                          { (# ipv2_X7Jlr, ipv3_X7Jlt #) ->
                          jump $w$j1_sbmZQ ipv2_X7Jlr
                          }
                          }
                      };
                    Just d_ibkMu ->
                      case d_ibkMu of
                      { BufferCodec ds12_ibkMy ds11_ibkMz ds13_ibkMA ds14_ibkMB
                                    ds15_ibkMC ->
                      case (ds13_ibkMA
                            `cast` (GHC.Types.N:IO[0] <()>_R
                                    :: (IO () :: *)
                                       ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                             w_sbmZR
                      of
                      { (# ipv2_ibkMG, ipv3_ibkMH #) ->
                      case ds3_dbkoG of {
                        Nothing -> jump $w$j1_sbmZQ ipv2_ibkMG;
                        Just d1_ibkMN ->
                          case d1_ibkMN of
                          { BufferCodec ds17_ibkMR ds18_ibkMS ds19_ibkMT ds20_ibkMU
                                        ds21_ibkMV ->
                          case (ds19_ibkMT
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 ipv2_ibkMG
                          of
                          { (# ipv4_X7Jlr, ipv5_X7Jlt #) ->
                          jump $w$j1_sbmZQ ipv4_X7Jlr
                          }
                          }
                      }
                      }
                      }
                  } } in
            case ds10_ibkJC of {
              ReadBuffer ->
                case readMutVar#
                       @ RealWorld @ (Buffer CharBufElem) dt2_dbkvS ipv_ibkJv
                of
                { (# ipv2_ibkKg, ipv3_ibkKh #) ->
                case ipv3_ibkKh of
                { Buffer dt10_ibkKl dt11_ibkKm ds11_ibkKn dt12_ibkKo dt13_ibkKp
                         dt14_ibkKq ->
                case ds11_ibkKn of {
                  ReadBuffer ->
                    case ==# dt13_ibkKp dt14_ibkKq of {
                      __DEFAULT ->
                        case readMutVar#
                               @ RealWorld
                               @ (dec_state_abjZO, Buffer GHC.Word.Word8)
                               dt1_dbkvR
                               ipv2_ibkKg
                        of
                        { (# ipv4_ibkKy, ipv5_ibkKz #) ->
                        case ipv5_ibkKz of { (codec_state_ibkKD, bbuf0_ibkKE) ->
                        case readMutVar#
                               @ RealWorld @ (Buffer CharBufElem) dt2_dbkvS ipv4_ibkKy
                        of
                        { (# ipv6_ibkKI, ipv7_ibkKJ #) ->
                        case writeMutVar#
                               @ RealWorld
                               @ (Buffer CharBufElem)
                               dt2_dbkvS
                               (case ipv7_ibkKJ of
                                { Buffer dt9_ibkKN dt15_ibkKO ds15_ibkKP dt16_ibkKQ dt17_ibkKR
                                         dt18_ibkKS ->
                                GHC.IO.Buffer.Buffer
                                  @ CharBufElem dt9_ibkKN dt15_ibkKO ds15_ibkKP dt16_ibkKQ 0# 0#
                                })
                               ipv6_ibkKI
                        of s2#_ibkKU
                        { __DEFAULT ->
                        case ipv7_ibkKJ of
                        { Buffer dt9_ibkKX dt15_ibkKY ds15_ibkKZ dt16_ibkL0 dt17_ibkL1
                                 dt18_ibkL2 ->
                        case dt17_ibkL1 of wild7_ibkL4 {
                          __DEFAULT ->
                            case ds4_dbkoH of {
                              Nothing ->
                                case writeMutVar#
                                       @ RealWorld
                                       @ (Buffer GHC.Word.Word8)
                                       dt_dbkvQ
                                       (case bbuf0_ibkKE of
                                        { Buffer dt19_ibkLa dt20_ibkLb ds16_ibkLc dt21_ibkLd
                                                 dt22_ibkLe dt23_ibkLf ->
                                        GHC.IO.Buffer.Buffer
                                          @ GHC.Word.Word8
                                          dt19_ibkLa
                                          dt20_ibkLb
                                          ds16_ibkLc
                                          dt21_ibkLd
                                          (+# dt22_ibkLe wild7_ibkL4)
                                          dt23_ibkLf
                                        })
                                       s2#_ibkKU
                                of s2#1_ibkLh
                                { __DEFAULT ->
                                jump $w$j_sbmZT s2#1_ibkLh
                                };
                              Just decoder_ibkLj ->
                                case decoder_ibkLj of
                                { BufferCodec ds16_ibkLn ds17_ibkLo ds18_ibkLp ds19_ibkLq
                                              ds20_ibkLr ->
                                case ((ds20_ibkLr codec_state_ibkKD)
                                      `cast` (GHC.Types.N:IO[0] <()>_R
                                              :: (IO () :: *)
                                                 ~R# (State# RealWorld
                                                      -> (# State# RealWorld, () #) :: *)))
                                       s2#_ibkKU
                                of
                                { (# ipv8_ibkLv, ipv9_ibkLw #) ->
                                case GHC.IO.Handle.Internals.$wstreamEncode
                                       @ GHC.Word.Word8
                                       @ CharBufElem
                                       @ dec_state_abjZO
                                       ds16_ibkLn
                                       ds17_ibkLo
                                       bbuf0_ibkKE
                                       (GHC.IO.Buffer.Buffer
                                          @ CharBufElem
                                          dt9_ibkKX
                                          dt15_ibkKY
                                          ds15_ibkKZ
                                          wild7_ibkL4
                                          0#
                                          0#)
                                       ipv8_ibkLv
                                of
                                { (# ipv10_ibkLA, ipv11_ibkLB #) ->
                                case ipv11_ibkLB of { (bbuf1_ibkLF, cbuf1_ibkLG) ->
                                case writeMutVar#
                                       @ RealWorld
                                       @ (Buffer GHC.Word.Word8)
                                       dt_dbkvQ
                                       bbuf1_ibkLF
                                       ipv10_ibkLA
                                of s2#1_ibkLI
                                { __DEFAULT ->
                                jump $w$j_sbmZT s2#1_ibkLI
                                }
                                }
                                }
                                }
                                }
                            };
                          0# ->
                            case writeMutVar#
                                   @ RealWorld
                                   @ (Buffer GHC.Word.Word8)
                                   dt_dbkvQ
                                   bbuf0_ibkKE
                                   s2#_ibkKU
                            of s2#1_ibkLJ
                            { __DEFAULT ->
                            jump $w$j_sbmZT s2#1_ibkLJ
                            }
                        }
                        }
                        }
                        }
                        }
                        };
                      1# -> jump $w$j_sbmZT ipv2_ibkKg
                    };
                  WriteBuffer -> jump $w$j_sbmZT ipv2_ibkKg
                }
                }
                };
              WriteBuffer ->
                case ==# dt7_ibkJE dt8_ibkJF of {
                  __DEFAULT ->
                    case GHC.IO.Handle.Internals.flushCharBuffer2 of wild4_00 { };
                  1# -> jump $w$j_sbmZT ipv_ibkJv
                }
            }
            }
            }
            })
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Handle__>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, Handle__ #) :: *)
                    ~R# (Handle__ -> IO Handle__ :: *)))
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hSetEncoding :: Handle -> TextEncoding -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSetEncoding1
               `cast` (<Handle>_R
                       ->_R <TextEncoding>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> TextEncoding
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> TextEncoding -> IO () :: *))}]
hSetEncoding
  = GHC.IO.Handle.hSetEncoding1
    `cast` (<Handle>_R
            ->_R <TextEncoding>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> TextEncoding
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> TextEncoding -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetBuffering3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.hSetBuffering3 = "hSetBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetBuffering2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hSetBuffering2
  = unpackCString# GHC.IO.Handle.hSetBuffering3

-- RHS size: {terms: 243, types: 257, coercions: 11, joins: 3/3}
GHC.IO.Handle.hSetBuffering1
  :: Handle
     -> BufferMode -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S,1*U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 220 0] 690 0}]
GHC.IO.Handle.hSetBuffering1
  = \ (handle_abjCo :: Handle)
      (mode_abjCp :: BufferMode)
      (eta_B1 :: State# RealWorld) ->
      GHC.IO.Handle.Internals.withAllHandles__1
        GHC.IO.Handle.hSetBuffering2
        handle_abjCo
        ((\ (handle__abjCq :: Handle__) (eta1_X4 :: State# RealWorld) ->
            case handle__abjCq of wild_X1U
            { Handle__ @ dev_abk0z @ enc_state_abk0A @ dec_state_abk0B
                       $dIODevice_abk0C $dBufferedIO_abk0D $dTypeable_abk0E ds_dbkpS
                       ds1_dbkpT dt_dbkvU ds2_dbkpV dt1_dbkvV dt2_dbkvW dt3_dbkvX
                       ds3_dbkpZ ds4_dbkq0 ds5_dbkq1 ds6_dbkq2 ds7_dbkq3 ds8_dbkq4 ->
            case ds1_dbkpT of wild1_XZ {
              __DEFAULT ->
                join {
                  $j_sblts [Dmd=<L,1*U>] :: (# State# RealWorld, Handle__ #)
                  [LclId[JoinId(0)]]
                  $j_sblts
                    = join {
                        $w$j_sbmZZ [InlPrag=NOUSERINLINE[0], Dmd=<C(S),1*C1(U)>]
                          :: State# RealWorld -> (# State# RealWorld, Handle__ #)
                        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
                        $w$j_sbmZZ (w_sbmZX [OS=OneShot] :: State# RealWorld)
                          = case ((isTerminal @ dev_abk0z $dIODevice_abk0C ds_dbkpS)
                                  `cast` (GHC.Types.N:IO[0] <Bool>_R
                                          :: (IO Bool :: *)
                                             ~R# (State# RealWorld
                                                  -> (# State# RealWorld, Bool #) :: *)))
                                   w_sbmZX
                            of
                            { (# ipv_i7IAy, ipv1_i7IAz #) ->
                            case ipv1_i7IAz of {
                              False ->
                                case writeMutVar#
                                       @ RealWorld
                                       @ (BufferList CharBufElem)
                                       dt3_dbkvX
                                       (GHC.IO.Handle.Types.BufferListNil @ CharBufElem)
                                       ipv_i7IAy
                                of s2#_i7IBe
                                { __DEFAULT ->
                                (# s2#_i7IBe,
                                   GHC.IO.Handle.Types.Handle__
                                     @ dev_abk0z
                                     @ enc_state_abk0A
                                     @ dec_state_abk0B
                                     $dIODevice_abk0C
                                     $dBufferedIO_abk0D
                                     $dTypeable_abk0E
                                     ds_dbkpS
                                     wild1_XZ
                                     dt_dbkvU
                                     mode_abjCp
                                     dt1_dbkvV
                                     dt2_dbkvW
                                     dt3_dbkvX
                                     ds3_dbkpZ
                                     ds4_dbkq0
                                     ds5_dbkq1
                                     ds6_dbkq2
                                     ds7_dbkq3
                                     ds8_dbkq4 #)
                                };
                              True ->
                                join {
                                  $j1_sbltl [Dmd=<L,1*U>] :: (# State# RealWorld, Handle__ #)
                                  [LclId[JoinId(0)]]
                                  $j1_sbltl
                                    = case mode_abjCp of wild3_X12 {
                                        __DEFAULT ->
                                          case ((setRaw
                                                   @ dev_abk0z
                                                   $dIODevice_abk0C
                                                   ds_dbkpS
                                                   GHC.Types.False)
                                                `cast` (GHC.Types.N:IO[0] <()>_R
                                                        :: (IO () :: *)
                                                           ~R# (State# RealWorld
                                                                -> (# State# RealWorld,
                                                                      () #) :: *)))
                                                 ipv_i7IAy
                                          of
                                          { (# ipv2_X7Jlv, ipv3_X7Jlx #) ->
                                          case writeMutVar#
                                                 @ RealWorld
                                                 @ (BufferList CharBufElem)
                                                 dt3_dbkvX
                                                 (GHC.IO.Handle.Types.BufferListNil @ CharBufElem)
                                                 ipv2_X7Jlv
                                          of s2#_i7IBe
                                          { __DEFAULT ->
                                          (# s2#_i7IBe,
                                             GHC.IO.Handle.Types.Handle__
                                               @ dev_abk0z
                                               @ enc_state_abk0A
                                               @ dec_state_abk0B
                                               $dIODevice_abk0C
                                               $dBufferedIO_abk0D
                                               $dTypeable_abk0E
                                               ds_dbkpS
                                               wild1_XZ
                                               dt_dbkvU
                                               wild3_X12
                                               dt1_dbkvV
                                               dt2_dbkvW
                                               dt3_dbkvX
                                               ds3_dbkpZ
                                               ds4_dbkq0
                                               ds5_dbkq1
                                               ds6_dbkq2
                                               ds7_dbkq3
                                               ds8_dbkq4 #)
                                          }
                                          };
                                        NoBuffering ->
                                          case ((setRaw
                                                   @ dev_abk0z
                                                   $dIODevice_abk0C
                                                   ds_dbkpS
                                                   GHC.Types.True)
                                                `cast` (GHC.Types.N:IO[0] <()>_R
                                                        :: (IO () :: *)
                                                           ~R# (State# RealWorld
                                                                -> (# State# RealWorld,
                                                                      () #) :: *)))
                                                 ipv_i7IAy
                                          of
                                          { (# ipv2_X7Jlv, ipv3_X7Jlx #) ->
                                          case writeMutVar#
                                                 @ RealWorld
                                                 @ (BufferList CharBufElem)
                                                 dt3_dbkvX
                                                 (GHC.IO.Handle.Types.BufferListNil @ CharBufElem)
                                                 ipv2_X7Jlv
                                          of s2#_i7IBe
                                          { __DEFAULT ->
                                          (# s2#_i7IBe,
                                             GHC.IO.Handle.Types.Handle__
                                               @ dev_abk0z
                                               @ enc_state_abk0A
                                               @ dec_state_abk0B
                                               $dIODevice_abk0C
                                               $dBufferedIO_abk0D
                                               $dTypeable_abk0E
                                               ds_dbkpS
                                               wild1_XZ
                                               dt_dbkvU
                                               GHC.IO.Handle.Types.NoBuffering
                                               dt1_dbkvV
                                               dt2_dbkvW
                                               dt3_dbkvX
                                               ds3_dbkpZ
                                               ds4_dbkq0
                                               ds5_dbkq1
                                               ds6_dbkq2
                                               ds7_dbkq3
                                               ds8_dbkq4 #)
                                          }
                                          }
                                      } } in
                                case wild1_XZ of wild3_ia4vA {
                                  __DEFAULT ->
                                    case writeMutVar#
                                           @ RealWorld
                                           @ (BufferList CharBufElem)
                                           dt3_dbkvX
                                           (GHC.IO.Handle.Types.BufferListNil @ CharBufElem)
                                           ipv_i7IAy
                                    of s2#_i7IBe
                                    { __DEFAULT ->
                                    (# s2#_i7IBe,
                                       GHC.IO.Handle.Types.Handle__
                                         @ dev_abk0z
                                         @ enc_state_abk0A
                                         @ dec_state_abk0B
                                         $dIODevice_abk0C
                                         $dBufferedIO_abk0D
                                         $dTypeable_abk0E
                                         ds_dbkpS
                                         wild3_ia4vA
                                         dt_dbkvU
                                         mode_abjCp
                                         dt1_dbkvV
                                         dt2_dbkvW
                                         dt3_dbkvX
                                         ds3_dbkpZ
                                         ds4_dbkq0
                                         ds5_dbkq1
                                         ds6_dbkq2
                                         ds7_dbkq3
                                         ds8_dbkq4 #)
                                    };
                                  ReadHandle -> jump $j1_sbltl;
                                  ReadWriteHandle -> jump $j1_sbltl
                                }
                            }
                            } } in
                      case mode_abjCp of {
                        __DEFAULT -> jump $w$j_sbmZZ eta1_X4;
                        BlockBuffering ds9_dbkp4 ->
                          case ds9_dbkp4 of {
                            Nothing -> jump $w$j_sbmZZ eta1_X4;
                            Just n_abjCE ->
                              case n_abjCE of { I# x_at1e ->
                              case <=# x_at1e 0# of {
                                __DEFAULT -> jump $w$j_sbmZZ eta1_X4;
                                1# ->
                                  case GHC.IO.Handle.Internals.$wioe_bufsiz @ () x_at1e eta1_X4
                                  of wild5_00 {
                                  }
                              }
                              }
                          }
                      } } in
                case mode_abjCp of {
                  NoBuffering ->
                    case ds2_dbkpV of {
                      __DEFAULT -> jump $j_sblts;
                      NoBuffering -> (# eta1_X4, wild_X1U #)
                    };
                  LineBuffering ->
                    case ds2_dbkpV of {
                      __DEFAULT -> jump $j_sblts;
                      LineBuffering -> (# eta1_X4, wild_X1U #)
                    };
                  BlockBuffering a1_ibkSJ ->
                    case ds2_dbkpV of {
                      __DEFAULT -> jump $j_sblts;
                      BlockBuffering b1_ibkSN ->
                        case a1_ibkSJ of {
                          Nothing ->
                            case b1_ibkSN of {
                              Nothing -> (# eta1_X4, wild_X1U #);
                              Just ipv_ibltc -> jump $j_sblts
                            };
                          Just a2_ibkSW ->
                            case b1_ibkSN of {
                              Nothing -> jump $j_sblts;
                              Just b2_ibkT1 ->
                                case a2_ibkSW of { I# x_a22G ->
                                case b2_ibkT1 of { I# y_a22K ->
                                case ==# x_a22G y_a22K of {
                                  __DEFAULT -> jump $j_sblts;
                                  1# -> (# eta1_X4, wild_X1U #)
                                }
                                }
                                }
                            }
                        }
                    }
                };
              ClosedHandle ->
                GHC.IO.Handle.Internals.ioe_closedHandle1 @ Handle__ eta1_X4
            }
            })
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Handle__>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, Handle__ #) :: *)
                    ~R# (Handle__ -> IO Handle__ :: *)))
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hSetBuffering :: Handle -> BufferMode -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSetBuffering1
               `cast` (<Handle>_R
                       ->_R <BufferMode>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> BufferMode
                           -> State# RealWorld
                           -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> BufferMode -> IO () :: *))}]
hSetBuffering
  = GHC.IO.Handle.hSetBuffering1
    `cast` (<Handle>_R
            ->_R <BufferMode>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> BufferMode
                -> State# RealWorld
                -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> BufferMode -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsEOF4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.hIsEOF4 = "hIsEOF"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsEOF3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hIsEOF3 = unpackCString# GHC.IO.Handle.hIsEOF4

-- RHS size: {terms: 68, types: 163, coercions: 5, joins: 0/0}
GHC.IO.Handle.hIsEOF2
  :: Handle__ -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 178 120}]
GHC.IO.Handle.hIsEOF2
  = \ (ds_dbkqc :: Handle__) (eta_B1 :: State# RealWorld) ->
      case ds_dbkqc of
      { Handle__ @ dev_abk1M @ enc_state_abk1N @ dec_state_abk1O
                 $dIODevice_abk1P $dBufferedIO_abk1Q $dTypeable_abk1R ds1_dbkqJ
                 ds2_dbkqK dt_dbkvY ds3_dbkqM dt1_dbkvZ dt2_dbkw0 dt3_dbkw1
                 ds4_dbkqQ ds5_dbkqR ds6_dbkqS ds7_dbkqT ds8_dbkqU ds9_dbkqV ->
      case readMutVar#
             @ RealWorld @ (Buffer CharBufElem) dt2_dbkw0 eta_B1
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of
      { Buffer dt4_ia4wr dt5_ia4ws ds11_ia4wz dt6_ia4wA dt7_ia4wB
               dt8_ia4wC ->
      case ==# dt7_ia4wB dt8_ia4wC of {
        __DEFAULT -> (# ipv_i7IAy, GHC.Types.False #);
        1# ->
          case readMutVar#
                 @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkvY ipv_i7IAy
          of
          { (# ipv2_X7IDb, ipv3_X7IDd #) ->
          case ipv3_X7IDd of wild2_Xa4E9
          { Buffer dt9_Xa4Eo dt10_Xa4Eq ds13_Xa4Ey dt11_Xa4EA dt12_Xa4EC
                   dt13_Xa4EE ->
          case ==# dt12_Xa4EC dt13_Xa4EE of {
            __DEFAULT -> (# ipv2_X7IDb, GHC.Types.False #);
            1# ->
              case ((Buffered.fillReadBuffer
                       @ dev_abk1M $dBufferedIO_abk1Q ds1_dbkqJ wild2_Xa4E9)
                    `cast` (GHC.Types.N:IO[0] <(Int, Buffer GHC.Word.Word8)>_R
                            :: (IO (Int, Buffer GHC.Word.Word8) :: *)
                               ~R# (State# RealWorld
                                    -> (# State# RealWorld, (Int, Buffer GHC.Word.Word8) #) :: *)))
                     ipv2_X7IDb
              of
              { (# ipv4_X7IDl, ipv5_X7IDn #) ->
              case ipv5_X7IDn of { (r_abjCl, bbuf'_abjCm) ->
              case r_abjCl of { I# x_a22G ->
              case x_a22G of {
                __DEFAULT ->
                  case writeMutVar#
                         @ RealWorld
                         @ (Buffer GHC.Word.Word8)
                         dt_dbkvY
                         bbuf'_abjCm
                         ipv4_X7IDl
                  of s2#_i7IBe
                  { __DEFAULT ->
                  (# s2#_i7IBe, GHC.Types.False #)
                  };
                0# -> (# ipv4_X7IDl, GHC.Types.True #)
              }
              }
              }
              }
          }
          }
          }
      }
      }
      }
      }

-- RHS size: {terms: 5, types: 2, coercions: 5, joins: 0/0}
GHC.IO.Handle.hIsEOF1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (handle_abjC5 [Occ=Once] :: Handle) ->
                 GHC.IO.Handle.Internals.wantReadableHandle_1
                   @ Bool
                   GHC.IO.Handle.hIsEOF3
                   handle_abjC5
                   (GHC.IO.Handle.hIsEOF2
                    `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                            :: (Handle__
                                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                               ~R# (Handle__ -> IO Bool :: *)))}]
GHC.IO.Handle.hIsEOF1
  = \ (handle_abjC5 :: Handle) ->
      GHC.IO.Handle.Internals.wantReadableHandle_1
        @ Bool
        GHC.IO.Handle.hIsEOF3
        handle_abjC5
        (GHC.IO.Handle.hIsEOF2
         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                 :: (Handle__
                     -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                    ~R# (Handle__ -> IO Bool :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hIsEOF :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hIsEOF1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hIsEOF
  = GHC.IO.Handle.hIsEOF1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 4, types: 1, coercions: 5, joins: 0/0}
GHC.IO.Handle.isEOF1
  :: State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 60}]
GHC.IO.Handle.isEOF1
  = GHC.IO.Handle.Internals.wantReadableHandle_1
      @ Bool
      GHC.IO.Handle.hIsEOF3
      stdin
      (GHC.IO.Handle.hIsEOF2
       `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
               :: (Handle__
                   -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                  ~R# (Handle__ -> IO Bool :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
isEOF :: IO Bool
[GblId,
 Arity=1,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.isEOF1
               `cast` (Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (IO Bool :: *))}]
isEOF
  = GHC.IO.Handle.isEOF1
    `cast` (Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl19_rbnX1 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl19_rbnX1 = "hSetFileSize"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl20_rbnX2 :: [Char]
[GblId]
lvl20_rbnX2 = unpackCString# lvl19_rbnX1

-- RHS size: {terms: 183, types: 376, coercions: 23, joins: 0/3}
GHC.IO.Handle.hSetFileSize1
  :: Handle
     -> Integer -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
GHC.IO.Handle.hSetFileSize1
  = \ (handle_abjC1 :: Handle)
      (size_abjC2 :: Integer)
      (eta_B1 :: State# RealWorld) ->
      let {
        act_sblhX [Dmd=<L,C(C1(U(U,U)))>]
          :: Handle__ -> State# RealWorld -> (# State# RealWorld, () #)
        [LclId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []]
        act_sblhX
          = \ (handle__abjC3 :: Handle__)
              (eta1_X2z [OS=OneShot] :: State# RealWorld) ->
              case handle__abjC3 of
              { Handle__ @ dev_abk2F @ enc_state_abk2G @ dec_state_abk2H
                         $dIODevice_abk2I $dBufferedIO_abk2J $dTypeable_abk2K ds_dbkrN
                         ds1_dbkrO dt_dbkw2 ds2_dbkrQ dt1_dbkw3 dt2_dbkw4 dt3_dbkw5
                         ds3_dbkrU ds4_dbkrV ds5_dbkrW ds6_dbkrX ds7_dbkrY ds8_dbkrZ ->
              case ds1_dbkrO of {
                __DEFAULT ->
                  case readMutVar#
                         @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkw2 eta1_X2z
                  of
                  { (# ipv_ibkCW, ipv1_ibkCX #) ->
                  case ipv1_ibkCX of
                  { Buffer dt4_ibkD1 dt5_ibkD2 ds10_ibkD3 dt6_ibkD4 dt7_ibkD5
                           dt8_ibkD6 ->
                  case ds10_ibkD3 of {
                    ReadBuffer ->
                      case ((setSize @ dev_abk2F $dIODevice_abk2I ds_dbkrN size_abjC2)
                            `cast` (GHC.Types.N:IO[0] <()>_R
                                    :: (IO () :: *)
                                       ~R# (State# RealWorld -> (# State# RealWorld, () #) :: *)))
                             ipv_ibkCW
                      of
                      { (# ipv2_X7Jlo, ipv3_X7Jlq #) ->
                      (# ipv2_X7Jlo, GHC.Tuple.() #)
                      };
                    WriteBuffer ->
                      case readMutVar#
                             @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkw2 ipv_ibkCW
                      of
                      { (# ipv2_ibkDf, ipv3_ibkDg #) ->
                      case ipv3_ibkDg of wild4_ibkDi
                      { Buffer dt9_ibkDk dt10_ibkDl ds12_ibkDm dt11_ibkDn dt12_ibkDo
                               dt13_ibkDp ->
                      case ==# dt12_ibkDo dt13_ibkDp of {
                        __DEFAULT ->
                          case ((Buffered.flushWriteBuffer
                                   @ dev_abk2F $dBufferedIO_abk2J ds_dbkrN wild4_ibkDi)
                                `cast` (GHC.Types.N:IO[0] <Buffer GHC.Word.Word8>_R
                                        :: (IO (Buffer GHC.Word.Word8) :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld,
                                                      Buffer GHC.Word.Word8 #) :: *)))
                                 ipv2_ibkDf
                          of
                          { (# ipv4_ibkDu, ipv5_ibkDv #) ->
                          case writeMutVar#
                                 @ RealWorld
                                 @ (Buffer GHC.Word.Word8)
                                 dt_dbkw2
                                 ipv5_ibkDv
                                 ipv4_ibkDu
                          of s2#_ibkDx
                          { __DEFAULT ->
                          case ((setSize @ dev_abk2F $dIODevice_abk2I ds_dbkrN size_abjC2)
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 s2#_ibkDx
                          of
                          { (# ipv7_X7Jlo, ipv8_X7Jlq #) ->
                          (# ipv7_X7Jlo, GHC.Tuple.() #)
                          }
                          }
                          };
                        1# ->
                          case ((setSize @ dev_abk2F $dIODevice_abk2I ds_dbkrN size_abjC2)
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 ipv2_ibkDf
                          of
                          { (# ipv4_X7Jlo, ipv5_X7Jlq #) ->
                          (# ipv4_X7Jlo, GHC.Tuple.() #)
                          }
                      }
                      }
                      }
                  }
                  }
                  };
                ClosedHandle ->
                  GHC.IO.Handle.Internals.ioe_closedHandle1 @ () eta1_X2z;
                SemiClosedHandle ->
                  GHC.IO.Handle.Internals.ioe_semiclosedHandle1 @ () eta1_X2z
              }
              } } in
      case handle_abjC1 of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblhW [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, () #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhW
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, ())
                         lvl20_rbnX2
                         wild_ibk5j
                         ((\ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
                             case act_sblhX h__ibk5t s1_ibk5u of
                             { (# ipv2_ibk5x, ipv3_ibk5y #) ->
                             (# ipv2_ibk5x, (h__ibk5t, ipv3_ibk5y) #)
                             })
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, ())>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, ()) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, ()) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblhW ipv_ibk5N;
            0# -> maskAsyncExceptions# @ () io_sblhW ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblhZ [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, () #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhZ
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, ())
                         lvl20_rbnX2
                         wild_ibk5j
                         ((\ (h__ibk5Z :: Handle__) (s1_ibk60 :: State# RealWorld) ->
                             case act_sblhX h__ibk5Z s1_ibk60 of
                             { (# ipv2_ibk63, ipv3_ibk64 #) ->
                             (# ipv2_ibk63, (h__ibk5Z, ipv3_ibk64) #)
                             })
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, ())>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, ()) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, ()) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblhZ ipv_ibk6j;
            0# -> maskAsyncExceptions# @ () io_sblhZ ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hSetFileSize :: Handle -> Integer -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSetFileSize1
               `cast` (<Handle>_R
                       ->_R <Integer>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> Integer -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> Integer -> IO () :: *))}]
hSetFileSize
  = GHC.IO.Handle.hSetFileSize1
    `cast` (<Handle>_R
            ->_R <Integer>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> Integer -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> Integer -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize9 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hFileSize9 = "hFileSize"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize8 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hFileSize8 = unpackCString# GHC.IO.Handle.hFileSize9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.IO.Handle.hFileSize7 = "not a regular file"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hFileSize6 = unpackCString# GHC.IO.Handle.hFileSize7

-- RHS size: {terms: 7, types: 3, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize5 :: IOException
[GblId,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.IO.Handle.hFileSize5
  = GHC.IO.Exception.IOError
      (GHC.Base.Nothing @ Handle)
      GHC.IO.Exception.InappropriateType
      GHC.IO.Handle.hFileSize8
      GHC.IO.Handle.hFileSize6
      (GHC.Base.Nothing @ Foreign.C.Types.CInt)
      (GHC.Base.Nothing @ FilePath)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize4 :: SomeException
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=False,
         WorkFree=False, Expandable=False, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hFileSize4
  = GHC.IO.Exception.$fExceptionIOException_$ctoException
      GHC.IO.Handle.hFileSize5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize10 :: Integer
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 100 0}]
GHC.IO.Handle.hFileSize10 = -1

-- RHS size: {terms: 77, types: 151, coercions: 5, joins: 1/1}
GHC.IO.Handle.hFileSize3
  :: Handle__ -> State# RealWorld -> (# State# RealWorld, Integer #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 296 0}]
GHC.IO.Handle.hFileSize3
  = \ (handle__abjBY :: Handle__) (eta_X2C :: State# RealWorld) ->
      case handle__abjBY of
      { Handle__ @ dev_abk38 @ enc_state_abk39 @ dec_state_abk3a
                 $dIODevice_abk3b $dBufferedIO_abk3c $dTypeable_abk3d ds_dbksR
                 ds1_dbksS dt_dbkw6 ds2_dbksU dt1_dbkw7 dt2_dbkw8 dt3_dbkw9
                 ds3_dbksY ds4_dbksZ ds5_dbkt0 ds6_dbkt1 ds7_dbkt2 ds8_dbkt3 ->
      case ds1_dbksS of {
        __DEFAULT ->
          case readMutVar#
                 @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkw6 eta_X2C
          of
          { (# ipv_ibkCW, ipv1_ibkCX #) ->
          case ipv1_ibkCX of
          { Buffer dt4_ibkD1 dt5_ibkD2 ds10_ibkD3 dt6_ibkD4 dt7_ibkD5
                   dt8_ibkD6 ->
          join {
            $w$j_sbn0f [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Integer #)
            [LclId[JoinId(1)], Arity=1, Str=<S,U>m, Unf=OtherCon []]
            $w$j_sbn0f (w_sbn0d [OS=OneShot] :: State# RealWorld)
              = case ((getSize @ dev_abk38 $dIODevice_abk3b ds_dbksR)
                      `cast` (GHC.Types.N:IO[0] <Integer>_R
                              :: (IO Integer :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, Integer #) :: *)))
                       w_sbn0d
                of ds12_i7IAw
                { (# ipv2_i7IAy, ipv3_i7IAz #) ->
                case neqInteger# ipv3_i7IAz GHC.IO.Handle.hFileSize10 of {
                  __DEFAULT ->
                    raiseIO#
                      @ SomeException @ Integer GHC.IO.Handle.hFileSize4 ipv2_i7IAy;
                  1# -> ds12_i7IAw
                }
                } } in
          case ds10_ibkD3 of {
            ReadBuffer -> jump $w$j_sbn0f ipv_ibkCW;
            WriteBuffer ->
              case readMutVar#
                     @ RealWorld @ (Buffer GHC.Word.Word8) dt_dbkw6 ipv_ibkCW
              of
              { (# ipv2_ibkDf, ipv3_ibkDg #) ->
              case ipv3_ibkDg of wild4_ibkDi
              { Buffer dt9_ibkDk dt10_ibkDl ds12_ibkDm dt11_ibkDn dt12_ibkDo
                       dt13_ibkDp ->
              case ==# dt12_ibkDo dt13_ibkDp of {
                __DEFAULT ->
                  case ((Buffered.flushWriteBuffer
                           @ dev_abk38 $dBufferedIO_abk3c ds_dbksR wild4_ibkDi)
                        `cast` (GHC.Types.N:IO[0] <Buffer GHC.Word.Word8>_R
                                :: (IO (Buffer GHC.Word.Word8) :: *)
                                   ~R# (State# RealWorld
                                        -> (# State# RealWorld, Buffer GHC.Word.Word8 #) :: *)))
                         ipv2_ibkDf
                  of
                  { (# ipv4_ibkDu, ipv5_ibkDv #) ->
                  case writeMutVar#
                         @ RealWorld
                         @ (Buffer GHC.Word.Word8)
                         dt_dbkw6
                         ipv5_ibkDv
                         ipv4_ibkDu
                  of s2#_ibkDx
                  { __DEFAULT ->
                  jump $w$j_sbn0f s2#_ibkDx
                  }
                  };
                1# -> jump $w$j_sbn0f ipv2_ibkDf
              }
              }
              }
          }
          }
          };
        ClosedHandle ->
          GHC.IO.Handle.Internals.ioe_closedHandle1 @ Integer eta_X2C;
        SemiClosedHandle ->
          GHC.IO.Handle.Internals.ioe_semiclosedHandle1 @ Integer eta_X2C
      }
      }

-- RHS size: {terms: 12, types: 25, coercions: 0, joins: 0/0}
GHC.IO.Handle.hFileSize2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Integer) #)
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h__ibk5t :: Handle__)
                 (s1_ibk5u [Occ=Once] :: State# RealWorld) ->
                 case GHC.IO.Handle.hFileSize3 h__ibk5t s1_ibk5u of
                 { (# ipv_ibk5x [Occ=Once], ipv1_ibk5y [Occ=Once] #) ->
                 (# ipv_ibk5x, (h__ibk5t, ipv1_ibk5y) #)
                 }}]
GHC.IO.Handle.hFileSize2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case GHC.IO.Handle.hFileSize3 h__ibk5t s1_ibk5u of
      { (# ipv_ibk5x, ipv1_ibk5y #) ->
      (# ipv_ibk5x, (h__ibk5t, ipv1_ibk5y) #)
      }

-- RHS size: {terms: 76, types: 133, coercions: 14, joins: 0/2}
GHC.IO.Handle.hFileSize1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Integer #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hFileSize1
  = \ (handle_abjBX :: Handle) (eta_B1 :: State# RealWorld) ->
      case handle_abjBX of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblhQ [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Integer #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhQ
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Integer)
                         GHC.IO.Handle.hFileSize8
                         wild_ibk5j
                         (GHC.IO.Handle.hFileSize2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Integer)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Integer) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Integer) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblhQ ipv_ibk5N;
            0# -> maskAsyncExceptions# @ Integer io_sblhQ ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblhT [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Integer #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhT
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Integer)
                         GHC.IO.Handle.hFileSize8
                         wild_ibk5j
                         (GHC.IO.Handle.hFileSize2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Integer)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Integer) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Integer) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblhT ipv_ibk6j;
            0# -> maskAsyncExceptions# @ Integer io_sblhT ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hFileSize :: Handle -> IO Integer
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hFileSize1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                          ~R# (Handle -> IO Integer :: *))}]
hFileSize
  = GHC.IO.Handle.hFileSize1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
               ~R# (Handle -> IO Integer :: *))

-- RHS size: {terms: 2, types: 5, coercions: 8, joins: 0/0}
lvl21_rbnX3 :: Maybe (FilePath -> MVar Handle__ -> IO ())
[GblId, Str=m2, Unf=OtherCon []]
lvl21_rbnX3
  = GHC.Base.Just
      @ (FilePath -> MVar Handle__ -> IO ())
      (GHC.IO.Handle.Internals.handleFinalizer1
       `cast` (<FilePath>_R
               ->_R <MVar Handle__>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (FilePath
                   -> MVar Handle__
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (FilePath -> MVar Handle__ -> IO () :: *)))

-- RHS size: {terms: 131, types: 204, coercions: 36, joins: 0/2}
GHC.IO.Handle.hDuplicateTo1
  :: Handle
     -> Handle -> State# RealWorld -> (# State# RealWorld, () #)
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,U>, Unf=OtherCon []]
GHC.IO.Handle.hDuplicateTo1
  = \ (h1_abjGD :: Handle)
      (h2_abjGG :: Handle)
      (eta_B1 :: State# RealWorld) ->
      case h1_abjGD of wild_X26 {
        FileHandle path_abjGE dt_dbkuK ->
          case h2_abjGG of wild1_XK {
            FileHandle ds_dbkbq dt1_dbkuL ->
              GHC.IO.Handle.Internals.$wwithHandle__'
                lvl1_rbnWC
                wild1_XK
                dt1_dbkuL
                ((\ (h2__abjGI :: Handle__) (s_i7IAv :: State# RealWorld) ->
                    case GHC.IO.Handle.Internals.hClose_help1 h2__abjGI s_i7IAv of
                    { (# ipv_i7IAy, ipv1_i7IAz #) ->
                    GHC.IO.Handle.Internals.$wwithHandle'
                      @ Handle__
                      lvl1_rbnWC
                      wild_X26
                      dt_dbkuK
                      ((\ (h__ibkHz :: Handle__) (s1_ibkHA :: State# RealWorld) ->
                          case dupHandleTo_rbnWN
                                 path_abjGE
                                 wild_X26
                                 (GHC.Base.Nothing @ (MVar Handle__))
                                 h2__abjGI
                                 h__ibkHz
                                 lvl21_rbnX3
                                 s1_ibkHA
                          of
                          { (# ipv2_ibkHD, ipv3_ibkHE #) ->
                          (# ipv2_ibkHD, (h__ibkHz, ipv3_ibkHE) #)
                          })
                       `cast` (<Handle__>_R
                               ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Handle__)>_R)
                               :: (Handle__
                                   -> State# RealWorld
                                   -> (# State# RealWorld, (Handle__, Handle__) #) :: *)
                                  ~R# (Handle__ -> IO (Handle__, Handle__) :: *)))
                      ipv_i7IAy
                    })
                 `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Handle__>_R)
                         :: (Handle__
                             -> State# RealWorld -> (# State# RealWorld, Handle__ #) :: *)
                            ~R# (Handle__ -> IO Handle__ :: *)))
                eta_B1;
            DuplexHandle ipv_sbkUR ipv1_sbkUS ipv2_sbkUT ->
              ioe_dupHandlesNotCompatible_rbnWF @ () wild_X26 eta_B1
          };
        DuplexHandle path_abjGL dt_dbkuM dt1_dbkuN ->
          case h2_abjGG of wild1_XM {
            FileHandle ipv_sbkUW ipv1_sbkUX ->
              ioe_dupHandlesNotCompatible_rbnWF @ () wild_X26 eta_B1;
            DuplexHandle ds_dbkbr dt2_dbkuO dt3_dbkuP ->
              case GHC.IO.Handle.Internals.$wwithHandle__'
                     lvl1_rbnWC
                     wild1_XM
                     dt3_dbkuP
                     ((\ (w2__abjGR :: Handle__) (s_i7IAv :: State# RealWorld) ->
                         case GHC.IO.Handle.Internals.hClose_help1 w2__abjGR s_i7IAv of
                         { (# ipv_i7IAy, ipv1_i7IAz #) ->
                         GHC.IO.Handle.Internals.$wwithHandle'
                           @ Handle__
                           lvl1_rbnWC
                           wild_X26
                           dt1_dbkuN
                           ((\ (h__ibkHz :: Handle__) (s1_ibkHA :: State# RealWorld) ->
                               case dupHandleTo_rbnWN
                                      path_abjGL
                                      wild_X26
                                      (GHC.Base.Nothing @ (MVar Handle__))
                                      w2__abjGR
                                      h__ibkHz
                                      lvl21_rbnX3
                                      s1_ibkHA
                               of
                               { (# ipv2_ibkHD, ipv3_ibkHE #) ->
                               (# ipv2_ibkHD, (h__ibkHz, ipv3_ibkHE) #)
                               })
                            `cast` (<Handle__>_R
                                    ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Handle__)>_R)
                                    :: (Handle__
                                        -> State# RealWorld
                                        -> (# State# RealWorld, (Handle__, Handle__) #) :: *)
                                       ~R# (Handle__ -> IO (Handle__, Handle__) :: *)))
                           ipv_i7IAy
                         })
                      `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Handle__>_R)
                              :: (Handle__
                                  -> State# RealWorld -> (# State# RealWorld, Handle__ #) :: *)
                                 ~R# (Handle__ -> IO Handle__ :: *)))
                     eta_B1
              of
              { (# ipv_i7JiK, ipv1_i7JiL #) ->
              let {
                w1_sblhM :: MVar Handle__
                [LclId, Unf=OtherCon []]
                w1_sblhM = GHC.MVar.MVar @ Handle__ dt1_dbkuN } in
              let {
                lvl48_sbll2 :: Maybe (MVar Handle__)
                [LclId, Unf=OtherCon []]
                lvl48_sbll2 = GHC.Base.Just @ (MVar Handle__) w1_sblhM } in
              GHC.IO.Handle.Internals.$wwithHandle__'
                lvl1_rbnWC
                wild1_XM
                dt2_dbkuO
                ((\ (r2__abjGT :: Handle__) (s_X7IIC :: State# RealWorld) ->
                    case GHC.IO.Handle.Internals.hClose_help1 r2__abjGT s_X7IIC of
                    { (# ipv2_i7IAy, ipv3_i7IAz #) ->
                    GHC.IO.Handle.Internals.$wwithHandle'
                      @ Handle__
                      lvl1_rbnWC
                      wild_X26
                      dt_dbkuM
                      ((\ (h__ibkHz :: Handle__) (s1_ibkHA :: State# RealWorld) ->
                          case dupHandleTo_rbnWN
                                 path_abjGL
                                 wild_X26
                                 lvl48_sbll2
                                 r2__abjGT
                                 h__ibkHz
                                 (GHC.Base.Nothing @ HandleFinalizer)
                                 s1_ibkHA
                          of
                          { (# ipv4_ibkHD, ipv5_ibkHE #) ->
                          (# ipv4_ibkHD, (h__ibkHz, ipv5_ibkHE) #)
                          })
                       `cast` (<Handle__>_R
                               ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Handle__)>_R)
                               :: (Handle__
                                   -> State# RealWorld
                                   -> (# State# RealWorld, (Handle__, Handle__) #) :: *)
                                  ~R# (Handle__ -> IO (Handle__, Handle__) :: *)))
                      ipv2_i7IAy
                    })
                 `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Handle__>_R)
                         :: (Handle__
                             -> State# RealWorld -> (# State# RealWorld, Handle__ #) :: *)
                            ~R# (Handle__ -> IO Handle__ :: *)))
                ipv_i7JiK
              }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hDuplicateTo :: Handle -> Handle -> IO ()
[GblId,
 Arity=3,
 Str=<S,1*U><S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hDuplicateTo1
               `cast` (<Handle>_R
                       ->_R <Handle>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> Handle -> IO () :: *))}]
hDuplicateTo
  = GHC.IO.Handle.hDuplicateTo1
    `cast` (<Handle>_R
            ->_R <Handle>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> Handle -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl22_rbnX4 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl22_rbnX4 = "hDuplicate"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl23_rbnX5 :: [Char]
[GblId]
lvl23_rbnX5 = unpackCString# lvl22_rbnX4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl24_rbnX6 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl24_rbnX6
  = "Pattern match failure in do expression at GHC/IO/Handle.hs:626:3-33"#

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl25_rbnX7 :: State# RealWorld -> (# State# RealWorld, Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl25_rbnX7
  = \ (eta_B1 :: State# RealWorld) ->
      GHC.IO.failIO1 @ Handle (unpackCString# lvl24_rbnX6) eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl26_rbnX8 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl26_rbnX8
  = "Pattern match failure in do expression at GHC/IO/Handle.hs:623:3-35"#

-- RHS size: {terms: 5, types: 3, coercions: 0, joins: 0/0}
lvl27_rbnX9 :: State# RealWorld -> (# State# RealWorld, Handle #)
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
lvl27_rbnX9
  = \ (eta_B1 :: State# RealWorld) ->
      GHC.IO.failIO1 @ Handle (unpackCString# lvl26_rbnX8) eta_B1

-- RHS size: {terms: 159, types: 441, coercions: 32, joins: 0/2}
GHC.IO.Handle.hDuplicate1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Handle #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []]
GHC.IO.Handle.hDuplicate1
  = \ (h_abjFL :: Handle) (eta_B1 :: State# RealWorld) ->
      case h_abjFL of wild_X24 {
        FileHandle path_abjFM dt_dbkuY ->
          GHC.IO.Handle.Internals.$wwithHandle'
            @ Handle
            lvl23_rbnX5
            wild_X24
            dt_dbkuY
            ((\ (h__ibkHz :: Handle__) (s_ibkHA :: State# RealWorld) ->
                case h__ibkHz of wild1_X1B
                { Handle__ @ dev_abjRj @ enc_state_abjRk @ dec_state_abjRl
                           $dIODevice_abjRm $dBufferedIO_abjRn $dTypeable_abjRo ds_dbkcU
                           ds1_dbkcV dt1_dbkuQ ds2_dbkcX dt2_dbkuR dt3_dbkuS dt4_dbkuT
                           ds3_dbkd1 ds4_dbkd2 ds5_dbkd3 ds6_dbkd4 ds7_dbkd5 ds8_dbkd6 ->
                case GHC.IO.Handle.Internals.flushBuffer1 wild1_X1B s_ibkHA of
                { (# ipv_i7JiK, ipv1_i7JiL #) ->
                case ((dup @ dev_abjRj $dIODevice_abjRm ds_dbkcU)
                      `cast` (GHC.Types.N:IO[0] <dev_abjRj>_R
                              :: (IO dev_abjRj :: *)
                                 ~R# (State# RealWorld -> (# State# RealWorld, dev_abjRj #) :: *)))
                       ipv_i7JiK
                of
                { (# ipv2_i7IAy, ipv3_i7IAz #) ->
                case dupHandle__rbnWK
                       @ dev_abjRj
                       $dIODevice_abjRm
                       $dBufferedIO_abjRn
                       $dTypeable_abjRo
                       ipv3_i7IAz
                       path_abjFM
                       (GHC.Base.Nothing @ (MVar Handle__))
                       wild1_X1B
                       lvl21_rbnX3
                       ipv2_i7IAy
                of
                { (# ipv4_ibkHD, ipv5_ibkHE #) ->
                (# ipv4_ibkHD, (wild1_X1B, ipv5_ibkHE) #)
                }
                }
                }
                })
             `cast` (<Handle__>_R
                     ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Handle)>_R)
                     :: (Handle__
                         -> State# RealWorld
                         -> (# State# RealWorld, (Handle__, Handle) #) :: *)
                        ~R# (Handle__ -> IO (Handle__, Handle) :: *)))
            eta_B1;
        DuplexHandle path_abjFQ dt_dbkuZ dt1_dbkv0 ->
          case GHC.IO.Handle.Internals.$wwithHandle'
                 @ Handle
                 lvl23_rbnX5
                 wild_X24
                 dt1_dbkv0
                 ((\ (h__ibkHz :: Handle__) (s_ibkHA :: State# RealWorld) ->
                     case h__ibkHz of wild1_X1B
                     { Handle__ @ dev_abjRj @ enc_state_abjRk @ dec_state_abjRl
                                $dIODevice_abjRm $dBufferedIO_abjRn $dTypeable_abjRo ds_dbkcU
                                ds1_dbkcV dt2_dbkuQ ds2_dbkcX dt3_dbkuR dt4_dbkuS dt5_dbkuT
                                ds3_dbkd1 ds4_dbkd2 ds5_dbkd3 ds6_dbkd4 ds7_dbkd5 ds8_dbkd6 ->
                     case GHC.IO.Handle.Internals.flushBuffer1 wild1_X1B s_ibkHA of
                     { (# ipv_i7JiK, ipv1_i7JiL #) ->
                     case ((dup @ dev_abjRj $dIODevice_abjRm ds_dbkcU)
                           `cast` (GHC.Types.N:IO[0] <dev_abjRj>_R
                                   :: (IO dev_abjRj :: *)
                                      ~R# (State# RealWorld
                                           -> (# State# RealWorld, dev_abjRj #) :: *)))
                            ipv_i7JiK
                     of
                     { (# ipv2_i7IAy, ipv3_i7IAz #) ->
                     case dupHandle__rbnWK
                            @ dev_abjRj
                            $dIODevice_abjRm
                            $dBufferedIO_abjRn
                            $dTypeable_abjRo
                            ipv3_i7IAz
                            path_abjFQ
                            (GHC.Base.Nothing @ (MVar Handle__))
                            wild1_X1B
                            lvl21_rbnX3
                            ipv2_i7IAy
                     of
                     { (# ipv4_ibkHD, ipv5_ibkHE #) ->
                     (# ipv4_ibkHD, (wild1_X1B, ipv5_ibkHE) #)
                     }
                     }
                     }
                     })
                  `cast` (<Handle__>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Handle)>_R)
                          :: (Handle__
                              -> State# RealWorld
                              -> (# State# RealWorld, (Handle__, Handle) #) :: *)
                             ~R# (Handle__ -> IO (Handle__, Handle) :: *)))
                 eta_B1
          of
          { (# ipv_i7IAy, ipv1_i7IAz #) ->
          case ipv1_i7IAz of {
            FileHandle ds_dbkdz dt2_dbkv1 ->
              let {
                write_m_sblhH :: MVar Handle__
                [LclId, Unf=OtherCon []]
                write_m_sblhH = GHC.MVar.MVar @ Handle__ dt2_dbkv1 } in
              let {
                lvl48_sblle :: Maybe (MVar Handle__)
                [LclId, Unf=OtherCon []]
                lvl48_sblle = GHC.Base.Just @ (MVar Handle__) write_m_sblhH } in
              case GHC.IO.Handle.Internals.$wwithHandle'
                     @ Handle
                     lvl23_rbnX5
                     wild_X24
                     dt_dbkuZ
                     ((\ (h__XbkPJ :: Handle__) (s_XbkPL :: State# RealWorld) ->
                         case h__XbkPJ of wild2_X1B
                         { Handle__ @ dev_abjRj @ enc_state_abjRk @ dec_state_abjRl
                                    $dIODevice_abjRm $dBufferedIO_abjRn $dTypeable_abjRo ds2_dbkcU
                                    ds3_dbkcV dt3_dbkuQ ds4_dbkcX dt4_dbkuR dt5_dbkuS dt6_dbkuT
                                    ds5_dbkd1 ds6_dbkd2 ds7_dbkd3 ds8_dbkd4 ds9_dbkd5 ds10_dbkd6 ->
                         case GHC.IO.Handle.Internals.flushBuffer1 wild2_X1B s_XbkPL of
                         { (# ipv2_i7JiK, ipv3_i7JiL #) ->
                         case GHC.IO.Handle.Internals.$wwithHandle'
                                @ Handle
                                lvl7_rbnWP
                                wild_X24
                                dt2_dbkv1
                                ((\ (h_1_XbkQg :: Handle__) (s1_XbkQi :: State# RealWorld) ->
                                    case h_1_XbkQg of wild3_XR
                                    { Handle__ @ dev1_abjRI @ enc_state1_abjRJ @ dec_state1_abjRK
                                               $dIODevice1_abjRL $dBufferedIO1_abjRM
                                               $dTypeable1_abjRN ds12_dbkcc ds13_dbkcd dt7_dbkuU
                                               ds14_dbkcf dt8_dbkuV dt9_dbkuW dt10_dbkuX ds15_dbkcj
                                               ds16_dbkck ds17_dbkcl ds18_dbkcm ds19_dbkcn
                                               ds20_dbkco ->
                                    case dupHandle__rbnWK
                                           @ dev1_abjRI
                                           $dIODevice1_abjRL
                                           $dBufferedIO1_abjRM
                                           $dTypeable1_abjRN
                                           ds12_dbkcc
                                           path_abjFQ
                                           lvl48_sblle
                                           wild2_X1B
                                           (GHC.Base.Nothing @ HandleFinalizer)
                                           s1_XbkQi
                                    of
                                    { (# ipv4_ibkHD, ipv5_ibkHE #) ->
                                    (# ipv4_ibkHD, (wild3_XR, ipv5_ibkHE) #)
                                    }
                                    })
                                 `cast` (<Handle__>_R
                                         ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Handle)>_R)
                                         :: (Handle__
                                             -> State# RealWorld
                                             -> (# State# RealWorld, (Handle__, Handle) #) :: *)
                                            ~R# (Handle__ -> IO (Handle__, Handle) :: *)))
                                ipv2_i7JiK
                         of
                         { (# ipv4_ibkHD, ipv5_ibkHE #) ->
                         (# ipv4_ibkHD, (wild2_X1B, ipv5_ibkHE) #)
                         }
                         }
                         })
                      `cast` (<Handle__>_R
                              ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Handle)>_R)
                              :: (Handle__
                                  -> State# RealWorld
                                  -> (# State# RealWorld, (Handle__, Handle) #) :: *)
                                 ~R# (Handle__ -> IO (Handle__, Handle) :: *)))
                     ipv_i7IAy
              of
              { (# ipv2_X7ID7, ipv3_X7ID9 #) ->
              case ipv3_X7ID9 of {
                FileHandle ds3_dbkdk dt3_dbkv2 ->
                  (# ipv2_X7ID7,
                     GHC.IO.Handle.Types.DuplexHandle path_abjFQ dt3_dbkv2 dt2_dbkv1 #);
                DuplexHandle ipv4_sbkVc ipv5_sbkVd ipv6_sbkVe ->
                  lvl25_rbnX7 ipv2_X7ID7
              }
              };
            DuplexHandle ipv2_sbkVg ipv3_sbkVh ipv4_sbkVi ->
              lvl27_rbnX9 ipv_i7IAy
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hDuplicate :: Handle -> IO Handle
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hDuplicate1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Handle #) :: *)
                          ~R# (Handle -> IO Handle :: *))}]
hDuplicate
  = GHC.IO.Handle.hDuplicate1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Handle>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Handle #) :: *)
               ~R# (Handle -> IO Handle :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetEcho4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.hGetEcho4 = "hGetEcho"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetEcho3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hGetEcho3 = unpackCString# GHC.IO.Handle.hGetEcho4

-- RHS size: {terms: 23, types: 85, coercions: 2, joins: 0/0}
GHC.IO.Handle.hGetEcho2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Bool) #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 100 30}]
GHC.IO.Handle.hGetEcho2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_XJ
      { Handle__ @ dev_abjUu @ enc_state_abjUv @ dec_state_abjUw
                 $dIODevice_abjUx $dBufferedIO_abjUy $dTypeable_abjUz ds_dbkhN
                 ds1_dbkhO dt_dbkvj ds2_dbkhQ dt1_dbkvk dt2_dbkvl dt3_dbkvm
                 ds3_dbkhU ds4_dbkhV ds5_dbkhW ds6_dbkhX ds7_dbkhY ds8_dbkhZ ->
      case ds1_dbkhO of {
        __DEFAULT ->
          case ((getEcho @ dev_abjUu $dIODevice_abjUx ds_dbkhN)
                `cast` (GHC.Types.N:IO[0] <Bool>_R
                        :: (IO Bool :: *)
                           ~R# (State# RealWorld -> (# State# RealWorld, Bool #) :: *)))
                 s1_ibk5u
          of
          { (# ipv_ibk5x, ipv1_ibk5y #) ->
          (# ipv_ibk5x, (wild_XJ, ipv1_ibk5y) #)
          };
        ClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_closedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          }
      }
      }

-- RHS size: {terms: 88, types: 152, coercions: 14, joins: 0/2}
GHC.IO.Handle.hGetEcho1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 348 30}]
GHC.IO.Handle.hGetEcho1
  = \ (handle_abjEF :: Handle) (s_i7IAv :: State# RealWorld) ->
      case GHC.IO.Handle.hGetEcho5 handle_abjEF s_i7IAv of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of {
        False -> (# ipv_i7IAy, GHC.Types.False #);
        True ->
          case handle_abjEF of wild1_ibk5j {
            FileHandle ds_ibk5q dt_ibk5r ->
              case getMaskingState# ipv_i7IAy of
              { (# ipv2_ibk5N, ipv3_ibk5O #) ->
              let {
                io_sblhD [Dmd=<C(S),C(U(U,U))>]
                  :: State# RealWorld -> (# State# RealWorld, Bool #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                io_sblhD
                  = \ (s1_ibk5n :: State# RealWorld) ->
                      case GHC.IO.Handle.Internals.$wdo_operation
                             @ (Handle__, Bool)
                             GHC.IO.Handle.hGetEcho3
                             wild1_ibk5j
                             (GHC.IO.Handle.hGetEcho2
                              `cast` (<Handle__>_R
                                      ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                      :: (Handle__
                                          -> State# RealWorld
                                          -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                         ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                             dt_ibk5r
                             s1_ibk5n
                      of
                      { (# ipv4_ibk5C, ipv5_ibk5D #) ->
                      case ipv5_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                      case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv4_ibk5C
                      of s2#_ibk5K
                      { __DEFAULT ->
                      (# s2#_ibk5K, v_ibk5I #)
                      }
                      }
                      } } in
              case ipv3_ibk5O of {
                __DEFAULT -> io_sblhD ipv2_ibk5N;
                0# -> maskAsyncExceptions# @ Bool io_sblhD ipv2_ibk5N
              }
              };
            DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
              case getMaskingState# ipv_i7IAy of
              { (# ipv2_ibk6j, ipv3_ibk6k #) ->
              let {
                io_sblhF [Dmd=<C(S),C(U(U,U))>]
                  :: State# RealWorld -> (# State# RealWorld, Bool #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                io_sblhF
                  = \ (s1_ibk5U :: State# RealWorld) ->
                      case GHC.IO.Handle.Internals.$wdo_operation
                             @ (Handle__, Bool)
                             GHC.IO.Handle.hGetEcho3
                             wild1_ibk5j
                             (GHC.IO.Handle.hGetEcho2
                              `cast` (<Handle__>_R
                                      ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                      :: (Handle__
                                          -> State# RealWorld
                                          -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                         ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                             dt_ibk5W
                             s1_ibk5U
                      of
                      { (# ipv4_ibk68, ipv5_ibk69 #) ->
                      case ipv5_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                      case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv4_ibk68
                      of s2#_ibk6g
                      { __DEFAULT ->
                      (# s2#_ibk6g, v_ibk6e #)
                      }
                      }
                      } } in
              case ipv3_ibk6k of {
                __DEFAULT -> io_sblhF ipv2_ibk6j;
                0# -> maskAsyncExceptions# @ Bool io_sblhF ipv2_ibk6j
              }
              }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hGetEcho :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hGetEcho1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hGetEcho
  = GHC.IO.Handle.hGetEcho1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetEcho3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.hSetEcho3 = "hSetEcho"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hSetEcho2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hSetEcho2 = unpackCString# GHC.IO.Handle.hSetEcho3

-- RHS size: {terms: 135, types: 323, coercions: 18, joins: 0/2}
GHC.IO.Handle.hSetEcho1
  :: Handle -> Bool -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [289 0 0] 588 30}]
GHC.IO.Handle.hSetEcho1
  = \ (handle_abjEp :: Handle)
      (on_abjEq :: Bool)
      (s_i7IAv :: State# RealWorld) ->
      case GHC.IO.Handle.hGetEcho5 handle_abjEp s_i7IAv of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      case ipv1_i7IAz of {
        False -> (# ipv_i7IAy, GHC.Tuple.() #);
        True ->
          case handle_abjEp of wild1_ibk5j {
            FileHandle ds_ibk5q dt_ibk5r ->
              case getMaskingState# ipv_i7IAy of
              { (# ipv2_ibk5N, ipv3_ibk5O #) ->
              let {
                io_sblhz [Dmd=<C(S),C(U(U,U))>]
                  :: State# RealWorld -> (# State# RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                io_sblhz
                  = \ (s1_ibk5n :: State# RealWorld) ->
                      case GHC.IO.Handle.Internals.$wdo_operation
                             @ (Handle__, ())
                             GHC.IO.Handle.hSetEcho2
                             wild1_ibk5j
                             ((\ (h__ibk5t :: Handle__) (s2_ibk5u :: State# RealWorld) ->
                                 case h__ibk5t of wild2_XL
                                 { Handle__ @ dev_abjUS @ enc_state_abjUT @ dec_state_abjUU
                                            $dIODevice_abjUV $dBufferedIO_abjUW $dTypeable_abjUX
                                            ds3_dbkiF ds4_dbkiG dt1_dbkvn ds5_dbkiI dt2_dbkvo
                                            dt3_dbkvp dt4_dbkvq ds6_dbkiM ds7_dbkiN ds8_dbkiO
                                            ds9_dbkiP ds10_dbkiQ ds11_dbkiR ->
                                 case ds4_dbkiG of {
                                   __DEFAULT ->
                                     case ((setEcho @ dev_abjUS $dIODevice_abjUV ds3_dbkiF on_abjEq)
                                           `cast` (GHC.Types.N:IO[0] <()>_R
                                                   :: (IO () :: *)
                                                      ~R# (State# RealWorld
                                                           -> (# State# RealWorld, () #) :: *)))
                                            s2_ibk5u
                                     of
                                     { (# ipv4_ibk5x, ipv5_ibk5y #) ->
                                     (# ipv4_ibk5x, (wild2_XL, ipv5_ibk5y) #)
                                     };
                                   ClosedHandle ->
                                     case GHC.IO.Handle.Internals.ioe_closedHandle1 @ () s2_ibk5u
                                     of wild4_00 {
                                     }
                                 }
                                 })
                              `cast` (<Handle__>_R
                                      ->_R Sym (GHC.Types.N:IO[0] <(Handle__, ())>_R)
                                      :: (Handle__
                                          -> State# RealWorld
                                          -> (# State# RealWorld, (Handle__, ()) #) :: *)
                                         ~R# (Handle__ -> IO (Handle__, ()) :: *)))
                             dt_ibk5r
                             s1_ibk5n
                      of
                      { (# ipv4_ibk5C, ipv5_ibk5D #) ->
                      case ipv5_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                      case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv4_ibk5C
                      of s2#_ibk5K
                      { __DEFAULT ->
                      (# s2#_ibk5K, v_ibk5I #)
                      }
                      }
                      } } in
              case ipv3_ibk5O of {
                __DEFAULT -> io_sblhz ipv2_ibk5N;
                0# -> maskAsyncExceptions# @ () io_sblhz ipv2_ibk5N
              }
              };
            DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
              case getMaskingState# ipv_i7IAy of
              { (# ipv2_ibk6j, ipv3_ibk6k #) ->
              let {
                io_sblhB [Dmd=<C(S),C(U(U,U))>]
                  :: State# RealWorld -> (# State# RealWorld, () #)
                [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
                io_sblhB
                  = \ (s1_ibk5U :: State# RealWorld) ->
                      case GHC.IO.Handle.Internals.$wdo_operation
                             @ (Handle__, ())
                             GHC.IO.Handle.hSetEcho2
                             wild1_ibk5j
                             ((\ (h__ibk5Z :: Handle__) (s2_ibk60 :: State# RealWorld) ->
                                 case h__ibk5Z of wild2_XL
                                 { Handle__ @ dev_abjUS @ enc_state_abjUT @ dec_state_abjUU
                                            $dIODevice_abjUV $dBufferedIO_abjUW $dTypeable_abjUX
                                            ds3_dbkiF ds4_dbkiG dt2_dbkvn ds5_dbkiI dt3_dbkvo
                                            dt4_dbkvp dt5_dbkvq ds6_dbkiM ds7_dbkiN ds8_dbkiO
                                            ds9_dbkiP ds10_dbkiQ ds11_dbkiR ->
                                 case ds4_dbkiG of {
                                   __DEFAULT ->
                                     case ((setEcho @ dev_abjUS $dIODevice_abjUV ds3_dbkiF on_abjEq)
                                           `cast` (GHC.Types.N:IO[0] <()>_R
                                                   :: (IO () :: *)
                                                      ~R# (State# RealWorld
                                                           -> (# State# RealWorld, () #) :: *)))
                                            s2_ibk60
                                     of
                                     { (# ipv4_ibk63, ipv5_ibk64 #) ->
                                     (# ipv4_ibk63, (wild2_XL, ipv5_ibk64) #)
                                     };
                                   ClosedHandle ->
                                     case GHC.IO.Handle.Internals.ioe_closedHandle1 @ () s2_ibk60
                                     of wild4_00 {
                                     }
                                 }
                                 })
                              `cast` (<Handle__>_R
                                      ->_R Sym (GHC.Types.N:IO[0] <(Handle__, ())>_R)
                                      :: (Handle__
                                          -> State# RealWorld
                                          -> (# State# RealWorld, (Handle__, ()) #) :: *)
                                         ~R# (Handle__ -> IO (Handle__, ()) :: *)))
                             dt_ibk5W
                             s1_ibk5U
                      of
                      { (# ipv4_ibk68, ipv5_ibk69 #) ->
                      case ipv5_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                      case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv4_ibk68
                      of s2#_ibk6g
                      { __DEFAULT ->
                      (# s2#_ibk6g, v_ibk6e #)
                      }
                      }
                      } } in
              case ipv3_ibk6k of {
                __DEFAULT -> io_sblhB ipv2_ibk6j;
                0# -> maskAsyncExceptions# @ () io_sblhB ipv2_ibk6j
              }
              }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
hSetEcho :: Handle -> Bool -> IO ()
[GblId,
 Arity=3,
 Str=<S,U><L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hSetEcho1
               `cast` (<Handle>_R
                       ->_R <Bool>_R
                       ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle
                           -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> Bool -> IO () :: *))}]
hSetEcho
  = GHC.IO.Handle.hSetEcho1
    `cast` (<Handle>_R
            ->_R <Bool>_R
            ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle
                -> Bool -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> Bool -> IO () :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetBuffering3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.IO.Handle.hGetBuffering3 = "hGetBuffering"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetBuffering_fun :: String
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hGetBuffering_fun
  = unpackCString# GHC.IO.Handle.hGetBuffering3

-- RHS size: {terms: 17, types: 73, coercions: 0, joins: 0/0}
GHC.IO.Handle.hGetBuffering2
  :: Handle__
     -> State# RealWorld
     -> (# State# RealWorld, (Handle__, BufferMode) #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h__ibk5t [Occ=Once!] :: Handle__)
                 (s1_ibk5u [Occ=Once*] :: State# RealWorld) ->
                 case h__ibk5t of wild_ia4yf
                 { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds2_ia4yo [Occ=Once!] _ [Occ=Dead] ds3_ia4yq [Occ=Once]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 case ds2_ia4yo of {
                   __DEFAULT -> (# s1_ibk5u, (wild_ia4yf, ds3_ia4yq) #);
                   ClosedHandle ->
                     case GHC.IO.Handle.Internals.ioe_closedHandle1
                            @ BufferMode s1_ibk5u
                     of {
                     }
                 }
                 }}]
GHC.IO.Handle.hGetBuffering2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_ia4yf
      { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                 $dIODevice_ia4yk $dBufferedIO_ia4yl $dTypeable_ia4ym ds1_ia4yn
                 ds2_ia4yo dt_ia4yp ds3_ia4yq dt1_ia4yr dt2_ia4ys dt3_ia4yt
                 ds4_ia4yu ds5_ia4yv ds6_ia4yw ds7_ia4yx ds8_ia4yy ds9_ia4yz ->
      case ds2_ia4yo of {
        __DEFAULT -> (# s1_ibk5u, (wild_ia4yf, ds3_ia4yq) #);
        ClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_closedHandle1
                 @ BufferMode s1_ibk5u
          of wild2_00 {
          }
      }
      }

-- RHS size: {terms: 76, types: 133, coercions: 14, joins: 0/2}
GHC.IO.Handle.hGetBuffering1
  :: Handle -> State# RealWorld -> (# State# RealWorld, BufferMode #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hGetBuffering1
  = \ (handle_abjE8 :: Handle) (eta_B1 :: State# RealWorld) ->
      case handle_abjE8 of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblhu [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, BufferMode #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhu
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, BufferMode)
                         GHC.IO.Handle.hGetBuffering_fun
                         wild_ibk5j
                         (GHC.IO.Handle.hGetBuffering2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, BufferMode)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, BufferMode) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, BufferMode) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblhu ipv_ibk5N;
            0# -> maskAsyncExceptions# @ BufferMode io_sblhu ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblhx [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, BufferMode #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhx
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, BufferMode)
                         GHC.IO.Handle.hGetBuffering_fun
                         wild_ibk5j
                         (GHC.IO.Handle.hGetBuffering2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, BufferMode)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, BufferMode) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, BufferMode) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblhx ipv_ibk6j;
            0# -> maskAsyncExceptions# @ BufferMode io_sblhx ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hGetBuffering :: Handle -> IO BufferMode
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hGetBuffering1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <BufferMode>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, BufferMode #) :: *)
                          ~R# (Handle -> IO BufferMode :: *))}]
hGetBuffering
  = GHC.IO.Handle.hGetBuffering1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <BufferMode>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, BufferMode #) :: *)
               ~R# (Handle -> IO BufferMode :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsWritable4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hIsWritable4 = "hIsWritable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsWritable3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hIsWritable3
  = unpackCString# GHC.IO.Handle.hIsWritable4

-- RHS size: {terms: 30, types: 83, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsWritable2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Bool) #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 110 30}]
GHC.IO.Handle.hIsWritable2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_ia4yf
      { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                 $dIODevice_ia4yk $dBufferedIO_ia4yl $dTypeable_ia4ym ds1_ia4yn
                 ds2_ia4yo dt_ia4yp ds3_ia4yq dt1_ia4yr dt2_ia4ys dt3_ia4yt
                 ds4_ia4yu ds5_ia4yv ds6_ia4yw ds7_ia4yx ds8_ia4yy ds9_ia4yz ->
      case ds2_ia4yo of wild1_XM {
        __DEFAULT ->
          (# s1_ibk5u,
             (wild_ia4yf,
              case wild1_XM of {
                ReadHandle -> GHC.Types.False;
                WriteHandle -> GHC.Types.True;
                AppendHandle -> GHC.Types.True;
                ReadWriteHandle -> GHC.Types.True
              }) #);
        ClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_closedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          };
        SemiClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_semiclosedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          }
      }
      }

-- RHS size: {terms: 44, types: 81, coercions: 7, joins: 0/1}
GHC.IO.Handle.hIsWritable1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 159 30}]
GHC.IO.Handle.hIsWritable1
  = \ (ds_dbkk2 :: Handle) (eta_B1 :: State# RealWorld) ->
      case ds_dbkk2 of wild_X2d {
        FileHandle ipv_sbkWj ipv1_sbkWk ->
          case getMaskingState# eta_B1 of { (# ipv2_ibk5N, ipv3_ibk5O #) ->
          let {
            io_sblhr [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhr
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsWritable3
                         wild_X2d
                         (GHC.IO.Handle.hIsWritable2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         ipv1_sbkWk
                         s_ibk5n
                  of
                  { (# ipv4_ibk5C, ipv5_ibk5D #) ->
                  case ipv5_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ ipv1_sbkWk h'_ibk5H ipv4_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv3_ibk5O of {
            __DEFAULT -> io_sblhr ipv2_ibk5N;
            0# -> maskAsyncExceptions# @ Bool io_sblhr ipv2_ibk5N
          }
          };
        DuplexHandle ds1_dbkkp dt_dbkvv dt1_dbkvw ->
          (# eta_B1, GHC.Types.True #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hIsWritable :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hIsWritable1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hIsWritable
  = GHC.IO.Handle.hIsWritable1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsReadable4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hIsReadable4 = "hIsReadable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsReadable3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hIsReadable3
  = unpackCString# GHC.IO.Handle.hIsReadable4

-- RHS size: {terms: 28, types: 83, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsReadable2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Bool) #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 100 30}]
GHC.IO.Handle.hIsReadable2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_ia4yf
      { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                 $dIODevice_ia4yk $dBufferedIO_ia4yl $dTypeable_ia4ym ds1_ia4yn
                 ds2_ia4yo dt_ia4yp ds3_ia4yq dt1_ia4yr dt2_ia4ys dt3_ia4yt
                 ds4_ia4yu ds5_ia4yv ds6_ia4yw ds7_ia4yx ds8_ia4yy ds9_ia4yz ->
      case ds2_ia4yo of wild1_XN {
        __DEFAULT ->
          (# s1_ibk5u,
             (wild_ia4yf,
              case wild1_XN of {
                __DEFAULT -> GHC.Types.False;
                ReadHandle -> GHC.Types.True;
                ReadWriteHandle -> GHC.Types.True
              }) #);
        ClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_closedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          };
        SemiClosedHandle ->
          case GHC.IO.Handle.Internals.ioe_semiclosedHandle1 @ Bool s1_ibk5u
          of wild2_00 {
          }
      }
      }

-- RHS size: {terms: 44, types: 81, coercions: 7, joins: 0/1}
GHC.IO.Handle.hIsReadable1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [30 0] 159 30}]
GHC.IO.Handle.hIsReadable1
  = \ (ds_dbkkv :: Handle) (eta_B1 :: State# RealWorld) ->
      case ds_dbkkv of wild_X2e {
        FileHandle ipv_sbkWy ipv1_sbkWz ->
          case getMaskingState# eta_B1 of { (# ipv2_ibk5N, ipv3_ibk5O #) ->
          let {
            io_sblhp [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhp
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsReadable3
                         wild_X2e
                         (GHC.IO.Handle.hIsReadable2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         ipv1_sbkWz
                         s_ibk5n
                  of
                  { (# ipv4_ibk5C, ipv5_ibk5D #) ->
                  case ipv5_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ ipv1_sbkWz h'_ibk5H ipv4_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv3_ibk5O of {
            __DEFAULT -> io_sblhp ipv2_ibk5N;
            0# -> maskAsyncExceptions# @ Bool io_sblhp ipv2_ibk5N
          }
          };
        DuplexHandle ds1_dbkkS dt_dbkvx dt1_dbkvy ->
          (# eta_B1, GHC.Types.True #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hIsReadable :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hIsReadable1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hIsReadable
  = GHC.IO.Handle.hIsReadable1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsClosed4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.IO.Handle.hIsClosed4 = "hIsClosed"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsClosed3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hIsClosed3 = unpackCString# GHC.IO.Handle.hIsClosed4

-- RHS size: {terms: 19, types: 75, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsClosed2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h__ibk5t [Occ=Once!] :: Handle__)
                 (s1_ibk5u [Occ=Once*] :: State# RealWorld) ->
                 case h__ibk5t of wild_ia4yf
                 { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds2_ia4yo [Occ=Once!] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 case ds2_ia4yo of {
                   __DEFAULT -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.False) #);
                   ClosedHandle -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.True) #)
                 }
                 }}]
GHC.IO.Handle.hIsClosed2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_ia4yf
      { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                 $dIODevice_ia4yk $dBufferedIO_ia4yl $dTypeable_ia4ym ds1_ia4yn
                 ds2_ia4yo dt_ia4yp ds3_ia4yq dt1_ia4yr dt2_ia4ys dt3_ia4yt
                 ds4_ia4yu ds5_ia4yv ds6_ia4yw ds7_ia4yx ds8_ia4yy ds9_ia4yz ->
      case ds2_ia4yo of {
        __DEFAULT -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.False) #);
        ClosedHandle -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.True) #)
      }
      }

-- RHS size: {terms: 76, types: 133, coercions: 14, joins: 0/2}
GHC.IO.Handle.hIsClosed1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hIsClosed1
  = \ (handle_abjE0 :: Handle) (eta_B1 :: State# RealWorld) ->
      case handle_abjE0 of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblhl [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhl
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsClosed3
                         wild_ibk5j
                         (GHC.IO.Handle.hIsClosed2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblhl ipv_ibk5N;
            0# -> maskAsyncExceptions# @ Bool io_sblhl ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblhn [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhn
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsClosed3
                         wild_ibk5j
                         (GHC.IO.Handle.hIsClosed2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblhn ipv_ibk6j;
            0# -> maskAsyncExceptions# @ Bool io_sblhn ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hIsClosed :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hIsClosed1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hIsClosed
  = GHC.IO.Handle.hIsClosed1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsOpen4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.hIsOpen4 = "hIsOpen"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsOpen3 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hIsOpen3 = unpackCString# GHC.IO.Handle.hIsOpen4

-- RHS size: {terms: 25, types: 86, coercions: 0, joins: 0/0}
GHC.IO.Handle.hIsOpen2
  :: Handle__
     -> State# RealWorld -> (# State# RealWorld, (Handle__, Bool) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (h__ibk5t [Occ=Once!] :: Handle__)
                 (s1_ibk5u [Occ=Once*] :: State# RealWorld) ->
                 case h__ibk5t of wild_ia4yf
                 { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            ds2_ia4yo [Occ=Once!] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead]
                            _ [Occ=Dead] _ [Occ=Dead] _ [Occ=Dead] ->
                 case ds2_ia4yo of {
                   __DEFAULT -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.True) #);
                   ClosedHandle -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.False) #);
                   SemiClosedHandle -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.False) #)
                 }
                 }}]
GHC.IO.Handle.hIsOpen2
  = \ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
      case h__ibk5t of wild_ia4yf
      { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                 $dIODevice_ia4yk $dBufferedIO_ia4yl $dTypeable_ia4ym ds1_ia4yn
                 ds2_ia4yo dt_ia4yp ds3_ia4yq dt1_ia4yr dt2_ia4ys dt3_ia4yt
                 ds4_ia4yu ds5_ia4yv ds6_ia4yw ds7_ia4yx ds8_ia4yy ds9_ia4yz ->
      case ds2_ia4yo of {
        __DEFAULT -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.True) #);
        ClosedHandle -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.False) #);
        SemiClosedHandle -> (# s1_ibk5u, (wild_ia4yf, GHC.Types.False) #)
      }
      }

-- RHS size: {terms: 76, types: 133, coercions: 14, joins: 0/2}
GHC.IO.Handle.hIsOpen1
  :: Handle -> State# RealWorld -> (# State# RealWorld, Bool #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [169 0] 298 0}]
GHC.IO.Handle.hIsOpen1
  = \ (handle_abjDY :: Handle) (eta_B1 :: State# RealWorld) ->
      case handle_abjDY of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblhh [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhh
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsOpen3
                         wild_ibk5j
                         (GHC.IO.Handle.hIsOpen2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblhh ipv_ibk5N;
            0# -> maskAsyncExceptions# @ Bool io_sblhh ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblhj [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, Bool #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhj
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, Bool)
                         GHC.IO.Handle.hIsOpen3
                         wild_ibk5j
                         (GHC.IO.Handle.hIsOpen2
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Bool)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, Bool) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, Bool) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblhj ipv_ibk6j;
            0# -> maskAsyncExceptions# @ Bool io_sblhj ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hIsOpen :: Handle -> IO Bool
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hIsOpen1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                          ~R# (Handle -> IO Bool :: *))}]
hIsOpen
  = GHC.IO.Handle.hIsOpen1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
               ~R# (Handle -> IO Bool :: *))

-- RHS size: {terms: 14, types: 22, coercions: 5, joins: 0/0}
GHC.IO.Handle.hGetPosn1
  :: Handle -> State# RealWorld -> (# State# RealWorld, HandlePosn #)
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (handle_abjDh :: Handle)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case GHC.IO.Handle.Internals.wantSeekableHandle1
                        @ Integer
                        GHC.IO.Handle.hGetPosn3
                        handle_abjDh
                        (GHC.IO.Handle.hGetPosn2
                         `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                                 :: (Handle__
                                     -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                                    ~R# (Handle__ -> IO Integer :: *)))
                        s_i7IAv
                 of
                 { (# ipv_i7IAy [Occ=Once], ipv1_i7IAz [Occ=Once] #) ->
                 (# ipv_i7IAy, GHC.IO.Handle.HandlePosn handle_abjDh ipv1_i7IAz #)
                 }}]
GHC.IO.Handle.hGetPosn1
  = \ (handle_abjDh :: Handle) (s_i7IAv :: State# RealWorld) ->
      case GHC.IO.Handle.Internals.wantSeekableHandle1
             @ Integer
             GHC.IO.Handle.hGetPosn3
             handle_abjDh
             (GHC.IO.Handle.hGetPosn2
              `cast` (<Handle__>_R ->_R Sym (GHC.Types.N:IO[0] <Integer>_R)
                      :: (Handle__
                          -> State# RealWorld -> (# State# RealWorld, Integer #) :: *)
                         ~R# (Handle__ -> IO Integer :: *)))
             s_i7IAv
      of
      { (# ipv_i7IAy, ipv1_i7IAz #) ->
      (# ipv_i7IAy, GHC.IO.Handle.HandlePosn handle_abjDh ipv1_i7IAz #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hGetPosn :: Handle -> IO HandlePosn
[GblId,
 Arity=2,
 Str=<S,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hGetPosn1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <HandlePosn>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, HandlePosn #) :: *)
                          ~R# (Handle -> IO HandlePosn :: *))}]
hGetPosn
  = GHC.IO.Handle.hGetPosn1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <HandlePosn>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, HandlePosn #) :: *)
               ~R# (Handle -> IO HandlePosn :: *))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hClose3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.IO.Handle.hClose3 = "hClose"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.IO.Handle.hClose2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.IO.Handle.hClose2 = unpackCString# GHC.IO.Handle.hClose3

-- RHS size: {terms: 29, types: 29, coercions: 0, joins: 0/0}
GHC.IO.Handle.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: Handle
     -> IOErrorType
     -> String
     -> Maybe Foreign.C.Types.CInt
     -> Maybe FilePath
     -> State# RealWorld
     -> (# State# RealWorld, () #)
[GblId,
 Arity=6,
 Str=<B,U><B,U><B,U><B,U><B,1*U><B,U>x,
 Unf=OtherCon []]
GHC.IO.Handle.$wlvl
  = \ (w_sbn12 :: Handle)
      (ww_sbn18 :: IOErrorType)
      (ww1_sbn1a :: String)
      (ww2_sbn1b :: Maybe Foreign.C.Types.CInt)
      (ww3_sbn1c :: Maybe FilePath)
      (w1_sbn14 :: State# RealWorld) ->
      raiseIO#
        @ SomeException
        @ ()
        (GHC.IO.Exception.$fExceptionIOException_$ctoException
           (GHC.IO.Exception.IOError
              (GHC.Base.Just @ Handle w_sbn12)
              ww_sbn18
              GHC.IO.Handle.hClose2
              ww1_sbn1a
              ww2_sbn1b
              (case ww3_sbn1c of wild1_ibktn {
                 Nothing ->
                   case w_sbn12 of {
                     FileHandle path_ibkts dt_ibktt ->
                       GHC.Base.Just @ FilePath path_ibkts;
                     DuplexHandle path_ibktw dt_ibktx dt1_ibkty ->
                       GHC.Base.Just @ FilePath path_ibktw
                   };
                 Just ds6_ibktB -> wild1_ibktn
               })))
        w1_sbn14

-- RHS size: {terms: 95, types: 141, coercions: 40, joins: 0/0}
GHC.IO.Handle.hClose1
  :: Handle -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [263 0] 586 60}]
GHC.IO.Handle.hClose1
  = \ (h_abjBI :: Handle) (eta_B1 :: State# RealWorld) ->
      case h_abjBI of wild_X2l {
        FileHandle ds_dbkuc dt_dbkwa ->
          case GHC.IO.Handle.Internals.$wwithHandle'
                 @ (Maybe SomeException)
                 GHC.IO.Handle.hClose2
                 wild_X2l
                 dt_dbkwa
                 (GHC.IO.Handle.Internals.hClose_help1
                  `cast` (<Handle__>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Maybe SomeException)>_R)
                          :: (Handle__
                              -> State# RealWorld
                              -> (# State# RealWorld, (Handle__, Maybe SomeException) #) :: *)
                             ~R# (Handle__ -> IO (Handle__, Maybe SomeException) :: *)))
                 eta_B1
          of
          { (# ipv_i7IAy, ipv1_i7IAz #) ->
          case ipv1_i7IAz of {
            Nothing -> (# ipv_i7IAy, GHC.Tuple.() #);
            Just e_abjBQ ->
              case e_abjBQ of wild2_ia562
              { SomeException @ e1_ia565 $dException1_ia566 e2_ia567 ->
              case Data.Typeable.Internal.sameTypeRep
                     @ *
                     @ *
                     @ e1_ia565
                     @ IOException
                     ((GHC.Exception.$p1Exception @ e1_ia565 $dException1_ia566)
                      `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_ia565>_N
                              :: (Typeable e1_ia565 :: Constraint)
                                 ~R# (Data.Typeable.Internal.TypeRep e1_ia565 :: *)))
                     GHC.IO.Exception.$fExceptionIOException4
              of {
                False -> raiseIO# @ SomeException @ () wild2_ia562 ipv_i7IAy;
                True ->
                  case e2_ia567
                       `cast` (UnsafeCo representational e1_ia565 IOException
                               :: (e1_ia565 :: *) ~R# (IOException :: *))
                  of
                  { IOError ww1_sbn17 ww2_sbn18 ww3_sbn19 ww4_sbn1a ww5_sbn1b
                            ww6_sbn1c ->
                  GHC.IO.Handle.$wlvl
                    wild_X2l ww2_sbn18 ww4_sbn1a ww5_sbn1b ww6_sbn1c ipv_i7IAy
                  }
              }
              }
          }
          };
        DuplexHandle ds_dbkud dt_dbkwb dt1_dbkwc ->
          case GHC.IO.Handle.Internals.$wwithHandle'
                 @ (Maybe SomeException)
                 GHC.IO.Handle.hClose2
                 wild_X2l
                 dt_dbkwb
                 (GHC.IO.Handle.Internals.hClose_help1
                  `cast` (<Handle__>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Maybe SomeException)>_R)
                          :: (Handle__
                              -> State# RealWorld
                              -> (# State# RealWorld, (Handle__, Maybe SomeException) #) :: *)
                             ~R# (Handle__ -> IO (Handle__, Maybe SomeException) :: *)))
                 eta_B1
          of
          { (# ipv_i7IAy, ipv1_i7IAz #) ->
          case GHC.IO.Handle.Internals.$wwithHandle'
                 @ (Maybe SomeException)
                 GHC.IO.Handle.hClose2
                 wild_X2l
                 dt1_dbkwc
                 (GHC.IO.Handle.Internals.hClose_help1
                  `cast` (<Handle__>_R
                          ->_R Sym (GHC.Types.N:IO[0] <(Handle__, Maybe SomeException)>_R)
                          :: (Handle__
                              -> State# RealWorld
                              -> (# State# RealWorld, (Handle__, Maybe SomeException) #) :: *)
                             ~R# (Handle__ -> IO (Handle__, Maybe SomeException) :: *)))
                 ipv_i7IAy
          of
          { (# ipv2_X7IDj, ipv3_X7IDl #) ->
          case Data.Maybe.catMaybes1
                 @ SomeException
                 (GHC.Types.:
                    @ (Maybe SomeException)
                    ipv1_i7IAz
                    (GHC.Types.:
                       @ (Maybe SomeException)
                       ipv3_X7IDl
                       (GHC.Types.[] @ (Maybe SomeException))))
          of {
            [] -> (# ipv2_X7IDj, GHC.Tuple.() #);
            : y_i7Jcp ys_i7Jcq ->
              case y_i7Jcp of wild2_ia562
              { SomeException @ e1_ia565 $dException1_ia566 e2_ia567 ->
              case Data.Typeable.Internal.sameTypeRep
                     @ *
                     @ *
                     @ e1_ia565
                     @ IOException
                     ((GHC.Exception.$p1Exception @ e1_ia565 $dException1_ia566)
                      `cast` (Data.Typeable.Internal.N:Typeable[0] <*>_N <e1_ia565>_N
                              :: (Typeable e1_ia565 :: Constraint)
                                 ~R# (Data.Typeable.Internal.TypeRep e1_ia565 :: *)))
                     GHC.IO.Exception.$fExceptionIOException4
              of {
                False -> raiseIO# @ SomeException @ () wild2_ia562 ipv2_X7IDj;
                True ->
                  case e2_ia567
                       `cast` (UnsafeCo representational e1_ia565 IOException
                               :: (e1_ia565 :: *) ~R# (IOException :: *))
                  of
                  { IOError ww1_sbn17 ww2_sbn18 ww3_sbn19 ww4_sbn1a ww5_sbn1b
                            ww6_sbn1c ->
                  GHC.IO.Handle.$wlvl
                    wild_X2l ww2_sbn18 ww4_sbn1a ww5_sbn1b ww6_sbn1c ipv2_X7IDj
                  }
              }
              }
          }
          }
          }
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hClose :: Handle -> IO ()
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hClose1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                       :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                          ~R# (Handle -> IO () :: *))}]
hClose
  = GHC.IO.Handle.hClose1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
            :: (Handle -> State# RealWorld -> (# State# RealWorld, () #) :: *)
               ~R# (Handle -> IO () :: *))

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl28_rbnXa :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl28_rbnXa = GHC.Types.C# '{'#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl29_rbnXb :: Char
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl29_rbnXb = GHC.Types.C# ','#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl30_rbnXc :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl30_rbnXc = "duplex (read-write)"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl31_rbnXd :: [Char]
[GblId]
lvl31_rbnXd = unpackCString# lvl30_rbnXc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl32_rbnXe :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl32_rbnXe = "none"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl33_rbnXf :: [Char]
[GblId]
lvl33_rbnXf = unpackCString# lvl32_rbnXe

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl34_rbnXg :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl34_rbnXg = "line"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl35_rbnXh :: [Char]
[GblId]
lvl35_rbnXh = unpackCString# lvl34_rbnXg

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl36_rbnXi :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl36_rbnXi = "showHandle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl37_rbnXj :: [Char]
[GblId]
lvl37_rbnXj = unpackCString# lvl36_rbnXi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl38_rbnXk :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl38_rbnXk = "loc="#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl39_rbnXl :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl39_rbnXl = "type="#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl40_rbnXm :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl40_rbnXm = "buffering="#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl41_rbnXn :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl41_rbnXn = "}"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl42_rbnXo :: [Char]
[GblId]
lvl42_rbnXo = unpackCString# lvl41_rbnXn

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl43_rbnXp :: [Char]
[GblId]
lvl43_rbnXp = ++ @ Char lvl33_rbnXf lvl42_rbnXo

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl44_rbnXq :: [Char]
[GblId]
lvl44_rbnXq = ++ @ Char lvl35_rbnXh lvl42_rbnXo

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl45_rbnXr :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl45_rbnXr = "block "#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl46_rbnXs :: [Char]
[GblId, Str=m2, Unf=OtherCon []]
lvl46_rbnXs = GHC.Types.: @ Char GHC.Show.$fShow(,)2 lvl42_rbnXo

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl47_rbnXt :: [Char]
[GblId]
lvl47_rbnXt
  = ++ @ Char GHC.IO.Handle.Types.$fShowHandleType11 lvl42_rbnXo

-- RHS size: {terms: 221, types: 354, coercions: 14, joins: 0/4}
GHC.IO.Handle.hShow2
  :: String
     -> Bool
     -> Handle
     -> State# RealWorld
     -> (# State# RealWorld, String #)
[GblId, Arity=4, Str=<L,U><L,U><S,1*U><S,U>, Unf=OtherCon []]
GHC.IO.Handle.hShow2
  = \ (filepath_abjHn :: String)
      (is_duplex_abjHo :: Bool)
      (h_abjHp :: Handle)
      (eta_B1 :: State# RealWorld) ->
      let {
        act_sblhd [Dmd=<L,C(C1(U(U,U)))>]
          :: Handle__ -> State# RealWorld -> (# State# RealWorld, String #)
        [LclId, Arity=2, Str=<L,1*U><S,U>, Unf=OtherCon []]
        act_sblhd
          = \ (hdl__abjHz :: Handle__)
              (s_i7IAV [OS=OneShot] :: State# RealWorld) ->
              (# s_i7IAV,
                 GHC.Types.:
                   @ Char
                   lvl28_rbnXa
                   (case hdl__abjHz of
                    { Handle__ @ dev_ia4yh @ enc_state_ia4yi @ dec_state_ia4yj
                               $dIODevice_ia4yk $dBufferedIO_ia4yl $dTypeable_ia4ym ds1_ia4yn
                               ds2_ia4yo dt_ia4yp ds3_ia4yq dt1_ia4yr dt2_ia4ys dt3_ia4yt
                               ds4_ia4yu ds5_ia4yv ds6_ia4yw ds7_ia4yx ds8_ia4yy ds9_ia4yz ->
                    case ds2_ia4yo of wild1_X2s {
                      __DEFAULT ->
                        unpackAppendCString#
                          lvl38_rbnXk
                          (++
                             @ Char
                             filepath_abjHn
                             (GHC.Types.:
                                @ Char
                                lvl29_rbnXb
                                (unpackAppendCString#
                                   lvl39_rbnXl
                                   (let {
                                      karg_sblxa :: [Char]
                                      [LclId]
                                      karg_sblxa
                                        = unpackAppendCString#
                                            lvl40_rbnXm
                                            (case ds3_ia4yq of {
                                               NoBuffering -> lvl43_rbnXp;
                                               LineBuffering -> lvl44_rbnXq;
                                               BlockBuffering ds_dbk7D ->
                                                 case ds_dbk7D of {
                                                   Nothing ->
                                                     unpackAppendCString#
                                                       lvl45_rbnXr
                                                       (GHC.Types.:
                                                          @ Char
                                                          GHC.Show.$fShow(,)4
                                                          (case runRW#
                                                                  @ ('TupleRep
                                                                       '['TupleRep '[], 'LiftedRep])
                                                                  @ (# State# RealWorld,
                                                                       Buffer CharBufElem #)
                                                                  (\ (s1_i91ZD [OS=OneShot]
                                                                        :: State# RealWorld) ->
                                                                     case noDuplicate#
                                                                            @ RealWorld s1_i91ZD
                                                                     of s'_i91ZE
                                                                     { __DEFAULT ->
                                                                     readMutVar#
                                                                       @ RealWorld
                                                                       @ (Buffer CharBufElem)
                                                                       dt2_ia4ys
                                                                       s'_i91ZE
                                                                     })
                                                           of
                                                           { (# ipv_i91ZH, ipv1_i91ZI #) ->
                                                           case ipv1_i91ZI of
                                                           { Buffer dt4_ib3ey dt5_ib3ez ds12_ib3eA
                                                                    dt6_ib3eB dt7_ib3eC dt8_ib3eD ->
                                                           case GHC.Show.$wshowSignedInt
                                                                  0# dt6_ib3eB lvl46_rbnXs
                                                           of
                                                           { (# ww5_i7NVe, ww6_i7NVf #) ->
                                                           GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
                                                           }
                                                           }
                                                           }));
                                                   Just n_abjHy ->
                                                     unpackAppendCString#
                                                       lvl45_rbnXr
                                                       (GHC.Types.:
                                                          @ Char
                                                          GHC.Show.$fShow(,)4
                                                          (case n_abjHy of { I# ww3_i7NVa ->
                                                           case GHC.Show.$wshowSignedInt
                                                                  0# ww3_i7NVa lvl46_rbnXs
                                                           of
                                                           { (# ww5_i7NVe, ww6_i7NVf #) ->
                                                           GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf
                                                           }
                                                           }))
                                                 }
                                             }) } in
                                    case is_duplex_abjHo of {
                                      False ->
                                        case wild1_X2s of {
                                          SemiClosedHandle ->
                                            ++
                                              @ Char
                                              GHC.IO.Handle.Types.$fShowHandleType9
                                              (GHC.Types.: @ Char lvl29_rbnXb karg_sblxa);
                                          ReadHandle ->
                                            ++
                                              @ Char
                                              GHC.IO.Handle.Types.$fShowHandleType7
                                              (GHC.Types.: @ Char lvl29_rbnXb karg_sblxa);
                                          WriteHandle ->
                                            ++
                                              @ Char
                                              GHC.IO.Handle.Types.$fShowHandleType5
                                              (GHC.Types.: @ Char lvl29_rbnXb karg_sblxa);
                                          AppendHandle ->
                                            ++
                                              @ Char
                                              GHC.IO.Handle.Types.$fShowHandleType3
                                              (GHC.Types.: @ Char lvl29_rbnXb karg_sblxa);
                                          ReadWriteHandle ->
                                            ++
                                              @ Char
                                              GHC.IO.Handle.Types.$fShowHandleType1
                                              (GHC.Types.: @ Char lvl29_rbnXb karg_sblxa)
                                        };
                                      True ->
                                        ++
                                          @ Char
                                          lvl31_rbnXd
                                          (GHC.Types.: @ Char lvl29_rbnXb karg_sblxa)
                                    }))));
                      ClosedHandle -> lvl47_rbnXt
                    }
                    }) #) } in
      case h_abjHp of wild_ibk5j {
        FileHandle ds_ibk5q dt_ibk5r ->
          case getMaskingState# eta_B1 of { (# ipv_ibk5N, ipv1_ibk5O #) ->
          let {
            io_sblhc [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, String #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhc
              = \ (s_ibk5n :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, String)
                         lvl37_rbnXj
                         wild_ibk5j
                         ((\ (h__ibk5t :: Handle__) (s1_ibk5u :: State# RealWorld) ->
                             case act_sblhd h__ibk5t s1_ibk5u of
                             { (# ipv2_ibk5x, ipv3_ibk5y #) ->
                             (# ipv2_ibk5x, (h__ibk5t, ipv3_ibk5y) #)
                             })
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, String)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, String) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, String) :: *)))
                         dt_ibk5r
                         s_ibk5n
                  of
                  { (# ipv2_ibk5C, ipv3_ibk5D #) ->
                  case ipv3_ibk5D of { (h'_ibk5H, v_ibk5I) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5r h'_ibk5H ipv2_ibk5C
                  of s2#_ibk5K
                  { __DEFAULT ->
                  (# s2#_ibk5K, v_ibk5I #)
                  }
                  }
                  } } in
          case ipv1_ibk5O of {
            __DEFAULT -> io_sblhc ipv_ibk5N;
            0# -> maskAsyncExceptions# @ String io_sblhc ipv_ibk5N
          }
          };
        DuplexHandle ds_ibk5V dt_ibk5W dt1_ibk5X ->
          case getMaskingState# eta_B1 of { (# ipv_ibk6j, ipv1_ibk6k #) ->
          let {
            io_sblhf [Dmd=<C(S),C(U(U,U))>]
              :: State# RealWorld -> (# State# RealWorld, String #)
            [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []]
            io_sblhf
              = \ (s_ibk5U :: State# RealWorld) ->
                  case GHC.IO.Handle.Internals.$wdo_operation
                         @ (Handle__, String)
                         lvl37_rbnXj
                         wild_ibk5j
                         ((\ (h__ibk5Z :: Handle__) (s1_ibk60 :: State# RealWorld) ->
                             case act_sblhd h__ibk5Z s1_ibk60 of
                             { (# ipv2_ibk63, ipv3_ibk64 #) ->
                             (# ipv2_ibk63, (h__ibk5Z, ipv3_ibk64) #)
                             })
                          `cast` (<Handle__>_R
                                  ->_R Sym (GHC.Types.N:IO[0] <(Handle__, String)>_R)
                                  :: (Handle__
                                      -> State# RealWorld
                                      -> (# State# RealWorld, (Handle__, String) #) :: *)
                                     ~R# (Handle__ -> IO (Handle__, String) :: *)))
                         dt_ibk5W
                         s_ibk5U
                  of
                  { (# ipv2_ibk68, ipv3_ibk69 #) ->
                  case ipv3_ibk69 of { (h'_ibk6d, v_ibk6e) ->
                  case putMVar# @ RealWorld @ Handle__ dt_ibk5W h'_ibk6d ipv2_ibk68
                  of s2#_ibk6g
                  { __DEFAULT ->
                  (# s2#_ibk6g, v_ibk6e #)
                  }
                  }
                  } } in
          case ipv1_ibk6k of {
            __DEFAULT -> io_sblhf ipv_ibk6j;
            0# -> maskAsyncExceptions# @ String io_sblhf ipv_ibk6j
          }
          }
      }

-- RHS size: {terms: 16, types: 15, coercions: 0, joins: 0/0}
GHC.IO.Handle.hShow1
  :: Handle -> State# RealWorld -> (# State# RealWorld, String #)
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [70 0] 100 0}]
GHC.IO.Handle.hShow1
  = \ (h_abjHj :: Handle) (eta_B1 :: State# RealWorld) ->
      case h_abjHj of wild_X2n {
        FileHandle path_abjHk dt_dbkuu ->
          GHC.IO.Handle.hShow2 path_abjHk GHC.Types.False wild_X2n eta_B1;
        DuplexHandle path_abjHm dt_dbkuv dt1_dbkuw ->
          GHC.IO.Handle.hShow2 path_abjHm GHC.Types.True wild_X2n eta_B1
      }

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
hShow :: Handle -> IO String
[GblId,
 Arity=2,
 Str=<S,1*U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.IO.Handle.hShow1
               `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <String>_R)
                       :: (Handle
                           -> State# RealWorld -> (# State# RealWorld, String #) :: *)
                          ~R# (Handle -> IO String :: *))}]
hShow
  = GHC.IO.Handle.hShow1
    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <String>_R)
            :: (Handle
                -> State# RealWorld -> (# State# RealWorld, String #) :: *)
               ~R# (Handle -> IO String :: *))


