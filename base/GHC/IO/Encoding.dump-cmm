
==================== Output Cmm ====================
2018-03-16 16:05:01.990329151 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:01.990997887 UTC

[section ""data" . GHC.IO.Encoding.latin1_closure" {
     GHC.IO.Encoding.latin1_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_checked_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.991689297 UTC

[section ""data" . GHC.IO.Encoding.utf8_closure" {
     GHC.IO.Encoding.utf8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.99236791 UTC

[section ""data" . GHC.IO.Encoding.utf8_bom_closure" {
     GHC.IO.Encoding.utf8_bom_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_bom_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.993017417 UTC

[section ""data" . GHC.IO.Encoding.utf16_closure" {
     GHC.IO.Encoding.utf16_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.993677907 UTC

[section ""data" . GHC.IO.Encoding.utf16le_closure" {
     GHC.IO.Encoding.utf16le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.994312188 UTC

[section ""data" . GHC.IO.Encoding.utf16be_closure" {
     GHC.IO.Encoding.utf16be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.994937734 UTC

[section ""data" . GHC.IO.Encoding.utf32_closure" {
     GHC.IO.Encoding.utf32_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.995552139 UTC

[section ""data" . GHC.IO.Encoding.utf32le_closure" {
     GHC.IO.Encoding.utf32le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.996229966 UTC

[section ""data" . GHC.IO.Encoding.utf32be_closure" {
     GHC.IO.Encoding.utf32be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.996828521 UTC

[section ""data" . GHC.IO.Encoding.char8_closure" {
     GHC.IO.Encoding.char8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.997481315 UTC

[section ""cstring" . lvl_r9XsW_bytes" {
     lvl_r9XsW_bytes:
         I8[] [109,107,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.998429359 UTC

[section ""data" . lvl1_r9XsX_closure" {
     lvl1_r9XsX_closure:
         const lvl1_r9XsX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9XsX_entry() //  [R1]
         { info_tbl: [(c9XvQ,
                       label: lvl1_r9XsX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XvQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XvR; else goto c9XvS;
       c9XvR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XvS: // global
           (_c9XvN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XvN::I64 == 0) goto c9XvP; else goto c9XvO;
       c9XvP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XvO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XvN::I64;
           R2 = lvl_r9XsW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:01.999472988 UTC

[section ""cstring" . lvl2_r9XsY_bytes" {
     lvl2_r9XsY_bytes:
         I8[] [117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.000535607 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding2_closure" {
     GHC.IO.Encoding.mkTextEncoding2_closure:
         const GHC.IO.Encoding.mkTextEncoding2_info;
         const 0;
 },
 sat_s9Xt2_entry() //  [R1]
         { info_tbl: [(c9Xw5,
                       label: sat_s9Xt2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xw5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xw6; else goto c9Xw7;
       c9Xw6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xw7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl2_r9XsY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Xt4_entry() //  [R1]
         { info_tbl: [(c9Xw9,
                       label: sat_s9Xt4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xw9: // global
           _s9Xt4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xwa; else goto c9Xwb;
       c9Xwb: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c9Xwd; else goto c9Xwc;
       c9Xwd: // global
           HpAlloc = 80;
           goto c9Xwa;
       c9Xwa: // global
           R1 = _s9Xt4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xwc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xt4::P64;
           _s9Xt0::P64 = P64[_s9Xt4::P64 + 16];
           I64[Hp - 72] = sat_s9Xt2_info;
           P64[Hp - 56] = _s9Xt0::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl1_r9XsX_closure;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.mkTextEncoding2_entry() //  [R2]
         { info_tbl: [(c9Xwe,
                       label: GHC.IO.Encoding.mkTextEncoding2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xwe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Xwi; else goto c9Xwh;
       c9Xwi: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Xwh: // global
           I64[Hp - 16] = sat_s9Xt4_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.002305748 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule4_bytes" {
     GHC.IO.Encoding.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.002956826 UTC

[section ""data" . GHC.IO.Encoding.$trModule3_closure" {
     GHC.IO.Encoding.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.003583205 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule2_bytes" {
     GHC.IO.Encoding.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.004259186 UTC

[section ""data" . GHC.IO.Encoding.$trModule1_closure" {
     GHC.IO.Encoding.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.004888073 UTC

[section ""data" . GHC.IO.Encoding.$trModule_closure" {
     GHC.IO.Encoding.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.$trModule3_closure+1;
         const GHC.IO.Encoding.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.005596903 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding33_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding33_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49,58,49,57,56,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.006392079 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding32_closure" {
     GHC.IO.Encoding.getFileSystemEncoding32_closure:
         const GHC.IO.Encoding.getFileSystemEncoding32_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding32_entry() //  [R1]
         { info_tbl: [(c9Xwq,
                       label: GHC.IO.Encoding.getFileSystemEncoding32_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xwq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xwr; else goto c9Xws;
       c9Xwr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xws: // global
           (_c9Xwn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xwn::I64 == 0) goto c9Xwp; else goto c9Xwo;
       c9Xwp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xwo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xwn::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.007412287 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding31_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding31_bytes:
         I8[] [105,115,111,45,105,114,45,49,48,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.00818973 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding30_closure" {
     GHC.IO.Encoding.getFileSystemEncoding30_closure:
         const GHC.IO.Encoding.getFileSystemEncoding30_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding30_entry() //  [R1]
         { info_tbl: [(c9Xwz,
                       label: GHC.IO.Encoding.getFileSystemEncoding30_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xwz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XwA; else goto c9XwB;
       c9XwA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XwB: // global
           (_c9Xww::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xww::I64 == 0) goto c9Xwy; else goto c9Xwx;
       c9Xwy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xwx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xww::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.009189864 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding29_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding29_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.010049105 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding28_closure" {
     GHC.IO.Encoding.getFileSystemEncoding28_closure:
         const GHC.IO.Encoding.getFileSystemEncoding28_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding28_entry() //  [R1]
         { info_tbl: [(c9XwI,
                       label: GHC.IO.Encoding.getFileSystemEncoding28_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XwI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XwJ; else goto c9XwK;
       c9XwJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XwK: // global
           (_c9XwF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XwF::I64 == 0) goto c9XwH; else goto c9XwG;
       c9XwH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XwG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XwF::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding29_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.011106322 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding27_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding27_bytes:
         I8[] [73,83,79,45,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.011883643 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding26_closure" {
     GHC.IO.Encoding.getFileSystemEncoding26_closure:
         const GHC.IO.Encoding.getFileSystemEncoding26_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding26_entry() //  [R1]
         { info_tbl: [(c9XwR,
                       label: GHC.IO.Encoding.getFileSystemEncoding26_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XwR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XwS; else goto c9XwT;
       c9XwS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XwT: // global
           (_c9XwO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XwO::I64 == 0) goto c9XwQ; else goto c9XwP;
       c9XwQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XwP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XwO::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding27_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.012979119 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding25_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding25_bytes:
         I8[] [108,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.013784699 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding24_closure" {
     GHC.IO.Encoding.getFileSystemEncoding24_closure:
         const GHC.IO.Encoding.getFileSystemEncoding24_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding24_entry() //  [R1]
         { info_tbl: [(c9Xx0,
                       label: GHC.IO.Encoding.getFileSystemEncoding24_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xx0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xx1; else goto c9Xx2;
       c9Xx1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xx2: // global
           (_c9XwX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XwX::I64 == 0) goto c9XwZ; else goto c9XwY;
       c9XwZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XwY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XwX::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding25_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.014822094 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding23_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding23_bytes:
         I8[] [108,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.015626974 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding22_closure" {
     GHC.IO.Encoding.getFileSystemEncoding22_closure:
         const GHC.IO.Encoding.getFileSystemEncoding22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding22_entry() //  [R1]
         { info_tbl: [(c9Xx9,
                       label: GHC.IO.Encoding.getFileSystemEncoding22_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xx9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xxa; else goto c9Xxb;
       c9Xxa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xxb: // global
           (_c9Xx6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xx6::I64 == 0) goto c9Xx8; else goto c9Xx7;
       c9Xx8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xx7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xx6::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding23_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.01659518 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding21_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding21_bytes:
         I8[] [73,66,77,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.017399682 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding20_closure" {
     GHC.IO.Encoding.getFileSystemEncoding20_closure:
         const GHC.IO.Encoding.getFileSystemEncoding20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding20_entry() //  [R1]
         { info_tbl: [(c9Xxi,
                       label: GHC.IO.Encoding.getFileSystemEncoding20_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xxi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xxj; else goto c9Xxk;
       c9Xxj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xxk: // global
           (_c9Xxf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xxf::I64 == 0) goto c9Xxh; else goto c9Xxg;
       c9Xxh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xxg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xxf::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.018433814 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding19_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding19_bytes:
         I8[] [67,80,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.019177542 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding18_closure" {
     GHC.IO.Encoding.getFileSystemEncoding18_closure:
         const GHC.IO.Encoding.getFileSystemEncoding18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding18_entry() //  [R1]
         { info_tbl: [(c9Xxr,
                       label: GHC.IO.Encoding.getFileSystemEncoding18_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xxr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xxs; else goto c9Xxt;
       c9Xxs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xxt: // global
           (_c9Xxo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xxo::I64 == 0) goto c9Xxq; else goto c9Xxp;
       c9Xxq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xxp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xxo::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.020163841 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding17_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding17_bytes:
         I8[] [99,115,73,83,79,76,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.020956241 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding16_closure" {
     GHC.IO.Encoding.getFileSystemEncoding16_closure:
         const GHC.IO.Encoding.getFileSystemEncoding16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding16_entry() //  [R1]
         { info_tbl: [(c9XxA,
                       label: GHC.IO.Encoding.getFileSystemEncoding16_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XxA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XxB; else goto c9XxC;
       c9XxB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XxC: // global
           (_c9Xxx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xxx::I64 == 0) goto c9Xxz; else goto c9Xxy;
       c9Xxz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xxy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xxx::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.022384695 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding15_closure" {
     GHC.IO.Encoding.getFileSystemEncoding15_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding16_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.023060388 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding14_closure" {
     GHC.IO.Encoding.getFileSystemEncoding14_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding18_closure;
         const GHC.IO.Encoding.getFileSystemEncoding15_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.024855841 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding13_closure" {
     GHC.IO.Encoding.getFileSystemEncoding13_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding20_closure;
         const GHC.IO.Encoding.getFileSystemEncoding14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.025488048 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding12_closure" {
     GHC.IO.Encoding.getFileSystemEncoding12_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding22_closure;
         const GHC.IO.Encoding.getFileSystemEncoding13_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.026031374 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding11_closure" {
     GHC.IO.Encoding.getFileSystemEncoding11_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding24_closure;
         const GHC.IO.Encoding.getFileSystemEncoding12_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.026607277 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding10_closure" {
     GHC.IO.Encoding.getFileSystemEncoding10_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding26_closure;
         const GHC.IO.Encoding.getFileSystemEncoding11_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.027179927 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding9_closure" {
     GHC.IO.Encoding.getFileSystemEncoding9_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding28_closure;
         const GHC.IO.Encoding.getFileSystemEncoding10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.027752824 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding8_closure" {
     GHC.IO.Encoding.getFileSystemEncoding8_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding30_closure;
         const GHC.IO.Encoding.getFileSystemEncoding9_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.028272327 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding7_closure" {
     GHC.IO.Encoding.getFileSystemEncoding7_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding32_closure;
         const GHC.IO.Encoding.getFileSystemEncoding8_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.028836359 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding66_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding66_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,54,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.030084373 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding65_closure" {
     GHC.IO.Encoding.getFileSystemEncoding65_closure:
         const GHC.IO.Encoding.getFileSystemEncoding65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding65_entry() //  [R1]
         { info_tbl: [(c9XxJ,
                       label: GHC.IO.Encoding.getFileSystemEncoding65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XxJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XxK; else goto c9XxL;
       c9XxK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XxL: // global
           (_c9XxG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XxG::I64 == 0) goto c9XxI; else goto c9XxH;
       c9XxI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XxH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XxG::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.030949351 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding64_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding64_bytes:
         I8[] [105,115,111,45,105,114,45,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.031646294 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding63_closure" {
     GHC.IO.Encoding.getFileSystemEncoding63_closure:
         const GHC.IO.Encoding.getFileSystemEncoding63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding63_entry() //  [R1]
         { info_tbl: [(c9XxS,
                       label: GHC.IO.Encoding.getFileSystemEncoding63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XxS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XxT; else goto c9XxU;
       c9XxT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XxU: // global
           (_c9XxP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XxP::I64 == 0) goto c9XxR; else goto c9XxQ;
       c9XxR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XxQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XxP::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.032483147 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding62_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding62_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,56,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.033229684 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding61_closure" {
     GHC.IO.Encoding.getFileSystemEncoding61_closure:
         const GHC.IO.Encoding.getFileSystemEncoding61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding61_entry() //  [R1]
         { info_tbl: [(c9Xy1,
                       label: GHC.IO.Encoding.getFileSystemEncoding61_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xy1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xy2; else goto c9Xy3;
       c9Xy2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xy3: // global
           (_c9XxY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XxY::I64 == 0) goto c9Xy0; else goto c9XxZ;
       c9Xy0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XxZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XxY::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.034094378 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding60_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding60_bytes:
         I8[] [73,83,79,95,54,52,54,46,105,114,118,58,49,57,57,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.034770834 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding59_closure" {
     GHC.IO.Encoding.getFileSystemEncoding59_closure:
         const GHC.IO.Encoding.getFileSystemEncoding59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding59_entry() //  [R1]
         { info_tbl: [(c9Xya,
                       label: GHC.IO.Encoding.getFileSystemEncoding59_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xya: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xyb; else goto c9Xyc;
       c9Xyb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xyc: // global
           (_c9Xy7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xy7::I64 == 0) goto c9Xy9; else goto c9Xy8;
       c9Xy9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xy8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xy7::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.035608063 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding58_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding58_bytes:
         I8[] [85,83,45,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.036297201 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding57_closure" {
     GHC.IO.Encoding.getFileSystemEncoding57_closure:
         const GHC.IO.Encoding.getFileSystemEncoding57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding57_entry() //  [R1]
         { info_tbl: [(c9Xyj,
                       label: GHC.IO.Encoding.getFileSystemEncoding57_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xyj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xyk; else goto c9Xyl;
       c9Xyk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xyl: // global
           (_c9Xyg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xyg::I64 == 0) goto c9Xyi; else goto c9Xyh;
       c9Xyi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xyh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xyg::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.037167918 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding56_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding56_bytes:
         I8[] [117,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.03790623 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding55_closure" {
     GHC.IO.Encoding.getFileSystemEncoding55_closure:
         const GHC.IO.Encoding.getFileSystemEncoding55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding55_entry() //  [R1]
         { info_tbl: [(c9Xys,
                       label: GHC.IO.Encoding.getFileSystemEncoding55_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xys: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xyt; else goto c9Xyu;
       c9Xyt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xyu: // global
           (_c9Xyp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xyp::I64 == 0) goto c9Xyr; else goto c9Xyq;
       c9Xyr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xyq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xyp::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.038777611 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding54_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding54_bytes:
         I8[] [73,66,77,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.039470142 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding53_closure" {
     GHC.IO.Encoding.getFileSystemEncoding53_closure:
         const GHC.IO.Encoding.getFileSystemEncoding53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding53_entry() //  [R1]
         { info_tbl: [(c9XyB,
                       label: GHC.IO.Encoding.getFileSystemEncoding53_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XyB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XyC; else goto c9XyD;
       c9XyC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XyD: // global
           (_c9Xyy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xyy::I64 == 0) goto c9XyA; else goto c9Xyz;
       c9XyA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xyz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xyy::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.040320365 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding52_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding52_bytes:
         I8[] [99,112,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.041018806 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding51_closure" {
     GHC.IO.Encoding.getFileSystemEncoding51_closure:
         const GHC.IO.Encoding.getFileSystemEncoding51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding51_entry() //  [R1]
         { info_tbl: [(c9XyK,
                       label: GHC.IO.Encoding.getFileSystemEncoding51_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XyK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XyL; else goto c9XyM;
       c9XyL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XyM: // global
           (_c9XyH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XyH::I64 == 0) goto c9XyJ; else goto c9XyI;
       c9XyJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XyI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XyH::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.042270974 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding50_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding50_bytes:
         I8[] [99,115,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.042975253 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding49_closure" {
     GHC.IO.Encoding.getFileSystemEncoding49_closure:
         const GHC.IO.Encoding.getFileSystemEncoding49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding49_entry() //  [R1]
         { info_tbl: [(c9XyT,
                       label: GHC.IO.Encoding.getFileSystemEncoding49_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XyT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XyU; else goto c9XyV;
       c9XyU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XyV: // global
           (_c9XyQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XyQ::I64 == 0) goto c9XyS; else goto c9XyR;
       c9XyS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XyR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XyQ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.043814453 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding48_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding48_bytes:
         I8[] [65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.044520423 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding47_closure" {
     GHC.IO.Encoding.getFileSystemEncoding47_closure:
         const GHC.IO.Encoding.getFileSystemEncoding47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding47_entry() //  [R1]
         { info_tbl: [(c9Xz2,
                       label: GHC.IO.Encoding.getFileSystemEncoding47_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xz2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xz3; else goto c9Xz4;
       c9Xz3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xz4: // global
           (_c9XyZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XyZ::I64 == 0) goto c9Xz1; else goto c9Xz0;
       c9Xz1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xz0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XyZ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.045412061 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding46_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding46_bytes:
         I8[] [73,83,79,54,52,54,45,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.046114206 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding45_closure" {
     GHC.IO.Encoding.getFileSystemEncoding45_closure:
         const GHC.IO.Encoding.getFileSystemEncoding45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding45_entry() //  [R1]
         { info_tbl: [(c9Xzb,
                       label: GHC.IO.Encoding.getFileSystemEncoding45_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xzb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xzc; else goto c9Xzd;
       c9Xzc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xzd: // global
           (_c9Xz8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xz8::I64 == 0) goto c9Xza; else goto c9Xz9;
       c9Xza: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xz9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xz8::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.046985748 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding44_closure" {
     GHC.IO.Encoding.getFileSystemEncoding44_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding45_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.047546875 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding43_closure" {
     GHC.IO.Encoding.getFileSystemEncoding43_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding47_closure;
         const GHC.IO.Encoding.getFileSystemEncoding44_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.048035232 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding42_closure" {
     GHC.IO.Encoding.getFileSystemEncoding42_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding49_closure;
         const GHC.IO.Encoding.getFileSystemEncoding43_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.048548911 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding41_closure" {
     GHC.IO.Encoding.getFileSystemEncoding41_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding51_closure;
         const GHC.IO.Encoding.getFileSystemEncoding42_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.049120703 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding40_closure" {
     GHC.IO.Encoding.getFileSystemEncoding40_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding53_closure;
         const GHC.IO.Encoding.getFileSystemEncoding41_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.049733484 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding39_closure" {
     GHC.IO.Encoding.getFileSystemEncoding39_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding55_closure;
         const GHC.IO.Encoding.getFileSystemEncoding40_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.050286709 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding38_closure" {
     GHC.IO.Encoding.getFileSystemEncoding38_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding57_closure;
         const GHC.IO.Encoding.getFileSystemEncoding39_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.050902159 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding37_closure" {
     GHC.IO.Encoding.getFileSystemEncoding37_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding59_closure;
         const GHC.IO.Encoding.getFileSystemEncoding38_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.05149033 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding36_closure" {
     GHC.IO.Encoding.getFileSystemEncoding36_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding61_closure;
         const GHC.IO.Encoding.getFileSystemEncoding37_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.052040276 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding35_closure" {
     GHC.IO.Encoding.getFileSystemEncoding35_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding63_closure;
         const GHC.IO.Encoding.getFileSystemEncoding36_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.052598941 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding34_closure" {
     GHC.IO.Encoding.getFileSystemEncoding34_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding65_closure;
         const GHC.IO.Encoding.getFileSystemEncoding35_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.053144819 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding68_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding68_bytes:
         I8[] [85,84,70,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.054327563 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding67_closure" {
     GHC.IO.Encoding.getFileSystemEncoding67_closure:
         const GHC.IO.Encoding.getFileSystemEncoding67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding67_entry() //  [R1]
         { info_tbl: [(c9Xzk,
                       label: GHC.IO.Encoding.getFileSystemEncoding67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xzk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xzl; else goto c9Xzm;
       c9Xzl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xzm: // global
           (_c9Xzh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xzh::I64 == 0) goto c9Xzj; else goto c9Xzi;
       c9Xzj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xzi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xzh::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.056269627 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding70_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding70_bytes:
         I8[] [85,84,70,51,50,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.0569896 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding69_closure" {
     GHC.IO.Encoding.getFileSystemEncoding69_closure:
         const GHC.IO.Encoding.getFileSystemEncoding69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding69_entry() //  [R1]
         { info_tbl: [(c9Xzt,
                       label: GHC.IO.Encoding.getFileSystemEncoding69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Xzt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Xzu; else goto c9Xzv;
       c9Xzu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Xzv: // global
           (_c9Xzq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xzq::I64 == 0) goto c9Xzs; else goto c9Xzr;
       c9Xzs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Xzr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xzq::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.057833216 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding72_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding72_bytes:
         I8[] [85,84,70,51,50,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.058533888 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding71_closure" {
     GHC.IO.Encoding.getFileSystemEncoding71_closure:
         const GHC.IO.Encoding.getFileSystemEncoding71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding71_entry() //  [R1]
         { info_tbl: [(c9XzC,
                       label: GHC.IO.Encoding.getFileSystemEncoding71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XzC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XzD; else goto c9XzE;
       c9XzD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XzE: // global
           (_c9Xzz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Xzz::I64 == 0) goto c9XzB; else goto c9XzA;
       c9XzB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XzA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Xzz::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.059325511 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding74_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding74_bytes:
         I8[] [85,84,70,51,50]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.060045828 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding73_closure" {
     GHC.IO.Encoding.getFileSystemEncoding73_closure:
         const GHC.IO.Encoding.getFileSystemEncoding73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding73_entry() //  [R1]
         { info_tbl: [(c9XzL,
                       label: GHC.IO.Encoding.getFileSystemEncoding73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XzL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XzM; else goto c9XzN;
       c9XzM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XzN: // global
           (_c9XzI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XzI::I64 == 0) goto c9XzK; else goto c9XzJ;
       c9XzK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XzJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XzI::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.060884616 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding76_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding76_bytes:
         I8[] [85,84,70,49,54,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.061612248 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding75_closure" {
     GHC.IO.Encoding.getFileSystemEncoding75_closure:
         const GHC.IO.Encoding.getFileSystemEncoding75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding75_entry() //  [R1]
         { info_tbl: [(c9XzU,
                       label: GHC.IO.Encoding.getFileSystemEncoding75_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XzU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XzV; else goto c9XzW;
       c9XzV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XzW: // global
           (_c9XzR::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XzR::I64 == 0) goto c9XzT; else goto c9XzS;
       c9XzT: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XzS: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XzR::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.062427156 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding78_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding78_bytes:
         I8[] [85,84,70,49,54,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.063106154 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding77_closure" {
     GHC.IO.Encoding.getFileSystemEncoding77_closure:
         const GHC.IO.Encoding.getFileSystemEncoding77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding77_entry() //  [R1]
         { info_tbl: [(c9XA3,
                       label: GHC.IO.Encoding.getFileSystemEncoding77_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XA3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XA4; else goto c9XA5;
       c9XA4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XA5: // global
           (_c9XA0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XA0::I64 == 0) goto c9XA2; else goto c9XA1;
       c9XA2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XA1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XA0::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.063927969 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding80_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding80_bytes:
         I8[] [85,84,70,49,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.06462845 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding79_closure" {
     GHC.IO.Encoding.getFileSystemEncoding79_closure:
         const GHC.IO.Encoding.getFileSystemEncoding79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding79_entry() //  [R1]
         { info_tbl: [(c9XAc,
                       label: GHC.IO.Encoding.getFileSystemEncoding79_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XAc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XAd; else goto c9XAe;
       c9XAd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XAe: // global
           (_c9XA9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XA9::I64 == 0) goto c9XAb; else goto c9XAa;
       c9XAb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XAa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XA9::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.066862812 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_go_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_go_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_go_info;
         const 0;
 },
 sat_s9Xtl_entry() //  [R1]
         { info_tbl: [(c9XAA,
                       label: sat_s9Xtl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XAA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XAB; else goto c9XAC;
       c9XAB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XAC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Xtk_entry() //  [R1]
         { info_tbl: [(c9XAJ,
                       label: sat_s9Xtk_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XAJ: // global
           _s9Xtk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9XAK; else goto c9XAL;
       c9XAL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9XAN; else goto c9XAM;
       c9XAN: // global
           HpAlloc = 16;
           goto c9XAK;
       c9XAK: // global
           R1 = _s9Xtk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XAM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xtk::P64;
           (_s9Xtg::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[_s9Xtk::P64 + 16]);
           if (_s9Xtg::I64 > 1114111) goto c9XAX; else goto c9XB4;
       c9XAX: // global
           Hp = Hp - 16;
           R2 = _s9Xtg::I64;
           Sp = Sp - 16;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c9XB4: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s9Xtg::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding_go_entry() //  [R2]
         { info_tbl: [(c9XB9,
                       label: GHC.IO.Encoding.getFileSystemEncoding_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XB9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XBa; else goto u9XBm;
       c9XBa: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u9XBm: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c9XAg() args: 0, res: 0, upd: 0;
     }
 },
 _c9XAg() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XAg: // global
           _s9Xt5::P64 = P64[Sp];
           I64[Sp] = block_c9XAj_info;
           R1 = _s9Xt5::P64;
           if (R1 & 7 != 0) goto u9XBo; else goto c9XAk;
       u9XBo: // global
           call _c9XAj(R1) args: 0, res: 0, upd: 0;
       c9XAk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XAj() //  [R1]
         { info_tbl: [(c9XAj,
                       label: block_c9XAj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XAj: // global
           if (R1 & 7 == 1) goto c9XB6; else goto c9XB7;
       c9XB6: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XB7: // global
           I64[Sp - 8] = block_c9XAp_info;
           _s9Xt8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s9Xt8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XBp; else goto c9XAq;
       u9XBp: // global
           call _c9XAp(R1) args: 0, res: 0, upd: 0;
       c9XAq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XAp() //  [R1]
         { info_tbl: [(c9XAp,
                       label: block_c9XAp_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XAp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9XBh; else goto c9XBg;
       c9XBh: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XBg: // global
           _s9Xt8::P64 = P64[Sp + 8];
           _s9Xtb::I64 = I64[R1 + 7];
           if (_s9Xtb::I64 != 45) goto c9XBk; else goto c9XBl;
       c9XBk: // global
           I64[Hp - 64] = sat_s9Xtl_info;
           P64[Hp - 48] = _s9Xt8::P64;
           I64[Hp - 40] = sat_s9Xtk_info;
           I64[Hp - 24] = _s9Xtb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XBl: // global
           Hp = Hp - 72;
           P64[Sp + 8] = _s9Xt8::P64;
           Sp = Sp + 8;
           call _c9XAg() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.069635161 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding6_closure" {
     GHC.IO.Encoding.getFileSystemEncoding6_closure:
         const GHC.IO.Encoding.getFileSystemEncoding6_info;
         const 0;
 },
 sat_s9Xtq_entry() //  [R1]
         { info_tbl: [(c9XBJ,
                       label: sat_s9Xtq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XBJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XBK; else goto c9XBL;
       c9XBK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XBL: // global
           I64[Sp - 8] = block_c9XBA_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XC0; else goto c9XBB;
       u9XC0: // global
           call _c9XBA(R1) args: 0, res: 0, upd: 0;
       c9XBB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XBA() //  [R1]
         { info_tbl: [(c9XBA,
                       label: block_c9XBA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XBA: // global
           _c9XBI::P64 = R1 & 7;
           if (_c9XBI::P64 < 3) goto u9XBY; else goto u9XBZ;
       u9XBY: // global
           if (_c9XBI::P64 < 2) goto c9XBE; else goto c9XBF;
       c9XBE: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XBF: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9XBZ: // global
           if (_c9XBI::P64 < 4) goto c9XBG; else goto c9XBH;
       c9XBG: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9XBH: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding6_entry() //  [R2, R3]
         { info_tbl: [(c9XC3,
                       label: GHC.IO.Encoding.getFileSystemEncoding6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XC3: // global
           _s9Xtn::P64 = R3;
           _s9Xtm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9XC4; else goto c9XC5;
       c9XC5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XC7; else goto c9XC6;
       c9XC7: // global
           HpAlloc = 24;
           goto c9XC4;
       c9XC4: // global
           R3 = _s9Xtn::P64;
           R2 = _s9Xtm::P64;
           R1 = GHC.IO.Encoding.getFileSystemEncoding6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9XC6: // global
           I64[Hp - 16] = sat_s9Xtq_info;
           P64[Hp] = _s9Xtm::P64;
           I64[Sp - 8] = block_c9XC1_info;
           R3 = Hp - 16;
           R2 = _s9Xtn::P64;
           Sp = Sp - 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XC1() //  [R1]
         { info_tbl: [(c9XC1,
                       label: block_c9XC1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XC1: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.073804318 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding5_closure" {
     GHC.IO.Encoding.getFileSystemEncoding5_closure:
         const GHC.IO.Encoding.getFileSystemEncoding5_info;
         const 0;
 },
 sat_s9XtK_entry() //  [R1]
         { info_tbl: [(c9XCY,
                       label: sat_s9XtK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XCZ; else goto c9XD0;
       c9XCZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XD0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkLatin1_checked_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtL_entry() //  [R1]
         { info_tbl: [(c9XD7,
                       label: sat_s9XtL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XD7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XD8; else goto c9XD9;
       c9XD8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XD9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkAscii_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtM_entry() //  [R1]
         { info_tbl: [(c9XDg,
                       label: sat_s9XtM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XDg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XDh; else goto c9XDi;
       c9XDh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XDi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF8.mkUTF8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtN_entry() //  [R1]
         { info_tbl: [(c9XDp,
                       label: sat_s9XtN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XDp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XDq; else goto c9XDr;
       c9XDq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XDr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtO_entry() //  [R1]
         { info_tbl: [(c9XDy,
                       label: sat_s9XtO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XDy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XDz; else goto c9XDA;
       c9XDz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XDA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtP_entry() //  [R1]
         { info_tbl: [(c9XDH,
                       label: sat_s9XtP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XDH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XDI; else goto c9XDJ;
       c9XDI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XDJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtQ_entry() //  [R1]
         { info_tbl: [(c9XDQ,
                       label: sat_s9XtQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XDQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XDR; else goto c9XDS;
       c9XDR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XDS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtR_entry() //  [R1]
         { info_tbl: [(c9XDZ,
                       label: sat_s9XtR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XDZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XE0; else goto c9XE1;
       c9XE0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XE1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtS_entry() //  [R1]
         { info_tbl: [(c9XE8,
                       label: sat_s9XtS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XE8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XE9; else goto c9XEa;
       c9XE9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XEa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding5_entry() //  [R2, R3]
         { info_tbl: [(c9XEb,
                       label: GHC.IO.Encoding.getFileSystemEncoding5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XEb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9XEc; else goto c9XEd;
       c9XEc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9XEd: // global
           I64[Sp - 24] = block_c9XCf_info;
           _s9Xts::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s9Xts::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XCf() //  [R1]
         { info_tbl: [(c9XCf,
                       label: block_c9XCf_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCf: // global
           I64[Sp - 8] = block_c9XCj_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding79_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XCj() //  [R1]
         { info_tbl: [(c9XCj,
                       label: block_c9XCj_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCj: // global
           if (R1 & 7 == 1) goto c9XEh; else goto c9XFs;
       c9XEh: // global
           I64[Sp] = block_c9XCn_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding77_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XFs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XFv; else goto c9XFu;
       c9XFv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XFu: // global
           I64[Hp - 16] = sat_s9XtS_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCn() //  [R1]
         { info_tbl: [(c9XCn,
                       label: block_c9XCn_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCn: // global
           if (R1 & 7 == 1) goto c9XEk; else goto c9XFo;
       c9XEk: // global
           I64[Sp] = block_c9XCr_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding75_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XFo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XFr; else goto c9XFq;
       c9XFr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XFq: // global
           I64[Hp - 16] = sat_s9XtR_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCr() //  [R1]
         { info_tbl: [(c9XCr,
                       label: block_c9XCr_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCr: // global
           if (R1 & 7 == 1) goto c9XEn; else goto c9XFk;
       c9XEn: // global
           I64[Sp] = block_c9XCv_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding73_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XFk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XFn; else goto c9XFm;
       c9XFn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XFm: // global
           I64[Hp - 16] = sat_s9XtQ_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCv() //  [R1]
         { info_tbl: [(c9XCv,
                       label: block_c9XCv_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCv: // global
           if (R1 & 7 == 1) goto c9XEq; else goto c9XFg;
       c9XEq: // global
           I64[Sp] = block_c9XCz_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding71_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XFg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XFj; else goto c9XFi;
       c9XFj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XFi: // global
           I64[Hp - 16] = sat_s9XtP_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCz() //  [R1]
         { info_tbl: [(c9XCz,
                       label: block_c9XCz_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCz: // global
           if (R1 & 7 == 1) goto c9XEt; else goto c9XFc;
       c9XEt: // global
           I64[Sp] = block_c9XCD_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding69_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XFc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XFf; else goto c9XFe;
       c9XFf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XFe: // global
           I64[Hp - 16] = sat_s9XtO_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCD() //  [R1]
         { info_tbl: [(c9XCD,
                       label: block_c9XCD_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCD: // global
           if (R1 & 7 == 1) goto c9XEw; else goto c9XF8;
       c9XEw: // global
           _s9Xtv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9XCH_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding67_closure;
           R2 = _s9Xtv::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XF8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XFb; else goto c9XFa;
       c9XFb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XFa: // global
           I64[Hp - 16] = sat_s9XtN_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCH() //  [R1]
         { info_tbl: [(c9XCH,
                       label: block_c9XCH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCH: // global
           if (R1 & 7 == 1) goto c9XEz; else goto c9XF4;
       c9XEz: // global
           I64[Sp] = block_c9XCL_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding34_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9XF4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XF7; else goto c9XF6;
       c9XF7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XF6: // global
           I64[Hp - 16] = sat_s9XtM_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCL() //  [R1]
         { info_tbl: [(c9XCL,
                       label: block_c9XCL_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCL: // global
           if (R1 & 7 == 1) goto c9XEC; else goto c9XF0;
       c9XEC: // global
           I64[Sp] = block_c9XCP_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding7_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9XF0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XF3; else goto c9XF2;
       c9XF3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XF2: // global
           I64[Hp - 16] = sat_s9XtL_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XCP() //  [R1]
         { info_tbl: [(c9XCP,
                       label: block_c9XCP_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XCP: // global
           _s9Xts::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c9XEJ; else goto c9XEW;
       c9XEJ: // global
           I64[Sp] = block_c9XEE_info;
           R3 = P64[Sp + 16];
           R2 = _s9Xts::P64;
           call GHC.IO.Encoding.Iconv.iconvEncoding2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       c9XEW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XEZ; else goto c9XEY;
       c9XEZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XEY: // global
           I64[Hp - 16] = sat_s9XtK_info;
           P64[Hp] = _s9Xts::P64;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XEE() //  [R1]
         { info_tbl: [(c9XEE,
                       label: block_c9XEE_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XEE: // global
           I64[Sp] = block_c9XEG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9XFG; else goto c9XEL;
       u9XFG: // global
           call _c9XEG(R1) args: 0, res: 0, upd: 0;
       c9XEL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XEG() //  [R1]
         { info_tbl: [(c9XEG,
                       label: block_c9XEG_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XEG: // global
           if (R1 & 7 == 1) goto c9XER; else goto c9XEV;
       c9XER: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding6_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9XEV: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.080549686 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding9_closure" {
     GHC.IO.Encoding.mkTextEncoding9_closure:
         const GHC.IO.Encoding.mkTextEncoding9_info;
 },
 GHC.IO.Encoding.mkTextEncoding9_entry() //  [R2]
         { info_tbl: [(c9XFO,
                       label: GHC.IO.Encoding.mkTextEncoding9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XFO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XFP; else goto c9XFQ;
       c9XFP: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9XFQ: // global
           I64[Sp - 8] = block_c9XFL_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XFY; else goto c9XFM;
       u9XFY: // global
           call _c9XFL(R1) args: 0, res: 0, upd: 0;
       c9XFM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XFL() //  [R1]
         { info_tbl: [(c9XFL,
                       label: block_c9XFL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XFL: // global
           if (I64[R1 + 7] == 47) goto c9XFX; else goto c9XFW;
       c9XFX: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XFW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.081620803 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding4_bytes" {
     GHC.IO.Encoding.mkTextEncoding4_bytes:
         I8[] [47,47,84,82,65,78,83,76,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.082363997 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding3_closure" {
     GHC.IO.Encoding.mkTextEncoding3_closure:
         const GHC.IO.Encoding.mkTextEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding3_entry() //  [R1]
         { info_tbl: [(c9XG5,
                       label: GHC.IO.Encoding.mkTextEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XG5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XG6; else goto c9XG7;
       c9XG6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XG7: // global
           (_c9XG2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XG2::I64 == 0) goto c9XG4; else goto c9XG3;
       c9XG4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XG3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XG2::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.083264683 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding6_bytes" {
     GHC.IO.Encoding.mkTextEncoding6_bytes:
         I8[] [47,47,82,79,85,78,68,84,82,73,80]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.083964688 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding5_closure" {
     GHC.IO.Encoding.mkTextEncoding5_closure:
         const GHC.IO.Encoding.mkTextEncoding5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding5_entry() //  [R1]
         { info_tbl: [(c9XGe,
                       label: GHC.IO.Encoding.mkTextEncoding5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XGf; else goto c9XGg;
       c9XGf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XGg: // global
           (_c9XGb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XGb::I64 == 0) goto c9XGd; else goto c9XGc;
       c9XGd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XGc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XGb::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.084815331 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding8_bytes" {
     GHC.IO.Encoding.mkTextEncoding8_bytes:
         I8[] [47,47,73,71,78,79,82,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.085549068 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding7_closure" {
     GHC.IO.Encoding.mkTextEncoding7_closure:
         const GHC.IO.Encoding.mkTextEncoding7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding7_entry() //  [R1]
         { info_tbl: [(c9XGn,
                       label: GHC.IO.Encoding.mkTextEncoding7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XGo; else goto c9XGp;
       c9XGo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XGp: // global
           (_c9XGk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XGk::I64 == 0) goto c9XGm; else goto c9XGl;
       c9XGm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XGl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XGk::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.08703005 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding1_closure" {
     GHC.IO.Encoding.mkTextEncoding1_closure:
         const GHC.IO.Encoding.mkTextEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding1_entry() //  [R2]
         { info_tbl: [(c9XGD,
                       label: GHC.IO.Encoding.mkTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9XGE; else goto c9XGF;
       c9XGE: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9XGF: // global
           I64[Sp - 16] = block_c9XGu_info;
           R3 = R2;
           _s9XtX::P64 = R2;
           R2 = GHC.IO.Encoding.mkTextEncoding9_closure+1;
           P64[Sp - 8] = _s9XtX::P64;
           Sp = Sp - 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XGu() //  [R1, R2]
         { info_tbl: [(c9XGu,
                       label: block_c9XGu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGu: // global
           I64[Sp - 8] = block_c9XGw_info;
           _s9Xu0::P64 = R1;
           R1 = R2;
           P64[Sp] = _s9Xu0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XHn; else goto c9XGx;
       u9XHn: // global
           call _c9XGw(R1) args: 0, res: 0, upd: 0;
       c9XGx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XGw() //  [R1]
         { info_tbl: [(c9XGw,
                       label: block_c9XGw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGw: // global
           if (R1 & 7 == 1) goto c9XGA; else goto c9XGB;
       c9XGA: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9XGB: // global
           I64[Sp - 8] = block_c9XGM_info;
           R3 = GHC.IO.Encoding.mkTextEncoding7_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XGM() //  [R1]
         { info_tbl: [(c9XGM,
                       label: block_c9XGM_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGM: // global
           if (R1 & 7 == 1) goto c9XGU; else goto c9XHj;
       c9XGU: // global
           I64[Sp] = block_c9XGR_info;
           R3 = GHC.IO.Encoding.mkTextEncoding5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XHj: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9XGR() //  [R1]
         { info_tbl: [(c9XGR,
                       label: block_c9XGR_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGR: // global
           if (R1 & 7 == 1) goto c9XH1; else goto c9XHf;
       c9XH1: // global
           _s9Xu2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9XGY_info;
           R3 = GHC.IO.Encoding.mkTextEncoding3_closure;
           R2 = _s9Xu2::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XHf: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9XGY() //  [R1]
         { info_tbl: [(c9XGY,
                       label: block_c9XGY_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XGY: // global
           if (R1 & 7 == 1) goto c9XH7; else goto c9XHb;
       c9XH7: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
       c9XHb: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.TransliterateCodingFailure_closure+3;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.089053918 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding_closure" {
     GHC.IO.Encoding.mkTextEncoding_closure:
         const GHC.IO.Encoding.mkTextEncoding_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding_entry() //  [R2]
         { info_tbl: [(c9XHs,
                       label: GHC.IO.Encoding.mkTextEncoding_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XHs: // global
           R2 = R2;
           call GHC.IO.Encoding.mkTextEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.090027805 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding4_closure" {
     GHC.IO.Encoding.getForeignEncoding4_closure:
         const GHC.IO.Encoding.getForeignEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding4_entry() //  []
         { info_tbl: [(c9XHB,
                       label: GHC.IO.Encoding.getForeignEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XHB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XHC; else goto c9XHD;
       c9XHC: // global
           R1 = GHC.IO.Encoding.getForeignEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9XHD: // global
           I64[Sp - 8] = block_c9XHz_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XHz() //  []
         { info_tbl: [(c9XHz,
                       label: block_c9XHz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XHz: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.091152568 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding3_closure" {
     GHC.IO.Encoding.getForeignEncoding3_closure:
         const GHC.IO.Encoding.getForeignEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding3_entry() //  [R1]
         { info_tbl: [(c9XHN,
                       label: GHC.IO.Encoding.getForeignEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XHN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XHO; else goto c9XHP;
       c9XHO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XHP: // global
           (_c9XHI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XHI::I64 == 0) goto c9XHK; else goto c9XHJ;
       c9XHK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XHJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XHI::I64;
           I64[Sp - 24] = block_c9XHL_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9XHL() //  [R1]
         { info_tbl: [(c9XHL,
                       label: block_c9XHL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XHL: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.092613947 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding2_closure" {
     GHC.IO.Encoding.getForeignEncoding2_closure:
         const GHC.IO.Encoding.getForeignEncoding2_info;
         const 0;
 },
 sat_s9Xun_entry() //  [R1, R2]
         { info_tbl: [(c9XI7,
                       label: sat_s9Xun_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XI7: // global
           _s9Xuh::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xuh::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xuh::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Xuj_entry() //  [R1]
         { info_tbl: [(c9XIg,
                       label: sat_s9Xuj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XIg: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getForeignEncoding2_entry() //  []
         { info_tbl: [(c9XIk,
                       label: GHC.IO.Encoding.getForeignEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XIk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XIl; else goto c9XIm;
       c9XIl: // global
           R1 = GHC.IO.Encoding.getForeignEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9XIm: // global
           I64[Sp - 8] = block_c9XHV_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XHV() //  []
         { info_tbl: [(c9XHV,
                       label: block_c9XHV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XHV: // global
           I64[Sp] = block_c9XHX_info;
           R1 = GHC.IO.Encoding.getForeignEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XHX() //  [R1]
         { info_tbl: [(c9XHX,
                       label: block_c9XHX_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XHX: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9XIq; else goto c9XIp;
       c9XIq: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XIp: // global
           I64[Hp - 48] = sat_s9Xun_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xuj_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.094357787 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding1_closure" {
     GHC.IO.Encoding.getForeignEncoding1_closure:
         const GHC.IO.Encoding.getForeignEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding1_entry() //  [R1]
         { info_tbl: [(c9XIz,
                       label: GHC.IO.Encoding.getForeignEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XIz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XIA; else goto c9XIB;
       c9XIA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XIB: // global
           (_c9XIu::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XIu::I64 == 0) goto c9XIw; else goto c9XIv;
       c9XIw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XIv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XIu::I64;
           I64[Sp - 24] = block_c9XIx_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9XIx() //  [R1]
         { info_tbl: [(c9XIx,
                       label: block_c9XIx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XIx: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.095617279 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding_closure" {
     GHC.IO.Encoding.getForeignEncoding_closure:
         const GHC.IO.Encoding.getForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9XIM,
                       label: GHC.IO.Encoding.getForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XIM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XIN; else goto c9XIO;
       c9XIN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XIO: // global
           (_c9XIG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XIG::I64 == 0) goto c9XII; else goto c9XIH;
       c9XII: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XIH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XIG::I64;
           I64[Sp - 24] = block_c9XIJ_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XIS; else goto c9XIK;
       u9XIS: // global
           call _c9XIJ(R1) args: 0, res: 0, upd: 0;
       c9XIK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XIJ() //  [R1]
         { info_tbl: [(c9XIJ,
                       label: block_c9XIJ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XIJ: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.096944209 UTC

[section ""data" . GHC.IO.Encoding.setForeignEncoding_closure" {
     GHC.IO.Encoding.setForeignEncoding_closure:
         const GHC.IO.Encoding.setForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9XJ2,
                       label: GHC.IO.Encoding.setForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJ2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XJ3; else goto c9XJ4;
       c9XJ3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XJ4: // global
           (_c9XIW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XIW::I64 == 0) goto c9XIY; else goto c9XIX;
       c9XIY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XIX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XIW::I64;
           I64[Sp - 24] = block_c9XIZ_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XJ8; else goto c9XJ0;
       u9XJ8: // global
           call _c9XIZ(R1) args: 0, res: 0, upd: 0;
       c9XJ0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XIZ() //  [R1]
         { info_tbl: [(c9XIZ,
                       label: block_c9XIZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XIZ: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.098163285 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding4_closure" {
     GHC.IO.Encoding.getFileSystemEncoding4_closure:
         const GHC.IO.Encoding.getFileSystemEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding4_entry() //  []
         { info_tbl: [(c9XJf,
                       label: GHC.IO.Encoding.getFileSystemEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJf: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XJg; else goto c9XJh;
       c9XJg: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9XJh: // global
           I64[Sp - 8] = block_c9XJd_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XJd() //  []
         { info_tbl: [(c9XJd,
                       label: block_c9XJd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJd: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.099276506 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding3_closure" {
     GHC.IO.Encoding.getFileSystemEncoding3_closure:
         const GHC.IO.Encoding.getFileSystemEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding3_entry() //  [R1]
         { info_tbl: [(c9XJr,
                       label: GHC.IO.Encoding.getFileSystemEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XJs; else goto c9XJt;
       c9XJs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XJt: // global
           (_c9XJm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XJm::I64 == 0) goto c9XJo; else goto c9XJn;
       c9XJo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XJn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XJm::I64;
           I64[Sp - 24] = block_c9XJp_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9XJp() //  [R1]
         { info_tbl: [(c9XJp,
                       label: block_c9XJp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJp: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.100824691 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding2_closure" {
     GHC.IO.Encoding.getFileSystemEncoding2_closure:
         const GHC.IO.Encoding.getFileSystemEncoding2_info;
         const 0;
 },
 sat_s9XuN_entry() //  [R1, R2]
         { info_tbl: [(c9XJL,
                       label: sat_s9XuN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJL: // global
           _s9XuH::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9XuH::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9XuH::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9XuJ_entry() //  [R1]
         { info_tbl: [(c9XJU,
                       label: sat_s9XuJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJU: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding2_entry() //  []
         { info_tbl: [(c9XJY,
                       label: GHC.IO.Encoding.getFileSystemEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XJZ; else goto c9XK0;
       c9XJZ: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9XK0: // global
           I64[Sp - 8] = block_c9XJz_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XJz() //  []
         { info_tbl: [(c9XJz,
                       label: block_c9XJz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJz: // global
           I64[Sp] = block_c9XJB_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XJB() //  [R1]
         { info_tbl: [(c9XJB,
                       label: block_c9XJB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XJB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9XK4; else goto c9XK3;
       c9XK4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XK3: // global
           I64[Hp - 48] = sat_s9XuN_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9XuJ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.102789375 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding1_closure" {
     GHC.IO.Encoding.getFileSystemEncoding1_closure:
         const GHC.IO.Encoding.getFileSystemEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding1_entry() //  [R1]
         { info_tbl: [(c9XKd,
                       label: GHC.IO.Encoding.getFileSystemEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XKe; else goto c9XKf;
       c9XKe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XKf: // global
           (_c9XK8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XK8::I64 == 0) goto c9XKa; else goto c9XK9;
       c9XKa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XK9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XK8::I64;
           I64[Sp - 24] = block_c9XKb_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9XKb() //  [R1]
         { info_tbl: [(c9XKb,
                       label: block_c9XKb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKb: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.104001578 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9XKq,
                       label: GHC.IO.Encoding.getFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XKr; else goto c9XKs;
       c9XKr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XKs: // global
           (_c9XKk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XKk::I64 == 0) goto c9XKm; else goto c9XKl;
       c9XKm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XKl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XKk::I64;
           I64[Sp - 24] = block_c9XKn_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XKw; else goto c9XKo;
       u9XKw: // global
           call _c9XKn(R1) args: 0, res: 0, upd: 0;
       c9XKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XKn() //  [R1]
         { info_tbl: [(c9XKn,
                       label: block_c9XKn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKn: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.105096778 UTC

[section ""data" . GHC.IO.Encoding.argvEncoding_closure" {
     GHC.IO.Encoding.argvEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.105895451 UTC

[section ""data" . GHC.IO.Encoding.setFileSystemEncoding_closure" {
     GHC.IO.Encoding.setFileSystemEncoding_closure:
         const GHC.IO.Encoding.setFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9XKG,
                       label: GHC.IO.Encoding.setFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XKH; else goto c9XKI;
       c9XKH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XKI: // global
           (_c9XKA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XKA::I64 == 0) goto c9XKC; else goto c9XKB;
       c9XKC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XKB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XKA::I64;
           I64[Sp - 24] = block_c9XKD_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XKM; else goto c9XKE;
       u9XKM: // global
           call _c9XKD(R1) args: 0, res: 0, upd: 0;
       c9XKE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XKD() //  [R1]
         { info_tbl: [(c9XKD,
                       label: block_c9XKD_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKD: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.107099498 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding1_closure" {
     GHC.IO.Encoding.initLocaleEncoding1_closure:
         const GHC.IO.Encoding.initLocaleEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding1_entry() //  []
         { info_tbl: [(c9XKT,
                       label: GHC.IO.Encoding.initLocaleEncoding1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XKU; else goto c9XKV;
       c9XKU: // global
           R1 = GHC.IO.Encoding.initLocaleEncoding1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9XKV: // global
           I64[Sp - 8] = block_c9XKR_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XKR() //  []
         { info_tbl: [(c9XKR,
                       label: block_c9XKR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XKR: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.108250922 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding_closure" {
     GHC.IO.Encoding.initLocaleEncoding_closure:
         const GHC.IO.Encoding.initLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9XL5,
                       label: GHC.IO.Encoding.initLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XL5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XL6; else goto c9XL7;
       c9XL6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XL7: // global
           (_c9XL0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XL0::I64 == 0) goto c9XL2; else goto c9XL1;
       c9XL2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XL1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XL0::I64;
           I64[Sp - 24] = block_c9XL3_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.initLocaleEncoding1_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9XL3() //  [R1]
         { info_tbl: [(c9XL3,
                       label: block_c9XL3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XL3: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.109835373 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding2_closure" {
     GHC.IO.Encoding.getLocaleEncoding2_closure:
         const GHC.IO.Encoding.getLocaleEncoding2_info;
         const 0;
 },
 sat_s9Xvd_entry() //  [R1, R2]
         { info_tbl: [(c9XLp,
                       label: sat_s9Xvd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XLp: // global
           _s9Xv7::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xv7::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xv7::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Xv9_entry() //  [R1]
         { info_tbl: [(c9XLy,
                       label: sat_s9Xv9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XLy: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getLocaleEncoding2_entry() //  []
         { info_tbl: [(c9XLC,
                       label: GHC.IO.Encoding.getLocaleEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XLC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XLD; else goto c9XLE;
       c9XLD: // global
           R1 = GHC.IO.Encoding.getLocaleEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9XLE: // global
           I64[Sp - 8] = block_c9XLd_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XLd() //  []
         { info_tbl: [(c9XLd,
                       label: block_c9XLd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XLd: // global
           I64[Sp] = block_c9XLf_info;
           R1 = GHC.IO.Encoding.initLocaleEncoding_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XLf() //  [R1]
         { info_tbl: [(c9XLf,
                       label: block_c9XLf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XLf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9XLI; else goto c9XLH;
       c9XLI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XLH: // global
           I64[Hp - 48] = sat_s9Xvd_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xv9_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.111604639 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding1_closure" {
     GHC.IO.Encoding.getLocaleEncoding1_closure:
         const GHC.IO.Encoding.getLocaleEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding1_entry() //  [R1]
         { info_tbl: [(c9XLR,
                       label: GHC.IO.Encoding.getLocaleEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XLR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XLS; else goto c9XLT;
       c9XLS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XLT: // global
           (_c9XLM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XLM::I64 == 0) goto c9XLO; else goto c9XLN;
       c9XLO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XLN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XLM::I64;
           I64[Sp - 24] = block_c9XLP_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getLocaleEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9XLP() //  [R1]
         { info_tbl: [(c9XLP,
                       label: block_c9XLP_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XLP: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.11290222 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding_closure" {
     GHC.IO.Encoding.getLocaleEncoding_closure:
         const GHC.IO.Encoding.getLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9XM4,
                       label: GHC.IO.Encoding.getLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XM4: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XM5; else goto c9XM6;
       c9XM5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XM6: // global
           (_c9XLY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XLY::I64 == 0) goto c9XM0; else goto c9XLZ;
       c9XM0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XLZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XLY::I64;
           I64[Sp - 24] = block_c9XM1_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XMa; else goto c9XM2;
       u9XMa: // global
           call _c9XM1(R1) args: 0, res: 0, upd: 0;
       c9XM2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XM1() //  [R1]
         { info_tbl: [(c9XM1,
                       label: block_c9XM1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XM1: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.114432127 UTC

[section ""data" . GHC.IO.Encoding.setLocaleEncoding_closure" {
     GHC.IO.Encoding.setLocaleEncoding_closure:
         const GHC.IO.Encoding.setLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9XMk,
                       label: GHC.IO.Encoding.setLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XMk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XMl; else goto c9XMm;
       c9XMl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XMm: // global
           (_c9XMe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XMe::I64 == 0) goto c9XMg; else goto c9XMf;
       c9XMg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XMf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XMe::I64;
           I64[Sp - 24] = block_c9XMh_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XMq; else goto c9XMi;
       u9XMq: // global
           call _c9XMh(R1) args: 0, res: 0, upd: 0;
       c9XMi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XMh() //  [R1]
         { info_tbl: [(c9XMh,
                       label: block_c9XMh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XMh: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.117838876 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode1_closure" {
     GHC.IO.Encoding.latin1_decode1_closure:
         const GHC.IO.Encoding.latin1_decode1_info;
 },
 sat_s9Xvy_entry() //  [R1]
         { info_tbl: [(c9XME,
                       label: sat_s9Xvy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XME: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XMI; else goto c9XMJ;
       c9XMI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XMJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9XMB_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XMN; else goto c9XMC;
       u9XMN: // global
           call _c9XMB(R1) args: 0, res: 0, upd: 0;
       c9XMC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XMB() //  [R1]
         { info_tbl: [(c9XMB,
                       label: block_c9XMB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XMB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XMM; else goto c9XML;
       c9XMM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9XML: // global
           _s9Xvw::P64 = P64[R1 + 15];
           _s9Xvx::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9Xvw::P64;
           P64[Hp] = _s9Xvx::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_decode1_entry() //  [R2, R3]
         { info_tbl: [(c9XMO,
                       label: GHC.IO.Encoding.latin1_decode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XMO: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XMP; else goto c9XMQ;
       c9XMP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_decode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9XMQ: // global
           I64[Sp - 8] = block_c9XMv_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XMv() //  [R1]
         { info_tbl: [(c9XMv,
                       label: block_c9XMv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XMv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XMT; else goto c9XMS;
       c9XMT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XMS: // global
           I64[Hp - 16] = sat_s9Xvy_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.119497924 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode_closure" {
     GHC.IO.Encoding.latin1_decode_closure:
         const GHC.IO.Encoding.latin1_decode_info;
 },
 GHC.IO.Encoding.latin1_decode_entry() //  [R2, R3]
         { info_tbl: [(c9XMY,
                       label: GHC.IO.Encoding.latin1_decode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XMY: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_decode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.120680814 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode1_closure" {
     GHC.IO.Encoding.latin1_encode1_closure:
         const GHC.IO.Encoding.latin1_encode1_info;
 },
 sat_s9XvJ_entry() //  [R1]
         { info_tbl: [(c9XNe,
                       label: sat_s9XvJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XNe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XNi; else goto c9XNj;
       c9XNi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XNj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9XNb_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9XNn; else goto c9XNc;
       u9XNn: // global
           call _c9XNb(R1) args: 0, res: 0, upd: 0;
       c9XNc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9XNb() //  [R1]
         { info_tbl: [(c9XNb,
                       label: block_c9XNb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XNb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XNm; else goto c9XNl;
       c9XNm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9XNl: // global
           _s9XvH::P64 = P64[R1 + 15];
           _s9XvI::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9XvH::P64;
           P64[Hp] = _s9XvI::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_encode1_entry() //  [R2, R3]
         { info_tbl: [(c9XNo,
                       label: GHC.IO.Encoding.latin1_encode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XNo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XNp; else goto c9XNq;
       c9XNp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_encode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9XNq: // global
           I64[Sp - 8] = block_c9XN5_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin3_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XN5() //  [R1]
         { info_tbl: [(c9XN5,
                       label: block_c9XN5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XN5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XNt; else goto c9XNs;
       c9XNt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XNs: // global
           I64[Hp - 16] = sat_s9XvJ_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.12235176 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode_closure" {
     GHC.IO.Encoding.latin1_encode_closure:
         const GHC.IO.Encoding.latin1_encode_info;
 },
 GHC.IO.Encoding.latin1_encode_entry() //  [R2, R3]
         { info_tbl: [(c9XNy,
                       label: GHC.IO.Encoding.latin1_encode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XNy: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_encode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.123043935 UTC

[section ""relreadonly" . S9Xwj_srt" {
     S9Xwj_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_r9XsX_closure;
         const GHC.IO.Encoding.mkTextEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_go_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding6_closure;
         const GHC.IO.Encoding.Latin1.mkLatin1_checked_closure;
         const GHC.IO.Encoding.Latin1.mkAscii_closure;
         const GHC.IO.Encoding.UTF8.mkUTF8_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32le_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32be_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16le_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16be_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16_closure;
         const GHC.IO.Encoding.Iconv.iconvEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding7_closure;
         const GHC.IO.Encoding.getFileSystemEncoding34_closure;
         const GHC.IO.Encoding.getFileSystemEncoding67_closure;
         const GHC.IO.Encoding.getFileSystemEncoding69_closure;
         const GHC.IO.Encoding.getFileSystemEncoding71_closure;
         const GHC.IO.Encoding.getFileSystemEncoding73_closure;
         const GHC.IO.Encoding.getFileSystemEncoding75_closure;
         const GHC.IO.Encoding.getFileSystemEncoding77_closure;
         const GHC.IO.Encoding.getFileSystemEncoding79_closure;
         const GHC.IO.Encoding.mkTextEncoding1_closure;
         const GHC.IO.Encoding.mkTextEncoding3_closure;
         const GHC.IO.Encoding.mkTextEncoding5_closure;
         const GHC.IO.Encoding.mkTextEncoding7_closure;
         const GHC.IO.Encoding.Iconv.localeEncodingName_closure;
         const GHC.IO.Encoding.getForeignEncoding4_closure;
         const GHC.IO.Encoding.getForeignEncoding2_closure;
         const GHC.IO.Encoding.getForeignEncoding3_closure;
         const GHC.IO.Encoding.getForeignEncoding1_closure;
         const GHC.IO.Encoding.getFileSystemEncoding4_closure;
         const GHC.IO.Encoding.getFileSystemEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding2_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.123832673 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:02.124297087 UTC

[section ""data" . GHC.IO.Encoding.latin1_closure" {
     GHC.IO.Encoding.latin1_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_checked_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.124833896 UTC

[section ""data" . GHC.IO.Encoding.utf8_closure" {
     GHC.IO.Encoding.utf8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.12558651 UTC

[section ""data" . GHC.IO.Encoding.utf8_bom_closure" {
     GHC.IO.Encoding.utf8_bom_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_bom_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.126145138 UTC

[section ""data" . GHC.IO.Encoding.utf16_closure" {
     GHC.IO.Encoding.utf16_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.126682844 UTC

[section ""data" . GHC.IO.Encoding.utf16le_closure" {
     GHC.IO.Encoding.utf16le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.127224568 UTC

[section ""data" . GHC.IO.Encoding.utf16be_closure" {
     GHC.IO.Encoding.utf16be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.127734113 UTC

[section ""data" . GHC.IO.Encoding.utf32_closure" {
     GHC.IO.Encoding.utf32_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.128307811 UTC

[section ""data" . GHC.IO.Encoding.utf32le_closure" {
     GHC.IO.Encoding.utf32le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.128869924 UTC

[section ""data" . GHC.IO.Encoding.utf32be_closure" {
     GHC.IO.Encoding.utf32be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.129462733 UTC

[section ""data" . GHC.IO.Encoding.char8_closure" {
     GHC.IO.Encoding.char8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.130040606 UTC

[section ""cstring" . lvl_r9XsW_bytes" {
     lvl_r9XsW_bytes:
         I8[] [109,107,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.130830685 UTC

[section ""data" . lvl1_r9XsX_closure" {
     lvl1_r9XsX_closure:
         const lvl1_r9XsX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9XsX_entry() //  [R1]
         { info_tbl: [(c9XNH,
                       label: lvl1_r9XsX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XNH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XNI; else goto c9XNJ;
       c9XNI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XNJ: // global
           (_c9XNE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XNE::I64 == 0) goto c9XNG; else goto c9XNF;
       c9XNG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XNF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XNE::I64;
           R2 = lvl_r9XsW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.131717202 UTC

[section ""cstring" . lvl2_r9XsY_bytes" {
     lvl2_r9XsY_bytes:
         I8[] [117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.132736221 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding2_closure" {
     GHC.IO.Encoding.mkTextEncoding2_closure:
         const GHC.IO.Encoding.mkTextEncoding2_info;
         const 0;
 },
 sat_s9Xt2_entry() //  [R1]
         { info_tbl: [(c9XNW,
                       label: sat_s9Xt2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XNW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XNX; else goto c9XNY;
       c9XNX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XNY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl2_r9XsY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Xt4_entry() //  [R1]
         { info_tbl: [(c9XO0,
                       label: sat_s9Xt4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XO0: // global
           _s9Xt4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9XO1; else goto c9XO2;
       c9XO2: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c9XO4; else goto c9XO3;
       c9XO4: // global
           HpAlloc = 80;
           goto c9XO1;
       c9XO1: // global
           R1 = _s9Xt4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XO3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xt4::P64;
           _s9Xt0::P64 = P64[_s9Xt4::P64 + 16];
           I64[Hp - 72] = sat_s9Xt2_info;
           P64[Hp - 56] = _s9Xt0::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl1_r9XsX_closure;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.mkTextEncoding2_entry() //  [R2]
         { info_tbl: [(c9XO5,
                       label: GHC.IO.Encoding.mkTextEncoding2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XO5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XO9; else goto c9XO8;
       c9XO9: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9XO8: // global
           I64[Hp - 16] = sat_s9Xt4_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.134226884 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule4_bytes" {
     GHC.IO.Encoding.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.134761009 UTC

[section ""data" . GHC.IO.Encoding.$trModule3_closure" {
     GHC.IO.Encoding.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.135293916 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule2_bytes" {
     GHC.IO.Encoding.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.135827392 UTC

[section ""data" . GHC.IO.Encoding.$trModule1_closure" {
     GHC.IO.Encoding.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.13636016 UTC

[section ""data" . GHC.IO.Encoding.$trModule_closure" {
     GHC.IO.Encoding.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.$trModule3_closure+1;
         const GHC.IO.Encoding.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.136883057 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding33_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding33_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49,58,49,57,56,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.137638347 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding32_closure" {
     GHC.IO.Encoding.getFileSystemEncoding32_closure:
         const GHC.IO.Encoding.getFileSystemEncoding32_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding32_entry() //  [R1]
         { info_tbl: [(c9XOg,
                       label: GHC.IO.Encoding.getFileSystemEncoding32_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XOg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XOh; else goto c9XOi;
       c9XOh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XOi: // global
           (_c9XOd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XOd::I64 == 0) goto c9XOf; else goto c9XOe;
       c9XOf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XOe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XOd::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.138517666 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding31_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding31_bytes:
         I8[] [105,115,111,45,105,114,45,49,48,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.139226557 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding30_closure" {
     GHC.IO.Encoding.getFileSystemEncoding30_closure:
         const GHC.IO.Encoding.getFileSystemEncoding30_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding30_entry() //  [R1]
         { info_tbl: [(c9XOp,
                       label: GHC.IO.Encoding.getFileSystemEncoding30_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XOp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XOq; else goto c9XOr;
       c9XOq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XOr: // global
           (_c9XOm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XOm::I64 == 0) goto c9XOo; else goto c9XOn;
       c9XOo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XOn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XOm::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.140073011 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding29_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding29_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.140788037 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding28_closure" {
     GHC.IO.Encoding.getFileSystemEncoding28_closure:
         const GHC.IO.Encoding.getFileSystemEncoding28_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding28_entry() //  [R1]
         { info_tbl: [(c9XOy,
                       label: GHC.IO.Encoding.getFileSystemEncoding28_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XOy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XOz; else goto c9XOA;
       c9XOz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XOA: // global
           (_c9XOv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XOv::I64 == 0) goto c9XOx; else goto c9XOw;
       c9XOx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XOw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XOv::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding29_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.14168487 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding27_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding27_bytes:
         I8[] [73,83,79,45,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.142345099 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding26_closure" {
     GHC.IO.Encoding.getFileSystemEncoding26_closure:
         const GHC.IO.Encoding.getFileSystemEncoding26_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding26_entry() //  [R1]
         { info_tbl: [(c9XOH,
                       label: GHC.IO.Encoding.getFileSystemEncoding26_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XOH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XOI; else goto c9XOJ;
       c9XOI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XOJ: // global
           (_c9XOE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XOE::I64 == 0) goto c9XOG; else goto c9XOF;
       c9XOG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XOF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XOE::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding27_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.143223811 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding25_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding25_bytes:
         I8[] [108,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.143926732 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding24_closure" {
     GHC.IO.Encoding.getFileSystemEncoding24_closure:
         const GHC.IO.Encoding.getFileSystemEncoding24_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding24_entry() //  [R1]
         { info_tbl: [(c9XOQ,
                       label: GHC.IO.Encoding.getFileSystemEncoding24_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XOQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XOR; else goto c9XOS;
       c9XOR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XOS: // global
           (_c9XON::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XON::I64 == 0) goto c9XOP; else goto c9XOO;
       c9XOP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XOO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XON::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding25_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.144776054 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding23_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding23_bytes:
         I8[] [108,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.146005767 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding22_closure" {
     GHC.IO.Encoding.getFileSystemEncoding22_closure:
         const GHC.IO.Encoding.getFileSystemEncoding22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding22_entry() //  [R1]
         { info_tbl: [(c9XOZ,
                       label: GHC.IO.Encoding.getFileSystemEncoding22_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XOZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XP0; else goto c9XP1;
       c9XP0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XP1: // global
           (_c9XOW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XOW::I64 == 0) goto c9XOY; else goto c9XOX;
       c9XOY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XOX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XOW::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding23_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.146904871 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding21_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding21_bytes:
         I8[] [73,66,77,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.147603902 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding20_closure" {
     GHC.IO.Encoding.getFileSystemEncoding20_closure:
         const GHC.IO.Encoding.getFileSystemEncoding20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding20_entry() //  [R1]
         { info_tbl: [(c9XP8,
                       label: GHC.IO.Encoding.getFileSystemEncoding20_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XP8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XP9; else goto c9XPa;
       c9XP9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XPa: // global
           (_c9XP5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XP5::I64 == 0) goto c9XP7; else goto c9XP6;
       c9XP7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XP6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XP5::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.148448832 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding19_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding19_bytes:
         I8[] [67,80,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.149151444 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding18_closure" {
     GHC.IO.Encoding.getFileSystemEncoding18_closure:
         const GHC.IO.Encoding.getFileSystemEncoding18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding18_entry() //  [R1]
         { info_tbl: [(c9XPh,
                       label: GHC.IO.Encoding.getFileSystemEncoding18_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XPh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XPi; else goto c9XPj;
       c9XPi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XPj: // global
           (_c9XPe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XPe::I64 == 0) goto c9XPg; else goto c9XPf;
       c9XPg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XPf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XPe::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.15005616 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding17_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding17_bytes:
         I8[] [99,115,73,83,79,76,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.150711654 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding16_closure" {
     GHC.IO.Encoding.getFileSystemEncoding16_closure:
         const GHC.IO.Encoding.getFileSystemEncoding16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding16_entry() //  [R1]
         { info_tbl: [(c9XPq,
                       label: GHC.IO.Encoding.getFileSystemEncoding16_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XPq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XPr; else goto c9XPs;
       c9XPr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XPs: // global
           (_c9XPn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XPn::I64 == 0) goto c9XPp; else goto c9XPo;
       c9XPp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XPo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XPn::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.152885317 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding15_closure" {
     GHC.IO.Encoding.getFileSystemEncoding15_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding16_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.153498564 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding14_closure" {
     GHC.IO.Encoding.getFileSystemEncoding14_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding18_closure;
         const GHC.IO.Encoding.getFileSystemEncoding15_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.154083615 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding13_closure" {
     GHC.IO.Encoding.getFileSystemEncoding13_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding20_closure;
         const GHC.IO.Encoding.getFileSystemEncoding14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.1546329 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding12_closure" {
     GHC.IO.Encoding.getFileSystemEncoding12_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding22_closure;
         const GHC.IO.Encoding.getFileSystemEncoding13_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.15518193 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding11_closure" {
     GHC.IO.Encoding.getFileSystemEncoding11_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding24_closure;
         const GHC.IO.Encoding.getFileSystemEncoding12_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.155736741 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding10_closure" {
     GHC.IO.Encoding.getFileSystemEncoding10_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding26_closure;
         const GHC.IO.Encoding.getFileSystemEncoding11_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.156255027 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding9_closure" {
     GHC.IO.Encoding.getFileSystemEncoding9_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding28_closure;
         const GHC.IO.Encoding.getFileSystemEncoding10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.15681654 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding8_closure" {
     GHC.IO.Encoding.getFileSystemEncoding8_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding30_closure;
         const GHC.IO.Encoding.getFileSystemEncoding9_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.157785209 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding7_closure" {
     GHC.IO.Encoding.getFileSystemEncoding7_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding32_closure;
         const GHC.IO.Encoding.getFileSystemEncoding8_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.15835836 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding66_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding66_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,54,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.159142754 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding65_closure" {
     GHC.IO.Encoding.getFileSystemEncoding65_closure:
         const GHC.IO.Encoding.getFileSystemEncoding65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding65_entry() //  [R1]
         { info_tbl: [(c9XPz,
                       label: GHC.IO.Encoding.getFileSystemEncoding65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XPz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XPA; else goto c9XPB;
       c9XPA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XPB: // global
           (_c9XPw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XPw::I64 == 0) goto c9XPy; else goto c9XPx;
       c9XPy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XPx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XPw::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.160063045 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding64_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding64_bytes:
         I8[] [105,115,111,45,105,114,45,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.160767405 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding63_closure" {
     GHC.IO.Encoding.getFileSystemEncoding63_closure:
         const GHC.IO.Encoding.getFileSystemEncoding63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding63_entry() //  [R1]
         { info_tbl: [(c9XPI,
                       label: GHC.IO.Encoding.getFileSystemEncoding63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XPI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XPJ; else goto c9XPK;
       c9XPJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XPK: // global
           (_c9XPF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XPF::I64 == 0) goto c9XPH; else goto c9XPG;
       c9XPH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XPG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XPF::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.161662222 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding62_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding62_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,56,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.162360704 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding61_closure" {
     GHC.IO.Encoding.getFileSystemEncoding61_closure:
         const GHC.IO.Encoding.getFileSystemEncoding61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding61_entry() //  [R1]
         { info_tbl: [(c9XPR,
                       label: GHC.IO.Encoding.getFileSystemEncoding61_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XPR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XPS; else goto c9XPT;
       c9XPS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XPT: // global
           (_c9XPO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XPO::I64 == 0) goto c9XPQ; else goto c9XPP;
       c9XPQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XPP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XPO::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.163214107 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding60_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding60_bytes:
         I8[] [73,83,79,95,54,52,54,46,105,114,118,58,49,57,57,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.163937886 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding59_closure" {
     GHC.IO.Encoding.getFileSystemEncoding59_closure:
         const GHC.IO.Encoding.getFileSystemEncoding59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding59_entry() //  [R1]
         { info_tbl: [(c9XQ0,
                       label: GHC.IO.Encoding.getFileSystemEncoding59_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XQ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XQ1; else goto c9XQ2;
       c9XQ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XQ2: // global
           (_c9XPX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XPX::I64 == 0) goto c9XPZ; else goto c9XPY;
       c9XPZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XPY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XPX::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.164825684 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding58_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding58_bytes:
         I8[] [85,83,45,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.165563541 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding57_closure" {
     GHC.IO.Encoding.getFileSystemEncoding57_closure:
         const GHC.IO.Encoding.getFileSystemEncoding57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding57_entry() //  [R1]
         { info_tbl: [(c9XQ9,
                       label: GHC.IO.Encoding.getFileSystemEncoding57_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XQ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XQa; else goto c9XQb;
       c9XQa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XQb: // global
           (_c9XQ6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XQ6::I64 == 0) goto c9XQ8; else goto c9XQ7;
       c9XQ8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XQ7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XQ6::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.166424988 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding56_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding56_bytes:
         I8[] [117,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.167150649 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding55_closure" {
     GHC.IO.Encoding.getFileSystemEncoding55_closure:
         const GHC.IO.Encoding.getFileSystemEncoding55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding55_entry() //  [R1]
         { info_tbl: [(c9XQi,
                       label: GHC.IO.Encoding.getFileSystemEncoding55_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XQi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XQj; else goto c9XQk;
       c9XQj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XQk: // global
           (_c9XQf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XQf::I64 == 0) goto c9XQh; else goto c9XQg;
       c9XQh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XQg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XQf::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.168062766 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding54_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding54_bytes:
         I8[] [73,66,77,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.168756798 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding53_closure" {
     GHC.IO.Encoding.getFileSystemEncoding53_closure:
         const GHC.IO.Encoding.getFileSystemEncoding53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding53_entry() //  [R1]
         { info_tbl: [(c9XQr,
                       label: GHC.IO.Encoding.getFileSystemEncoding53_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XQr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XQs; else goto c9XQt;
       c9XQs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XQt: // global
           (_c9XQo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XQo::I64 == 0) goto c9XQq; else goto c9XQp;
       c9XQq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XQp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XQo::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.169663771 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding52_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding52_bytes:
         I8[] [99,112,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.170380103 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding51_closure" {
     GHC.IO.Encoding.getFileSystemEncoding51_closure:
         const GHC.IO.Encoding.getFileSystemEncoding51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding51_entry() //  [R1]
         { info_tbl: [(c9XQA,
                       label: GHC.IO.Encoding.getFileSystemEncoding51_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XQA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XQB; else goto c9XQC;
       c9XQB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XQC: // global
           (_c9XQx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XQx::I64 == 0) goto c9XQz; else goto c9XQy;
       c9XQz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XQy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XQx::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.171252293 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding50_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding50_bytes:
         I8[] [99,115,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.171966781 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding49_closure" {
     GHC.IO.Encoding.getFileSystemEncoding49_closure:
         const GHC.IO.Encoding.getFileSystemEncoding49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding49_entry() //  [R1]
         { info_tbl: [(c9XQJ,
                       label: GHC.IO.Encoding.getFileSystemEncoding49_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XQJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XQK; else goto c9XQL;
       c9XQK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XQL: // global
           (_c9XQG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XQG::I64 == 0) goto c9XQI; else goto c9XQH;
       c9XQI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XQH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XQG::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.172845794 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding48_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding48_bytes:
         I8[] [65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.173625076 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding47_closure" {
     GHC.IO.Encoding.getFileSystemEncoding47_closure:
         const GHC.IO.Encoding.getFileSystemEncoding47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding47_entry() //  [R1]
         { info_tbl: [(c9XQS,
                       label: GHC.IO.Encoding.getFileSystemEncoding47_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XQS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XQT; else goto c9XQU;
       c9XQT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XQU: // global
           (_c9XQP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XQP::I64 == 0) goto c9XQR; else goto c9XQQ;
       c9XQR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XQQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XQP::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.174481867 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding46_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding46_bytes:
         I8[] [73,83,79,54,52,54,45,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.175214933 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding45_closure" {
     GHC.IO.Encoding.getFileSystemEncoding45_closure:
         const GHC.IO.Encoding.getFileSystemEncoding45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding45_entry() //  [R1]
         { info_tbl: [(c9XR1,
                       label: GHC.IO.Encoding.getFileSystemEncoding45_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XR1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XR2; else goto c9XR3;
       c9XR2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XR3: // global
           (_c9XQY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XQY::I64 == 0) goto c9XR0; else goto c9XQZ;
       c9XR0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XQZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XQY::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.176108128 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding44_closure" {
     GHC.IO.Encoding.getFileSystemEncoding44_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding45_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.176651669 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding43_closure" {
     GHC.IO.Encoding.getFileSystemEncoding43_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding47_closure;
         const GHC.IO.Encoding.getFileSystemEncoding44_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.177196397 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding42_closure" {
     GHC.IO.Encoding.getFileSystemEncoding42_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding49_closure;
         const GHC.IO.Encoding.getFileSystemEncoding43_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.177814242 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding41_closure" {
     GHC.IO.Encoding.getFileSystemEncoding41_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding51_closure;
         const GHC.IO.Encoding.getFileSystemEncoding42_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.178408295 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding40_closure" {
     GHC.IO.Encoding.getFileSystemEncoding40_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding53_closure;
         const GHC.IO.Encoding.getFileSystemEncoding41_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.17900087 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding39_closure" {
     GHC.IO.Encoding.getFileSystemEncoding39_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding55_closure;
         const GHC.IO.Encoding.getFileSystemEncoding40_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.179582353 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding38_closure" {
     GHC.IO.Encoding.getFileSystemEncoding38_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding57_closure;
         const GHC.IO.Encoding.getFileSystemEncoding39_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.180176632 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding37_closure" {
     GHC.IO.Encoding.getFileSystemEncoding37_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding59_closure;
         const GHC.IO.Encoding.getFileSystemEncoding38_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.180760895 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding36_closure" {
     GHC.IO.Encoding.getFileSystemEncoding36_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding61_closure;
         const GHC.IO.Encoding.getFileSystemEncoding37_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.181343092 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding35_closure" {
     GHC.IO.Encoding.getFileSystemEncoding35_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding63_closure;
         const GHC.IO.Encoding.getFileSystemEncoding36_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.181895115 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding34_closure" {
     GHC.IO.Encoding.getFileSystemEncoding34_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding65_closure;
         const GHC.IO.Encoding.getFileSystemEncoding35_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.183286706 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding68_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding68_bytes:
         I8[] [85,84,70,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.184150034 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding67_closure" {
     GHC.IO.Encoding.getFileSystemEncoding67_closure:
         const GHC.IO.Encoding.getFileSystemEncoding67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding67_entry() //  [R1]
         { info_tbl: [(c9XRa,
                       label: GHC.IO.Encoding.getFileSystemEncoding67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XRa: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XRb; else goto c9XRc;
       c9XRb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XRc: // global
           (_c9XR7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XR7::I64 == 0) goto c9XR9; else goto c9XR8;
       c9XR9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XR8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XR7::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.18504673 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding70_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding70_bytes:
         I8[] [85,84,70,51,50,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.186442837 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding69_closure" {
     GHC.IO.Encoding.getFileSystemEncoding69_closure:
         const GHC.IO.Encoding.getFileSystemEncoding69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding69_entry() //  [R1]
         { info_tbl: [(c9XRj,
                       label: GHC.IO.Encoding.getFileSystemEncoding69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XRj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XRk; else goto c9XRl;
       c9XRk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XRl: // global
           (_c9XRg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XRg::I64 == 0) goto c9XRi; else goto c9XRh;
       c9XRi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XRh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XRg::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.187288929 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding72_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding72_bytes:
         I8[] [85,84,70,51,50,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.187999795 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding71_closure" {
     GHC.IO.Encoding.getFileSystemEncoding71_closure:
         const GHC.IO.Encoding.getFileSystemEncoding71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding71_entry() //  [R1]
         { info_tbl: [(c9XRs,
                       label: GHC.IO.Encoding.getFileSystemEncoding71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XRs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XRt; else goto c9XRu;
       c9XRt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XRu: // global
           (_c9XRp::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XRp::I64 == 0) goto c9XRr; else goto c9XRq;
       c9XRr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XRq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XRp::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.188848081 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding74_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding74_bytes:
         I8[] [85,84,70,51,50]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.189595468 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding73_closure" {
     GHC.IO.Encoding.getFileSystemEncoding73_closure:
         const GHC.IO.Encoding.getFileSystemEncoding73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding73_entry() //  [R1]
         { info_tbl: [(c9XRB,
                       label: GHC.IO.Encoding.getFileSystemEncoding73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XRB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XRC; else goto c9XRD;
       c9XRC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XRD: // global
           (_c9XRy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XRy::I64 == 0) goto c9XRA; else goto c9XRz;
       c9XRA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XRz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XRy::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.190492849 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding76_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding76_bytes:
         I8[] [85,84,70,49,54,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.191204741 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding75_closure" {
     GHC.IO.Encoding.getFileSystemEncoding75_closure:
         const GHC.IO.Encoding.getFileSystemEncoding75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding75_entry() //  [R1]
         { info_tbl: [(c9XRK,
                       label: GHC.IO.Encoding.getFileSystemEncoding75_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XRK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XRL; else goto c9XRM;
       c9XRL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XRM: // global
           (_c9XRH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XRH::I64 == 0) goto c9XRJ; else goto c9XRI;
       c9XRJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XRI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XRH::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.19207249 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding78_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding78_bytes:
         I8[] [85,84,70,49,54,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.192789873 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding77_closure" {
     GHC.IO.Encoding.getFileSystemEncoding77_closure:
         const GHC.IO.Encoding.getFileSystemEncoding77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding77_entry() //  [R1]
         { info_tbl: [(c9XRT,
                       label: GHC.IO.Encoding.getFileSystemEncoding77_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XRT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XRU; else goto c9XRV;
       c9XRU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XRV: // global
           (_c9XRQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XRQ::I64 == 0) goto c9XRS; else goto c9XRR;
       c9XRS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XRR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XRQ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.193664046 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding80_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding80_bytes:
         I8[] [85,84,70,49,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.194376496 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding79_closure" {
     GHC.IO.Encoding.getFileSystemEncoding79_closure:
         const GHC.IO.Encoding.getFileSystemEncoding79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding79_entry() //  [R1]
         { info_tbl: [(c9XS2,
                       label: GHC.IO.Encoding.getFileSystemEncoding79_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XS2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XS3; else goto c9XS4;
       c9XS3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XS4: // global
           (_c9XRZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XRZ::I64 == 0) goto c9XS1; else goto c9XS0;
       c9XS1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XS0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XRZ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.196196338 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_go_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_go_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_go_info;
         const 0;
 },
 sat_s9Xtl_entry() //  [R1]
         { info_tbl: [(c9XSq,
                       label: sat_s9Xtl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XSq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XSr; else goto c9XSs;
       c9XSr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XSs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Xtk_entry() //  [R1]
         { info_tbl: [(c9XSz,
                       label: sat_s9Xtk_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XSz: // global
           _s9Xtk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9XSA; else goto c9XSB;
       c9XSB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9XSD; else goto c9XSC;
       c9XSD: // global
           HpAlloc = 16;
           goto c9XSA;
       c9XSA: // global
           R1 = _s9Xtk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XSC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xtk::P64;
           (_s9Xtg::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[_s9Xtk::P64 + 16]);
           if (_s9Xtg::I64 > 1114111) goto c9XSN; else goto c9XSU;
       c9XSN: // global
           Hp = Hp - 16;
           R2 = _s9Xtg::I64;
           Sp = Sp - 16;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c9XSU: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s9Xtg::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding_go_entry() //  [R2]
         { info_tbl: [(c9XSZ,
                       label: GHC.IO.Encoding.getFileSystemEncoding_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XSZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XT0; else goto u9XTc;
       c9XT0: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u9XTc: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c9XS6() args: 0, res: 0, upd: 0;
     }
 },
 _c9XS6() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XS6: // global
           _s9Xt5::P64 = P64[Sp];
           I64[Sp] = block_c9XS9_info;
           R1 = _s9Xt5::P64;
           if (R1 & 7 != 0) goto u9XTe; else goto c9XSa;
       u9XTe: // global
           call _c9XS9(R1) args: 0, res: 0, upd: 0;
       c9XSa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XS9() //  [R1]
         { info_tbl: [(c9XS9,
                       label: block_c9XS9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XS9: // global
           if (R1 & 7 == 1) goto c9XSW; else goto c9XSX;
       c9XSW: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XSX: // global
           I64[Sp - 8] = block_c9XSf_info;
           _s9Xt8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s9Xt8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XTf; else goto c9XSg;
       u9XTf: // global
           call _c9XSf(R1) args: 0, res: 0, upd: 0;
       c9XSg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XSf() //  [R1]
         { info_tbl: [(c9XSf,
                       label: block_c9XSf_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XSf: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9XT7; else goto c9XT6;
       c9XT7: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XT6: // global
           _s9Xt8::P64 = P64[Sp + 8];
           _s9Xtb::I64 = I64[R1 + 7];
           if (_s9Xtb::I64 != 45) goto c9XTa; else goto c9XTb;
       c9XTa: // global
           I64[Hp - 64] = sat_s9Xtl_info;
           P64[Hp - 48] = _s9Xt8::P64;
           I64[Hp - 40] = sat_s9Xtk_info;
           I64[Hp - 24] = _s9Xtb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XTb: // global
           Hp = Hp - 72;
           P64[Sp + 8] = _s9Xt8::P64;
           Sp = Sp + 8;
           call _c9XS6() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.199474323 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding6_closure" {
     GHC.IO.Encoding.getFileSystemEncoding6_closure:
         const GHC.IO.Encoding.getFileSystemEncoding6_info;
         const 0;
 },
 sat_s9Xtq_entry() //  [R1]
         { info_tbl: [(c9XTz,
                       label: sat_s9Xtq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XTz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XTA; else goto c9XTB;
       c9XTA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XTB: // global
           I64[Sp - 8] = block_c9XTq_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XTQ; else goto c9XTr;
       u9XTQ: // global
           call _c9XTq(R1) args: 0, res: 0, upd: 0;
       c9XTr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XTq() //  [R1]
         { info_tbl: [(c9XTq,
                       label: block_c9XTq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XTq: // global
           _c9XTy::P64 = R1 & 7;
           if (_c9XTy::P64 < 3) goto u9XTO; else goto u9XTP;
       u9XTO: // global
           if (_c9XTy::P64 < 2) goto c9XTu; else goto c9XTv;
       c9XTu: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XTv: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9XTP: // global
           if (_c9XTy::P64 < 4) goto c9XTw; else goto c9XTx;
       c9XTw: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9XTx: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding6_entry() //  [R2, R3]
         { info_tbl: [(c9XTT,
                       label: GHC.IO.Encoding.getFileSystemEncoding6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XTT: // global
           _s9Xtn::P64 = R3;
           _s9Xtm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9XTU; else goto c9XTV;
       c9XTV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XTX; else goto c9XTW;
       c9XTX: // global
           HpAlloc = 24;
           goto c9XTU;
       c9XTU: // global
           R3 = _s9Xtn::P64;
           R2 = _s9Xtm::P64;
           R1 = GHC.IO.Encoding.getFileSystemEncoding6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9XTW: // global
           I64[Hp - 16] = sat_s9Xtq_info;
           P64[Hp] = _s9Xtm::P64;
           I64[Sp - 8] = block_c9XTR_info;
           R3 = Hp - 16;
           R2 = _s9Xtn::P64;
           Sp = Sp - 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XTR() //  [R1]
         { info_tbl: [(c9XTR,
                       label: block_c9XTR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XTR: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.203654393 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding5_closure" {
     GHC.IO.Encoding.getFileSystemEncoding5_closure:
         const GHC.IO.Encoding.getFileSystemEncoding5_info;
         const 0;
 },
 sat_s9XtK_entry() //  [R1]
         { info_tbl: [(c9XUO,
                       label: sat_s9XtK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XUP; else goto c9XUQ;
       c9XUP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XUQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkLatin1_checked_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtL_entry() //  [R1]
         { info_tbl: [(c9XUX,
                       label: sat_s9XtL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XUY; else goto c9XUZ;
       c9XUY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XUZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkAscii_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtM_entry() //  [R1]
         { info_tbl: [(c9XV6,
                       label: sat_s9XtM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XV6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XV7; else goto c9XV8;
       c9XV7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XV8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF8.mkUTF8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtN_entry() //  [R1]
         { info_tbl: [(c9XVf,
                       label: sat_s9XtN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XVf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XVg; else goto c9XVh;
       c9XVg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XVh: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtO_entry() //  [R1]
         { info_tbl: [(c9XVo,
                       label: sat_s9XtO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XVo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XVp; else goto c9XVq;
       c9XVp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XVq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtP_entry() //  [R1]
         { info_tbl: [(c9XVx,
                       label: sat_s9XtP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XVx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XVy; else goto c9XVz;
       c9XVy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XVz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtQ_entry() //  [R1]
         { info_tbl: [(c9XVG,
                       label: sat_s9XtQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XVG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XVH; else goto c9XVI;
       c9XVH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XVI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtR_entry() //  [R1]
         { info_tbl: [(c9XVP,
                       label: sat_s9XtR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XVP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XVQ; else goto c9XVR;
       c9XVQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XVR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtS_entry() //  [R1]
         { info_tbl: [(c9XVY,
                       label: sat_s9XtS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XVY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XVZ; else goto c9XW0;
       c9XVZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XW0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding5_entry() //  [R2, R3]
         { info_tbl: [(c9XW1,
                       label: GHC.IO.Encoding.getFileSystemEncoding5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XW1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9XW2; else goto c9XW3;
       c9XW2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9XW3: // global
           I64[Sp - 24] = block_c9XU5_info;
           _s9Xts::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s9Xts::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XU5() //  [R1]
         { info_tbl: [(c9XU5,
                       label: block_c9XU5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XU5: // global
           I64[Sp - 8] = block_c9XU9_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding79_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XU9() //  [R1]
         { info_tbl: [(c9XU9,
                       label: block_c9XU9_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XU9: // global
           if (R1 & 7 == 1) goto c9XW7; else goto c9XXi;
       c9XW7: // global
           I64[Sp] = block_c9XUd_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding77_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XXi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XXl; else goto c9XXk;
       c9XXl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XXk: // global
           I64[Hp - 16] = sat_s9XtS_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUd() //  [R1]
         { info_tbl: [(c9XUd,
                       label: block_c9XUd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUd: // global
           if (R1 & 7 == 1) goto c9XWa; else goto c9XXe;
       c9XWa: // global
           I64[Sp] = block_c9XUh_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding75_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XXe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XXh; else goto c9XXg;
       c9XXh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XXg: // global
           I64[Hp - 16] = sat_s9XtR_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUh() //  [R1]
         { info_tbl: [(c9XUh,
                       label: block_c9XUh_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUh: // global
           if (R1 & 7 == 1) goto c9XWd; else goto c9XXa;
       c9XWd: // global
           I64[Sp] = block_c9XUl_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding73_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XXa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XXd; else goto c9XXc;
       c9XXd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XXc: // global
           I64[Hp - 16] = sat_s9XtQ_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUl() //  [R1]
         { info_tbl: [(c9XUl,
                       label: block_c9XUl_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUl: // global
           if (R1 & 7 == 1) goto c9XWg; else goto c9XX6;
       c9XWg: // global
           I64[Sp] = block_c9XUp_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding71_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XX6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XX9; else goto c9XX8;
       c9XX9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XX8: // global
           I64[Hp - 16] = sat_s9XtP_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUp() //  [R1]
         { info_tbl: [(c9XUp,
                       label: block_c9XUp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUp: // global
           if (R1 & 7 == 1) goto c9XWj; else goto c9XX2;
       c9XWj: // global
           I64[Sp] = block_c9XUt_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding69_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XX2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XX5; else goto c9XX4;
       c9XX5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XX4: // global
           I64[Hp - 16] = sat_s9XtO_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUt() //  [R1]
         { info_tbl: [(c9XUt,
                       label: block_c9XUt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUt: // global
           if (R1 & 7 == 1) goto c9XWm; else goto c9XWY;
       c9XWm: // global
           _s9Xtv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9XUx_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding67_closure;
           R2 = _s9Xtv::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XWY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XX1; else goto c9XX0;
       c9XX1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XX0: // global
           I64[Hp - 16] = sat_s9XtN_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUx() //  [R1]
         { info_tbl: [(c9XUx,
                       label: block_c9XUx_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUx: // global
           if (R1 & 7 == 1) goto c9XWp; else goto c9XWU;
       c9XWp: // global
           I64[Sp] = block_c9XUB_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding34_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9XWU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XWX; else goto c9XWW;
       c9XWX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XWW: // global
           I64[Hp - 16] = sat_s9XtM_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUB() //  [R1]
         { info_tbl: [(c9XUB,
                       label: block_c9XUB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUB: // global
           if (R1 & 7 == 1) goto c9XWs; else goto c9XWQ;
       c9XWs: // global
           I64[Sp] = block_c9XUF_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding7_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9XWQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XWT; else goto c9XWS;
       c9XWT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XWS: // global
           I64[Hp - 16] = sat_s9XtL_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XUF() //  [R1]
         { info_tbl: [(c9XUF,
                       label: block_c9XUF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XUF: // global
           _s9Xts::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c9XWz; else goto c9XWM;
       c9XWz: // global
           I64[Sp] = block_c9XWu_info;
           R3 = P64[Sp + 16];
           R2 = _s9Xts::P64;
           call GHC.IO.Encoding.Iconv.iconvEncoding2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       c9XWM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9XWP; else goto c9XWO;
       c9XWP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9XWO: // global
           I64[Hp - 16] = sat_s9XtK_info;
           P64[Hp] = _s9Xts::P64;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9XWu() //  [R1]
         { info_tbl: [(c9XWu,
                       label: block_c9XWu_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XWu: // global
           I64[Sp] = block_c9XWw_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9XXw; else goto c9XWB;
       u9XXw: // global
           call _c9XWw(R1) args: 0, res: 0, upd: 0;
       c9XWB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XWw() //  [R1]
         { info_tbl: [(c9XWw,
                       label: block_c9XWw_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XWw: // global
           if (R1 & 7 == 1) goto c9XWH; else goto c9XWL;
       c9XWH: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding6_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9XWL: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.210389816 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding9_closure" {
     GHC.IO.Encoding.mkTextEncoding9_closure:
         const GHC.IO.Encoding.mkTextEncoding9_info;
 },
 GHC.IO.Encoding.mkTextEncoding9_entry() //  [R2]
         { info_tbl: [(c9XXE,
                       label: GHC.IO.Encoding.mkTextEncoding9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XXE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XXF; else goto c9XXG;
       c9XXF: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9XXG: // global
           I64[Sp - 8] = block_c9XXB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XXO; else goto c9XXC;
       u9XXO: // global
           call _c9XXB(R1) args: 0, res: 0, upd: 0;
       c9XXC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XXB() //  [R1]
         { info_tbl: [(c9XXB,
                       label: block_c9XXB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XXB: // global
           if (I64[R1 + 7] == 47) goto c9XXN; else goto c9XXM;
       c9XXN: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9XXM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.211388841 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding4_bytes" {
     GHC.IO.Encoding.mkTextEncoding4_bytes:
         I8[] [47,47,84,82,65,78,83,76,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.212162349 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding3_closure" {
     GHC.IO.Encoding.mkTextEncoding3_closure:
         const GHC.IO.Encoding.mkTextEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding3_entry() //  [R1]
         { info_tbl: [(c9XXV,
                       label: GHC.IO.Encoding.mkTextEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XXV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XXW; else goto c9XXX;
       c9XXW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XXX: // global
           (_c9XXS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XXS::I64 == 0) goto c9XXU; else goto c9XXT;
       c9XXU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XXT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XXS::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.213029806 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding6_bytes" {
     GHC.IO.Encoding.mkTextEncoding6_bytes:
         I8[] [47,47,82,79,85,78,68,84,82,73,80]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.213762099 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding5_closure" {
     GHC.IO.Encoding.mkTextEncoding5_closure:
         const GHC.IO.Encoding.mkTextEncoding5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding5_entry() //  [R1]
         { info_tbl: [(c9XY4,
                       label: GHC.IO.Encoding.mkTextEncoding5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XY4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XY5; else goto c9XY6;
       c9XY5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XY6: // global
           (_c9XY1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XY1::I64 == 0) goto c9XY3; else goto c9XY2;
       c9XY3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XY2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XY1::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.214658044 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding8_bytes" {
     GHC.IO.Encoding.mkTextEncoding8_bytes:
         I8[] [47,47,73,71,78,79,82,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.21536971 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding7_closure" {
     GHC.IO.Encoding.mkTextEncoding7_closure:
         const GHC.IO.Encoding.mkTextEncoding7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding7_entry() //  [R1]
         { info_tbl: [(c9XYd,
                       label: GHC.IO.Encoding.mkTextEncoding7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XYd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9XYe; else goto c9XYf;
       c9XYe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XYf: // global
           (_c9XYa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XYa::I64 == 0) goto c9XYc; else goto c9XYb;
       c9XYc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XYb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XYa::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.216844918 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding1_closure" {
     GHC.IO.Encoding.mkTextEncoding1_closure:
         const GHC.IO.Encoding.mkTextEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding1_entry() //  [R2]
         { info_tbl: [(c9XYt,
                       label: GHC.IO.Encoding.mkTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XYt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9XYu; else goto c9XYv;
       c9XYu: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9XYv: // global
           I64[Sp - 16] = block_c9XYk_info;
           R3 = R2;
           _s9XtX::P64 = R2;
           R2 = GHC.IO.Encoding.mkTextEncoding9_closure+1;
           P64[Sp - 8] = _s9XtX::P64;
           Sp = Sp - 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XYk() //  [R1, R2]
         { info_tbl: [(c9XYk,
                       label: block_c9XYk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XYk: // global
           I64[Sp - 8] = block_c9XYm_info;
           _s9Xu0::P64 = R1;
           R1 = R2;
           P64[Sp] = _s9Xu0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9XZd; else goto c9XYn;
       u9XZd: // global
           call _c9XYm(R1) args: 0, res: 0, upd: 0;
       c9XYn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XYm() //  [R1]
         { info_tbl: [(c9XYm,
                       label: block_c9XYm_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XYm: // global
           if (R1 & 7 == 1) goto c9XYq; else goto c9XYr;
       c9XYq: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9XYr: // global
           I64[Sp - 8] = block_c9XYC_info;
           R3 = GHC.IO.Encoding.mkTextEncoding7_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9XYC() //  [R1]
         { info_tbl: [(c9XYC,
                       label: block_c9XYC_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XYC: // global
           if (R1 & 7 == 1) goto c9XYK; else goto c9XZ9;
       c9XYK: // global
           I64[Sp] = block_c9XYH_info;
           R3 = GHC.IO.Encoding.mkTextEncoding5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XZ9: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9XYH() //  [R1]
         { info_tbl: [(c9XYH,
                       label: block_c9XYH_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XYH: // global
           if (R1 & 7 == 1) goto c9XYR; else goto c9XZ5;
       c9XYR: // global
           _s9Xu2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9XYO_info;
           R3 = GHC.IO.Encoding.mkTextEncoding3_closure;
           R2 = _s9Xu2::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9XZ5: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9XYO() //  [R1]
         { info_tbl: [(c9XYO,
                       label: block_c9XYO_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XYO: // global
           if (R1 & 7 == 1) goto c9XYX; else goto c9XZ1;
       c9XYX: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
       c9XZ1: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.TransliterateCodingFailure_closure+3;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.218993203 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding_closure" {
     GHC.IO.Encoding.mkTextEncoding_closure:
         const GHC.IO.Encoding.mkTextEncoding_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding_entry() //  [R2]
         { info_tbl: [(c9XZi,
                       label: GHC.IO.Encoding.mkTextEncoding_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZi: // global
           R2 = R2;
           call GHC.IO.Encoding.mkTextEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.219831105 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding4_closure" {
     GHC.IO.Encoding.getForeignEncoding4_closure:
         const GHC.IO.Encoding.getForeignEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding4_entry() //  []
         { info_tbl: [(c9XZr,
                       label: GHC.IO.Encoding.getForeignEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9XZs; else goto c9XZt;
       c9XZs: // global
           R1 = GHC.IO.Encoding.getForeignEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9XZt: // global
           I64[Sp - 8] = block_c9XZp_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XZp() //  []
         { info_tbl: [(c9XZp,
                       label: block_c9XZp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZp: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.22097471 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding3_closure" {
     GHC.IO.Encoding.getForeignEncoding3_closure:
         const GHC.IO.Encoding.getForeignEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding3_entry() //  [R1]
         { info_tbl: [(c9XZD,
                       label: GHC.IO.Encoding.getForeignEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9XZE; else goto c9XZF;
       c9XZE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9XZF: // global
           (_c9XZy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9XZy::I64 == 0) goto c9XZA; else goto c9XZz;
       c9XZA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9XZz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9XZy::I64;
           I64[Sp - 24] = block_c9XZB_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9XZB() //  [R1]
         { info_tbl: [(c9XZB,
                       label: block_c9XZB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZB: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.222524542 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding2_closure" {
     GHC.IO.Encoding.getForeignEncoding2_closure:
         const GHC.IO.Encoding.getForeignEncoding2_info;
         const 0;
 },
 sat_s9Xun_entry() //  [R1, R2]
         { info_tbl: [(c9XZX,
                       label: sat_s9Xun_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZX: // global
           _s9Xuh::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xuh::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xuh::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Xuj_entry() //  [R1]
         { info_tbl: [(c9Y06,
                       label: sat_s9Xuj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y06: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getForeignEncoding2_entry() //  []
         { info_tbl: [(c9Y0a,
                       label: GHC.IO.Encoding.getForeignEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y0a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Y0b; else goto c9Y0c;
       c9Y0b: // global
           R1 = GHC.IO.Encoding.getForeignEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Y0c: // global
           I64[Sp - 8] = block_c9XZL_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9XZL() //  []
         { info_tbl: [(c9XZL,
                       label: block_c9XZL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZL: // global
           I64[Sp] = block_c9XZN_info;
           R1 = GHC.IO.Encoding.getForeignEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9XZN() //  [R1]
         { info_tbl: [(c9XZN,
                       label: block_c9XZN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9XZN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Y0g; else goto c9Y0f;
       c9Y0g: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Y0f: // global
           I64[Hp - 48] = sat_s9Xun_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xuj_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.22422644 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding1_closure" {
     GHC.IO.Encoding.getForeignEncoding1_closure:
         const GHC.IO.Encoding.getForeignEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding1_entry() //  [R1]
         { info_tbl: [(c9Y0p,
                       label: GHC.IO.Encoding.getForeignEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y0p: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y0q; else goto c9Y0r;
       c9Y0q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y0r: // global
           (_c9Y0k::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y0k::I64 == 0) goto c9Y0m; else goto c9Y0l;
       c9Y0m: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y0l: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y0k::I64;
           I64[Sp - 24] = block_c9Y0n_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Y0n() //  [R1]
         { info_tbl: [(c9Y0n,
                       label: block_c9Y0n_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y0n: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.225535457 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding_closure" {
     GHC.IO.Encoding.getForeignEncoding_closure:
         const GHC.IO.Encoding.getForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9Y0C,
                       label: GHC.IO.Encoding.getForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y0C: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y0D; else goto c9Y0E;
       c9Y0D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y0E: // global
           (_c9Y0w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y0w::I64 == 0) goto c9Y0y; else goto c9Y0x;
       c9Y0y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y0x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y0w::I64;
           I64[Sp - 24] = block_c9Y0z_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y0I; else goto c9Y0A;
       u9Y0I: // global
           call _c9Y0z(R1) args: 0, res: 0, upd: 0;
       c9Y0A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y0z() //  [R1]
         { info_tbl: [(c9Y0z,
                       label: block_c9Y0z_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y0z: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.226840566 UTC

[section ""data" . GHC.IO.Encoding.setForeignEncoding_closure" {
     GHC.IO.Encoding.setForeignEncoding_closure:
         const GHC.IO.Encoding.setForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9Y0S,
                       label: GHC.IO.Encoding.setForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y0S: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y0T; else goto c9Y0U;
       c9Y0T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y0U: // global
           (_c9Y0M::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y0M::I64 == 0) goto c9Y0O; else goto c9Y0N;
       c9Y0O: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y0N: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y0M::I64;
           I64[Sp - 24] = block_c9Y0P_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y0Y; else goto c9Y0Q;
       u9Y0Y: // global
           call _c9Y0P(R1) args: 0, res: 0, upd: 0;
       c9Y0Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y0P() //  [R1]
         { info_tbl: [(c9Y0P,
                       label: block_c9Y0P_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y0P: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.228059575 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding4_closure" {
     GHC.IO.Encoding.getFileSystemEncoding4_closure:
         const GHC.IO.Encoding.getFileSystemEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding4_entry() //  []
         { info_tbl: [(c9Y15,
                       label: GHC.IO.Encoding.getFileSystemEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y15: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Y16; else goto c9Y17;
       c9Y16: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Y17: // global
           I64[Sp - 8] = block_c9Y13_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Y13() //  []
         { info_tbl: [(c9Y13,
                       label: block_c9Y13_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y13: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.229148788 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding3_closure" {
     GHC.IO.Encoding.getFileSystemEncoding3_closure:
         const GHC.IO.Encoding.getFileSystemEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding3_entry() //  [R1]
         { info_tbl: [(c9Y1h,
                       label: GHC.IO.Encoding.getFileSystemEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y1h: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y1i; else goto c9Y1j;
       c9Y1i: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y1j: // global
           (_c9Y1c::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y1c::I64 == 0) goto c9Y1e; else goto c9Y1d;
       c9Y1e: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y1d: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y1c::I64;
           I64[Sp - 24] = block_c9Y1f_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Y1f() //  [R1]
         { info_tbl: [(c9Y1f,
                       label: block_c9Y1f_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y1f: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.230714755 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding2_closure" {
     GHC.IO.Encoding.getFileSystemEncoding2_closure:
         const GHC.IO.Encoding.getFileSystemEncoding2_info;
         const 0;
 },
 sat_s9XuN_entry() //  [R1, R2]
         { info_tbl: [(c9Y1B,
                       label: sat_s9XuN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y1B: // global
           _s9XuH::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9XuH::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9XuH::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9XuJ_entry() //  [R1]
         { info_tbl: [(c9Y1K,
                       label: sat_s9XuJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y1K: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding2_entry() //  []
         { info_tbl: [(c9Y1O,
                       label: GHC.IO.Encoding.getFileSystemEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y1O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Y1P; else goto c9Y1Q;
       c9Y1P: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Y1Q: // global
           I64[Sp - 8] = block_c9Y1p_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Y1p() //  []
         { info_tbl: [(c9Y1p,
                       label: block_c9Y1p_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y1p: // global
           I64[Sp] = block_c9Y1r_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Y1r() //  [R1]
         { info_tbl: [(c9Y1r,
                       label: block_c9Y1r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y1r: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Y1U; else goto c9Y1T;
       c9Y1U: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Y1T: // global
           I64[Hp - 48] = sat_s9XuN_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9XuJ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.232437405 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding1_closure" {
     GHC.IO.Encoding.getFileSystemEncoding1_closure:
         const GHC.IO.Encoding.getFileSystemEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding1_entry() //  [R1]
         { info_tbl: [(c9Y23,
                       label: GHC.IO.Encoding.getFileSystemEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y23: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y24; else goto c9Y25;
       c9Y24: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y25: // global
           (_c9Y1Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y1Y::I64 == 0) goto c9Y20; else goto c9Y1Z;
       c9Y20: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y1Z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y1Y::I64;
           I64[Sp - 24] = block_c9Y21_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Y21() //  [R1]
         { info_tbl: [(c9Y21,
                       label: block_c9Y21_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y21: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.233722654 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9Y2g,
                       label: GHC.IO.Encoding.getFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y2h; else goto c9Y2i;
       c9Y2h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y2i: // global
           (_c9Y2a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y2a::I64 == 0) goto c9Y2c; else goto c9Y2b;
       c9Y2c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y2b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y2a::I64;
           I64[Sp - 24] = block_c9Y2d_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y2m; else goto c9Y2e;
       u9Y2m: // global
           call _c9Y2d(R1) args: 0, res: 0, upd: 0;
       c9Y2e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y2d() //  [R1]
         { info_tbl: [(c9Y2d,
                       label: block_c9Y2d_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2d: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.234775778 UTC

[section ""data" . GHC.IO.Encoding.argvEncoding_closure" {
     GHC.IO.Encoding.argvEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.235607937 UTC

[section ""data" . GHC.IO.Encoding.setFileSystemEncoding_closure" {
     GHC.IO.Encoding.setFileSystemEncoding_closure:
         const GHC.IO.Encoding.setFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9Y2w,
                       label: GHC.IO.Encoding.setFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2w: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y2x; else goto c9Y2y;
       c9Y2x: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y2y: // global
           (_c9Y2q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y2q::I64 == 0) goto c9Y2s; else goto c9Y2r;
       c9Y2s: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y2r: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y2q::I64;
           I64[Sp - 24] = block_c9Y2t_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y2C; else goto c9Y2u;
       u9Y2C: // global
           call _c9Y2t(R1) args: 0, res: 0, upd: 0;
       c9Y2u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y2t() //  [R1]
         { info_tbl: [(c9Y2t,
                       label: block_c9Y2t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2t: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.236844709 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding1_closure" {
     GHC.IO.Encoding.initLocaleEncoding1_closure:
         const GHC.IO.Encoding.initLocaleEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding1_entry() //  []
         { info_tbl: [(c9Y2J,
                       label: GHC.IO.Encoding.initLocaleEncoding1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Y2K; else goto c9Y2L;
       c9Y2K: // global
           R1 = GHC.IO.Encoding.initLocaleEncoding1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Y2L: // global
           I64[Sp - 8] = block_c9Y2H_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Y2H() //  []
         { info_tbl: [(c9Y2H,
                       label: block_c9Y2H_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2H: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.2383361 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding_closure" {
     GHC.IO.Encoding.initLocaleEncoding_closure:
         const GHC.IO.Encoding.initLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9Y2V,
                       label: GHC.IO.Encoding.initLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2V: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y2W; else goto c9Y2X;
       c9Y2W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y2X: // global
           (_c9Y2Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y2Q::I64 == 0) goto c9Y2S; else goto c9Y2R;
       c9Y2S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y2R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y2Q::I64;
           I64[Sp - 24] = block_c9Y2T_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.initLocaleEncoding1_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Y2T() //  [R1]
         { info_tbl: [(c9Y2T,
                       label: block_c9Y2T_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y2T: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.239833747 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding2_closure" {
     GHC.IO.Encoding.getLocaleEncoding2_closure:
         const GHC.IO.Encoding.getLocaleEncoding2_info;
         const 0;
 },
 sat_s9Xvd_entry() //  [R1, R2]
         { info_tbl: [(c9Y3f,
                       label: sat_s9Xvd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y3f: // global
           _s9Xv7::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xv7::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xv7::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Xv9_entry() //  [R1]
         { info_tbl: [(c9Y3o,
                       label: sat_s9Xv9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y3o: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getLocaleEncoding2_entry() //  []
         { info_tbl: [(c9Y3s,
                       label: GHC.IO.Encoding.getLocaleEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y3s: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Y3t; else goto c9Y3u;
       c9Y3t: // global
           R1 = GHC.IO.Encoding.getLocaleEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Y3u: // global
           I64[Sp - 8] = block_c9Y33_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Y33() //  []
         { info_tbl: [(c9Y33,
                       label: block_c9Y33_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y33: // global
           I64[Sp] = block_c9Y35_info;
           R1 = GHC.IO.Encoding.initLocaleEncoding_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Y35() //  [R1]
         { info_tbl: [(c9Y35,
                       label: block_c9Y35_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y35: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Y3y; else goto c9Y3x;
       c9Y3y: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Y3x: // global
           I64[Hp - 48] = sat_s9Xvd_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xv9_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.241675462 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding1_closure" {
     GHC.IO.Encoding.getLocaleEncoding1_closure:
         const GHC.IO.Encoding.getLocaleEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding1_entry() //  [R1]
         { info_tbl: [(c9Y3H,
                       label: GHC.IO.Encoding.getLocaleEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y3H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y3I; else goto c9Y3J;
       c9Y3I: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y3J: // global
           (_c9Y3C::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y3C::I64 == 0) goto c9Y3E; else goto c9Y3D;
       c9Y3E: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y3D: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y3C::I64;
           I64[Sp - 24] = block_c9Y3F_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getLocaleEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Y3F() //  [R1]
         { info_tbl: [(c9Y3F,
                       label: block_c9Y3F_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y3F: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.244725713 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding_closure" {
     GHC.IO.Encoding.getLocaleEncoding_closure:
         const GHC.IO.Encoding.getLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9Y3U,
                       label: GHC.IO.Encoding.getLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y3U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y3V; else goto c9Y3W;
       c9Y3V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y3W: // global
           (_c9Y3O::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y3O::I64 == 0) goto c9Y3Q; else goto c9Y3P;
       c9Y3Q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y3P: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y3O::I64;
           I64[Sp - 24] = block_c9Y3R_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y40; else goto c9Y3S;
       u9Y40: // global
           call _c9Y3R(R1) args: 0, res: 0, upd: 0;
       c9Y3S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y3R() //  [R1]
         { info_tbl: [(c9Y3R,
                       label: block_c9Y3R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y3R: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.246068275 UTC

[section ""data" . GHC.IO.Encoding.setLocaleEncoding_closure" {
     GHC.IO.Encoding.setLocaleEncoding_closure:
         const GHC.IO.Encoding.setLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9Y4a,
                       label: GHC.IO.Encoding.setLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y4a: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y4b; else goto c9Y4c;
       c9Y4b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y4c: // global
           (_c9Y44::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y44::I64 == 0) goto c9Y46; else goto c9Y45;
       c9Y46: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y45: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y44::I64;
           I64[Sp - 24] = block_c9Y47_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y4g; else goto c9Y48;
       u9Y4g: // global
           call _c9Y47(R1) args: 0, res: 0, upd: 0;
       c9Y48: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y47() //  [R1]
         { info_tbl: [(c9Y47,
                       label: block_c9Y47_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y47: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.24761782 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode1_closure" {
     GHC.IO.Encoding.latin1_decode1_closure:
         const GHC.IO.Encoding.latin1_decode1_info;
 },
 sat_s9Xvy_entry() //  [R1]
         { info_tbl: [(c9Y4u,
                       label: sat_s9Xvy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y4u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y4y; else goto c9Y4z;
       c9Y4y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y4z: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Y4r_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y4D; else goto c9Y4s;
       u9Y4D: // global
           call _c9Y4r(R1) args: 0, res: 0, upd: 0;
       c9Y4s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y4r() //  [R1]
         { info_tbl: [(c9Y4r,
                       label: block_c9Y4r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y4r: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Y4C; else goto c9Y4B;
       c9Y4C: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Y4B: // global
           _s9Xvw::P64 = P64[R1 + 15];
           _s9Xvx::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9Xvw::P64;
           P64[Hp] = _s9Xvx::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_decode1_entry() //  [R2, R3]
         { info_tbl: [(c9Y4E,
                       label: GHC.IO.Encoding.latin1_decode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y4E: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Y4F; else goto c9Y4G;
       c9Y4F: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_decode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Y4G: // global
           I64[Sp - 8] = block_c9Y4l_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Y4l() //  [R1]
         { info_tbl: [(c9Y4l,
                       label: block_c9Y4l_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y4l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Y4J; else goto c9Y4I;
       c9Y4J: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Y4I: // global
           I64[Hp - 16] = sat_s9Xvy_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.249220502 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode_closure" {
     GHC.IO.Encoding.latin1_decode_closure:
         const GHC.IO.Encoding.latin1_decode_info;
 },
 GHC.IO.Encoding.latin1_decode_entry() //  [R2, R3]
         { info_tbl: [(c9Y4O,
                       label: GHC.IO.Encoding.latin1_decode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y4O: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_decode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.250641001 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode1_closure" {
     GHC.IO.Encoding.latin1_encode1_closure:
         const GHC.IO.Encoding.latin1_encode1_info;
 },
 sat_s9XvJ_entry() //  [R1]
         { info_tbl: [(c9Y54,
                       label: sat_s9XvJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y54: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Y58; else goto c9Y59;
       c9Y58: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y59: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Y51_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Y5d; else goto c9Y52;
       u9Y5d: // global
           call _c9Y51(R1) args: 0, res: 0, upd: 0;
       c9Y52: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Y51() //  [R1]
         { info_tbl: [(c9Y51,
                       label: block_c9Y51_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y51: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Y5c; else goto c9Y5b;
       c9Y5c: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Y5b: // global
           _s9XvH::P64 = P64[R1 + 15];
           _s9XvI::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9XvH::P64;
           P64[Hp] = _s9XvI::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_encode1_entry() //  [R2, R3]
         { info_tbl: [(c9Y5e,
                       label: GHC.IO.Encoding.latin1_encode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y5e: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Y5f; else goto c9Y5g;
       c9Y5f: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_encode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Y5g: // global
           I64[Sp - 8] = block_c9Y4V_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin3_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Y4V() //  [R1]
         { info_tbl: [(c9Y4V,
                       label: block_c9Y4V_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y4V: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Y5j; else goto c9Y5i;
       c9Y5j: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Y5i: // global
           I64[Hp - 16] = sat_s9XvJ_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.252279576 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode_closure" {
     GHC.IO.Encoding.latin1_encode_closure:
         const GHC.IO.Encoding.latin1_encode_info;
 },
 GHC.IO.Encoding.latin1_encode_entry() //  [R2, R3]
         { info_tbl: [(c9Y5o,
                       label: GHC.IO.Encoding.latin1_encode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y5o: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_encode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.252959312 UTC

[section ""relreadonly" . S9Xwj_srt" {
     S9Xwj_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_r9XsX_closure;
         const GHC.IO.Encoding.mkTextEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_go_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding6_closure;
         const GHC.IO.Encoding.Latin1.mkLatin1_checked_closure;
         const GHC.IO.Encoding.Latin1.mkAscii_closure;
         const GHC.IO.Encoding.UTF8.mkUTF8_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32le_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32be_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16le_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16be_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16_closure;
         const GHC.IO.Encoding.Iconv.iconvEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding7_closure;
         const GHC.IO.Encoding.getFileSystemEncoding34_closure;
         const GHC.IO.Encoding.getFileSystemEncoding67_closure;
         const GHC.IO.Encoding.getFileSystemEncoding69_closure;
         const GHC.IO.Encoding.getFileSystemEncoding71_closure;
         const GHC.IO.Encoding.getFileSystemEncoding73_closure;
         const GHC.IO.Encoding.getFileSystemEncoding75_closure;
         const GHC.IO.Encoding.getFileSystemEncoding77_closure;
         const GHC.IO.Encoding.getFileSystemEncoding79_closure;
         const GHC.IO.Encoding.mkTextEncoding1_closure;
         const GHC.IO.Encoding.mkTextEncoding3_closure;
         const GHC.IO.Encoding.mkTextEncoding5_closure;
         const GHC.IO.Encoding.mkTextEncoding7_closure;
         const GHC.IO.Encoding.Iconv.localeEncodingName_closure;
         const GHC.IO.Encoding.getForeignEncoding4_closure;
         const GHC.IO.Encoding.getForeignEncoding2_closure;
         const GHC.IO.Encoding.getForeignEncoding3_closure;
         const GHC.IO.Encoding.getForeignEncoding1_closure;
         const GHC.IO.Encoding.getFileSystemEncoding4_closure;
         const GHC.IO.Encoding.getFileSystemEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding2_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.254043583 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:02.255187491 UTC

[section ""data" . GHC.IO.Encoding.latin1_closure" {
     GHC.IO.Encoding.latin1_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_checked_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.25696998 UTC

[section ""data" . GHC.IO.Encoding.utf8_closure" {
     GHC.IO.Encoding.utf8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.258713489 UTC

[section ""data" . GHC.IO.Encoding.utf8_bom_closure" {
     GHC.IO.Encoding.utf8_bom_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_bom_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.26044798 UTC

[section ""data" . GHC.IO.Encoding.utf16_closure" {
     GHC.IO.Encoding.utf16_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.262410436 UTC

[section ""data" . GHC.IO.Encoding.utf16le_closure" {
     GHC.IO.Encoding.utf16le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.264101066 UTC

[section ""data" . GHC.IO.Encoding.utf16be_closure" {
     GHC.IO.Encoding.utf16be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.265780202 UTC

[section ""data" . GHC.IO.Encoding.utf32_closure" {
     GHC.IO.Encoding.utf32_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.267393194 UTC

[section ""data" . GHC.IO.Encoding.utf32le_closure" {
     GHC.IO.Encoding.utf32le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.269125161 UTC

[section ""data" . GHC.IO.Encoding.utf32be_closure" {
     GHC.IO.Encoding.utf32be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.270842825 UTC

[section ""data" . GHC.IO.Encoding.char8_closure" {
     GHC.IO.Encoding.char8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.272464689 UTC

[section ""cstring" . lvl_r9XsW_bytes" {
     lvl_r9XsW_bytes:
         I8[] [109,107,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.275929735 UTC

[section ""data" . lvl1_r9XsX_closure" {
     lvl1_r9XsX_closure:
         const lvl1_r9XsX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9XsX_entry() //  [R1]
         { info_tbl: [(c9Y5I,
                       label: lvl1_r9XsX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y5I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y5J; else goto c9Y5K;
       c9Y5J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y5K: // global
           (_c9Y5F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y5F::I64 == 0) goto c9Y5H; else goto c9Y5G;
       c9Y5H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y5G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y5F::I64;
           R2 = lvl_r9XsW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.279893904 UTC

[section ""cstring" . lvl2_r9XsY_bytes" {
     lvl2_r9XsY_bytes:
         I8[] [117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.282120848 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding2_closure" {
     GHC.IO.Encoding.mkTextEncoding2_closure:
         const GHC.IO.Encoding.mkTextEncoding2_info;
         const 0;
 },
 sat_s9Xt2_entry() //  [R1]
         { info_tbl: [(c9Y65,
                       label: sat_s9Xt2_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y65: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y66; else goto c9Y67;
       c9Y66: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y67: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl2_r9XsY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Xt4_entry() //  [R1]
         { info_tbl: [(c9Y69,
                       label: sat_s9Xt4_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y69: // global
           _s9Xt4::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y6a; else goto c9Y6b;
       c9Y6b: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c9Y6d; else goto c9Y6c;
       c9Y6d: // global
           HpAlloc = 80;
           goto c9Y6a;
       c9Y6a: // global
           R1 = _s9Xt4::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y6c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xt4::P64;
           _s9Xt0::P64 = P64[_s9Xt4::P64 + 16];
           I64[Hp - 72] = sat_s9Xt2_info;
           P64[Hp - 56] = _s9Xt0::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl1_r9XsX_closure;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.mkTextEncoding2_entry() //  [R2]
         { info_tbl: [(c9Y6e,
                       label: GHC.IO.Encoding.mkTextEncoding2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y6e: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Y6i; else goto c9Y6h;
       c9Y6i: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Y6h: // global
           I64[Hp - 16] = sat_s9Xt4_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.290362094 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule4_bytes" {
     GHC.IO.Encoding.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.291967946 UTC

[section ""data" . GHC.IO.Encoding.$trModule3_closure" {
     GHC.IO.Encoding.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.29363545 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule2_bytes" {
     GHC.IO.Encoding.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.295220144 UTC

[section ""data" . GHC.IO.Encoding.$trModule1_closure" {
     GHC.IO.Encoding.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.296851972 UTC

[section ""data" . GHC.IO.Encoding.$trModule_closure" {
     GHC.IO.Encoding.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.$trModule3_closure+1;
         const GHC.IO.Encoding.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.298793122 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding33_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding33_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49,58,49,57,56,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.300693908 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding32_closure" {
     GHC.IO.Encoding.getFileSystemEncoding32_closure:
         const GHC.IO.Encoding.getFileSystemEncoding32_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding32_entry() //  [R1]
         { info_tbl: [(c9Y6I,
                       label: GHC.IO.Encoding.getFileSystemEncoding32_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y6I: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y6J; else goto c9Y6K;
       c9Y6J: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y6K: // global
           (_c9Y6F::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y6F::I64 == 0) goto c9Y6H; else goto c9Y6G;
       c9Y6H: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y6G: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y6F::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.304573368 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding31_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding31_bytes:
         I8[] [105,115,111,45,105,114,45,49,48,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.307067041 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding30_closure" {
     GHC.IO.Encoding.getFileSystemEncoding30_closure:
         const GHC.IO.Encoding.getFileSystemEncoding30_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding30_entry() //  [R1]
         { info_tbl: [(c9Y6Z,
                       label: GHC.IO.Encoding.getFileSystemEncoding30_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y6Z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y70; else goto c9Y71;
       c9Y70: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y71: // global
           (_c9Y6W::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y6W::I64 == 0) goto c9Y6Y; else goto c9Y6X;
       c9Y6Y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y6X: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y6W::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.31077413 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding29_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding29_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.312575246 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding28_closure" {
     GHC.IO.Encoding.getFileSystemEncoding28_closure:
         const GHC.IO.Encoding.getFileSystemEncoding28_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding28_entry() //  [R1]
         { info_tbl: [(c9Y7g,
                       label: GHC.IO.Encoding.getFileSystemEncoding28_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y7g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y7h; else goto c9Y7i;
       c9Y7h: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y7i: // global
           (_c9Y7d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y7d::I64 == 0) goto c9Y7f; else goto c9Y7e;
       c9Y7f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y7e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y7d::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding29_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.316383836 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding27_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding27_bytes:
         I8[] [73,83,79,45,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.318953613 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding26_closure" {
     GHC.IO.Encoding.getFileSystemEncoding26_closure:
         const GHC.IO.Encoding.getFileSystemEncoding26_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding26_entry() //  [R1]
         { info_tbl: [(c9Y7x,
                       label: GHC.IO.Encoding.getFileSystemEncoding26_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y7x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y7y; else goto c9Y7z;
       c9Y7y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y7z: // global
           (_c9Y7u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y7u::I64 == 0) goto c9Y7w; else goto c9Y7v;
       c9Y7w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y7v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y7u::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding27_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.322780064 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding25_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding25_bytes:
         I8[] [108,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.324540725 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding24_closure" {
     GHC.IO.Encoding.getFileSystemEncoding24_closure:
         const GHC.IO.Encoding.getFileSystemEncoding24_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding24_entry() //  [R1]
         { info_tbl: [(c9Y7O,
                       label: GHC.IO.Encoding.getFileSystemEncoding24_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y7O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y7P; else goto c9Y7Q;
       c9Y7P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y7Q: // global
           (_c9Y7L::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y7L::I64 == 0) goto c9Y7N; else goto c9Y7M;
       c9Y7N: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y7M: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y7L::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding25_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.328334571 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding23_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding23_bytes:
         I8[] [108,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.33055147 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding22_closure" {
     GHC.IO.Encoding.getFileSystemEncoding22_closure:
         const GHC.IO.Encoding.getFileSystemEncoding22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding22_entry() //  [R1]
         { info_tbl: [(c9Y85,
                       label: GHC.IO.Encoding.getFileSystemEncoding22_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y85: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y86; else goto c9Y87;
       c9Y86: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y87: // global
           (_c9Y82::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y82::I64 == 0) goto c9Y84; else goto c9Y83;
       c9Y84: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y83: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y82::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding23_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.334359672 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding21_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding21_bytes:
         I8[] [73,66,77,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.336212713 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding20_closure" {
     GHC.IO.Encoding.getFileSystemEncoding20_closure:
         const GHC.IO.Encoding.getFileSystemEncoding20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding20_entry() //  [R1]
         { info_tbl: [(c9Y8m,
                       label: GHC.IO.Encoding.getFileSystemEncoding20_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y8m: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y8n; else goto c9Y8o;
       c9Y8n: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y8o: // global
           (_c9Y8j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y8j::I64 == 0) goto c9Y8l; else goto c9Y8k;
       c9Y8l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y8k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y8j::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.340943635 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding19_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding19_bytes:
         I8[] [67,80,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.34279419 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding18_closure" {
     GHC.IO.Encoding.getFileSystemEncoding18_closure:
         const GHC.IO.Encoding.getFileSystemEncoding18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding18_entry() //  [R1]
         { info_tbl: [(c9Y8D,
                       label: GHC.IO.Encoding.getFileSystemEncoding18_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y8D: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y8E; else goto c9Y8F;
       c9Y8E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y8F: // global
           (_c9Y8A::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y8A::I64 == 0) goto c9Y8C; else goto c9Y8B;
       c9Y8C: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y8B: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y8A::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.346850129 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding17_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding17_bytes:
         I8[] [99,115,73,83,79,76,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.34868972 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding16_closure" {
     GHC.IO.Encoding.getFileSystemEncoding16_closure:
         const GHC.IO.Encoding.getFileSystemEncoding16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding16_entry() //  [R1]
         { info_tbl: [(c9Y8U,
                       label: GHC.IO.Encoding.getFileSystemEncoding16_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y8U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y8V; else goto c9Y8W;
       c9Y8V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y8W: // global
           (_c9Y8R::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y8R::I64 == 0) goto c9Y8T; else goto c9Y8S;
       c9Y8T: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y8S: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y8R::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.352491809 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding15_closure" {
     GHC.IO.Encoding.getFileSystemEncoding15_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding16_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.3541723 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding14_closure" {
     GHC.IO.Encoding.getFileSystemEncoding14_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding18_closure;
         const GHC.IO.Encoding.getFileSystemEncoding15_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.355826172 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding13_closure" {
     GHC.IO.Encoding.getFileSystemEncoding13_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding20_closure;
         const GHC.IO.Encoding.getFileSystemEncoding14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.357771213 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding12_closure" {
     GHC.IO.Encoding.getFileSystemEncoding12_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding22_closure;
         const GHC.IO.Encoding.getFileSystemEncoding13_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.359460837 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding11_closure" {
     GHC.IO.Encoding.getFileSystemEncoding11_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding24_closure;
         const GHC.IO.Encoding.getFileSystemEncoding12_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.361140519 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding10_closure" {
     GHC.IO.Encoding.getFileSystemEncoding10_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding26_closure;
         const GHC.IO.Encoding.getFileSystemEncoding11_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.362852611 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding9_closure" {
     GHC.IO.Encoding.getFileSystemEncoding9_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding28_closure;
         const GHC.IO.Encoding.getFileSystemEncoding10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.364551091 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding8_closure" {
     GHC.IO.Encoding.getFileSystemEncoding8_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding30_closure;
         const GHC.IO.Encoding.getFileSystemEncoding9_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.366762827 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding7_closure" {
     GHC.IO.Encoding.getFileSystemEncoding7_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding32_closure;
         const GHC.IO.Encoding.getFileSystemEncoding8_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.368497584 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding66_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding66_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,54,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.370448445 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding65_closure" {
     GHC.IO.Encoding.getFileSystemEncoding65_closure:
         const GHC.IO.Encoding.getFileSystemEncoding65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding65_entry() //  [R1]
         { info_tbl: [(c9Y9k,
                       label: GHC.IO.Encoding.getFileSystemEncoding65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y9k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y9l; else goto c9Y9m;
       c9Y9l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y9m: // global
           (_c9Y9h::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y9h::I64 == 0) goto c9Y9j; else goto c9Y9i;
       c9Y9j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y9i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y9h::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.374820533 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding64_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding64_bytes:
         I8[] [105,115,111,45,105,114,45,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.376739718 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding63_closure" {
     GHC.IO.Encoding.getFileSystemEncoding63_closure:
         const GHC.IO.Encoding.getFileSystemEncoding63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding63_entry() //  [R1]
         { info_tbl: [(c9Y9B,
                       label: GHC.IO.Encoding.getFileSystemEncoding63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y9C; else goto c9Y9D;
       c9Y9C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y9D: // global
           (_c9Y9y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y9y::I64 == 0) goto c9Y9A; else goto c9Y9z;
       c9Y9A: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y9z: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y9y::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.380725141 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding62_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding62_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,56,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.382615072 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding61_closure" {
     GHC.IO.Encoding.getFileSystemEncoding61_closure:
         const GHC.IO.Encoding.getFileSystemEncoding61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding61_entry() //  [R1]
         { info_tbl: [(c9Y9S,
                       label: GHC.IO.Encoding.getFileSystemEncoding61_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Y9S: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Y9T; else goto c9Y9U;
       c9Y9T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Y9U: // global
           (_c9Y9P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Y9P::I64 == 0) goto c9Y9R; else goto c9Y9Q;
       c9Y9R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Y9Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Y9P::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.387049996 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding60_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding60_bytes:
         I8[] [73,83,79,95,54,52,54,46,105,114,118,58,49,57,57,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.388815979 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding59_closure" {
     GHC.IO.Encoding.getFileSystemEncoding59_closure:
         const GHC.IO.Encoding.getFileSystemEncoding59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding59_entry() //  [R1]
         { info_tbl: [(c9Ya9,
                       label: GHC.IO.Encoding.getFileSystemEncoding59_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ya9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yaa; else goto c9Yab;
       c9Yaa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yab: // global
           (_c9Ya6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ya6::I64 == 0) goto c9Ya8; else goto c9Ya7;
       c9Ya8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ya7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ya6::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.392527092 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding58_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding58_bytes:
         I8[] [85,83,45,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.394676438 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding57_closure" {
     GHC.IO.Encoding.getFileSystemEncoding57_closure:
         const GHC.IO.Encoding.getFileSystemEncoding57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding57_entry() //  [R1]
         { info_tbl: [(c9Yaq,
                       label: GHC.IO.Encoding.getFileSystemEncoding57_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yaq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yar; else goto c9Yas;
       c9Yar: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yas: // global
           (_c9Yan::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yan::I64 == 0) goto c9Yap; else goto c9Yao;
       c9Yap: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yao: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yan::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.399021488 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding56_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding56_bytes:
         I8[] [117,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.400775262 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding55_closure" {
     GHC.IO.Encoding.getFileSystemEncoding55_closure:
         const GHC.IO.Encoding.getFileSystemEncoding55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding55_entry() //  [R1]
         { info_tbl: [(c9YaH,
                       label: GHC.IO.Encoding.getFileSystemEncoding55_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YaH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YaI; else goto c9YaJ;
       c9YaI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YaJ: // global
           (_c9YaE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YaE::I64 == 0) goto c9YaG; else goto c9YaF;
       c9YaG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YaF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YaE::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.404912255 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding54_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding54_bytes:
         I8[] [73,66,77,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.406635242 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding53_closure" {
     GHC.IO.Encoding.getFileSystemEncoding53_closure:
         const GHC.IO.Encoding.getFileSystemEncoding53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding53_entry() //  [R1]
         { info_tbl: [(c9YaY,
                       label: GHC.IO.Encoding.getFileSystemEncoding53_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YaY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YaZ; else goto c9Yb0;
       c9YaZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yb0: // global
           (_c9YaV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YaV::I64 == 0) goto c9YaX; else goto c9YaW;
       c9YaX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YaW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YaV::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.410522379 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding52_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding52_bytes:
         I8[] [99,112,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.412354498 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding51_closure" {
     GHC.IO.Encoding.getFileSystemEncoding51_closure:
         const GHC.IO.Encoding.getFileSystemEncoding51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding51_entry() //  [R1]
         { info_tbl: [(c9Ybf,
                       label: GHC.IO.Encoding.getFileSystemEncoding51_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ybf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ybg; else goto c9Ybh;
       c9Ybg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ybh: // global
           (_c9Ybc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ybc::I64 == 0) goto c9Ybe; else goto c9Ybd;
       c9Ybe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ybd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ybc::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.416484033 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding50_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding50_bytes:
         I8[] [99,115,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.418322465 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding49_closure" {
     GHC.IO.Encoding.getFileSystemEncoding49_closure:
         const GHC.IO.Encoding.getFileSystemEncoding49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding49_entry() //  [R1]
         { info_tbl: [(c9Ybw,
                       label: GHC.IO.Encoding.getFileSystemEncoding49_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ybw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ybx; else goto c9Yby;
       c9Ybx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yby: // global
           (_c9Ybt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ybt::I64 == 0) goto c9Ybv; else goto c9Ybu;
       c9Ybv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ybu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ybt::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.422116475 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding48_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding48_bytes:
         I8[] [65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.42394773 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding47_closure" {
     GHC.IO.Encoding.getFileSystemEncoding47_closure:
         const GHC.IO.Encoding.getFileSystemEncoding47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding47_entry() //  [R1]
         { info_tbl: [(c9YbN,
                       label: GHC.IO.Encoding.getFileSystemEncoding47_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YbN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YbO; else goto c9YbP;
       c9YbO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YbP: // global
           (_c9YbK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YbK::I64 == 0) goto c9YbM; else goto c9YbL;
       c9YbM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YbL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YbK::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.428182081 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding46_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding46_bytes:
         I8[] [73,83,79,54,52,54,45,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.430683763 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding45_closure" {
     GHC.IO.Encoding.getFileSystemEncoding45_closure:
         const GHC.IO.Encoding.getFileSystemEncoding45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding45_entry() //  [R1]
         { info_tbl: [(c9Yc4,
                       label: GHC.IO.Encoding.getFileSystemEncoding45_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yc4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yc5; else goto c9Yc6;
       c9Yc5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yc6: // global
           (_c9Yc1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yc1::I64 == 0) goto c9Yc3; else goto c9Yc2;
       c9Yc3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yc2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yc1::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.434983994 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding44_closure" {
     GHC.IO.Encoding.getFileSystemEncoding44_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding45_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.436760235 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding43_closure" {
     GHC.IO.Encoding.getFileSystemEncoding43_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding47_closure;
         const GHC.IO.Encoding.getFileSystemEncoding44_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.438473473 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding42_closure" {
     GHC.IO.Encoding.getFileSystemEncoding42_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding49_closure;
         const GHC.IO.Encoding.getFileSystemEncoding43_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.440175691 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding41_closure" {
     GHC.IO.Encoding.getFileSystemEncoding41_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding51_closure;
         const GHC.IO.Encoding.getFileSystemEncoding42_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.44192511 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding40_closure" {
     GHC.IO.Encoding.getFileSystemEncoding40_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding53_closure;
         const GHC.IO.Encoding.getFileSystemEncoding41_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.443667958 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding39_closure" {
     GHC.IO.Encoding.getFileSystemEncoding39_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding55_closure;
         const GHC.IO.Encoding.getFileSystemEncoding40_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.445386072 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding38_closure" {
     GHC.IO.Encoding.getFileSystemEncoding38_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding57_closure;
         const GHC.IO.Encoding.getFileSystemEncoding39_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.447119685 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding37_closure" {
     GHC.IO.Encoding.getFileSystemEncoding37_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding59_closure;
         const GHC.IO.Encoding.getFileSystemEncoding38_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.448819862 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding36_closure" {
     GHC.IO.Encoding.getFileSystemEncoding36_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding61_closure;
         const GHC.IO.Encoding.getFileSystemEncoding37_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.450698357 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding35_closure" {
     GHC.IO.Encoding.getFileSystemEncoding35_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding63_closure;
         const GHC.IO.Encoding.getFileSystemEncoding36_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.452404342 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding34_closure" {
     GHC.IO.Encoding.getFileSystemEncoding34_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding65_closure;
         const GHC.IO.Encoding.getFileSystemEncoding35_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.454092309 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding68_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding68_bytes:
         I8[] [85,84,70,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.455998111 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding67_closure" {
     GHC.IO.Encoding.getFileSystemEncoding67_closure:
         const GHC.IO.Encoding.getFileSystemEncoding67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding67_entry() //  [R1]
         { info_tbl: [(c9Ycw,
                       label: GHC.IO.Encoding.getFileSystemEncoding67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ycw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ycx; else goto c9Ycy;
       c9Ycx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ycy: // global
           (_c9Yct::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yct::I64 == 0) goto c9Ycv; else goto c9Ycu;
       c9Ycv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ycu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yct::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.460413336 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding70_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding70_bytes:
         I8[] [85,84,70,51,50,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.462943826 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding69_closure" {
     GHC.IO.Encoding.getFileSystemEncoding69_closure:
         const GHC.IO.Encoding.getFileSystemEncoding69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding69_entry() //  [R1]
         { info_tbl: [(c9YcN,
                       label: GHC.IO.Encoding.getFileSystemEncoding69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YcN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YcO; else goto c9YcP;
       c9YcO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YcP: // global
           (_c9YcK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YcK::I64 == 0) goto c9YcM; else goto c9YcL;
       c9YcM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YcL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YcK::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.466740275 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding72_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding72_bytes:
         I8[] [85,84,70,51,50,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.468422932 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding71_closure" {
     GHC.IO.Encoding.getFileSystemEncoding71_closure:
         const GHC.IO.Encoding.getFileSystemEncoding71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding71_entry() //  [R1]
         { info_tbl: [(c9Yd4,
                       label: GHC.IO.Encoding.getFileSystemEncoding71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yd4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yd5; else goto c9Yd6;
       c9Yd5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yd6: // global
           (_c9Yd1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yd1::I64 == 0) goto c9Yd3; else goto c9Yd2;
       c9Yd3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yd2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yd1::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.472559444 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding74_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding74_bytes:
         I8[] [85,84,70,51,50]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.474418918 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding73_closure" {
     GHC.IO.Encoding.getFileSystemEncoding73_closure:
         const GHC.IO.Encoding.getFileSystemEncoding73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding73_entry() //  [R1]
         { info_tbl: [(c9Ydl,
                       label: GHC.IO.Encoding.getFileSystemEncoding73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ydl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ydm; else goto c9Ydn;
       c9Ydm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ydn: // global
           (_c9Ydi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ydi::I64 == 0) goto c9Ydk; else goto c9Ydj;
       c9Ydk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ydj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ydi::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.478223396 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding76_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding76_bytes:
         I8[] [85,84,70,49,54,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.480122564 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding75_closure" {
     GHC.IO.Encoding.getFileSystemEncoding75_closure:
         const GHC.IO.Encoding.getFileSystemEncoding75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding75_entry() //  [R1]
         { info_tbl: [(c9YdC,
                       label: GHC.IO.Encoding.getFileSystemEncoding75_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YdC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YdD; else goto c9YdE;
       c9YdD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YdE: // global
           (_c9Ydz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ydz::I64 == 0) goto c9YdB; else goto c9YdA;
       c9YdB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YdA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ydz::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.484225737 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding78_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding78_bytes:
         I8[] [85,84,70,49,54,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.486134 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding77_closure" {
     GHC.IO.Encoding.getFileSystemEncoding77_closure:
         const GHC.IO.Encoding.getFileSystemEncoding77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding77_entry() //  [R1]
         { info_tbl: [(c9YdT,
                       label: GHC.IO.Encoding.getFileSystemEncoding77_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YdT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YdU; else goto c9YdV;
       c9YdU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YdV: // global
           (_c9YdQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YdQ::I64 == 0) goto c9YdS; else goto c9YdR;
       c9YdS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YdR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YdQ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.490451178 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding80_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding80_bytes:
         I8[] [85,84,70,49,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.492206443 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding79_closure" {
     GHC.IO.Encoding.getFileSystemEncoding79_closure:
         const GHC.IO.Encoding.getFileSystemEncoding79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding79_entry() //  [R1]
         { info_tbl: [(c9Yea,
                       label: GHC.IO.Encoding.getFileSystemEncoding79_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yea: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yeb; else goto c9Yec;
       c9Yeb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yec: // global
           (_c9Ye7::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ye7::I64 == 0) goto c9Ye9; else goto c9Ye8;
       c9Ye9: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ye8: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ye7::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.497216044 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_go_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_go_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_go_info;
         const 0;
 },
 sat_s9Xtl_entry() //  [R1]
         { info_tbl: [(c9YeF,
                       label: sat_s9Xtl_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YeF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YeG; else goto c9YeH;
       c9YeG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YeH: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9Xtk_entry() //  [R1]
         { info_tbl: [(c9YeO,
                       label: sat_s9Xtk_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YeO: // global
           _s9Xtk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9YeP; else goto c9YeQ;
       c9YeQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9YeS; else goto c9YeR;
       c9YeS: // global
           HpAlloc = 16;
           goto c9YeP;
       c9YeP: // global
           R1 = _s9Xtk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YeR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9Xtk::P64;
           (_s9Xtg::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[_s9Xtk::P64 + 16]);
           if (_s9Xtg::I64 > 1114111) goto c9Yf2; else goto c9Yf9;
       c9Yf2: // global
           Hp = Hp - 16;
           R2 = _s9Xtg::I64;
           Sp = Sp - 16;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c9Yf9: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s9Xtg::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding_go_entry() //  [R2]
         { info_tbl: [(c9Yfe,
                       label: GHC.IO.Encoding.getFileSystemEncoding_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yfe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yff; else goto u9Yfr;
       c9Yff: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u9Yfr: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c9Yel() args: 0, res: 0, upd: 0;
     }
 },
 _c9Yel() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yel: // global
           _s9Xt5::P64 = P64[Sp];
           I64[Sp] = block_c9Yeo_info;
           R1 = _s9Xt5::P64;
           if (R1 & 7 != 0) goto u9Yft; else goto c9Yep;
       u9Yft: // global
           call _c9Yeo(R1) args: 0, res: 0, upd: 0;
       c9Yep: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yeo() //  [R1]
         { info_tbl: [(c9Yeo,
                       label: block_c9Yeo_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yeo: // global
           if (R1 & 7 == 1) goto c9Yfb; else goto c9Yfc;
       c9Yfb: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Yfc: // global
           I64[Sp - 8] = block_c9Yeu_info;
           _s9Xt8::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s9Xt8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Yfu; else goto c9Yev;
       u9Yfu: // global
           call _c9Yeu(R1) args: 0, res: 0, upd: 0;
       c9Yev: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yeu() //  [R1]
         { info_tbl: [(c9Yeu,
                       label: block_c9Yeu_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yeu: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9Yfm; else goto c9Yfl;
       c9Yfm: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yfl: // global
           _s9Xt8::P64 = P64[Sp + 8];
           _s9Xtb::I64 = I64[R1 + 7];
           if (_s9Xtb::I64 != 45) goto c9Yfp; else goto c9Yfq;
       c9Yfp: // global
           I64[Hp - 64] = sat_s9Xtl_info;
           P64[Hp - 48] = _s9Xt8::P64;
           I64[Hp - 40] = sat_s9Xtk_info;
           I64[Hp - 24] = _s9Xtb::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Yfq: // global
           Hp = Hp - 72;
           P64[Sp + 8] = _s9Xt8::P64;
           Sp = Sp + 8;
           call _c9Yel() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.510916124 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding6_closure" {
     GHC.IO.Encoding.getFileSystemEncoding6_closure:
         const GHC.IO.Encoding.getFileSystemEncoding6_info;
         const 0;
 },
 sat_s9Xtq_entry() //  [R1]
         { info_tbl: [(c9Ygi,
                       label: sat_s9Xtq_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ygi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ygj; else goto c9Ygk;
       c9Ygj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ygk: // global
           I64[Sp - 8] = block_c9Yg9_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Ygz; else goto c9Yga;
       u9Ygz: // global
           call _c9Yg9(R1) args: 0, res: 0, upd: 0;
       c9Yga: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yg9() //  [R1]
         { info_tbl: [(c9Yg9,
                       label: block_c9Yg9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yg9: // global
           _c9Ygh::P64 = R1 & 7;
           if (_c9Ygh::P64 < 3) goto u9Ygx; else goto u9Ygy;
       u9Ygx: // global
           if (_c9Ygh::P64 < 2) goto c9Ygd; else goto c9Yge;
       c9Ygd: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Yge: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9Ygy: // global
           if (_c9Ygh::P64 < 4) goto c9Ygf; else goto c9Ygg;
       c9Ygf: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9Ygg: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding6_entry() //  [R2, R3]
         { info_tbl: [(c9YgC,
                       label: GHC.IO.Encoding.getFileSystemEncoding6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YgC: // global
           _s9Xtn::P64 = R3;
           _s9Xtm::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9YgD; else goto c9YgE;
       c9YgE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YgG; else goto c9YgF;
       c9YgG: // global
           HpAlloc = 24;
           goto c9YgD;
       c9YgD: // global
           R3 = _s9Xtn::P64;
           R2 = _s9Xtm::P64;
           R1 = GHC.IO.Encoding.getFileSystemEncoding6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9YgF: // global
           I64[Hp - 16] = sat_s9Xtq_info;
           P64[Hp] = _s9Xtm::P64;
           I64[Sp - 8] = block_c9YgA_info;
           R3 = Hp - 16;
           R2 = _s9Xtn::P64;
           Sp = Sp - 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9YgA() //  [R1]
         { info_tbl: [(c9YgA,
                       label: block_c9YgA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YgA: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.52300819 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding5_closure" {
     GHC.IO.Encoding.getFileSystemEncoding5_closure:
         const GHC.IO.Encoding.getFileSystemEncoding5_info;
         const 0;
 },
 sat_s9XtK_entry() //  [R1]
         { info_tbl: [(c9YhS,
                       label: sat_s9XtK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YhS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YhT; else goto c9YhU;
       c9YhT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YhU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkLatin1_checked_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtL_entry() //  [R1]
         { info_tbl: [(c9Yi1,
                       label: sat_s9XtL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yi1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yi2; else goto c9Yi3;
       c9Yi2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yi3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkAscii_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtM_entry() //  [R1]
         { info_tbl: [(c9Yia,
                       label: sat_s9XtM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yia: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yib; else goto c9Yic;
       c9Yib: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yic: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF8.mkUTF8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtN_entry() //  [R1]
         { info_tbl: [(c9Yij,
                       label: sat_s9XtN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yij: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yik; else goto c9Yil;
       c9Yik: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yil: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtO_entry() //  [R1]
         { info_tbl: [(c9Yis,
                       label: sat_s9XtO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yis: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yit; else goto c9Yiu;
       c9Yit: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yiu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtP_entry() //  [R1]
         { info_tbl: [(c9YiB,
                       label: sat_s9XtP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YiB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YiC; else goto c9YiD;
       c9YiC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YiD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtQ_entry() //  [R1]
         { info_tbl: [(c9YiK,
                       label: sat_s9XtQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YiK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YiL; else goto c9YiM;
       c9YiL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YiM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtR_entry() //  [R1]
         { info_tbl: [(c9YiT,
                       label: sat_s9XtR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YiT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YiU; else goto c9YiV;
       c9YiU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YiV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9XtS_entry() //  [R1]
         { info_tbl: [(c9Yj2,
                       label: sat_s9XtS_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yj2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yj3; else goto c9Yj4;
       c9Yj3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yj4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding5_entry() //  [R2, R3]
         { info_tbl: [(c9Yj5,
                       label: GHC.IO.Encoding.getFileSystemEncoding5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yj5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Yj6; else goto c9Yj7;
       c9Yj6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Yj7: // global
           I64[Sp - 24] = block_c9Yh9_info;
           _s9Xts::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s9Xts::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yh9() //  [R1]
         { info_tbl: [(c9Yh9,
                       label: block_c9Yh9_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yh9: // global
           I64[Sp - 8] = block_c9Yhd_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding79_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yhd() //  [R1]
         { info_tbl: [(c9Yhd,
                       label: block_c9Yhd_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yhd: // global
           if (R1 & 7 == 1) goto c9Yjb; else goto c9Ykm;
       c9Yjb: // global
           I64[Sp] = block_c9Yhh_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding77_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Ykm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykp; else goto c9Yko;
       c9Ykp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yko: // global
           I64[Hp - 16] = sat_s9XtS_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yhh() //  [R1]
         { info_tbl: [(c9Yhh,
                       label: block_c9Yhh_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yhh: // global
           if (R1 & 7 == 1) goto c9Yje; else goto c9Yki;
       c9Yje: // global
           I64[Sp] = block_c9Yhl_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding75_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yki: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykl; else goto c9Ykk;
       c9Ykl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ykk: // global
           I64[Hp - 16] = sat_s9XtR_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yhl() //  [R1]
         { info_tbl: [(c9Yhl,
                       label: block_c9Yhl_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yhl: // global
           if (R1 & 7 == 1) goto c9Yjh; else goto c9Yke;
       c9Yjh: // global
           I64[Sp] = block_c9Yhp_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding73_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yke: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykh; else goto c9Ykg;
       c9Ykh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ykg: // global
           I64[Hp - 16] = sat_s9XtQ_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yhp() //  [R1]
         { info_tbl: [(c9Yhp,
                       label: block_c9Yhp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yhp: // global
           if (R1 & 7 == 1) goto c9Yjk; else goto c9Yka;
       c9Yjk: // global
           I64[Sp] = block_c9Yht_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding71_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yka: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ykd; else goto c9Ykc;
       c9Ykd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ykc: // global
           I64[Hp - 16] = sat_s9XtP_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yht() //  [R1]
         { info_tbl: [(c9Yht,
                       label: block_c9Yht_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yht: // global
           if (R1 & 7 == 1) goto c9Yjn; else goto c9Yk6;
       c9Yjn: // global
           I64[Sp] = block_c9Yhx_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding69_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yk6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yk9; else goto c9Yk8;
       c9Yk9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yk8: // global
           I64[Hp - 16] = sat_s9XtO_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yhx() //  [R1]
         { info_tbl: [(c9Yhx,
                       label: block_c9Yhx_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yhx: // global
           if (R1 & 7 == 1) goto c9Yjq; else goto c9Yk2;
       c9Yjq: // global
           _s9Xtv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9YhB_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding67_closure;
           R2 = _s9Xtv::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9Yk2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yk5; else goto c9Yk4;
       c9Yk5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yk4: // global
           I64[Hp - 16] = sat_s9XtN_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YhB() //  [R1]
         { info_tbl: [(c9YhB,
                       label: block_c9YhB_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YhB: // global
           if (R1 & 7 == 1) goto c9Yjt; else goto c9YjY;
       c9Yjt: // global
           I64[Sp] = block_c9YhF_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding34_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YjY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yk1; else goto c9Yk0;
       c9Yk1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yk0: // global
           I64[Hp - 16] = sat_s9XtM_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YhF() //  [R1]
         { info_tbl: [(c9YhF,
                       label: block_c9YhF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YhF: // global
           if (R1 & 7 == 1) goto c9Yjw; else goto c9YjU;
       c9Yjw: // global
           I64[Sp] = block_c9YhJ_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding7_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YjU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YjX; else goto c9YjW;
       c9YjX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YjW: // global
           I64[Hp - 16] = sat_s9XtL_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YhJ() //  [R1]
         { info_tbl: [(c9YhJ,
                       label: block_c9YhJ_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YhJ: // global
           _s9Xts::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c9YjD; else goto c9YjQ;
       c9YjD: // global
           I64[Sp] = block_c9Yjy_info;
           R3 = P64[Sp + 16];
           R2 = _s9Xts::P64;
           call GHC.IO.Encoding.Iconv.iconvEncoding2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       c9YjQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YjT; else goto c9YjS;
       c9YjT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YjS: // global
           I64[Hp - 16] = sat_s9XtK_info;
           P64[Hp] = _s9Xts::P64;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yjy() //  [R1]
         { info_tbl: [(c9Yjy,
                       label: block_c9Yjy_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yjy: // global
           I64[Sp] = block_c9YjA_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9YkA; else goto c9YjF;
       u9YkA: // global
           call _c9YjA(R1) args: 0, res: 0, upd: 0;
       c9YjF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YjA() //  [R1]
         { info_tbl: [(c9YjA,
                       label: block_c9YjA_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YjA: // global
           if (R1 & 7 == 1) goto c9YjL; else goto c9YjP;
       c9YjL: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding6_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YjP: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.568007749 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding9_closure" {
     GHC.IO.Encoding.mkTextEncoding9_closure:
         const GHC.IO.Encoding.mkTextEncoding9_info;
 },
 GHC.IO.Encoding.mkTextEncoding9_entry() //  [R2]
         { info_tbl: [(c9YmA,
                       label: GHC.IO.Encoding.mkTextEncoding9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YmA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YmB; else goto c9YmC;
       c9YmB: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YmC: // global
           I64[Sp - 8] = block_c9Ymx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YmK; else goto c9Ymy;
       u9YmK: // global
           call _c9Ymx(R1) args: 0, res: 0, upd: 0;
       c9Ymy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Ymx() //  [R1]
         { info_tbl: [(c9Ymx,
                       label: block_c9Ymx_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ymx: // global
           if (I64[R1 + 7] == 47) goto c9YmJ; else goto c9YmI;
       c9YmJ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YmI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.573856973 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding4_bytes" {
     GHC.IO.Encoding.mkTextEncoding4_bytes:
         I8[] [47,47,84,82,65,78,83,76,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.575698203 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding3_closure" {
     GHC.IO.Encoding.mkTextEncoding3_closure:
         const GHC.IO.Encoding.mkTextEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding3_entry() //  [R1]
         { info_tbl: [(c9Yn3,
                       label: GHC.IO.Encoding.mkTextEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yn3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Yn4; else goto c9Yn5;
       c9Yn4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yn5: // global
           (_c9Yn0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yn0::I64 == 0) goto c9Yn2; else goto c9Yn1;
       c9Yn2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yn1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yn0::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.579866948 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding6_bytes" {
     GHC.IO.Encoding.mkTextEncoding6_bytes:
         I8[] [47,47,82,79,85,78,68,84,82,73,80]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.581684266 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding5_closure" {
     GHC.IO.Encoding.mkTextEncoding5_closure:
         const GHC.IO.Encoding.mkTextEncoding5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding5_entry() //  [R1]
         { info_tbl: [(c9Ynk,
                       label: GHC.IO.Encoding.mkTextEncoding5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ynk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ynl; else goto c9Ynm;
       c9Ynl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ynm: // global
           (_c9Ynh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ynh::I64 == 0) goto c9Ynj; else goto c9Yni;
       c9Ynj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yni: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ynh::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.585604973 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding8_bytes" {
     GHC.IO.Encoding.mkTextEncoding8_bytes:
         I8[] [47,47,73,71,78,79,82,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.587516843 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding7_closure" {
     GHC.IO.Encoding.mkTextEncoding7_closure:
         const GHC.IO.Encoding.mkTextEncoding7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding7_entry() //  [R1]
         { info_tbl: [(c9YnB,
                       label: GHC.IO.Encoding.mkTextEncoding7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YnB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YnC; else goto c9YnD;
       c9YnC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YnD: // global
           (_c9Yny::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yny::I64 == 0) goto c9YnA; else goto c9Ynz;
       c9YnA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ynz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yny::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.591966955 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding1_closure" {
     GHC.IO.Encoding.mkTextEncoding1_closure:
         const GHC.IO.Encoding.mkTextEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding1_entry() //  [R2]
         { info_tbl: [(c9YnY,
                       label: GHC.IO.Encoding.mkTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YnY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9YnZ; else goto c9Yo0;
       c9YnZ: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Yo0: // global
           I64[Sp - 16] = block_c9YnP_info;
           R3 = R2;
           _s9XtX::P64 = R2;
           R2 = GHC.IO.Encoding.mkTextEncoding9_closure+1;
           P64[Sp - 8] = _s9XtX::P64;
           Sp = Sp - 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9YnP() //  [R1, R2]
         { info_tbl: [(c9YnP,
                       label: block_c9YnP_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YnP: // global
           I64[Sp - 8] = block_c9YnR_info;
           _s9Xu0::P64 = R1;
           R1 = R2;
           P64[Sp] = _s9Xu0::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YoI; else goto c9YnS;
       u9YoI: // global
           call _c9YnR(R1) args: 0, res: 0, upd: 0;
       c9YnS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YnR() //  [R1]
         { info_tbl: [(c9YnR,
                       label: block_c9YnR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YnR: // global
           if (R1 & 7 == 1) goto c9YnV; else goto c9YnW;
       c9YnV: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YnW: // global
           I64[Sp - 8] = block_c9Yo7_info;
           R3 = GHC.IO.Encoding.mkTextEncoding7_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yo7() //  [R1]
         { info_tbl: [(c9Yo7,
                       label: block_c9Yo7_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yo7: // global
           if (R1 & 7 == 1) goto c9Yof; else goto c9YoE;
       c9Yof: // global
           I64[Sp] = block_c9Yoc_info;
           R3 = GHC.IO.Encoding.mkTextEncoding5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YoE: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yoc() //  [R1]
         { info_tbl: [(c9Yoc,
                       label: block_c9Yoc_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yoc: // global
           if (R1 & 7 == 1) goto c9Yom; else goto c9YoA;
       c9Yom: // global
           _s9Xu2::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9Yoj_info;
           R3 = GHC.IO.Encoding.mkTextEncoding3_closure;
           R2 = _s9Xu2::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YoA: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9Yoj() //  [R1]
         { info_tbl: [(c9Yoj,
                       label: block_c9Yoj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yoj: // global
           if (R1 & 7 == 1) goto c9Yos; else goto c9Yow;
       c9Yos: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
       c9Yow: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.TransliterateCodingFailure_closure+3;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.605106384 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding_closure" {
     GHC.IO.Encoding.mkTextEncoding_closure:
         const GHC.IO.Encoding.mkTextEncoding_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding_entry() //  [R2]
         { info_tbl: [(c9Ypg,
                       label: GHC.IO.Encoding.mkTextEncoding_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ypg: // global
           R2 = R2;
           call GHC.IO.Encoding.mkTextEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.608821354 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding4_closure" {
     GHC.IO.Encoding.getForeignEncoding4_closure:
         const GHC.IO.Encoding.getForeignEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding4_entry() //  []
         { info_tbl: [(c9Ypt,
                       label: GHC.IO.Encoding.getForeignEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ypt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ypu; else goto c9Ypv;
       c9Ypu: // global
           R1 = GHC.IO.Encoding.getForeignEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ypv: // global
           I64[Sp - 8] = block_c9Ypr_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Ypr() //  []
         { info_tbl: [(c9Ypr,
                       label: block_c9Ypr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ypr: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.6145309 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding3_closure" {
     GHC.IO.Encoding.getForeignEncoding3_closure:
         const GHC.IO.Encoding.getForeignEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding3_entry() //  [R1]
         { info_tbl: [(c9YpN,
                       label: GHC.IO.Encoding.getForeignEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YpN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YpO; else goto c9YpP;
       c9YpO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YpP: // global
           (_c9YpI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YpI::I64 == 0) goto c9YpK; else goto c9YpJ;
       c9YpK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YpJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YpI::I64;
           I64[Sp - 24] = block_c9YpL_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9YpL() //  [R1]
         { info_tbl: [(c9YpL,
                       label: block_c9YpL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YpL: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.620880073 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding2_closure" {
     GHC.IO.Encoding.getForeignEncoding2_closure:
         const GHC.IO.Encoding.getForeignEncoding2_info;
         const 0;
 },
 sat_s9Xun_entry() //  [R1, R2]
         { info_tbl: [(c9Yqj,
                       label: sat_s9Xun_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yqj: // global
           _s9Xuh::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xuh::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xuh::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Xuj_entry() //  [R1]
         { info_tbl: [(c9Yqs,
                       label: sat_s9Xuj_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yqs: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getForeignEncoding2_entry() //  []
         { info_tbl: [(c9Yqw,
                       label: GHC.IO.Encoding.getForeignEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yqw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yqx; else goto c9Yqy;
       c9Yqx: // global
           R1 = GHC.IO.Encoding.getForeignEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Yqy: // global
           I64[Sp - 8] = block_c9Yq7_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Yq7() //  []
         { info_tbl: [(c9Yq7,
                       label: block_c9Yq7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yq7: // global
           I64[Sp] = block_c9Yq9_info;
           R1 = GHC.IO.Encoding.getForeignEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yq9() //  [R1]
         { info_tbl: [(c9Yq9,
                       label: block_c9Yq9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yq9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9YqC; else goto c9YqB;
       c9YqC: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YqB: // global
           I64[Hp - 48] = sat_s9Xun_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xuj_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.631417965 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding1_closure" {
     GHC.IO.Encoding.getForeignEncoding1_closure:
         const GHC.IO.Encoding.getForeignEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding1_entry() //  [R1]
         { info_tbl: [(c9Yr9,
                       label: GHC.IO.Encoding.getForeignEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yr9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yra; else goto c9Yrb;
       c9Yra: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yrb: // global
           (_c9Yr4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yr4::I64 == 0) goto c9Yr6; else goto c9Yr5;
       c9Yr6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yr5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yr4::I64;
           I64[Sp - 24] = block_c9Yr7_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Yr7() //  [R1]
         { info_tbl: [(c9Yr7,
                       label: block_c9Yr7_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yr7: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.6370984 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding_closure" {
     GHC.IO.Encoding.getForeignEncoding_closure:
         const GHC.IO.Encoding.getForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9Yry,
                       label: GHC.IO.Encoding.getForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yry: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yrz; else goto c9YrA;
       c9Yrz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YrA: // global
           (_c9Yrs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yrs::I64 == 0) goto c9Yru; else goto c9Yrt;
       c9Yru: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yrt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yrs::I64;
           I64[Sp - 24] = block_c9Yrv_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9YrE; else goto c9Yrw;
       u9YrE: // global
           call _c9Yrv(R1) args: 0, res: 0, upd: 0;
       c9Yrw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Yrv() //  [R1]
         { info_tbl: [(c9Yrv,
                       label: block_c9Yrv_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yrv: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.643520597 UTC

[section ""data" . GHC.IO.Encoding.setForeignEncoding_closure" {
     GHC.IO.Encoding.setForeignEncoding_closure:
         const GHC.IO.Encoding.setForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9YrZ,
                       label: GHC.IO.Encoding.setForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YrZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ys0; else goto c9Ys1;
       c9Ys0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ys1: // global
           (_c9YrT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YrT::I64 == 0) goto c9YrV; else goto c9YrU;
       c9YrV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YrU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YrT::I64;
           I64[Sp - 24] = block_c9YrW_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Ys5; else goto c9YrX;
       u9Ys5: // global
           call _c9YrW(R1) args: 0, res: 0, upd: 0;
       c9YrX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9YrW() //  [R1]
         { info_tbl: [(c9YrW,
                       label: block_c9YrW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YrW: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.649089851 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding4_closure" {
     GHC.IO.Encoding.getFileSystemEncoding4_closure:
         const GHC.IO.Encoding.getFileSystemEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding4_entry() //  []
         { info_tbl: [(c9Ysn,
                       label: GHC.IO.Encoding.getFileSystemEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ysn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yso; else goto c9Ysp;
       c9Yso: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ysp: // global
           I64[Sp - 8] = block_c9Ysl_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Ysl() //  []
         { info_tbl: [(c9Ysl,
                       label: block_c9Ysl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ysl: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.654819433 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding3_closure" {
     GHC.IO.Encoding.getFileSystemEncoding3_closure:
         const GHC.IO.Encoding.getFileSystemEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding3_entry() //  [R1]
         { info_tbl: [(c9YsH,
                       label: GHC.IO.Encoding.getFileSystemEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YsH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YsI; else goto c9YsJ;
       c9YsI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YsJ: // global
           (_c9YsC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YsC::I64 == 0) goto c9YsE; else goto c9YsD;
       c9YsE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YsD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YsC::I64;
           I64[Sp - 24] = block_c9YsF_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9YsF() //  [R1]
         { info_tbl: [(c9YsF,
                       label: block_c9YsF_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YsF: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.661083259 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding2_closure" {
     GHC.IO.Encoding.getFileSystemEncoding2_closure:
         const GHC.IO.Encoding.getFileSystemEncoding2_info;
         const 0;
 },
 sat_s9XuN_entry() //  [R1, R2]
         { info_tbl: [(c9Ytd,
                       label: sat_s9XuN_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ytd: // global
           _s9XuH::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9XuH::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9XuH::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9XuJ_entry() //  [R1]
         { info_tbl: [(c9Ytm,
                       label: sat_s9XuJ_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ytm: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding2_entry() //  []
         { info_tbl: [(c9Ytq,
                       label: GHC.IO.Encoding.getFileSystemEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ytq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ytr; else goto c9Yts;
       c9Ytr: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Yts: // global
           I64[Sp - 8] = block_c9Yt1_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Yt1() //  []
         { info_tbl: [(c9Yt1,
                       label: block_c9Yt1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yt1: // global
           I64[Sp] = block_c9Yt3_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yt3() //  [R1]
         { info_tbl: [(c9Yt3,
                       label: block_c9Yt3_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yt3: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Ytw; else goto c9Ytv;
       c9Ytw: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ytv: // global
           I64[Hp - 48] = sat_s9XuN_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9XuJ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.671494629 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding1_closure" {
     GHC.IO.Encoding.getFileSystemEncoding1_closure:
         const GHC.IO.Encoding.getFileSystemEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding1_entry() //  [R1]
         { info_tbl: [(c9Yu3,
                       label: GHC.IO.Encoding.getFileSystemEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yu3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yu4; else goto c9Yu5;
       c9Yu4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yu5: // global
           (_c9YtY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YtY::I64 == 0) goto c9Yu0; else goto c9YtZ;
       c9Yu0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YtZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YtY::I64;
           I64[Sp - 24] = block_c9Yu1_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Yu1() //  [R1]
         { info_tbl: [(c9Yu1,
                       label: block_c9Yu1_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yu1: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.677702595 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9Yus,
                       label: GHC.IO.Encoding.getFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yus: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yut; else goto c9Yuu;
       c9Yut: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yuu: // global
           (_c9Yum::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yum::I64 == 0) goto c9Yuo; else goto c9Yun;
       c9Yuo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yun: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yum::I64;
           I64[Sp - 24] = block_c9Yup_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yuy; else goto c9Yuq;
       u9Yuy: // global
           call _c9Yup(R1) args: 0, res: 0, upd: 0;
       c9Yuq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Yup() //  [R1]
         { info_tbl: [(c9Yup,
                       label: block_c9Yup_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yup: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.683412199 UTC

[section ""data" . GHC.IO.Encoding.argvEncoding_closure" {
     GHC.IO.Encoding.argvEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.685388482 UTC

[section ""data" . GHC.IO.Encoding.setFileSystemEncoding_closure" {
     GHC.IO.Encoding.setFileSystemEncoding_closure:
         const GHC.IO.Encoding.setFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9YuU,
                       label: GHC.IO.Encoding.setFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YuU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YuV; else goto c9YuW;
       c9YuV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YuW: // global
           (_c9YuO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YuO::I64 == 0) goto c9YuQ; else goto c9YuP;
       c9YuQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YuP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YuO::I64;
           I64[Sp - 24] = block_c9YuR_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yv0; else goto c9YuS;
       u9Yv0: // global
           call _c9YuR(R1) args: 0, res: 0, upd: 0;
       c9YuS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9YuR() //  [R1]
         { info_tbl: [(c9YuR,
                       label: block_c9YuR_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YuR: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.69087287 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding1_closure" {
     GHC.IO.Encoding.initLocaleEncoding1_closure:
         const GHC.IO.Encoding.initLocaleEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding1_entry() //  []
         { info_tbl: [(c9Yvi,
                       label: GHC.IO.Encoding.initLocaleEncoding1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yvi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yvj; else goto c9Yvk;
       c9Yvj: // global
           R1 = GHC.IO.Encoding.initLocaleEncoding1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Yvk: // global
           I64[Sp - 8] = block_c9Yvg_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Yvg() //  []
         { info_tbl: [(c9Yvg,
                       label: block_c9Yvg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yvg: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.696011646 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding_closure" {
     GHC.IO.Encoding.initLocaleEncoding_closure:
         const GHC.IO.Encoding.initLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9YvC,
                       label: GHC.IO.Encoding.initLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YvC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YvD; else goto c9YvE;
       c9YvD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YvE: // global
           (_c9Yvx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yvx::I64 == 0) goto c9Yvz; else goto c9Yvy;
       c9Yvz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yvy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yvx::I64;
           I64[Sp - 24] = block_c9YvA_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.initLocaleEncoding1_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9YvA() //  [R1]
         { info_tbl: [(c9YvA,
                       label: block_c9YvA_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YvA: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.702135881 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding2_closure" {
     GHC.IO.Encoding.getLocaleEncoding2_closure:
         const GHC.IO.Encoding.getLocaleEncoding2_info;
         const 0;
 },
 sat_s9Xvd_entry() //  [R1, R2]
         { info_tbl: [(c9Yw8,
                       label: sat_s9Xvd_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yw8: // global
           _s9Xv7::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9Xv7::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9Xv7::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9Xv9_entry() //  [R1]
         { info_tbl: [(c9Ywh,
                       label: sat_s9Xv9_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ywh: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getLocaleEncoding2_entry() //  []
         { info_tbl: [(c9Ywl,
                       label: GHC.IO.Encoding.getLocaleEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Ywl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ywm; else goto c9Ywn;
       c9Ywm: // global
           R1 = GHC.IO.Encoding.getLocaleEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Ywn: // global
           I64[Sp - 8] = block_c9YvW_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9YvW() //  []
         { info_tbl: [(c9YvW,
                       label: block_c9YvW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YvW: // global
           I64[Sp] = block_c9YvY_info;
           R1 = GHC.IO.Encoding.initLocaleEncoding_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YvY() //  [R1]
         { info_tbl: [(c9YvY,
                       label: block_c9YvY_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YvY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Ywr; else goto c9Ywq;
       c9Ywr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ywq: // global
           I64[Hp - 48] = sat_s9Xvd_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9Xv9_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.713498628 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding1_closure" {
     GHC.IO.Encoding.getLocaleEncoding1_closure:
         const GHC.IO.Encoding.getLocaleEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding1_entry() //  [R1]
         { info_tbl: [(c9YwY,
                       label: GHC.IO.Encoding.getLocaleEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YwY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YwZ; else goto c9Yx0;
       c9YwZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yx0: // global
           (_c9YwT::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YwT::I64 == 0) goto c9YwV; else goto c9YwU;
       c9YwV: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YwU: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YwT::I64;
           I64[Sp - 24] = block_c9YwW_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getLocaleEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9YwW() //  [R1]
         { info_tbl: [(c9YwW,
                       label: block_c9YwW_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YwW: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.718986194 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding_closure" {
     GHC.IO.Encoding.getLocaleEncoding_closure:
         const GHC.IO.Encoding.getLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9Yxn,
                       label: GHC.IO.Encoding.getLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yxn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yxo; else goto c9Yxp;
       c9Yxo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yxp: // global
           (_c9Yxh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Yxh::I64 == 0) goto c9Yxj; else goto c9Yxi;
       c9Yxj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Yxi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Yxh::I64;
           I64[Sp - 24] = block_c9Yxk_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yxt; else goto c9Yxl;
       u9Yxt: // global
           call _c9Yxk(R1) args: 0, res: 0, upd: 0;
       c9Yxl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Yxk() //  [R1]
         { info_tbl: [(c9Yxk,
                       label: block_c9Yxk_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yxk: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.724987745 UTC

[section ""data" . GHC.IO.Encoding.setLocaleEncoding_closure" {
     GHC.IO.Encoding.setLocaleEncoding_closure:
         const GHC.IO.Encoding.setLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9YxO,
                       label: GHC.IO.Encoding.setLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YxO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YxP; else goto c9YxQ;
       c9YxP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YxQ: // global
           (_c9YxI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YxI::I64 == 0) goto c9YxK; else goto c9YxJ;
       c9YxK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YxJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YxI::I64;
           I64[Sp - 24] = block_c9YxL_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9YxU; else goto c9YxM;
       u9YxU: // global
           call _c9YxL(R1) args: 0, res: 0, upd: 0;
       c9YxM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9YxL() //  [R1]
         { info_tbl: [(c9YxL,
                       label: block_c9YxL_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YxL: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.730888449 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode1_closure" {
     GHC.IO.Encoding.latin1_decode1_closure:
         const GHC.IO.Encoding.latin1_decode1_info;
 },
 sat_s9Xvy_entry() //  [R1]
         { info_tbl: [(c9Yyj,
                       label: sat_s9Xvy_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yyj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yyn; else goto c9Yyo;
       c9Yyn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yyo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Yyg_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yys; else goto c9Yyh;
       u9Yys: // global
           call _c9Yyg(R1) args: 0, res: 0, upd: 0;
       c9Yyh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Yyg() //  [R1]
         { info_tbl: [(c9Yyg,
                       label: block_c9Yyg_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yyg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yyr; else goto c9Yyq;
       c9Yyr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Yyq: // global
           _s9Xvw::P64 = P64[R1 + 15];
           _s9Xvx::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9Xvw::P64;
           P64[Hp] = _s9Xvx::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_decode1_entry() //  [R2, R3]
         { info_tbl: [(c9Yyt,
                       label: GHC.IO.Encoding.latin1_decode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yyt: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yyu; else goto c9Yyv;
       c9Yyu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_decode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Yyv: // global
           I64[Sp - 8] = block_c9Yya_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yya() //  [R1]
         { info_tbl: [(c9Yya,
                       label: block_c9Yya_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yya: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yyy; else goto c9Yyx;
       c9Yyy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yyx: // global
           I64[Hp - 16] = sat_s9Xvy_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.740238192 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode_closure" {
     GHC.IO.Encoding.latin1_decode_closure:
         const GHC.IO.Encoding.latin1_decode_info;
 },
 GHC.IO.Encoding.latin1_decode_entry() //  [R2, R3]
         { info_tbl: [(c9YyV,
                       label: GHC.IO.Encoding.latin1_decode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YyV: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_decode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.743999725 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode1_closure" {
     GHC.IO.Encoding.latin1_encode1_closure:
         const GHC.IO.Encoding.latin1_encode1_info;
 },
 sat_s9XvJ_entry() //  [R1]
         { info_tbl: [(c9Yzf,
                       label: sat_s9XvJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yzf: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Yzj; else goto c9Yzk;
       c9Yzj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Yzk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Yzc_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Yzo; else goto c9Yzd;
       u9Yzo: // global
           call _c9Yzc(R1) args: 0, res: 0, upd: 0;
       c9Yzd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Yzc() //  [R1]
         { info_tbl: [(c9Yzc,
                       label: block_c9Yzc_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yzc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yzn; else goto c9Yzm;
       c9Yzn: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Yzm: // global
           _s9XvH::P64 = P64[R1 + 15];
           _s9XvI::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9XvH::P64;
           P64[Hp] = _s9XvI::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_encode1_entry() //  [R2, R3]
         { info_tbl: [(c9Yzp,
                       label: GHC.IO.Encoding.latin1_encode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yzp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Yzq; else goto c9Yzr;
       c9Yzq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_encode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Yzr: // global
           I64[Sp - 8] = block_c9Yz6_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin3_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Yz6() //  [R1]
         { info_tbl: [(c9Yz6,
                       label: block_c9Yz6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Yz6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Yzu; else goto c9Yzt;
       c9Yzu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Yzt: // global
           I64[Hp - 16] = sat_s9XvJ_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.753807266 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode_closure" {
     GHC.IO.Encoding.latin1_encode_closure:
         const GHC.IO.Encoding.latin1_encode_info;
 },
 GHC.IO.Encoding.latin1_encode_entry() //  [R2, R3]
         { info_tbl: [(c9YzR,
                       label: GHC.IO.Encoding.latin1_encode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YzR: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_encode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:02.756933275 UTC

[section ""relreadonly" . S9Xwj_srt" {
     S9Xwj_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_r9XsX_closure;
         const GHC.IO.Encoding.mkTextEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_go_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding6_closure;
         const GHC.IO.Encoding.Latin1.mkLatin1_checked_closure;
         const GHC.IO.Encoding.Latin1.mkAscii_closure;
         const GHC.IO.Encoding.UTF8.mkUTF8_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32le_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32be_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16le_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16be_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16_closure;
         const GHC.IO.Encoding.Iconv.iconvEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding7_closure;
         const GHC.IO.Encoding.getFileSystemEncoding34_closure;
         const GHC.IO.Encoding.getFileSystemEncoding67_closure;
         const GHC.IO.Encoding.getFileSystemEncoding69_closure;
         const GHC.IO.Encoding.getFileSystemEncoding71_closure;
         const GHC.IO.Encoding.getFileSystemEncoding73_closure;
         const GHC.IO.Encoding.getFileSystemEncoding75_closure;
         const GHC.IO.Encoding.getFileSystemEncoding77_closure;
         const GHC.IO.Encoding.getFileSystemEncoding79_closure;
         const GHC.IO.Encoding.mkTextEncoding1_closure;
         const GHC.IO.Encoding.mkTextEncoding3_closure;
         const GHC.IO.Encoding.mkTextEncoding5_closure;
         const GHC.IO.Encoding.mkTextEncoding7_closure;
         const GHC.IO.Encoding.Iconv.localeEncodingName_closure;
         const GHC.IO.Encoding.getForeignEncoding4_closure;
         const GHC.IO.Encoding.getForeignEncoding2_closure;
         const GHC.IO.Encoding.getForeignEncoding3_closure;
         const GHC.IO.Encoding.getForeignEncoding1_closure;
         const GHC.IO.Encoding.getFileSystemEncoding4_closure;
         const GHC.IO.Encoding.getFileSystemEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding2_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.605263402 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:05:03.606268738 UTC

[section ""data" . GHC.IO.Encoding.latin1_closure" {
     GHC.IO.Encoding.latin1_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_checked_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.608120393 UTC

[section ""data" . GHC.IO.Encoding.utf8_closure" {
     GHC.IO.Encoding.utf8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.609944857 UTC

[section ""data" . GHC.IO.Encoding.utf8_bom_closure" {
     GHC.IO.Encoding.utf8_bom_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF8.utf8_bom_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.611690681 UTC

[section ""data" . GHC.IO.Encoding.utf16_closure" {
     GHC.IO.Encoding.utf16_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.613547928 UTC

[section ""data" . GHC.IO.Encoding.utf16le_closure" {
     GHC.IO.Encoding.utf16le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.61523187 UTC

[section ""data" . GHC.IO.Encoding.utf16be_closure" {
     GHC.IO.Encoding.utf16be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF16.utf16be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.616989346 UTC

[section ""data" . GHC.IO.Encoding.utf32_closure" {
     GHC.IO.Encoding.utf32_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.618951795 UTC

[section ""data" . GHC.IO.Encoding.utf32le_closure" {
     GHC.IO.Encoding.utf32le_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32le_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.620763923 UTC

[section ""data" . GHC.IO.Encoding.utf32be_closure" {
     GHC.IO.Encoding.utf32be_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.UTF32.utf32be_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.622598146 UTC

[section ""data" . GHC.IO.Encoding.char8_closure" {
     GHC.IO.Encoding.char8_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.Latin1.latin1_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.624389644 UTC

[section ""cstring" . lvl_r9XsW_bytes" {
     lvl_r9XsW_bytes:
         I8[] [109,107,84,101,120,116,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.627133003 UTC

[section ""data" . lvl1_r9XsX_closure" {
     lvl1_r9XsX_closure:
         const lvl1_r9XsX_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9XsX_entry() //  [R1]
         { info_tbl: [(c9YD0,
                       label: lvl1_r9XsX_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YD0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YD1; else goto c9YD2;
       c9YD1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YD2: // global
           (_c9YCX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YCX::I64 == 0) goto c9YCZ; else goto c9YCY;
       c9YCZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YCY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YCX::I64;
           R2 = lvl_r9XsW_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.63143552 UTC

[section ""cstring" . lvl2_r9XsY_bytes" {
     lvl2_r9XsY_bytes:
         I8[] [117,110,107,110,111,119,110,32,101,110,99,111,100,105,110,103,58]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.633505158 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding2_closure" {
     GHC.IO.Encoding.mkTextEncoding2_closure:
         const GHC.IO.Encoding.mkTextEncoding2_info;
         const 0;
 },
 sat_s9YA1_entry() //  [R1]
         { info_tbl: [(c9YDo,
                       label: sat_s9YA1_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YDo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YDp; else goto c9YDq;
       c9YDp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YDq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = lvl2_r9XsY_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YA3_entry() //  [R1]
         { info_tbl: [(c9YDs,
                       label: sat_s9YA3_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YDs: // global
           _s9YA3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9YDt; else goto c9YDu;
       c9YDu: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto c9YDw; else goto c9YDv;
       c9YDw: // global
           HpAlloc = 80;
           goto c9YDt;
       c9YDt: // global
           R1 = _s9YA3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YDv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9YA3::P64;
           _s9YzZ::P64 = P64[_s9YA3::P64 + 16];
           I64[Hp - 72] = sat_s9YA1_info;
           P64[Hp - 56] = _s9YzZ::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.IO.Exception.NoSuchThing_closure+1;
           P64[Hp - 24] = lvl1_r9XsX_closure;
           P64[Hp - 16] = Hp - 72;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.mkTextEncoding2_entry() //  [R2]
         { info_tbl: [(c9YDx,
                       label: GHC.IO.Encoding.mkTextEncoding2_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YDx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YDB; else goto c9YDA;
       c9YDB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YDA: // global
           I64[Hp - 16] = sat_s9YA3_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.641381064 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule4_bytes" {
     GHC.IO.Encoding.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.643082958 UTC

[section ""data" . GHC.IO.Encoding.$trModule3_closure" {
     GHC.IO.Encoding.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.64478118 UTC

[section ""cstring" . GHC.IO.Encoding.$trModule2_bytes" {
     GHC.IO.Encoding.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,69,110,99,111,100,105,110,103]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.646870226 UTC

[section ""data" . GHC.IO.Encoding.$trModule1_closure" {
     GHC.IO.Encoding.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Encoding.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.64872171 UTC

[section ""data" . GHC.IO.Encoding.$trModule_closure" {
     GHC.IO.Encoding.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Encoding.$trModule3_closure+1;
         const GHC.IO.Encoding.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.650571556 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding33_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding33_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49,58,49,57,56,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.652555378 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding32_closure" {
     GHC.IO.Encoding.getFileSystemEncoding32_closure:
         const GHC.IO.Encoding.getFileSystemEncoding32_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding32_entry() //  [R1]
         { info_tbl: [(c9YEg,
                       label: GHC.IO.Encoding.getFileSystemEncoding32_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YEg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YEh; else goto c9YEi;
       c9YEh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YEi: // global
           (_c9YEd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YEd::I64 == 0) goto c9YEf; else goto c9YEe;
       c9YEf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YEe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YEd::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding33_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.65706508 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding31_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding31_bytes:
         I8[] [105,115,111,45,105,114,45,49,48,48]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.658892406 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding30_closure" {
     GHC.IO.Encoding.getFileSystemEncoding30_closure:
         const GHC.IO.Encoding.getFileSystemEncoding30_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding30_entry() //  [R1]
         { info_tbl: [(c9YEy,
                       label: GHC.IO.Encoding.getFileSystemEncoding30_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YEy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YEz; else goto c9YEA;
       c9YEz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YEA: // global
           (_c9YEv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YEv::I64 == 0) goto c9YEx; else goto c9YEw;
       c9YEx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YEw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YEv::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding31_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.663320128 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding29_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding29_bytes:
         I8[] [73,83,79,95,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.665173404 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding28_closure" {
     GHC.IO.Encoding.getFileSystemEncoding28_closure:
         const GHC.IO.Encoding.getFileSystemEncoding28_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding28_entry() //  [R1]
         { info_tbl: [(c9YEQ,
                       label: GHC.IO.Encoding.getFileSystemEncoding28_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YEQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YER; else goto c9YES;
       c9YER: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YES: // global
           (_c9YEN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YEN::I64 == 0) goto c9YEP; else goto c9YEO;
       c9YEP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YEO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YEN::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding29_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.669044139 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding27_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding27_bytes:
         I8[] [73,83,79,45,56,56,53,57,45,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.670905309 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding26_closure" {
     GHC.IO.Encoding.getFileSystemEncoding26_closure:
         const GHC.IO.Encoding.getFileSystemEncoding26_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding26_entry() //  [R1]
         { info_tbl: [(c9YF8,
                       label: GHC.IO.Encoding.getFileSystemEncoding26_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YF8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YF9; else goto c9YFa;
       c9YF9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YFa: // global
           (_c9YF5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YF5::I64 == 0) goto c9YF7; else goto c9YF6;
       c9YF7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YF6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YF5::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding27_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.674828241 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding25_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding25_bytes:
         I8[] [108,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.676736211 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding24_closure" {
     GHC.IO.Encoding.getFileSystemEncoding24_closure:
         const GHC.IO.Encoding.getFileSystemEncoding24_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding24_entry() //  [R1]
         { info_tbl: [(c9YFq,
                       label: GHC.IO.Encoding.getFileSystemEncoding24_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YFq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YFr; else goto c9YFs;
       c9YFr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YFs: // global
           (_c9YFn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YFn::I64 == 0) goto c9YFp; else goto c9YFo;
       c9YFp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YFo: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YFn::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding25_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.681756801 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding23_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding23_bytes:
         I8[] [108,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.683559119 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding22_closure" {
     GHC.IO.Encoding.getFileSystemEncoding22_closure:
         const GHC.IO.Encoding.getFileSystemEncoding22_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding22_entry() //  [R1]
         { info_tbl: [(c9YFI,
                       label: GHC.IO.Encoding.getFileSystemEncoding22_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YFI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YFJ; else goto c9YFK;
       c9YFJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YFK: // global
           (_c9YFF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YFF::I64 == 0) goto c9YFH; else goto c9YFG;
       c9YFH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YFG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YFF::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding23_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.687845634 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding21_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding21_bytes:
         I8[] [73,66,77,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.689759179 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding20_closure" {
     GHC.IO.Encoding.getFileSystemEncoding20_closure:
         const GHC.IO.Encoding.getFileSystemEncoding20_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding20_entry() //  [R1]
         { info_tbl: [(c9YG0,
                       label: GHC.IO.Encoding.getFileSystemEncoding20_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YG0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YG1; else goto c9YG2;
       c9YG1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YG2: // global
           (_c9YFX::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YFX::I64 == 0) goto c9YFZ; else goto c9YFY;
       c9YFZ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YFY: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YFX::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding21_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.693882857 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding19_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding19_bytes:
         I8[] [67,80,56,49,57]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.695706938 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding18_closure" {
     GHC.IO.Encoding.getFileSystemEncoding18_closure:
         const GHC.IO.Encoding.getFileSystemEncoding18_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding18_entry() //  [R1]
         { info_tbl: [(c9YGi,
                       label: GHC.IO.Encoding.getFileSystemEncoding18_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YGi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YGj; else goto c9YGk;
       c9YGj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YGk: // global
           (_c9YGf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YGf::I64 == 0) goto c9YGh; else goto c9YGg;
       c9YGh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YGg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YGf::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding19_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.699616882 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding17_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding17_bytes:
         I8[] [99,115,73,83,79,76,97,116,105,110,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.701775226 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding16_closure" {
     GHC.IO.Encoding.getFileSystemEncoding16_closure:
         const GHC.IO.Encoding.getFileSystemEncoding16_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding16_entry() //  [R1]
         { info_tbl: [(c9YGA,
                       label: GHC.IO.Encoding.getFileSystemEncoding16_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YGA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YGB; else goto c9YGC;
       c9YGB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YGC: // global
           (_c9YGx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YGx::I64 == 0) goto c9YGz; else goto c9YGy;
       c9YGz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YGy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YGx::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding17_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.705847361 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding15_closure" {
     GHC.IO.Encoding.getFileSystemEncoding15_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding16_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.708054138 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding14_closure" {
     GHC.IO.Encoding.getFileSystemEncoding14_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding18_closure;
         const GHC.IO.Encoding.getFileSystemEncoding15_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.710048762 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding13_closure" {
     GHC.IO.Encoding.getFileSystemEncoding13_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding20_closure;
         const GHC.IO.Encoding.getFileSystemEncoding14_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.71173477 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding12_closure" {
     GHC.IO.Encoding.getFileSystemEncoding12_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding22_closure;
         const GHC.IO.Encoding.getFileSystemEncoding13_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.713481278 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding11_closure" {
     GHC.IO.Encoding.getFileSystemEncoding11_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding24_closure;
         const GHC.IO.Encoding.getFileSystemEncoding12_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.715174007 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding10_closure" {
     GHC.IO.Encoding.getFileSystemEncoding10_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding26_closure;
         const GHC.IO.Encoding.getFileSystemEncoding11_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.716891948 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding9_closure" {
     GHC.IO.Encoding.getFileSystemEncoding9_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding28_closure;
         const GHC.IO.Encoding.getFileSystemEncoding10_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.718622142 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding8_closure" {
     GHC.IO.Encoding.getFileSystemEncoding8_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding30_closure;
         const GHC.IO.Encoding.getFileSystemEncoding9_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.720414989 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding7_closure" {
     GHC.IO.Encoding.getFileSystemEncoding7_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding32_closure;
         const GHC.IO.Encoding.getFileSystemEncoding8_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.722412691 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding66_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding66_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,54,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.724505489 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding65_closure" {
     GHC.IO.Encoding.getFileSystemEncoding65_closure:
         const GHC.IO.Encoding.getFileSystemEncoding65_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding65_entry() //  [R1]
         { info_tbl: [(c9YH1,
                       label: GHC.IO.Encoding.getFileSystemEncoding65_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YH1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YH2; else goto c9YH3;
       c9YH2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YH3: // global
           (_c9YGY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YGY::I64 == 0) goto c9YH0; else goto c9YGZ;
       c9YH0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YGZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YGY::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding66_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.728720086 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding64_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding64_bytes:
         I8[] [105,115,111,45,105,114,45,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.731181871 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding63_closure" {
     GHC.IO.Encoding.getFileSystemEncoding63_closure:
         const GHC.IO.Encoding.getFileSystemEncoding63_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding63_entry() //  [R1]
         { info_tbl: [(c9YHj,
                       label: GHC.IO.Encoding.getFileSystemEncoding63_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YHj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YHk; else goto c9YHl;
       c9YHk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YHl: // global
           (_c9YHg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YHg::I64 == 0) goto c9YHi; else goto c9YHh;
       c9YHi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YHh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YHg::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding64_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.735534368 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding62_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding62_bytes:
         I8[] [65,78,83,73,95,88,51,46,52,45,49,57,56,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.737393209 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding61_closure" {
     GHC.IO.Encoding.getFileSystemEncoding61_closure:
         const GHC.IO.Encoding.getFileSystemEncoding61_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding61_entry() //  [R1]
         { info_tbl: [(c9YHB,
                       label: GHC.IO.Encoding.getFileSystemEncoding61_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YHB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YHC; else goto c9YHD;
       c9YHC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YHD: // global
           (_c9YHy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YHy::I64 == 0) goto c9YHA; else goto c9YHz;
       c9YHA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YHz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YHy::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding62_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.74115592 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding60_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding60_bytes:
         I8[] [73,83,79,95,54,52,54,46,105,114,118,58,49,57,57,49]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.743093703 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding59_closure" {
     GHC.IO.Encoding.getFileSystemEncoding59_closure:
         const GHC.IO.Encoding.getFileSystemEncoding59_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding59_entry() //  [R1]
         { info_tbl: [(c9YHT,
                       label: GHC.IO.Encoding.getFileSystemEncoding59_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YHT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YHU; else goto c9YHV;
       c9YHU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YHV: // global
           (_c9YHQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YHQ::I64 == 0) goto c9YHS; else goto c9YHR;
       c9YHS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YHR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YHQ::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding60_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.747201554 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding58_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding58_bytes:
         I8[] [85,83,45,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.749014443 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding57_closure" {
     GHC.IO.Encoding.getFileSystemEncoding57_closure:
         const GHC.IO.Encoding.getFileSystemEncoding57_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding57_entry() //  [R1]
         { info_tbl: [(c9YIb,
                       label: GHC.IO.Encoding.getFileSystemEncoding57_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YIb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YIc; else goto c9YId;
       c9YIc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YId: // global
           (_c9YI8::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YI8::I64 == 0) goto c9YIa; else goto c9YI9;
       c9YIa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YI9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YI8::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding58_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.752705874 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding56_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding56_bytes:
         I8[] [117,115]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.754624322 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding55_closure" {
     GHC.IO.Encoding.getFileSystemEncoding55_closure:
         const GHC.IO.Encoding.getFileSystemEncoding55_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding55_entry() //  [R1]
         { info_tbl: [(c9YIt,
                       label: GHC.IO.Encoding.getFileSystemEncoding55_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YIt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YIu; else goto c9YIv;
       c9YIu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YIv: // global
           (_c9YIq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YIq::I64 == 0) goto c9YIs; else goto c9YIr;
       c9YIs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YIr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YIq::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding56_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.75909991 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding54_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding54_bytes:
         I8[] [73,66,77,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.760917083 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding53_closure" {
     GHC.IO.Encoding.getFileSystemEncoding53_closure:
         const GHC.IO.Encoding.getFileSystemEncoding53_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding53_entry() //  [R1]
         { info_tbl: [(c9YIL,
                       label: GHC.IO.Encoding.getFileSystemEncoding53_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YIL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YIM; else goto c9YIN;
       c9YIM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YIN: // global
           (_c9YII::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YII::I64 == 0) goto c9YIK; else goto c9YIJ;
       c9YIK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YIJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YII::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding54_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.765183258 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding52_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding52_bytes:
         I8[] [99,112,51,54,55]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.767078797 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding51_closure" {
     GHC.IO.Encoding.getFileSystemEncoding51_closure:
         const GHC.IO.Encoding.getFileSystemEncoding51_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding51_entry() //  [R1]
         { info_tbl: [(c9YJ3,
                       label: GHC.IO.Encoding.getFileSystemEncoding51_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YJ3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJ4; else goto c9YJ5;
       c9YJ4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJ5: // global
           (_c9YJ0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJ0::I64 == 0) goto c9YJ2; else goto c9YJ1;
       c9YJ2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJ1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJ0::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding52_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.770981016 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding50_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding50_bytes:
         I8[] [99,115,65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.772842098 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding49_closure" {
     GHC.IO.Encoding.getFileSystemEncoding49_closure:
         const GHC.IO.Encoding.getFileSystemEncoding49_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding49_entry() //  [R1]
         { info_tbl: [(c9YJl,
                       label: GHC.IO.Encoding.getFileSystemEncoding49_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YJl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJm; else goto c9YJn;
       c9YJm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJn: // global
           (_c9YJi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJi::I64 == 0) goto c9YJk; else goto c9YJj;
       c9YJk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJi::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding50_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.777340255 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding48_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding48_bytes:
         I8[] [65,83,67,73,73]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.779211979 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding47_closure" {
     GHC.IO.Encoding.getFileSystemEncoding47_closure:
         const GHC.IO.Encoding.getFileSystemEncoding47_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding47_entry() //  [R1]
         { info_tbl: [(c9YJD,
                       label: GHC.IO.Encoding.getFileSystemEncoding47_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YJD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJE; else goto c9YJF;
       c9YJE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJF: // global
           (_c9YJA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJA::I64 == 0) goto c9YJC; else goto c9YJB;
       c9YJC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJA::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding48_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.78327791 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding46_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding46_bytes:
         I8[] [73,83,79,54,52,54,45,85,83]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.785268974 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding45_closure" {
     GHC.IO.Encoding.getFileSystemEncoding45_closure:
         const GHC.IO.Encoding.getFileSystemEncoding45_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding45_entry() //  [R1]
         { info_tbl: [(c9YJV,
                       label: GHC.IO.Encoding.getFileSystemEncoding45_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YJV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YJW; else goto c9YJX;
       c9YJW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YJX: // global
           (_c9YJS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YJS::I64 == 0) goto c9YJU; else goto c9YJT;
       c9YJU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YJT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YJS::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding46_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.789577538 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding44_closure" {
     GHC.IO.Encoding.getFileSystemEncoding44_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding45_closure;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.791265438 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding43_closure" {
     GHC.IO.Encoding.getFileSystemEncoding43_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding47_closure;
         const GHC.IO.Encoding.getFileSystemEncoding44_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.793051731 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding42_closure" {
     GHC.IO.Encoding.getFileSystemEncoding42_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding49_closure;
         const GHC.IO.Encoding.getFileSystemEncoding43_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.795194895 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding41_closure" {
     GHC.IO.Encoding.getFileSystemEncoding41_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding51_closure;
         const GHC.IO.Encoding.getFileSystemEncoding42_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.796886511 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding40_closure" {
     GHC.IO.Encoding.getFileSystemEncoding40_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding53_closure;
         const GHC.IO.Encoding.getFileSystemEncoding41_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.798627317 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding39_closure" {
     GHC.IO.Encoding.getFileSystemEncoding39_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding55_closure;
         const GHC.IO.Encoding.getFileSystemEncoding40_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.800321806 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding38_closure" {
     GHC.IO.Encoding.getFileSystemEncoding38_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding57_closure;
         const GHC.IO.Encoding.getFileSystemEncoding39_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.802048497 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding37_closure" {
     GHC.IO.Encoding.getFileSystemEncoding37_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding59_closure;
         const GHC.IO.Encoding.getFileSystemEncoding38_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.803769143 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding36_closure" {
     GHC.IO.Encoding.getFileSystemEncoding36_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding61_closure;
         const GHC.IO.Encoding.getFileSystemEncoding37_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.806167694 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding35_closure" {
     GHC.IO.Encoding.getFileSystemEncoding35_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding63_closure;
         const GHC.IO.Encoding.getFileSystemEncoding36_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.807939697 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding34_closure" {
     GHC.IO.Encoding.getFileSystemEncoding34_closure:
         const :_con_info;
         const GHC.IO.Encoding.getFileSystemEncoding65_closure;
         const GHC.IO.Encoding.getFileSystemEncoding35_closure+2;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.809829331 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding68_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding68_bytes:
         I8[] [85,84,70,56]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.8123701 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding67_closure" {
     GHC.IO.Encoding.getFileSystemEncoding67_closure:
         const GHC.IO.Encoding.getFileSystemEncoding67_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding67_entry() //  [R1]
         { info_tbl: [(c9YKo,
                       label: GHC.IO.Encoding.getFileSystemEncoding67_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YKo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YKp; else goto c9YKq;
       c9YKp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YKq: // global
           (_c9YKl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YKl::I64 == 0) goto c9YKn; else goto c9YKm;
       c9YKn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YKm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YKl::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding68_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.816815003 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding70_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding70_bytes:
         I8[] [85,84,70,51,50,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.818843213 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding69_closure" {
     GHC.IO.Encoding.getFileSystemEncoding69_closure:
         const GHC.IO.Encoding.getFileSystemEncoding69_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding69_entry() //  [R1]
         { info_tbl: [(c9YKG,
                       label: GHC.IO.Encoding.getFileSystemEncoding69_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YKG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YKH; else goto c9YKI;
       c9YKH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YKI: // global
           (_c9YKD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YKD::I64 == 0) goto c9YKF; else goto c9YKE;
       c9YKF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YKE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YKD::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding70_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.822730897 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding72_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding72_bytes:
         I8[] [85,84,70,51,50,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.824646097 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding71_closure" {
     GHC.IO.Encoding.getFileSystemEncoding71_closure:
         const GHC.IO.Encoding.getFileSystemEncoding71_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding71_entry() //  [R1]
         { info_tbl: [(c9YKY,
                       label: GHC.IO.Encoding.getFileSystemEncoding71_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YKY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YKZ; else goto c9YL0;
       c9YKZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YL0: // global
           (_c9YKV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YKV::I64 == 0) goto c9YKX; else goto c9YKW;
       c9YKX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YKW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YKV::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding72_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.828523845 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding74_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding74_bytes:
         I8[] [85,84,70,51,50]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.830395388 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding73_closure" {
     GHC.IO.Encoding.getFileSystemEncoding73_closure:
         const GHC.IO.Encoding.getFileSystemEncoding73_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding73_entry() //  [R1]
         { info_tbl: [(c9YLg,
                       label: GHC.IO.Encoding.getFileSystemEncoding73_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YLg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YLh; else goto c9YLi;
       c9YLh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YLi: // global
           (_c9YLd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YLd::I64 == 0) goto c9YLf; else goto c9YLe;
       c9YLf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YLe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YLd::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding74_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.834333785 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding76_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding76_bytes:
         I8[] [85,84,70,49,54,76,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.836272008 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding75_closure" {
     GHC.IO.Encoding.getFileSystemEncoding75_closure:
         const GHC.IO.Encoding.getFileSystemEncoding75_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding75_entry() //  [R1]
         { info_tbl: [(c9YLy,
                       label: GHC.IO.Encoding.getFileSystemEncoding75_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YLy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YLz; else goto c9YLA;
       c9YLz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YLA: // global
           (_c9YLv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YLv::I64 == 0) goto c9YLx; else goto c9YLw;
       c9YLx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YLw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YLv::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding76_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.8408124 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding78_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding78_bytes:
         I8[] [85,84,70,49,54,66,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.84269621 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding77_closure" {
     GHC.IO.Encoding.getFileSystemEncoding77_closure:
         const GHC.IO.Encoding.getFileSystemEncoding77_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding77_entry() //  [R1]
         { info_tbl: [(c9YLQ,
                       label: GHC.IO.Encoding.getFileSystemEncoding77_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YLQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YLR; else goto c9YLS;
       c9YLR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YLS: // global
           (_c9YLN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YLN::I64 == 0) goto c9YLP; else goto c9YLO;
       c9YLP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YLO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YLN::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding78_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.84649902 UTC

[section ""cstring" . GHC.IO.Encoding.getFileSystemEncoding80_bytes" {
     GHC.IO.Encoding.getFileSystemEncoding80_bytes:
         I8[] [85,84,70,49,54]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.848349827 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding79_closure" {
     GHC.IO.Encoding.getFileSystemEncoding79_closure:
         const GHC.IO.Encoding.getFileSystemEncoding79_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding79_entry() //  [R1]
         { info_tbl: [(c9YM8,
                       label: GHC.IO.Encoding.getFileSystemEncoding79_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YM8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YM9; else goto c9YMa;
       c9YM9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YMa: // global
           (_c9YM5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YM5::I64 == 0) goto c9YM7; else goto c9YM6;
       c9YM7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YM6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YM5::I64;
           R2 = GHC.IO.Encoding.getFileSystemEncoding80_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.853987667 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_go_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_go_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_go_info;
         const 0;
 },
 sat_s9YAk_entry() //  [R1]
         { info_tbl: [(c9YME,
                       label: sat_s9YAk_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YME: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YMF; else goto c9YMG;
       c9YMF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YMG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAj_entry() //  [R1]
         { info_tbl: [(c9YMN,
                       label: sat_s9YAj_info
                       rep:HeapRep 1 nonptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YMN: // global
           _s9YAj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9YMO; else goto c9YMP;
       c9YMP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9YMR; else goto c9YMQ;
       c9YMR: // global
           HpAlloc = 16;
           goto c9YMO;
       c9YMO: // global
           R1 = _s9YAj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YMQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9YAj::P64;
           (_s9YAf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] u_towupper(I64[_s9YAj::P64 + 16]);
           if (_s9YAf::I64 > 1114111) goto c9YN1; else goto c9YN8;
       c9YN1: // global
           Hp = Hp - 16;
           R2 = _s9YAf::I64;
           Sp = Sp - 16;
           call GHC.Char.$wlvl_entry(R2) args: 24, res: 0, upd: 24;
       c9YN8: // global
           I64[Hp - 8] = GHC.Types.C#_con_info;
           I64[Hp] = _s9YAf::I64;
           R1 = Hp - 7;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding_go_entry() //  [R2]
         { info_tbl: [(c9YNd,
                       label: GHC.IO.Encoding.getFileSystemEncoding_go_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YNd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YNe; else goto u9YNq;
       c9YNe: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding_go_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       u9YNq: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _c9YMk() args: 0, res: 0, upd: 0;
     }
 },
 _c9YMk() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YMk: // global
           _s9YA4::P64 = P64[Sp];
           I64[Sp] = block_c9YMn_info;
           R1 = _s9YA4::P64;
           if (R1 & 7 != 0) goto u9YNs; else goto c9YMo;
       u9YNs: // global
           call _c9YMn(R1) args: 0, res: 0, upd: 0;
       c9YMo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YMn() //  [R1]
         { info_tbl: [(c9YMn,
                       label: block_c9YMn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YMn: // global
           if (R1 & 7 == 1) goto c9YNa; else goto c9YNb;
       c9YNa: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YNb: // global
           I64[Sp - 8] = block_c9YMt_info;
           _s9YA7::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _s9YA7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YNt; else goto c9YMu;
       u9YNt: // global
           call _c9YMt(R1) args: 0, res: 0, upd: 0;
       c9YMu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YMt() //  [R1]
         { info_tbl: [(c9YMt,
                       label: block_c9YMt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YMt: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9YNl; else goto c9YNk;
       c9YNl: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YNk: // global
           _s9YA7::P64 = P64[Sp + 8];
           _s9YAa::I64 = I64[R1 + 7];
           if (_s9YAa::I64 != 45) goto c9YNo; else goto c9YNp;
       c9YNo: // global
           I64[Hp - 64] = sat_s9YAk_info;
           P64[Hp - 48] = _s9YA7::P64;
           I64[Hp - 40] = sat_s9YAj_info;
           I64[Hp - 24] = _s9YAa::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 40;
           P64[Hp] = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YNp: // global
           Hp = Hp - 72;
           P64[Sp + 8] = _s9YA7::P64;
           Sp = Sp + 8;
           call _c9YMk() args: 0, res: 0, upd: 0;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.868827603 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding6_closure" {
     GHC.IO.Encoding.getFileSystemEncoding6_closure:
         const GHC.IO.Encoding.getFileSystemEncoding6_info;
         const 0;
 },
 sat_s9YAp_entry() //  [R1]
         { info_tbl: [(c9YOq,
                       label: sat_s9YAp_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YOq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YOr; else goto c9YOs;
       c9YOr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YOs: // global
           I64[Sp - 8] = block_c9YOh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YOH; else goto c9YOi;
       u9YOH: // global
           call _c9YOh(R1) args: 0, res: 0, upd: 0;
       c9YOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YOh() //  [R1]
         { info_tbl: [(c9YOh,
                       label: block_c9YOh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YOh: // global
           _c9YOp::P64 = R1 & 7;
           if (_c9YOp::P64 < 3) goto u9YOF; else goto u9YOG;
       u9YOF: // global
           if (_c9YOp::P64 < 2) goto c9YOl; else goto c9YOm;
       c9YOl: // global
           R1 = []_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YOm: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       u9YOG: // global
           if (_c9YOp::P64 < 4) goto c9YOn; else goto c9YOo;
       c9YOn: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       c9YOo: // global
           R1 = GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding6_entry() //  [R2, R3]
         { info_tbl: [(c9YOK,
                       label: GHC.IO.Encoding.getFileSystemEncoding6_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YOK: // global
           _s9YAm::P64 = R3;
           _s9YAl::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto c9YOL; else goto c9YOM;
       c9YOM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YOO; else goto c9YON;
       c9YOO: // global
           HpAlloc = 24;
           goto c9YOL;
       c9YOL: // global
           R3 = _s9YAm::P64;
           R2 = _s9YAl::P64;
           R1 = GHC.IO.Encoding.getFileSystemEncoding6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9YON: // global
           I64[Hp - 16] = sat_s9YAp_info;
           P64[Hp] = _s9YAl::P64;
           I64[Sp - 8] = block_c9YOI_info;
           R3 = Hp - 16;
           R2 = _s9YAm::P64;
           Sp = Sp - 8;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9YOI() //  [R1]
         { info_tbl: [(c9YOI,
                       label: block_c9YOI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YOI: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.880727671 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding5_closure" {
     GHC.IO.Encoding.getFileSystemEncoding5_closure:
         const GHC.IO.Encoding.getFileSystemEncoding5_info;
         const 0;
 },
 sat_s9YAJ_entry() //  [R1]
         { info_tbl: [(c9YQ4,
                       label: sat_s9YAJ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YQ4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQ5; else goto c9YQ6;
       c9YQ5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkLatin1_checked_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAK_entry() //  [R1]
         { info_tbl: [(c9YQd,
                       label: sat_s9YAK_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YQd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQe; else goto c9YQf;
       c9YQe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.Latin1.mkAscii_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAL_entry() //  [R1]
         { info_tbl: [(c9YQm,
                       label: sat_s9YAL_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YQm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQn; else goto c9YQo;
       c9YQn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF8.mkUTF8_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAM_entry() //  [R1]
         { info_tbl: [(c9YQv,
                       label: sat_s9YAM_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YQv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQw; else goto c9YQx;
       c9YQw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAN_entry() //  [R1]
         { info_tbl: [(c9YQE,
                       label: sat_s9YAN_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YQE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQF; else goto c9YQG;
       c9YQF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAO_entry() //  [R1]
         { info_tbl: [(c9YQN,
                       label: sat_s9YAO_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YQN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQO; else goto c9YQP;
       c9YQO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF32.mkUTF32_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAP_entry() //  [R1]
         { info_tbl: [(c9YQW,
                       label: sat_s9YAP_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YQW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YQX; else goto c9YQY;
       c9YQX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YQY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16le_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAQ_entry() //  [R1]
         { info_tbl: [(c9YR5,
                       label: sat_s9YAQ_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YR5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YR6; else goto c9YR7;
       c9YR6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YR7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16be_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_s9YAR_entry() //  [R1]
         { info_tbl: [(c9YRe,
                       label: sat_s9YAR_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YRe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YRf; else goto c9YRg;
       c9YRf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YRg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.IO.Encoding.UTF16.mkUTF16_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding5_entry() //  [R2, R3]
         { info_tbl: [(c9YRh,
                       label: GHC.IO.Encoding.getFileSystemEncoding5_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YRh: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9YRi; else goto c9YRj;
       c9YRi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.getFileSystemEncoding5_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9YRj: // global
           I64[Sp - 24] = block_c9YPl_info;
           _s9YAr::P64 = R2;
           R2 = R3;
           P64[Sp - 16] = _s9YAr::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding_go_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9YPl() //  [R1]
         { info_tbl: [(c9YPl,
                       label: block_c9YPl_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPl: // global
           I64[Sp - 8] = block_c9YPp_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding79_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9YPp() //  [R1]
         { info_tbl: [(c9YPp,
                       label: block_c9YPp_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPp: // global
           if (R1 & 7 == 1) goto c9YRn; else goto c9YSy;
       c9YRn: // global
           I64[Sp] = block_c9YPt_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding77_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSB; else goto c9YSA;
       c9YSB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSA: // global
           I64[Hp - 16] = sat_s9YAR_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPt() //  [R1]
         { info_tbl: [(c9YPt,
                       label: block_c9YPt_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPt: // global
           if (R1 & 7 == 1) goto c9YRq; else goto c9YSu;
       c9YRq: // global
           I64[Sp] = block_c9YPx_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding75_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSx; else goto c9YSw;
       c9YSx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSw: // global
           I64[Hp - 16] = sat_s9YAQ_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPx() //  [R1]
         { info_tbl: [(c9YPx,
                       label: block_c9YPx_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPx: // global
           if (R1 & 7 == 1) goto c9YRt; else goto c9YSq;
       c9YRt: // global
           I64[Sp] = block_c9YPB_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding73_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSt; else goto c9YSs;
       c9YSt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSs: // global
           I64[Hp - 16] = sat_s9YAP_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPB() //  [R1]
         { info_tbl: [(c9YPB,
                       label: block_c9YPB_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPB: // global
           if (R1 & 7 == 1) goto c9YRw; else goto c9YSm;
       c9YRw: // global
           I64[Sp] = block_c9YPF_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding71_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSp; else goto c9YSo;
       c9YSp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSo: // global
           I64[Hp - 16] = sat_s9YAO_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPF() //  [R1]
         { info_tbl: [(c9YPF,
                       label: block_c9YPF_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPF: // global
           if (R1 & 7 == 1) goto c9YRz; else goto c9YSi;
       c9YRz: // global
           I64[Sp] = block_c9YPJ_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding69_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSl; else goto c9YSk;
       c9YSl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSk: // global
           I64[Hp - 16] = sat_s9YAN_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPJ() //  [R1]
         { info_tbl: [(c9YPJ,
                       label: block_c9YPJ_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPJ: // global
           if (R1 & 7 == 1) goto c9YRC; else goto c9YSe;
       c9YRC: // global
           _s9YAu::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9YPN_info;
           R3 = GHC.IO.Encoding.getFileSystemEncoding67_closure;
           R2 = _s9YAu::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YSe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSh; else goto c9YSg;
       c9YSh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSg: // global
           I64[Hp - 16] = sat_s9YAM_info;
           P64[Hp] = P64[Sp + 16];
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPN() //  [R1]
         { info_tbl: [(c9YPN,
                       label: block_c9YPN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPN: // global
           if (R1 & 7 == 1) goto c9YRF; else goto c9YSa;
       c9YRF: // global
           I64[Sp] = block_c9YPR_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding34_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YSa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YSd; else goto c9YSc;
       c9YSd: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YSc: // global
           I64[Hp - 16] = sat_s9YAL_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPR() //  [R1]
         { info_tbl: [(c9YPR,
                       label: block_c9YPR_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPR: // global
           if (R1 & 7 == 1) goto c9YRI; else goto c9YS6;
       c9YRI: // global
           I64[Sp] = block_c9YPV_info;
           R4 = GHC.IO.Encoding.getFileSystemEncoding7_closure+2;
           R3 = P64[Sp + 16];
           R2 = GHC.Classes.$fEq[]_$s$fEq[]1_closure;
           call GHC.List.elem_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       c9YS6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YS9; else goto c9YS8;
       c9YS9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YS8: // global
           I64[Hp - 16] = sat_s9YAK_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YPV() //  [R1]
         { info_tbl: [(c9YPV,
                       label: block_c9YPV_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YPV: // global
           _s9YAr::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto c9YRP; else goto c9YS2;
       c9YRP: // global
           I64[Sp] = block_c9YRK_info;
           R3 = P64[Sp + 16];
           R2 = _s9YAr::P64;
           call GHC.IO.Encoding.Iconv.iconvEncoding2_entry(R3,
                                                           R2) args: 8, res: 8, upd: 8;
       c9YS2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9YS5; else goto c9YS4;
       c9YS5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YS4: // global
           I64[Hp - 16] = sat_s9YAJ_info;
           P64[Hp] = _s9YAr::P64;
           R1 = Hp - 16;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _c9YRK() //  [R1]
         { info_tbl: [(c9YRK,
                       label: block_c9YRK_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YRK: // global
           I64[Sp] = block_c9YRM_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9YSM; else goto c9YRR;
       u9YSM: // global
           call _c9YRM(R1) args: 0, res: 0, upd: 0;
       c9YRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YRM() //  [R1]
         { info_tbl: [(c9YRM,
                       label: block_c9YRM_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YRM: // global
           if (R1 & 7 == 1) goto c9YRX; else goto c9YS1;
       c9YRX: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding6_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YS1: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.927247699 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding9_closure" {
     GHC.IO.Encoding.mkTextEncoding9_closure:
         const GHC.IO.Encoding.mkTextEncoding9_info;
 },
 GHC.IO.Encoding.mkTextEncoding9_entry() //  [R2]
         { info_tbl: [(c9YVg,
                       label: GHC.IO.Encoding.mkTextEncoding9_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YVg: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YVh; else goto c9YVi;
       c9YVh: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding9_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YVi: // global
           I64[Sp - 8] = block_c9YVd_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YVq; else goto c9YVe;
       u9YVq: // global
           call _c9YVd(R1) args: 0, res: 0, upd: 0;
       c9YVe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YVd() //  [R1]
         { info_tbl: [(c9YVd,
                       label: block_c9YVd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YVd: // global
           if (I64[R1 + 7] == 47) goto c9YVp; else goto c9YVo;
       c9YVp: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9YVo: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.933126725 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding4_bytes" {
     GHC.IO.Encoding.mkTextEncoding4_bytes:
         I8[] [47,47,84,82,65,78,83,76,73,84]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.934950217 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding3_closure" {
     GHC.IO.Encoding.mkTextEncoding3_closure:
         const GHC.IO.Encoding.mkTextEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding3_entry() //  [R1]
         { info_tbl: [(c9YVM,
                       label: GHC.IO.Encoding.mkTextEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YVM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YVN; else goto c9YVO;
       c9YVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YVO: // global
           (_c9YVJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YVJ::I64 == 0) goto c9YVL; else goto c9YVK;
       c9YVL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YVK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YVJ::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.939137553 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding6_bytes" {
     GHC.IO.Encoding.mkTextEncoding6_bytes:
         I8[] [47,47,82,79,85,78,68,84,82,73,80]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.940982799 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding5_closure" {
     GHC.IO.Encoding.mkTextEncoding5_closure:
         const GHC.IO.Encoding.mkTextEncoding5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding5_entry() //  [R1]
         { info_tbl: [(c9YW4,
                       label: GHC.IO.Encoding.mkTextEncoding5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YW4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YW5; else goto c9YW6;
       c9YW5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YW6: // global
           (_c9YW1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YW1::I64 == 0) goto c9YW3; else goto c9YW2;
       c9YW3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YW2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YW1::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.944997716 UTC

[section ""cstring" . GHC.IO.Encoding.mkTextEncoding8_bytes" {
     GHC.IO.Encoding.mkTextEncoding8_bytes:
         I8[] [47,47,73,71,78,79,82,69]
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.947154491 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding7_closure" {
     GHC.IO.Encoding.mkTextEncoding7_closure:
         const GHC.IO.Encoding.mkTextEncoding7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding7_entry() //  [R1]
         { info_tbl: [(c9YWm,
                       label: GHC.IO.Encoding.mkTextEncoding7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YWm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9YWn; else goto c9YWo;
       c9YWn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YWo: // global
           (_c9YWj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YWj::I64 == 0) goto c9YWl; else goto c9YWk;
       c9YWl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YWk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YWj::I64;
           R2 = GHC.IO.Encoding.mkTextEncoding8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.952036232 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding1_closure" {
     GHC.IO.Encoding.mkTextEncoding1_closure:
         const GHC.IO.Encoding.mkTextEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding1_entry() //  [R2]
         { info_tbl: [(c9YWK,
                       label: GHC.IO.Encoding.mkTextEncoding1_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YWK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9YWL; else goto c9YWM;
       c9YWL: // global
           R2 = R2;
           R1 = GHC.IO.Encoding.mkTextEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9YWM: // global
           I64[Sp - 16] = block_c9YWB_info;
           R3 = R2;
           _s9YAW::P64 = R2;
           R2 = GHC.IO.Encoding.mkTextEncoding9_closure+1;
           P64[Sp - 8] = _s9YAW::P64;
           Sp = Sp - 16;
           call GHC.List.$wspan_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9YWB() //  [R1, R2]
         { info_tbl: [(c9YWB,
                       label: block_c9YWB_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YWB: // global
           I64[Sp - 8] = block_c9YWD_info;
           _s9YAZ::P64 = R1;
           R1 = R2;
           P64[Sp] = _s9YAZ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9YXu; else goto c9YWE;
       u9YXu: // global
           call _c9YWD(R1) args: 0, res: 0, upd: 0;
       c9YWE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YWD() //  [R1]
         { info_tbl: [(c9YWD,
                       label: block_c9YWD_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YWD: // global
           if (R1 & 7 == 1) goto c9YWH; else goto c9YWI;
       c9YWH: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
       c9YWI: // global
           I64[Sp - 8] = block_c9YWT_info;
           R3 = GHC.IO.Encoding.mkTextEncoding7_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9YWT() //  [R1]
         { info_tbl: [(c9YWT,
                       label: block_c9YWT_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YWT: // global
           if (R1 & 7 == 1) goto c9YX1; else goto c9YXq;
       c9YX1: // global
           I64[Sp] = block_c9YWY_info;
           R3 = GHC.IO.Encoding.mkTextEncoding5_closure;
           R2 = P64[Sp + 8];
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YXq: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9YWY() //  [R1]
         { info_tbl: [(c9YWY,
                       label: block_c9YWY_info
                       rep:StackRep [False, False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YWY: // global
           if (R1 & 7 == 1) goto c9YX8; else goto c9YXm;
       c9YX8: // global
           _s9YB1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_c9YX5_info;
           R3 = GHC.IO.Encoding.mkTextEncoding3_closure;
           R2 = _s9YB1::P64;
           Sp = Sp + 8;
           call GHC.Base.eqString_entry(R3, R2) args: 8, res: 8, upd: 8;
       c9YXm: // global
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 32;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 },
 _c9YX5() //  [R1]
         { info_tbl: [(c9YX5,
                       label: block_c9YX5_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YX5: // global
           if (R1 & 7 == 1) goto c9YXe; else goto c9YXi;
       c9YXe: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Encoding.mkTextEncoding2_entry(R2) args: 8, res: 0, upd: 8;
       c9YXi: // global
           R3 = P64[Sp + 8];
           R2 = GHC.IO.Encoding.Failure.TransliterateCodingFailure_closure+3;
           Sp = Sp + 24;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.965202428 UTC

[section ""data" . GHC.IO.Encoding.mkTextEncoding_closure" {
     GHC.IO.Encoding.mkTextEncoding_closure:
         const GHC.IO.Encoding.mkTextEncoding_info;
         const 0;
 },
 GHC.IO.Encoding.mkTextEncoding_entry() //  [R2]
         { info_tbl: [(c9YYb,
                       label: GHC.IO.Encoding.mkTextEncoding_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YYb: // global
           R2 = R2;
           call GHC.IO.Encoding.mkTextEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.968530198 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding4_closure" {
     GHC.IO.Encoding.getForeignEncoding4_closure:
         const GHC.IO.Encoding.getForeignEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding4_entry() //  []
         { info_tbl: [(c9YYo,
                       label: GHC.IO.Encoding.getForeignEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YYo: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YYp; else goto c9YYq;
       c9YYp: // global
           R1 = GHC.IO.Encoding.getForeignEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9YYq: // global
           I64[Sp - 8] = block_c9YYm_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9YYm() //  []
         { info_tbl: [(c9YYm,
                       label: block_c9YYm_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YYm: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.IgnoreCodingFailure_closure+2;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.974227506 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding3_closure" {
     GHC.IO.Encoding.getForeignEncoding3_closure:
         const GHC.IO.Encoding.getForeignEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding3_entry() //  [R1]
         { info_tbl: [(c9YYK,
                       label: GHC.IO.Encoding.getForeignEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YYK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9YYL; else goto c9YYM;
       c9YYL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9YYM: // global
           (_c9YYF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9YYF::I64 == 0) goto c9YYH; else goto c9YYG;
       c9YYH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9YYG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9YYF::I64;
           I64[Sp - 24] = block_c9YYI_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9YYI() //  [R1]
         { info_tbl: [(c9YYI,
                       label: block_c9YYI_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YYI: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.980572071 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding2_closure" {
     GHC.IO.Encoding.getForeignEncoding2_closure:
         const GHC.IO.Encoding.getForeignEncoding2_info;
         const 0;
 },
 sat_s9YBm_entry() //  [R1, R2]
         { info_tbl: [(c9YZi,
                       label: sat_s9YBm_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YZi: // global
           _s9YBg::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9YBg::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9YBg::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9YBi_entry() //  [R1]
         { info_tbl: [(c9YZr,
                       label: sat_s9YBi_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YZr: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getForeignEncoding2_entry() //  []
         { info_tbl: [(c9YZv,
                       label: GHC.IO.Encoding.getForeignEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YZv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9YZw; else goto c9YZx;
       c9YZw: // global
           R1 = GHC.IO.Encoding.getForeignEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9YZx: // global
           I64[Sp - 8] = block_c9YZ6_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9YZ6() //  []
         { info_tbl: [(c9YZ6,
                       label: block_c9YZ6_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YZ6: // global
           I64[Sp] = block_c9YZ8_info;
           R1 = GHC.IO.Encoding.getForeignEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9YZ8() //  [R1]
         { info_tbl: [(c9YZ8,
                       label: block_c9YZ8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9YZ8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9YZB; else goto c9YZA;
       c9YZB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9YZA: // global
           I64[Hp - 48] = sat_s9YBm_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9YBi_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.991331498 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding1_closure" {
     GHC.IO.Encoding.getForeignEncoding1_closure:
         const GHC.IO.Encoding.getForeignEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding1_entry() //  [R1]
         { info_tbl: [(c9Z0e,
                       label: GHC.IO.Encoding.getForeignEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z0e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z0f; else goto c9Z0g;
       c9Z0f: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z0g: // global
           (_c9Z09::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z09::I64 == 0) goto c9Z0b; else goto c9Z0a;
       c9Z0b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z0a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z09::I64;
           I64[Sp - 24] = block_c9Z0c_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getForeignEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Z0c() //  [R1]
         { info_tbl: [(c9Z0c,
                       label: block_c9Z0c_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z0c: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:03.996761062 UTC

[section ""data" . GHC.IO.Encoding.getForeignEncoding_closure" {
     GHC.IO.Encoding.getForeignEncoding_closure:
         const GHC.IO.Encoding.getForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9Z0F,
                       label: GHC.IO.Encoding.getForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z0F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z0G; else goto c9Z0H;
       c9Z0G: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z0H: // global
           (_c9Z0z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z0z::I64 == 0) goto c9Z0B; else goto c9Z0A;
       c9Z0B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z0A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z0z::I64;
           I64[Sp - 24] = block_c9Z0C_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z0L; else goto c9Z0D;
       u9Z0L: // global
           call _c9Z0C(R1) args: 0, res: 0, upd: 0;
       c9Z0D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z0C() //  [R1]
         { info_tbl: [(c9Z0C,
                       label: block_c9Z0C_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z0C: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.0025479 UTC

[section ""data" . GHC.IO.Encoding.setForeignEncoding_closure" {
     GHC.IO.Encoding.setForeignEncoding_closure:
         const GHC.IO.Encoding.setForeignEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setForeignEncoding_entry() //  [R1]
         { info_tbl: [(c9Z18,
                       label: GHC.IO.Encoding.setForeignEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z18: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z19; else goto c9Z1a;
       c9Z19: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z1a: // global
           (_c9Z12::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z12::I64 == 0) goto c9Z14; else goto c9Z13;
       c9Z14: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z13: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z12::I64;
           I64[Sp - 24] = block_c9Z15_info;
           R1 = GHC.IO.Encoding.getForeignEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z1e; else goto c9Z16;
       u9Z1e: // global
           call _c9Z15(R1) args: 0, res: 0, upd: 0;
       c9Z16: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z15() //  [R1]
         { info_tbl: [(c9Z15,
                       label: block_c9Z15_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z15: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.008555277 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding4_closure" {
     GHC.IO.Encoding.getFileSystemEncoding4_closure:
         const GHC.IO.Encoding.getFileSystemEncoding4_info;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding4_entry() //  []
         { info_tbl: [(c9Z1y,
                       label: GHC.IO.Encoding.getFileSystemEncoding4_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z1y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z1z; else goto c9Z1A;
       c9Z1z: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding4_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z1A: // global
           I64[Sp - 8] = block_c9Z1w_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Z1w() //  []
         { info_tbl: [(c9Z1w,
                       label: block_c9Z1w_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z1w: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.RoundtripFailure_closure+4;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.013669592 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding3_closure" {
     GHC.IO.Encoding.getFileSystemEncoding3_closure:
         const GHC.IO.Encoding.getFileSystemEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding3_entry() //  [R1]
         { info_tbl: [(c9Z1U,
                       label: GHC.IO.Encoding.getFileSystemEncoding3_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z1U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z1V; else goto c9Z1W;
       c9Z1V: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z1W: // global
           (_c9Z1P::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z1P::I64 == 0) goto c9Z1R; else goto c9Z1Q;
       c9Z1R: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z1Q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z1P::I64;
           I64[Sp - 24] = block_c9Z1S_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding4_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Z1S() //  [R1]
         { info_tbl: [(c9Z1S,
                       label: block_c9Z1S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z1S: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.01955656 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding2_closure" {
     GHC.IO.Encoding.getFileSystemEncoding2_closure:
         const GHC.IO.Encoding.getFileSystemEncoding2_info;
         const 0;
 },
 sat_s9YBM_entry() //  [R1, R2]
         { info_tbl: [(c9Z2s,
                       label: sat_s9YBM_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z2s: // global
           _s9YBG::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9YBG::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9YBG::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9YBI_entry() //  [R1]
         { info_tbl: [(c9Z2B,
                       label: sat_s9YBI_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z2B: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getFileSystemEncoding2_entry() //  []
         { info_tbl: [(c9Z2F,
                       label: GHC.IO.Encoding.getFileSystemEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z2F: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z2G; else goto c9Z2H;
       c9Z2G: // global
           R1 = GHC.IO.Encoding.getFileSystemEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z2H: // global
           I64[Sp - 8] = block_c9Z2g_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Z2g() //  []
         { info_tbl: [(c9Z2g,
                       label: block_c9Z2g_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z2g: // global
           I64[Sp] = block_c9Z2i_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding3_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Z2i() //  [R1]
         { info_tbl: [(c9Z2i,
                       label: block_c9Z2i_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z2i: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Z2L; else goto c9Z2K;
       c9Z2L: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z2K: // global
           I64[Hp - 48] = sat_s9YBM_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9YBI_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.030468 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding1_closure" {
     GHC.IO.Encoding.getFileSystemEncoding1_closure:
         const GHC.IO.Encoding.getFileSystemEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding1_entry() //  [R1]
         { info_tbl: [(c9Z3o,
                       label: GHC.IO.Encoding.getFileSystemEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z3o: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z3p; else goto c9Z3q;
       c9Z3p: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z3q: // global
           (_c9Z3j::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z3j::I64 == 0) goto c9Z3l; else goto c9Z3k;
       c9Z3l: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z3k: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z3j::I64;
           I64[Sp - 24] = block_c9Z3m_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getFileSystemEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Z3m() //  [R1]
         { info_tbl: [(c9Z3m,
                       label: block_c9Z3m_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z3m: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.036668363 UTC

[section ""data" . GHC.IO.Encoding.getFileSystemEncoding_closure" {
     GHC.IO.Encoding.getFileSystemEncoding_closure:
         const GHC.IO.Encoding.getFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9Z3P,
                       label: GHC.IO.Encoding.getFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z3P: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z3Q; else goto c9Z3R;
       c9Z3Q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z3R: // global
           (_c9Z3J::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z3J::I64 == 0) goto c9Z3L; else goto c9Z3K;
       c9Z3L: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z3K: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z3J::I64;
           I64[Sp - 24] = block_c9Z3M_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z3V; else goto c9Z3N;
       u9Z3V: // global
           call _c9Z3M(R1) args: 0, res: 0, upd: 0;
       c9Z3N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z3M() //  [R1]
         { info_tbl: [(c9Z3M,
                       label: block_c9Z3M_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z3M: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.042038164 UTC

[section ""data" . GHC.IO.Encoding.argvEncoding_closure" {
     GHC.IO.Encoding.argvEncoding_closure:
         const stg_IND_STATIC_info;
         const GHC.IO.Encoding.getFileSystemEncoding_closure;
         const 0;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.044025168 UTC

[section ""data" . GHC.IO.Encoding.setFileSystemEncoding_closure" {
     GHC.IO.Encoding.setFileSystemEncoding_closure:
         const GHC.IO.Encoding.setFileSystemEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setFileSystemEncoding_entry() //  [R1]
         { info_tbl: [(c9Z4j,
                       label: GHC.IO.Encoding.setFileSystemEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z4j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z4k; else goto c9Z4l;
       c9Z4k: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z4l: // global
           (_c9Z4d::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z4d::I64 == 0) goto c9Z4f; else goto c9Z4e;
       c9Z4f: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z4e: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z4d::I64;
           I64[Sp - 24] = block_c9Z4g_info;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z4p; else goto c9Z4h;
       u9Z4p: // global
           call _c9Z4g(R1) args: 0, res: 0, upd: 0;
       c9Z4h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z4g() //  [R1]
         { info_tbl: [(c9Z4g,
                       label: block_c9Z4g_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z4g: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.050117109 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding1_closure" {
     GHC.IO.Encoding.initLocaleEncoding1_closure:
         const GHC.IO.Encoding.initLocaleEncoding1_info;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding1_entry() //  []
         { info_tbl: [(c9Z4J,
                       label: GHC.IO.Encoding.initLocaleEncoding1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z4J: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z4K; else goto c9Z4L;
       c9Z4K: // global
           R1 = GHC.IO.Encoding.initLocaleEncoding1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z4L: // global
           I64[Sp - 8] = block_c9Z4H_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Z4H() //  []
         { info_tbl: [(c9Z4H,
                       label: block_c9Z4H_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z4H: // global
           R3 = GHC.IO.Encoding.Iconv.localeEncodingName_closure;
           R2 = GHC.IO.Encoding.Failure.ErrorOnCodingFailure_closure+1;
           Sp = Sp + 8;
           call GHC.IO.Encoding.getFileSystemEncoding5_entry(R3,
                                                             R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.055465632 UTC

[section ""data" . GHC.IO.Encoding.initLocaleEncoding_closure" {
     GHC.IO.Encoding.initLocaleEncoding_closure:
         const GHC.IO.Encoding.initLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.initLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9Z55,
                       label: GHC.IO.Encoding.initLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z55: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z56; else goto c9Z57;
       c9Z56: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z57: // global
           (_c9Z50::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z50::I64 == 0) goto c9Z52; else goto c9Z51;
       c9Z52: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z51: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z50::I64;
           I64[Sp - 24] = block_c9Z53_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.initLocaleEncoding1_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Z53() //  [R1]
         { info_tbl: [(c9Z53,
                       label: block_c9Z53_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z53: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.062517672 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding2_closure" {
     GHC.IO.Encoding.getLocaleEncoding2_closure:
         const GHC.IO.Encoding.getLocaleEncoding2_info;
         const 0;
 },
 sat_s9YCc_entry() //  [R1, R2]
         { info_tbl: [(c9Z5D,
                       label: sat_s9YCc_info
                       rep:HeapRep 1 ptrs { Fun {arity: 2 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z5D: // global
           _s9YC6::P64 = P64[R1 + 6];
           call MO_WriteBarrier();
           P64[_s9YC6::P64 + 8] = R2;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9YC6::P64);
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9YC8_entry() //  [R1]
         { info_tbl: [(c9Z5M,
                       label: sat_s9YC8_info
                       rep:HeapRep 1 ptrs { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z5M: // global
           R1 = P64[P64[R1 + 7] + 8];
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.IO.Encoding.getLocaleEncoding2_entry() //  []
         { info_tbl: [(c9Z5Q,
                       label: GHC.IO.Encoding.getLocaleEncoding2_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z5Q: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z5R; else goto c9Z5S;
       c9Z5R: // global
           R1 = GHC.IO.Encoding.getLocaleEncoding2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9Z5S: // global
           I64[Sp - 8] = block_c9Z5r_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 _c9Z5r() //  []
         { info_tbl: [(c9Z5r,
                       label: block_c9Z5r_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z5r: // global
           I64[Sp] = block_c9Z5t_info;
           R1 = GHC.IO.Encoding.initLocaleEncoding_closure;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Z5t() //  [R1]
         { info_tbl: [(c9Z5t,
                       label: block_c9Z5t_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z5t: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Z5W; else goto c9Z5V;
       c9Z5W: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z5V: // global
           I64[Hp - 48] = sat_s9YCc_info;
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_s9YC8_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 46;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.073036216 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding1_closure" {
     GHC.IO.Encoding.getLocaleEncoding1_closure:
         const GHC.IO.Encoding.getLocaleEncoding1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding1_entry() //  [R1]
         { info_tbl: [(c9Z6z,
                       label: GHC.IO.Encoding.getLocaleEncoding1_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z6z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z6A; else goto c9Z6B;
       c9Z6A: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z6B: // global
           (_c9Z6u::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z6u::I64 == 0) goto c9Z6w; else goto c9Z6v;
       c9Z6w: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z6v: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z6u::I64;
           I64[Sp - 24] = block_c9Z6x_info;
           Sp = Sp - 24;
           call GHC.IO.Encoding.getLocaleEncoding2_entry() args: 8, res: 8, upd: 24;
     }
 },
 _c9Z6x() //  [R1]
         { info_tbl: [(c9Z6x,
                       label: block_c9Z6x_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z6x: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.078679131 UTC

[section ""data" . GHC.IO.Encoding.getLocaleEncoding_closure" {
     GHC.IO.Encoding.getLocaleEncoding_closure:
         const GHC.IO.Encoding.getLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.getLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9Z70,
                       label: GHC.IO.Encoding.getLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z70: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z71; else goto c9Z72;
       c9Z71: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z72: // global
           (_c9Z6U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z6U::I64 == 0) goto c9Z6W; else goto c9Z6V;
       c9Z6W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z6V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z6U::I64;
           I64[Sp - 24] = block_c9Z6X_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z76; else goto c9Z6Y;
       u9Z76: // global
           call _c9Z6X(R1) args: 0, res: 0, upd: 0;
       c9Z6Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z6X() //  [R1]
         { info_tbl: [(c9Z6X,
                       label: block_c9Z6X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z6X: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.084637506 UTC

[section ""data" . GHC.IO.Encoding.setLocaleEncoding_closure" {
     GHC.IO.Encoding.setLocaleEncoding_closure:
         const GHC.IO.Encoding.setLocaleEncoding_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Encoding.setLocaleEncoding_entry() //  [R1]
         { info_tbl: [(c9Z7t,
                       label: GHC.IO.Encoding.setLocaleEncoding_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z7t: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z7u; else goto c9Z7v;
       c9Z7u: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z7v: // global
           (_c9Z7n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Z7n::I64 == 0) goto c9Z7p; else goto c9Z7o;
       c9Z7p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Z7o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Z7n::I64;
           I64[Sp - 24] = block_c9Z7q_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z7z; else goto c9Z7r;
       u9Z7z: // global
           call _c9Z7q(R1) args: 0, res: 0, upd: 0;
       c9Z7r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z7q() //  [R1]
         { info_tbl: [(c9Z7q,
                       label: block_c9Z7q_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z7q: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.091289504 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode1_closure" {
     GHC.IO.Encoding.latin1_decode1_closure:
         const GHC.IO.Encoding.latin1_decode1_info;
 },
 sat_s9YCx_entry() //  [R1]
         { info_tbl: [(c9Z80,
                       label: sat_s9YCx_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z80: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z84; else goto c9Z85;
       c9Z84: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z85: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Z7X_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z89; else goto c9Z7Y;
       u9Z89: // global
           call _c9Z7X(R1) args: 0, res: 0, upd: 0;
       c9Z7Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z7X() //  [R1]
         { info_tbl: [(c9Z7X,
                       label: block_c9Z7X_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z7X: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z88; else goto c9Z87;
       c9Z88: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Z87: // global
           _s9YCv::P64 = P64[R1 + 15];
           _s9YCw::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9YCv::P64;
           P64[Hp] = _s9YCw::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_decode1_entry() //  [R2, R3]
         { info_tbl: [(c9Z8a,
                       label: GHC.IO.Encoding.latin1_decode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z8a: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z8b; else goto c9Z8c;
       c9Z8b: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_decode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Z8c: // global
           I64[Sp - 8] = block_c9Z7R_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin5_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Z7R() //  [R1]
         { info_tbl: [(c9Z7R,
                       label: block_c9Z7R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z7R: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z8f; else goto c9Z8e;
       c9Z8f: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z8e: // global
           I64[Hp - 16] = sat_s9YCx_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.10087331 UTC

[section ""data" . GHC.IO.Encoding.latin1_decode_closure" {
     GHC.IO.Encoding.latin1_decode_closure:
         const GHC.IO.Encoding.latin1_decode_info;
 },
 GHC.IO.Encoding.latin1_decode_entry() //  [R2, R3]
         { info_tbl: [(c9Z8H,
                       label: GHC.IO.Encoding.latin1_decode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z8H: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_decode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.105004888 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode1_closure" {
     GHC.IO.Encoding.latin1_encode1_closure:
         const GHC.IO.Encoding.latin1_encode1_info;
 },
 sat_s9YCI_entry() //  [R1]
         { info_tbl: [(c9Z91,
                       label: sat_s9YCI_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z91: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Z95; else goto c9Z96;
       c9Z95: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Z96: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Z8Y_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Z9a; else goto c9Z8Z;
       u9Z9a: // global
           call _c9Z8Y(R1) args: 0, res: 0, upd: 0;
       c9Z8Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c9Z8Y() //  [R1]
         { info_tbl: [(c9Z8Y,
                       label: block_c9Z8Y_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z8Y: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z99; else goto c9Z98;
       c9Z99: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Z98: // global
           _s9YCG::P64 = P64[R1 + 15];
           _s9YCH::P64 = P64[R1 + 23];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _s9YCG::P64;
           P64[Hp] = _s9YCH::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.IO.Encoding.latin1_encode1_entry() //  [R2, R3]
         { info_tbl: [(c9Z9b,
                       label: GHC.IO.Encoding.latin1_encode1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z9b: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Z9c; else goto c9Z9d;
       c9Z9c: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Encoding.latin1_encode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Z9d: // global
           I64[Sp - 8] = block_c9Z8S_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.IO.Encoding.Latin1.latin3_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 _c9Z8S() //  [R1]
         { info_tbl: [(c9Z8S,
                       label: block_c9Z8S_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z8S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Z9g; else goto c9Z9f;
       c9Z9g: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Z9f: // global
           I64[Hp - 16] = sat_s9YCI_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.115283897 UTC

[section ""data" . GHC.IO.Encoding.latin1_encode_closure" {
     GHC.IO.Encoding.latin1_encode_closure:
         const GHC.IO.Encoding.latin1_encode_info;
 },
 GHC.IO.Encoding.latin1_encode_entry() //  [R2, R3]
         { info_tbl: [(c9Z9I,
                       label: GHC.IO.Encoding.latin1_encode_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9Z9I: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Encoding.latin1_encode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:05:04.118504707 UTC

[section ""relreadonly" . S9YDC_srt" {
     S9YDC_srt:
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_r9XsX_closure;
         const GHC.IO.Encoding.mkTextEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding_go_closure;
         const GHC.Char.$wlvl_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix1_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix3_closure;
         const GHC.IO.Encoding.Failure.codingFailureModeSuffix5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding6_closure;
         const GHC.IO.Encoding.Latin1.mkLatin1_checked_closure;
         const GHC.IO.Encoding.Latin1.mkAscii_closure;
         const GHC.IO.Encoding.UTF8.mkUTF8_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32le_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32be_closure;
         const GHC.IO.Encoding.UTF32.mkUTF32_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16le_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16be_closure;
         const GHC.IO.Encoding.UTF16.mkUTF16_closure;
         const GHC.IO.Encoding.Iconv.iconvEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding5_closure;
         const GHC.IO.Encoding.getFileSystemEncoding7_closure;
         const GHC.IO.Encoding.getFileSystemEncoding34_closure;
         const GHC.IO.Encoding.getFileSystemEncoding67_closure;
         const GHC.IO.Encoding.getFileSystemEncoding69_closure;
         const GHC.IO.Encoding.getFileSystemEncoding71_closure;
         const GHC.IO.Encoding.getFileSystemEncoding73_closure;
         const GHC.IO.Encoding.getFileSystemEncoding75_closure;
         const GHC.IO.Encoding.getFileSystemEncoding77_closure;
         const GHC.IO.Encoding.getFileSystemEncoding79_closure;
         const GHC.IO.Encoding.mkTextEncoding1_closure;
         const GHC.IO.Encoding.mkTextEncoding3_closure;
         const GHC.IO.Encoding.mkTextEncoding5_closure;
         const GHC.IO.Encoding.mkTextEncoding7_closure;
         const GHC.IO.Encoding.Iconv.localeEncodingName_closure;
         const GHC.IO.Encoding.getForeignEncoding4_closure;
         const GHC.IO.Encoding.getForeignEncoding2_closure;
         const GHC.IO.Encoding.getForeignEncoding3_closure;
         const GHC.IO.Encoding.getForeignEncoding1_closure;
         const GHC.IO.Encoding.getFileSystemEncoding4_closure;
         const GHC.IO.Encoding.getFileSystemEncoding2_closure;
         const GHC.IO.Encoding.getFileSystemEncoding3_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding1_closure;
         const GHC.IO.Encoding.initLocaleEncoding_closure;
         const GHC.IO.Encoding.getLocaleEncoding2_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
 }]

