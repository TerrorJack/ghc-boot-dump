
==================== Raw Cmm ====================
2018-03-16 16:06:17.26279404 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:17.264744786 UTC

[section ""data" . GHC.IO.Handle.$w$c==_closure" {
     GHC.IO.Handle.$w$c==_closure:
         const GHC.IO.Handle.$w$c==_info;
 },
 GHC.IO.Handle.$w$c==_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbrxs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrxt; else goto cbrxu;
       cbrxt: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbrxu: // global
           I64[Sp - 24] = block_cbrxn_info;
           _sbnXw::P64 = R3;
           R3 = R5;
           _sbnXv::P64 = R2;
           R2 = _sbnXw::P64;
           P64[Sp - 16] = _sbnXv::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$w$c==_info" {
     GHC.IO.Handle.$w$c==_info:
         const GHC.IO.Handle.$w$c==_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbrxn() //  [R1]
         { []
         }
     {offset
       cbrxn: // global
           if (R1 == 1) goto cbrxr; else goto cbrxq;
       cbrxr: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fEqHandle_$c==_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       cbrxq: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrxn_info" {
     block_cbrxn_info:
         const _cbrxn;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.273309274 UTC

[section ""data" . GHC.IO.Handle.$fEqHandlePosn_$c==_closure" {
     GHC.IO.Handle.$fEqHandlePosn_$c==_closure:
         const GHC.IO.Handle.$fEqHandlePosn_$c==_info;
 },
 GHC.IO.Handle.$fEqHandlePosn_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cbrxR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrxV; else goto cbrxW;
       cbrxV: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fEqHandlePosn_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbrxW: // global
           I64[Sp - 16] = block_cbrxO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubry4; else goto cbrxP;
       ubry4: // global
           call _cbrxO(R1) args: 0, res: 0, upd: 0;
       cbrxP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fEqHandlePosn_$c==_info" {
     GHC.IO.Handle.$fEqHandlePosn_$c==_info:
         const GHC.IO.Handle.$fEqHandlePosn_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbrxO() //  [R1]
         { []
         }
     {offset
       cbrxO: // global
           I64[Sp - 8] = block_cbrxU_info;
           _sbnXD::P64 = P64[R1 + 7];
           _sbnXE::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbnXE::P64;
           P64[Sp + 8] = _sbnXD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubry3; else goto cbrxY;
       ubry3: // global
           call _cbrxU(R1) args: 0, res: 0, upd: 0;
       cbrxY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrxO_info" {
     block_cbrxO_info:
         const _cbrxO;
         const 1;
         const 30;
 },
 _cbrxU() //  [R1]
         { []
         }
     {offset
       cbrxU: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.$w$c==_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrxU_info" {
     block_cbrxU_info:
         const _cbrxU;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.282641182 UTC

[section ""data" . GHC.IO.Handle.$fEqHandlePosn_$c/=_closure" {
     GHC.IO.Handle.$fEqHandlePosn_$c/=_closure:
         const GHC.IO.Handle.$fEqHandlePosn_$c/=_info;
 },
 GHC.IO.Handle.$fEqHandlePosn_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cbryp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbryt; else goto cbryu;
       cbryt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fEqHandlePosn_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbryu: // global
           I64[Sp - 16] = block_cbrym_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubrA1; else goto cbryn;
       ubrA1: // global
           call _cbrym(R1) args: 0, res: 0, upd: 0;
       cbryn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fEqHandlePosn_$c/=_info" {
     GHC.IO.Handle.$fEqHandlePosn_$c/=_info:
         const GHC.IO.Handle.$fEqHandlePosn_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbrym() //  [R1]
         { []
         }
     {offset
       cbrym: // global
           I64[Sp - 8] = block_cbrys_info;
           _sbnXL::P64 = P64[R1 + 7];
           _sbnXM::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbnXM::P64;
           P64[Sp + 8] = _sbnXL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubrA0; else goto cbryw;
       ubrA0: // global
           call _cbrys(R1) args: 0, res: 0, upd: 0;
       cbryw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrym_info" {
     block_cbrym_info:
         const _cbrym;
         const 1;
         const 30;
 },
 _cbrys() //  [R1]
         { []
         }
     {offset
       cbrys: // global
           I64[Sp] = block_cbryA_info;
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 7];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrys_info" {
     block_cbrys_info:
         const _cbrys;
         const 2;
         const 30;
 },
 _cbryA() //  [R1]
         { []
         }
     {offset
       cbryA: // global
           if (R1 == 1) goto cbryM; else goto ubrzT;
       cbryM: // global
           I64[Sp] = block_cbryK_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubrA2; else goto cbryN;
       ubrA2: // global
           call _cbryK(R1) args: 0, res: 0, upd: 0;
       cbryN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubrzT: // global
           Sp = Sp + 24;
           call _cbrzF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbryA_info" {
     block_cbryA_info:
         const _cbryA;
         const 2;
         const 30;
 },
 _cbryK() //  [R1]
         { []
         }
     {offset
       cbryK: // global
           _sbnXO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbryU; else goto cbrzp;
       cbryU: // global
           I64[Sp + 8] = block_cbryR_info;
           _sbnXT::P64 = P64[R1 + 15];
           R1 = _sbnXO::P64;
           P64[Sp + 16] = _sbnXT::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubrA4; else goto cbryV;
       ubrA4: // global
           call _cbryR(R1) args: 0, res: 0, upd: 0;
       cbryV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbrzp: // global
           I64[Sp + 8] = block_cbrzn_info;
           _sbnY2::P64 = P64[R1 + 14];
           R1 = _sbnXO::P64;
           P64[Sp + 16] = _sbnY2::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubrA5; else goto cbrzq;
       ubrA5: // global
           call _cbrzn(R1) args: 0, res: 0, upd: 0;
       cbrzq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbryK_info" {
     block_cbryK_info:
         const _cbryK;
         const 130;
         const 30;
 },
 _cbryR() //  [R1]
         { []
         }
     {offset
       cbryR: // global
           if (R1 & 7 == 1) goto cbrzg; else goto ubrzX;
       cbrzg: // global
           if (P64[Sp + 8] == P64[R1 + 15]) goto ubrzY; else goto ubrzZ;
       ubrzY: // global
           Sp = Sp + 16;
           call _cbrzL() args: 0, res: 0, upd: 0;
       ubrzZ: // global
           Sp = Sp + 16;
           goto ubrA8;
       ubrzX: // global
           Sp = Sp + 16;
           goto ubrA8;
       ubrA8: // global
           call _cbrzF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbryR_info" {
     block_cbryR_info:
         const _cbryR;
         const 1;
         const 30;
 },
 _cbrzn() //  [R1]
         { []
         }
     {offset
       cbrzn: // global
           if (R1 & 7 == 1) goto ubrzU; else goto cbrzP;
       ubrzU: // global
           Sp = Sp + 16;
           goto ubrAb;
       cbrzP: // global
           if (P64[Sp + 8] == P64[R1 + 14]) goto ubrzV; else goto ubrzW;
       ubrzV: // global
           Sp = Sp + 16;
           call _cbrzL() args: 0, res: 0, upd: 0;
       ubrzW: // global
           Sp = Sp + 16;
           goto ubrAb;
       ubrAb: // global
           call _cbrzF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrzn_info" {
     block_cbrzn_info:
         const _cbrzn;
         const 1;
         const 30;
 },
 _cbrzL() //  []
         { []
         }
     {offset
       cbrzL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbrzF() //  []
         { []
         }
     {offset
       cbrzF: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.296785211 UTC

[section ""data" . GHC.IO.Handle.$fEqHandlePosn_closure" {
     GHC.IO.Handle.$fEqHandlePosn_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.$fEqHandlePosn_$c==_closure+2;
         const GHC.IO.Handle.$fEqHandlePosn_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.298546285 UTC

[section ""cstring" . GHC.IO.Handle.$fShowHandlePosn2_bytes" {
     GHC.IO.Handle.$fShowHandlePosn2_bytes:
         I8[] [32,97,116,32,112,111,115,105,116,105,111,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.306254523 UTC

[section ""data" . GHC.IO.Handle.$w$cshowsPrec_closure" {
     GHC.IO.Handle.$w$cshowsPrec_closure:
         const GHC.IO.Handle.$w$cshowsPrec_info;
         const 0;
 },
 sat_sbnYk_entry() //  [R1]
         { []
         }
     {offset
       cbrBn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrBo; else goto cbrBp;
       cbrBo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrBp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbrBk_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbnYk_info" {
     sat_sbnYk_info:
         const sat_sbnYk_entry;
         const 2;
         const 4294967314;
         const SboCL_srt;
 },
 _cbrBk() //  [R1, R2]
         { []
         }
     {offset
       cbrBk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrBs; else goto cbrBr;
       cbrBs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbrBr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbrBk_info" {
     block_cbrBk_info:
         const _cbrBk;
         const 0;
         const 30;
 },
 sat_sbnYl_entry() //  [R1]
         { []
         }
     {offset
       cbrBt: // global
           _sbnYl::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbrBu; else goto cbrBv;
       cbrBv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbrBx; else goto cbrBw;
       cbrBx: // global
           HpAlloc = 32;
           goto cbrBu;
       cbrBu: // global
           R1 = _sbnYl::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrBw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbnYl::P64;
           _sbnYc::P64 = P64[_sbnYl::P64 + 16];
           _sbnYd::P64 = P64[_sbnYl::P64 + 24];
           I64[Hp - 24] = sat_sbnYk_info;
           P64[Hp - 8] = _sbnYc::P64;
           P64[Hp] = _sbnYd::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.$fShowHandlePosn2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbnYl_info" {
     sat_sbnYl_info:
         const sat_sbnYl_entry;
         const 2;
         const 4294967314;
         const SboCL_srt;
 },
 sat_sbnYm_entry() //  [R1]
         { []
         }
     {offset
       cbrBy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbrBC; else goto cbrBB;
       cbrBC: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrBB: // global
           _sbnYc::P64 = P64[R1 + 16];
           _sbnYd::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sbnYl_info;
           P64[Hp - 8] = _sbnYc::P64;
           P64[Hp] = _sbnYd::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbnYm_info" {
     sat_sbnYm_info:
         const sat_sbnYm_entry;
         const 2;
         const 4294967314;
         const SboCL_srt;
 },
 sat_sbnYn_entry() //  [R1]
         { []
         }
     {offset
       cbrBD: // global
           _sbnYn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbrBE; else goto cbrBF;
       cbrBF: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbrBH; else goto cbrBG;
       cbrBH: // global
           HpAlloc = 32;
           goto cbrBE;
       cbrBE: // global
           R1 = _sbnYn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrBG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbnYn::P64;
           _sbnYc::P64 = P64[_sbnYn::P64 + 16];
           _sbnYd::P64 = P64[_sbnYn::P64 + 24];
           _sbnYf::P64 = P64[_sbnYn::P64 + 32];
           I64[Hp - 24] = sat_sbnYm_info;
           P64[Hp - 8] = _sbnYc::P64;
           P64[Hp] = _sbnYd::P64;
           R3 = Hp - 24;
           R2 = _sbnYf::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbnYn_info" {
     sat_sbnYn_info:
         const sat_sbnYn_entry;
         const 3;
         const 4294967311;
         const SboCL_srt;
 },
 sat_sbnYu_entry() //  [R1]
         { []
         }
     {offset
       cbrC3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrC4; else goto cbrC5;
       cbrC4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrC5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbrC0_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbnYu_info" {
     sat_sbnYu_info:
         const sat_sbnYu_entry;
         const 2;
         const 4294967314;
         const SboCL_srt;
 },
 _cbrC0() //  [R1, R2]
         { []
         }
     {offset
       cbrC0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrC8; else goto cbrC7;
       cbrC8: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbrC7: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbrC0_info" {
     block_cbrC0_info:
         const _cbrC0;
         const 0;
         const 30;
 },
 sat_sbnYv_entry() //  [R1]
         { []
         }
     {offset
       cbrC9: // global
           _sbnYv::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbrCa; else goto cbrCb;
       cbrCb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbrCd; else goto cbrCc;
       cbrCd: // global
           HpAlloc = 32;
           goto cbrCa;
       cbrCa: // global
           R1 = _sbnYv::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrCc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbnYv::P64;
           _sbnYc::P64 = P64[_sbnYv::P64 + 16];
           _sbnYd::P64 = P64[_sbnYv::P64 + 24];
           I64[Hp - 24] = sat_sbnYu_info;
           P64[Hp - 8] = _sbnYc::P64;
           P64[Hp] = _sbnYd::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.$fShowHandlePosn2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbnYv_info" {
     sat_sbnYv_info:
         const sat_sbnYv_entry;
         const 2;
         const 4294967314;
         const SboCL_srt;
 },
 sat_sbnYw_entry() //  [R1]
         { []
         }
     {offset
       cbrCe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbrCi; else goto cbrCh;
       cbrCi: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrCh: // global
           _sbnYc::P64 = P64[R1 + 16];
           _sbnYd::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sbnYv_info;
           P64[Hp - 8] = _sbnYc::P64;
           P64[Hp] = _sbnYd::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbnYw_info" {
     sat_sbnYw_info:
         const sat_sbnYw_entry;
         const 2;
         const 4294967314;
         const SboCL_srt;
 },
 sat_sbnYx_entry() //  [R1]
         { []
         }
     {offset
       cbrCj: // global
           _sbnYx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbrCk; else goto cbrCl;
       cbrCl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbrCn; else goto cbrCm;
       cbrCn: // global
           HpAlloc = 32;
           goto cbrCk;
       cbrCk: // global
           R1 = _sbnYx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrCm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbnYx::P64;
           _sbnYc::P64 = P64[_sbnYx::P64 + 16];
           _sbnYd::P64 = P64[_sbnYx::P64 + 24];
           _sbnYo::P64 = P64[_sbnYx::P64 + 32];
           I64[Hp - 24] = sat_sbnYw_info;
           P64[Hp - 8] = _sbnYc::P64;
           P64[Hp] = _sbnYd::P64;
           R3 = Hp - 24;
           R2 = _sbnYo::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbnYx_info" {
     sat_sbnYx_info:
         const sat_sbnYx_entry;
         const 3;
         const 4294967311;
         const SboCL_srt;
 },
 GHC.IO.Handle.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbrCs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrCt; else goto cbrCu;
       cbrCt: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbrCu: // global
           I64[Sp - 24] = block_cbrAZ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubrCB; else goto cbrB0;
       ubrCB: // global
           call _cbrAZ(R1) args: 0, res: 0, upd: 0;
       cbrB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$w$cshowsPrec_info" {
     GHC.IO.Handle.$w$cshowsPrec_info:
         const GHC.IO.Handle.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SboCL_srt;
 },
 _cbrAZ() //  [R1]
         { []
         }
     {offset
       cbrAZ: // global
           _sbnYc::P64 = P64[Sp + 8];
           _sbnYd::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cbrCp; else goto cbrCq;
       cbrCp: // global
           Hp = Hp + 40;
           _sbnYe::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbrCA; else goto cbrCw;
       cbrCw: // global
           _sbnYf::P64 = P64[_sbnYe::P64 + 7];
           I64[Hp - 32] = sat_sbnYn_info;
           P64[Hp - 16] = _sbnYc::P64;
           P64[Hp - 8] = _sbnYd::P64;
           P64[Hp] = _sbnYf::P64;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cbrCq: // global
           Hp = Hp + 40;
           _sbnYe::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbrCA; else goto cbrCz;
       cbrCA: // global
           HpAlloc = 40;
           R1 = _sbnYe::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrCz: // global
           _sbnYo::P64 = P64[_sbnYe::P64 + 6];
           I64[Hp - 32] = sat_sbnYx_info;
           P64[Hp - 16] = _sbnYc::P64;
           P64[Hp - 8] = _sbnYd::P64;
           P64[Hp] = _sbnYo::P64;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrAZ_info" {
     block_cbrAZ_info:
         const _cbrAZ;
         const 2;
         const 4294967326;
         const SboCL_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.330536261 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbrDw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrDx; else goto cbrDy;
       cbrDx: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbrDy: // global
           I64[Sp - 16] = block_cbrDt_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubrDC; else goto cbrDu;
       ubrDC: // global
           call _cbrDt(R1) args: 0, res: 0, upd: 0;
       cbrDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_info" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_info:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SboCL_srt+8;
 },
 _cbrDt() //  [R1]
         { []
         }
     {offset
       cbrDt: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.$w$cshowsPrec_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrDt_info" {
     block_cbrDt_info:
         const _cbrDt;
         const 1;
         const 4294967326;
         const SboCL_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.33521299 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn3_closure" {
     GHC.IO.Handle.$fShowHandlePosn3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.337862886 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_$cshow_closure" {
     GHC.IO.Handle.$fShowHandlePosn_$cshow_closure:
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cbrDU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbrDV; else goto cbrDW;
       cbrDV: // global
           R2 = R2;
           R1 = GHC.IO.Handle.$fShowHandlePosn_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrDW: // global
           I64[Sp - 8] = block_cbrDR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubrE0; else goto cbrDS;
       ubrE0: // global
           call _cbrDR(R1) args: 0, res: 0, upd: 0;
       cbrDS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn_$cshow_info" {
     GHC.IO.Handle.$fShowHandlePosn_$cshow_info:
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SboCL_srt+8;
 },
 _cbrDR() //  [R1]
         { []
         }
     {offset
       cbrDR: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.$w$cshowsPrec_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrDR_info" {
     block_cbrDR_info:
         const _cbrDR;
         const 0;
         const 4294967326;
         const SboCL_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.343176482 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn1_closure" {
     GHC.IO.Handle.$fShowHandlePosn1_closure:
         const GHC.IO.Handle.$fShowHandlePosn1_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbrEh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrEi; else goto cbrEj;
       cbrEi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fShowHandlePosn1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbrEj: // global
           I64[Sp - 16] = block_cbrEe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubrEn; else goto cbrEf;
       ubrEn: // global
           call _cbrEe(R1) args: 0, res: 0, upd: 0;
       cbrEf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn1_info" {
     GHC.IO.Handle.$fShowHandlePosn1_info:
         const GHC.IO.Handle.$fShowHandlePosn1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SboCL_srt+8;
 },
 _cbrEe() //  [R1]
         { []
         }
     {offset
       cbrEe: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.$w$cshowsPrec_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrEe_info" {
     block_cbrEe_info:
         const _cbrEe;
         const 1;
         const 4294967326;
         const SboCL_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.348800562 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_$cshowList_closure" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowList_closure:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cbrEB: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.$fShowHandlePosn1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn_$cshowList_info" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowList_info:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SboCL_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.352297639 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_closure" {
     GHC.IO.Handle.$fShowHandlePosn_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure+3;
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_closure+1;
         const GHC.IO.Handle.$fShowHandlePosn_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.353953946 UTC

[section ""cstring" . GHC.IO.Handle.hLookAhead3_bytes" {
     GHC.IO.Handle.hLookAhead3_bytes:
         I8[] [104,76,111,111,107,65,104,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.356144387 UTC

[section ""data" . GHC.IO.Handle.hLookAhead2_closure" {
     GHC.IO.Handle.hLookAhead2_closure:
         const GHC.IO.Handle.hLookAhead2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hLookAhead2_entry() //  [R1]
         { []
         }
     {offset
       cbrEQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrER; else goto cbrES;
       cbrER: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrES: // global
           (_cbrEN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrEN::I64 == 0) goto cbrEP; else goto cbrEO;
       cbrEP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrEO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrEN::I64;
           R2 = GHC.IO.Handle.hLookAhead3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hLookAhead2_info" {
     GHC.IO.Handle.hLookAhead2_info:
         const GHC.IO.Handle.hLookAhead2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.359878389 UTC

[section ""data" . GHC.IO.Handle.hLookAhead1_closure" {
     GHC.IO.Handle.hLookAhead1_closure:
         const GHC.IO.Handle.hLookAhead1_info;
         const 0;
 },
 GHC.IO.Handle.hLookAhead1_entry() //  [R2]
         { []
         }
     {offset
       cbrF4: // global
           R4 = GHC.IO.Handle.Internals.hLookAhead_1_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hLookAhead2_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hLookAhead1_info" {
     GHC.IO.Handle.hLookAhead1_info:
         const GHC.IO.Handle.hLookAhead1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SboCL_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.363477546 UTC

[section ""data" . GHC.IO.Handle.hLookAhead_closure" {
     GHC.IO.Handle.hLookAhead_closure:
         const GHC.IO.Handle.hLookAhead_info;
         const 0;
 },
 GHC.IO.Handle.hLookAhead_entry() //  [R2]
         { []
         }
     {offset
       cbrFf: // global
           R2 = R2;
           call GHC.IO.Handle.hLookAhead1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hLookAhead_info" {
     GHC.IO.Handle.hLookAhead_info:
         const GHC.IO.Handle.hLookAhead_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.366308415 UTC

[section ""cstring" . GHC.IO.Handle.hFlush3_bytes" {
     GHC.IO.Handle.hFlush3_bytes:
         I8[] [104,70,108,117,115,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.368503712 UTC

[section ""data" . GHC.IO.Handle.hFlush2_closure" {
     GHC.IO.Handle.hFlush2_closure:
         const GHC.IO.Handle.hFlush2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFlush2_entry() //  [R1]
         { []
         }
     {offset
       cbrFt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrFu; else goto cbrFv;
       cbrFu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrFv: // global
           (_cbrFq::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrFq::I64 == 0) goto cbrFs; else goto cbrFr;
       cbrFs: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrFr: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrFq::I64;
           R2 = GHC.IO.Handle.hFlush3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlush2_info" {
     GHC.IO.Handle.hFlush2_info:
         const GHC.IO.Handle.hFlush2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.372330949 UTC

[section ""data" . GHC.IO.Handle.hFlush1_closure" {
     GHC.IO.Handle.hFlush1_closure:
         const GHC.IO.Handle.hFlush1_info;
         const 0;
 },
 GHC.IO.Handle.hFlush1_entry() //  [R2]
         { []
         }
     {offset
       cbrFH: // global
           R4 = GHC.IO.Handle.Internals.flushWriteBuffer1_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hFlush2_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlush1_info" {
     GHC.IO.Handle.hFlush1_info:
         const GHC.IO.Handle.hFlush1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SboCL_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.376092124 UTC

[section ""data" . GHC.IO.Handle.hFlush_closure" {
     GHC.IO.Handle.hFlush_closure:
         const GHC.IO.Handle.hFlush_info;
         const 0;
 },
 GHC.IO.Handle.hFlush_entry() //  [R2]
         { []
         }
     {offset
       cbrFS: // global
           R2 = R2;
           call GHC.IO.Handle.hFlush1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlush_info" {
     GHC.IO.Handle.hFlush_info:
         const GHC.IO.Handle.hFlush_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.379602248 UTC

[section ""cstring" . GHC.IO.Handle.hFlushAll4_bytes" {
     GHC.IO.Handle.hFlushAll4_bytes:
         I8[] [104,70,108,117,115,104,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.381819203 UTC

[section ""data" . GHC.IO.Handle.hFlushAll3_closure" {
     GHC.IO.Handle.hFlushAll3_closure:
         const GHC.IO.Handle.hFlushAll3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFlushAll3_entry() //  [R1]
         { []
         }
     {offset
       cbrG6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrG7; else goto cbrG8;
       cbrG7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrG8: // global
           (_cbrG3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrG3::I64 == 0) goto cbrG5; else goto cbrG4;
       cbrG5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrG4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrG3::I64;
           R2 = GHC.IO.Handle.hFlushAll4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll3_info" {
     GHC.IO.Handle.hFlushAll3_info:
         const GHC.IO.Handle.hFlushAll3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.386548939 UTC

[section ""data" . GHC.IO.Handle.hFlushAll2_closure" {
     GHC.IO.Handle.hFlushAll2_closure:
         const GHC.IO.Handle.hFlushAll2_info;
         const 0;
 },
 GHC.IO.Handle.hFlushAll2_entry() //  [R2]
         { []
         }
     {offset
       cbrGn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrGo; else goto cbrGp;
       cbrGo: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFlushAll2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrGp: // global
           I64[Sp - 16] = block_cbrGk_info;
           _sbnYR::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbnYR::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll2_info" {
     GHC.IO.Handle.hFlushAll2_info:
         const GHC.IO.Handle.hFlushAll2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SboCL_srt+96;
 },
 _cbrGk() //  [R1]
         { []
         }
     {offset
       cbrGk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrGs; else goto cbrGr;
       cbrGs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrGr: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrGk_info" {
     block_cbrGk_info:
         const _cbrGk;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.39501565 UTC

[section ""data" . GHC.IO.Handle.hFlushAll1_closure" {
     GHC.IO.Handle.hFlushAll1_closure:
         const GHC.IO.Handle.hFlushAll1_info;
         const 0;
 },
 io_sbnZ5_entry() //  [R1]
         { []
         }
     {offset
       cbrGY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrH2; else goto cbrH3;
       cbrH2: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbrH3: // global
           I64[Sp - 16] = block_cbrGT_info;
           _sbnZ1::P64 = P64[R1 + 15];
           R5 = _sbnZ1::P64;
           R4 = GHC.IO.Handle.hFlushAll2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFlushAll3_closure;
           P64[Sp - 8] = _sbnZ1::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbnZ5_info" {
     io_sbnZ5_info:
         const io_sbnZ5_entry;
         const 2;
         const 30064771083;
         const 4294967299;
         const SboCL_srt+104;
 },
 _cbrGT() //  [R1]
         { []
         }
     {offset
       cbrGT: // global
           I64[Sp] = block_cbrGV_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubrH8; else goto cbrGW;
       ubrH8: // global
           call _cbrGV(R1) args: 0, res: 0, upd: 0;
       cbrGW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrGT_info" {
     block_cbrGT_info:
         const _cbrGT;
         const 1;
         const 30;
 },
 _cbrGV() //  [R1]
         { []
         }
     {offset
       cbrGV: // global
           I64[Sp] = block_cbrH1_info;
           R2 = P64[R1 + 7];
           _sbnZc::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbnZc::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrGV_info" {
     block_cbrGV_info:
         const _cbrGV;
         const 1;
         const 30;
 },
 _cbrH1() //  []
         { []
         }
     {offset
       cbrH1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrH1_info" {
     block_cbrH1_info:
         const _cbrH1;
         const 1;
         const 30;
 },
 io_sbnZl_entry() //  [R1]
         { []
         }
     {offset
       cbrHn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrHr; else goto cbrHs;
       cbrHr: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbrHs: // global
           I64[Sp - 16] = block_cbrHi_info;
           _sbnZg::P64 = P64[R1 + 15];
           R5 = _sbnZg::P64;
           R4 = GHC.IO.Handle.hFlushAll2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFlushAll3_closure;
           P64[Sp - 8] = _sbnZg::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbnZl_info" {
     io_sbnZl_info:
         const io_sbnZl_entry;
         const 2;
         const 30064771083;
         const 4294967299;
         const SboCL_srt+104;
 },
 _cbrHi() //  [R1]
         { []
         }
     {offset
       cbrHi: // global
           I64[Sp] = block_cbrHk_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubrHx; else goto cbrHl;
       ubrHx: // global
           call _cbrHk(R1) args: 0, res: 0, upd: 0;
       cbrHl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrHi_info" {
     block_cbrHi_info:
         const _cbrHi;
         const 1;
         const 30;
 },
 _cbrHk() //  [R1]
         { []
         }
     {offset
       cbrHk: // global
           I64[Sp] = block_cbrHq_info;
           R2 = P64[R1 + 7];
           _sbnZs::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbnZs::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrHk_info" {
     block_cbrHk_info:
         const _cbrHk;
         const 1;
         const 30;
 },
 _cbrHq() //  []
         { []
         }
     {offset
       cbrHq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrHq_info" {
     block_cbrHq_info:
         const _cbrHq;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hFlushAll1_entry() //  [R2]
         { []
         }
     {offset
       cbrHC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrHD; else goto cbrHE;
       cbrHD: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFlushAll1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrHE: // global
           I64[Sp - 8] = block_cbrGH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubrHV; else goto cbrGI;
       ubrHV: // global
           call _cbrGH(R1) args: 0, res: 0, upd: 0;
       cbrGI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll1_info" {
     GHC.IO.Handle.hFlushAll1_info:
         const GHC.IO.Handle.hFlushAll1_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SboCL_srt+104;
 },
 _cbrGH() //  [R1]
         { []
         }
     {offset
       cbrGH: // global
           if (R1 & 7 == 1) goto cbrHz; else goto cbrHA;
       cbrHz: // global
           I64[Sp - 16] = block_cbrGM_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbrHA: // global
           I64[Sp - 16] = block_cbrHb_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrGH_info" {
     block_cbrGH_info:
         const _cbrGH;
         const 0;
         const 30064771102;
         const SboCL_srt+104;
 },
 _cbrGM() //  [R1]
         { []
         }
     {offset
       cbrGM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrHI; else goto cbrHH;
       cbrHI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbrHH: // global
           I64[Hp - 16] = io_sbnZ5_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbrGO::P64 = Hp - 15;
           if (R1 == 0) goto cbrHM; else goto cbrHL;
       cbrHM: // global
           R1 = _cbrGO::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbrHL: // global
           R1 = _cbrGO::P64;
           Sp = Sp + 24;
           call io_sbnZ5_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrGM_info" {
     block_cbrGM_info:
         const _cbrGM;
         const 2;
         const 30064771102;
         const SboCL_srt+104;
 },
 _cbrHb() //  [R1]
         { []
         }
     {offset
       cbrHb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrHQ; else goto cbrHP;
       cbrHQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbrHP: // global
           I64[Hp - 16] = io_sbnZl_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbrHd::P64 = Hp - 15;
           if (R1 == 0) goto cbrHU; else goto cbrHT;
       cbrHU: // global
           R1 = _cbrHd::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbrHT: // global
           R1 = _cbrHd::P64;
           Sp = Sp + 24;
           call io_sbnZl_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrHb_info" {
     block_cbrHb_info:
         const _cbrHb;
         const 2;
         const 30064771102;
         const SboCL_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.415899907 UTC

[section ""data" . GHC.IO.Handle.hFlushAll_closure" {
     GHC.IO.Handle.hFlushAll_closure:
         const GHC.IO.Handle.hFlushAll_info;
         const 0;
 },
 GHC.IO.Handle.hFlushAll_entry() //  [R2]
         { []
         }
     {offset
       cbrIR: // global
           R2 = R2;
           call GHC.IO.Handle.hFlushAll1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll_info" {
     GHC.IO.Handle.hFlushAll_info:
         const GHC.IO.Handle.hFlushAll_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.418812178 UTC

[section ""cstring" . GHC.IO.Handle.hGetEcho7_bytes" {
     GHC.IO.Handle.hGetEcho7_bytes:
         I8[] [104,73,115,84,101,114,109,105,110,97,108,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.420990075 UTC

[section ""data" . GHC.IO.Handle.hGetEcho_fun_closure" {
     GHC.IO.Handle.hGetEcho_fun_closure:
         const GHC.IO.Handle.hGetEcho_fun_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetEcho_fun_entry() //  [R1]
         { []
         }
     {offset
       cbrJ5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrJ6; else goto cbrJ7;
       cbrJ6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrJ7: // global
           (_cbrJ2::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrJ2::I64 == 0) goto cbrJ4; else goto cbrJ3;
       cbrJ4: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrJ3: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrJ2::I64;
           R2 = GHC.IO.Handle.hGetEcho7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho_fun_info" {
     GHC.IO.Handle.hGetEcho_fun_info:
         const GHC.IO.Handle.hGetEcho_fun_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.426492853 UTC

[section ""data" . GHC.IO.Handle.hGetEcho6_closure" {
     GHC.IO.Handle.hGetEcho6_closure:
         const GHC.IO.Handle.hGetEcho6_info;
         const 0;
 },
 GHC.IO.Handle.hGetEcho6_entry() //  [R2]
         { []
         }
     {offset
       cbrJm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbrJn; else goto cbrJo;
       cbrJn: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrJo: // global
           I64[Sp - 8] = block_cbrJj_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubrJM; else goto cbrJk;
       ubrJM: // global
           call _cbrJj(R1) args: 0, res: 0, upd: 0;
       cbrJk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho6_info" {
     GHC.IO.Handle.hGetEcho6_info:
         const GHC.IO.Handle.hGetEcho6_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SboCL_srt+136;
 },
 _cbrJj() //  [R1]
         { []
         }
     {offset
       cbrJj: // global
           I64[Sp - 24] = block_cbrJr_info;
           _sbnZx::P64 = R1;
           _sbnZy::P64 = P64[R1 + 7];
           _sbnZB::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbnZy::P64;
           P64[Sp - 8] = _sbnZB::P64;
           P64[Sp] = _sbnZx::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubrJL; else goto cbrJt;
       ubrJL: // global
           call _cbrJr(R1) args: 0, res: 0, upd: 0;
       cbrJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrJj_info" {
     block_cbrJj_info:
         const _cbrJj;
         const 0;
         const 4294967326;
         const SboCL_srt+136;
 },
 _cbrJr() //  [R1]
         { []
         }
     {offset
       cbrJr: // global
           if (R1 & 7 == 1) goto cbrJJ; else goto cbrJC;
       cbrJJ: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbrJC: // global
           _sbnZB::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbrJx_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbnZB::P64;
           call GHC.IO.Device.isTerminal_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrJr_info" {
     block_cbrJr_info:
         const _cbrJr;
         const 3;
         const 4294967326;
         const SboCL_srt+136;
 },
 _cbrJx() //  [R1]
         { []
         }
     {offset
       cbrJx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrJF; else goto cbrJE;
       cbrJF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrJE: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrJx_info" {
     block_cbrJx_info:
         const _cbrJx;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.438580825 UTC

[section ""data" . GHC.IO.Handle.hGetEcho5_closure" {
     GHC.IO.Handle.hGetEcho5_closure:
         const GHC.IO.Handle.hGetEcho5_info;
         const 0;
 },
 io_sbo02_entry() //  [R1]
         { []
         }
     {offset
       cbrKs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrKw; else goto cbrKx;
       cbrKw: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbrKx: // global
           I64[Sp - 16] = block_cbrKn_info;
           _sbnZY::P64 = P64[R1 + 15];
           R5 = _sbnZY::P64;
           R4 = GHC.IO.Handle.hGetEcho6_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho_fun_closure;
           P64[Sp - 8] = _sbnZY::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbo02_info" {
     io_sbo02_info:
         const io_sbo02_entry;
         const 2;
         const 210453397515;
         const 4294967299;
         const SboCL_srt+112;
 },
 _cbrKn() //  [R1]
         { []
         }
     {offset
       cbrKn: // global
           I64[Sp] = block_cbrKp_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubrKC; else goto cbrKq;
       ubrKC: // global
           call _cbrKp(R1) args: 0, res: 0, upd: 0;
       cbrKq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKn_info" {
     block_cbrKn_info:
         const _cbrKn;
         const 1;
         const 30;
 },
 _cbrKp() //  [R1]
         { []
         }
     {offset
       cbrKp: // global
           I64[Sp] = block_cbrKv_info;
           R2 = P64[R1 + 7];
           _sbo09::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbo09::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKp_info" {
     block_cbrKp_info:
         const _cbrKp;
         const 1;
         const 30;
 },
 _cbrKv() //  []
         { []
         }
     {offset
       cbrKv: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKv_info" {
     block_cbrKv_info:
         const _cbrKv;
         const 1;
         const 30;
 },
 io_sbo0i_entry() //  [R1]
         { []
         }
     {offset
       cbrKR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrKV; else goto cbrKW;
       cbrKV: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbrKW: // global
           I64[Sp - 16] = block_cbrKM_info;
           _sbo0d::P64 = P64[R1 + 15];
           R5 = _sbo0d::P64;
           R4 = GHC.IO.Handle.hGetEcho6_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho_fun_closure;
           P64[Sp - 8] = _sbo0d::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbo0i_info" {
     io_sbo0i_info:
         const io_sbo0i_entry;
         const 2;
         const 210453397515;
         const 4294967299;
         const SboCL_srt+112;
 },
 _cbrKM() //  [R1]
         { []
         }
     {offset
       cbrKM: // global
           I64[Sp] = block_cbrKO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubrL1; else goto cbrKP;
       ubrL1: // global
           call _cbrKO(R1) args: 0, res: 0, upd: 0;
       cbrKP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKM_info" {
     block_cbrKM_info:
         const _cbrKM;
         const 1;
         const 30;
 },
 _cbrKO() //  [R1]
         { []
         }
     {offset
       cbrKO: // global
           I64[Sp] = block_cbrKU_info;
           R2 = P64[R1 + 7];
           _sbo0p::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbo0p::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKO_info" {
     block_cbrKO_info:
         const _cbrKO;
         const 1;
         const 30;
 },
 _cbrKU() //  []
         { []
         }
     {offset
       cbrKU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKU_info" {
     block_cbrKU_info:
         const _cbrKU;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hGetEcho5_entry() //  [R2]
         { []
         }
     {offset
       cbrL6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrL7; else goto cbrL8;
       cbrL7: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrL8: // global
           I64[Sp - 8] = block_cbrKb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubrLp; else goto cbrKc;
       ubrLp: // global
           call _cbrKb(R1) args: 0, res: 0, upd: 0;
       cbrKc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho5_info" {
     GHC.IO.Handle.hGetEcho5_info:
         const GHC.IO.Handle.hGetEcho5_entry;
         const 0;
         const 485331304462;
         const 8589934597;
         const SboCL_srt+112;
 },
 _cbrKb() //  [R1]
         { []
         }
     {offset
       cbrKb: // global
           if (R1 & 7 == 1) goto cbrL3; else goto cbrL4;
       cbrL3: // global
           I64[Sp - 16] = block_cbrKg_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbrL4: // global
           I64[Sp - 16] = block_cbrKF_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKb_info" {
     block_cbrKb_info:
         const _cbrKb;
         const 0;
         const 210453397534;
         const SboCL_srt+112;
 },
 _cbrKg() //  [R1]
         { []
         }
     {offset
       cbrKg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrLc; else goto cbrLb;
       cbrLc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbrLb: // global
           I64[Hp - 16] = io_sbo02_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbrKi::P64 = Hp - 15;
           if (R1 == 0) goto cbrLg; else goto cbrLf;
       cbrLg: // global
           R1 = _cbrKi::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbrLf: // global
           R1 = _cbrKi::P64;
           Sp = Sp + 24;
           call io_sbo02_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKg_info" {
     block_cbrKg_info:
         const _cbrKg;
         const 2;
         const 210453397534;
         const SboCL_srt+112;
 },
 _cbrKF() //  [R1]
         { []
         }
     {offset
       cbrKF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrLk; else goto cbrLj;
       cbrLk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbrLj: // global
           I64[Hp - 16] = io_sbo0i_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbrKH::P64 = Hp - 15;
           if (R1 == 0) goto cbrLo; else goto cbrLn;
       cbrLo: // global
           R1 = _cbrKH::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbrLn: // global
           R1 = _cbrKH::P64;
           Sp = Sp + 24;
           call io_sbo0i_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrKF_info" {
     block_cbrKF_info:
         const _cbrKF;
         const 2;
         const 210453397534;
         const SboCL_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.459233081 UTC

[section ""data" . GHC.IO.Handle.hIsTerminalDevice_closure" {
     GHC.IO.Handle.hIsTerminalDevice_closure:
         const GHC.IO.Handle.hIsTerminalDevice_info;
         const 0;
 },
 GHC.IO.Handle.hIsTerminalDevice_entry() //  [R2]
         { []
         }
     {offset
       cbrMl: // global
           R2 = R2;
           call GHC.IO.Handle.hGetEcho5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsTerminalDevice_info" {
     GHC.IO.Handle.hIsTerminalDevice_info:
         const GHC.IO.Handle.hIsTerminalDevice_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.462538475 UTC

[section ""cstring" . lvl_rbnWB_bytes" {
     lvl_rbnWB_bytes:
         I8[] [104,68,117,112,108,105,99,97,116,101,84,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.464622448 UTC

[section ""data" . lvl1_rbnWC_closure" {
     lvl1_rbnWC_closure:
         const lvl1_rbnWC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rbnWC_entry() //  [R1]
         { []
         }
     {offset
       cbrMz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrMA; else goto cbrMB;
       cbrMA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrMB: // global
           (_cbrMw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrMw::I64 == 0) goto cbrMy; else goto cbrMx;
       cbrMy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrMx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrMw::I64;
           R2 = lvl_rbnWB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rbnWC_info" {
     lvl1_rbnWC_info:
         const lvl1_rbnWC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.467957308 UTC

[section ""cstring" . lvl2_rbnWD_bytes" {
     lvl2_rbnWD_bytes:
         I8[] [104,97,110,100,108,101,115,32,97,114,101,32,105,110,99,111,109,112,97,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.470048435 UTC

[section ""data" . lvl3_rbnWE_closure" {
     lvl3_rbnWE_closure:
         const lvl3_rbnWE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rbnWE_entry() //  [R1]
         { []
         }
     {offset
       cbrMQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrMR; else goto cbrMS;
       cbrMR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrMS: // global
           (_cbrMN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrMN::I64 == 0) goto cbrMP; else goto cbrMO;
       cbrMP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrMO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrMN::I64;
           R2 = lvl2_rbnWD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rbnWE_info" {
     lvl3_rbnWE_info:
         const lvl3_rbnWE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.474844206 UTC

[section ""data" . ioe_dupHandlesNotCompatible_rbnWF_closure" {
     ioe_dupHandlesNotCompatible_rbnWF_closure:
         const ioe_dupHandlesNotCompatible_rbnWF_info;
         const 0;
 },
 sat_sbo0w_entry() //  [R1]
         { []
         }
     {offset
       cbrNa: // global
           _sbo0w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbrNb; else goto cbrNc;
       cbrNc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbrNe; else goto cbrNd;
       cbrNe: // global
           HpAlloc = 72;
           goto cbrNb;
       cbrNb: // global
           R1 = _sbo0w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrNd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbo0w::P64;
           _sbo0s::P64 = P64[_sbo0w::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbo0s::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.IllegalOperation_closure+1;
           P64[Hp - 24] = lvl1_rbnWC_closure;
           P64[Hp - 16] = lvl3_rbnWE_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbo0w_info" {
     sat_sbo0w_info:
         const sat_sbo0w_entry;
         const 1;
         const 30064771088;
         const SboCL_srt+168;
 },
 ioe_dupHandlesNotCompatible_rbnWF_entry() //  [R2]
         { []
         }
     {offset
       cbrNf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrNj; else goto cbrNi;
       cbrNj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = ioe_dupHandlesNotCompatible_rbnWF_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrNi: // global
           I64[Hp - 16] = sat_sbo0w_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ioe_dupHandlesNotCompatible_rbnWF_info" {
     ioe_dupHandlesNotCompatible_rbnWF_info:
         const ioe_dupHandlesNotCompatible_rbnWF_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SboCL_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.479904088 UTC

[section ""cstring" . GHC.IO.Handle.$trModule4_bytes" {
     GHC.IO.Handle.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.481543865 UTC

[section ""data" . GHC.IO.Handle.$trModule3_closure" {
     GHC.IO.Handle.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.483667677 UTC

[section ""cstring" . GHC.IO.Handle.$trModule2_bytes" {
     GHC.IO.Handle.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.48567424 UTC

[section ""data" . GHC.IO.Handle.$trModule1_closure" {
     GHC.IO.Handle.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.487232082 UTC

[section ""data" . GHC.IO.Handle.$trModule_closure" {
     GHC.IO.Handle.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.$trModule3_closure+1;
         const GHC.IO.Handle.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.488838533 UTC

[section ""data" . $krep_rbnWG_closure" {
     $krep_rbnWG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.490523187 UTC

[section ""data" . $krep1_rbnWH_closure" {
     $krep1_rbnWH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.492114305 UTC

[section ""cstring" . GHC.IO.Handle.$tcHandlePosn2_bytes" {
     GHC.IO.Handle.$tcHandlePosn2_bytes:
         I8[] [72,97,110,100,108,101,80,111,115,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.493751251 UTC

[section ""data" . GHC.IO.Handle.$tcHandlePosn1_closure" {
     GHC.IO.Handle.$tcHandlePosn1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$tcHandlePosn2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.495416198 UTC

[section ""data" . GHC.IO.Handle.$tcHandlePosn_closure" {
     GHC.IO.Handle.$tcHandlePosn_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.$trModule_closure+1;
         const GHC.IO.Handle.$tcHandlePosn1_closure+1;
         const GHC.Types.krep$*_closure;
         const 14603627022044816180;
         const 6047646306417636971;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.497071906 UTC

[section ""data" . $krep2_rbnWI_closure" {
     $krep2_rbnWI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.$tcHandlePosn_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.498666431 UTC

[section ""data" . $krep3_rbnWJ_closure" {
     $krep3_rbnWJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rbnWG_closure+1;
         const $krep2_rbnWI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.500319598 UTC

[section ""data" . GHC.IO.Handle.$tc'HandlePosn1_closure" {
     GHC.IO.Handle.$tc'HandlePosn1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rbnWH_closure+1;
         const $krep3_rbnWJ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.501961567 UTC

[section ""cstring" . GHC.IO.Handle.$tc'HandlePosn3_bytes" {
     GHC.IO.Handle.$tc'HandlePosn3_bytes:
         I8[] [39,72,97,110,100,108,101,80,111,115,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.503590594 UTC

[section ""data" . GHC.IO.Handle.$tc'HandlePosn2_closure" {
     GHC.IO.Handle.$tc'HandlePosn2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$tc'HandlePosn3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.505302508 UTC

[section ""data" . GHC.IO.Handle.$tc'HandlePosn_closure" {
     GHC.IO.Handle.$tc'HandlePosn_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.$trModule_closure+1;
         const GHC.IO.Handle.$tc'HandlePosn2_closure+1;
         const GHC.IO.Handle.$tc'HandlePosn1_closure+4;
         const 2346493220596692855;
         const 1604707260447826943;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.511519842 UTC

[section ""data" . dupHandle__rbnWK_closure" {
     dupHandle__rbnWK_closure:
         const dupHandle__rbnWK_info;
         const 0;
 },
 dupHandle__rbnWK_slow() //  [R1]
         { []
         }
     {offset
       cbrNK: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2,
                                       R1) args: 32, res: 0, upd: 8;
     }
 },
 dupHandle__rbnWK_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbrNR: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbrNS; else goto cbrNT;
       cbrNS: // global
           R1 = dupHandle__rbnWK_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cbrNT: // global
           I64[Sp - 40] = block_cbrNO_info;
           R1 = P64[Sp + 8];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubrOz; else goto cbrNP;
       ubrOz: // global
           call _cbrNO(R1) args: 0, res: 0, upd: 0;
       cbrNP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dupHandle__rbnWK_info" {
     dupHandle__rbnWK_info:
         const dupHandle__rbnWK_entry;
         const 0;
         const 30064771086;
         const 38654705664;
         const SboCL_srt+200;
         const 8;
         const dupHandle__rbnWK_slow;
 },
 _cbrNO() //  [R1]
         { []
         }
     {offset
       cbrNO: // global
           I64[Sp - 24] = block_cbrNY_info;
           _sbo0L::P64 = P64[R1 + 39];
           _sbo0U::P64 = P64[R1 + 111];
           _sbo0V::P64 = P64[R1 + 119];
           R1 = P64[R1 + 87];
           P64[Sp - 16] = _sbo0U::P64;
           P64[Sp - 8] = _sbo0V::P64;
           P64[Sp] = _sbo0L::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubrOy; else goto cbrO6;
       ubrOy: // global
           call _cbrNY(R1) args: 0, res: 0, upd: 0;
       cbrO6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrNO_info" {
     block_cbrNO_info:
         const _cbrNO;
         const 7;
         const 12884901918;
         const SboCL_srt+200;
 },
 _cbrNY() //  [R1]
         { []
         }
     {offset
       cbrNY: // global
           if (R1 & 7 == 1) goto cbrOc; else goto cbrOh;
       cbrOc: // global
           P64[Sp] = GHC.Base.Nothing_closure+1;
           call _cbrO1() args: 0, res: 0, upd: 0;
       cbrOh: // global
           I64[Sp] = block_cbrOf_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubrOA; else goto cbrOi;
       ubrOA: // global
           call _cbrOf(R1) args: 0, res: 0, upd: 0;
       cbrOi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrNY_info" {
     block_cbrNY_info:
         const _cbrNY;
         const 10;
         const 12884901918;
         const SboCL_srt+200;
 },
 _cbrOf() //  [R1]
         { []
         }
     {offset
       cbrOf: // global
           I64[Sp] = block_cbrOm_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrOf_info" {
     block_cbrOf_info:
         const _cbrOf;
         const 10;
         const 4294967326;
         const SboCL_srt+208;
 },
 _cbrOm() //  [R1]
         { []
         }
     {offset
       cbrOm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbrOr; else goto cbrOq;
       cbrOr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrOq: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cbrO1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrOm_info" {
     block_cbrOm_info:
         const _cbrOm;
         const 10;
         const 4294967326;
         const SboCL_srt+208;
 },
 _cbrO1() //  []
         { []
         }
     {offset
       cbrO1: // global
           Hp = Hp + 24;
           _sbo0Z::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cbrO5; else goto cbrO4;
       cbrO5: // global
           HpAlloc = 24;
           I64[Sp] = block_cbrO0_info;
           R1 = _sbo0Z::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrO4: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.NewlineMode_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 72];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = GHC.Types.True_closure+2;
           P64[Sp + 56] = _sbo0Z::P64;
           _sbo0C::P64 = P64[Sp + 64];
           P64[Sp + 64] = Hp - 15;
           P64[Sp + 72] = P64[Sp + 80];
           P64[Sp + 80] = _sbo0C::P64;
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 _cbrO0() //  [R1]
         { []
         }
     {offset
       cbrO0: // global
           P64[Sp] = R1;
           call _cbrO1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrO0_info" {
     block_cbrO0_info:
         const _cbrO0;
         const 10;
         const 4294967326;
         const SboCL_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.524657108 UTC

[section ""cstring" . lvl4_rbnWL_bytes" {
     lvl4_rbnWL_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,73,79,47,72,97,110,100,108,101,46,104,115,58,55,49,51,58,55,45,50,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.52698771 UTC

[section ""data" . lvl5_rbnWM_closure" {
     lvl5_rbnWM_closure:
         const lvl5_rbnWM_info;
         const 0;
 },
 lvl5_rbnWM_entry() //  []
         { []
         }
     {offset
       cbrPk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbrPl; else goto cbrPm;
       cbrPl: // global
           R1 = lvl5_rbnWM_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbrPm: // global
           I64[Sp - 8] = block_cbrPi_info;
           R2 = lvl4_rbnWL_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rbnWM_info" {
     lvl5_rbnWM_info:
         const lvl5_rbnWM_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SboCL_srt+224;
 },
 _cbrPi() //  [R1]
         { []
         }
     {offset
       cbrPi: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrPi_info" {
     block_cbrPi_info:
         const _cbrPi;
         const 0;
         const 4294967326;
         const SboCL_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.53462501 UTC

[section ""data" . dupHandleTo_rbnWN_closure" {
     dupHandleTo_rbnWN_closure:
         const dupHandleTo_rbnWN_info;
         const 0;
 },
 dupHandleTo_rbnWN_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbrPF: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cbrPJ; else goto cbrPK;
       cbrPJ: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = dupHandleTo_rbnWN_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbrPK: // global
           I64[Sp - 40] = block_cbrPC_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubrQq; else goto cbrPD;
       ubrQq: // global
           call _cbrPC(R1) args: 0, res: 0, upd: 0;
       cbrPD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dupHandleTo_rbnWN_info" {
     dupHandleTo_rbnWN_info:
         const dupHandleTo_rbnWN_entry;
         const 0;
         const 4098983643316238;
         const 30064771098;
         const SboCL_srt+96;
 },
 _cbrPC() //  [R1]
         { []
         }
     {offset
       cbrPC: // global
           I64[Sp - 8] = block_cbrPI_info;
           _sbo1m::P64 = P64[R1 + 23];
           _sbo1n::P64 = P64[R1 + 31];
           R1 = P64[Sp + 32];
           P64[Sp] = _sbo1n::P64;
           P64[Sp + 32] = _sbo1m::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubrQp; else goto cbrPM;
       ubrQp: // global
           call _cbrPI(R1) args: 0, res: 0, upd: 0;
       cbrPM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrPC_info" {
     block_cbrPC_info:
         const _cbrPC;
         const 5;
         const 1847183829631006;
         const SboCL_srt+96;
 },
 _cbrPI() //  [R1]
         { []
         }
     {offset
       cbrPI: // global
           I64[Sp - 40] = block_cbrPQ_info;
           R2 = R1;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 31];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrPI_info" {
     block_cbrPI_info:
         const _cbrPI;
         const 6;
         const 1847183829631006;
         const SboCL_srt+96;
 },
 _cbrPQ() //  []
         { []
         }
     {offset
       cbrPQ: // global
           I64[Sp] = block_cbrPS_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 80];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrPQ_info" {
     block_cbrPQ_info:
         const _cbrPQ;
         const 11;
         const 450971566110;
         const SboCL_srt+192;
 },
 _cbrPS() //  [R1]
         { []
         }
     {offset
       cbrPS: // global
           if (R1 & 7 == 1) goto cbrQ0; else goto cbrQ9;
       cbrQ0: // global
           R2 = P64[Sp + 64];
           Sp = Sp + 96;
           call ioe_dupHandlesNotCompatible_rbnWF_entry(R2) args: 8, res: 0, upd: 8;
       cbrQ9: // global
           I64[Sp] = block_cbrQ3_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 48];
           Sp = Sp - 24;
           call GHC.IO.Device.dup2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrPS_info" {
     block_cbrPS_info:
         const _cbrPS;
         const 32779;
         const 176093659166;
         const SboCL_srt+192;
 },
 _cbrQ3() //  []
         { []
         }
     {offset
       cbrQ3: // global
           _sbo1h::P64 = P64[Sp + 88];
           I64[Sp + 88] = block_cbrQ5_info;
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 72];
           P64[Sp + 72] = P64[Sp + 40];
           P64[Sp + 80] = _sbo1h::P64;
           Sp = Sp + 64;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrQ3_info" {
     block_cbrQ3_info:
         const _cbrQ3;
         const 41483;
         const 21474836510;
         const SboCL_srt+216;
 },
 _cbrQ5() //  [R1]
         { []
         }
     {offset
       cbrQ5: // global
           I64[Sp] = block_cbrQ7_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubrQr; else goto cbrQc;
       ubrQr: // global
           call _cbrQ7(R1) args: 0, res: 0, upd: 0;
       cbrQc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrQ5_info" {
     block_cbrQ5_info:
         const _cbrQ5;
         const 0;
         const 4294967326;
         const SboCL_srt+232;
 },
 _cbrQ7() //  [R1]
         { []
         }
     {offset
       cbrQ7: // global
           if (R1 & 7 == 1) goto cbrQi; else goto cbrQm;
       cbrQi: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
       cbrQm: // global
           Sp = Sp + 8;
           call lvl5_rbnWM_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrQ7_info" {
     block_cbrQ7_info:
         const _cbrQ7;
         const 0;
         const 4294967326;
         const SboCL_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.549401288 UTC

[section ""cstring" . lvl6_rbnWO_bytes" {
     lvl6_rbnWO_bytes:
         I8[] [100,117,112,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.551712785 UTC

[section ""data" . lvl7_rbnWP_closure" {
     lvl7_rbnWP_closure:
         const lvl7_rbnWP_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_rbnWP_entry() //  [R1]
         { []
         }
     {offset
       cbrRe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrRf; else goto cbrRg;
       cbrRf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrRg: // global
           (_cbrRb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrRb::I64 == 0) goto cbrRd; else goto cbrRc;
       cbrRd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrRc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrRb::I64;
           R2 = lvl6_rbnWO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_rbnWP_info" {
     lvl7_rbnWP_info:
         const lvl7_rbnWP_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.555130436 UTC

[section ""cstring" . GHC.IO.Handle.hSetNewlineMode3_bytes" {
     GHC.IO.Handle.hSetNewlineMode3_bytes:
         I8[] [104,83,101,116,78,101,119,108,105,110,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.55755813 UTC

[section ""data" . GHC.IO.Handle.hSetNewlineMode2_closure" {
     GHC.IO.Handle.hSetNewlineMode2_closure:
         const GHC.IO.Handle.hSetNewlineMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hSetNewlineMode2_entry() //  [R1]
         { []
         }
     {offset
       cbrRv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrRw; else goto cbrRx;
       cbrRw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrRx: // global
           (_cbrRs::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrRs::I64 == 0) goto cbrRu; else goto cbrRt;
       cbrRu: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrRt: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrRs::I64;
           R2 = GHC.IO.Handle.hSetNewlineMode3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetNewlineMode2_info" {
     GHC.IO.Handle.hSetNewlineMode2_info:
         const GHC.IO.Handle.hSetNewlineMode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.563302361 UTC

[section ""data" . GHC.IO.Handle.$whSetNewlineMode_closure" {
     GHC.IO.Handle.$whSetNewlineMode_closure:
         const GHC.IO.Handle.$whSetNewlineMode_info;
         const 0;
 },
 sat_sbo2y_entry() //  [R1, R2]
         { []
         }
     {offset
       cbrRR: // global
           if ((Sp + -136) < SpLim) (likely: False) goto cbrRX; else goto cbrRY;
       cbrRX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrRY: // global
           I64[Sp - 24] = block_cbrRO_info;
           _sbo28::P64 = P64[R1 + 6];
           _sbo29::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbo28::P64;
           P64[Sp - 8] = _sbo29::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubrS3; else goto cbrRP;
       ubrS3: // global
           call _cbrRO(R1) args: 0, res: 0, upd: 0;
       cbrRP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbo2y_info" {
     sat_sbo2y_info:
         const sat_sbo2y_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const SboCL_srt+96;
 },
 _cbrRO() //  [R1]
         { []
         }
     {offset
       cbrRO: // global
           I64[Sp - 112] = block_cbrRU_info;
           R2 = R1;
           P64[Sp - 104] = P64[R1 + 15];
           P64[Sp - 96] = P64[R1 + 23];
           P64[Sp - 88] = P64[R1 + 31];
           P64[Sp - 80] = P64[R1 + 39];
           P64[Sp - 72] = P64[R1 + 47];
           P64[Sp - 64] = P64[R1 + 55];
           P64[Sp - 56] = P64[R1 + 63];
           P64[Sp - 48] = P64[R1 + 71];
           P64[Sp - 40] = P64[R1 + 79];
           P64[Sp - 32] = P64[R1 + 87];
           P64[Sp - 24] = P64[R1 + 95];
           P64[Sp - 16] = P64[R1 + 103];
           P64[Sp - 8] = P64[R1 + 127];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 112;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrRO_info" {
     block_cbrRO_info:
         const _cbrRO;
         const 2;
         const 4294967326;
         const SboCL_srt+96;
 },
 _cbrRU() //  [R1]
         { []
         }
     {offset
       cbrRU: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbrS2; else goto cbrS1;
       cbrS2: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrS1: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 112];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 104];
           R1 = Hp - 127;
           Sp = Sp + 136;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrRU_info" {
     block_cbrRU_info:
         const _cbrRU;
         const 16;
         const 30;
 },
 GHC.IO.Handle.$whSetNewlineMode_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbrS4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrS8; else goto cbrS7;
       cbrS8: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$whSetNewlineMode_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbrS7: // global
           I64[Hp - 16] = sat_sbo2y_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = Hp - 14;
           R3 = R2;
           R2 = GHC.IO.Handle.hSetNewlineMode2_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$whSetNewlineMode_info" {
     GHC.IO.Handle.$whSetNewlineMode_info:
         const GHC.IO.Handle.$whSetNewlineMode_entry;
         const 0;
         const 31525201686560782;
         const 17179869207;
         const SboCL_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.573313663 UTC

[section ""data" . GHC.IO.Handle.hSetNewlineMode1_closure" {
     GHC.IO.Handle.hSetNewlineMode1_closure:
         const GHC.IO.Handle.hSetNewlineMode1_info;
         const 0;
 },
 GHC.IO.Handle.hSetNewlineMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbrT0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrT1; else goto cbrT2;
       cbrT1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetNewlineMode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbrT2: // global
           I64[Sp - 16] = block_cbrSX_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubrT6; else goto cbrSY;
       ubrT6: // global
           call _cbrSX(R1) args: 0, res: 0, upd: 0;
       cbrSY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetNewlineMode1_info" {
     GHC.IO.Handle.hSetNewlineMode1_info:
         const GHC.IO.Handle.hSetNewlineMode1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const SboCL_srt+264;
 },
 _cbrSX() //  [R1]
         { []
         }
     {offset
       cbrSX: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.$whSetNewlineMode_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrSX_info" {
     block_cbrSX_info:
         const _cbrSX;
         const 1;
         const 4294967326;
         const SboCL_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.578389659 UTC

[section ""data" . GHC.IO.Handle.hSetNewlineMode_closure" {
     GHC.IO.Handle.hSetNewlineMode_closure:
         const GHC.IO.Handle.hSetNewlineMode_info;
         const 0;
 },
 GHC.IO.Handle.hSetNewlineMode_entry() //  [R2, R3]
         { []
         }
     {offset
       cbrTk: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetNewlineMode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetNewlineMode_info" {
     GHC.IO.Handle.hSetNewlineMode_info:
         const GHC.IO.Handle.hSetNewlineMode_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SboCL_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.581932206 UTC

[section ""cstring" . lvl8_rbnWQ_bytes" {
     lvl8_rbnWQ_bytes:
         I8[] [104,83,101,116,66,105,110,97,114,121,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.584096581 UTC

[section ""data" . lvl9_rbnWR_closure" {
     lvl9_rbnWR_closure:
         const lvl9_rbnWR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_rbnWR_entry() //  [R1]
         { []
         }
     {offset
       cbrTy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbrTz; else goto cbrTA;
       cbrTz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrTA: // global
           (_cbrTv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrTv::I64 == 0) goto cbrTx; else goto cbrTw;
       cbrTx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrTw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrTv::I64;
           R2 = lvl8_rbnWQ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_rbnWR_info" {
     lvl9_rbnWR_info:
         const lvl9_rbnWR_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.587411069 UTC

[section ""cstring" . lvl10_rbnWS_bytes" {
     lvl10_rbnWS_bytes:
         I8[] [99,111,100,101,99,95,115,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.589905145 UTC

[section ""data" . lvl11_rbnWT_closure" {
     lvl11_rbnWT_closure:
         const lvl11_rbnWT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rbnWT_entry() //  [R1]
         { []
         }
     {offset
       cbrTR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrTS; else goto cbrTT;
       cbrTS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrTT: // global
           (_cbrTM::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbrTM::I64 == 0) goto cbrTO; else goto cbrTN;
       cbrTO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbrTN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbrTM::I64;
           I64[Sp - 24] = block_cbrTP_info;
           R2 = lvl10_rbnWS_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rbnWT_info" {
     lvl11_rbnWT_info:
         const lvl11_rbnWT_entry;
         const 0;
         const 4294967317;
         const SboCL_srt+288;
 },
 _cbrTP() //  [R1]
         { []
         }
     {offset
       cbrTP: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbrTP_info" {
     block_cbrTP_info:
         const _cbrTP;
         const 0;
         const 4294967326;
         const SboCL_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.617006311 UTC

[section ""data" . GHC.IO.Handle.hSetBinaryMode1_closure" {
     GHC.IO.Handle.hSetBinaryMode1_closure:
         const GHC.IO.Handle.hSetBinaryMode1_info;
         const 0;
 },
 lvl48_sbo2J_entry() //  [R1]
         { []
         }
     {offset
       cbrUi: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrUj; else goto cbrUk;
       cbrUj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrUk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbrUf_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubrUo; else goto cbrUg;
       ubrUo: // global
           call _cbrUf() args: 0, res: 0, upd: 0;
       cbrUg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_sbo2J_info" {
     lvl48_sbo2J_info:
         const lvl48_sbo2J_entry;
         const 1;
         const 16;
 },
 _cbrUf() //  []
         { []
         }
     {offset
       cbrUf: // global
           R1 = GHC.IO.Handle.Types.LF_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbrUf_info" {
     block_cbrUf_info:
         const _cbrUf;
         const 0;
         const 30;
 },
 sat_sbo5C_entry() //  [R1]
         { []
         }
     {offset
       cbrVa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbrVe; else goto cbrVf;
       cbrVe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrVf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbrV7_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubrVj; else goto cbrV8;
       ubrVj: // global
           call _cbrV7(R1) args: 0, res: 0, upd: 0;
       cbrV8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbo5C_info" {
     sat_sbo5C_info:
         const sat_sbo5C_entry;
         const 1;
         const 16;
 },
 _cbrV7() //  [R1]
         { []
         }
     {offset
       cbrV7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbrVi; else goto cbrVh;
       cbrVi: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbrVh: // global
           _sbo5x::P64 = P64[R1 + 7];
           _sbo5y::P64 = P64[R1 + 15];
           _sbo5w::I64 = I64[R1 + 23];
           _sbo5z::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbo5x::P64;
           P64[Hp - 32] = _sbo5y::P64;
           I64[Hp - 24] = _sbo5w::I64;
           I64[Hp - 16] = _sbo5z::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbrV7_info" {
     block_cbrV7_info:
         const _cbrV7;
         const 0;
         const 30;
 },
 sat_sbo5V_entry() //  [R1]
         { []
         }
     {offset
       cbrVG: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbrVN; else goto cbrVO;
       cbrVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbrVO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbrVD_info;
           _sbo5L::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbo5L::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubrVS; else goto cbrVE;
       ubrVS: // global
           call _cbrVD(R1) args: 0, res: 0, upd: 0;
       cbrVE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbo5V_info" {
     sat_sbo5V_info:
         const sat_sbo5V_entry;
         const 4294967297;
         const 19;
 },
 _cbrVD() //  [R1]
         { []
         }
     {offset
       cbrVD: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbrVR; else goto cbrVQ;
       cbrVR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbrVQ: // global
           _sbo5P::P64 = P64[R1 + 7];
           _sbo5Q::P64 = P64[R1 + 15];
           _sbo5O::I64 = I64[R1 + 23];
           _sbo5R::I64 = I64[R1 + 31];
           _sbo5T::I64 = I64[R1 + 47];
           _sbo5U::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbo5P::P64;
           P64[Hp - 32] = _sbo5Q::P64;
           I64[Hp - 24] = _sbo5O::I64;
           I64[Hp - 16] = _sbo5R::I64;
           I64[Hp - 8] = _sbo5U::I64;
           I64[Hp] = _sbo5T::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbrVD_info" {
     block_cbrVD_info:
         const _cbrVD;
         const 65;
         const 30;
 },
 sat_sbo6i_entry() //  [R1, R2]
         { []
         }
     {offset
       cbrVT: // global
           if ((Sp + -176) < SpLim) (likely: False) goto cbrVU; else goto cbrVV;
       cbrVU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbrVV: // global
           I64[Sp - 24] = block_cbrUu_info;
           _sbo2H::P64 = P64[R1 + 6];
           _sbo2J::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbo2H::P64;
           P64[Sp - 8] = _sbo2J::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubs1v; else goto cbrUv;
       ubs1v: // global
           call _cbrUu(R1) args: 0, res: 0, upd: 0;
       cbrUv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbo6i_info" {
     sat_sbo6i_info:
         const sat_sbo6i_entry;
         const 2;
         const 52780853100555;
         const 8589934597;
         const SboCL_srt+200;
 },
 _cbrUu() //  [R1]
         { []
         }
     {offset
       cbrUu: // global
           I64[Sp - 104] = block_cbrUz_info;
           _sbo2O::P64 = P64[R1 + 7];
           _sbo2P::P64 = P64[R1 + 15];
           _sbo2Q::P64 = P64[R1 + 23];
           _sbo2R::P64 = P64[R1 + 31];
           _sbo2S::P64 = P64[R1 + 39];
           _sbo2T::P64 = P64[R1 + 47];
           _sbo2U::P64 = P64[R1 + 55];
           _sbo2V::P64 = P64[R1 + 63];
           _sbo2W::P64 = P64[R1 + 71];
           _sbo2X::P64 = P64[R1 + 79];
           _sbo2Y::P64 = P64[R1 + 87];
           _sbo2Z::P64 = P64[R1 + 95];
           _sbo33::P64 = P64[R1 + 127];
           R1 = P64[_sbo2W::P64 + 8];
           P64[Sp - 96] = _sbo2P::P64;
           P64[Sp - 88] = _sbo2Q::P64;
           P64[Sp - 80] = _sbo2R::P64;
           P64[Sp - 72] = _sbo2S::P64;
           P64[Sp - 64] = _sbo2T::P64;
           P64[Sp - 56] = _sbo2U::P64;
           P64[Sp - 48] = _sbo2V::P64;
           P64[Sp - 40] = _sbo2W::P64;
           P64[Sp - 32] = _sbo2X::P64;
           P64[Sp - 24] = _sbo2Y::P64;
           P64[Sp - 16] = _sbo2Z::P64;
           P64[Sp - 8] = _sbo33::P64;
           P64[Sp] = _sbo2O::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto ubs1i; else goto cbrUA;
       ubs1i: // global
           call _cbrUz(R1) args: 0, res: 0, upd: 0;
       cbrUA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrUu_info" {
     block_cbrUu_info:
         const _cbrUu;
         const 2;
         const 52780853100574;
         const SboCL_srt+200;
 },
 _cbrUz() //  [R1]
         { []
         }
     {offset
       cbrUz: // global
           I64[Sp - 16] = block_cbrUG_info;
           _sbo3c::I64 = I64[R1 + 39];
           _sbo3d::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbo3d::I64;
           I64[Sp] = _sbo3c::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubs1j; else goto cbrUH;
       ubs1j: // global
           call _cbrUG(R1) args: 0, res: 0, upd: 0;
       cbrUH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrUz_info" {
     block_cbrUz_info:
         const _cbrUz;
         const 15;
         const 52780853100574;
         const SboCL_srt+200;
 },
 _cbrUG() //  [R1]
         { []
         }
     {offset
       cbrUG: // global
           if (R1 & 7 == 1) goto cbrZH; else goto cbs0C;
       cbrZH: // global
           _sbo5c::P64 = P64[P64[Sp + 80] + 8];
           I64[Sp + 16] = block_cbrUL_info;
           R1 = _sbo5c::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubs1k; else goto cbrUM;
       ubs1k: // global
           call _cbrUL(R1) args: 0, res: 0, upd: 0;
       cbrUM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbs0C: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubs13; else goto cbs0A;
       ubs13: // global
           Sp = Sp + 24;
           call _sbo3e() args: 0, res: 0, upd: 0;
       cbs0A: // global
           R1 = GHC.IO.Handle.Internals.flushCharBuffer2_closure;
           Sp = Sp + 144;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrUG_info" {
     block_cbrUG_info:
         const _cbrUG;
         const 209;
         const 52780853100574;
         const SboCL_srt+200;
 },
 _cbrUL() //  [R1]
         { []
         }
     {offset
       cbrUL: // global
           I64[Sp - 16] = block_cbrUQ_info;
           _sbo5i::I64 = I64[R1 + 39];
           _sbo5j::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbo5j::I64;
           I64[Sp] = _sbo5i::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubs1m; else goto cbrUR;
       ubs1m: // global
           call _cbrUQ(R1) args: 0, res: 0, upd: 0;
       cbrUR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrUL_info" {
     block_cbrUL_info:
         const _cbrUL;
         const 15;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrUQ() //  [R1]
         { []
         }
     {offset
       cbrUQ: // global
           if (R1 & 7 == 1) goto cbs0p; else goto ubs14;
       cbs0p: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubs15; else goto cbrZL;
       ubs15: // global
           Sp = Sp + 24;
           goto ubs1p;
       cbrZL: // global
           _sbo5o::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 16] = block_cbrUY_info;
           R1 = _sbo5o::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubs1n; else goto cbrUZ;
       ubs1n: // global
           call _cbrUY(R1) args: 0, res: 0, upd: 0;
       cbrUZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubs14: // global
           Sp = Sp + 24;
           goto ubs1p;
       ubs1p: // global
           call _sbo3e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrUQ_info" {
     block_cbrUQ_info:
         const _cbrUQ;
         const 209;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrUY() //  [R1]
         { []
         }
     {offset
       cbrUY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrZO; else goto cbrZN;
       cbrZO: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrZN: // global
           _sbo2W::P64 = P64[Sp + 64];
           _sbo5q::P64 = P64[R1 + 7];
           _sbo5r::P64 = P64[R1 + 15];
           _sbo5u::P64 = P64[_sbo2W::P64 + 8];
           I64[Hp - 16] = sat_sbo5C_info;
           P64[Hp] = _sbo5u::P64;
           call MO_WriteBarrier();
           P64[_sbo2W::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo2W::P64);
           I64[Sp - 8] = block_cbrVn_info;
           R1 = _sbo5u::P64;
           P64[Sp] = _sbo5r::P64;
           P64[Sp + 56] = _sbo5q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubs1q; else goto cbrVo;
       ubs1q: // global
           call _cbrVn(R1) args: 0, res: 0, upd: 0;
       cbrVo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrUY_info" {
     block_cbrUY_info:
         const _cbrUY;
         const 4111;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrVn() //  [R1]
         { []
         }
     {offset
       cbrVn: // global
           _sbo5L::I64 = I64[R1 + 39];
           if (_sbo5L::I64 != 0) goto cbrZR; else goto cbs0m;
       cbrZR: // global
           I64[Sp - 32] = block_cbrVu_info;
           _sbo5G::P64 = P64[R1 + 7];
           _sbo5H::P64 = P64[R1 + 15];
           _sbo5F::I64 = I64[R1 + 23];
           R1 = P64[Sp + 96];
           P64[Sp - 24] = _sbo5G::P64;
           P64[Sp - 16] = _sbo5H::P64;
           I64[Sp - 8] = _sbo5L::I64;
           I64[Sp] = _sbo5F::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubs1r; else goto cbrVv;
       ubs1r: // global
           call _cbrVu(R1) args: 0, res: 0, upd: 0;
       cbrVv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbs0m: // global
           _sbo2T::P64 = P64[Sp + 48];
           _sbo5r::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbo2T::P64 + 8] = _sbo5r::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo2T::P64);
           Sp = Sp + 16;
           call _sbo3e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrVn_info" {
     block_cbrVn_info:
         const _cbrVn;
         const 16;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrVu() //  [R1]
         { []
         }
     {offset
       cbrVu: // global
           if (R1 & 7 == 1) goto cbrZT; else goto cbs0b;
       cbrZT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbrZW; else goto cbrZV;
       cbrZW: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrZV: // global
           I64[Hp - 24] = sat_sbo5V_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 24];
           _sbo2T::P64 = P64[Sp + 80];
           call MO_WriteBarrier();
           P64[_sbo2T::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo2T::P64);
           Sp = Sp + 48;
           call _sbo3e() args: 0, res: 0, upd: 0;
       cbs0b: // global
           I64[Sp] = block_cbrZZ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubs1t; else goto cbs00;
       ubs1t: // global
           call _cbrZZ(R1) args: 0, res: 0, upd: 0;
       cbs00: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrVu_info" {
     block_cbrVu_info:
         const _cbrVu;
         const 788;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrZZ() //  [R1]
         { []
         }
     {offset
       cbrZZ: // global
           I64[Sp - 8] = block_cbs04_info;
           R2 = P64[Sp + 96];
           _sbo5Z::P64 = P64[R1 + 7];
           _sbo60::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbo60::P64;
           P64[Sp + 96] = _sbo5Z::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrZZ_info" {
     block_cbrZZ_info:
         const _cbrZZ;
         const 788;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbs04() //  [R1]
         { []
         }
     {offset
       cbs04: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbs0f; else goto cbs0e;
       cbs0f: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbs0e: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sbo5r::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_cbs07_info;
           R5 = Hp - 47;
           R4 = _sbo5r::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 104];
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs04_info" {
     block_cbs04_info:
         const _cbs04;
         const 1557;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbs07() //  [R1]
         { []
         }
     {offset
       cbs07: // global
           I64[Sp] = block_cbs09_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubs1N; else goto cbs0h;
       ubs1N: // global
           call _cbs09(R1) args: 0, res: 0, upd: 0;
       cbs0h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs07_info" {
     block_cbs07_info:
         const _cbs07;
         const 4111;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbs09() //  [R1]
         { []
         }
     {offset
       cbs09: // global
           _sbo2T::P64 = P64[Sp + 40];
           _sbo6c::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbo2T::P64 + 8] = _sbo6c::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo2T::P64);
           Sp = Sp + 8;
           call _sbo3e() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbs09_info" {
     block_cbs09_info:
         const _cbs09;
         const 4111;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _sbo3e() //  []
         { []
         }
     {offset
       sbo3e: // global
           I64[Sp - 8] = block_cbrW3_info;
           R1 = P64[Sp + 80];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubs1P; else goto cbrYF;
       ubs1P: // global
           call _cbrW3(R1) args: 0, res: 0, upd: 0;
       cbrYF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbrW3() //  [R1]
         { []
         }
     {offset
       cbrW3: // global
           if (R1 & 7 == 1) goto cbrYM; else goto cbrZb;
       cbrYM: // global
           I64[Sp] = block_cbrYJ_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubs1w; else goto cbrYN;
       ubs1w: // global
           call _cbrYJ(R1) args: 0, res: 0, upd: 0;
       cbrYN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbrZb: // global
           I64[Sp] = block_cbrZ9_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubs1x; else goto cbrZc;
       ubs1x: // global
           call _cbrZ9(R1) args: 0, res: 0, upd: 0;
       cbrZc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrW3_info" {
     block_cbrW3_info:
         const _cbrW3;
         const 69647;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrYJ() //  [R1]
         { []
         }
     {offset
       cbrYJ: // global
           if (R1 & 7 == 1) goto ubs1b; else goto cbrZ3;
       ubs1b: // global
           Sp = Sp + 8;
           call _sbo3g() args: 0, res: 0, upd: 0;
       cbrZ3: // global
           I64[Sp] = block_cbrYW_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubs1G; else goto cbrYX;
       ubs1G: // global
           call _cbrYW(R1) args: 0, res: 0, upd: 0;
       cbrYX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrYJ_info" {
     block_cbrYJ_info:
         const _cbrYJ;
         const 102415;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrYW() //  [R1]
         { []
         }
     {offset
       cbrYW: // global
           I64[Sp] = block_cbrZ1_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrYW_info" {
     block_cbrYW_info:
         const _cbrYW;
         const 102415;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrZ1() //  []
         { []
         }
     {offset
       cbrZ1: // global
           Sp = Sp + 8;
           call _sbo3g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrZ1_info" {
     block_cbrZ1_info:
         const _cbrZ1;
         const 102415;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrZ9() //  [R1]
         { []
         }
     {offset
       cbrZ9: // global
           I64[Sp] = block_cbrZg_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrZ9_info" {
     block_cbrZ9_info:
         const _cbrZ9;
         const 69647;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrZg() //  []
         { []
         }
     {offset
       cbrZg: // global
           I64[Sp] = block_cbrZi_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubs1J; else goto cbrZl;
       ubs1J: // global
           call _cbrZi(R1) args: 0, res: 0, upd: 0;
       cbrZl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrZg_info" {
     block_cbrZg_info:
         const _cbrZg;
         const 69647;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrZi() //  [R1]
         { []
         }
     {offset
       cbrZi: // global
           if (R1 & 7 == 1) goto ubs19; else goto cbrZB;
       ubs19: // global
           Sp = Sp + 8;
           call _sbo3g() args: 0, res: 0, upd: 0;
       cbrZB: // global
           I64[Sp] = block_cbrZu_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubs1K; else goto cbrZv;
       ubs1K: // global
           call _cbrZu(R1) args: 0, res: 0, upd: 0;
       cbrZv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrZi_info" {
     block_cbrZi_info:
         const _cbrZi;
         const 102415;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrZu() //  [R1]
         { []
         }
     {offset
       cbrZu: // global
           I64[Sp] = block_cbrZz_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrZu_info" {
     block_cbrZu_info:
         const _cbrZu;
         const 102415;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrZz() //  []
         { []
         }
     {offset
       cbrZz: // global
           Sp = Sp + 8;
           call _sbo3g() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrZz_info" {
     block_cbrZz_info:
         const _cbrZz;
         const 102415;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _sbo3g() //  []
         { []
         }
     {offset
       sbo3g: // global
           I64[Sp - 8] = block_cbrWa_info;
           R1 = P64[Sp + 104];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubs1Q; else goto cbrYj;
       ubs1Q: // global
           call _cbrWa(R1) args: 0, res: 0, upd: 0;
       cbrYj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbrWa() //  [R1]
         { []
         }
     {offset
       cbrWa: // global
           if (R1 & 7 == 1) goto cbrYq; else goto cbrYE;
       cbrYq: // global
           I64[Sp] = block_cbrYn_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubs1y; else goto cbrYr;
       ubs1y: // global
           call _cbrYn(R1) args: 0, res: 0, upd: 0;
       cbrYr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbrYE: // global
           P64[Sp + 112] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _sbo3i() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrWa_info" {
     block_cbrWa_info:
         const _cbrWa;
         const 626703;
         const 35188667056158;
         const SboCL_srt+200;
 },
 _cbrYn() //  [R1]
         { []
         }
     {offset
       cbrYn: // global
           I64[Sp] = block_cbrYv_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrYn_info" {
     block_cbrYn_info:
         const _cbrYn;
         const 626703;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrYv() //  [R1]
         { []
         }
     {offset
       cbrYv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbrYA; else goto cbrYz;
       cbrYA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrYz: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 112] = Hp - 6;
           Sp = Sp + 8;
           call _sbo3i() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrYv_info" {
     block_cbrYv_info:
         const _cbrYv;
         const 626703;
         const 4294967326;
         const SboCL_srt+304;
 },
 _sbo3i() //  []
         { []
         }
     {offset
       sbo3i: // global
           I64[Sp - 8] = block_cbrWf_info;
           R1 = P64[Sp + 104];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubs1R; else goto cbrWh;
       ubs1R: // global
           call _cbrWf(R1) args: 0, res: 0, upd: 0;
       cbrWh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbrWf() //  [R1]
         { []
         }
     {offset
       cbrWf: // global
           if (R1 & 7 == 1) goto cbrWq; else goto cbrWB;
       cbrWq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrWt; else goto cbrWs;
       cbrWt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrWs: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbrWm_info;
           R1 = Hp - 15;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbrWB: // global
           I64[Sp] = block_cbrWz_info;
           _sbo3l::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp + 112] = _sbo3l::P64;
           if (R1 & 7 != 0) goto ubs1A; else goto cbrWC;
       ubs1A: // global
           call _cbrWz(R1) args: 0, res: 0, upd: 0;
       cbrWC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrWf_info" {
     block_cbrWf_info:
         const _cbrWf;
         const 626703;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrWm() //  [R1]
         { []
         }
     {offset
       cbrWm: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbrWw; else goto cbrWv;
       cbrWw: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrWv: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.Base.Nothing_closure+1;
           P64[Hp - 24] = GHC.Base.Nothing_closure+1;
           _sbo2J::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbo2J::P64;
           P64[Hp - 8] = _sbo2J::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrWm_info" {
     block_cbrWm_info:
         const _cbrWm;
         const 626703;
         const 30;
 },
 _cbrWz() //  [R1]
         { []
         }
     {offset
       cbrWz: // global
           I64[Sp] = block_cbrWI_info;
           _sbo3x::P64 = P64[R1 + 15];
           _sbo3y::P64 = P64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp + 80] = _sbo3y::P64;
           P64[Sp + 88] = _sbo3x::P64;
           if (R1 & 7 != 0) goto ubs1B; else goto cbrXU;
       ubs1B: // global
           call _cbrWI(R1) args: 0, res: 0, upd: 0;
       cbrXU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrWz_info" {
     block_cbrWz_info:
         const _cbrWz;
         const 102415;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrWI() //  [R1]
         { []
         }
     {offset
       cbrWI: // global
           _sbo3x::P64 = P64[Sp + 88];
           _cbs0W::P64 = R1 & 7;
           if (_cbs0W::P64 != 3) goto ubs10; else goto cbrY5;
       ubs10: // global
           if (_cbs0W::P64 != 6) goto cbrY0; else goto cbrYe;
       cbrY0: // global
           P64[Sp + 88] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _sbo3z() args: 0, res: 0, upd: 0;
       cbrYe: // global
           I64[Sp] = block_cbrYc_info;
           R1 = _sbo3x::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbrY5: // global
           I64[Sp] = block_cbrY3_info;
           R1 = _sbo3x::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrWI_info" {
     block_cbrWI_info:
         const _cbrWI;
         const 4111;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrYc() //  [R1]
         { []
         }
     {offset
       cbrYc: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbrYi; else goto cbrYh;
       cbrYi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrYh: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 88] = Hp - 6;
           Sp = Sp + 8;
           call _sbo3z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrYc_info" {
     block_cbrYc_info:
         const _cbrYc;
         const 69647;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrY3() //  [R1]
         { []
         }
     {offset
       cbrY3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbrY9; else goto cbrY8;
       cbrY9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrY8: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 88] = Hp - 6;
           Sp = Sp + 8;
           call _sbo3z() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbrY3_info" {
     block_cbrY3_info:
         const _cbrY3;
         const 69647;
         const 4294967326;
         const SboCL_srt+304;
 },
 _sbo3z() //  []
         { []
         }
     {offset
       sbo3z: // global
           I64[Sp - 8] = block_cbrWN_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubs1S; else goto cbrWP;
       ubs1S: // global
           call _cbrWN(R1) args: 0, res: 0, upd: 0;
       cbrWP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbrWN() //  [R1]
         { []
         }
     {offset
       cbrWN: // global
           _sbo3y::P64 = P64[Sp + 80];
           _cbs0Z::P64 = R1 & 7;
           if (_cbs0Z::P64 < 5) goto ubs11; else goto ubs12;
       ubs11: // global
           if (_cbs0Z::P64 < 4) goto cbrWY; else goto cbrXf;
       cbrWY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrX1; else goto cbrX0;
       cbrX1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrX0: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbrWU_info;
           _sbo3C::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbo3C::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbrXf: // global
           I64[Sp] = block_cbrX7_info;
           R1 = _sbo3y::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ubs12: // global
           if (_cbs0Z::P64 < 6) goto cbrXw; else goto cbrXN;
       cbrXw: // global
           I64[Sp] = block_cbrXo_info;
           R1 = _sbo3y::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbrXN: // global
           I64[Sp] = block_cbrXF_info;
           R1 = _sbo3y::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrWN_info" {
     block_cbrWN_info:
         const _cbrWN;
         const 4623;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrWU() //  [R1]
         { []
         }
     {offset
       cbrWU: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbrX4; else goto cbrX3;
       cbrX4: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrX3: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 80];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbo2J::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbo2J::P64;
           P64[Hp - 8] = _sbo2J::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrWU_info" {
     block_cbrWU_info:
         const _cbrWU;
         const 4623;
         const 30;
 },
 _cbrX7() //  [R1]
         { []
         }
     {offset
       cbrX7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrXi; else goto cbrXh;
       cbrXi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrXh: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbrXa_info;
           _sbo3N::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbo3N::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrX7_info" {
     block_cbrX7_info:
         const _cbrX7;
         const 37391;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrXa() //  [R1]
         { []
         }
     {offset
       cbrXa: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbrXl; else goto cbrXk;
       cbrXl: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrXk: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 80];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbo2J::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbo2J::P64;
           P64[Hp - 8] = _sbo2J::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrXa_info" {
     block_cbrXa_info:
         const _cbrXa;
         const 4623;
         const 30;
 },
 _cbrXo() //  [R1]
         { []
         }
     {offset
       cbrXo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrXz; else goto cbrXy;
       cbrXz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrXy: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbrXr_info;
           _sbo3Z::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbo3Z::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrXo_info" {
     block_cbrXo_info:
         const _cbrXo;
         const 37391;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrXr() //  [R1]
         { []
         }
     {offset
       cbrXr: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbrXC; else goto cbrXB;
       cbrXC: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrXB: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 80];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.AppendHandle_closure+5;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbo2J::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbo2J::P64;
           P64[Hp - 8] = _sbo2J::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrXr_info" {
     block_cbrXr_info:
         const _cbrXr;
         const 4623;
         const 30;
 },
 _cbrXF() //  [R1]
         { []
         }
     {offset
       cbrXF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbrXQ; else goto cbrXP;
       cbrXQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrXP: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbrXI_info;
           _sbo4b::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbo4b::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrXF_info" {
     block_cbrXF_info:
         const _cbrXF;
         const 37391;
         const 4294967326;
         const SboCL_srt+304;
 },
 _cbrXI() //  [R1]
         { []
         }
     {offset
       cbrXI: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbrXT; else goto cbrXS;
       cbrXT: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbrXS: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 80];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbo2J::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbo2J::P64;
           P64[Hp - 8] = _sbo2J::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbrXI_info" {
     block_cbrXI_info:
         const _cbrXI;
         const 4623;
         const 30;
 },
 GHC.IO.Handle.hSetBinaryMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbs1T: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbs1X; else goto cbs1W;
       cbs1X: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetBinaryMode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbs1W: // global
           I64[Hp - 40] = lvl48_sbo2J_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbo6i_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           R4 = Hp - 14;
           R3 = R2;
           R2 = lvl9_rbnWR_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBinaryMode1_info" {
     GHC.IO.Handle.hSetBinaryMode1_info:
         const GHC.IO.Handle.hSetBinaryMode1_entry;
         const 0;
         const 264436841447438;
         const 12884901903;
         const SboCL_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.701414548 UTC

[section ""data" . GHC.IO.Handle.hSetBinaryMode_closure" {
     GHC.IO.Handle.hSetBinaryMode_closure:
         const GHC.IO.Handle.hSetBinaryMode_info;
         const 0;
 },
 GHC.IO.Handle.hSetBinaryMode_entry() //  [R2, R3]
         { []
         }
     {offset
       cbs6M: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetBinaryMode1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBinaryMode_info" {
     GHC.IO.Handle.hSetBinaryMode_info:
         const GHC.IO.Handle.hSetBinaryMode_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SboCL_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.704483672 UTC

[section ""cstring" . GHC.IO.Handle.hIsSeekable4_bytes" {
     GHC.IO.Handle.hIsSeekable4_bytes:
         I8[] [104,73,115,83,101,101,107,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.706704786 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable3_closure" {
     GHC.IO.Handle.hIsSeekable3_closure:
         const GHC.IO.Handle.hIsSeekable3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsSeekable3_entry() //  [R1]
         { []
         }
     {offset
       cbs70: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbs71; else goto cbs72;
       cbs71: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbs72: // global
           (_cbs6X::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbs6X::I64 == 0) goto cbs6Z; else goto cbs6Y;
       cbs6Z: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbs6Y: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbs6X::I64;
           R2 = GHC.IO.Handle.hIsSeekable4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable3_info" {
     GHC.IO.Handle.hIsSeekable3_info:
         const GHC.IO.Handle.hIsSeekable3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.712953557 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable2_closure" {
     GHC.IO.Handle.hIsSeekable2_closure:
         const GHC.IO.Handle.hIsSeekable2_info;
         const 0;
 },
 GHC.IO.Handle.hIsSeekable2_entry() //  [R2]
         { []
         }
     {offset
       cbs7h: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbs7i; else goto cbs7j;
       cbs7i: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsSeekable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbs7j: // global
           I64[Sp - 8] = block_cbs7e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubs7U; else goto cbs7f;
       ubs7U: // global
           call _cbs7e(R1) args: 0, res: 0, upd: 0;
       cbs7f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable2_info" {
     GHC.IO.Handle.hIsSeekable2_info:
         const GHC.IO.Handle.hIsSeekable2_entry;
         const 0;
         const 216172786408751118;
         const 8589934597;
         const SboCL_srt+136;
 },
 _cbs7e() //  [R1]
         { []
         }
     {offset
       cbs7e: // global
           I64[Sp - 24] = block_cbs7m_info;
           _sbo6l::P64 = R1;
           _sbo6m::P64 = P64[R1 + 7];
           _sbo6p::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbo6m::P64;
           P64[Sp - 8] = _sbo6p::P64;
           P64[Sp] = _sbo6l::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubs7T; else goto cbs7o;
       ubs7T: // global
           call _cbs7m(R1) args: 0, res: 0, upd: 0;
       cbs7o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs7e_info" {
     block_cbs7e_info:
         const _cbs7e;
         const 0;
         const 72057598332895262;
         const SboCL_srt+136;
 },
 _cbs7m() //  [R1]
         { []
         }
     {offset
       cbs7m: // global
           _cbs7Q::P64 = R1 & 7;
           if (_cbs7Q::P64 < 3) goto ubs7R; else goto ubs7S;
       ubs7R: // global
           if (_cbs7Q::P64 < 2) goto cbs7E; else goto cbs7I;
       cbs7E: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbs7I: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       ubs7S: // global
           if (_cbs7Q::P64 == 5) goto cbs7M; else goto cbs7x;
       cbs7M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbs7P; else goto cbs7O;
       cbs7P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbs7O: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbs7x: // global
           _sbo6p::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbs7s_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbo6p::P64;
           call GHC.IO.Device.isSeekable_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs7m_info" {
     block_cbs7m_info:
         const _cbs7m;
         const 3;
         const 72057598332895262;
         const SboCL_srt+136;
 },
 _cbs7s() //  [R1]
         { []
         }
     {offset
       cbs7s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbs7A; else goto cbs7z;
       cbs7A: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbs7z: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs7s_info" {
     block_cbs7s_info:
         const _cbs7s;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.725548608 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable1_closure" {
     GHC.IO.Handle.hIsSeekable1_closure:
         const GHC.IO.Handle.hIsSeekable1_info;
         const 0;
 },
 io_sbo6S_entry() //  [R1]
         { []
         }
     {offset
       cbs8B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbs8F; else goto cbs8G;
       cbs8F: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbs8G: // global
           I64[Sp - 16] = block_cbs8w_info;
           _sbo6O::P64 = P64[R1 + 15];
           R5 = _sbo6O::P64;
           R4 = GHC.IO.Handle.hIsSeekable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsSeekable3_closure;
           P64[Sp - 8] = _sbo6O::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbo6S_info" {
     io_sbo6S_info:
         const io_sbo6S_entry;
         const 2;
         const 3458764518115508235;
         const 4294967299;
         const SboCL_srt+112;
 },
 _cbs8w() //  [R1]
         { []
         }
     {offset
       cbs8w: // global
           I64[Sp] = block_cbs8y_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubs8L; else goto cbs8z;
       ubs8L: // global
           call _cbs8y(R1) args: 0, res: 0, upd: 0;
       cbs8z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8w_info" {
     block_cbs8w_info:
         const _cbs8w;
         const 1;
         const 30;
 },
 _cbs8y() //  [R1]
         { []
         }
     {offset
       cbs8y: // global
           I64[Sp] = block_cbs8E_info;
           R2 = P64[R1 + 7];
           _sbo6Z::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbo6Z::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8y_info" {
     block_cbs8y_info:
         const _cbs8y;
         const 1;
         const 30;
 },
 _cbs8E() //  []
         { []
         }
     {offset
       cbs8E: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8E_info" {
     block_cbs8E_info:
         const _cbs8E;
         const 1;
         const 30;
 },
 io_sbo78_entry() //  [R1]
         { []
         }
     {offset
       cbs90: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbs94; else goto cbs95;
       cbs94: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbs95: // global
           I64[Sp - 16] = block_cbs8V_info;
           _sbo73::P64 = P64[R1 + 15];
           R5 = _sbo73::P64;
           R4 = GHC.IO.Handle.hIsSeekable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsSeekable3_closure;
           P64[Sp - 8] = _sbo73::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbo78_info" {
     io_sbo78_info:
         const io_sbo78_entry;
         const 2;
         const 3458764518115508235;
         const 4294967299;
         const SboCL_srt+112;
 },
 _cbs8V() //  [R1]
         { []
         }
     {offset
       cbs8V: // global
           I64[Sp] = block_cbs8X_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubs9a; else goto cbs8Y;
       ubs9a: // global
           call _cbs8X(R1) args: 0, res: 0, upd: 0;
       cbs8Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8V_info" {
     block_cbs8V_info:
         const _cbs8V;
         const 1;
         const 30;
 },
 _cbs8X() //  [R1]
         { []
         }
     {offset
       cbs8X: // global
           I64[Sp] = block_cbs93_info;
           R2 = P64[R1 + 7];
           _sbo7f::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbo7f::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8X_info" {
     block_cbs8X_info:
         const _cbs8X;
         const 1;
         const 30;
 },
 _cbs93() //  []
         { []
         }
     {offset
       cbs93: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs93_info" {
     block_cbs93_info:
         const _cbs93;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hIsSeekable1_entry() //  [R2]
         { []
         }
     {offset
       cbs9f: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbs9g; else goto cbs9h;
       cbs9g: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsSeekable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbs9h: // global
           I64[Sp - 8] = block_cbs8k_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubs9y; else goto cbs8l;
       ubs9y: // global
           call _cbs8k(R1) args: 0, res: 0, upd: 0;
       cbs8l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable1_info" {
     GHC.IO.Handle.hIsSeekable1_info:
         const GHC.IO.Handle.hIsSeekable1_entry;
         const 0;
         const 8070450536542896142;
         const 8589934597;
         const SboCL_srt+112;
 },
 _cbs8k() //  [R1]
         { []
         }
     {offset
       cbs8k: // global
           if (R1 & 7 == 1) goto cbs9c; else goto cbs9d;
       cbs9c: // global
           I64[Sp - 16] = block_cbs8p_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbs9d: // global
           I64[Sp - 16] = block_cbs8O_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8k_info" {
     block_cbs8k_info:
         const _cbs8k;
         const 0;
         const 3458764518115508254;
         const SboCL_srt+112;
 },
 _cbs8p() //  [R1]
         { []
         }
     {offset
       cbs8p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbs9l; else goto cbs9k;
       cbs9l: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbs9k: // global
           I64[Hp - 16] = io_sbo6S_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbs8r::P64 = Hp - 15;
           if (R1 == 0) goto cbs9p; else goto cbs9o;
       cbs9p: // global
           R1 = _cbs8r::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbs9o: // global
           R1 = _cbs8r::P64;
           Sp = Sp + 24;
           call io_sbo6S_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8p_info" {
     block_cbs8p_info:
         const _cbs8p;
         const 2;
         const 3458764518115508254;
         const SboCL_srt+112;
 },
 _cbs8O() //  [R1]
         { []
         }
     {offset
       cbs8O: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbs9t; else goto cbs9s;
       cbs9t: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbs9s: // global
           I64[Hp - 16] = io_sbo78_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbs8Q::P64 = Hp - 15;
           if (R1 == 0) goto cbs9x; else goto cbs9w;
       cbs9x: // global
           R1 = _cbs8Q::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbs9w: // global
           R1 = _cbs8Q::P64;
           Sp = Sp + 24;
           call io_sbo78_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbs8O_info" {
     block_cbs8O_info:
         const _cbs8O;
         const 2;
         const 3458764518115508254;
         const SboCL_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.746341741 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable_closure" {
     GHC.IO.Handle.hIsSeekable_closure:
         const GHC.IO.Handle.hIsSeekable_info;
         const 0;
 },
 GHC.IO.Handle.hIsSeekable_entry() //  [R2]
         { []
         }
     {offset
       cbsau: // global
           R2 = R2;
           call GHC.IO.Handle.hIsSeekable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable_info" {
     GHC.IO.Handle.hIsSeekable_info:
         const GHC.IO.Handle.hIsSeekable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.750072182 UTC

[section ""cstring" . GHC.IO.Handle.hGetPosn4_bytes" {
     GHC.IO.Handle.hGetPosn4_bytes:
         I8[] [104,71,101,116,80,111,115,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.752244855 UTC

[section ""data" . GHC.IO.Handle.hGetPosn3_closure" {
     GHC.IO.Handle.hGetPosn3_closure:
         const GHC.IO.Handle.hGetPosn3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetPosn3_entry() //  [R1]
         { []
         }
     {offset
       cbsaI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsaJ; else goto cbsaK;
       cbsaJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsaK: // global
           (_cbsaF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsaF::I64 == 0) goto cbsaH; else goto cbsaG;
       cbsaH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsaG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsaF::I64;
           R2 = GHC.IO.Handle.hGetPosn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn3_info" {
     GHC.IO.Handle.hGetPosn3_info:
         const GHC.IO.Handle.hGetPosn3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.76559149 UTC

[section ""data" . GHC.IO.Handle.hGetPosn2_closure" {
     GHC.IO.Handle.hGetPosn2_closure:
         const GHC.IO.Handle.hGetPosn2_info;
         const 0;
 },
 sat_sbo88_entry() //  [R1]
         { []
         }
     {offset
       cbsbk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbsbl; else goto cbsbm;
       cbsbl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsbm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbsbh_info;
           _sbo7D::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbo7D::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubsbU; else goto cbsbi;
       ubsbU: // global
           call _cbsbh(R1) args: 0, res: 0, upd: 0;
       cbsbi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbo88_info" {
     sat_sbo88_info:
         const sat_sbo88_entry;
         const 2;
         const 12884901906;
         const SboCL_srt+360;
 },
 _cbsbh() //  [R1]
         { []
         }
     {offset
       cbsbh: // global
           I64[Sp - 16] = block_cbsbp_info;
           _sbo81::I64 = I64[R1 + 39];
           _sbo82::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbo82::I64;
           I64[Sp] = _sbo81::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubsbT; else goto cbsbr;
       ubsbT: // global
           call _cbsbp(R1) args: 0, res: 0, upd: 0;
       cbsbr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsbh_info" {
     block_cbsbh_info:
         const _cbsbh;
         const 1;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsbp() //  [R1]
         { []
         }
     {offset
       cbsbp: // global
           _sbo81::I64 = I64[Sp + 16];
           _sbo82::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cbsbB; else goto cbsbN;
       cbsbB: // global
           I64[Sp + 16] = block_cbsby_info;
           R2 = _sbo82::I64 - _sbo81::I64;
           Sp = Sp + 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
       cbsbN: // global
           I64[Sp + 16] = block_cbsbL_info;
           R2 = _sbo82::I64 - _sbo81::I64;
           Sp = Sp + 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsbp_info" {
     block_cbsbp_info:
         const _cbsbp;
         const 195;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsby() //  [R1]
         { []
         }
     {offset
       cbsby: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsby_info" {
     block_cbsby_info:
         const _cbsby;
         const 1;
         const 4294967326;
         const SboCL_srt+368;
 },
 _cbsbL() //  [R1]
         { []
         }
     {offset
       cbsbL: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsbL_info" {
     block_cbsbL_info:
         const _cbsbL;
         const 1;
         const 4294967326;
         const SboCL_srt+360;
 },
 sat_sbo8C_entry() //  [R1]
         { []
         }
     {offset
       cbscp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbsct; else goto cbscu;
       cbsct: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbscu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbscm_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubscy; else goto cbscn;
       ubscy: // global
           call _cbscm(R1) args: 0, res: 0, upd: 0;
       cbscn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbo8C_info" {
     sat_sbo8C_info:
         const sat_sbo8C_entry;
         const 1;
         const 16;
 },
 _cbscm() //  [R1]
         { []
         }
     {offset
       cbscm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbscx; else goto cbscw;
       cbscx: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbscw: // global
           _sbo8x::P64 = P64[R1 + 7];
           _sbo8y::P64 = P64[R1 + 15];
           _sbo8w::I64 = I64[R1 + 23];
           _sbo8z::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbo8x::P64;
           P64[Hp - 32] = _sbo8y::P64;
           I64[Hp - 24] = _sbo8w::I64;
           I64[Hp - 16] = _sbo8z::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbscm_info" {
     block_cbscm_info:
         const _cbscm;
         const 0;
         const 30;
 },
 sat_sbo8V_entry() //  [R1]
         { []
         }
     {offset
       cbscV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbsd2; else goto cbsd3;
       cbsd2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsd3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbscS_info;
           _sbo8L::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbo8L::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubsd7; else goto cbscT;
       ubsd7: // global
           call _cbscS(R1) args: 0, res: 0, upd: 0;
       cbscT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbo8V_info" {
     sat_sbo8V_info:
         const sat_sbo8V_entry;
         const 4294967297;
         const 19;
 },
 _cbscS() //  [R1]
         { []
         }
     {offset
       cbscS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbsd6; else goto cbsd5;
       cbsd6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbsd5: // global
           _sbo8P::P64 = P64[R1 + 7];
           _sbo8Q::P64 = P64[R1 + 15];
           _sbo8O::I64 = I64[R1 + 23];
           _sbo8R::I64 = I64[R1 + 31];
           _sbo8T::I64 = I64[R1 + 47];
           _sbo8U::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbo8P::P64;
           P64[Hp - 32] = _sbo8Q::P64;
           I64[Hp - 24] = _sbo8O::I64;
           I64[Hp - 16] = _sbo8R::I64;
           I64[Hp - 8] = _sbo8U::I64;
           I64[Hp] = _sbo8T::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbscS_info" {
     block_cbscS_info:
         const _cbscS;
         const 65;
         const 30;
 },
 GHC.IO.Handle.hGetPosn2_entry() //  [R2]
         { []
         }
     {offset
       cbsd8: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbsd9; else goto cbsda;
       cbsd9: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetPosn2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsda: // global
           I64[Sp - 8] = block_cbsaW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubseK; else goto cbsaX;
       ubseK: // global
           call _cbsaW(R1) args: 0, res: 0, upd: 0;
       cbsaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn2_info" {
     GHC.IO.Handle.hGetPosn2_info:
         const GHC.IO.Handle.hGetPosn2_entry;
         const 0;
         const 7700876361742;
         const 8589934597;
         const SboCL_srt+296;
 },
 _cbsaW() //  [R1]
         { []
         }
     {offset
       cbsaW: // global
           I64[Sp - 32] = block_cbsb1_info;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_pv_info;
           P64[Sp - 40] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = P64[R1 + 95];
           P64[Sp] = P64[R1 + 47];
           Sp = Sp - 48;
           call GHC.IO.Device.tell_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsaW_info" {
     block_cbsaW_info:
         const _cbsaW;
         const 0;
         const 3302829850654;
         const SboCL_srt+296;
 },
 _cbsb1() //  [R1]
         { []
         }
     {offset
       cbsb1: // global
           _sbo7G::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp - 8] = block_cbsb3_info;
           _sbo7D::P64 = R1;
           R1 = _sbo7G::P64;
           P64[Sp] = _sbo7D::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsex; else goto cbsb4;
       ubsex: // global
           call _cbsb3(R1) args: 0, res: 0, upd: 0;
       cbsb4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsb1_info" {
     block_cbsb1_info:
         const _cbsb1;
         const 4;
         const 3302829850654;
         const SboCL_srt+296;
 },
 _cbsb3() //  [R1]
         { []
         }
     {offset
       cbsb3: // global
           I64[Sp - 16] = block_cbsbV_info;
           _sbo7M::I64 = I64[R1 + 39];
           _sbo7N::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbo7N::I64;
           I64[Sp] = _sbo7M::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubsey; else goto cbsbW;
       ubsey: // global
           call _cbsbV(R1) args: 0, res: 0, upd: 0;
       cbsbW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsb3_info" {
     block_cbsb3_info:
         const _cbsb3;
         const 5;
         const 3302829850654;
         const SboCL_srt+296;
 },
 _cbsbV() //  [R1]
         { []
         }
     {offset
       cbsbV: // global
           if (R1 & 7 == 1) goto cbsdj; else goto cbsee;
       cbsdj: // global
           _sbo8c::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp + 16] = block_cbsc0_info;
           R1 = _sbo8c::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubsez; else goto cbsc1;
       ubsez: // global
           call _cbsc0(R1) args: 0, res: 0, upd: 0;
       cbsc1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsee: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubses; else goto cbsec;
       ubses: // global
           Sp = Sp + 16;
           call _cbsbb() args: 0, res: 0, upd: 0;
       cbsec: // global
           R1 = GHC.IO.Handle.Internals.flushCharBuffer2_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsbV_info" {
     block_cbsbV_info:
         const _cbsbV;
         const 199;
         const 3302829850654;
         const SboCL_srt+296;
 },
 _cbsc0() //  [R1]
         { []
         }
     {offset
       cbsc0: // global
           I64[Sp - 16] = block_cbsc5_info;
           _sbo8i::I64 = I64[R1 + 39];
           _sbo8j::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbo8j::I64;
           I64[Sp] = _sbo8i::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubseB; else goto cbsc6;
       ubseB: // global
           call _cbsc5(R1) args: 0, res: 0, upd: 0;
       cbsc6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsc0_info" {
     block_cbsc0_info:
         const _cbsc0;
         const 5;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsc5() //  [R1]
         { []
         }
     {offset
       cbsc5: // global
           if (R1 & 7 == 1) goto cbse1; else goto ubset;
       cbse1: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubseu; else goto cbsdn;
       ubseu: // global
           Sp = Sp + 16;
           goto ubseE;
       cbsdn: // global
           _sbo8o::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp + 16] = block_cbscd_info;
           R1 = _sbo8o::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubseC; else goto cbsce;
       ubseC: // global
           call _cbscd(R1) args: 0, res: 0, upd: 0;
       cbsce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubset: // global
           Sp = Sp + 16;
           goto ubseE;
       ubseE: // global
           call _cbsbb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsc5_info" {
     block_cbsc5_info:
         const _cbsc5;
         const 199;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbscd() //  [R1]
         { []
         }
     {offset
       cbscd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbsdq; else goto cbsdp;
       cbsdq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsdp: // global
           _sbo7t::P64 = P64[Sp + 24];
           _sbo8q::P64 = P64[R1 + 7];
           _sbo8r::P64 = P64[R1 + 15];
           _sbo8u::P64 = P64[_sbo7t::P64 + 8];
           I64[Hp - 16] = sat_sbo8C_info;
           P64[Hp] = _sbo8u::P64;
           call MO_WriteBarrier();
           P64[_sbo7t::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo7t::P64);
           I64[Sp - 8] = block_cbscC_info;
           R1 = _sbo8u::P64;
           P64[Sp] = _sbo8r::P64;
           P64[Sp + 16] = _sbo8q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubseF; else goto cbscD;
       ubseF: // global
           call _cbscC(R1) args: 0, res: 0, upd: 0;
       cbscD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbscd_info" {
     block_cbscd_info:
         const _cbscd;
         const 133;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbscC() //  [R1]
         { []
         }
     {offset
       cbscC: // global
           _sbo8L::I64 = I64[R1 + 39];
           if (_sbo8L::I64 != 0) goto cbsdt; else goto cbsdY;
       cbsdt: // global
           I64[Sp - 24] = block_cbscJ_info;
           _sbo8G::P64 = P64[R1 + 7];
           _sbo8H::P64 = P64[R1 + 15];
           _sbo8F::I64 = I64[R1 + 23];
           R1 = P64[Sp + 40];
           P64[Sp - 16] = _sbo8H::P64;
           I64[Sp - 8] = _sbo8L::I64;
           P64[Sp] = _sbo8G::P64;
           I64[Sp + 40] = _sbo8F::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubseG; else goto cbscK;
       ubseG: // global
           call _cbscJ(R1) args: 0, res: 0, upd: 0;
       cbscK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsdY: // global
           _sbo7q::P64 = P64[Sp + 48];
           _sbo8r::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbo7q::P64 + 8] = _sbo8r::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo7q::P64);
           Sp = Sp + 8;
           call _cbsbb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbscC_info" {
     block_cbscC_info:
         const _cbscC;
         const 6;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbscJ() //  [R1]
         { []
         }
     {offset
       cbscJ: // global
           if (R1 & 7 == 1) goto cbsdv; else goto cbsdN;
       cbsdv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbsdy; else goto cbsdx;
       cbsdy: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsdx: // global
           I64[Hp - 24] = sat_sbo8V_info;
           P64[Hp - 8] = P64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           _sbo7q::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sbo7q::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo7q::P64);
           Sp = Sp + 32;
           call _cbsbb() args: 0, res: 0, upd: 0;
       cbsdN: // global
           I64[Sp] = block_cbsdB_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubseI; else goto cbsdC;
       ubseI: // global
           call _cbsdB(R1) args: 0, res: 0, upd: 0;
       cbsdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbscJ_info" {
     block_cbscJ_info:
         const _cbscJ;
         const 8329;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsdB() //  [R1]
         { []
         }
     {offset
       cbsdB: // global
           I64[Sp - 8] = block_cbsdG_info;
           R2 = P64[Sp + 48];
           _sbo8Z::P64 = P64[R1 + 7];
           _sbo90::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbo90::P64;
           P64[Sp + 48] = _sbo8Z::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsdB_info" {
     block_cbsdB_info:
         const _cbsdB;
         const 8329;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsdG() //  [R1]
         { []
         }
     {offset
       cbsdG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbsdR; else goto cbsdQ;
       cbsdR: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsdQ: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sbo8r::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbsdJ_info;
           R5 = Hp - 47;
           R4 = _sbo8r::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsdG_info" {
     block_cbsdG_info:
         const _cbsdG;
         const 16650;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsdJ() //  [R1]
         { []
         }
     {offset
       cbsdJ: // global
           I64[Sp] = block_cbsdL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubseL; else goto cbsdT;
       ubseL: // global
           call _cbsdL(R1) args: 0, res: 0, upd: 0;
       cbsdT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsdJ_info" {
     block_cbsdJ_info:
         const _cbsdJ;
         const 645;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsdL() //  [R1]
         { []
         }
     {offset
       cbsdL: // global
           _sbo7q::P64 = P64[Sp + 40];
           _sbo9c::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbo7q::P64 + 8] = _sbo9c::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo7q::P64);
           call _cbsbb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsdL_info" {
     block_cbsdL_info:
         const _cbsdL;
         const 645;
         const 12884901918;
         const SboCL_srt+360;
 },
 _cbsbb() //  []
         { []
         }
     {offset
       cbsbb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbsdg; else goto cbsdf;
       cbsdg: // global
           HpAlloc = 32;
           I64[Sp] = block_cbsbb_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbsdf: // global
           I64[Hp - 24] = sat_sbo88_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[P64[Sp + 40] + 8];
           R1 = Hp - 24;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsbb_info" {
     block_cbsbb_info:
         const _cbsbb;
         const 645;
         const 12884901918;
         const SboCL_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.807899051 UTC

[section ""data" . GHC.IO.Handle.hTell1_closure" {
     GHC.IO.Handle.hTell1_closure:
         const GHC.IO.Handle.hTell1_info;
         const 0;
 },
 GHC.IO.Handle.hTell1_entry() //  [R2]
         { []
         }
     {offset
       cbsgX: // global
           R4 = GHC.IO.Handle.hGetPosn2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hGetPosn3_closure;
           call GHC.IO.Handle.Internals.wantSeekableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hTell1_info" {
     GHC.IO.Handle.hTell1_info:
         const GHC.IO.Handle.hTell1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SboCL_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.811586114 UTC

[section ""data" . GHC.IO.Handle.hTell_closure" {
     GHC.IO.Handle.hTell_closure:
         const GHC.IO.Handle.hTell_info;
         const 0;
 },
 GHC.IO.Handle.hTell_entry() //  [R2]
         { []
         }
     {offset
       cbsh8: // global
           R2 = R2;
           call GHC.IO.Handle.hTell1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hTell_info" {
     GHC.IO.Handle.hTell_info:
         const GHC.IO.Handle.hTell_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.814539562 UTC

[section ""cstring" . lvl12_rbnWU_bytes" {
     lvl12_rbnWU_bytes:
         I8[] [104,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.816763499 UTC

[section ""data" . lvl13_rbnWV_closure" {
     lvl13_rbnWV_closure:
         const lvl13_rbnWV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_rbnWV_entry() //  [R1]
         { []
         }
     {offset
       cbshm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbshn; else goto cbsho;
       cbshn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsho: // global
           (_cbshj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbshj::I64 == 0) goto cbshl; else goto cbshk;
       cbshl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbshk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbshj::I64;
           R2 = lvl12_rbnWU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_rbnWV_info" {
     lvl13_rbnWV_info:
         const lvl13_rbnWV_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.820804445 UTC

[section ""data" . lvl14_rbnWW_closure" {
     lvl14_rbnWW_closure:
         const lvl14_rbnWW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_rbnWW_entry() //  [R1]
         { []
         }
     {offset
       cbshC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbshD; else goto cbshE;
       cbshD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbshE: // global
           (_cbshz::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbshz::I64 == 0) goto cbshB; else goto cbshA;
       cbshB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbshA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbshz::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_rbnWW_info" {
     lvl14_rbnWW_info:
         const lvl14_rbnWW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.84229446 UTC

[section ""data" . GHC.IO.Handle.hSeek1_closure" {
     GHC.IO.Handle.hSeek1_closure:
         const GHC.IO.Handle.hSeek1_info;
         const 0;
 },
 lvl48_sbo9n_entry() //  [R1]
         { []
         }
     {offset
       cbshW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbsi0; else goto cbsi1;
       cbsi0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsi1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbshU_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_sbo9n_info" {
     lvl48_sbo9n_info:
         const lvl48_sbo9n_entry;
         const 1;
         const 16;
 },
 _cbshU() //  [R1]
         { []
         }
     {offset
       cbshU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsi4; else goto cbsi3;
       cbsi4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cbsi3: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbshU_info" {
     block_cbshU_info:
         const _cbshU;
         const 0;
         const 30;
 },
 lvl49_sbo9p_entry() //  [R1]
         { []
         }
     {offset
       cbsib: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbsif; else goto cbsig;
       cbsif: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsig: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbsi9_info;
           R3 = lvl14_rbnWW_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_sbo9p_info" {
     lvl49_sbo9p_info:
         const lvl49_sbo9p_entry;
         const 1;
         const 4294967312;
         const SboCL_srt+408;
 },
 _cbsi9() //  [R1]
         { []
         }
     {offset
       cbsi9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsij; else goto cbsii;
       cbsij: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cbsii: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsi9_info" {
     block_cbsi9_info:
         const _cbsi9;
         const 0;
         const 30;
 },
 sat_sboao_entry() //  [R1]
         { []
         }
     {offset
       cbsj8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbsjc; else goto cbsjd;
       cbsjc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsjd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbsj5_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubsjh; else goto cbsj6;
       ubsjh: // global
           call _cbsj5(R1) args: 0, res: 0, upd: 0;
       cbsj6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboao_info" {
     sat_sboao_info:
         const sat_sboao_entry;
         const 1;
         const 16;
 },
 _cbsj5() //  [R1]
         { []
         }
     {offset
       cbsj5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbsjg; else goto cbsjf;
       cbsjg: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbsjf: // global
           _sboaj::P64 = P64[R1 + 7];
           _sboak::P64 = P64[R1 + 15];
           _sboai::I64 = I64[R1 + 23];
           _sboal::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sboaj::P64;
           P64[Hp - 32] = _sboak::P64;
           I64[Hp - 24] = _sboai::I64;
           I64[Hp - 16] = _sboal::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsj5_info" {
     block_cbsj5_info:
         const _cbsj5;
         const 0;
         const 30;
 },
 sat_sboaH_entry() //  [R1]
         { []
         }
     {offset
       cbsjE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbsjL; else goto cbsjM;
       cbsjL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsjM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbsjB_info;
           _sboax::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sboax::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubsjQ; else goto cbsjC;
       ubsjQ: // global
           call _cbsjB(R1) args: 0, res: 0, upd: 0;
       cbsjC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboaH_info" {
     sat_sboaH_info:
         const sat_sboaH_entry;
         const 4294967297;
         const 19;
 },
 _cbsjB() //  [R1]
         { []
         }
     {offset
       cbsjB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbsjP; else goto cbsjO;
       cbsjP: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbsjO: // global
           _sboaB::P64 = P64[R1 + 7];
           _sboaC::P64 = P64[R1 + 15];
           _sboaA::I64 = I64[R1 + 23];
           _sboaD::I64 = I64[R1 + 31];
           _sboaF::I64 = I64[R1 + 47];
           _sboaG::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sboaB::P64;
           P64[Hp - 32] = _sboaC::P64;
           I64[Hp - 24] = _sboaA::I64;
           I64[Hp - 16] = _sboaD::I64;
           I64[Hp - 8] = _sboaG::I64;
           I64[Hp] = _sboaF::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsjB_info" {
     block_cbsjB_info:
         const _cbsjB;
         const 65;
         const 30;
 },
 sat_sbobs_entry() //  [R1]
         { []
         }
     {offset
       cbskt: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbskA; else goto cbskB;
       cbskA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbskB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cbskq_info;
           _sbo9P::P64 = P64[R1 + 24];
           _sbo9O::I64 = I64[R1 + 32];
           _sbo9R::I64 = I64[R1 + 40];
           _sbo9S::I64 = I64[R1 + 48];
           _sbo9T::I64 = I64[R1 + 56];
           R1 = P64[R1 + 16];
           I64[Sp - 56] = _sbo9O::I64;
           P64[Sp - 48] = _sbo9P::P64;
           I64[Sp - 40] = _sbo9R::I64;
           I64[Sp - 32] = _sbo9S::I64;
           I64[Sp - 24] = _sbo9T::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubskF; else goto cbskr;
       ubskF: // global
           call _cbskq(R1) args: 0, res: 0, upd: 0;
       cbskr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbobs_info" {
     sat_sbobs_info:
         const sat_sbobs_entry;
         const 17179869186;
         const 15;
 },
 _cbskq() //  [R1]
         { []
         }
     {offset
       cbskq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbskE; else goto cbskD;
       cbskE: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbskD: // global
           _sbobr::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = _sbobr::I64;
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbskq_info" {
     block_cbskq_info:
         const _cbskq;
         const 1861;
         const 30;
 },
 sat_sbobV_entry() //  [R1, R2]
         { []
         }
     {offset
       cbskG: // global
           if ((Sp + -144) < SpLim) (likely: False) goto cbskH; else goto cbskI;
       cbskH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbskI: // global
           I64[Sp - 40] = block_cbsip_info;
           _sbo9k::P64 = P64[R1 + 6];
           _sbo9l::P64 = P64[R1 + 14];
           _sbo9n::P64 = P64[R1 + 22];
           _sbo9p::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 32] = _sbo9k::P64;
           P64[Sp - 24] = _sbo9l::P64;
           P64[Sp - 16] = _sbo9n::P64;
           P64[Sp - 8] = _sbo9p::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubsnz; else goto cbsiq;
       ubsnz: // global
           call _cbsip(R1) args: 0, res: 0, upd: 0;
       cbsiq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbobV_info" {
     sat_sbobV_info:
         const sat_sbobV_entry;
         const 4;
         const 4294967304;
         const 8589934597;
         const SboCL_srt+416;
 },
 _cbsip() //  [R1]
         { []
         }
     {offset
       cbsip: // global
           I64[Sp - 64] = block_cbsiu_info;
           _sbo9t::P64 = R1;
           _sbo9u::P64 = P64[R1 + 7];
           _sbo9v::P64 = P64[R1 + 15];
           _sbo9x::P64 = P64[R1 + 31];
           _sbo9z::P64 = P64[R1 + 47];
           _sbo9B::P64 = P64[R1 + 63];
           _sbo9C::P64 = P64[R1 + 71];
           _sbo9F::P64 = P64[R1 + 95];
           R1 = P64[_sbo9C::P64 + 8];
           P64[Sp - 56] = _sbo9u::P64;
           P64[Sp - 48] = _sbo9v::P64;
           P64[Sp - 40] = _sbo9x::P64;
           P64[Sp - 32] = _sbo9z::P64;
           P64[Sp - 24] = _sbo9B::P64;
           P64[Sp - 16] = _sbo9C::P64;
           P64[Sp - 8] = _sbo9F::P64;
           P64[Sp] = _sbo9t::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubsnk; else goto cbsiv;
       ubsnk: // global
           call _cbsiu(R1) args: 0, res: 0, upd: 0;
       cbsiv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsip_info" {
     block_cbsip_info:
         const _cbsip;
         const 4;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsiu() //  [R1]
         { []
         }
     {offset
       cbsiu: // global
           I64[Sp - 40] = block_cbsiz_info;
           _sbo9P::P64 = P64[R1 + 7];
           _sbo9O::I64 = I64[R1 + 23];
           _sbo9R::I64 = I64[R1 + 31];
           _sbo9S::I64 = I64[R1 + 39];
           _sbo9T::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _sbo9P::P64;
           I64[Sp - 24] = _sbo9R::I64;
           I64[Sp - 16] = _sbo9S::I64;
           I64[Sp - 8] = _sbo9T::I64;
           I64[Sp] = _sbo9O::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubsnl; else goto cbsiA;
       ubsnl: // global
           call _cbsiz(R1) args: 0, res: 0, upd: 0;
       cbsiA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsiu_info" {
     block_cbsiu_info:
         const _cbsiu;
         const 12;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsiz() //  [R1]
         { []
         }
     {offset
       cbsiz: // global
           if (R1 & 7 == 1) goto cbsm0; else goto cbsmv;
       cbsm0: // global
           I64[Sp] = block_cbsjR_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto ubsnm; else goto cbsjS;
       ubsnm: // global
           call _cbsjR(R1) args: 0, res: 0, upd: 0;
       cbsjS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsmv: // global
           _sbobx::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 40] = block_cbsmt_info;
           R1 = _sbobx::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto ubsnn; else goto cbsmw;
       ubsnn: // global
           call _cbsmt(R1) args: 0, res: 0, upd: 0;
       cbsmw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsiz_info" {
     block_cbsiz_info:
         const _cbsiz;
         const 1937;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsjR() //  [R1]
         { []
         }
     {offset
       cbsjR: // global
           if (R1 & 7 == 2) goto cbsm6; else goto ubsng;
       cbsm6: // global
           I64[Sp] = block_cbsjX_info;
           R1 = P64[Sp + 96];
           if (R1 & 7 != 0) goto ubsnt; else goto cbsjY;
       ubsnt: // global
           call _cbsjX(R1) args: 0, res: 0, upd: 0;
       cbsjY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubsng: // global
           Sp = Sp + 48;
           call _sbo9V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsjR_info" {
     block_cbsjR_info:
         const _cbsjR;
         const 6033;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsjX() //  [R1]
         { []
         }
     {offset
       cbsjX: // global
           if (R1 & 7 == 1) goto cbsm9; else goto ubsnh;
       cbsm9: // global
           I64[Sp] = block_cbsk2_info;
           R1 = P64[Sp + 136];
           if (R1 & 7 != 0) goto ubsnv; else goto cbsk3;
       ubsnv: // global
           call _cbsk2(R1) args: 0, res: 0, upd: 0;
       cbsk3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubsnh: // global
           Sp = Sp + 48;
           call _sbo9V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsjX_info" {
     block_cbsjX_info:
         const _cbsjX;
         const 6033;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsk2() //  [R1]
         { []
         }
     {offset
       cbsk2: // global
           if (I64[R1 + 7] == 1) goto cbsmd; else goto ubsni;
       cbsmd: // global
           _sbobm::I64 = I64[Sp + 32] - I64[Sp + 24];
           I64[Sp] = block_cbskd_info;
           R2 = _sbobm::I64;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       ubsni: // global
           Sp = Sp + 48;
           call _sbo9V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsk2_info" {
     block_cbsk2_info:
         const _cbsk2;
         const 4200337;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbskd() //  [R1]
         { []
         }
     {offset
       cbskd: // global
           I64[Sp] = block_cbskh_info;
           R3 = R1;
           R2 = P64[Sp + 120];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbskd_info" {
     block_cbskd_info:
         const _cbskd;
         const 4200337;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbskh() //  [R1]
         { []
         }
     {offset
       cbskh: // global
           if (R1 == 1) goto cbsmj; else goto ubsnj;
       cbsmj: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbsmm; else goto cbsml;
       cbsmm: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbsml: // global
           I64[Hp - 56] = sat_sbobs_info;
           P64[Hp - 40] = P64[Sp + 128];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 32];
           _sbo9C::P64 = P64[Sp + 88];
           call MO_WriteBarrier();
           P64[_sbo9C::P64 + 8] = Hp - 56;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo9C::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ubsnj: // global
           Sp = Sp + 48;
           call _sbo9V() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbskh_info" {
     block_cbskh_info:
         const _cbskh;
         const 4200337;
         const 4294967326;
         const SboCL_srt+416;
 },
 _sbo9V() //  []
         { []
         }
     {offset
       sbo9V: // global
           _sbo9Y::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp - 8] = block_cbsiJ_info;
           R1 = _sbo9Y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsnF; else goto cbsiK;
       ubsnF: // global
           call _cbsiJ(R1) args: 0, res: 0, upd: 0;
       cbsiK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbsiJ() //  [R1]
         { []
         }
     {offset
       cbsiJ: // global
           I64[Sp] = block_cbsiO_info;
           _sboa4::I64 = I64[R1 + 39];
           _sboa5::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp + 88] = _sboa5::I64;
           I64[Sp + 96] = _sboa4::I64;
           if (R1 & 7 != 0) goto ubsno; else goto cbsiP;
       ubsno: // global
           call _cbsiO(R1) args: 0, res: 0, upd: 0;
       cbsiP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsiJ_info" {
     block_cbsiJ_info:
         const _cbsiJ;
         const 196748;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsiO() //  [R1]
         { []
         }
     {offset
       cbsiO: // global
           _sbo9t::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto cbslR; else goto cbslW;
       cbslR: // global
           if (I64[Sp + 96] == I64[Sp + 88]) goto cbslN; else goto cbskQ;
       cbslN: // global
           I64[Sp] = block_cbslM_info;
           R2 = _sbo9t::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
       cbskQ: // global
           _sboaa::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbsiW_info;
           R1 = _sboaa::P64;
           if (R1 & 7 != 0) goto ubsnp; else goto cbsiX;
       ubsnp: // global
           call _cbsiW(R1) args: 0, res: 0, upd: 0;
       cbsiX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbslW: // global
           I64[Sp] = block_cbslU_info;
           R2 = _sbo9t::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsiO_info" {
     block_cbsiO_info:
         const _cbsiO;
         const 196748;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbslM() //  []
         { []
         }
     {offset
       cbslM: // global
           R2 = P64[Sp + 8];
           _sbo9k::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbo9l::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbo9k::P64;
           P64[Sp + 96] = _sbo9l::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbslM_info" {
     block_cbslM_info:
         const _cbslM;
         const 212620;
         const 30;
 },
 _cbsiW() //  [R1]
         { []
         }
     {offset
       cbsiW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbskT; else goto cbskS;
       cbskT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbskS: // global
           _sbo9C::P64 = P64[Sp + 48];
           _sboac::P64 = P64[R1 + 7];
           _sboad::P64 = P64[R1 + 15];
           _sboag::P64 = P64[_sbo9C::P64 + 8];
           I64[Hp - 16] = sat_sboao_info;
           P64[Hp] = _sboag::P64;
           call MO_WriteBarrier();
           P64[_sbo9C::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo9C::P64);
           I64[Sp] = block_cbsjl_info;
           R1 = _sboag::P64;
           P64[Sp + 88] = _sboad::P64;
           P64[Sp + 96] = _sboac::P64;
           if (R1 & 7 != 0) goto ubsnq; else goto cbsjm;
       ubsnq: // global
           call _cbsjl(R1) args: 0, res: 0, upd: 0;
       cbsjm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsiW_info" {
     block_cbsiW_info:
         const _cbsiW;
         const 197772;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsjl() //  [R1]
         { []
         }
     {offset
       cbsjl: // global
           _sboax::I64 = I64[R1 + 39];
           if (_sboax::I64 != 0) goto cbskW; else goto cbslI;
       cbskW: // global
           I64[Sp] = block_cbsjs_info;
           _sboas::P64 = P64[R1 + 7];
           _sboat::P64 = P64[R1 + 15];
           _sboar::I64 = I64[R1 + 23];
           R1 = P64[Sp + 56];
           I64[Sp + 16] = _sboax::I64;
           P64[Sp + 40] = _sboat::P64;
           P64[Sp + 48] = _sboas::P64;
           I64[Sp + 56] = _sboar::I64;
           if (R1 & 7 != 0) goto ubsnr; else goto cbsjt;
       ubsnr: // global
           call _cbsjs(R1) args: 0, res: 0, upd: 0;
       cbsjt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbslI: // global
           _sbo9t::P64 = P64[Sp + 64];
           _sbo9z::P64 = P64[Sp + 32];
           _sboad::P64 = P64[Sp + 88];
           call MO_WriteBarrier();
           P64[_sbo9z::P64 + 8] = _sboad::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo9z::P64);
           I64[Sp] = block_cbslH_info;
           R2 = _sbo9t::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsjl_info" {
     block_cbsjl_info:
         const _cbsjl;
         const 3212;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsjs() //  [R1]
         { []
         }
     {offset
       cbsjs: // global
           if (R1 & 7 == 1) goto cbsl2; else goto cbslu;
       cbsl2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbsl5; else goto cbsl4;
       cbsl5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsl4: // global
           I64[Hp - 24] = sat_sboaH_info;
           P64[Hp - 8] = P64[Sp + 88];
           I64[Hp] = I64[Sp + 16];
           _sbo9t::P64 = P64[Sp + 64];
           _sbo9z::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sbo9z::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo9z::P64);
           I64[Sp] = block_cbsl0_info;
           R2 = _sbo9t::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
       cbslu: // global
           I64[Sp] = block_cbsla_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubsns; else goto cbslb;
       ubsns: // global
           call _cbsla(R1) args: 0, res: 0, upd: 0;
       cbslb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsjs_info" {
     block_cbsjs_info:
         const _cbsjs;
         const 4236;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsl0() //  []
         { []
         }
     {offset
       cbsl0: // global
           R2 = P64[Sp + 8];
           _sbo9k::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbo9l::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbo9k::P64;
           P64[Sp + 96] = _sbo9l::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsl0_info" {
     block_cbsl0_info:
         const _cbsl0;
         const 212620;
         const 30;
 },
 _cbsla() //  [R1]
         { []
         }
     {offset
       cbsla: // global
           I64[Sp - 8] = block_cbslf_info;
           R2 = P64[Sp + 96];
           _sboaO::P64 = P64[R1 + 7];
           _sboaP::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sboaP::P64;
           P64[Sp + 96] = _sboaO::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsla_info" {
     block_cbsla_info:
         const _cbsla;
         const 4236;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbslf() //  [R1]
         { []
         }
     {offset
       cbslf: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbsly; else goto cbslx;
       cbsly: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbslx: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 48];
           I64[Hp - 24] = I64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sboaP::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbsli_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 96];
           R3 = _sboaP::P64;
           R2 = P64[Sp + 104];
           Sp = Sp + 8;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbslf_info" {
     block_cbslf_info:
         const _cbslf;
         const 8461;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsli() //  [R1]
         { []
         }
     {offset
       cbsli: // global
           I64[Sp] = block_cbslk_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubsnA; else goto cbsll;
       ubsnA: // global
           call _cbslk(R1) args: 0, res: 0, upd: 0;
       cbsll: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsli_info" {
     block_cbsli_info:
         const _cbsli;
         const 203916;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbslk() //  [R1]
         { []
         }
     {offset
       cbslk: // global
           _sbo9t::P64 = P64[Sp + 64];
           _sbo9z::P64 = P64[Sp + 32];
           _sbob1::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbo9z::P64 + 8] = _sbob1::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo9z::P64);
           I64[Sp] = block_cbsls_info;
           R2 = _sbo9t::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbslk_info" {
     block_cbslk_info:
         const _cbslk;
         const 203916;
         const 4294967326;
         const SboCL_srt+416;
 },
 _cbsls() //  []
         { []
         }
     {offset
       cbsls: // global
           R2 = P64[Sp + 8];
           _sbo9k::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbo9l::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbo9k::P64;
           P64[Sp + 96] = _sbo9l::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsls_info" {
     block_cbsls_info:
         const _cbsls;
         const 212620;
         const 30;
 },
 _cbslH() //  []
         { []
         }
     {offset
       cbslH: // global
           R2 = P64[Sp + 8];
           _sbo9k::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbo9l::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbo9k::P64;
           P64[Sp + 96] = _sbo9l::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbslH_info" {
     block_cbslH_info:
         const _cbslH;
         const 212620;
         const 30;
 },
 _cbslU() //  []
         { []
         }
     {offset
       cbslU: // global
           R2 = P64[Sp + 8];
           _sbo9k::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbo9l::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbo9k::P64;
           P64[Sp + 96] = _sbo9l::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbslU_info" {
     block_cbslU_info:
         const _cbslU;
         const 212620;
         const 30;
 },
 _cbsmt() //  [R1]
         { []
         }
     {offset
       cbsmt: // global
           I64[Sp] = block_cbsmA_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubsnB; else goto cbsmC;
       ubsnB: // global
           call _cbsmA(R1) args: 0, res: 0, upd: 0;
       cbsmC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsmt_info" {
     block_cbsmt_info:
         const _cbsmt;
         const 211980;
         const 30;
 },
 _cbsmA() //  [R1]
         { []
         }
     {offset
       cbsmA: // global
           if (R1 & 7 == 1) goto ubsne; else goto cbsmN;
       ubsne: // global
           Sp = Sp + 8;
           call _cbsn1() args: 0, res: 0, upd: 0;
       cbsmN: // global
           _sbobI::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp] = block_cbsmL_info;
           R1 = _sbobI::P64;
           if (R1 & 7 != 0) goto ubsnC; else goto cbsmO;
       ubsnC: // global
           call _cbsmL(R1) args: 0, res: 0, upd: 0;
       cbsmO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsmA_info" {
     block_cbsmA_info:
         const _cbsmA;
         const 211980;
         const 30;
 },
 _cbsmL() //  [R1]
         { []
         }
     {offset
       cbsmL: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubsnf; else goto cbsmY;
       ubsnf: // global
           Sp = Sp + 8;
           call _cbsn1() args: 0, res: 0, upd: 0;
       cbsmY: // global
           I64[Sp] = block_cbsmW_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = R1;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsmL_info" {
     block_cbsmL_info:
         const _cbsmL;
         const 211980;
         const 30;
 },
 _cbsn1() //  []
         { []
         }
     {offset
       cbsn1: // global
           R2 = P64[Sp];
           _sbo9k::P64 = P64[Sp + 64];
           I64[Sp + 64] = stg_ap_pppv_info;
           _sbo9l::P64 = P64[Sp + 72];
           P64[Sp + 72] = P64[Sp + 16];
           P64[Sp + 80] = _sbo9k::P64;
           P64[Sp + 88] = _sbo9l::P64;
           Sp = Sp + 64;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 _cbsmW() //  [R1]
         { []
         }
     {offset
       cbsmW: // global
           _sbo9k::P64 = P64[Sp + 72];
           _sbo9l::P64 = P64[Sp + 80];
           _sbo9u::P64 = P64[Sp + 8];
           _sbo9x::P64 = P64[Sp + 24];
           _sbo9z::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sbo9z::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbo9z::P64);
           R2 = _sbo9u::P64;
           I64[Sp + 72] = stg_ap_pppv_info;
           P64[Sp + 80] = _sbo9x::P64;
           P64[Sp + 88] = _sbo9k::P64;
           P64[Sp + 96] = _sbo9l::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsmW_info" {
     block_cbsmW_info:
         const _cbsmW;
         const 212108;
         const 30;
 },
 GHC.IO.Handle.hSeek1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbsnG: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbsnK; else goto cbsnJ;
       cbsnK: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSeek1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbsnJ: // global
           I64[Hp - 80] = lvl48_sbo9n_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl49_sbo9p_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sbobV_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = Hp - 30;
           R3 = R2;
           R2 = lvl13_rbnWV_closure;
           call GHC.IO.Handle.Internals.wantSeekableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSeek1_info" {
     GHC.IO.Handle.hSeek1_info:
         const GHC.IO.Handle.hSeek1_entry;
         const 0;
         const 519691042830;
         const 17179869207;
         const SboCL_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.910357925 UTC

[section ""data" . GHC.IO.Handle.hSeek_closure" {
     GHC.IO.Handle.hSeek_closure:
         const GHC.IO.Handle.hSeek_info;
         const 0;
 },
 GHC.IO.Handle.hSeek_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbsr9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSeek1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSeek_info" {
     GHC.IO.Handle.hSeek_info:
         const GHC.IO.Handle.hSeek_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SboCL_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.914659799 UTC

[section ""data" . GHC.IO.Handle.hSetPosn1_closure" {
     GHC.IO.Handle.hSetPosn1_closure:
         const GHC.IO.Handle.hSetPosn1_info;
         const 0;
 },
 GHC.IO.Handle.hSetPosn1_entry() //  [R2]
         { []
         }
     {offset
       cbsrn: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbsro; else goto cbsrp;
       cbsro: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hSetPosn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsrp: // global
           I64[Sp - 8] = block_cbsrk_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsrt; else goto cbsrl;
       ubsrt: // global
           call _cbsrk(R1) args: 0, res: 0, upd: 0;
       cbsrl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetPosn1_info" {
     GHC.IO.Handle.hSetPosn1_info:
         const GHC.IO.Handle.hSetPosn1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const SboCL_srt+424;
 },
 _cbsrk() //  [R1]
         { []
         }
     {offset
       cbsrk: // global
           R4 = P64[R1 + 15];
           R3 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.hSeek1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsrk_info" {
     block_cbsrk_info:
         const _cbsrk;
         const 0;
         const 4294967326;
         const SboCL_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.919862574 UTC

[section ""data" . GHC.IO.Handle.hSetPosn_closure" {
     GHC.IO.Handle.hSetPosn_closure:
         const GHC.IO.Handle.hSetPosn_info;
         const 0;
 },
 GHC.IO.Handle.hSetPosn_entry() //  [R2]
         { []
         }
     {offset
       cbsrH: // global
           R2 = R2;
           call GHC.IO.Handle.hSetPosn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetPosn_info" {
     GHC.IO.Handle.hSetPosn_info:
         const GHC.IO.Handle.hSetPosn_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.922793458 UTC

[section ""cstring" . GHC.IO.Handle.hGetEncoding4_bytes" {
     GHC.IO.Handle.hGetEncoding4_bytes:
         I8[] [104,71,101,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.924843569 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding3_closure" {
     GHC.IO.Handle.hGetEncoding3_closure:
         const GHC.IO.Handle.hGetEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetEncoding3_entry() //  [R1]
         { []
         }
     {offset
       cbsrV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsrW; else goto cbsrX;
       cbsrW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsrX: // global
           (_cbsrS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsrS::I64 == 0) goto cbsrU; else goto cbsrT;
       cbsrU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsrT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsrS::I64;
           R2 = GHC.IO.Handle.hGetEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding3_info" {
     GHC.IO.Handle.hGetEncoding3_info:
         const GHC.IO.Handle.hGetEncoding3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.929204053 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding2_closure" {
     GHC.IO.Handle.hGetEncoding2_closure:
         const GHC.IO.Handle.hGetEncoding2_info;
 },
 GHC.IO.Handle.hGetEncoding2_entry() //  [R2]
         { []
         }
     {offset
       cbssc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbssg; else goto cbssh;
       cbssg: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbssh: // global
           I64[Sp - 8] = block_cbss9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubssl; else goto cbssa;
       ubssl: // global
           call _cbss9(R1) args: 0, res: 0, upd: 0;
       cbssa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding2_info" {
     GHC.IO.Handle.hGetEncoding2_info:
         const GHC.IO.Handle.hGetEncoding2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbss9() //  [R1]
         { []
         }
     {offset
       cbss9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbssk; else goto cbssj;
       cbssk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbssj: // global
           _sbocg::P64 = P64[R1 + 103];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = _sbocg::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbss9_info" {
     block_cbss9_info:
         const _cbss9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.938088145 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding1_closure" {
     GHC.IO.Handle.hGetEncoding1_closure:
         const GHC.IO.Handle.hGetEncoding1_info;
         const 0;
 },
 io_sboct_entry() //  [R1]
         { []
         }
     {offset
       cbssR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbssV; else goto cbssW;
       cbssV: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbssW: // global
           I64[Sp - 16] = block_cbssM_info;
           _sbocp::P64 = P64[R1 + 15];
           R5 = _sbocp::P64;
           R4 = GHC.IO.Handle.hGetEncoding2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEncoding3_closure;
           P64[Sp - 8] = _sbocp::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sboct_info" {
     io_sboct_info:
         const io_sboct_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SboCL_srt+448;
 },
 _cbssM() //  [R1]
         { []
         }
     {offset
       cbssM: // global
           I64[Sp] = block_cbssO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubst1; else goto cbssP;
       ubst1: // global
           call _cbssO(R1) args: 0, res: 0, upd: 0;
       cbssP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbssM_info" {
     block_cbssM_info:
         const _cbssM;
         const 1;
         const 30;
 },
 _cbssO() //  [R1]
         { []
         }
     {offset
       cbssO: // global
           I64[Sp] = block_cbssU_info;
           R2 = P64[R1 + 7];
           _sbocA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbocA::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbssO_info" {
     block_cbssO_info:
         const _cbssO;
         const 1;
         const 30;
 },
 _cbssU() //  []
         { []
         }
     {offset
       cbssU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbssU_info" {
     block_cbssU_info:
         const _cbssU;
         const 1;
         const 30;
 },
 io_sbocJ_entry() //  [R1]
         { []
         }
     {offset
       cbstg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbstk; else goto cbstl;
       cbstk: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbstl: // global
           I64[Sp - 16] = block_cbstb_info;
           _sbocE::P64 = P64[R1 + 15];
           R5 = _sbocE::P64;
           R4 = GHC.IO.Handle.hGetEncoding2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEncoding3_closure;
           P64[Sp - 8] = _sbocE::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbocJ_info" {
     io_sbocJ_info:
         const io_sbocJ_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SboCL_srt+448;
 },
 _cbstb() //  [R1]
         { []
         }
     {offset
       cbstb: // global
           I64[Sp] = block_cbstd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubstq; else goto cbste;
       ubstq: // global
           call _cbstd(R1) args: 0, res: 0, upd: 0;
       cbste: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbstb_info" {
     block_cbstb_info:
         const _cbstb;
         const 1;
         const 30;
 },
 _cbstd() //  [R1]
         { []
         }
     {offset
       cbstd: // global
           I64[Sp] = block_cbstj_info;
           R2 = P64[R1 + 7];
           _sbocQ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbocQ::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbstd_info" {
     block_cbstd_info:
         const _cbstd;
         const 1;
         const 30;
 },
 _cbstj() //  []
         { []
         }
     {offset
       cbstj: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbstj_info" {
     block_cbstj_info:
         const _cbstj;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hGetEncoding1_entry() //  [R2]
         { []
         }
     {offset
       cbstv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbstw; else goto cbstx;
       cbstw: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbstx: // global
           I64[Sp - 8] = block_cbssA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubstO; else goto cbssB;
       ubstO: // global
           call _cbssA(R1) args: 0, res: 0, upd: 0;
       cbssB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding1_info" {
     GHC.IO.Handle.hGetEncoding1_info:
         const GHC.IO.Handle.hGetEncoding1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SboCL_srt+448;
 },
 _cbssA() //  [R1]
         { []
         }
     {offset
       cbssA: // global
           if (R1 & 7 == 1) goto cbsts; else goto cbstt;
       cbsts: // global
           I64[Sp - 16] = block_cbssF_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbstt: // global
           I64[Sp - 16] = block_cbst4_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbssA_info" {
     block_cbssA_info:
         const _cbssA;
         const 0;
         const 12884901918;
         const SboCL_srt+448;
 },
 _cbssF() //  [R1]
         { []
         }
     {offset
       cbssF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbstB; else goto cbstA;
       cbstB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbstA: // global
           I64[Hp - 16] = io_sboct_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbssH::P64 = Hp - 15;
           if (R1 == 0) goto cbstF; else goto cbstE;
       cbstF: // global
           R1 = _cbssH::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbstE: // global
           R1 = _cbssH::P64;
           Sp = Sp + 24;
           call io_sboct_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbssF_info" {
     block_cbssF_info:
         const _cbssF;
         const 2;
         const 12884901918;
         const SboCL_srt+448;
 },
 _cbst4() //  [R1]
         { []
         }
     {offset
       cbst4: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbstJ; else goto cbstI;
       cbstJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbstI: // global
           I64[Hp - 16] = io_sbocJ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbst6::P64 = Hp - 15;
           if (R1 == 0) goto cbstN; else goto cbstM;
       cbstN: // global
           R1 = _cbst6::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbstM: // global
           R1 = _cbst6::P64;
           Sp = Sp + 24;
           call io_sbocJ_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbst4_info" {
     block_cbst4_info:
         const _cbst4;
         const 2;
         const 12884901918;
         const SboCL_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.959030646 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding_closure" {
     GHC.IO.Handle.hGetEncoding_closure:
         const GHC.IO.Handle.hGetEncoding_info;
         const 0;
 },
 GHC.IO.Handle.hGetEncoding_entry() //  [R2]
         { []
         }
     {offset
       cbsuK: // global
           R2 = R2;
           call GHC.IO.Handle.hGetEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding_info" {
     GHC.IO.Handle.hGetEncoding_info:
         const GHC.IO.Handle.hGetEncoding_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.962215505 UTC

[section ""cstring" . lvl15_rbnWX_bytes" {
     lvl15_rbnWX_bytes:
         I8[] [104,83,101,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.964336142 UTC

[section ""data" . lvl16_rbnWY_closure" {
     lvl16_rbnWY_closure:
         const lvl16_rbnWY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rbnWY_entry() //  [R1]
         { []
         }
     {offset
       cbsuY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsuZ; else goto cbsv0;
       cbsuZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsv0: // global
           (_cbsuV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsuV::I64 == 0) goto cbsuX; else goto cbsuW;
       cbsuX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsuW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsuV::I64;
           R2 = lvl15_rbnWX_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rbnWY_info" {
     lvl16_rbnWY_info:
         const lvl16_rbnWY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.967674912 UTC

[section ""cstring" . lvl17_rbnWZ_bytes" {
     lvl17_rbnWZ_bytes:
         I8[] [108,97,115,116,95,100,101,99,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.970060684 UTC

[section ""data" . lvl18_rbnX0_closure" {
     lvl18_rbnX0_closure:
         const lvl18_rbnX0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_rbnX0_entry() //  [R1]
         { []
         }
     {offset
       cbsvh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbsvi; else goto cbsvj;
       cbsvi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsvj: // global
           (_cbsvc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsvc::I64 == 0) goto cbsve; else goto cbsvd;
       cbsve: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsvd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsvc::I64;
           I64[Sp - 24] = block_cbsvf_info;
           R2 = lvl17_rbnWZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_rbnX0_info" {
     lvl18_rbnX0_info:
         const lvl18_rbnX0_entry;
         const 0;
         const 4294967317;
         const SboCL_srt+288;
 },
 _cbsvf() //  [R1]
         { []
         }
     {offset
       cbsvf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbsvf_info" {
     block_cbsvf_info:
         const _cbsvf;
         const 0;
         const 4294967326;
         const SboCL_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:17.993368001 UTC

[section ""data" . GHC.IO.Handle.hSetEncoding1_closure" {
     GHC.IO.Handle.hSetEncoding1_closure:
         const GHC.IO.Handle.hSetEncoding1_info;
         const 0;
 },
 sat_sbofq_entry() //  [R1]
         { []
         }
     {offset
       cbswn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbswr; else goto cbsws;
       cbswr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsws: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbswk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubsww; else goto cbswl;
       ubsww: // global
           call _cbswk(R1) args: 0, res: 0, upd: 0;
       cbswl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbofq_info" {
     sat_sbofq_info:
         const sat_sbofq_entry;
         const 1;
         const 16;
 },
 _cbswk() //  [R1]
         { []
         }
     {offset
       cbswk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbswv; else goto cbswu;
       cbswv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbswu: // global
           _sbofl::P64 = P64[R1 + 7];
           _sbofm::P64 = P64[R1 + 15];
           _sbofk::I64 = I64[R1 + 23];
           _sbofn::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbofl::P64;
           P64[Hp - 32] = _sbofm::P64;
           I64[Hp - 24] = _sbofk::I64;
           I64[Hp - 16] = _sbofn::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbswk_info" {
     block_cbswk_info:
         const _cbswk;
         const 0;
         const 30;
 },
 sat_sbofJ_entry() //  [R1]
         { []
         }
     {offset
       cbswT: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbsx0; else goto cbsx1;
       cbsx0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsx1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbswQ_info;
           _sbofz::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbofz::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubsx5; else goto cbswR;
       ubsx5: // global
           call _cbswQ(R1) args: 0, res: 0, upd: 0;
       cbswR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbofJ_info" {
     sat_sbofJ_info:
         const sat_sbofJ_entry;
         const 4294967297;
         const 19;
 },
 _cbswQ() //  [R1]
         { []
         }
     {offset
       cbswQ: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbsx4; else goto cbsx3;
       cbsx4: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbsx3: // global
           _sbofD::P64 = P64[R1 + 7];
           _sbofE::P64 = P64[R1 + 15];
           _sbofC::I64 = I64[R1 + 23];
           _sbofF::I64 = I64[R1 + 31];
           _sbofH::I64 = I64[R1 + 47];
           _sbofI::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbofD::P64;
           P64[Hp - 32] = _sbofE::P64;
           I64[Hp - 24] = _sbofC::I64;
           I64[Hp - 16] = _sbofF::I64;
           I64[Hp - 8] = _sbofI::I64;
           I64[Hp] = _sbofH::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbswQ_info" {
     block_cbswQ_info:
         const _cbswQ;
         const 65;
         const 30;
 },
 sat_sbog6_entry() //  [R1, R2]
         { []
         }
     {offset
       cbsx6: // global
           if ((Sp + -192) < SpLim) (likely: False) goto cbsx7; else goto cbsx8;
       cbsx7: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsx8: // global
           I64[Sp - 24] = block_cbsvH_info;
           _sbocV::P64 = P64[R1 + 6];
           _sbocX::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbocV::P64;
           P64[Sp - 8] = _sbocX::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubsBD; else goto cbsvI;
       ubsBD: // global
           call _cbsvH(R1) args: 0, res: 0, upd: 0;
       cbsvI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbog6_info" {
     sat_sbog6_info:
         const sat_sbog6_entry;
         const 2;
         const 18014402804449291;
         const 8589934597;
         const SboCL_srt+296;
 },
 _cbsvH() //  [R1]
         { []
         }
     {offset
       cbsvH: // global
           I64[Sp - 120] = block_cbsvM_info;
           _sbod1::P64 = P64[R1 + 7];
           _sbod2::P64 = P64[R1 + 15];
           _sbod3::P64 = P64[R1 + 23];
           _sbod4::P64 = P64[R1 + 31];
           _sbod5::P64 = P64[R1 + 39];
           _sbod6::P64 = P64[R1 + 47];
           _sbod7::P64 = P64[R1 + 55];
           _sbod8::P64 = P64[R1 + 63];
           _sbod9::P64 = P64[R1 + 71];
           _sboda::P64 = P64[R1 + 79];
           _sbodb::P64 = P64[R1 + 87];
           _sbodc::P64 = P64[R1 + 95];
           _sbode::P64 = P64[R1 + 111];
           _sbodf::P64 = P64[R1 + 119];
           _sbodg::P64 = P64[R1 + 127];
           R1 = P64[_sbod9::P64 + 8];
           P64[Sp - 112] = _sbod2::P64;
           P64[Sp - 104] = _sbod3::P64;
           P64[Sp - 96] = _sbod4::P64;
           P64[Sp - 88] = _sbod5::P64;
           P64[Sp - 80] = _sbod6::P64;
           P64[Sp - 72] = _sbod7::P64;
           P64[Sp - 64] = _sbod8::P64;
           P64[Sp - 56] = _sbod9::P64;
           P64[Sp - 48] = _sboda::P64;
           P64[Sp - 40] = _sbodb::P64;
           P64[Sp - 32] = _sbodc::P64;
           P64[Sp - 24] = _sbode::P64;
           P64[Sp - 16] = _sbodf::P64;
           P64[Sp - 8] = _sbodg::P64;
           P64[Sp] = _sbod1::P64;
           Sp = Sp - 120;
           if (R1 & 7 != 0) goto ubsBq; else goto cbsvN;
       ubsBq: // global
           call _cbsvM(R1) args: 0, res: 0, upd: 0;
       cbsvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsvH_info" {
     block_cbsvH_info:
         const _cbsvH;
         const 2;
         const 18014402804449310;
         const SboCL_srt+296;
 },
 _cbsvM() //  [R1]
         { []
         }
     {offset
       cbsvM: // global
           I64[Sp - 16] = block_cbsvT_info;
           _sbodp::I64 = I64[R1 + 39];
           _sbodq::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbodq::I64;
           I64[Sp] = _sbodp::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubsBr; else goto cbsvU;
       ubsBr: // global
           call _cbsvT(R1) args: 0, res: 0, upd: 0;
       cbsvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsvM_info" {
     block_cbsvM_info:
         const _cbsvM;
         const 17;
         const 18014402804449310;
         const SboCL_srt+296;
 },
 _cbsvT() //  [R1]
         { []
         }
     {offset
       cbsvT: // global
           if (R1 & 7 == 1) goto cbszU; else goto cbsAP;
       cbszU: // global
           _sbof0::P64 = P64[P64[Sp + 80] + 8];
           I64[Sp + 16] = block_cbsvY_info;
           R1 = _sbof0::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubsBs; else goto cbsvZ;
       ubsBs: // global
           call _cbsvY(R1) args: 0, res: 0, upd: 0;
       cbsvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsAP: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubsBd; else goto cbsAN;
       ubsBd: // global
           Sp = Sp + 24;
           call _sbodr() args: 0, res: 0, upd: 0;
       cbsAN: // global
           R1 = GHC.IO.Handle.Internals.flushCharBuffer2_closure;
           Sp = Sp + 160;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsvT_info" {
     block_cbsvT_info:
         const _cbsvT;
         const 211;
         const 18014402804449310;
         const SboCL_srt+296;
 },
 _cbsvY() //  [R1]
         { []
         }
     {offset
       cbsvY: // global
           I64[Sp - 16] = block_cbsw3_info;
           _sbof6::I64 = I64[R1 + 39];
           _sbof7::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbof7::I64;
           I64[Sp] = _sbof6::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubsBu; else goto cbsw4;
       ubsBu: // global
           call _cbsw3(R1) args: 0, res: 0, upd: 0;
       cbsw4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsvY_info" {
     block_cbsvY_info:
         const _cbsvY;
         const 17;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsw3() //  [R1]
         { []
         }
     {offset
       cbsw3: // global
           if (R1 & 7 == 1) goto cbsAC; else goto ubsBe;
       cbsAC: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubsBf; else goto cbszY;
       ubsBf: // global
           Sp = Sp + 24;
           goto ubsBx;
       cbszY: // global
           _sbofc::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 16] = block_cbswb_info;
           R1 = _sbofc::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubsBv; else goto cbswc;
       ubsBv: // global
           call _cbswb(R1) args: 0, res: 0, upd: 0;
       cbswc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubsBe: // global
           Sp = Sp + 24;
           goto ubsBx;
       ubsBx: // global
           call _sbodr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsw3_info" {
     block_cbsw3_info:
         const _cbsw3;
         const 211;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbswb() //  [R1]
         { []
         }
     {offset
       cbswb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbsA1; else goto cbsA0;
       cbsA1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsA0: // global
           _sbod9::P64 = P64[Sp + 64];
           _sbofe::P64 = P64[R1 + 7];
           _sboff::P64 = P64[R1 + 15];
           _sbofi::P64 = P64[_sbod9::P64 + 8];
           I64[Hp - 16] = sat_sbofq_info;
           P64[Hp] = _sbofi::P64;
           call MO_WriteBarrier();
           P64[_sbod9::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbod9::P64);
           I64[Sp - 8] = block_cbswA_info;
           R1 = _sbofi::P64;
           P64[Sp] = _sboff::P64;
           P64[Sp + 56] = _sbofe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsBy; else goto cbswB;
       ubsBy: // global
           call _cbswA(R1) args: 0, res: 0, upd: 0;
       cbswB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbswb_info" {
     block_cbswb_info:
         const _cbswb;
         const 4113;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbswA() //  [R1]
         { []
         }
     {offset
       cbswA: // global
           _sbofz::I64 = I64[R1 + 39];
           if (_sbofz::I64 != 0) goto cbsA4; else goto cbsAz;
       cbsA4: // global
           I64[Sp - 32] = block_cbswH_info;
           _sbofu::P64 = P64[R1 + 7];
           _sbofv::P64 = P64[R1 + 15];
           _sboft::I64 = I64[R1 + 23];
           R1 = P64[Sp + 96];
           P64[Sp - 24] = _sbofu::P64;
           P64[Sp - 16] = _sbofv::P64;
           I64[Sp - 8] = _sbofz::I64;
           I64[Sp] = _sboft::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubsBz; else goto cbswI;
       ubsBz: // global
           call _cbswH(R1) args: 0, res: 0, upd: 0;
       cbswI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsAz: // global
           _sbod6::P64 = P64[Sp + 48];
           _sboff::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbod6::P64 + 8] = _sboff::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbod6::P64);
           Sp = Sp + 16;
           call _sbodr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbswA_info" {
     block_cbswA_info:
         const _cbswA;
         const 18;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbswH() //  [R1]
         { []
         }
     {offset
       cbswH: // global
           if (R1 & 7 == 1) goto cbsA6; else goto cbsAo;
       cbsA6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbsA9; else goto cbsA8;
       cbsA9: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsA8: // global
           I64[Hp - 24] = sat_sbofJ_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 24];
           _sbod6::P64 = P64[Sp + 80];
           call MO_WriteBarrier();
           P64[_sbod6::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbod6::P64);
           Sp = Sp + 48;
           call _sbodr() args: 0, res: 0, upd: 0;
       cbsAo: // global
           I64[Sp] = block_cbsAc_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubsBB; else goto cbsAd;
       ubsBB: // global
           call _cbsAc(R1) args: 0, res: 0, upd: 0;
       cbsAd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbswH_info" {
     block_cbswH_info:
         const _cbswH;
         const 790;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsAc() //  [R1]
         { []
         }
     {offset
       cbsAc: // global
           I64[Sp - 8] = block_cbsAh_info;
           R2 = P64[Sp + 96];
           _sbofN::P64 = P64[R1 + 7];
           _sbofO::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbofO::P64;
           P64[Sp + 96] = _sbofN::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsAc_info" {
     block_cbsAc_info:
         const _cbsAc;
         const 790;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsAh() //  [R1]
         { []
         }
     {offset
       cbsAh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbsAs; else goto cbsAr;
       cbsAs: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsAr: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sboff::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_cbsAk_info;
           R5 = Hp - 47;
           R4 = _sboff::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 104];
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsAh_info" {
     block_cbsAh_info:
         const _cbsAh;
         const 1559;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsAk() //  [R1]
         { []
         }
     {offset
       cbsAk: // global
           I64[Sp] = block_cbsAm_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubsBR; else goto cbsAu;
       ubsBR: // global
           call _cbsAm(R1) args: 0, res: 0, upd: 0;
       cbsAu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsAk_info" {
     block_cbsAk_info:
         const _cbsAk;
         const 4113;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsAm() //  [R1]
         { []
         }
     {offset
       cbsAm: // global
           _sbod6::P64 = P64[Sp + 40];
           _sbog0::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbod6::P64 + 8] = _sbog0::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbod6::P64);
           Sp = Sp + 8;
           call _sbodr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsAm_info" {
     block_cbsAm_info:
         const _cbsAm;
         const 4113;
         const 4294967326;
         const SboCL_srt+472;
 },
 _sbodr() //  []
         { []
         }
     {offset
       sbodr: // global
           I64[Sp - 8] = block_cbsxg_info;
           R1 = P64[Sp + 80];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsBT; else goto cbsyS;
       ubsBT: // global
           call _cbsxg(R1) args: 0, res: 0, upd: 0;
       cbsyS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbsxg() //  [R1]
         { []
         }
     {offset
       cbsxg: // global
           if (R1 & 7 == 1) goto cbsyZ; else goto cbszo;
       cbsyZ: // global
           I64[Sp] = block_cbsyW_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubsBE; else goto cbsz0;
       ubsBE: // global
           call _cbsyW(R1) args: 0, res: 0, upd: 0;
       cbsz0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbszo: // global
           I64[Sp] = block_cbszm_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubsBF; else goto cbszp;
       ubsBF: // global
           call _cbszm(R1) args: 0, res: 0, upd: 0;
       cbszp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsxg_info" {
     block_cbsxg_info:
         const _cbsxg;
         const 69649;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsyW() //  [R1]
         { []
         }
     {offset
       cbsyW: // global
           if (R1 & 7 == 1) goto ubsBl; else goto cbszg;
       ubsBl: // global
           Sp = Sp + 8;
           call _sbodt() args: 0, res: 0, upd: 0;
       cbszg: // global
           I64[Sp] = block_cbsz9_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubsBK; else goto cbsza;
       ubsBK: // global
           call _cbsz9(R1) args: 0, res: 0, upd: 0;
       cbsza: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsyW_info" {
     block_cbsyW_info:
         const _cbsyW;
         const 102417;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsz9() //  [R1]
         { []
         }
     {offset
       cbsz9: // global
           I64[Sp] = block_cbsze_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsz9_info" {
     block_cbsz9_info:
         const _cbsz9;
         const 102417;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsze() //  []
         { []
         }
     {offset
       cbsze: // global
           Sp = Sp + 8;
           call _sbodt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsze_info" {
     block_cbsze_info:
         const _cbsze;
         const 102417;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbszm() //  [R1]
         { []
         }
     {offset
       cbszm: // global
           I64[Sp] = block_cbszt_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbszm_info" {
     block_cbszm_info:
         const _cbszm;
         const 69649;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbszt() //  []
         { []
         }
     {offset
       cbszt: // global
           I64[Sp] = block_cbszv_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubsBN; else goto cbszy;
       ubsBN: // global
           call _cbszv(R1) args: 0, res: 0, upd: 0;
       cbszy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbszt_info" {
     block_cbszt_info:
         const _cbszt;
         const 69649;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbszv() //  [R1]
         { []
         }
     {offset
       cbszv: // global
           if (R1 & 7 == 1) goto ubsBj; else goto cbszO;
       ubsBj: // global
           Sp = Sp + 8;
           call _sbodt() args: 0, res: 0, upd: 0;
       cbszO: // global
           I64[Sp] = block_cbszH_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubsBO; else goto cbszI;
       ubsBO: // global
           call _cbszH(R1) args: 0, res: 0, upd: 0;
       cbszI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbszv_info" {
     block_cbszv_info:
         const _cbszv;
         const 102417;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbszH() //  [R1]
         { []
         }
     {offset
       cbszH: // global
           I64[Sp] = block_cbszM_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbszH_info" {
     block_cbszH_info:
         const _cbszH;
         const 102417;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbszM() //  []
         { []
         }
     {offset
       cbszM: // global
           Sp = Sp + 8;
           call _sbodt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbszM_info" {
     block_cbszM_info:
         const _cbszM;
         const 102417;
         const 4294967326;
         const SboCL_srt+472;
 },
 _sbodt() //  []
         { []
         }
     {offset
       sbodt: // global
           I64[Sp - 8] = block_cbsxl_info;
           R1 = P64[Sp + 120];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsBU; else goto cbsxn;
       ubsBU: // global
           call _cbsxl(R1) args: 0, res: 0, upd: 0;
       cbsxn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbsxl() //  [R1]
         { []
         }
     {offset
       cbsxl: // global
           I64[Sp] = block_cbsxt_info;
           _sbodx::P64 = P64[R1 + 15];
           _sbody::P64 = P64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp + 88] = _sbody::P64;
           P64[Sp + 128] = _sbodx::P64;
           if (R1 & 7 != 0) goto ubsBG; else goto cbsyt;
       ubsBG: // global
           call _cbsxt(R1) args: 0, res: 0, upd: 0;
       cbsyt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsxl_info" {
     block_cbsxl_info:
         const _cbsxl;
         const 2199569;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsxt() //  [R1]
         { []
         }
     {offset
       cbsxt: // global
           _sbodx::P64 = P64[Sp + 128];
           _cbsB6::P64 = R1 & 7;
           if (_cbsB6::P64 != 3) goto ubsBa; else goto cbsyE;
       ubsBa: // global
           if (_cbsB6::P64 != 6) goto cbsyz; else goto cbsyN;
       cbsyz: // global
           P64[Sp + 128] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _sbodz() args: 0, res: 0, upd: 0;
       cbsyN: // global
           I64[Sp] = block_cbsyL_info;
           R1 = _sbodx::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbsyE: // global
           I64[Sp] = block_cbsyC_info;
           R1 = _sbodx::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsxt_info" {
     block_cbsxt_info:
         const _cbsxt;
         const 36881;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsyL() //  [R1]
         { []
         }
     {offset
       cbsyL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsyR; else goto cbsyQ;
       cbsyR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsyQ: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 128] = Hp - 6;
           Sp = Sp + 8;
           call _sbodz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsyL_info" {
     block_cbsyL_info:
         const _cbsyL;
         const 2134033;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsyC() //  [R1]
         { []
         }
     {offset
       cbsyC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsyI; else goto cbsyH;
       cbsyI: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsyH: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 128] = Hp - 6;
           Sp = Sp + 8;
           call _sbodz() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsyC_info" {
     block_cbsyC_info:
         const _cbsyC;
         const 2134033;
         const 4294967326;
         const SboCL_srt+472;
 },
 _sbodz() //  []
         { []
         }
     {offset
       sbodz: // global
           I64[Sp - 8] = block_cbsxy_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsBV; else goto cbsxA;
       ubsBV: // global
           call _cbsxy(R1) args: 0, res: 0, upd: 0;
       cbsxA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbsxy() //  [R1]
         { []
         }
     {offset
       cbsxy: // global
           _sbody::P64 = P64[Sp + 88];
           _cbsB9::P64 = R1 & 7;
           if (_cbsB9::P64 < 5) goto ubsBb; else goto ubsBc;
       ubsBb: // global
           if (_cbsB9::P64 < 4) goto cbsxJ; else goto cbsxW;
       cbsxJ: // global
           I64[Sp] = block_cbsxE_info;
           _sbodC::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sbodC::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbsxW: // global
           I64[Sp] = block_cbsxP_info;
           R1 = _sbody::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ubsBc: // global
           if (_cbsB9::P64 < 6) goto cbsya; else goto cbsyo;
       cbsya: // global
           I64[Sp] = block_cbsy3_info;
           R1 = _sbody::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbsyo: // global
           I64[Sp] = block_cbsyh_info;
           R1 = _sbody::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsxy_info" {
     block_cbsxy_info:
         const _cbsxy;
         const 37393;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsxE() //  [R1]
         { []
         }
     {offset
       cbsxE: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbsxM; else goto cbsxL;
       cbsxM: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsxL: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 88];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsxE_info" {
     block_cbsxE_info:
         const _cbsxE;
         const 37393;
         const 30;
 },
 _cbsxP() //  [R1]
         { []
         }
     {offset
       cbsxP: // global
           I64[Sp] = block_cbsxR_info;
           _sbodM::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sbodM::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsxP_info" {
     block_cbsxP_info:
         const _cbsxP;
         const 102929;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsxR() //  [R1]
         { []
         }
     {offset
       cbsxR: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbsy0; else goto cbsxZ;
       cbsy0: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsxZ: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 88];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsxR_info" {
     block_cbsxR_info:
         const _cbsxR;
         const 37393;
         const 30;
 },
 _cbsy3() //  [R1]
         { []
         }
     {offset
       cbsy3: // global
           I64[Sp] = block_cbsy5_info;
           _sbodX::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sbodX::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsy3_info" {
     block_cbsy3_info:
         const _cbsy3;
         const 102929;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsy5() //  [R1]
         { []
         }
     {offset
       cbsy5: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbsye; else goto cbsyd;
       cbsye: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsyd: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 88];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.AppendHandle_closure+5;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsy5_info" {
     block_cbsy5_info:
         const _cbsy5;
         const 37393;
         const 30;
 },
 _cbsyh() //  [R1]
         { []
         }
     {offset
       cbsyh: // global
           I64[Sp] = block_cbsyj_info;
           _sboe8::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sboe8::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsyh_info" {
     block_cbsyh_info:
         const _cbsyh;
         const 102929;
         const 4294967326;
         const SboCL_srt+472;
 },
 _cbsyj() //  [R1]
         { []
         }
     {offset
       cbsyj: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbsys; else goto cbsyr;
       cbsys: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsyr: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 88];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsyj_info" {
     block_cbsyj_info:
         const _cbsyj;
         const 37393;
         const 30;
 },
 GHC.IO.Handle.hSetEncoding1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbsBW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbsC0; else goto cbsBZ;
       cbsC0: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbsBZ: // global
           I64[Hp - 32] = GHC.Base.Just_con_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbog6_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R4 = Hp - 14;
           R3 = R2;
           R2 = lvl16_rbnWY_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEncoding1_info" {
     GHC.IO.Handle.hSetEncoding1_info:
         const GHC.IO.Handle.hSetEncoding1_entry;
         const 0;
         const 4035225407857885198;
         const 12884901903;
         const SboCL_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.062594869 UTC

[section ""data" . GHC.IO.Handle.hSetEncoding_closure" {
     GHC.IO.Handle.hSetEncoding_closure:
         const GHC.IO.Handle.hSetEncoding_info;
         const 0;
 },
 GHC.IO.Handle.hSetEncoding_entry() //  [R2, R3]
         { []
         }
     {offset
       cbsG4: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetEncoding1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEncoding_info" {
     GHC.IO.Handle.hSetEncoding_info:
         const GHC.IO.Handle.hSetEncoding_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SboCL_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.065542314 UTC

[section ""cstring" . GHC.IO.Handle.hSetBuffering3_bytes" {
     GHC.IO.Handle.hSetBuffering3_bytes:
         I8[] [104,83,101,116,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.067673218 UTC

[section ""data" . GHC.IO.Handle.hSetBuffering2_closure" {
     GHC.IO.Handle.hSetBuffering2_closure:
         const GHC.IO.Handle.hSetBuffering2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hSetBuffering2_entry() //  [R1]
         { []
         }
     {offset
       cbsGi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsGj; else goto cbsGk;
       cbsGj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsGk: // global
           (_cbsGf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsGf::I64 == 0) goto cbsGh; else goto cbsGg;
       cbsGh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsGg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsGf::I64;
           R2 = GHC.IO.Handle.hSetBuffering3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBuffering2_info" {
     GHC.IO.Handle.hSetBuffering2_info:
         const GHC.IO.Handle.hSetBuffering2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.084538735 UTC

[section ""data" . GHC.IO.Handle.hSetBuffering1_closure" {
     GHC.IO.Handle.hSetBuffering1_closure:
         const GHC.IO.Handle.hSetBuffering1_info;
         const 0;
 },
 sat_sbohh_entry() //  [R1, R2]
         { []
         }
     {offset
       cbsGE: // global
           if ((Sp + -176) < SpLim) (likely: False) goto cbsGF; else goto cbsGG;
       cbsGF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsGG: // global
           I64[Sp - 16] = block_cbsGB_info;
           _sbog8::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbog8::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubsL8; else goto cbsGC;
       ubsL8: // global
           call _cbsGB(R1) args: 0, res: 0, upd: 0;
       cbsGC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbohh_info" {
     sat_sbohh_info:
         const sat_sbohh_entry;
         const 1;
         const 12884901897;
         const 8589934597;
         const SboCL_srt+496;
 },
 _cbsGB() //  [R1]
         { []
         }
     {offset
       cbsGB: // global
           I64[Sp - 128] = block_cbsGJ_info;
           _sbogc::P64 = R1;
           _sbogd::P64 = P64[R1 + 7];
           _sboge::P64 = P64[R1 + 15];
           _sbogf::P64 = P64[R1 + 23];
           _sbogg::P64 = P64[R1 + 31];
           _sbogi::P64 = P64[R1 + 47];
           _sbogj::P64 = P64[R1 + 55];
           _sbogk::P64 = P64[R1 + 63];
           _sbogl::P64 = P64[R1 + 71];
           _sbogm::P64 = P64[R1 + 79];
           _sbogn::P64 = P64[R1 + 87];
           _sbogo::P64 = P64[R1 + 95];
           _sbogp::P64 = P64[R1 + 103];
           _sbogq::P64 = P64[R1 + 111];
           _sbogr::P64 = P64[R1 + 119];
           _sbogs::P64 = P64[R1 + 127];
           R1 = P64[R1 + 39];
           P64[Sp - 120] = _sbogd::P64;
           P64[Sp - 112] = _sboge::P64;
           P64[Sp - 104] = _sbogf::P64;
           P64[Sp - 96] = _sbogg::P64;
           P64[Sp - 88] = _sbogi::P64;
           P64[Sp - 80] = _sbogj::P64;
           P64[Sp - 72] = _sbogk::P64;
           P64[Sp - 64] = _sbogl::P64;
           P64[Sp - 56] = _sbogm::P64;
           P64[Sp - 48] = _sbogn::P64;
           P64[Sp - 40] = _sbogo::P64;
           P64[Sp - 32] = _sbogp::P64;
           P64[Sp - 24] = _sbogq::P64;
           P64[Sp - 16] = _sbogr::P64;
           P64[Sp - 8] = _sbogs::P64;
           P64[Sp] = _sbogc::P64;
           Sp = Sp - 128;
           if (R1 & 7 != 0) goto ubsL7; else goto cbsGL;
       ubsL7: // global
           call _cbsGJ(R1) args: 0, res: 0, upd: 0;
       cbsGL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsGB_info" {
     block_cbsGB_info:
         const _cbsGB;
         const 1;
         const 12884901918;
         const SboCL_srt+496;
 },
 _cbsGJ() //  [R1]
         { []
         }
     {offset
       cbsGJ: // global
           if (R1 & 7 == 1) goto cbsKE; else goto cbsIU;
       cbsKE: // global
           Sp = Sp + 144;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbsIU: // global
           I64[Sp - 8] = block_cbsGR_info;
           _sbogt::P64 = R1;
           R1 = P64[Sp + 136];
           P64[Sp] = _sbogt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsL9; else goto cbsIV;
       ubsL9: // global
           call _cbsGR(R1) args: 0, res: 0, upd: 0;
       cbsIV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsGJ_info" {
     block_cbsGJ_info:
         const _cbsGJ;
         const 17;
         const 12884901918;
         const SboCL_srt+496;
 },
 _cbsGR() //  [R1]
         { []
         }
     {offset
       cbsGR: // global
           _sbogj::P64 = P64[Sp + 56];
           _cbsKG::P64 = R1 & 7;
           if (_cbsKG::P64 < 3) goto ubsKS; else goto cbsJy;
       ubsKS: // global
           if (_cbsKG::P64 < 2) goto cbsJ2; else goto cbsJi;
       cbsJ2: // global
           I64[Sp] = block_cbsIZ_info;
           R1 = _sbogj::P64;
           if (R1 & 7 != 0) goto ubsLa; else goto cbsJ3;
       ubsLa: // global
           call _cbsIZ(R1) args: 0, res: 0, upd: 0;
       cbsJ3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsJi: // global
           I64[Sp] = block_cbsJg_info;
           R1 = _sbogj::P64;
           if (R1 & 7 != 0) goto ubsLb; else goto cbsJj;
       ubsLb: // global
           call _cbsJg(R1) args: 0, res: 0, upd: 0;
       cbsJj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsJy: // global
           I64[Sp] = block_cbsJw_info;
           _sboh3::P64 = P64[R1 + 5];
           R1 = _sbogj::P64;
           P64[Sp + 56] = _sboh3::P64;
           if (R1 & 7 != 0) goto ubsLc; else goto cbsJz;
       ubsLc: // global
           call _cbsJw(R1) args: 0, res: 0, upd: 0;
       cbsJz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsGR_info" {
     block_cbsGR_info:
         const _cbsGR;
         const 18;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsIZ() //  [R1]
         { []
         }
     {offset
       cbsIZ: // global
           if (R1 & 7 == 1) goto ubsKU; else goto ubsKV;
       ubsKU: // global
           Sp = Sp + 136;
           call _cbsKA() args: 0, res: 0, upd: 0;
       ubsKV: // global
           Sp = Sp + 8;
           call _sbogu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsIZ_info" {
     block_cbsIZ_info:
         const _cbsIZ;
         const 4114;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsJg() //  [R1]
         { []
         }
     {offset
       cbsJg: // global
           if (R1 & 7 == 2) goto ubsKW; else goto ubsKX;
       ubsKW: // global
           Sp = Sp + 136;
           call _cbsKA() args: 0, res: 0, upd: 0;
       ubsKX: // global
           Sp = Sp + 8;
           call _sbogu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsJg_info" {
     block_cbsJg_info:
         const _cbsJg;
         const 4114;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsJw() //  [R1]
         { []
         }
     {offset
       cbsJw: // global
           if (R1 & 7 == 3) goto cbsJK; else goto ubsKY;
       cbsJK: // global
           I64[Sp] = block_cbsJI_info;
           _sboh5::P64 = P64[R1 + 5];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _sboh5::P64;
           if (R1 & 7 != 0) goto ubsLp; else goto cbsJL;
       ubsLp: // global
           call _cbsJI(R1) args: 0, res: 0, upd: 0;
       cbsJL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubsKY: // global
           Sp = Sp + 8;
           call _sbogu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsJw_info" {
     block_cbsJw_info:
         const _cbsJw;
         const 18;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsJI() //  [R1]
         { []
         }
     {offset
       cbsJI: // global
           _sboh5::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto cbsJS; else goto cbsK8;
       cbsJS: // global
           I64[Sp] = block_cbsJP_info;
           R1 = _sboh5::P64;
           if (R1 & 7 != 0) goto ubsLr; else goto cbsJT;
       ubsLr: // global
           call _cbsJP(R1) args: 0, res: 0, upd: 0;
       cbsJT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsK8: // global
           I64[Sp] = block_cbsK6_info;
           _sboh9::P64 = P64[R1 + 6];
           R1 = _sboh5::P64;
           P64[Sp + 56] = _sboh9::P64;
           if (R1 & 7 != 0) goto ubsLs; else goto cbsK9;
       ubsLs: // global
           call _cbsK6(R1) args: 0, res: 0, upd: 0;
       cbsK9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsJI_info" {
     block_cbsJI_info:
         const _cbsJI;
         const 18;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsJP() //  [R1]
         { []
         }
     {offset
       cbsJP: // global
           if (R1 & 7 == 1) goto ubsL2; else goto ubsL3;
       ubsL2: // global
           Sp = Sp + 136;
           call _cbsKA() args: 0, res: 0, upd: 0;
       ubsL3: // global
           Sp = Sp + 8;
           call _sbogu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsJP_info" {
     block_cbsJP_info:
         const _cbsJP;
         const 4114;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsK6() //  [R1]
         { []
         }
     {offset
       cbsK6: // global
           if (R1 & 7 == 1) goto ubsKZ; else goto cbsKp;
       ubsKZ: // global
           Sp = Sp + 8;
           call _sbogu() args: 0, res: 0, upd: 0;
       cbsKp: // global
           I64[Sp] = block_cbsKi_info;
           _sbohb::P64 = P64[R1 + 6];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _sbohb::P64;
           if (R1 & 7 != 0) goto ubsLv; else goto cbsKj;
       ubsLv: // global
           call _cbsKi(R1) args: 0, res: 0, upd: 0;
       cbsKj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsK6_info" {
     block_cbsK6_info:
         const _cbsK6;
         const 18;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsKi() //  [R1]
         { []
         }
     {offset
       cbsKi: // global
           I64[Sp] = block_cbsKn_info;
           _sbohd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           I64[Sp + 56] = _sbohd::I64;
           if (R1 & 7 != 0) goto ubsLx; else goto cbsKr;
       ubsLx: // global
           call _cbsKn(R1) args: 0, res: 0, upd: 0;
       cbsKr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsKi_info" {
     block_cbsKi_info:
         const _cbsKi;
         const 18;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsKn() //  [R1]
         { []
         }
     {offset
       cbsKn: // global
           if (I64[Sp + 56] == I64[R1 + 7]) goto ubsL0; else goto ubsL1;
       ubsL0: // global
           Sp = Sp + 136;
           call _cbsKA() args: 0, res: 0, upd: 0;
       ubsL1: // global
           Sp = Sp + 8;
           call _sbogu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsKn_info" {
     block_cbsKn_info:
         const _cbsKn;
         const 4114;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsKA() //  []
         { []
         }
     {offset
       cbsKA: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _sbogu() //  []
         { []
         }
     {offset
       sbogu: // global
           I64[Sp - 8] = block_cbsGY_info;
           R1 = P64[Sp + 136];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsLA; else goto cbsIl;
       ubsLA: // global
           call _cbsGY(R1) args: 0, res: 0, upd: 0;
       cbsIl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbsGY() //  [R1]
         { []
         }
     {offset
       cbsGY: // global
           if (R1 & 7 == 3) goto cbsIw; else goto ubsL4;
       cbsIw: // global
           I64[Sp] = block_cbsIu_info;
           R1 = P64[R1 + 5];
           if (R1 & 7 != 0) goto ubsLd; else goto cbsIx;
       ubsLd: // global
           call _cbsIu(R1) args: 0, res: 0, upd: 0;
       cbsIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubsL4: // global
           Sp = Sp + 8;
           call _sbogv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsGY_info" {
     block_cbsGY_info:
         const _cbsGY;
         const 4198418;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsIu() //  [R1]
         { []
         }
     {offset
       cbsIu: // global
           if (R1 & 7 == 1) goto ubsL5; else goto cbsII;
       ubsL5: // global
           Sp = Sp + 8;
           call _sbogv() args: 0, res: 0, upd: 0;
       cbsII: // global
           I64[Sp] = block_cbsIG_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubsLi; else goto cbsIJ;
       ubsLi: // global
           call _cbsIG(R1) args: 0, res: 0, upd: 0;
       cbsIJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsIu_info" {
     block_cbsIu_info:
         const _cbsIu;
         const 4198418;
         const 4294967326;
         const SboCL_srt+496;
 },
 _cbsIG() //  [R1]
         { []
         }
     {offset
       cbsIG: // global
           _sbogX::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_sbogX::I64, 0)) goto ubsL6; else goto cbsIS;
       ubsL6: // global
           Sp = Sp + 8;
           call _sbogv() args: 0, res: 0, upd: 0;
       cbsIS: // global
           R2 = _sbogX::I64;
           Sp = Sp + 152;
           call GHC.IO.Handle.Internals.$wioe_bufsiz_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsIG_info" {
     block_cbsIG_info:
         const _cbsIG;
         const 4198418;
         const 4294967326;
         const SboCL_srt+496;
 },
 _sbogv() //  []
         { []
         }
     {offset
       sbogv: // global
           I64[Sp - 8] = block_cbsH3_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pv_info;
           P64[Sp - 16] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.IO.Device.isTerminal_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _cbsH3() //  [R1]
         { []
         }
     {offset
       cbsH3: // global
           I64[Sp] = block_cbsH5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubsLf; else goto cbsH8;
       ubsLf: // global
           call _cbsH5(R1) args: 0, res: 0, upd: 0;
       cbsH8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsH3_info" {
     block_cbsH3_info:
         const _cbsH3;
         const 4198418;
         const 30;
 },
 _cbsH5() //  [R1]
         { []
         }
     {offset
       cbsH5: // global
           _sbogt::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbsHh; else goto cbsHZ;
       cbsHh: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbsHk; else goto cbsHj;
       cbsHk: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsHj: // global
           _sbog8::P64 = P64[Sp + 144];
           _sbogd::P64 = P64[Sp + 16];
           _sboge::P64 = P64[Sp + 24];
           _sbogf::P64 = P64[Sp + 32];
           _sbogg::P64 = P64[Sp + 40];
           _sbogi::P64 = P64[Sp + 48];
           _sbogk::P64 = P64[Sp + 64];
           _sbogl::P64 = P64[Sp + 72];
           _sbogm::P64 = P64[Sp + 80];
           _sbogn::P64 = P64[Sp + 88];
           _sbogo::P64 = P64[Sp + 96];
           _sbogp::P64 = P64[Sp + 104];
           _sbogq::P64 = P64[Sp + 112];
           _sbogr::P64 = P64[Sp + 120];
           _sbogs::P64 = P64[Sp + 128];
           call MO_WriteBarrier();
           P64[_sbogm::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbogm::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbogd::P64;
           P64[Hp - 112] = _sboge::P64;
           P64[Hp - 104] = _sbogf::P64;
           P64[Hp - 96] = _sbogg::P64;
           P64[Hp - 88] = _sbogt::P64;
           P64[Hp - 80] = _sbogi::P64;
           P64[Hp - 72] = _sbog8::P64;
           P64[Hp - 64] = _sbogk::P64;
           P64[Hp - 56] = _sbogl::P64;
           P64[Hp - 48] = _sbogm::P64;
           P64[Hp - 40] = _sbogn::P64;
           P64[Hp - 32] = _sbogo::P64;
           P64[Hp - 24] = _sbogp::P64;
           P64[Hp - 16] = _sbogq::P64;
           P64[Hp - 8] = _sbogr::P64;
           P64[Hp] = _sbogs::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbsHZ: // global
           I64[Sp] = block_cbsHp_info;
           R1 = _sbogt::P64;
           if (R1 & 7 != 0) goto ubsLg; else goto cbsI0;
       ubsLg: // global
           call _cbsHp(R1) args: 0, res: 0, upd: 0;
       cbsI0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsH5_info" {
     block_cbsH5_info:
         const _cbsH5;
         const 4198418;
         const 30;
 },
 _cbsHp() //  [R1]
         { []
         }
     {offset
       cbsHp: // global
           _sbog8::P64 = P64[Sp + 144];
           _cbsKQ::P64 = R1 & 7;
           if (_cbsKQ::P64 == 3) goto sbogD; else goto ubsKT;
       ubsKT: // global
           if (_cbsKQ::P64 == 6) goto sbogD; else goto cbsI9;
       sbogD: // global
           I64[Sp] = block_cbsHu_info;
           R1 = _sbog8::P64;
           if (R1 & 7 != 0) goto ubsLh; else goto cbsHw;
       ubsLh: // global
           call _cbsHu(R1) args: 0, res: 0, upd: 0;
       cbsHw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsI9: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbsIc; else goto cbsIb;
       cbsIc: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsIb: // global
           _sbogd::P64 = P64[Sp + 16];
           _sboge::P64 = P64[Sp + 24];
           _sbogf::P64 = P64[Sp + 32];
           _sbogg::P64 = P64[Sp + 40];
           _sbogi::P64 = P64[Sp + 48];
           _sbogk::P64 = P64[Sp + 64];
           _sbogl::P64 = P64[Sp + 72];
           _sbogm::P64 = P64[Sp + 80];
           _sbogn::P64 = P64[Sp + 88];
           _sbogo::P64 = P64[Sp + 96];
           _sbogp::P64 = P64[Sp + 104];
           _sbogq::P64 = P64[Sp + 112];
           _sbogr::P64 = P64[Sp + 120];
           _sbogs::P64 = P64[Sp + 128];
           call MO_WriteBarrier();
           P64[_sbogm::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbogm::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbogd::P64;
           P64[Hp - 112] = _sboge::P64;
           P64[Hp - 104] = _sbogf::P64;
           P64[Hp - 96] = _sbogg::P64;
           P64[Hp - 88] = R1;
           P64[Hp - 80] = _sbogi::P64;
           P64[Hp - 72] = _sbog8::P64;
           P64[Hp - 64] = _sbogk::P64;
           P64[Hp - 56] = _sbogl::P64;
           P64[Hp - 48] = _sbogm::P64;
           P64[Hp - 40] = _sbogn::P64;
           P64[Hp - 32] = _sbogo::P64;
           P64[Hp - 24] = _sbogp::P64;
           P64[Hp - 16] = _sbogq::P64;
           P64[Hp - 8] = _sbogr::P64;
           P64[Hp] = _sbogs::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsHp_info" {
     block_cbsHp_info:
         const _cbsHp;
         const 4198418;
         const 30;
 },
 _cbsHu() //  [R1]
         { []
         }
     {offset
       cbsHu: // global
           _sbogd::P64 = P64[Sp + 16];
           _sbogg::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cbsHV; else goto cbsHI;
       cbsHV: // global
           I64[Sp] = block_cbsHO_info;
           R2 = _sbogd::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _sbogg::P64;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 24;
           call GHC.IO.Device.setRaw_entry(R2) args: 32, res: 8, upd: 8;
       cbsHI: // global
           I64[Sp] = block_cbsHA_info;
           R2 = _sbogd::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _sbogg::P64;
           P64[Sp - 8] = GHC.Types.False_closure+1;
           P64[Sp + 144] = R1;
           Sp = Sp - 24;
           call GHC.IO.Device.setRaw_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsHu_info" {
     block_cbsHu_info:
         const _cbsHu;
         const 12587026;
         const 30;
 },
 _cbsHO() //  [R1]
         { []
         }
     {offset
       cbsHO: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbsHY; else goto cbsHX;
       cbsHY: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsHX: // global
           _sbogd::P64 = P64[Sp + 16];
           _sboge::P64 = P64[Sp + 24];
           _sbogf::P64 = P64[Sp + 32];
           _sbogg::P64 = P64[Sp + 40];
           _sbogi::P64 = P64[Sp + 48];
           _sbogk::P64 = P64[Sp + 64];
           _sbogl::P64 = P64[Sp + 72];
           _sbogm::P64 = P64[Sp + 80];
           _sbogn::P64 = P64[Sp + 88];
           _sbogo::P64 = P64[Sp + 96];
           _sbogp::P64 = P64[Sp + 104];
           _sbogq::P64 = P64[Sp + 112];
           _sbogr::P64 = P64[Sp + 120];
           _sbogs::P64 = P64[Sp + 128];
           _sbogt::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbogm::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbogm::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbogd::P64;
           P64[Hp - 112] = _sboge::P64;
           P64[Hp - 104] = _sbogf::P64;
           P64[Hp - 96] = _sbogg::P64;
           P64[Hp - 88] = _sbogt::P64;
           P64[Hp - 80] = _sbogi::P64;
           P64[Hp - 72] = GHC.IO.Handle.Types.NoBuffering_closure+1;
           P64[Hp - 64] = _sbogk::P64;
           P64[Hp - 56] = _sbogl::P64;
           P64[Hp - 48] = _sbogm::P64;
           P64[Hp - 40] = _sbogn::P64;
           P64[Hp - 32] = _sbogo::P64;
           P64[Hp - 24] = _sbogp::P64;
           P64[Hp - 16] = _sbogq::P64;
           P64[Hp - 8] = _sbogr::P64;
           P64[Hp] = _sbogs::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsHO_info" {
     block_cbsHO_info:
         const _cbsHO;
         const 12587026;
         const 30;
 },
 _cbsHA() //  [R1]
         { []
         }
     {offset
       cbsHA: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbsHL; else goto cbsHK;
       cbsHL: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsHK: // global
           _sbogd::P64 = P64[Sp + 16];
           _sboge::P64 = P64[Sp + 24];
           _sbogf::P64 = P64[Sp + 32];
           _sbogg::P64 = P64[Sp + 40];
           _sbogi::P64 = P64[Sp + 48];
           _sbogk::P64 = P64[Sp + 64];
           _sbogl::P64 = P64[Sp + 72];
           _sbogm::P64 = P64[Sp + 80];
           _sbogn::P64 = P64[Sp + 88];
           _sbogo::P64 = P64[Sp + 96];
           _sbogp::P64 = P64[Sp + 104];
           _sbogq::P64 = P64[Sp + 112];
           _sbogr::P64 = P64[Sp + 120];
           _sbogs::P64 = P64[Sp + 128];
           _sbogt::P64 = P64[Sp + 8];
           _sbogE::P64 = P64[Sp + 144];
           call MO_WriteBarrier();
           P64[_sbogm::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbogm::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbogd::P64;
           P64[Hp - 112] = _sboge::P64;
           P64[Hp - 104] = _sbogf::P64;
           P64[Hp - 96] = _sbogg::P64;
           P64[Hp - 88] = _sbogt::P64;
           P64[Hp - 80] = _sbogi::P64;
           P64[Hp - 72] = _sbogE::P64;
           P64[Hp - 64] = _sbogk::P64;
           P64[Hp - 56] = _sbogl::P64;
           P64[Hp - 48] = _sbogm::P64;
           P64[Hp - 40] = _sbogn::P64;
           P64[Hp - 32] = _sbogo::P64;
           P64[Hp - 24] = _sbogp::P64;
           P64[Hp - 16] = _sbogq::P64;
           P64[Hp - 8] = _sbogr::P64;
           P64[Hp] = _sbogs::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsHA_info" {
     block_cbsHA_info:
         const _cbsHA;
         const 4198418;
         const 30;
 },
 section ""relreadonly" . ubsLG_srtd" {
     ubsLG_srtd:
         const SboCL_srt+256;
         const 34;
         const 16106127361;
 },
 GHC.IO.Handle.hSetBuffering1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbsLB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsLF; else goto cbsLE;
       cbsLF: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetBuffering1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbsLE: // global
           I64[Hp - 8] = sat_sbohh_info;
           P64[Hp] = R3;
           R4 = Hp - 6;
           R3 = R2;
           R2 = GHC.IO.Handle.hSetBuffering2_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBuffering1_info" {
     GHC.IO.Handle.hSetBuffering1_info:
         const GHC.IO.Handle.hSetBuffering1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubsLG_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.130336105 UTC

[section ""data" . GHC.IO.Handle.hSetBuffering_closure" {
     GHC.IO.Handle.hSetBuffering_closure:
         const GHC.IO.Handle.hSetBuffering_info;
         const 0;
 },
 GHC.IO.Handle.hSetBuffering_entry() //  [R2, R3]
         { []
         }
     {offset
       cbsNO: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetBuffering1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBuffering_info" {
     GHC.IO.Handle.hSetBuffering_info:
         const GHC.IO.Handle.hSetBuffering_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SboCL_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.133641545 UTC

[section ""cstring" . GHC.IO.Handle.hIsEOF4_bytes" {
     GHC.IO.Handle.hIsEOF4_bytes:
         I8[] [104,73,115,69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.135799245 UTC

[section ""data" . GHC.IO.Handle.hIsEOF3_closure" {
     GHC.IO.Handle.hIsEOF3_closure:
         const GHC.IO.Handle.hIsEOF3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsEOF3_entry() //  [R1]
         { []
         }
     {offset
       cbsO2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsO3; else goto cbsO4;
       cbsO3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsO4: // global
           (_cbsNZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsNZ::I64 == 0) goto cbsO1; else goto cbsO0;
       cbsO1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsO0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsNZ::I64;
           R2 = GHC.IO.Handle.hIsEOF4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF3_info" {
     GHC.IO.Handle.hIsEOF3_info:
         const GHC.IO.Handle.hIsEOF3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.141903255 UTC

[section ""data" . GHC.IO.Handle.hIsEOF2_closure" {
     GHC.IO.Handle.hIsEOF2_closure:
         const GHC.IO.Handle.hIsEOF2_info;
 },
 GHC.IO.Handle.hIsEOF2_entry() //  [R2]
         { []
         }
     {offset
       cbsOj: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbsOn; else goto cbsOo;
       cbsOn: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsEOF2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsOo: // global
           I64[Sp - 8] = block_cbsOg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsPf; else goto cbsOh;
       ubsPf: // global
           call _cbsOg(R1) args: 0, res: 0, upd: 0;
       cbsOh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF2_info" {
     GHC.IO.Handle.hIsEOF2_info:
         const GHC.IO.Handle.hIsEOF2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbsOg() //  [R1]
         { []
         }
     {offset
       cbsOg: // global
           _sbohD::P64 = P64[P64[R1 + 71] + 8];
           I64[Sp - 24] = block_cbsOm_info;
           _sbohm::P64 = P64[R1 + 15];
           _sboho::P64 = P64[R1 + 31];
           _sbohq::P64 = P64[R1 + 47];
           R1 = _sbohD::P64;
           P64[Sp - 16] = _sboho::P64;
           P64[Sp - 8] = _sbohq::P64;
           P64[Sp] = _sbohm::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubsPe; else goto cbsOq;
       ubsPe: // global
           call _cbsOm(R1) args: 0, res: 0, upd: 0;
       cbsOq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsOg_info" {
     block_cbsOg_info:
         const _cbsOg;
         const 0;
         const 30;
 },
 _cbsOm() //  [R1]
         { []
         }
     {offset
       cbsOm: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbsOC; else goto ubsPc;
       cbsOC: // global
           _sbohO::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbsOB_info;
           R1 = _sbohO::P64;
           if (R1 & 7 != 0) goto ubsPg; else goto cbsOD;
       ubsPg: // global
           call _cbsOB(R1) args: 0, res: 0, upd: 0;
       cbsOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubsPc: // global
           Sp = Sp + 32;
           call _cbsOL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsOm_info" {
     block_cbsOm_info:
         const _cbsOm;
         const 3;
         const 30;
 },
 _cbsOB() //  [R1]
         { []
         }
     {offset
       cbsOB: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbsOW; else goto ubsPd;
       cbsOW: // global
           _sboho::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbsOO_info;
           R2 = P64[Sp + 24];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sboho::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.fillReadBuffer_entry(R2) args: 32, res: 8, upd: 8;
       ubsPd: // global
           Sp = Sp + 32;
           call _cbsOL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsOB_info" {
     block_cbsOB_info:
         const _cbsOB;
         const 3;
         const 30;
 },
 _cbsOO() //  [R1]
         { []
         }
     {offset
       cbsOO: // global
           I64[Sp] = block_cbsOQ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubsPj; else goto cbsOR;
       ubsPj: // global
           call _cbsOQ(R1) args: 0, res: 0, upd: 0;
       cbsOR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsOO_info" {
     block_cbsOO_info:
         const _cbsOO;
         const 130;
         const 30;
 },
 _cbsOQ() //  [R1]
         { []
         }
     {offset
       cbsOQ: // global
           I64[Sp] = block_cbsOV_info;
           _sboi2::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 16] = _sboi2::P64;
           if (R1 & 7 != 0) goto ubsPk; else goto cbsOZ;
       ubsPk: // global
           call _cbsOV(R1) args: 0, res: 0, upd: 0;
       cbsOZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsOQ_info" {
     block_cbsOQ_info:
         const _cbsOQ;
         const 130;
         const 30;
 },
 _cbsOV() //  [R1]
         { []
         }
     {offset
       cbsOV: // global
           if (I64[R1 + 7] == 0) goto cbsP7; else goto cbsP6;
       cbsP7: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbsP6: // global
           _sbohq::P64 = P64[Sp + 8];
           _sboi2::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbohq::P64 + 8] = _sboi2::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbohq::P64);
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsOV_info" {
     block_cbsOV_info:
         const _cbsOV;
         const 2;
         const 30;
 },
 _cbsOL() //  []
         { []
         }
     {offset
       cbsOL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.156324536 UTC

[section ""data" . GHC.IO.Handle.hIsEOF1_closure" {
     GHC.IO.Handle.hIsEOF1_closure:
         const GHC.IO.Handle.hIsEOF1_info;
         const 0;
 },
 GHC.IO.Handle.hIsEOF1_entry() //  [R2]
         { []
         }
     {offset
       cbsQ1: // global
           R4 = GHC.IO.Handle.hIsEOF2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hIsEOF3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF1_info" {
     GHC.IO.Handle.hIsEOF1_info:
         const GHC.IO.Handle.hIsEOF1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SboCL_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.159623638 UTC

[section ""data" . GHC.IO.Handle.hIsEOF_closure" {
     GHC.IO.Handle.hIsEOF_closure:
         const GHC.IO.Handle.hIsEOF_info;
         const 0;
 },
 GHC.IO.Handle.hIsEOF_entry() //  [R2]
         { []
         }
     {offset
       cbsQc: // global
           R2 = R2;
           call GHC.IO.Handle.hIsEOF1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF_info" {
     GHC.IO.Handle.hIsEOF_info:
         const GHC.IO.Handle.hIsEOF_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.162877636 UTC

[section ""data" . GHC.IO.Handle.isEOF1_closure" {
     GHC.IO.Handle.isEOF1_closure:
         const GHC.IO.Handle.isEOF1_info;
         const 0;
 },
 GHC.IO.Handle.isEOF1_entry() //  []
         { []
         }
     {offset
       cbsQn: // global
           R4 = GHC.IO.Handle.hIsEOF2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           R2 = GHC.IO.Handle.hIsEOF3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.isEOF1_info" {
     GHC.IO.Handle.isEOF1_info:
         const GHC.IO.Handle.isEOF1_entry;
         const 0;
         const 47244640270;
         const 4294967299;
         const SboCL_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.16638785 UTC

[section ""data" . GHC.IO.Handle.isEOF_closure" {
     GHC.IO.Handle.isEOF_closure:
         const GHC.IO.Handle.isEOF_info;
         const 0;
 },
 GHC.IO.Handle.isEOF_entry() //  []
         { []
         }
     {offset
       cbsQy: // global
           call GHC.IO.Handle.isEOF1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.isEOF_info" {
     GHC.IO.Handle.isEOF_info:
         const GHC.IO.Handle.isEOF_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SboCL_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.169232859 UTC

[section ""cstring" . lvl19_rbnX1_bytes" {
     lvl19_rbnX1_bytes:
         I8[] [104,83,101,116,70,105,108,101,83,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.171373027 UTC

[section ""data" . lvl20_rbnX2_closure" {
     lvl20_rbnX2_closure:
         const lvl20_rbnX2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_rbnX2_entry() //  [R1]
         { []
         }
     {offset
       cbsQM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsQN; else goto cbsQO;
       cbsQN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsQO: // global
           (_cbsQJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsQJ::I64 == 0) goto cbsQL; else goto cbsQK;
       cbsQL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsQK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsQJ::I64;
           R2 = lvl19_rbnX1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_rbnX2_info" {
     lvl20_rbnX2_info:
         const lvl20_rbnX2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.183681223 UTC

[section ""data" . GHC.IO.Handle.hSetFileSize1_closure" {
     GHC.IO.Handle.hSetFileSize1_closure:
         const GHC.IO.Handle.hSetFileSize1_info;
         const 0;
 },
 act_sboib_entry() //  [R1, R2]
         { []
         }
     {offset
       cbsR8: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbsR9; else goto cbsRa;
       cbsR9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsRa: // global
           I64[Sp - 16] = block_cbsR5_info;
           _sboi9::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sboi9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubsSi; else goto cbsR6;
       ubsSi: // global
           call _cbsR5(R1) args: 0, res: 0, upd: 0;
       cbsR6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sboib_info" {
     act_sboib_info:
         const act_sboib_entry;
         const 1;
         const 18014402804449289;
         const 8589934597;
         const SboCL_srt+328;
 },
 _cbsR5() //  [R1]
         { []
         }
     {offset
       cbsR5: // global
           I64[Sp - 32] = block_cbsRd_info;
           _sboif::P64 = P64[R1 + 7];
           _sboig::P64 = P64[R1 + 15];
           _sboii::P64 = P64[R1 + 31];
           _sboik::P64 = P64[R1 + 47];
           R1 = P64[R1 + 39];
           P64[Sp - 24] = _sboig::P64;
           P64[Sp - 16] = _sboii::P64;
           P64[Sp - 8] = _sboik::P64;
           P64[Sp] = _sboif::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubsSh; else goto cbsRf;
       ubsSh: // global
           call _cbsRd(R1) args: 0, res: 0, upd: 0;
       cbsRf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsR5_info" {
     block_cbsR5_info:
         const _cbsR5;
         const 1;
         const 18014402804449310;
         const SboCL_srt+328;
 },
 _cbsRd() //  [R1]
         { []
         }
     {offset
       cbsRd: // global
           _cbsSe::P64 = R1 & 7;
           if (_cbsSe::P64 != 1) goto ubsSg; else goto cbsS9;
       ubsSg: // global
           if (_cbsSe::P64 != 2) goto cbsRm; else goto cbsSd;
       cbsRm: // global
           _sboiy::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbsRj_info;
           R1 = _sboiy::P64;
           if (R1 & 7 != 0) goto ubsSj; else goto cbsRn;
       ubsSj: // global
           call _cbsRj(R1) args: 0, res: 0, upd: 0;
       cbsRn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsSd: // global
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbsS9: // global
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsRd_info" {
     block_cbsRd_info:
         const _cbsRd;
         const 5;
         const 18014402804449310;
         const SboCL_srt+328;
 },
 _cbsRj() //  [R1]
         { []
         }
     {offset
       cbsRj: // global
           I64[Sp] = block_cbsRr_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubsSk; else goto cbsRt;
       ubsSk: // global
           call _cbsRr(R1) args: 0, res: 0, upd: 0;
       cbsRt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsRj_info" {
     block_cbsRj_info:
         const _cbsRj;
         const 5;
         const 30;
 },
 _cbsRr() //  [R1]
         { []
         }
     {offset
       cbsRr: // global
           if (R1 & 7 == 1) goto cbsRA; else goto cbsRH;
       cbsRA: // global
           _sboi9::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbsRx_info;
           R2 = P64[Sp + 32];
           _sboii::P64 = P64[Sp + 16];
           I64[Sp + 16] = stg_ap_ppv_info;
           P64[Sp + 24] = _sboii::P64;
           P64[Sp + 32] = _sboi9::P64;
           Sp = Sp + 16;
           call GHC.IO.Device.setSize_entry(R2) args: 32, res: 8, upd: 8;
       cbsRH: // global
           _sboiM::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbsRF_info;
           R1 = _sboiM::P64;
           if (R1 & 7 != 0) goto ubsSl; else goto cbsRI;
       ubsSl: // global
           call _cbsRF(R1) args: 0, res: 0, upd: 0;
       cbsRI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsRr_info" {
     block_cbsRr_info:
         const _cbsRr;
         const 5;
         const 30;
 },
 _cbsRx() //  []
         { []
         }
     {offset
       cbsRx: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsRx_info" {
     block_cbsRx_info:
         const _cbsRx;
         const 0;
         const 30;
 },
 _cbsRF() //  [R1]
         { []
         }
     {offset
       cbsRF: // global
           _sboii::P64 = P64[Sp + 16];
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbsS3; else goto cbsRX;
       cbsS3: // global
           _sboi9::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbsS2_info;
           R2 = P64[Sp + 32];
           I64[Sp + 16] = stg_ap_ppv_info;
           P64[Sp + 24] = _sboii::P64;
           P64[Sp + 32] = _sboi9::P64;
           Sp = Sp + 16;
           call GHC.IO.Device.setSize_entry(R2) args: 32, res: 8, upd: 8;
       cbsRX: // global
           _sboig::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbsRQ_info;
           R2 = _sboig::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sboii::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsRF_info" {
     block_cbsRF_info:
         const _cbsRF;
         const 5;
         const 30;
 },
 _cbsS2() //  []
         { []
         }
     {offset
       cbsS2: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsS2_info" {
     block_cbsS2_info:
         const _cbsS2;
         const 0;
         const 30;
 },
 _cbsRQ() //  [R1]
         { []
         }
     {offset
       cbsRQ: // global
           _sboi9::P64 = P64[Sp + 32];
           _sboif::P64 = P64[Sp + 24];
           _sboii::P64 = P64[Sp + 8];
           _sboik::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sboik::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sboik::P64);
           I64[Sp + 32] = block_cbsRV_info;
           R2 = _sboif::P64;
           I64[Sp + 8] = stg_ap_ppv_info;
           P64[Sp + 16] = _sboii::P64;
           P64[Sp + 24] = _sboi9::P64;
           Sp = Sp + 8;
           call GHC.IO.Device.setSize_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsRQ_info" {
     block_cbsRQ_info:
         const _cbsRQ;
         const 4;
         const 30;
 },
 _cbsRV() //  []
         { []
         }
     {offset
       cbsRV: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsRV_info" {
     block_cbsRV_info:
         const _cbsRV;
         const 0;
         const 30;
 },
 sat_sbojj_entry() //  [R1, R2]
         { []
         }
     {offset
       cbsSG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsSH; else goto cbsSI;
       cbsSH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsSI: // global
           I64[Sp - 16] = block_cbsSD_info;
           _sbojd::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sbojd::P64;
           Sp = Sp - 16;
           call act_sboib_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbojj_info" {
     sat_sbojj_info:
         const sat_sbojj_entry;
         const 1;
         const 18014402804449289;
         const 8589934597;
         const SboCL_srt+328;
 },
 _cbsSD() //  [R1]
         { []
         }
     {offset
       cbsSD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbsSL; else goto cbsSK;
       cbsSL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsSK: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsSD_info" {
     block_cbsSD_info:
         const _cbsSD;
         const 1;
         const 30;
 },
 io_sbojb_entry() //  [R1]
         { []
         }
     {offset
       cbsSR: // global
           _sbojb::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbsSV; else goto cbsSW;
       cbsSW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsSY; else goto cbsSX;
       cbsSY: // global
           HpAlloc = 16;
           goto cbsSV;
       cbsSV: // global
           R1 = _sbojb::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbsSX: // global
           _sboib::P64 = P64[_sbojb::P64 + 7];
           _sboj5::P64 = P64[_sbojb::P64 + 15];
           _sboj7::P64 = P64[_sbojb::P64 + 23];
           I64[Hp - 8] = sat_sbojj_info;
           P64[Hp] = _sboib::P64;
           I64[Sp - 16] = block_cbsSM_info;
           R5 = _sboj7::P64;
           R4 = Hp - 6;
           R3 = _sboj5::P64;
           R2 = lvl20_rbnX2_closure;
           P64[Sp - 8] = _sboj7::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbojb_info" {
     io_sbojb_info:
         const io_sbojb_entry;
         const 3;
         const 4629981896208547848;
         const 4294967299;
         const SboCL_srt+328;
 },
 _cbsSM() //  [R1]
         { []
         }
     {offset
       cbsSM: // global
           I64[Sp] = block_cbsSO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubsT3; else goto cbsSP;
       ubsT3: // global
           call _cbsSO(R1) args: 0, res: 0, upd: 0;
       cbsSP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsSM_info" {
     block_cbsSM_info:
         const _cbsSM;
         const 1;
         const 30;
 },
 _cbsSO() //  [R1]
         { []
         }
     {offset
       cbsSO: // global
           I64[Sp] = block_cbsSU_info;
           R2 = P64[R1 + 7];
           _sbojp::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbojp::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsSO_info" {
     block_cbsSO_info:
         const _cbsSO;
         const 1;
         const 30;
 },
 _cbsSU() //  []
         { []
         }
     {offset
       cbsSU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsSU_info" {
     block_cbsSU_info:
         const _cbsSU;
         const 1;
         const 30;
 },
 sat_sbojG_entry() //  [R1, R2]
         { []
         }
     {offset
       cbsTl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsTm; else goto cbsTn;
       cbsTm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsTn: // global
           I64[Sp - 16] = block_cbsTi_info;
           _sbojA::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sbojA::P64;
           Sp = Sp - 16;
           call act_sboib_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbojG_info" {
     sat_sbojG_info:
         const sat_sbojG_entry;
         const 1;
         const 18014402804449289;
         const 8589934597;
         const SboCL_srt+328;
 },
 _cbsTi() //  [R1]
         { []
         }
     {offset
       cbsTi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbsTq; else goto cbsTp;
       cbsTq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsTp: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsTi_info" {
     block_cbsTi_info:
         const _cbsTi;
         const 1;
         const 30;
 },
 io_sbojy_entry() //  [R1]
         { []
         }
     {offset
       cbsTw: // global
           _sbojy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbsTA; else goto cbsTB;
       cbsTB: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsTD; else goto cbsTC;
       cbsTD: // global
           HpAlloc = 16;
           goto cbsTA;
       cbsTA: // global
           R1 = _sbojy::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbsTC: // global
           _sboib::P64 = P64[_sbojy::P64 + 7];
           _sboj5::P64 = P64[_sbojy::P64 + 15];
           _sbojt::P64 = P64[_sbojy::P64 + 23];
           I64[Hp - 8] = sat_sbojG_info;
           P64[Hp] = _sboib::P64;
           I64[Sp - 16] = block_cbsTr_info;
           R5 = _sbojt::P64;
           R4 = Hp - 6;
           R3 = _sboj5::P64;
           R2 = lvl20_rbnX2_closure;
           P64[Sp - 8] = _sbojt::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbojy_info" {
     io_sbojy_info:
         const io_sbojy_entry;
         const 3;
         const 4629981896208547848;
         const 4294967299;
         const SboCL_srt+328;
 },
 _cbsTr() //  [R1]
         { []
         }
     {offset
       cbsTr: // global
           I64[Sp] = block_cbsTt_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubsTI; else goto cbsTu;
       ubsTI: // global
           call _cbsTt(R1) args: 0, res: 0, upd: 0;
       cbsTu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsTr_info" {
     block_cbsTr_info:
         const _cbsTr;
         const 1;
         const 30;
 },
 _cbsTt() //  [R1]
         { []
         }
     {offset
       cbsTt: // global
           I64[Sp] = block_cbsTz_info;
           R2 = P64[R1 + 7];
           _sbojM::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbojM::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsTt_info" {
     block_cbsTt_info:
         const _cbsTt;
         const 1;
         const 30;
 },
 _cbsTz() //  []
         { []
         }
     {offset
       cbsTz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsTz_info" {
     block_cbsTz_info:
         const _cbsTz;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hSetFileSize1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbsTN: // global
           _sboi9::P64 = R3;
           _sboi8::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cbsTO; else goto cbsTP;
       cbsTP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbsTR; else goto cbsTQ;
       cbsTR: // global
           HpAlloc = 16;
           goto cbsTO;
       cbsTO: // global
           R3 = _sboi9::P64;
           R2 = _sboi8::P64;
           R1 = GHC.IO.Handle.hSetFileSize1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbsTQ: // global
           I64[Hp - 8] = act_sboib_info;
           P64[Hp] = _sboi9::P64;
           I64[Sp - 16] = block_cbsSm_info;
           R1 = _sboi8::P64;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubsU8; else goto cbsSn;
       ubsU8: // global
           call _cbsSm(R1) args: 0, res: 0, upd: 0;
       cbsSn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetFileSize1_info" {
     GHC.IO.Handle.hSetFileSize1_info:
         const GHC.IO.Handle.hSetFileSize1_entry;
         const 0;
         const 13853353933063323662;
         const 12884901903;
         const SboCL_srt+328;
 },
 _cbsSm() //  [R1]
         { []
         }
     {offset
       cbsSm: // global
           if (R1 & 7 == 1) goto cbsTK; else goto cbsTL;
       cbsTK: // global
           I64[Sp - 16] = block_cbsSr_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbsTL: // global
           I64[Sp - 16] = block_cbsT6_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsSm_info" {
     block_cbsSm_info:
         const _cbsSm;
         const 1;
         const 4629981896208547870;
         const SboCL_srt+328;
 },
 _cbsSr() //  [R1]
         { []
         }
     {offset
       cbsSr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbsTV; else goto cbsTU;
       cbsTV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbsTU: // global
           I64[Hp - 24] = io_sbojb_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbsSt::P64 = Hp - 23;
           if (R1 == 0) goto cbsTZ; else goto cbsTY;
       cbsTZ: // global
           R1 = _cbsSt::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbsTY: // global
           R1 = _cbsSt::P64;
           Sp = Sp + 32;
           call io_sbojb_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsSr_info" {
     block_cbsSr_info:
         const _cbsSr;
         const 3;
         const 4629981896208547870;
         const SboCL_srt+328;
 },
 _cbsT6() //  [R1]
         { []
         }
     {offset
       cbsT6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbsU3; else goto cbsU2;
       cbsU3: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbsU2: // global
           I64[Hp - 24] = io_sbojy_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbsT8::P64 = Hp - 23;
           if (R1 == 0) goto cbsU7; else goto cbsU6;
       cbsU7: // global
           R1 = _cbsT8::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbsU6: // global
           R1 = _cbsT8::P64;
           Sp = Sp + 32;
           call io_sbojy_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsT6_info" {
     block_cbsT6_info:
         const _cbsT6;
         const 3;
         const 4629981896208547870;
         const SboCL_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.227776983 UTC

[section ""data" . GHC.IO.Handle.hSetFileSize_closure" {
     GHC.IO.Handle.hSetFileSize_closure:
         const GHC.IO.Handle.hSetFileSize_info;
         const 0;
 },
 GHC.IO.Handle.hSetFileSize_entry() //  [R2, R3]
         { []
         }
     {offset
       cbsW9: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetFileSize1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetFileSize_info" {
     GHC.IO.Handle.hSetFileSize_info:
         const GHC.IO.Handle.hSetFileSize_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SboCL_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.231718513 UTC

[section ""cstring" . GHC.IO.Handle.hFileSize9_bytes" {
     GHC.IO.Handle.hFileSize9_bytes:
         I8[] [104,70,105,108,101,83,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.233919744 UTC

[section ""data" . GHC.IO.Handle.hFileSize8_closure" {
     GHC.IO.Handle.hFileSize8_closure:
         const GHC.IO.Handle.hFileSize8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize8_entry() //  [R1]
         { []
         }
     {offset
       cbsWn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsWo; else goto cbsWp;
       cbsWo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsWp: // global
           (_cbsWk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsWk::I64 == 0) goto cbsWm; else goto cbsWl;
       cbsWm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsWl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsWk::I64;
           R2 = GHC.IO.Handle.hFileSize9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize8_info" {
     GHC.IO.Handle.hFileSize8_info:
         const GHC.IO.Handle.hFileSize8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.237490139 UTC

[section ""cstring" . GHC.IO.Handle.hFileSize7_bytes" {
     GHC.IO.Handle.hFileSize7_bytes:
         I8[] [110,111,116,32,97,32,114,101,103,117,108,97,114,32,102,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.239625031 UTC

[section ""data" . GHC.IO.Handle.hFileSize6_closure" {
     GHC.IO.Handle.hFileSize6_closure:
         const GHC.IO.Handle.hFileSize6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize6_entry() //  [R1]
         { []
         }
     {offset
       cbsWE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsWF; else goto cbsWG;
       cbsWF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsWG: // global
           (_cbsWB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsWB::I64 == 0) goto cbsWD; else goto cbsWC;
       cbsWD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsWC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsWB::I64;
           R2 = GHC.IO.Handle.hFileSize7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize6_info" {
     GHC.IO.Handle.hFileSize6_info:
         const GHC.IO.Handle.hFileSize6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.243102368 UTC

[section ""data" . GHC.IO.Handle.hFileSize5_closure" {
     GHC.IO.Handle.hFileSize5_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InappropriateType_closure+1;
         const GHC.IO.Handle.hFileSize8_closure;
         const GHC.IO.Handle.hFileSize6_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.245349811 UTC

[section ""data" . GHC.IO.Handle.hFileSize4_closure" {
     GHC.IO.Handle.hFileSize4_closure:
         const GHC.IO.Handle.hFileSize4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize4_entry() //  [R1]
         { []
         }
     {offset
       cbsWV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsWW; else goto cbsWX;
       cbsWW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsWX: // global
           (_cbsWS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsWS::I64 == 0) goto cbsWU; else goto cbsWT;
       cbsWU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsWT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsWS::I64;
           R2 = GHC.IO.Handle.hFileSize5_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize4_info" {
     GHC.IO.Handle.hFileSize4_info:
         const GHC.IO.Handle.hFileSize4_entry;
         const 0;
         const 12884901909;
         const SboCL_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.248689492 UTC

[section ""data" . sat_sbojP_closure" {
     sat_sbojP_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.25031347 UTC

[section ""data" . sat_sbojQ_closure" {
     sat_sbojQ_closure:
         const :_con_info;
         const sat_sbojP_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.252495996 UTC

[section ""data" . GHC.IO.Handle.hFileSize10_closure" {
     GHC.IO.Handle.hFileSize10_closure:
         const GHC.IO.Handle.hFileSize10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize10_entry() //  [R1]
         { []
         }
     {offset
       cbsXd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsXe; else goto cbsXf;
       cbsXe: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbsXf: // global
           (_cbsXa::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbsXa::I64 == 0) goto cbsXc; else goto cbsXb;
       cbsXc: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbsXb: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbsXa::I64;
           R3 = sat_sbojQ_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize10_info" {
     GHC.IO.Handle.hFileSize10_info:
         const GHC.IO.Handle.hFileSize10_entry;
         const 0;
         const 4294967317;
         const SboCL_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.259690376 UTC

[section ""data" . GHC.IO.Handle.hFileSize3_closure" {
     GHC.IO.Handle.hFileSize3_closure:
         const GHC.IO.Handle.hFileSize3_info;
         const 0;
 },
 section ""relreadonly" . ubsYY_srtd" {
     ubsYY_srtd:
         const SboCL_srt+328;
         const 38;
         const 240522362881;
 },
 GHC.IO.Handle.hFileSize3_entry() //  [R2]
         { []
         }
     {offset
       cbsXu: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbsXv; else goto cbsXw;
       cbsXv: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFileSize3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsXw: // global
           I64[Sp - 8] = block_cbsXr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubsYR; else goto cbsXs;
       ubsYR: // global
           call _cbsXr(R1) args: 0, res: 0, upd: 0;
       cbsXs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize3_info" {
     GHC.IO.Handle.hFileSize3_info:
         const GHC.IO.Handle.hFileSize3_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubsYY_srtd;
 },
 section ""relreadonly" . ubsYZ_srtd" {
     ubsYZ_srtd:
         const SboCL_srt+328;
         const 38;
         const 206162624513;
 },
 _cbsXr() //  [R1]
         { []
         }
     {offset
       cbsXr: // global
           I64[Sp - 32] = block_cbsXz_info;
           _sbojU::P64 = P64[R1 + 7];
           _sbojV::P64 = P64[R1 + 15];
           _sbojX::P64 = P64[R1 + 31];
           _sbojZ::P64 = P64[R1 + 47];
           R1 = P64[R1 + 39];
           P64[Sp - 24] = _sbojV::P64;
           P64[Sp - 16] = _sbojX::P64;
           P64[Sp - 8] = _sbojZ::P64;
           P64[Sp] = _sbojU::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubsYQ; else goto cbsXB;
       ubsYQ: // global
           call _cbsXz(R1) args: 0, res: 0, upd: 0;
       cbsXB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsXr_info" {
     block_cbsXr_info:
         const _cbsXr;
         const 0;
         const 18446744069414584350;
         const ubsYZ_srtd;
 },
 section ""relreadonly" . ubsZ0_srtd" {
     ubsZ0_srtd:
         const SboCL_srt+328;
         const 38;
         const 206162624513;
 },
 _cbsXz() //  [R1]
         { []
         }
     {offset
       cbsXz: // global
           _cbsYH::P64 = R1 & 7;
           if (_cbsYH::P64 != 1) goto ubsYM; else goto cbsYC;
       ubsYM: // global
           if (_cbsYH::P64 != 2) goto cbsXI; else goto cbsYG;
       cbsXI: // global
           _sbokd::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbsXF_info;
           R1 = _sbokd::P64;
           if (R1 & 7 != 0) goto ubsYS; else goto cbsXJ;
       ubsYS: // global
           call _cbsXF(R1) args: 0, res: 0, upd: 0;
       cbsXJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbsYG: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbsYC: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsXz_info" {
     block_cbsXz_info:
         const _cbsXz;
         const 4;
         const 18446744069414584350;
         const ubsZ0_srtd;
 },
 _cbsXF() //  [R1]
         { []
         }
     {offset
       cbsXF: // global
           I64[Sp] = block_cbsXP_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubsYT; else goto cbsY9;
       ubsYT: // global
           call _cbsXP(R1) args: 0, res: 0, upd: 0;
       cbsY9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsXF_info" {
     block_cbsXF_info:
         const _cbsXF;
         const 4;
         const 12884901918;
         const SboCL_srt+616;
 },
 _cbsXP() //  [R1]
         { []
         }
     {offset
       cbsXP: // global
           if (R1 & 7 == 1) goto ubsYN; else goto cbsYk;
       ubsYN: // global
           Sp = Sp + 16;
           call _sbokl() args: 0, res: 0, upd: 0;
       cbsYk: // global
           _sboku::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbsYi_info;
           R1 = _sboku::P64;
           if (R1 & 7 != 0) goto ubsYU; else goto cbsYl;
       ubsYU: // global
           call _cbsYi(R1) args: 0, res: 0, upd: 0;
       cbsYl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsXP_info" {
     block_cbsXP_info:
         const _cbsXP;
         const 4;
         const 12884901918;
         const SboCL_srt+616;
 },
 _cbsYi() //  [R1]
         { []
         }
     {offset
       cbsYi: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubsYO; else goto cbsYv;
       ubsYO: // global
           Sp = Sp + 16;
           call _sbokl() args: 0, res: 0, upd: 0;
       cbsYv: // global
           _sbojV::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbsYt_info;
           R2 = _sbojV::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsYi_info" {
     block_cbsYi_info:
         const _cbsYi;
         const 4;
         const 12884901918;
         const SboCL_srt+616;
 },
 _cbsYt() //  [R1]
         { []
         }
     {offset
       cbsYt: // global
           _sbojZ::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbojZ::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbojZ::P64);
           Sp = Sp + 8;
           call _sbokl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbsYt_info" {
     block_cbsYt_info:
         const _cbsYt;
         const 3;
         const 12884901918;
         const SboCL_srt+616;
 },
 _sbokl() //  []
         { []
         }
     {offset
       sbokl: // global
           _sbojU::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbsXU_info;
           R2 = _sbojU::P64;
           _sbojX::P64 = P64[Sp];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbojX::P64;
           call GHC.IO.Device.getSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _cbsXU() //  [R1]
         { []
         }
     {offset
       cbsXU: // global
           I64[Sp - 8] = block_cbsXW_info;
           R3 = GHC.IO.Handle.hFileSize10_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.neqInteger#_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsXU_info" {
     block_cbsXU_info:
         const _cbsXU;
         const 0;
         const 12884901918;
         const SboCL_srt+616;
 },
 _cbsXW() //  [R1]
         { []
         }
     {offset
       cbsXW: // global
           if (R1 == 1) goto cbsY8; else goto cbsY4;
       cbsY8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbsY4: // global
           R1 = GHC.IO.Handle.hFileSize4_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsXW_info" {
     block_cbsXW_info:
         const _cbsXW;
         const 1;
         const 4294967326;
         const SboCL_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.279902222 UTC

[section ""data" . GHC.IO.Handle.hFileSize2_closure" {
     GHC.IO.Handle.hFileSize2_closure:
         const GHC.IO.Handle.hFileSize2_info;
         const 0;
 },
 GHC.IO.Handle.hFileSize2_entry() //  [R2]
         { []
         }
     {offset
       cbsZU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbsZV; else goto cbsZW;
       cbsZV: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFileSize2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbsZW: // global
           I64[Sp - 16] = block_cbsZR_info;
           _sbokH::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbokH::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hFileSize3_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize2_info" {
     GHC.IO.Handle.hFileSize2_info:
         const GHC.IO.Handle.hFileSize2_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const SboCL_srt+608;
 },
 _cbsZR() //  [R1]
         { []
         }
     {offset
       cbsZR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbsZZ; else goto cbsZY;
       cbsZZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbsZY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbsZR_info" {
     block_cbsZR_info:
         const _cbsZR;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.288408147 UTC

[section ""data" . GHC.IO.Handle.hFileSize1_closure" {
     GHC.IO.Handle.hFileSize1_closure:
         const GHC.IO.Handle.hFileSize1_info;
         const 0;
 },
 io_sbokV_entry() //  [R1]
         { []
         }
     {offset
       cbt0v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbt0z; else goto cbt0A;
       cbt0z: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbt0A: // global
           I64[Sp - 16] = block_cbt0q_info;
           _sbokR::P64 = P64[R1 + 15];
           R5 = _sbokR::P64;
           R4 = GHC.IO.Handle.hFileSize2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFileSize8_closure;
           P64[Sp - 8] = _sbokR::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbokV_info" {
     io_sbokV_info:
         const io_sbokV_entry;
         const 2;
         const 54043199823413259;
         const 4294967299;
         const SboCL_srt+456;
 },
 _cbt0q() //  [R1]
         { []
         }
     {offset
       cbt0q: // global
           I64[Sp] = block_cbt0s_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubt0F; else goto cbt0t;
       ubt0F: // global
           call _cbt0s(R1) args: 0, res: 0, upd: 0;
       cbt0t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0q_info" {
     block_cbt0q_info:
         const _cbt0q;
         const 1;
         const 30;
 },
 _cbt0s() //  [R1]
         { []
         }
     {offset
       cbt0s: // global
           I64[Sp] = block_cbt0y_info;
           R2 = P64[R1 + 7];
           _sbol2::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbol2::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0s_info" {
     block_cbt0s_info:
         const _cbt0s;
         const 1;
         const 30;
 },
 _cbt0y() //  []
         { []
         }
     {offset
       cbt0y: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0y_info" {
     block_cbt0y_info:
         const _cbt0y;
         const 1;
         const 30;
 },
 io_sbolb_entry() //  [R1]
         { []
         }
     {offset
       cbt0U: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbt0Y; else goto cbt0Z;
       cbt0Y: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbt0Z: // global
           I64[Sp - 16] = block_cbt0P_info;
           _sbol6::P64 = P64[R1 + 15];
           R5 = _sbol6::P64;
           R4 = GHC.IO.Handle.hFileSize2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFileSize8_closure;
           P64[Sp - 8] = _sbol6::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbolb_info" {
     io_sbolb_info:
         const io_sbolb_entry;
         const 2;
         const 54043199823413259;
         const 4294967299;
         const SboCL_srt+456;
 },
 _cbt0P() //  [R1]
         { []
         }
     {offset
       cbt0P: // global
           I64[Sp] = block_cbt0R_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubt14; else goto cbt0S;
       ubt14: // global
           call _cbt0R(R1) args: 0, res: 0, upd: 0;
       cbt0S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0P_info" {
     block_cbt0P_info:
         const _cbt0P;
         const 1;
         const 30;
 },
 _cbt0R() //  [R1]
         { []
         }
     {offset
       cbt0R: // global
           I64[Sp] = block_cbt0X_info;
           R2 = P64[R1 + 7];
           _sboli::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sboli::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0R_info" {
     block_cbt0R_info:
         const _cbt0R;
         const 1;
         const 30;
 },
 _cbt0X() //  []
         { []
         }
     {offset
       cbt0X: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0X_info" {
     block_cbt0X_info:
         const _cbt0X;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hFileSize1_entry() //  [R2]
         { []
         }
     {offset
       cbt19: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbt1a; else goto cbt1b;
       cbt1a: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFileSize1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt1b: // global
           I64[Sp - 8] = block_cbt0e_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubt1s; else goto cbt0f;
       ubt1s: // global
           call _cbt0e(R1) args: 0, res: 0, upd: 0;
       cbt0f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize1_info" {
     GHC.IO.Handle.hFileSize1_info:
         const GHC.IO.Handle.hFileSize1_entry;
         const 0;
         const 126100793861341198;
         const 8589934597;
         const SboCL_srt+456;
 },
 _cbt0e() //  [R1]
         { []
         }
     {offset
       cbt0e: // global
           if (R1 & 7 == 1) goto cbt16; else goto cbt17;
       cbt16: // global
           I64[Sp - 16] = block_cbt0j_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbt17: // global
           I64[Sp - 16] = block_cbt0I_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0e_info" {
     block_cbt0e_info:
         const _cbt0e;
         const 0;
         const 54043199823413278;
         const SboCL_srt+456;
 },
 _cbt0j() //  [R1]
         { []
         }
     {offset
       cbt0j: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt1f; else goto cbt1e;
       cbt1f: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbt1e: // global
           I64[Hp - 16] = io_sbokV_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbt0l::P64 = Hp - 15;
           if (R1 == 0) goto cbt1j; else goto cbt1i;
       cbt1j: // global
           R1 = _cbt0l::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbt1i: // global
           R1 = _cbt0l::P64;
           Sp = Sp + 24;
           call io_sbokV_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0j_info" {
     block_cbt0j_info:
         const _cbt0j;
         const 2;
         const 54043199823413278;
         const SboCL_srt+456;
 },
 _cbt0I() //  [R1]
         { []
         }
     {offset
       cbt0I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt1n; else goto cbt1m;
       cbt1n: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbt1m: // global
           I64[Hp - 16] = io_sbolb_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbt0K::P64 = Hp - 15;
           if (R1 == 0) goto cbt1r; else goto cbt1q;
       cbt1r: // global
           R1 = _cbt0K::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbt1q: // global
           R1 = _cbt0K::P64;
           Sp = Sp + 24;
           call io_sbolb_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt0I_info" {
     block_cbt0I_info:
         const _cbt0I;
         const 2;
         const 54043199823413278;
         const SboCL_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.309727004 UTC

[section ""data" . GHC.IO.Handle.hFileSize_closure" {
     GHC.IO.Handle.hFileSize_closure:
         const GHC.IO.Handle.hFileSize_info;
         const 0;
 },
 GHC.IO.Handle.hFileSize_entry() //  [R2]
         { []
         }
     {offset
       cbt2o: // global
           R2 = R2;
           call GHC.IO.Handle.hFileSize1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize_info" {
     GHC.IO.Handle.hFileSize_info:
         const GHC.IO.Handle.hFileSize_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.312835473 UTC

[section ""data" . lvl21_rbnX3_closure" {
     lvl21_rbnX3_closure:
         const GHC.Base.Just_con_info;
         const GHC.IO.Handle.Internals.handleFinalizer1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.323311927 UTC

[section ""data" . GHC.IO.Handle.hDuplicateTo1_closure" {
     GHC.IO.Handle.hDuplicateTo1_closure:
         const GHC.IO.Handle.hDuplicateTo1_info;
         const 0;
 },
 sat_sbolF_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt2Z: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbt30; else goto cbt31;
       cbt30: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt31: // global
           I64[Sp - 16] = block_cbt2W_info;
           R6 = R2;
           R5 = P64[R1 + 22];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[R1 + 6];
           _sbolz::P64 = R2;
           R2 = P64[R1 + 14];
           P64[Sp - 24] = lvl21_rbnX3_closure+2;
           P64[Sp - 8] = _sbolz::P64;
           Sp = Sp - 24;
           call dupHandleTo_rbnWN_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbolF_info" {
     sat_sbolF_info:
         const sat_sbolF_entry;
         const 3;
         const 12884901896;
         const 8589934597;
         const SboCL_srt+656;
 },
 _cbt2W() //  [R1]
         { []
         }
     {offset
       cbt2W: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt34; else goto cbt33;
       cbt34: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt33: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt2W_info" {
     block_cbt2W_info:
         const _cbt2W;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubt4R_srtd" {
     ubt4R_srtd:
         const SboCL_srt+176;
         const 64;
         const 17293822569102704641;
 },
 sat_sbolG_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt35: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbt36; else goto cbt37;
       cbt36: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt37: // global
           I64[Sp - 40] = block_cbt2P_info;
           _sbolu::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _sbolu::P64;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbolG_info" {
     sat_sbolG_info:
         const sat_sbolG_entry;
         const 3;
         const 18446744069414584328;
         const 8589934597;
         const ubt4R_srtd;
 },
 section ""relreadonly" . ubt4S_srtd" {
     ubt4S_srtd:
         const SboCL_srt+176;
         const 64;
         const 12682136550675316737;
 },
 _cbt2P() //  [R1]
         { []
         }
     {offset
       cbt2P: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbt3a; else goto cbt39;
       cbt3a: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt39: // global
           I64[Hp - 24] = sat_sbolF_info;
           _sbolo::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sbolo::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           R5 = Hp - 22;
           R4 = P64[Sp + 24];
           R3 = _sbolo::P64;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt2P_info" {
     block_cbt2P_info:
         const _cbt2P;
         const 4;
         const 18446744069414584350;
         const ubt4S_srtd;
 },
 sat_sbom4_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt3y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbt3z; else goto cbt3A;
       cbt3z: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt3A: // global
           I64[Sp - 16] = block_cbt3v_info;
           R6 = R2;
           R5 = P64[R1 + 22];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[R1 + 6];
           _sbolY::P64 = R2;
           R2 = P64[R1 + 14];
           P64[Sp - 24] = lvl21_rbnX3_closure+2;
           P64[Sp - 8] = _sbolY::P64;
           Sp = Sp - 24;
           call dupHandleTo_rbnWN_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbom4_info" {
     sat_sbom4_info:
         const sat_sbom4_entry;
         const 3;
         const 12884901896;
         const 8589934597;
         const SboCL_srt+656;
 },
 _cbt3v() //  [R1]
         { []
         }
     {offset
       cbt3v: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt3D; else goto cbt3C;
       cbt3D: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt3C: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt3v_info" {
     block_cbt3v_info:
         const _cbt3v;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubt4T_srtd" {
     ubt4T_srtd:
         const SboCL_srt+176;
         const 64;
         const 17293822569102704641;
 },
 sat_sbom5_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt3E: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbt3F; else goto cbt3G;
       cbt3F: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt3G: // global
           I64[Sp - 40] = block_cbt3o_info;
           _sbolT::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _sbolT::P64;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbom5_info" {
     sat_sbom5_info:
         const sat_sbom5_entry;
         const 3;
         const 18446744069414584328;
         const 8589934597;
         const ubt4T_srtd;
 },
 section ""relreadonly" . ubt4U_srtd" {
     ubt4U_srtd:
         const SboCL_srt+176;
         const 64;
         const 12682136550675316737;
 },
 _cbt3o() //  [R1]
         { []
         }
     {offset
       cbt3o: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbt3J; else goto cbt3I;
       cbt3J: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt3I: // global
           I64[Hp - 24] = sat_sbom4_info;
           _sbolo::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sbolo::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           R5 = Hp - 22;
           R4 = P64[Sp + 24];
           R3 = _sbolo::P64;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt3o_info" {
     block_cbt3o_info:
         const _cbt3o;
         const 4;
         const 18446744069414584350;
         const ubt4U_srtd;
 },
 sat_sbomm_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt43: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbt44; else goto cbt45;
       cbt44: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt45: // global
           I64[Sp - 16] = block_cbt40_info;
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 6];
           _sbomg::P64 = R2;
           R2 = P64[R1 + 14];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 8] = _sbomg::P64;
           Sp = Sp - 24;
           call dupHandleTo_rbnWN_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbomm_info" {
     sat_sbomm_info:
         const sat_sbomm_entry;
         const 4;
         const 4294967304;
         const 8589934597;
         const SboCL_srt+664;
 },
 _cbt40() //  [R1]
         { []
         }
     {offset
       cbt40: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt48; else goto cbt47;
       cbt48: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt47: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt40_info" {
     block_cbt40_info:
         const _cbt40;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubt4V_srtd" {
     ubt4V_srtd:
         const SboCL_srt+176;
         const 64;
         const 16140901064495857665;
 },
 sat_sbomn_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt49: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbt4a; else goto cbt4b;
       cbt4a: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt4b: // global
           I64[Sp - 48] = block_cbt3T_info;
           _sbomb::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 14];
           P64[Sp - 24] = P64[R1 + 22];
           P64[Sp - 16] = P64[R1 + 30];
           P64[Sp - 8] = _sbomb::P64;
           Sp = Sp - 48;
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbomn_info" {
     sat_sbomn_info:
         const sat_sbomn_entry;
         const 4;
         const 18446744069414584328;
         const 8589934597;
         const ubt4V_srtd;
 },
 section ""relreadonly" . ubt4W_srtd" {
     ubt4W_srtd:
         const SboCL_srt+176;
         const 64;
         const 11529215046068469761;
 },
 _cbt3T() //  [R1]
         { []
         }
     {offset
       cbt3T: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbt4e; else goto cbt4d;
       cbt4e: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt4d: // global
           I64[Hp - 32] = sat_sbomm_info;
           _sbolo::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sbolo::P64;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R5 = Hp - 30;
           R4 = P64[Sp + 24];
           R3 = _sbolo::P64;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt3T_info" {
     block_cbt3T_info:
         const _cbt3T;
         const 5;
         const 18446744069414584350;
         const ubt4W_srtd;
 },
 section ""relreadonly" . ubt4X_srtd" {
     ubt4X_srtd:
         const SboCL_srt+176;
         const 66;
         const 17293822569102704645;
         const 3;
 },
 GHC.IO.Handle.hDuplicateTo1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbt4j: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbt4k; else goto cbt4l;
       cbt4k: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hDuplicateTo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbt4l: // global
           I64[Sp - 16] = block_cbt2A_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubt4Q; else goto cbt2B;
       ubt4Q: // global
           call _cbt2A(R1) args: 0, res: 0, upd: 0;
       cbt2B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicateTo1_info" {
     GHC.IO.Handle.hDuplicateTo1_info:
         const GHC.IO.Handle.hDuplicateTo1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubt4X_srtd;
 },
 section ""relreadonly" . ubt4Y_srtd" {
     ubt4Y_srtd:
         const SboCL_srt+176;
         const 65;
         const 17293822569102704645;
         const 1;
 },
 _cbt2A() //  [R1]
         { []
         }
     {offset
       cbt2A: // global
           _sbolm::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbt4g; else goto cbt4h;
       cbt4g: // global
           I64[Sp - 16] = block_cbt2F_info;
           _sbolo::P64 = R1;
           _sbolp::P64 = P64[R1 + 7];
           _sbolq::P64 = P64[R1 + 15];
           R1 = _sbolm::P64;
           P64[Sp - 8] = _sbolq::P64;
           P64[Sp] = _sbolp::P64;
           P64[Sp + 8] = _sbolo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubt4M; else goto cbt2G;
       ubt4M: // global
           call _cbt2F(R1) args: 0, res: 0, upd: 0;
       cbt2G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbt4h: // global
           I64[Sp - 24] = block_cbt3d_info;
           _sbolo::P64 = R1;
           _sbolK::P64 = P64[R1 + 6];
           _sbolL::P64 = P64[R1 + 14];
           _sbolM::P64 = P64[R1 + 22];
           R1 = _sbolm::P64;
           P64[Sp - 16] = _sbolL::P64;
           P64[Sp - 8] = _sbolM::P64;
           P64[Sp] = _sbolK::P64;
           P64[Sp + 8] = _sbolo::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubt4N; else goto cbt3e;
       ubt4N: // global
           call _cbt3d(R1) args: 0, res: 0, upd: 0;
       cbt3e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt2A_info" {
     block_cbt2A_info:
         const _cbt2A;
         const 1;
         const 18446744069414584350;
         const ubt4Y_srtd;
 },
 section ""relreadonly" . ubt4Z_srtd" {
     ubt4Z_srtd:
         const SboCL_srt+176;
         const 65;
         const 17293822569102704645;
         const 1;
 },
 _cbt2F() //  [R1]
         { []
         }
     {offset
       cbt2F: // global
           if (R1 & 7 == 1) goto cbt4o; else goto ubt4L;
       cbt4o: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbt4r; else goto cbt4q;
       cbt4r: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt4q: // global
           _sbolt::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sbolG_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R5 = Hp - 22;
           R4 = _sbolt::P64;
           R3 = R1;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wwithHandle__'_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       ubt4L: // global
           Sp = Sp + 24;
           call _cbt4A() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbt2F_info" {
     block_cbt2F_info:
         const _cbt2F;
         const 3;
         const 18446744069414584350;
         const ubt4Z_srtd;
 },
 section ""relreadonly" . ubt50_srtd" {
     ubt50_srtd:
         const SboCL_srt+176;
         const 65;
         const 17293822569102704645;
         const 1;
 },
 _cbt3d() //  [R1]
         { []
         }
     {offset
       cbt3d: // global
           if (R1 & 7 == 1) goto ubt4K; else goto cbt4B;
       ubt4K: // global
           Sp = Sp + 32;
           call _cbt4A() args: 0, res: 0, upd: 0;
       cbt4B: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbt4E; else goto cbt4D;
       cbt4E: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt4D: // global
           _sbolR::P64 = P64[R1 + 14];
           _sbolS::P64 = P64[R1 + 22];
           I64[Hp - 24] = sat_sbom5_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 16] = block_cbt3K_info;
           R5 = Hp - 22;
           R4 = _sbolS::P64;
           R3 = R1;
           R2 = lvl1_rbnWC_closure;
           P64[Sp - 8] = _sbolR::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wwithHandle__'_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt3d_info" {
     block_cbt3d_info:
         const _cbt3d;
         const 4;
         const 18446744069414584350;
         const ubt50_srtd;
 },
 _cbt4A() //  []
         { []
         }
     {offset
       cbt4A: // global
           R2 = P64[Sp];
           Sp = Sp + 8;
           call ioe_dupHandlesNotCompatible_rbnWF_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubt51_srtd" {
     ubt51_srtd:
         const SboCL_srt+176;
         const 65;
         const 16140901064495857665;
         const 1;
 },
 _cbt3K() //  [R1]
         { []
         }
     {offset
       cbt3K: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbt4H; else goto cbt4G;
       cbt4H: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt4G: // global
           I64[Hp - 64] = GHC.MVar.MVar_con_info;
           P64[Hp - 56] = P64[Sp + 32];
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = sat_sbomn_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 46;
           R5 = Hp - 30;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.$wwithHandle__'_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt3K_info" {
     block_cbt3K_info:
         const _cbt3K;
         const 6;
         const 18446744069414584350;
         const ubt51_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.363211613 UTC

[section ""data" . GHC.IO.Handle.hDuplicateTo_closure" {
     GHC.IO.Handle.hDuplicateTo_closure:
         const GHC.IO.Handle.hDuplicateTo_info;
         const 0;
 },
 GHC.IO.Handle.hDuplicateTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cbt6Y: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hDuplicateTo1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicateTo_info" {
     GHC.IO.Handle.hDuplicateTo_info:
         const GHC.IO.Handle.hDuplicateTo_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SboCL_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.366612816 UTC

[section ""cstring" . lvl22_rbnX4_bytes" {
     lvl22_rbnX4_bytes:
         I8[] [104,68,117,112,108,105,99,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.368788023 UTC

[section ""data" . lvl23_rbnX5_closure" {
     lvl23_rbnX5_closure:
         const lvl23_rbnX5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_rbnX5_entry() //  [R1]
         { []
         }
     {offset
       cbt7c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbt7d; else goto cbt7e;
       cbt7d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbt7e: // global
           (_cbt79::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbt79::I64 == 0) goto cbt7b; else goto cbt7a;
       cbt7b: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbt7a: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbt79::I64;
           R2 = lvl22_rbnX4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_rbnX5_info" {
     lvl23_rbnX5_info:
         const lvl23_rbnX5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.372323974 UTC

[section ""cstring" . lvl24_rbnX6_bytes" {
     lvl24_rbnX6_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,73,79,47,72,97,110,100,108,101,46,104,115,58,54,50,54,58,51,45,51,51]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.374617309 UTC

[section ""data" . lvl25_rbnX7_closure" {
     lvl25_rbnX7_closure:
         const lvl25_rbnX7_info;
         const 0;
 },
 lvl25_rbnX7_entry() //  []
         { []
         }
     {offset
       cbt7t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbt7u; else goto cbt7v;
       cbt7u: // global
           R1 = lvl25_rbnX7_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbt7v: // global
           I64[Sp - 8] = block_cbt7r_info;
           R2 = lvl24_rbnX6_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl25_rbnX7_info" {
     lvl25_rbnX7_info:
         const lvl25_rbnX7_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SboCL_srt+704;
 },
 _cbt7r() //  [R1]
         { []
         }
     {offset
       cbt7r: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt7r_info" {
     block_cbt7r_info:
         const _cbt7r;
         const 0;
         const 4294967326;
         const SboCL_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.380155595 UTC

[section ""cstring" . lvl26_rbnX8_bytes" {
     lvl26_rbnX8_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,73,79,47,72,97,110,100,108,101,46,104,115,58,54,50,51,58,51,45,51,53]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.382407771 UTC

[section ""data" . lvl27_rbnX9_closure" {
     lvl27_rbnX9_closure:
         const lvl27_rbnX9_info;
         const 0;
 },
 lvl27_rbnX9_entry() //  []
         { []
         }
     {offset
       cbt7O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbt7P; else goto cbt7Q;
       cbt7P: // global
           R1 = lvl27_rbnX9_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbt7Q: // global
           I64[Sp - 8] = block_cbt7M_info;
           R2 = lvl26_rbnX8_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl27_rbnX9_info" {
     lvl27_rbnX9_info:
         const lvl27_rbnX9_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SboCL_srt+712;
 },
 _cbt7M() //  [R1]
         { []
         }
     {offset
       cbt7M: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt7M_info" {
     block_cbt7M_info:
         const _cbt7M;
         const 0;
         const 4294967326;
         const SboCL_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.39651341 UTC

[section ""data" . GHC.IO.Handle.hDuplicate1_closure" {
     GHC.IO.Handle.hDuplicate1_closure:
         const GHC.IO.Handle.hDuplicate1_info;
         const 0;
 },
 section ""relreadonly" . ubtaJ_srtd" {
     ubtaJ_srtd:
         const SboCL_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 sat_sbon0_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt8j: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cbt8t; else goto cbt8u;
       cbt8t: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt8u: // global
           I64[Sp - 16] = block_cbt8g_info;
           _sbomv::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbomv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubt8B; else goto cbt8h;
       ubt8B: // global
           call _cbt8g(R1) args: 0, res: 0, upd: 0;
       cbt8h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbon0_info" {
     sat_sbon0_info:
         const sat_sbon0_entry;
         const 1;
         const 18446744069414584329;
         const 8589934597;
         const ubtaJ_srtd;
 },
 section ""relreadonly" . ubtaK_srtd" {
     ubtaK_srtd:
         const SboCL_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 _cbt8g() //  [R1]
         { []
         }
     {offset
       cbt8g: // global
           I64[Sp - 40] = block_cbt8m_info;
           R2 = R1;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 31];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8g_info" {
     block_cbt8g_info:
         const _cbt8g;
         const 1;
         const 18446744069414584350;
         const ubtaK_srtd;
 },
 section ""relreadonly" . ubtaL_srtd" {
     ubtaL_srtd:
         const SboCL_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbt8m() //  []
         { []
         }
     {offset
       cbt8m: // global
           I64[Sp] = block_cbt8o_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 16;
           call GHC.IO.Device.dup_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8m_info" {
     block_cbt8m_info:
         const _cbt8m;
         const 6;
         const 18446744069414584350;
         const ubtaL_srtd;
 },
 section ""relreadonly" . ubtaM_srtd" {
     ubtaM_srtd:
         const SboCL_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbt8o() //  [R1]
         { []
         }
     {offset
       cbt8o: // global
           I64[Sp + 32] = block_cbt8q_info;
           R6 = P64[Sp + 48];
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = P64[Sp + 40];
           P64[Sp + 24] = lvl21_rbnX3_closure+2;
           Sp = Sp + 8;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8o_info" {
     block_cbt8o_info:
         const _cbt8o;
         const 518;
         const 18446744069414584350;
         const ubtaM_srtd;
 },
 _cbt8q() //  [R1]
         { []
         }
     {offset
       cbt8q: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt8A; else goto cbt8z;
       cbt8A: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt8z: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8q_info" {
     block_cbt8q_info:
         const _cbt8q;
         const 130;
         const 30;
 },
 section ""relreadonly" . ubtaN_srtd" {
     ubtaN_srtd:
         const SboCL_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 sat_sbonx_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt8M: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cbt8W; else goto cbt8X;
       cbt8W: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt8X: // global
           I64[Sp - 16] = block_cbt8J_info;
           _sbon1::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbon1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubt94; else goto cbt8K;
       ubt94: // global
           call _cbt8J(R1) args: 0, res: 0, upd: 0;
       cbt8K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbonx_info" {
     sat_sbonx_info:
         const sat_sbonx_entry;
         const 1;
         const 18446744069414584329;
         const 8589934597;
         const ubtaN_srtd;
 },
 section ""relreadonly" . ubtaO_srtd" {
     ubtaO_srtd:
         const SboCL_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 _cbt8J() //  [R1]
         { []
         }
     {offset
       cbt8J: // global
           I64[Sp - 40] = block_cbt8P_info;
           R2 = R1;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 31];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8J_info" {
     block_cbt8J_info:
         const _cbt8J;
         const 1;
         const 18446744069414584350;
         const ubtaO_srtd;
 },
 section ""relreadonly" . ubtaP_srtd" {
     ubtaP_srtd:
         const SboCL_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbt8P() //  []
         { []
         }
     {offset
       cbt8P: // global
           I64[Sp] = block_cbt8R_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 16;
           call GHC.IO.Device.dup_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8P_info" {
     block_cbt8P_info:
         const _cbt8P;
         const 6;
         const 18446744069414584350;
         const ubtaP_srtd;
 },
 section ""relreadonly" . ubtaQ_srtd" {
     ubtaQ_srtd:
         const SboCL_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbt8R() //  [R1]
         { []
         }
     {offset
       cbt8R: // global
           I64[Sp + 32] = block_cbt8T_info;
           R6 = P64[Sp + 48];
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = P64[Sp + 40];
           P64[Sp + 24] = lvl21_rbnX3_closure+2;
           Sp = Sp + 8;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8R_info" {
     block_cbt8R_info:
         const _cbt8R;
         const 518;
         const 18446744069414584350;
         const ubtaQ_srtd;
 },
 _cbt8T() //  [R1]
         { []
         }
     {offset
       cbt8T: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt93; else goto cbt92;
       cbt93: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt92: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt8T_info" {
     block_cbt8T_info:
         const _cbt8T;
         const 130;
         const 30;
 },
 sat_sboop_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt9y: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbt9E; else goto cbt9F;
       cbt9E: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt9F: // global
           I64[Sp - 32] = block_cbt9v_info;
           _sbon1::P64 = P64[R1 + 6];
           _sbonF::P64 = P64[R1 + 14];
           _sbonI::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sbon1::P64;
           P64[Sp - 16] = _sbonF::P64;
           P64[Sp - 8] = _sbonI::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubt9K; else goto cbt9w;
       ubt9K: // global
           call _cbt9v(R1) args: 0, res: 0, upd: 0;
       cbt9w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sboop_info" {
     sat_sboop_info:
         const sat_sboop_entry;
         const 3;
         const 4294967304;
         const 8589934597;
         const SboCL_srt+728;
 },
 _cbt9v() //  [R1]
         { []
         }
     {offset
       cbt9v: // global
           _sbonF::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbt9B_info;
           R6 = P64[Sp + 8];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sbonF::P64;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt9v_info" {
     block_cbt9v_info:
         const _cbt9v;
         const 3;
         const 4294967326;
         const SboCL_srt+728;
 },
 _cbt9B() //  [R1]
         { []
         }
     {offset
       cbt9B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt9J; else goto cbt9I;
       cbt9J: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt9I: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt9B_info" {
     block_cbt9B_info:
         const _cbt9B;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtaR_srtd" {
     ubtaR_srtd:
         const SboCL_srt+96;
         const 81;
         const 1;
         const 98816;
 },
 sat_sboou_entry() //  [R1, R2]
         { []
         }
     {offset
       cbt9L: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbt9P; else goto cbt9Q;
       cbt9P: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbt9Q: // global
           I64[Sp - 40] = block_cbt9j_info;
           _sbomu::P64 = P64[R1 + 6];
           _sbon1::P64 = P64[R1 + 14];
           _sbonD::P64 = P64[R1 + 22];
           _sbonF::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 32] = _sbomu::P64;
           P64[Sp - 24] = _sbon1::P64;
           P64[Sp - 16] = _sbonD::P64;
           P64[Sp - 8] = _sbonF::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubt9Y; else goto cbt9k;
       ubt9Y: // global
           call _cbt9j(R1) args: 0, res: 0, upd: 0;
       cbt9k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sboou_info" {
     sat_sboou_info:
         const sat_sboou_entry;
         const 4;
         const 18446744069414584328;
         const 8589934597;
         const ubtaR_srtd;
 },
 section ""relreadonly" . ubtaS_srtd" {
     ubtaS_srtd:
         const SboCL_srt+96;
         const 81;
         const 1;
         const 98816;
 },
 _cbt9j() //  [R1]
         { []
         }
     {offset
       cbt9j: // global
           I64[Sp - 8] = block_cbt9o_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt9j_info" {
     block_cbt9j_info:
         const _cbt9j;
         const 4;
         const 18446744069414584350;
         const ubtaS_srtd;
 },
 _cbt9o() //  [R1]
         { []
         }
     {offset
       cbt9o: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbt9U; else goto cbt9T;
       cbt9U: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt9T: // global
           I64[Hp - 24] = sat_sboop_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_cbt9M_info;
           R5 = Hp - 22;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = lvl7_rbnWP_closure;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt9o_info" {
     block_cbt9o_info:
         const _cbt9o;
         const 5;
         const 828928688158;
         const SboCL_srt+680;
 },
 _cbt9M() //  [R1]
         { []
         }
     {offset
       cbt9M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbt9X; else goto cbt9W;
       cbt9X: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbt9W: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt9M_info" {
     block_cbt9M_info:
         const _cbt9M;
         const 1925;
         const 30;
 },
 section ""relreadonly" . ubtaT_srtd" {
     ubtaT_srtd:
         const SboCL_srt+96;
         const 83;
         const 1;
         const 512576;
 },
 GHC.IO.Handle.hDuplicate1_entry() //  [R2]
         { []
         }
     {offset
       cbta3: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbta4; else goto cbta5;
       cbta4: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hDuplicate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbta5: // global
           I64[Sp - 8] = block_cbt86_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtaH; else goto cbt87;
       ubtaH: // global
           call _cbt86(R1) args: 0, res: 0, upd: 0;
       cbt87: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicate1_info" {
     GHC.IO.Handle.hDuplicate1_info:
         const GHC.IO.Handle.hDuplicate1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtaT_srtd;
 },
 section ""relreadonly" . ubtaU_srtd" {
     ubtaU_srtd:
         const SboCL_srt+96;
         const 83;
         const 1;
         const 381504;
 },
 _cbt86() //  [R1]
         { []
         }
     {offset
       cbt86: // global
           if (R1 & 7 == 1) goto cbta0; else goto cbta1;
       cbta0: // global
           Hp = Hp + 16;
           _sbomu::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtab; else goto cbta7;
       cbta7: // global
           _sbomv::P64 = P64[_sbomu::P64 + 7];
           _sbomw::P64 = P64[_sbomu::P64 + 15];
           I64[Hp - 8] = sat_sbon0_info;
           P64[Hp] = _sbomv::P64;
           R5 = Hp - 6;
           R4 = _sbomw::P64;
           R3 = _sbomu::P64;
           R2 = lvl23_rbnX5_closure;
           Sp = Sp + 8;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cbta1: // global
           Hp = Hp + 16;
           _sbomu::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtab; else goto cbtaa;
       cbtab: // global
           HpAlloc = 16;
           R1 = _sbomu::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtaa: // global
           _sbon1::P64 = P64[_sbomu::P64 + 6];
           _sbon2::P64 = P64[_sbomu::P64 + 14];
           _sbon3::P64 = P64[_sbomu::P64 + 22];
           I64[Hp - 8] = sat_sbonx_info;
           P64[Hp] = _sbon1::P64;
           I64[Sp - 24] = block_cbt95_info;
           R5 = Hp - 6;
           R4 = _sbon3::P64;
           R3 = _sbomu::P64;
           R2 = lvl23_rbnX5_closure;
           P64[Sp - 16] = _sbon1::P64;
           P64[Sp - 8] = _sbon2::P64;
           P64[Sp] = _sbomu::P64;
           Sp = Sp - 24;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt86_info" {
     block_cbt86_info:
         const _cbt86;
         const 0;
         const 18446744069414584350;
         const ubtaU_srtd;
 },
 section ""relreadonly" . ubtaV_srtd" {
     ubtaV_srtd:
         const SboCL_srt+96;
         const 83;
         const 1;
         const 381440;
 },
 _cbt95() //  [R1]
         { []
         }
     {offset
       cbt95: // global
           I64[Sp] = block_cbt97_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtaG; else goto cbt98;
       ubtaG: // global
           call _cbt97(R1) args: 0, res: 0, upd: 0;
       cbt98: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt95_info" {
     block_cbt95_info:
         const _cbt95;
         const 3;
         const 18446744069414584350;
         const ubtaV_srtd;
 },
 section ""relreadonly" . ubtaW_srtd" {
     ubtaW_srtd:
         const SboCL_srt+96;
         const 83;
         const 1;
         const 381440;
 },
 _cbt97() //  [R1]
         { []
         }
     {offset
       cbt97: // global
           if (R1 & 7 == 1) goto cbtah; else goto cbtaD;
       cbtah: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbtak; else goto cbtaj;
       cbtak: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtaj: // global
           _sbonD::P64 = P64[R1 + 15];
           I64[Hp - 64] = GHC.MVar.MVar_con_info;
           P64[Hp - 56] = _sbonD::P64;
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = sat_sboou_info;
           _sbomu::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sbomu::P64;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sbonD::P64;
           P64[Hp] = Hp - 46;
           I64[Sp] = block_cbtad_info;
           R5 = Hp - 30;
           R4 = P64[Sp + 16];
           R3 = _sbomu::P64;
           R2 = lvl23_rbnX5_closure;
           P64[Sp + 24] = _sbonD::P64;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
       cbtaD: // global
           Sp = Sp + 32;
           call lvl27_rbnX9_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbt97_info" {
     block_cbt97_info:
         const _cbt97;
         const 3;
         const 18446744069414584350;
         const ubtaW_srtd;
 },
 _cbtad() //  [R1]
         { []
         }
     {offset
       cbtad: // global
           I64[Sp] = block_cbtaf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtaI; else goto cbtam;
       ubtaI: // global
           call _cbtaf(R1) args: 0, res: 0, upd: 0;
       cbtam: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtad_info" {
     block_cbtad_info:
         const _cbtad;
         const 131;
         const 4294967326;
         const SboCL_srt+704;
 },
 _cbtaf() //  [R1]
         { []
         }
     {offset
       cbtaf: // global
           if (R1 & 7 == 1) goto cbtas; else goto cbtaz;
       cbtas: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbtav; else goto cbtau;
       cbtav: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtau: // global
           _sbooA::P64 = P64[R1 + 15];
           I64[Hp - 24] = GHC.IO.Handle.Types.DuplexHandle_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sbooA::P64;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbtaz: // global
           Sp = Sp + 32;
           call lvl25_rbnX7_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtaf_info" {
     block_cbtaf_info:
         const _cbtaf;
         const 131;
         const 4294967326;
         const SboCL_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.444976916 UTC

[section ""data" . GHC.IO.Handle.hDuplicate_closure" {
     GHC.IO.Handle.hDuplicate_closure:
         const GHC.IO.Handle.hDuplicate_info;
         const 0;
 },
 GHC.IO.Handle.hDuplicate_entry() //  [R2]
         { []
         }
     {offset
       cbtd9: // global
           R2 = R2;
           call GHC.IO.Handle.hDuplicate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicate_info" {
     GHC.IO.Handle.hDuplicate_info:
         const GHC.IO.Handle.hDuplicate_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.448224125 UTC

[section ""cstring" . GHC.IO.Handle.hGetEcho4_bytes" {
     GHC.IO.Handle.hGetEcho4_bytes:
         I8[] [104,71,101,116,69,99,104,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.450925962 UTC

[section ""data" . GHC.IO.Handle.hGetEcho3_closure" {
     GHC.IO.Handle.hGetEcho3_closure:
         const GHC.IO.Handle.hGetEcho3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetEcho3_entry() //  [R1]
         { []
         }
     {offset
       cbtdn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtdo; else goto cbtdp;
       cbtdo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtdp: // global
           (_cbtdk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtdk::I64 == 0) goto cbtdm; else goto cbtdl;
       cbtdm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtdl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtdk::I64;
           R2 = GHC.IO.Handle.hGetEcho4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho3_info" {
     GHC.IO.Handle.hGetEcho3_info:
         const GHC.IO.Handle.hGetEcho3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.455891013 UTC

[section ""data" . GHC.IO.Handle.hGetEcho2_closure" {
     GHC.IO.Handle.hGetEcho2_closure:
         const GHC.IO.Handle.hGetEcho2_info;
         const 0;
 },
 GHC.IO.Handle.hGetEcho2_entry() //  [R2]
         { []
         }
     {offset
       cbtdE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbtdF; else goto cbtdG;
       cbtdF: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtdG: // global
           I64[Sp - 8] = block_cbtdB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubte4; else goto cbtdC;
       ubte4: // global
           call _cbtdB(R1) args: 0, res: 0, upd: 0;
       cbtdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho2_info" {
     GHC.IO.Handle.hGetEcho2_info:
         const GHC.IO.Handle.hGetEcho2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SboCL_srt+760;
 },
 _cbtdB() //  [R1]
         { []
         }
     {offset
       cbtdB: // global
           I64[Sp - 24] = block_cbtdJ_info;
           _sbooK::P64 = R1;
           _sbooL::P64 = P64[R1 + 7];
           _sbooO::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbooL::P64;
           P64[Sp - 8] = _sbooO::P64;
           P64[Sp] = _sbooK::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubte3; else goto cbtdL;
       ubte3: // global
           call _cbtdJ(R1) args: 0, res: 0, upd: 0;
       cbtdL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtdB_info" {
     block_cbtdB_info:
         const _cbtdB;
         const 0;
         const 4294967326;
         const SboCL_srt+768;
 },
 _cbtdJ() //  [R1]
         { []
         }
     {offset
       cbtdJ: // global
           if (R1 & 7 == 1) goto cbte1; else goto cbtdU;
       cbte1: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbtdU: // global
           _sbooO::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbtdP_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbooO::P64;
           call GHC.IO.Device.getEcho_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtdJ_info" {
     block_cbtdJ_info:
         const _cbtdJ;
         const 3;
         const 4294967326;
         const SboCL_srt+768;
 },
 _cbtdP() //  [R1]
         { []
         }
     {offset
       cbtdP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtdX; else goto cbtdW;
       cbtdX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtdW: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtdP_info" {
     block_cbtdP_info:
         const _cbtdP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.468712972 UTC

[section ""data" . GHC.IO.Handle.hGetEcho1_closure" {
     GHC.IO.Handle.hGetEcho1_closure:
         const GHC.IO.Handle.hGetEcho1_info;
         const 0;
 },
 section ""relreadonly" . ubtfZ_srtd" {
     ubtfZ_srtd:
         const SboCL_srt+456;
         const 41;
         const 1374389534721;
 },
 io_sbopj_entry() //  [R1]
         { []
         }
     {offset
       cbteS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbteW; else goto cbteX;
       cbteW: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbteX: // global
           I64[Sp - 16] = block_cbteN_info;
           _sbopf::P64 = P64[R1 + 15];
           R5 = _sbopf::P64;
           R4 = GHC.IO.Handle.hGetEcho2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho3_closure;
           P64[Sp - 8] = _sbopf::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbopj_info" {
     io_sbopj_info:
         const io_sbopj_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubtfZ_srtd;
 },
 _cbteN() //  [R1]
         { []
         }
     {offset
       cbteN: // global
           I64[Sp] = block_cbteP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtf2; else goto cbteQ;
       ubtf2: // global
           call _cbteP(R1) args: 0, res: 0, upd: 0;
       cbteQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbteN_info" {
     block_cbteN_info:
         const _cbteN;
         const 1;
         const 30;
 },
 _cbteP() //  [R1]
         { []
         }
     {offset
       cbteP: // global
           I64[Sp] = block_cbteV_info;
           R2 = P64[R1 + 7];
           _sbopq::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbopq::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbteP_info" {
     block_cbteP_info:
         const _cbteP;
         const 1;
         const 30;
 },
 _cbteV() //  []
         { []
         }
     {offset
       cbteV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbteV_info" {
     block_cbteV_info:
         const _cbteV;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtg0_srtd" {
     ubtg0_srtd:
         const SboCL_srt+456;
         const 41;
         const 1374389534721;
 },
 io_sbopz_entry() //  [R1]
         { []
         }
     {offset
       cbtfh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtfl; else goto cbtfm;
       cbtfl: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtfm: // global
           I64[Sp - 16] = block_cbtfc_info;
           _sbopu::P64 = P64[R1 + 15];
           R5 = _sbopu::P64;
           R4 = GHC.IO.Handle.hGetEcho2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho3_closure;
           P64[Sp - 8] = _sbopu::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbopz_info" {
     io_sbopz_info:
         const io_sbopz_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubtg0_srtd;
 },
 _cbtfc() //  [R1]
         { []
         }
     {offset
       cbtfc: // global
           I64[Sp] = block_cbtfe_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtfr; else goto cbtff;
       ubtfr: // global
           call _cbtfe(R1) args: 0, res: 0, upd: 0;
       cbtff: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtfc_info" {
     block_cbtfc_info:
         const _cbtfc;
         const 1;
         const 30;
 },
 _cbtfe() //  [R1]
         { []
         }
     {offset
       cbtfe: // global
           I64[Sp] = block_cbtfk_info;
           R2 = P64[R1 + 7];
           _sbopG::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbopG::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtfe_info" {
     block_cbtfe_info:
         const _cbtfe;
         const 1;
         const 30;
 },
 _cbtfk() //  []
         { []
         }
     {offset
       cbtfk: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtfk_info" {
     block_cbtfk_info:
         const _cbtfk;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtg1_srtd" {
     ubtg1_srtd:
         const SboCL_srt+160;
         const 79;
         const 137438953473;
         const 26624;
 },
 GHC.IO.Handle.hGetEcho1_entry() //  [R2]
         { []
         }
     {offset
       cbtfw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtfx; else goto cbtfy;
       cbtfx: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtfy: // global
           I64[Sp - 16] = block_cbtet_info;
           _sbop7::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbop7::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hGetEcho5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho1_info" {
     GHC.IO.Handle.hGetEcho1_info:
         const GHC.IO.Handle.hGetEcho1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtg1_srtd;
 },
 section ""relreadonly" . ubtg2_srtd" {
     ubtg2_srtd:
         const SboCL_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbtet() //  [R1]
         { []
         }
     {offset
       cbtet: // global
           I64[Sp] = block_cbtev_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtfX; else goto cbtew;
       ubtfX: // global
           call _cbtev(R1) args: 0, res: 0, upd: 0;
       cbtew: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtet_info" {
     block_cbtet_info:
         const _cbtet;
         const 1;
         const 18446744069414584350;
         const ubtg2_srtd;
 },
 section ""relreadonly" . ubtg3_srtd" {
     ubtg3_srtd:
         const SboCL_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbtev() //  [R1]
         { []
         }
     {offset
       cbtev: // global
           if (R1 & 7 == 1) goto cbtft; else goto cbtfu;
       cbtft: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbtfu: // global
           _sbop7::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbteB_info;
           R1 = _sbop7::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubtfY; else goto cbteC;
       ubtfY: // global
           call _cbteB(R1) args: 0, res: 0, upd: 0;
       cbteC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtev_info" {
     block_cbtev_info:
         const _cbtev;
         const 1;
         const 18446744069414584350;
         const ubtg3_srtd;
 },
 section ""relreadonly" . ubtg4_srtd" {
     ubtg4_srtd:
         const SboCL_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbteB() //  [R1]
         { []
         }
     {offset
       cbteB: // global
           if (R1 & 7 == 1) goto cbtfF; else goto cbtfO;
       cbtfF: // global
           I64[Sp - 16] = block_cbteG_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtfO: // global
           I64[Sp - 16] = block_cbtf5_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbteB_info" {
     block_cbteB_info:
         const _cbteB;
         const 0;
         const 18446744069414584350;
         const ubtg4_srtd;
 },
 section ""relreadonly" . ubtg5_srtd" {
     ubtg5_srtd:
         const SboCL_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbteG() //  [R1]
         { []
         }
     {offset
       cbteG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtfI; else goto cbtfH;
       cbtfI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtfH: // global
           I64[Hp - 16] = io_sbopj_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbteI::P64 = Hp - 15;
           if (R1 == 0) goto cbtfM; else goto cbtfL;
       cbtfM: // global
           R1 = _cbteI::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtfL: // global
           R1 = _cbteI::P64;
           Sp = Sp + 24;
           call io_sbopj_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbteG_info" {
     block_cbteG_info:
         const _cbteG;
         const 2;
         const 18446744069414584350;
         const ubtg5_srtd;
 },
 section ""relreadonly" . ubtg6_srtd" {
     ubtg6_srtd:
         const SboCL_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbtf5() //  [R1]
         { []
         }
     {offset
       cbtf5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtfR; else goto cbtfQ;
       cbtfR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtfQ: // global
           I64[Hp - 16] = io_sbopz_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtf7::P64 = Hp - 15;
           if (R1 == 0) goto cbtfV; else goto cbtfU;
       cbtfV: // global
           R1 = _cbtf7::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtfU: // global
           R1 = _cbtf7::P64;
           Sp = Sp + 24;
           call io_sbopz_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtf5_info" {
     block_cbtf5_info:
         const _cbtf5;
         const 2;
         const 18446744069414584350;
         const ubtg6_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.497162574 UTC

[section ""data" . GHC.IO.Handle.hGetEcho_closure" {
     GHC.IO.Handle.hGetEcho_closure:
         const GHC.IO.Handle.hGetEcho_info;
         const 0;
 },
 GHC.IO.Handle.hGetEcho_entry() //  [R2]
         { []
         }
     {offset
       cbthk: // global
           R2 = R2;
           call GHC.IO.Handle.hGetEcho1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho_info" {
     GHC.IO.Handle.hGetEcho_info:
         const GHC.IO.Handle.hGetEcho_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.500337828 UTC

[section ""cstring" . GHC.IO.Handle.hSetEcho3_bytes" {
     GHC.IO.Handle.hSetEcho3_bytes:
         I8[] [104,83,101,116,69,99,104,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.502436773 UTC

[section ""data" . GHC.IO.Handle.hSetEcho2_closure" {
     GHC.IO.Handle.hSetEcho2_closure:
         const GHC.IO.Handle.hSetEcho2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hSetEcho2_entry() //  [R1]
         { []
         }
     {offset
       cbthy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbthz; else goto cbthA;
       cbthz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbthA: // global
           (_cbthv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbthv::I64 == 0) goto cbthx; else goto cbthw;
       cbthx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbthw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbthv::I64;
           R2 = GHC.IO.Handle.hSetEcho3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEcho2_info" {
     GHC.IO.Handle.hSetEcho2_info:
         const GHC.IO.Handle.hSetEcho2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.514122012 UTC

[section ""data" . GHC.IO.Handle.hSetEcho1_closure" {
     GHC.IO.Handle.hSetEcho1_closure:
         const GHC.IO.Handle.hSetEcho1_info;
         const 0;
 },
 sat_sboqn_entry() //  [R1, R2]
         { []
         }
     {offset
       cbtie: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbtif; else goto cbtig;
       cbtif: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtig: // global
           I64[Sp - 16] = block_cbtib_info;
           _sbopK::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbopK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubtiE; else goto cbtic;
       ubtiE: // global
           call _cbtib(R1) args: 0, res: 0, upd: 0;
       cbtic: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sboqn_info" {
     sat_sboqn_info:
         const sat_sboqn_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SboCL_srt+768;
 },
 _cbtib() //  [R1]
         { []
         }
     {offset
       cbtib: // global
           I64[Sp - 24] = block_cbtij_info;
           _sboq0::P64 = R1;
           _sboq1::P64 = P64[R1 + 7];
           _sboq4::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sboq1::P64;
           P64[Sp - 8] = _sboq4::P64;
           P64[Sp] = _sboq0::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubtiD; else goto cbtil;
       ubtiD: // global
           call _cbtij(R1) args: 0, res: 0, upd: 0;
       cbtil: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtib_info" {
     block_cbtib_info:
         const _cbtib;
         const 1;
         const 4294967326;
         const SboCL_srt+768;
 },
 _cbtij() //  [R1]
         { []
         }
     {offset
       cbtij: // global
           if (R1 & 7 == 1) goto cbtiB; else goto cbtiu;
       cbtiB: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbtiu: // global
           _sboq4::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbtip_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = _sboq4::P64;
           P64[Sp + 8] = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.IO.Device.setEcho_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtij_info" {
     block_cbtij_info:
         const _cbtij;
         const 4;
         const 4294967326;
         const SboCL_srt+768;
 },
 _cbtip() //  [R1]
         { []
         }
     {offset
       cbtip: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtix; else goto cbtiw;
       cbtix: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtiw: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtip_info" {
     block_cbtip_info:
         const _cbtip;
         const 130;
         const 30;
 },
 section ""relreadonly" . ubtku_srtd" {
     ubtku_srtd:
         const SboCL_srt+456;
         const 43;
         const 4947802324993;
 },
 io_sbopW_entry() //  [R1]
         { []
         }
     {offset
       cbtiK: // global
           _sbopW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtiO; else goto cbtiP;
       cbtiP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbtiR; else goto cbtiQ;
       cbtiR: // global
           HpAlloc = 16;
           goto cbtiO;
       cbtiO: // global
           R1 = _sbopW::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtiQ: // global
           _sbopK::P64 = P64[_sbopW::P64 + 7];
           _sbopQ::P64 = P64[_sbopW::P64 + 15];
           _sbopS::P64 = P64[_sbopW::P64 + 23];
           I64[Hp - 8] = sat_sboqn_info;
           P64[Hp] = _sbopK::P64;
           I64[Sp - 16] = block_cbtiF_info;
           R5 = _sbopS::P64;
           R4 = Hp - 6;
           R3 = _sbopQ::P64;
           R2 = GHC.IO.Handle.hSetEcho2_closure;
           P64[Sp - 8] = _sbopS::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbopW_info" {
     io_sbopW_info:
         const io_sbopW_entry;
         const 3;
         const 18446744069414584328;
         const 4294967299;
         const ubtku_srtd;
 },
 _cbtiF() //  [R1]
         { []
         }
     {offset
       cbtiF: // global
           I64[Sp] = block_cbtiH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtiW; else goto cbtiI;
       ubtiW: // global
           call _cbtiH(R1) args: 0, res: 0, upd: 0;
       cbtiI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtiF_info" {
     block_cbtiF_info:
         const _cbtiF;
         const 1;
         const 30;
 },
 _cbtiH() //  [R1]
         { []
         }
     {offset
       cbtiH: // global
           I64[Sp] = block_cbtiN_info;
           R2 = P64[R1 + 7];
           _sboqt::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sboqt::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtiH_info" {
     block_cbtiH_info:
         const _cbtiH;
         const 1;
         const 30;
 },
 _cbtiN() //  []
         { []
         }
     {offset
       cbtiN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtiN_info" {
     block_cbtiN_info:
         const _cbtiN;
         const 1;
         const 30;
 },
 sat_sbor3_entry() //  [R1, R2]
         { []
         }
     {offset
       cbtje: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbtjf; else goto cbtjg;
       cbtjf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtjg: // global
           I64[Sp - 16] = block_cbtjb_info;
           _sbopK::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbopK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubtjE; else goto cbtjc;
       ubtjE: // global
           call _cbtjb(R1) args: 0, res: 0, upd: 0;
       cbtjc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbor3_info" {
     sat_sbor3_info:
         const sat_sbor3_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SboCL_srt+768;
 },
 _cbtjb() //  [R1]
         { []
         }
     {offset
       cbtjb: // global
           I64[Sp - 24] = block_cbtjj_info;
           _sboqG::P64 = R1;
           _sboqH::P64 = P64[R1 + 7];
           _sboqK::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sboqH::P64;
           P64[Sp - 8] = _sboqK::P64;
           P64[Sp] = _sboqG::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubtjD; else goto cbtjl;
       ubtjD: // global
           call _cbtjj(R1) args: 0, res: 0, upd: 0;
       cbtjl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtjb_info" {
     block_cbtjb_info:
         const _cbtjb;
         const 1;
         const 4294967326;
         const SboCL_srt+768;
 },
 _cbtjj() //  [R1]
         { []
         }
     {offset
       cbtjj: // global
           if (R1 & 7 == 1) goto cbtjB; else goto cbtju;
       cbtjB: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbtju: // global
           _sboqK::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbtjp_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = _sboqK::P64;
           P64[Sp + 8] = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.IO.Device.setEcho_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtjj_info" {
     block_cbtjj_info:
         const _cbtjj;
         const 4;
         const 4294967326;
         const SboCL_srt+768;
 },
 _cbtjp() //  [R1]
         { []
         }
     {offset
       cbtjp: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtjx; else goto cbtjw;
       cbtjx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtjw: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtjp_info" {
     block_cbtjp_info:
         const _cbtjp;
         const 130;
         const 30;
 },
 section ""relreadonly" . ubtkv_srtd" {
     ubtkv_srtd:
         const SboCL_srt+456;
         const 43;
         const 4947802324993;
 },
 io_sboqC_entry() //  [R1]
         { []
         }
     {offset
       cbtjK: // global
           _sboqC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtjO; else goto cbtjP;
       cbtjP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbtjR; else goto cbtjQ;
       cbtjR: // global
           HpAlloc = 16;
           goto cbtjO;
       cbtjO: // global
           R1 = _sboqC::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtjQ: // global
           _sbopK::P64 = P64[_sboqC::P64 + 7];
           _sbopQ::P64 = P64[_sboqC::P64 + 15];
           _sboqx::P64 = P64[_sboqC::P64 + 23];
           I64[Hp - 8] = sat_sbor3_info;
           P64[Hp] = _sbopK::P64;
           I64[Sp - 16] = block_cbtjF_info;
           R5 = _sboqx::P64;
           R4 = Hp - 6;
           R3 = _sbopQ::P64;
           R2 = GHC.IO.Handle.hSetEcho2_closure;
           P64[Sp - 8] = _sboqx::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sboqC_info" {
     io_sboqC_info:
         const io_sboqC_entry;
         const 3;
         const 18446744069414584328;
         const 4294967299;
         const ubtkv_srtd;
 },
 _cbtjF() //  [R1]
         { []
         }
     {offset
       cbtjF: // global
           I64[Sp] = block_cbtjH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtjW; else goto cbtjI;
       ubtjW: // global
           call _cbtjH(R1) args: 0, res: 0, upd: 0;
       cbtjI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtjF_info" {
     block_cbtjF_info:
         const _cbtjF;
         const 1;
         const 30;
 },
 _cbtjH() //  [R1]
         { []
         }
     {offset
       cbtjH: // global
           I64[Sp] = block_cbtjN_info;
           R2 = P64[R1 + 7];
           _sbor9::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbor9::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtjH_info" {
     block_cbtjH_info:
         const _cbtjH;
         const 1;
         const 30;
 },
 _cbtjN() //  []
         { []
         }
     {offset
       cbtjN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtjN_info" {
     block_cbtjN_info:
         const _cbtjN;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtkw_srtd" {
     ubtkw_srtd:
         const SboCL_srt+160;
         const 81;
         const 137438953473;
         const 102400;
 },
 GHC.IO.Handle.hSetEcho1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbtk1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbtk2; else goto cbtk3;
       cbtk2: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetEcho1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbtk3: // global
           I64[Sp - 24] = block_cbthM_info;
           _sbopJ::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sbopJ::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Handle.hGetEcho5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEcho1_info" {
     GHC.IO.Handle.hSetEcho1_info:
         const GHC.IO.Handle.hSetEcho1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubtkw_srtd;
 },
 section ""relreadonly" . ubtkx_srtd" {
     ubtkx_srtd:
         const SboCL_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbthM() //  [R1]
         { []
         }
     {offset
       cbthM: // global
           I64[Sp] = block_cbthO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtks; else goto cbthP;
       ubtks: // global
           call _cbthO(R1) args: 0, res: 0, upd: 0;
       cbthP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbthM_info" {
     block_cbthM_info:
         const _cbthM;
         const 2;
         const 18446744069414584350;
         const ubtkx_srtd;
 },
 section ""relreadonly" . ubtky_srtd" {
     ubtky_srtd:
         const SboCL_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbthO() //  [R1]
         { []
         }
     {offset
       cbthO: // global
           if (R1 & 7 == 1) goto cbtjY; else goto cbtjZ;
       cbtjY: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbtjZ: // global
           _sbopJ::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbthU_info;
           R1 = _sbopJ::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubtkt; else goto cbthV;
       ubtkt: // global
           call _cbthU(R1) args: 0, res: 0, upd: 0;
       cbthV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbthO_info" {
     block_cbthO_info:
         const _cbthO;
         const 2;
         const 18446744069414584350;
         const ubtky_srtd;
 },
 section ""relreadonly" . ubtkz_srtd" {
     ubtkz_srtd:
         const SboCL_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbthU() //  [R1]
         { []
         }
     {offset
       cbthU: // global
           if (R1 & 7 == 1) goto cbtka; else goto cbtkj;
       cbtka: // global
           I64[Sp - 16] = block_cbthZ_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtkj: // global
           I64[Sp - 16] = block_cbtiZ_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbthU_info" {
     block_cbthU_info:
         const _cbthU;
         const 1;
         const 18446744069414584350;
         const ubtkz_srtd;
 },
 section ""relreadonly" . ubtkA_srtd" {
     ubtkA_srtd:
         const SboCL_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbthZ() //  [R1]
         { []
         }
     {offset
       cbthZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbtkd; else goto cbtkc;
       cbtkd: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtkc: // global
           I64[Hp - 24] = io_sbopW_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbti1::P64 = Hp - 23;
           if (R1 == 0) goto cbtkh; else goto cbtkg;
       cbtkh: // global
           R1 = _cbti1::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtkg: // global
           R1 = _cbti1::P64;
           Sp = Sp + 32;
           call io_sbopW_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbthZ_info" {
     block_cbthZ_info:
         const _cbthZ;
         const 3;
         const 18446744069414584350;
         const ubtkA_srtd;
 },
 section ""relreadonly" . ubtkB_srtd" {
     ubtkB_srtd:
         const SboCL_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbtiZ() //  [R1]
         { []
         }
     {offset
       cbtiZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbtkm; else goto cbtkl;
       cbtkm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtkl: // global
           I64[Hp - 24] = io_sboqC_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtj1::P64 = Hp - 23;
           if (R1 == 0) goto cbtkq; else goto cbtkp;
       cbtkq: // global
           R1 = _cbtj1::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtkp: // global
           R1 = _cbtj1::P64;
           Sp = Sp + 32;
           call io_sboqC_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtiZ_info" {
     block_cbtiZ_info:
         const _cbtiZ;
         const 3;
         const 18446744069414584350;
         const ubtkB_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.556085386 UTC

[section ""data" . GHC.IO.Handle.hSetEcho_closure" {
     GHC.IO.Handle.hSetEcho_closure:
         const GHC.IO.Handle.hSetEcho_info;
         const 0;
 },
 GHC.IO.Handle.hSetEcho_entry() //  [R2, R3]
         { []
         }
     {offset
       cbtmv: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetEcho1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEcho_info" {
     GHC.IO.Handle.hSetEcho_info:
         const GHC.IO.Handle.hSetEcho_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SboCL_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.559986249 UTC

[section ""cstring" . GHC.IO.Handle.hGetBuffering3_bytes" {
     GHC.IO.Handle.hGetBuffering3_bytes:
         I8[] [104,71,101,116,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.562182083 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering_fun_closure" {
     GHC.IO.Handle.hGetBuffering_fun_closure:
         const GHC.IO.Handle.hGetBuffering_fun_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetBuffering_fun_entry() //  [R1]
         { []
         }
     {offset
       cbtmJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtmK; else goto cbtmL;
       cbtmK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtmL: // global
           (_cbtmG::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtmG::I64 == 0) goto cbtmI; else goto cbtmH;
       cbtmI: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtmH: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtmG::I64;
           R2 = GHC.IO.Handle.hGetBuffering3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering_fun_info" {
     GHC.IO.Handle.hGetBuffering_fun_info:
         const GHC.IO.Handle.hGetBuffering_fun_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.566974349 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering2_closure" {
     GHC.IO.Handle.hGetBuffering2_closure:
         const GHC.IO.Handle.hGetBuffering2_info;
         const 0;
 },
 GHC.IO.Handle.hGetBuffering2_entry() //  [R2]
         { []
         }
     {offset
       cbtn0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtn1; else goto cbtn2;
       cbtn1: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetBuffering2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtn2: // global
           I64[Sp - 8] = block_cbtmX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtnn; else goto cbtmY;
       ubtnn: // global
           call _cbtmX(R1) args: 0, res: 0, upd: 0;
       cbtmY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering2_info" {
     GHC.IO.Handle.hGetBuffering2_info:
         const GHC.IO.Handle.hGetBuffering2_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const SboCL_srt+768;
 },
 _cbtmX() //  [R1]
         { []
         }
     {offset
       cbtmX: // global
           I64[Sp - 16] = block_cbtn5_info;
           _sbore::P64 = R1;
           _sborl::P64 = P64[R1 + 55];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _sborl::P64;
           P64[Sp] = _sbore::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubtnm; else goto cbtn7;
       ubtnm: // global
           call _cbtn5(R1) args: 0, res: 0, upd: 0;
       cbtn7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtmX_info" {
     block_cbtmX_info:
         const _cbtmX;
         const 0;
         const 4294967326;
         const SboCL_srt+768;
 },
 _cbtn5() //  [R1]
         { []
         }
     {offset
       cbtn5: // global
           if (R1 & 7 == 1) goto cbtnk; else goto cbtnd;
       cbtnk: // global
           Sp = Sp + 24;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbtnd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtng; else goto cbtnf;
       cbtng: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtnf: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtn5_info" {
     block_cbtn5_info:
         const _cbtn5;
         const 2;
         const 4294967326;
         const SboCL_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.578042358 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering1_closure" {
     GHC.IO.Handle.hGetBuffering1_closure:
         const GHC.IO.Handle.hGetBuffering1_info;
         const 0;
 },
 section ""relreadonly" . ubtoZ_srtd" {
     ubtoZ_srtd:
         const SboCL_srt+456;
         const 46;
         const 52776558133249;
 },
 io_sborG_entry() //  [R1]
         { []
         }
     {offset
       cbto1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbto5; else goto cbto6;
       cbto5: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbto6: // global
           I64[Sp - 16] = block_cbtnW_info;
           _sborC::P64 = P64[R1 + 15];
           R5 = _sborC::P64;
           R4 = GHC.IO.Handle.hGetBuffering2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetBuffering_fun_closure;
           P64[Sp - 8] = _sborC::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sborG_info" {
     io_sborG_info:
         const io_sborG_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubtoZ_srtd;
 },
 _cbtnW() //  [R1]
         { []
         }
     {offset
       cbtnW: // global
           I64[Sp] = block_cbtnY_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtob; else goto cbtnZ;
       ubtob: // global
           call _cbtnY(R1) args: 0, res: 0, upd: 0;
       cbtnZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtnW_info" {
     block_cbtnW_info:
         const _cbtnW;
         const 1;
         const 30;
 },
 _cbtnY() //  [R1]
         { []
         }
     {offset
       cbtnY: // global
           I64[Sp] = block_cbto4_info;
           R2 = P64[R1 + 7];
           _sborN::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sborN::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtnY_info" {
     block_cbtnY_info:
         const _cbtnY;
         const 1;
         const 30;
 },
 _cbto4() //  []
         { []
         }
     {offset
       cbto4: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbto4_info" {
     block_cbto4_info:
         const _cbto4;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtp0_srtd" {
     ubtp0_srtd:
         const SboCL_srt+456;
         const 46;
         const 52776558133249;
 },
 io_sborW_entry() //  [R1]
         { []
         }
     {offset
       cbtoq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtou; else goto cbtov;
       cbtou: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtov: // global
           I64[Sp - 16] = block_cbtol_info;
           _sborR::P64 = P64[R1 + 15];
           R5 = _sborR::P64;
           R4 = GHC.IO.Handle.hGetBuffering2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetBuffering_fun_closure;
           P64[Sp - 8] = _sborR::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sborW_info" {
     io_sborW_info:
         const io_sborW_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubtp0_srtd;
 },
 _cbtol() //  [R1]
         { []
         }
     {offset
       cbtol: // global
           I64[Sp] = block_cbton_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtoA; else goto cbtoo;
       ubtoA: // global
           call _cbton(R1) args: 0, res: 0, upd: 0;
       cbtoo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtol_info" {
     block_cbtol_info:
         const _cbtol;
         const 1;
         const 30;
 },
 _cbton() //  [R1]
         { []
         }
     {offset
       cbton: // global
           I64[Sp] = block_cbtot_info;
           R2 = P64[R1 + 7];
           _sbos3::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbos3::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbton_info" {
     block_cbton_info:
         const _cbton;
         const 1;
         const 30;
 },
 _cbtot() //  []
         { []
         }
     {offset
       cbtot: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtot_info" {
     block_cbtot_info:
         const _cbtot;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtp1_srtd" {
     ubtp1_srtd:
         const SboCL_srt+456;
         const 47;
         const 123145302310913;
 },
 GHC.IO.Handle.hGetBuffering1_entry() //  [R2]
         { []
         }
     {offset
       cbtoF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtoG; else goto cbtoH;
       cbtoG: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetBuffering1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtoH: // global
           I64[Sp - 8] = block_cbtnK_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtoY; else goto cbtnL;
       ubtoY: // global
           call _cbtnK(R1) args: 0, res: 0, upd: 0;
       cbtnL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering1_info" {
     GHC.IO.Handle.hGetBuffering1_info:
         const GHC.IO.Handle.hGetBuffering1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtp1_srtd;
 },
 section ""relreadonly" . ubtp2_srtd" {
     ubtp2_srtd:
         const SboCL_srt+456;
         const 46;
         const 52776558133249;
 },
 _cbtnK() //  [R1]
         { []
         }
     {offset
       cbtnK: // global
           if (R1 & 7 == 1) goto cbtoC; else goto cbtoD;
       cbtoC: // global
           I64[Sp - 16] = block_cbtnP_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtoD: // global
           I64[Sp - 16] = block_cbtoe_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtnK_info" {
     block_cbtnK_info:
         const _cbtnK;
         const 0;
         const 18446744069414584350;
         const ubtp2_srtd;
 },
 section ""relreadonly" . ubtp3_srtd" {
     ubtp3_srtd:
         const SboCL_srt+456;
         const 46;
         const 52776558133249;
 },
 _cbtnP() //  [R1]
         { []
         }
     {offset
       cbtnP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtoL; else goto cbtoK;
       cbtoL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtoK: // global
           I64[Hp - 16] = io_sborG_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtnR::P64 = Hp - 15;
           if (R1 == 0) goto cbtoP; else goto cbtoO;
       cbtoP: // global
           R1 = _cbtnR::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtoO: // global
           R1 = _cbtnR::P64;
           Sp = Sp + 24;
           call io_sborG_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtnP_info" {
     block_cbtnP_info:
         const _cbtnP;
         const 2;
         const 18446744069414584350;
         const ubtp3_srtd;
 },
 section ""relreadonly" . ubtp4_srtd" {
     ubtp4_srtd:
         const SboCL_srt+456;
         const 46;
         const 52776558133249;
 },
 _cbtoe() //  [R1]
         { []
         }
     {offset
       cbtoe: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtoT; else goto cbtoS;
       cbtoT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtoS: // global
           I64[Hp - 16] = io_sborW_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtog::P64 = Hp - 15;
           if (R1 == 0) goto cbtoX; else goto cbtoW;
       cbtoX: // global
           R1 = _cbtog::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtoW: // global
           R1 = _cbtog::P64;
           Sp = Sp + 24;
           call io_sborW_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtoe_info" {
     block_cbtoe_info:
         const _cbtoe;
         const 2;
         const 18446744069414584350;
         const ubtp4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.602947236 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering_closure" {
     GHC.IO.Handle.hGetBuffering_closure:
         const GHC.IO.Handle.hGetBuffering_info;
         const 0;
 },
 GHC.IO.Handle.hGetBuffering_entry() //  [R2]
         { []
         }
     {offset
       cbtq6: // global
           R2 = R2;
           call GHC.IO.Handle.hGetBuffering1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering_info" {
     GHC.IO.Handle.hGetBuffering_info:
         const GHC.IO.Handle.hGetBuffering_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.605903841 UTC

[section ""cstring" . GHC.IO.Handle.hIsWritable4_bytes" {
     GHC.IO.Handle.hIsWritable4_bytes:
         I8[] [104,73,115,87,114,105,116,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.608157104 UTC

[section ""data" . GHC.IO.Handle.hIsWritable3_closure" {
     GHC.IO.Handle.hIsWritable3_closure:
         const GHC.IO.Handle.hIsWritable3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsWritable3_entry() //  [R1]
         { []
         }
     {offset
       cbtqk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtql; else goto cbtqm;
       cbtql: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtqm: // global
           (_cbtqh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtqh::I64 == 0) goto cbtqj; else goto cbtqi;
       cbtqj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtqi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtqh::I64;
           R2 = GHC.IO.Handle.hIsWritable4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable3_info" {
     GHC.IO.Handle.hIsWritable3_info:
         const GHC.IO.Handle.hIsWritable3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.614435564 UTC

[section ""data" . GHC.IO.Handle.hIsWritable2_closure" {
     GHC.IO.Handle.hIsWritable2_closure:
         const GHC.IO.Handle.hIsWritable2_info;
         const 0;
 },
 sat_sbosr_entry() //  [R1]
         { []
         }
     {offset
       cbtqV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtqW; else goto cbtqX;
       cbtqW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtqX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbtqM_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubtrb; else goto cbtqN;
       ubtrb: // global
           call _cbtqM(R1) args: 0, res: 0, upd: 0;
       cbtqN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbosr_info" {
     sat_sbosr_info:
         const sat_sbosr_entry;
         const 1;
         const 16;
 },
 _cbtqM() //  [R1]
         { []
         }
     {offset
       cbtqM: // global
           _cbtqU::P64 = R1 & 7;
           if (_cbtqU::P64 < 4) goto cbtqQ; else goto ubtra;
       cbtqQ: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ubtra: // global
           if (_cbtqU::P64 != 5) goto cbtqT; else goto cbtqT;
       cbtqT: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtqM_info" {
     block_cbtqM_info:
         const _cbtqM;
         const 0;
         const 30;
 },
 section ""relreadonly" . ubtry_srtd" {
     ubtry_srtd:
         const SboCL_srt+328;
         const 64;
         const 9259400833873739777;
 },
 GHC.IO.Handle.hIsWritable2_entry() //  [R2]
         { []
         }
     {offset
       cbtrc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtrd; else goto cbtre;
       cbtrd: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsWritable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtre: // global
           I64[Sp - 8] = block_cbtqy_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtrx; else goto cbtqz;
       ubtrx: // global
           call _cbtqy(R1) args: 0, res: 0, upd: 0;
       cbtqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable2_info" {
     GHC.IO.Handle.hIsWritable2_info:
         const GHC.IO.Handle.hIsWritable2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtry_srtd;
 },
 section ""relreadonly" . ubtrz_srtd" {
     ubtrz_srtd:
         const SboCL_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbtqy() //  [R1]
         { []
         }
     {offset
       cbtqy: // global
           I64[Sp - 8] = block_cbtqD_info;
           _sbos8::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sbos8::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtrw; else goto cbtqE;
       ubtrw: // global
           call _cbtqD(R1) args: 0, res: 0, upd: 0;
       cbtqE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtqy_info" {
     block_cbtqy_info:
         const _cbtqy;
         const 0;
         const 18446744069414584350;
         const ubtrz_srtd;
 },
 section ""relreadonly" . ubtrA_srtd" {
     ubtrA_srtd:
         const SboCL_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbtqD() //  [R1]
         { []
         }
     {offset
       cbtqD: // global
           _cbtru::P64 = R1 & 7;
           if (_cbtru::P64 == 1) goto cbtrp; else goto ubtrv;
       cbtrp: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       ubtrv: // global
           if (_cbtru::P64 == 2) goto cbtrt; else goto cbtri;
       cbtrt: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbtri: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbtrl; else goto cbtrk;
       cbtrl: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtrk: // global
           I64[Hp - 40] = sat_sbosr_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtqD_info" {
     block_cbtqD_info:
         const _cbtqD;
         const 1;
         const 18446744069414584350;
         const ubtrA_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.628640566 UTC

[section ""data" . GHC.IO.Handle.hIsWritable1_closure" {
     GHC.IO.Handle.hIsWritable1_closure:
         const GHC.IO.Handle.hIsWritable1_info;
         const 0;
 },
 section ""relreadonly" . ubtsV_srtd" {
     ubtsV_srtd:
         const SboCL_srt+456;
         const 49;
         const 422212465065985;
 },
 io_sbosD_entry() //  [R1]
         { []
         }
     {offset
       cbtsr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtsv; else goto cbtsw;
       cbtsv: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtsw: // global
           I64[Sp - 16] = block_cbtsm_info;
           _sbosz::P64 = P64[R1 + 15];
           R5 = _sbosz::P64;
           R4 = GHC.IO.Handle.hIsWritable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsWritable3_closure;
           P64[Sp - 8] = _sbosz::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbosD_info" {
     io_sbosD_info:
         const io_sbosD_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubtsV_srtd;
 },
 _cbtsm() //  [R1]
         { []
         }
     {offset
       cbtsm: // global
           I64[Sp] = block_cbtso_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtsB; else goto cbtsp;
       ubtsB: // global
           call _cbtso(R1) args: 0, res: 0, upd: 0;
       cbtsp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtsm_info" {
     block_cbtsm_info:
         const _cbtsm;
         const 1;
         const 30;
 },
 _cbtso() //  [R1]
         { []
         }
     {offset
       cbtso: // global
           I64[Sp] = block_cbtsu_info;
           R2 = P64[R1 + 7];
           _sbosK::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbosK::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtso_info" {
     block_cbtso_info:
         const _cbtso;
         const 1;
         const 30;
 },
 _cbtsu() //  []
         { []
         }
     {offset
       cbtsu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtsu_info" {
     block_cbtsu_info:
         const _cbtsu;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtsW_srtd" {
     ubtsW_srtd:
         const SboCL_srt+456;
         const 50;
         const 985162418487297;
 },
 GHC.IO.Handle.hIsWritable1_entry() //  [R2]
         { []
         }
     {offset
       cbtsG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtsH; else goto cbtsI;
       cbtsH: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsWritable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtsI: // global
           I64[Sp - 8] = block_cbtsa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtsU; else goto cbtsb;
       ubtsU: // global
           call _cbtsa(R1) args: 0, res: 0, upd: 0;
       cbtsb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable1_info" {
     GHC.IO.Handle.hIsWritable1_info:
         const GHC.IO.Handle.hIsWritable1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtsW_srtd;
 },
 section ""relreadonly" . ubtsX_srtd" {
     ubtsX_srtd:
         const SboCL_srt+456;
         const 49;
         const 422212465065985;
 },
 _cbtsa() //  [R1]
         { []
         }
     {offset
       cbtsa: // global
           if (R1 & 7 == 1) goto cbtsD; else goto cbtsE;
       cbtsD: // global
           I64[Sp - 16] = block_cbtsf_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtsE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtsa_info" {
     block_cbtsa_info:
         const _cbtsa;
         const 0;
         const 18446744069414584350;
         const ubtsX_srtd;
 },
 section ""relreadonly" . ubtsY_srtd" {
     ubtsY_srtd:
         const SboCL_srt+456;
         const 49;
         const 422212465065985;
 },
 _cbtsf() //  [R1]
         { []
         }
     {offset
       cbtsf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtsM; else goto cbtsL;
       cbtsM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtsL: // global
           I64[Hp - 16] = io_sbosD_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtsh::P64 = Hp - 15;
           if (R1 == 0) goto cbtsQ; else goto cbtsP;
       cbtsQ: // global
           R1 = _cbtsh::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtsP: // global
           R1 = _cbtsh::P64;
           Sp = Sp + 24;
           call io_sbosD_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtsf_info" {
     block_cbtsf_info:
         const _cbtsf;
         const 2;
         const 18446744069414584350;
         const ubtsY_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.644993022 UTC

[section ""data" . GHC.IO.Handle.hIsWritable_closure" {
     GHC.IO.Handle.hIsWritable_closure:
         const GHC.IO.Handle.hIsWritable_info;
         const 0;
 },
 GHC.IO.Handle.hIsWritable_entry() //  [R2]
         { []
         }
     {offset
       cbttE: // global
           R2 = R2;
           call GHC.IO.Handle.hIsWritable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable_info" {
     GHC.IO.Handle.hIsWritable_info:
         const GHC.IO.Handle.hIsWritable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+848;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.648029932 UTC

[section ""cstring" . GHC.IO.Handle.hIsReadable4_bytes" {
     GHC.IO.Handle.hIsReadable4_bytes:
         I8[] [104,73,115,82,101,97,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.650484337 UTC

[section ""data" . GHC.IO.Handle.hIsReadable3_closure" {
     GHC.IO.Handle.hIsReadable3_closure:
         const GHC.IO.Handle.hIsReadable3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsReadable3_entry() //  [R1]
         { []
         }
     {offset
       cbttS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbttT; else goto cbttU;
       cbttT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbttU: // global
           (_cbttP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbttP::I64 == 0) goto cbttR; else goto cbttQ;
       cbttR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbttQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbttP::I64;
           R2 = GHC.IO.Handle.hIsReadable4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable3_info" {
     GHC.IO.Handle.hIsReadable3_info:
         const GHC.IO.Handle.hIsReadable3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.656332767 UTC

[section ""data" . GHC.IO.Handle.hIsReadable2_closure" {
     GHC.IO.Handle.hIsReadable2_closure:
         const GHC.IO.Handle.hIsReadable2_info;
         const 0;
 },
 sat_sbotb_entry() //  [R1]
         { []
         }
     {offset
       cbtus: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtut; else goto cbtuu;
       cbtut: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtuu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbtuk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubtuF; else goto cbtul;
       ubtuF: // global
           call _cbtuk(R1) args: 0, res: 0, upd: 0;
       cbtul: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbotb_info" {
     sat_sbotb_info:
         const sat_sbotb_entry;
         const 1;
         const 16;
 },
 _cbtuk() //  [R1]
         { []
         }
     {offset
       cbtuk: // global
           _cbtur::P64 = R1 & 7;
           if (_cbtur::P64 == 3) goto cbtuq; else goto ubtuE;
       ubtuE: // global
           if (_cbtur::P64 == 6) goto cbtuq; else goto cbtuo;
       cbtuq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbtuo: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtuk_info" {
     block_cbtuk_info:
         const _cbtuk;
         const 0;
         const 30;
 },
 section ""relreadonly" . ubtv2_srtd" {
     ubtv2_srtd:
         const SboCL_srt+328;
         const 67;
         const 36028797018963969;
         const 4;
 },
 GHC.IO.Handle.hIsReadable2_entry() //  [R2]
         { []
         }
     {offset
       cbtuG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtuH; else goto cbtuI;
       cbtuH: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsReadable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtuI: // global
           I64[Sp - 8] = block_cbtu6_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtv1; else goto cbtu7;
       ubtv1: // global
           call _cbtu6(R1) args: 0, res: 0, upd: 0;
       cbtu7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable2_info" {
     GHC.IO.Handle.hIsReadable2_info:
         const GHC.IO.Handle.hIsReadable2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtv2_srtd;
 },
 section ""relreadonly" . ubtv3_srtd" {
     ubtv3_srtd:
         const SboCL_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbtu6() //  [R1]
         { []
         }
     {offset
       cbtu6: // global
           I64[Sp - 8] = block_cbtub_info;
           _sbosS::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sbosS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtv0; else goto cbtuc;
       ubtv0: // global
           call _cbtub(R1) args: 0, res: 0, upd: 0;
       cbtuc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtu6_info" {
     block_cbtu6_info:
         const _cbtu6;
         const 0;
         const 18446744069414584350;
         const ubtv3_srtd;
 },
 section ""relreadonly" . ubtv4_srtd" {
     ubtv4_srtd:
         const SboCL_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbtub() //  [R1]
         { []
         }
     {offset
       cbtub: // global
           _cbtuY::P64 = R1 & 7;
           if (_cbtuY::P64 == 1) goto cbtuT; else goto ubtuZ;
       cbtuT: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       ubtuZ: // global
           if (_cbtuY::P64 == 2) goto cbtuX; else goto cbtuM;
       cbtuX: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbtuM: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbtuP; else goto cbtuO;
       cbtuP: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtuO: // global
           I64[Hp - 40] = sat_sbotb_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtub_info" {
     block_cbtub_info:
         const _cbtub;
         const 1;
         const 18446744069414584350;
         const ubtv4_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.671466777 UTC

[section ""data" . GHC.IO.Handle.hIsReadable1_closure" {
     GHC.IO.Handle.hIsReadable1_closure:
         const GHC.IO.Handle.hIsReadable1_info;
         const 0;
 },
 section ""relreadonly" . ubtwp_srtd" {
     ubtwp_srtd:
         const SboCL_srt+456;
         const 52;
         const 3377699720527873;
 },
 io_sbotn_entry() //  [R1]
         { []
         }
     {offset
       cbtvV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtvZ; else goto cbtw0;
       cbtvZ: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtw0: // global
           I64[Sp - 16] = block_cbtvQ_info;
           _sbotj::P64 = P64[R1 + 15];
           R5 = _sbotj::P64;
           R4 = GHC.IO.Handle.hIsReadable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsReadable3_closure;
           P64[Sp - 8] = _sbotj::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbotn_info" {
     io_sbotn_info:
         const io_sbotn_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubtwp_srtd;
 },
 _cbtvQ() //  [R1]
         { []
         }
     {offset
       cbtvQ: // global
           I64[Sp] = block_cbtvS_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtw5; else goto cbtvT;
       ubtw5: // global
           call _cbtvS(R1) args: 0, res: 0, upd: 0;
       cbtvT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtvQ_info" {
     block_cbtvQ_info:
         const _cbtvQ;
         const 1;
         const 30;
 },
 _cbtvS() //  [R1]
         { []
         }
     {offset
       cbtvS: // global
           I64[Sp] = block_cbtvY_info;
           R2 = P64[R1 + 7];
           _sbotu::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbotu::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtvS_info" {
     block_cbtvS_info:
         const _cbtvS;
         const 1;
         const 30;
 },
 _cbtvY() //  []
         { []
         }
     {offset
       cbtvY: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtvY_info" {
     block_cbtvY_info:
         const _cbtvY;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubtwq_srtd" {
     ubtwq_srtd:
         const SboCL_srt+456;
         const 53;
         const 7881299347898369;
 },
 GHC.IO.Handle.hIsReadable1_entry() //  [R2]
         { []
         }
     {offset
       cbtwa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtwb; else goto cbtwc;
       cbtwb: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsReadable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtwc: // global
           I64[Sp - 8] = block_cbtvE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtwo; else goto cbtvF;
       ubtwo: // global
           call _cbtvE(R1) args: 0, res: 0, upd: 0;
       cbtvF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable1_info" {
     GHC.IO.Handle.hIsReadable1_info:
         const GHC.IO.Handle.hIsReadable1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtwq_srtd;
 },
 section ""relreadonly" . ubtwr_srtd" {
     ubtwr_srtd:
         const SboCL_srt+456;
         const 52;
         const 3377699720527873;
 },
 _cbtvE() //  [R1]
         { []
         }
     {offset
       cbtvE: // global
           if (R1 & 7 == 1) goto cbtw7; else goto cbtw8;
       cbtw7: // global
           I64[Sp - 16] = block_cbtvJ_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtw8: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtvE_info" {
     block_cbtvE_info:
         const _cbtvE;
         const 0;
         const 18446744069414584350;
         const ubtwr_srtd;
 },
 section ""relreadonly" . ubtws_srtd" {
     ubtws_srtd:
         const SboCL_srt+456;
         const 52;
         const 3377699720527873;
 },
 _cbtvJ() //  [R1]
         { []
         }
     {offset
       cbtvJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtwg; else goto cbtwf;
       cbtwg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtwf: // global
           I64[Hp - 16] = io_sbotn_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtvL::P64 = Hp - 15;
           if (R1 == 0) goto cbtwk; else goto cbtwj;
       cbtwk: // global
           R1 = _cbtvL::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtwj: // global
           R1 = _cbtvL::P64;
           Sp = Sp + 24;
           call io_sbotn_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtvJ_info" {
     block_cbtvJ_info:
         const _cbtvJ;
         const 2;
         const 18446744069414584350;
         const ubtws_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.687137792 UTC

[section ""data" . GHC.IO.Handle.hIsReadable_closure" {
     GHC.IO.Handle.hIsReadable_closure:
         const GHC.IO.Handle.hIsReadable_info;
         const 0;
 },
 GHC.IO.Handle.hIsReadable_entry() //  [R2]
         { []
         }
     {offset
       cbtx8: // global
           R2 = R2;
           call GHC.IO.Handle.hIsReadable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable_info" {
     GHC.IO.Handle.hIsReadable_info:
         const GHC.IO.Handle.hIsReadable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.690095307 UTC

[section ""cstring" . GHC.IO.Handle.hIsClosed4_bytes" {
     GHC.IO.Handle.hIsClosed4_bytes:
         I8[] [104,73,115,67,108,111,115,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.692207737 UTC

[section ""data" . GHC.IO.Handle.hIsClosed3_closure" {
     GHC.IO.Handle.hIsClosed3_closure:
         const GHC.IO.Handle.hIsClosed3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsClosed3_entry() //  [R1]
         { []
         }
     {offset
       cbtxm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtxn; else goto cbtxo;
       cbtxn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtxo: // global
           (_cbtxj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtxj::I64 == 0) goto cbtxl; else goto cbtxk;
       cbtxl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtxk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtxj::I64;
           R2 = GHC.IO.Handle.hIsClosed4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed3_info" {
     GHC.IO.Handle.hIsClosed3_info:
         const GHC.IO.Handle.hIsClosed3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.697172945 UTC

[section ""data" . GHC.IO.Handle.hIsClosed2_closure" {
     GHC.IO.Handle.hIsClosed2_closure:
         const GHC.IO.Handle.hIsClosed2_info;
 },
 GHC.IO.Handle.hIsClosed2_entry() //  [R2]
         { []
         }
     {offset
       cbtxD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtxE; else goto cbtxF;
       cbtxE: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsClosed2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtxF: // global
           I64[Sp - 8] = block_cbtxA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubty3; else goto cbtxB;
       ubty3: // global
           call _cbtxA(R1) args: 0, res: 0, upd: 0;
       cbtxB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed2_info" {
     GHC.IO.Handle.hIsClosed2_info:
         const GHC.IO.Handle.hIsClosed2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbtxA() //  [R1]
         { []
         }
     {offset
       cbtxA: // global
           I64[Sp - 8] = block_cbtxI_info;
           _sbotC::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sbotC::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubty2; else goto cbtxK;
       ubty2: // global
           call _cbtxI(R1) args: 0, res: 0, upd: 0;
       cbtxK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtxA_info" {
     block_cbtxA_info:
         const _cbtxA;
         const 0;
         const 30;
 },
 _cbtxI() //  [R1]
         { []
         }
     {offset
       cbtxI: // global
           _sbotC::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbtxX; else goto cbtxQ;
       cbtxX: // global
           Hp = Hp + 24;
           _sbotT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbty0; else goto cbtxZ;
       cbtxZ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbotC::P64;
           P64[Hp] = GHC.Types.True_closure+2;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbtxQ: // global
           Hp = Hp + 24;
           _sbotT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbty0; else goto cbtxS;
       cbty0: // global
           HpAlloc = 24;
           R1 = _sbotT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtxS: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbotC::P64;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtxI_info" {
     block_cbtxI_info:
         const _cbtxI;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.708519022 UTC

[section ""data" . GHC.IO.Handle.hIsClosed1_closure" {
     GHC.IO.Handle.hIsClosed1_closure:
         const GHC.IO.Handle.hIsClosed1_info;
         const 0;
 },
 io_sbou4_entry() //  [R1]
         { []
         }
     {offset
       cbtyG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtyK; else goto cbtyL;
       cbtyK: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtyL: // global
           I64[Sp - 16] = block_cbtyB_info;
           _sbou0::P64 = P64[R1 + 15];
           R5 = _sbou0::P64;
           R4 = GHC.IO.Handle.hIsClosed2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsClosed3_closure;
           P64[Sp - 8] = _sbou0::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbou4_info" {
     io_sbou4_info:
         const io_sbou4_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SboCL_srt+880;
 },
 _cbtyB() //  [R1]
         { []
         }
     {offset
       cbtyB: // global
           I64[Sp] = block_cbtyD_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtyQ; else goto cbtyE;
       ubtyQ: // global
           call _cbtyD(R1) args: 0, res: 0, upd: 0;
       cbtyE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtyB_info" {
     block_cbtyB_info:
         const _cbtyB;
         const 1;
         const 30;
 },
 _cbtyD() //  [R1]
         { []
         }
     {offset
       cbtyD: // global
           I64[Sp] = block_cbtyJ_info;
           R2 = P64[R1 + 7];
           _sboub::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sboub::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtyD_info" {
     block_cbtyD_info:
         const _cbtyD;
         const 1;
         const 30;
 },
 _cbtyJ() //  []
         { []
         }
     {offset
       cbtyJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtyJ_info" {
     block_cbtyJ_info:
         const _cbtyJ;
         const 1;
         const 30;
 },
 io_sbouk_entry() //  [R1]
         { []
         }
     {offset
       cbtz5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtz9; else goto cbtza;
       cbtz9: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtza: // global
           I64[Sp - 16] = block_cbtz0_info;
           _sbouf::P64 = P64[R1 + 15];
           R5 = _sbouf::P64;
           R4 = GHC.IO.Handle.hIsClosed2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsClosed3_closure;
           P64[Sp - 8] = _sbouf::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbouk_info" {
     io_sbouk_info:
         const io_sbouk_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SboCL_srt+880;
 },
 _cbtz0() //  [R1]
         { []
         }
     {offset
       cbtz0: // global
           I64[Sp] = block_cbtz2_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtzf; else goto cbtz3;
       ubtzf: // global
           call _cbtz2(R1) args: 0, res: 0, upd: 0;
       cbtz3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtz0_info" {
     block_cbtz0_info:
         const _cbtz0;
         const 1;
         const 30;
 },
 _cbtz2() //  [R1]
         { []
         }
     {offset
       cbtz2: // global
           I64[Sp] = block_cbtz8_info;
           R2 = P64[R1 + 7];
           _sbour::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbour::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtz2_info" {
     block_cbtz2_info:
         const _cbtz2;
         const 1;
         const 30;
 },
 _cbtz8() //  []
         { []
         }
     {offset
       cbtz8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtz8_info" {
     block_cbtz8_info:
         const _cbtz8;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hIsClosed1_entry() //  [R2]
         { []
         }
     {offset
       cbtzk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtzl; else goto cbtzm;
       cbtzl: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsClosed1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtzm: // global
           I64[Sp - 8] = block_cbtyp_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtzD; else goto cbtyq;
       ubtzD: // global
           call _cbtyp(R1) args: 0, res: 0, upd: 0;
       cbtyq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed1_info" {
     GHC.IO.Handle.hIsClosed1_info:
         const GHC.IO.Handle.hIsClosed1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SboCL_srt+880;
 },
 _cbtyp() //  [R1]
         { []
         }
     {offset
       cbtyp: // global
           if (R1 & 7 == 1) goto cbtzh; else goto cbtzi;
       cbtzh: // global
           I64[Sp - 16] = block_cbtyu_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtzi: // global
           I64[Sp - 16] = block_cbtyT_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtyp_info" {
     block_cbtyp_info:
         const _cbtyp;
         const 0;
         const 12884901918;
         const SboCL_srt+880;
 },
 _cbtyu() //  [R1]
         { []
         }
     {offset
       cbtyu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtzq; else goto cbtzp;
       cbtzq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtzp: // global
           I64[Hp - 16] = io_sbou4_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtyw::P64 = Hp - 15;
           if (R1 == 0) goto cbtzu; else goto cbtzt;
       cbtzu: // global
           R1 = _cbtyw::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtzt: // global
           R1 = _cbtyw::P64;
           Sp = Sp + 24;
           call io_sbou4_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtyu_info" {
     block_cbtyu_info:
         const _cbtyu;
         const 2;
         const 12884901918;
         const SboCL_srt+880;
 },
 _cbtyT() //  [R1]
         { []
         }
     {offset
       cbtyT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtzy; else goto cbtzx;
       cbtzy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtzx: // global
           I64[Hp - 16] = io_sbouk_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtyV::P64 = Hp - 15;
           if (R1 == 0) goto cbtzC; else goto cbtzB;
       cbtzC: // global
           R1 = _cbtyV::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtzB: // global
           R1 = _cbtyV::P64;
           Sp = Sp + 24;
           call io_sbouk_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtyT_info" {
     block_cbtyT_info:
         const _cbtyT;
         const 2;
         const 12884901918;
         const SboCL_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.729007177 UTC

[section ""data" . GHC.IO.Handle.hIsClosed_closure" {
     GHC.IO.Handle.hIsClosed_closure:
         const GHC.IO.Handle.hIsClosed_info;
         const 0;
 },
 GHC.IO.Handle.hIsClosed_entry() //  [R2]
         { []
         }
     {offset
       cbtAz: // global
           R2 = R2;
           call GHC.IO.Handle.hIsClosed1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed_info" {
     GHC.IO.Handle.hIsClosed_info:
         const GHC.IO.Handle.hIsClosed_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.732061981 UTC

[section ""cstring" . GHC.IO.Handle.hIsOpen4_bytes" {
     GHC.IO.Handle.hIsOpen4_bytes:
         I8[] [104,73,115,79,112,101,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.734624966 UTC

[section ""data" . GHC.IO.Handle.hIsOpen3_closure" {
     GHC.IO.Handle.hIsOpen3_closure:
         const GHC.IO.Handle.hIsOpen3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsOpen3_entry() //  [R1]
         { []
         }
     {offset
       cbtAN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtAO; else goto cbtAP;
       cbtAO: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtAP: // global
           (_cbtAK::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtAK::I64 == 0) goto cbtAM; else goto cbtAL;
       cbtAM: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtAL: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtAK::I64;
           R2 = GHC.IO.Handle.hIsOpen4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen3_info" {
     GHC.IO.Handle.hIsOpen3_info:
         const GHC.IO.Handle.hIsOpen3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.740301709 UTC

[section ""data" . GHC.IO.Handle.hIsOpen2_closure" {
     GHC.IO.Handle.hIsOpen2_closure:
         const GHC.IO.Handle.hIsOpen2_info;
 },
 GHC.IO.Handle.hIsOpen2_entry() //  [R2]
         { []
         }
     {offset
       cbtB4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtB5; else goto cbtB6;
       cbtB5: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsOpen2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtB6: // global
           I64[Sp - 8] = block_cbtB1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtBC; else goto cbtB2;
       ubtBC: // global
           call _cbtB1(R1) args: 0, res: 0, upd: 0;
       cbtB2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen2_info" {
     GHC.IO.Handle.hIsOpen2_info:
         const GHC.IO.Handle.hIsOpen2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbtB1() //  [R1]
         { []
         }
     {offset
       cbtB1: // global
           I64[Sp - 8] = block_cbtB9_info;
           _sbouw::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sbouw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtBB; else goto cbtBb;
       ubtBB: // global
           call _cbtB9(R1) args: 0, res: 0, upd: 0;
       cbtBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtB1_info" {
     block_cbtB1_info:
         const _cbtB1;
         const 0;
         const 30;
 },
 _cbtB9() //  [R1]
         { []
         }
     {offset
       cbtB9: // global
           _sbouw::P64 = P64[Sp + 8];
           _cbtBz::P64 = R1 & 7;
           if (_cbtBz::P64 == 1) goto cbtBo; else goto ubtBA;
       cbtBo: // global
           Hp = Hp + 24;
           _sbouN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtBy; else goto cbtBq;
       cbtBq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbouw::P64;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ubtBA: // global
           if (_cbtBz::P64 == 2) goto cbtBv; else goto cbtBh;
       cbtBv: // global
           Hp = Hp + 24;
           _sbouN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtBy; else goto cbtBx;
       cbtBx: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbouw::P64;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbtBh: // global
           Hp = Hp + 24;
           _sbouN::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtBy; else goto cbtBj;
       cbtBy: // global
           HpAlloc = 24;
           R1 = _sbouN::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtBj: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbouw::P64;
           P64[Hp] = GHC.Types.True_closure+2;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtB9_info" {
     block_cbtB9_info:
         const _cbtB9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.751217732 UTC

[section ""data" . GHC.IO.Handle.hIsOpen1_closure" {
     GHC.IO.Handle.hIsOpen1_closure:
         const GHC.IO.Handle.hIsOpen1_info;
         const 0;
 },
 io_sbouZ_entry() //  [R1]
         { []
         }
     {offset
       cbtCf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtCj; else goto cbtCk;
       cbtCj: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtCk: // global
           I64[Sp - 16] = block_cbtCa_info;
           _sbouV::P64 = P64[R1 + 15];
           R5 = _sbouV::P64;
           R4 = GHC.IO.Handle.hIsOpen2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsOpen3_closure;
           P64[Sp - 8] = _sbouV::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbouZ_info" {
     io_sbouZ_info:
         const io_sbouZ_entry;
         const 2;
         const 21474836491;
         const 4294967299;
         const SboCL_srt+888;
 },
 _cbtCa() //  [R1]
         { []
         }
     {offset
       cbtCa: // global
           I64[Sp] = block_cbtCc_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtCp; else goto cbtCd;
       ubtCp: // global
           call _cbtCc(R1) args: 0, res: 0, upd: 0;
       cbtCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtCa_info" {
     block_cbtCa_info:
         const _cbtCa;
         const 1;
         const 30;
 },
 _cbtCc() //  [R1]
         { []
         }
     {offset
       cbtCc: // global
           I64[Sp] = block_cbtCi_info;
           R2 = P64[R1 + 7];
           _sbov6::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbov6::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtCc_info" {
     block_cbtCc_info:
         const _cbtCc;
         const 1;
         const 30;
 },
 _cbtCi() //  []
         { []
         }
     {offset
       cbtCi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtCi_info" {
     block_cbtCi_info:
         const _cbtCi;
         const 1;
         const 30;
 },
 io_sbovf_entry() //  [R1]
         { []
         }
     {offset
       cbtCE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtCI; else goto cbtCJ;
       cbtCI: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtCJ: // global
           I64[Sp - 16] = block_cbtCz_info;
           _sbova::P64 = P64[R1 + 15];
           R5 = _sbova::P64;
           R4 = GHC.IO.Handle.hIsOpen2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsOpen3_closure;
           P64[Sp - 8] = _sbova::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbovf_info" {
     io_sbovf_info:
         const io_sbovf_entry;
         const 2;
         const 21474836491;
         const 4294967299;
         const SboCL_srt+888;
 },
 _cbtCz() //  [R1]
         { []
         }
     {offset
       cbtCz: // global
           I64[Sp] = block_cbtCB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtCO; else goto cbtCC;
       ubtCO: // global
           call _cbtCB(R1) args: 0, res: 0, upd: 0;
       cbtCC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtCz_info" {
     block_cbtCz_info:
         const _cbtCz;
         const 1;
         const 30;
 },
 _cbtCB() //  [R1]
         { []
         }
     {offset
       cbtCB: // global
           I64[Sp] = block_cbtCH_info;
           R2 = P64[R1 + 7];
           _sbovm::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbovm::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtCB_info" {
     block_cbtCB_info:
         const _cbtCB;
         const 1;
         const 30;
 },
 _cbtCH() //  []
         { []
         }
     {offset
       cbtCH: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtCH_info" {
     block_cbtCH_info:
         const _cbtCH;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hIsOpen1_entry() //  [R2]
         { []
         }
     {offset
       cbtCT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtCU; else goto cbtCV;
       cbtCU: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsOpen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtCV: // global
           I64[Sp - 8] = block_cbtBY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtDc; else goto cbtBZ;
       ubtDc: // global
           call _cbtBY(R1) args: 0, res: 0, upd: 0;
       cbtBZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen1_info" {
     GHC.IO.Handle.hIsOpen1_info:
         const GHC.IO.Handle.hIsOpen1_entry;
         const 0;
         const 55834574862;
         const 8589934597;
         const SboCL_srt+888;
 },
 _cbtBY() //  [R1]
         { []
         }
     {offset
       cbtBY: // global
           if (R1 & 7 == 1) goto cbtCQ; else goto cbtCR;
       cbtCQ: // global
           I64[Sp - 16] = block_cbtC3_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtCR: // global
           I64[Sp - 16] = block_cbtCs_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtBY_info" {
     block_cbtBY_info:
         const _cbtBY;
         const 0;
         const 21474836510;
         const SboCL_srt+888;
 },
 _cbtC3() //  [R1]
         { []
         }
     {offset
       cbtC3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtCZ; else goto cbtCY;
       cbtCZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtCY: // global
           I64[Hp - 16] = io_sbouZ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtC5::P64 = Hp - 15;
           if (R1 == 0) goto cbtD3; else goto cbtD2;
       cbtD3: // global
           R1 = _cbtC5::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtD2: // global
           R1 = _cbtC5::P64;
           Sp = Sp + 24;
           call io_sbouZ_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtC3_info" {
     block_cbtC3_info:
         const _cbtC3;
         const 2;
         const 21474836510;
         const SboCL_srt+888;
 },
 _cbtCs() //  [R1]
         { []
         }
     {offset
       cbtCs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtD7; else goto cbtD6;
       cbtD7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtD6: // global
           I64[Hp - 16] = io_sbovf_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtCu::P64 = Hp - 15;
           if (R1 == 0) goto cbtDb; else goto cbtDa;
       cbtDb: // global
           R1 = _cbtCu::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtDa: // global
           R1 = _cbtCu::P64;
           Sp = Sp + 24;
           call io_sbovf_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtCs_info" {
     block_cbtCs_info:
         const _cbtCs;
         const 2;
         const 21474836510;
         const SboCL_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.771113028 UTC

[section ""data" . GHC.IO.Handle.hIsOpen_closure" {
     GHC.IO.Handle.hIsOpen_closure:
         const GHC.IO.Handle.hIsOpen_info;
         const 0;
 },
 GHC.IO.Handle.hIsOpen_entry() //  [R2]
         { []
         }
     {offset
       cbtE8: // global
           R2 = R2;
           call GHC.IO.Handle.hIsOpen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen_info" {
     GHC.IO.Handle.hIsOpen_info:
         const GHC.IO.Handle.hIsOpen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.775189634 UTC

[section ""data" . GHC.IO.Handle.hGetPosn1_closure" {
     GHC.IO.Handle.hGetPosn1_closure:
         const GHC.IO.Handle.hGetPosn1_info;
         const 0;
 },
 GHC.IO.Handle.hGetPosn1_entry() //  [R2]
         { []
         }
     {offset
       cbtEm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtEn; else goto cbtEo;
       cbtEn: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetPosn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtEo: // global
           I64[Sp - 16] = block_cbtEj_info;
           R4 = GHC.IO.Handle.hGetPosn2_closure+2;
           R3 = R2;
           _sbovp::P64 = R2;
           R2 = GHC.IO.Handle.hGetPosn3_closure;
           P64[Sp - 8] = _sbovp::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.wantSeekableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn1_info" {
     GHC.IO.Handle.hGetPosn1_info:
         const GHC.IO.Handle.hGetPosn1_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SboCL_srt+920;
 },
 _cbtEj() //  [R1]
         { []
         }
     {offset
       cbtEj: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtEr; else goto cbtEq;
       cbtEr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtEq: // global
           I64[Hp - 16] = GHC.IO.Handle.HandlePosn_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtEj_info" {
     block_cbtEj_info:
         const _cbtEj;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.781220299 UTC

[section ""data" . GHC.IO.Handle.hGetPosn_closure" {
     GHC.IO.Handle.hGetPosn_closure:
         const GHC.IO.Handle.hGetPosn_info;
         const 0;
 },
 GHC.IO.Handle.hGetPosn_entry() //  [R2]
         { []
         }
     {offset
       cbtEG: // global
           R2 = R2;
           call GHC.IO.Handle.hGetPosn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn_info" {
     GHC.IO.Handle.hGetPosn_info:
         const GHC.IO.Handle.hGetPosn_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.784289648 UTC

[section ""cstring" . GHC.IO.Handle.hClose3_bytes" {
     GHC.IO.Handle.hClose3_bytes:
         I8[] [104,67,108,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.786648067 UTC

[section ""data" . GHC.IO.Handle.hClose2_closure" {
     GHC.IO.Handle.hClose2_closure:
         const GHC.IO.Handle.hClose2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hClose2_entry() //  [R1]
         { []
         }
     {offset
       cbtEU: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtEV; else goto cbtEW;
       cbtEV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtEW: // global
           (_cbtER::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtER::I64 == 0) goto cbtET; else goto cbtES;
       cbtET: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtES: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtER::I64;
           R2 = GHC.IO.Handle.hClose3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hClose2_info" {
     GHC.IO.Handle.hClose2_info:
         const GHC.IO.Handle.hClose2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.793600396 UTC

[section ""data" . GHC.IO.Handle.$wlvl_closure" {
     GHC.IO.Handle.$wlvl_closure:
         const GHC.IO.Handle.$wlvl_info;
         const 0;
 },
 sat_sbovK_entry() //  [R1]
         { []
         }
     {offset
       cbtFn: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbtFo; else goto cbtFp;
       cbtFo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtFp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbtFg_info;
           _sbovv::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbovv::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubtFQ; else goto cbtFh;
       ubtFQ: // global
           call _cbtFg(R1) args: 0, res: 0, upd: 0;
       cbtFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbovK_info" {
     sat_sbovK_info:
         const sat_sbovK_entry;
         const 2;
         const 18;
 },
 _cbtFg() //  [R1]
         { []
         }
     {offset
       cbtFg: // global
           if (R1 & 7 == 1) goto cbtFk; else goto cbtFl;
       cbtFk: // global
           _sbovv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbtFs_info;
           R1 = _sbovv::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubtFP; else goto cbtFu;
       ubtFP: // global
           call _cbtFs(R1) args: 0, res: 0, upd: 0;
       cbtFu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbtFl: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtFg_info" {
     block_cbtFg_info:
         const _cbtFg;
         const 1;
         const 30;
 },
 _cbtFs() //  [R1]
         { []
         }
     {offset
       cbtFs: // global
           if (R1 & 7 == 1) goto cbtFA; else goto cbtFH;
       cbtFA: // global
           Hp = Hp + 16;
           _sbovD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtFK; else goto cbtFC;
       cbtFC: // global
           _sbovE::P64 = P64[_sbovD::P64 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbovE::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbtFH: // global
           Hp = Hp + 16;
           _sbovD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtFK; else goto cbtFJ;
       cbtFK: // global
           HpAlloc = 16;
           R1 = _sbovD::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbtFJ: // global
           _sbovG::P64 = P64[_sbovD::P64 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbovG::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtFs_info" {
     block_cbtFs_info:
         const _cbtFs;
         const 0;
         const 30;
 },
 sat_sbovM_entry() //  [R1]
         { []
         }
     {offset
       cbtFT: // global
           _sbovM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtFU; else goto cbtFV;
       cbtFV: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbtFX; else goto cbtFW;
       cbtFX: // global
           HpAlloc = 104;
           goto cbtFU;
       cbtFU: // global
           R1 = _sbovM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtFW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbovM::P64;
           _sbovv::P64 = P64[_sbovM::P64 + 16];
           _sbovw::P64 = P64[_sbovM::P64 + 24];
           _sbovx::P64 = P64[_sbovM::P64 + 32];
           _sbovy::P64 = P64[_sbovM::P64 + 40];
           _sbovz::P64 = P64[_sbovM::P64 + 48];
           I64[Hp - 96] = sat_sbovK_info;
           P64[Hp - 80] = _sbovv::P64;
           P64[Hp - 72] = _sbovz::P64;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbovv::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = _sbovw::P64;
           P64[Hp - 24] = GHC.IO.Handle.hClose2_closure;
           P64[Hp - 16] = _sbovx::P64;
           P64[Hp - 8] = _sbovy::P64;
           P64[Hp] = Hp - 96;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbovM_info" {
     sat_sbovM_info:
         const sat_sbovM_entry;
         const 5;
         const 12884901903;
         const SboCL_srt+952;
 },
 GHC.IO.Handle.$wlvl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbtFY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbtG2; else goto cbtG1;
       cbtG2: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$wlvl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbtG1: // global
           I64[Hp - 48] = sat_sbovM_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$wlvl_info" {
     GHC.IO.Handle.$wlvl_info:
         const GHC.IO.Handle.$wlvl_entry;
         const 0;
         const 30064771086;
         const 25769803801;
         const SboCL_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.809590388 UTC

[section ""data" . GHC.IO.Handle.hClose1_closure" {
     GHC.IO.Handle.hClose1_closure:
         const GHC.IO.Handle.hClose1_info;
         const 0;
 },
 section ""relreadonly" . ubtIv_srtd" {
     ubtIv_srtd:
         const SboCL_srt+240;
         const 94;
         const 54043195528445953;
         const 973078528;
 },
 GHC.IO.Handle.hClose1_entry() //  [R2]
         { []
         }
     {offset
       cbtGI: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbtGJ; else goto cbtGK;
       cbtGJ: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hClose1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtGK: // global
           I64[Sp - 8] = block_cbtGB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtIp; else goto cbtGC;
       ubtIp: // global
           call _cbtGB(R1) args: 0, res: 0, upd: 0;
       cbtGC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hClose1_info" {
     GHC.IO.Handle.hClose1_info:
         const GHC.IO.Handle.hClose1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubtIv_srtd;
 },
 section ""relreadonly" . ubtIw_srtd" {
     ubtIw_srtd:
         const SboCL_srt+240;
         const 93;
         const 54043195528445953;
         const 436207616;
 },
 _cbtGB() //  [R1]
         { []
         }
     {offset
       cbtGB: // global
           if (R1 & 7 == 1) goto cbtGF; else goto cbtGG;
       cbtGF: // global
           I64[Sp - 8] = block_cbtGN_info;
           R5 = GHC.IO.Handle.Internals.hClose_help1_closure+2;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.hClose2_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
       cbtGG: // global
           I64[Sp - 16] = block_cbtHw_info;
           R5 = GHC.IO.Handle.Internals.hClose_help1_closure+2;
           R4 = P64[R1 + 14];
           R3 = R1;
           R2 = GHC.IO.Handle.hClose2_closure;
           P64[Sp - 8] = P64[R1 + 22];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtGB_info" {
     block_cbtGB_info:
         const _cbtGB;
         const 0;
         const 18446744069414584350;
         const ubtIw_srtd;
 },
 section ""relreadonly" . ubtIx_srtd" {
     ubtIx_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtGN() //  [R1]
         { []
         }
     {offset
       cbtGN: // global
           I64[Sp] = block_cbtGP_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtIq; else goto cbtGS;
       ubtIq: // global
           call _cbtGP(R1) args: 0, res: 0, upd: 0;
       cbtGS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtGN_info" {
     block_cbtGN_info:
         const _cbtGN;
         const 1;
         const 18446744069414584350;
         const ubtIx_srtd;
 },
 section ""relreadonly" . ubtIy_srtd" {
     ubtIy_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtGP() //  [R1]
         { []
         }
     {offset
       cbtGP: // global
           if (R1 & 7 == 1) goto ubtIo; else goto cbtH8;
       ubtIo: // global
           Sp = Sp + 16;
           call _cbtHN() args: 0, res: 0, upd: 0;
       cbtH8: // global
           I64[Sp] = block_cbtH1_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubtIr; else goto cbtH2;
       ubtIr: // global
           call _cbtH1(R1) args: 0, res: 0, upd: 0;
       cbtH2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtGP_info" {
     block_cbtGP_info:
         const _cbtGP;
         const 1;
         const 18446744069414584350;
         const ubtIy_srtd;
 },
 section ""relreadonly" . ubtIz_srtd" {
     ubtIz_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtH1() //  [R1]
         { []
         }
     {offset
       cbtH1: // global
           I64[Sp - 16] = block_cbtH6_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtH1_info" {
     block_cbtH1_info:
         const _cbtH1;
         const 1;
         const 18446744069414584350;
         const ubtIz_srtd;
 },
 section ""relreadonly" . ubtIA_srtd" {
     ubtIA_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtH6() //  [R1]
         { []
         }
     {offset
       cbtH6: // global
           I64[Sp] = block_cbtHd_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtH6_info" {
     block_cbtH6_info:
         const _cbtH6;
         const 3;
         const 18446744069414584350;
         const ubtIA_srtd;
 },
 _cbtHd() //  [R1]
         { []
         }
     {offset
       cbtHd: // global
           if (R1 & 7 == 1) goto cbtHk; else goto cbtHp;
       cbtHk: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbtHp: // global
           I64[Sp + 16] = block_cbtHn_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtHd_info" {
     block_cbtHd_info:
         const _cbtHd;
         const 3;
         const 4294967326;
         const SboCL_srt+968;
 },
 _cbtHn() //  [R1]
         { []
         }
     {offset
       cbtHn: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 39];
           R4 = P64[R1 + 31];
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.$wlvl_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtHn_info" {
     block_cbtHn_info:
         const _cbtHn;
         const 1;
         const 4294967326;
         const SboCL_srt+968;
 },
 section ""relreadonly" . ubtIB_srtd" {
     ubtIB_srtd:
         const SboCL_srt+240;
         const 93;
         const 54043195528445953;
         const 436207616;
 },
 _cbtHw() //  [R1]
         { []
         }
     {offset
       cbtHw: // global
           I64[Sp] = block_cbtHy_info;
           R5 = GHC.IO.Handle.Internals.hClose_help1_closure+2;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Handle.hClose2_closure;
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtHw_info" {
     block_cbtHw_info:
         const _cbtHw;
         const 2;
         const 18446744069414584350;
         const ubtIB_srtd;
 },
 section ""relreadonly" . ubtIC_srtd" {
     ubtIC_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtHy() //  [R1]
         { []
         }
     {offset
       cbtHy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbtHH; else goto cbtHG;
       cbtHH: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtHG: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 38;
           I64[Sp + 8] = block_cbtHC_info;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.Maybe.catMaybes1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtHy_info" {
     block_cbtHy_info:
         const _cbtHy;
         const 2;
         const 18446744069414584350;
         const ubtIC_srtd;
 },
 section ""relreadonly" . ubtID_srtd" {
     ubtID_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtHC() //  [R1]
         { []
         }
     {offset
       cbtHC: // global
           if (R1 & 7 == 1) goto ubtIn; else goto cbtHX;
       ubtIn: // global
           Sp = Sp + 16;
           call _cbtHN() args: 0, res: 0, upd: 0;
       cbtHX: // global
           I64[Sp] = block_cbtHQ_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubtIt; else goto cbtHR;
       ubtIt: // global
           call _cbtHQ(R1) args: 0, res: 0, upd: 0;
       cbtHR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtHC_info" {
     block_cbtHC_info:
         const _cbtHC;
         const 1;
         const 18446744069414584350;
         const ubtID_srtd;
 },
 _cbtHN() //  []
         { []
         }
     {offset
       cbtHN: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubtIE_srtd" {
     ubtIE_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtHQ() //  [R1]
         { []
         }
     {offset
       cbtHQ: // global
           I64[Sp - 16] = block_cbtHV_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtHQ_info" {
     block_cbtHQ_info:
         const _cbtHQ;
         const 1;
         const 18446744069414584350;
         const ubtIE_srtd;
 },
 section ""relreadonly" . ubtIF_srtd" {
     ubtIF_srtd:
         const SboCL_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbtHV() //  [R1]
         { []
         }
     {offset
       cbtHV: // global
           I64[Sp] = block_cbtI2_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtHV_info" {
     block_cbtHV_info:
         const _cbtHV;
         const 3;
         const 18446744069414584350;
         const ubtIF_srtd;
 },
 _cbtI2() //  [R1]
         { []
         }
     {offset
       cbtI2: // global
           if (R1 & 7 == 1) goto cbtI9; else goto cbtIe;
       cbtI9: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbtIe: // global
           I64[Sp + 16] = block_cbtIc_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtI2_info" {
     block_cbtI2_info:
         const _cbtI2;
         const 3;
         const 4294967326;
         const SboCL_srt+968;
 },
 _cbtIc() //  [R1]
         { []
         }
     {offset
       cbtIc: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 39];
           R4 = P64[R1 + 31];
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.$wlvl_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtIc_info" {
     block_cbtIc_info:
         const _cbtIc;
         const 1;
         const 4294967326;
         const SboCL_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.842295484 UTC

[section ""data" . GHC.IO.Handle.hClose_closure" {
     GHC.IO.Handle.hClose_closure:
         const GHC.IO.Handle.hClose_info;
         const 0;
 },
 GHC.IO.Handle.hClose_entry() //  [R2]
         { []
         }
     {offset
       cbtK2: // global
           R2 = R2;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hClose_info" {
     GHC.IO.Handle.hClose_info:
         const GHC.IO.Handle.hClose_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.845277523 UTC

[section ""data" . lvl28_rbnXa_closure" {
     lvl28_rbnXa_closure:
         const GHC.Types.C#_con_info;
         const 123;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.847404976 UTC

[section ""data" . lvl29_rbnXb_closure" {
     lvl29_rbnXb_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.849091698 UTC

[section ""cstring" . lvl30_rbnXc_bytes" {
     lvl30_rbnXc_bytes:
         I8[] [100,117,112,108,101,120,32,40,114,101,97,100,45,119,114,105,116,101,41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.851839066 UTC

[section ""data" . lvl31_rbnXd_closure" {
     lvl31_rbnXd_closure:
         const lvl31_rbnXd_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_rbnXd_entry() //  [R1]
         { []
         }
     {offset
       cbtKi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtKj; else goto cbtKk;
       cbtKj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtKk: // global
           (_cbtKf::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtKf::I64 == 0) goto cbtKh; else goto cbtKg;
       cbtKh: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtKg: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtKf::I64;
           R2 = lvl30_rbnXc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_rbnXd_info" {
     lvl31_rbnXd_info:
         const lvl31_rbnXd_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.855267865 UTC

[section ""cstring" . lvl32_rbnXe_bytes" {
     lvl32_rbnXe_bytes:
         I8[] [110,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.857341028 UTC

[section ""data" . lvl33_rbnXf_closure" {
     lvl33_rbnXf_closure:
         const lvl33_rbnXf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_rbnXf_entry() //  [R1]
         { []
         }
     {offset
       cbtKz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtKA; else goto cbtKB;
       cbtKA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtKB: // global
           (_cbtKw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtKw::I64 == 0) goto cbtKy; else goto cbtKx;
       cbtKy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtKx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtKw::I64;
           R2 = lvl32_rbnXe_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_rbnXf_info" {
     lvl33_rbnXf_info:
         const lvl33_rbnXf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.860571895 UTC

[section ""cstring" . lvl34_rbnXg_bytes" {
     lvl34_rbnXg_bytes:
         I8[] [108,105,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.862663654 UTC

[section ""data" . lvl35_rbnXh_closure" {
     lvl35_rbnXh_closure:
         const lvl35_rbnXh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rbnXh_entry() //  [R1]
         { []
         }
     {offset
       cbtKQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtKR; else goto cbtKS;
       cbtKR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtKS: // global
           (_cbtKN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtKN::I64 == 0) goto cbtKP; else goto cbtKO;
       cbtKP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtKO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtKN::I64;
           R2 = lvl34_rbnXg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rbnXh_info" {
     lvl35_rbnXh_info:
         const lvl35_rbnXh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.866426792 UTC

[section ""cstring" . lvl36_rbnXi_bytes" {
     lvl36_rbnXi_bytes:
         I8[] [115,104,111,119,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.868507915 UTC

[section ""data" . lvl37_rbnXj_closure" {
     lvl37_rbnXj_closure:
         const lvl37_rbnXj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_rbnXj_entry() //  [R1]
         { []
         }
     {offset
       cbtL7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtL8; else goto cbtL9;
       cbtL8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtL9: // global
           (_cbtL4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtL4::I64 == 0) goto cbtL6; else goto cbtL5;
       cbtL6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtL5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtL4::I64;
           R2 = lvl36_rbnXi_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_rbnXj_info" {
     lvl37_rbnXj_info:
         const lvl37_rbnXj_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.87197469 UTC

[section ""cstring" . lvl38_rbnXk_bytes" {
     lvl38_rbnXk_bytes:
         I8[] [108,111,99,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.873735433 UTC

[section ""cstring" . lvl39_rbnXl_bytes" {
     lvl39_rbnXl_bytes:
         I8[] [116,121,112,101,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.875341995 UTC

[section ""cstring" . lvl40_rbnXm_bytes" {
     lvl40_rbnXm_bytes:
         I8[] [98,117,102,102,101,114,105,110,103,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.877547864 UTC

[section ""cstring" . lvl41_rbnXn_bytes" {
     lvl41_rbnXn_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.879755434 UTC

[section ""data" . lvl42_rbnXo_closure" {
     lvl42_rbnXo_closure:
         const lvl42_rbnXo_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_rbnXo_entry() //  [R1]
         { []
         }
     {offset
       cbtLr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtLs; else goto cbtLt;
       cbtLs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtLt: // global
           (_cbtLo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtLo::I64 == 0) goto cbtLq; else goto cbtLp;
       cbtLq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtLp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtLo::I64;
           R2 = lvl41_rbnXn_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_rbnXo_info" {
     lvl42_rbnXo_info:
         const lvl42_rbnXo_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.883762865 UTC

[section ""data" . lvl43_rbnXp_closure" {
     lvl43_rbnXp_closure:
         const lvl43_rbnXp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_rbnXp_entry() //  [R1]
         { []
         }
     {offset
       cbtLH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtLI; else goto cbtLJ;
       cbtLI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtLJ: // global
           (_cbtLE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtLE::I64 == 0) goto cbtLG; else goto cbtLF;
       cbtLG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtLF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtLE::I64;
           R3 = lvl42_rbnXo_closure;
           R2 = lvl33_rbnXf_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl43_rbnXp_info" {
     lvl43_rbnXp_info:
         const lvl43_rbnXp_entry;
         const 0;
         const 12884901909;
         const SboCL_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.888260299 UTC

[section ""data" . lvl44_rbnXq_closure" {
     lvl44_rbnXq_closure:
         const lvl44_rbnXq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl44_rbnXq_entry() //  [R1]
         { []
         }
     {offset
       cbtLX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtLY; else goto cbtLZ;
       cbtLY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtLZ: // global
           (_cbtLU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtLU::I64 == 0) goto cbtLW; else goto cbtLV;
       cbtLW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtLV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtLU::I64;
           R3 = lvl42_rbnXo_closure;
           R2 = lvl35_rbnXh_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl44_rbnXq_info" {
     lvl44_rbnXq_info:
         const lvl44_rbnXq_entry;
         const 0;
         const 12884901909;
         const SboCL_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.891596762 UTC

[section ""cstring" . lvl45_rbnXr_bytes" {
     lvl45_rbnXr_bytes:
         I8[] [98,108,111,99,107,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.893275539 UTC

[section ""data" . lvl46_rbnXs_closure" {
     lvl46_rbnXs_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const lvl42_rbnXo_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.895474384 UTC

[section ""data" . lvl47_rbnXt_closure" {
     lvl47_rbnXt_closure:
         const lvl47_rbnXt_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_rbnXt_entry() //  [R1]
         { []
         }
     {offset
       cbtMf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtMg; else goto cbtMh;
       cbtMg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtMh: // global
           (_cbtMc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbtMc::I64 == 0) goto cbtMe; else goto cbtMd;
       cbtMe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbtMd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbtMc::I64;
           R3 = lvl42_rbnXo_closure;
           R2 = GHC.IO.Handle.Types.$fShowHandleType11_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl47_rbnXt_info" {
     lvl47_rbnXt_info:
         const lvl47_rbnXt_entry;
         const 0;
         const 21474836501;
         const SboCL_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.915241627 UTC

[section ""data" . GHC.IO.Handle.hShow2_closure" {
     GHC.IO.Handle.hShow2_closure:
         const GHC.IO.Handle.hShow2_info;
         const 0;
 },
 sat_sboxg_entry() //  [R1]
         { []
         }
     {offset
       cbtNu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbtNA; else goto cbtNB;
       cbtNA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtNB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbtNm_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboxg_info" {
     sat_sboxg_info:
         const sat_sboxg_entry;
         const 1;
         const 4294967312;
         const SboCL_srt+1024;
 },
 _cbtNm() //  []
         { []
         }
     {offset
       cbtNm: // global
           _sbox5::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cbtNr_info;
           R1 = _sbox5::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubtNI; else goto cbtNs;
       ubtNI: // global
           call _cbtNr(R1) args: 0, res: 0, upd: 0;
       cbtNs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtNm_info" {
     block_cbtNm_info:
         const _cbtNm;
         const 1;
         const 4294967326;
         const SboCL_srt+1024;
 },
 _cbtNr() //  [R1]
         { []
         }
     {offset
       cbtNr: // global
           I64[Sp] = block_cbtNx_info;
           R4 = lvl46_rbnXs_closure+2;
           R3 = I64[R1 + 31];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtNr_info" {
     block_cbtNr_info:
         const _cbtNr;
         const 0;
         const 4294967326;
         const SboCL_srt+1024;
 },
 _cbtNx() //  [R1, R2]
         { []
         }
     {offset
       cbtNx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtNH; else goto cbtNG;
       cbtNH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbtNG: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtNx_info" {
     block_cbtNx_info:
         const _cbtNx;
         const 0;
         const 30;
 },
 sat_sboxo_entry() //  [R1]
         { []
         }
     {offset
       cbtNS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbtNY; else goto cbtNZ;
       cbtNY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtNZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbtNP_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubtO4; else goto cbtNQ;
       ubtO4: // global
           call _cbtNP(R1) args: 0, res: 0, upd: 0;
       cbtNQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboxo_info" {
     sat_sboxo_info:
         const sat_sboxo_entry;
         const 1;
         const 4294967312;
         const SboCL_srt+1024;
 },
 _cbtNP() //  [R1]
         { []
         }
     {offset
       cbtNP: // global
           I64[Sp] = block_cbtNV_info;
           R4 = lvl46_rbnXs_closure+2;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtNP_info" {
     block_cbtNP_info:
         const _cbtNP;
         const 0;
         const 4294967326;
         const SboCL_srt+1024;
 },
 _cbtNV() //  [R1, R2]
         { []
         }
     {offset
       cbtNV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtO3; else goto cbtO2;
       cbtO3: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbtO2: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtNV_info" {
     block_cbtNV_info:
         const _cbtNV;
         const 0;
         const 30;
 },
 sat_sboxq_entry() //  [R1]
         { []
         }
     {offset
       cbtOa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbtOb; else goto cbtOc;
       cbtOb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtOc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbtN6_info;
           _sbowP::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sbowP::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubtOw; else goto cbtN7;
       ubtOw: // global
           call _cbtN6(R1) args: 0, res: 0, upd: 0;
       cbtN7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboxq_info" {
     sat_sboxq_info:
         const sat_sboxq_entry;
         const 2;
         const 30064771090;
         const SboCL_srt+1024;
 },
 _cbtN6() //  [R1]
         { []
         }
     {offset
       cbtN6: // global
           _cbtO9::P64 = R1 & 7;
           if (_cbtO9::P64 < 3) goto ubtOu; else goto cbtO8;
       ubtOu: // global
           if (_cbtO9::P64 < 2) goto cbtO6; else goto cbtO7;
       cbtO6: // global
           R1 = lvl43_rbnXp_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbtO7: // global
           R1 = lvl44_rbnXq_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbtO8: // global
           I64[Sp] = block_cbtNd_info;
           R1 = P64[R1 + 5];
           if (R1 & 7 != 0) goto ubtOv; else goto cbtNe;
       ubtOv: // global
           call _cbtNd(R1) args: 0, res: 0, upd: 0;
       cbtNe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtN6_info" {
     block_cbtN6_info:
         const _cbtN6;
         const 1;
         const 30064771102;
         const SboCL_srt+1024;
 },
 _cbtNd() //  [R1]
         { []
         }
     {offset
       cbtNd: // global
           if (R1 & 7 == 1) goto cbtOk; else goto cbtOp;
       cbtOk: // global
           Hp = Hp + 48;
           _sbox1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtOs; else goto cbtOm;
       cbtOm: // global
           I64[Hp - 40] = sat_sboxg_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl45_rbnXr_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cbtOp: // global
           Hp = Hp + 48;
           _sbox1::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtOs; else goto cbtOr;
       cbtOs: // global
           HpAlloc = 48;
           R1 = _sbox1::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbtOr: // global
           _sboxi::P64 = P64[_sbox1::P64 + 6];
           I64[Hp - 40] = sat_sboxo_info;
           P64[Hp - 24] = _sboxi::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl45_rbnXr_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtNd_info" {
     block_cbtNd_info:
         const _cbtNd;
         const 1;
         const 4294967326;
         const SboCL_srt+1024;
 },
 karg_sbowY_entry() //  [R1]
         { []
         }
     {offset
       cbtOx: // global
           _sbowY::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtOy; else goto cbtOz;
       cbtOz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbtOB; else goto cbtOA;
       cbtOB: // global
           HpAlloc = 32;
           goto cbtOy;
       cbtOy: // global
           R1 = _sbowY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtOA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbowY::P64;
           _sbowN::P64 = P64[_sbowY::P64 + 16];
           _sbowP::P64 = P64[_sbowY::P64 + 24];
           I64[Hp - 24] = sat_sboxq_info;
           P64[Hp - 8] = _sbowN::P64;
           P64[Hp] = _sbowP::P64;
           R3 = Hp - 24;
           R2 = lvl40_rbnXm_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . karg_sbowY_info" {
     karg_sbowY_info:
         const karg_sbowY_entry;
         const 2;
         const 30064771090;
         const SboCL_srt+1024;
 },
 sat_sboxz_entry() //  [R1]
         { []
         }
     {offset
       cbtOJ: // global
           _sboxz::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbtOK; else goto cbtOL;
       cbtOL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbtON; else goto cbtOM;
       cbtON: // global
           HpAlloc = 32;
           goto cbtOK;
       cbtOK: // global
           R1 = _sboxz::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtOM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sboxz::P64;
           _sbowA::P64 = P64[_sboxz::P64 + 16];
           _sbowN::P64 = P64[_sboxz::P64 + 24];
           _sbowP::P64 = P64[_sboxz::P64 + 32];
           _sbowX::P64 = P64[_sboxz::P64 + 40];
           I64[Hp - 24] = karg_sbowY_info;
           P64[Hp - 8] = _sbowN::P64;
           P64[Hp] = _sbowP::P64;
           I64[Sp - 40] = block_cbtOC_info;
           R1 = _sbowA::P64;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sbowX::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubtPF; else goto cbtOD;
       ubtPF: // global
           call _cbtOC(R1) args: 0, res: 0, upd: 0;
       cbtOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboxz_info" {
     sat_sboxz_info:
         const sat_sboxz_entry;
         const 4;
         const 2194728288271;
         const SboCL_srt+1024;
 },
 _cbtOC() //  [R1]
         { []
         }
     {offset
       cbtOC: // global
           if (R1 & 7 == 1) goto cbtOG; else goto cbtOH;
       cbtOG: // global
           I64[Sp] = block_cbtOQ_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubtPE; else goto cbtOS;
       ubtPE: // global
           call _cbtOQ(R1) args: 0, res: 0, upd: 0;
       cbtOS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbtOH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtPz; else goto cbtPy;
       cbtPz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbtPy: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = lvl31_rbnXd_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtOC_info" {
     block_cbtOC_info:
         const _cbtOC;
         const 2;
         const 270582939678;
         const SboCL_srt+1048;
 },
 _cbtOQ() //  [R1]
         { []
         }
     {offset
       cbtOQ: // global
           _cbtMY::P64 = P64[Sp + 8];
           _cbtPA::P64 = R1 & 7;
           if (_cbtPA::P64 < 5) goto ubtPB; else goto ubtPD;
       ubtPB: // global
           if (_cbtPA::P64 < 4) goto ubtPC; else goto cbtPc;
       ubtPC: // global
           if (_cbtPA::P64 < 3) goto cbtOY; else goto cbtP5;
       cbtOY: // global
           Hp = Hp + 24;
           _sboxs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtPt; else goto cbtP0;
       cbtP0: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbtMY::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType9_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbtP5: // global
           Hp = Hp + 24;
           _sboxs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtPt; else goto cbtP7;
       cbtP7: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbtMY::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbtPc: // global
           Hp = Hp + 24;
           _sboxs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtPt; else goto cbtPe;
       cbtPe: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbtMY::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       ubtPD: // global
           if (_cbtPA::P64 < 6) goto cbtPj; else goto cbtPq;
       cbtPj: // global
           Hp = Hp + 24;
           _sboxs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtPt; else goto cbtPl;
       cbtPl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbtMY::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType3_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbtPq: // global
           Hp = Hp + 24;
           _sboxs::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbtPt; else goto cbtPs;
       cbtPt: // global
           HpAlloc = 24;
           R1 = _sboxs::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbtPs: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbtMY::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType1_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtOQ_info" {
     block_cbtOQ_info:
         const _cbtOQ;
         const 130;
         const 133143986206;
         const SboCL_srt+1048;
 },
 sat_sboxA_entry() //  [R1]
         { []
         }
     {offset
       cbtPG: // global
           _sboxA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtPH; else goto cbtPI;
       cbtPI: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbtPK; else goto cbtPJ;
       cbtPK: // global
           HpAlloc = 48;
           goto cbtPH;
       cbtPH: // global
           R1 = _sboxA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtPJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sboxA::P64;
           _sbowA::P64 = P64[_sboxA::P64 + 16];
           _sbowN::P64 = P64[_sboxA::P64 + 24];
           _sbowP::P64 = P64[_sboxA::P64 + 32];
           _sbowX::P64 = P64[_sboxA::P64 + 40];
           I64[Hp - 40] = sat_sboxz_info;
           P64[Hp - 24] = _sbowA::P64;
           P64[Hp - 16] = _sbowN::P64;
           P64[Hp - 8] = _sbowP::P64;
           P64[Hp] = _sbowX::P64;
           R3 = Hp - 40;
           R2 = lvl39_rbnXl_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboxA_info" {
     sat_sboxA_info:
         const sat_sboxA_entry;
         const 4;
         const 2194728288271;
         const SboCL_srt+1024;
 },
 sat_sboxC_entry() //  [R1]
         { []
         }
     {offset
       cbtPM: // global
           _sboxC::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtPN; else goto cbtPO;
       cbtPO: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbtPQ; else goto cbtPP;
       cbtPQ: // global
           HpAlloc = 72;
           goto cbtPN;
       cbtPN: // global
           R1 = _sboxC::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtPP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sboxC::P64;
           _sbowz::P64 = P64[_sboxC::P64 + 16];
           _sbowA::P64 = P64[_sboxC::P64 + 24];
           _sbowN::P64 = P64[_sboxC::P64 + 32];
           _sbowP::P64 = P64[_sboxC::P64 + 40];
           _sbowX::P64 = P64[_sboxC::P64 + 48];
           I64[Hp - 64] = sat_sboxA_info;
           P64[Hp - 48] = _sbowA::P64;
           P64[Hp - 40] = _sbowN::P64;
           P64[Hp - 32] = _sbowP::P64;
           P64[Hp - 24] = _sbowX::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = _sbowz::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboxC_info" {
     sat_sboxC_info:
         const sat_sboxC_entry;
         const 5;
         const 2194728288271;
         const SboCL_srt+1024;
 },
 sat_sboxD_entry() //  [R1]
         { []
         }
     {offset
       cbtPR: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbtPS; else goto cbtPT;
       cbtPS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbtPT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cbtMC_info;
           _sbowz::P64 = P64[R1 + 16];
           _sbowA::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sbowz::P64;
           P64[Sp - 24] = _sbowA::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubtQ6; else goto cbtMD;
       ubtQ6: // global
           call _cbtMC(R1) args: 0, res: 0, upd: 0;
       cbtMD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sboxD_info" {
     sat_sboxD_info:
         const sat_sboxD_entry;
         const 3;
         const 4393751543823;
         const SboCL_srt+1024;
 },
 _cbtMC() //  [R1]
         { []
         }
     {offset
       cbtMC: // global
           I64[Sp - 16] = block_cbtMH_info;
           _sbowN::P64 = P64[R1 + 55];
           _sbowP::P64 = P64[R1 + 71];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _sbowP::P64;
           P64[Sp] = _sbowN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubtQ5; else goto cbtMI;
       ubtQ5: // global
           call _cbtMH(R1) args: 0, res: 0, upd: 0;
       cbtMI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtMC_info" {
     block_cbtMC_info:
         const _cbtMC;
         const 2;
         const 4393751543838;
         const SboCL_srt+1024;
 },
 _cbtMH() //  [R1]
         { []
         }
     {offset
       cbtMH: // global
           if (R1 & 7 == 1) goto cbtQ3; else goto cbtPW;
       cbtQ3: // global
           R1 = lvl47_rbnXt_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbtPW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbtPZ; else goto cbtPY;
       cbtPZ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbtPY: // global
           I64[Hp - 48] = sat_sboxC_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R3 = Hp - 48;
           R2 = lvl38_rbnXk_bytes;
           Sp = Sp + 40;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbtMH_info" {
     block_cbtMH_info:
         const _cbtMH;
         const 4;
         const 4393751543838;
         const SboCL_srt+1024;
 },
 act_sbowD_entry() //  [R1, R2]
         { []
         }
     {offset
       cbtQ8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbtQc; else goto cbtQb;
       cbtQc: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtQb: // global
           _sbowz::P64 = P64[R1 + 6];
           _sbowA::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sboxD_info;
           P64[Hp - 40] = _sbowz::P64;
           P64[Hp - 32] = _sbowA::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl28_rbnXa_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . act_sbowD_info" {
     act_sbowD_info:
         const act_sbowD_entry;
         const 2;
         const 4393751543819;
         const 8589934597;
         const SboCL_srt+1024;
 },
 sat_sboxT_entry() //  [R1, R2]
         { []
         }
     {offset
       cbtQx: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtQy; else goto cbtQz;
       cbtQy: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtQz: // global
           I64[Sp - 16] = block_cbtQu_info;
           _sboxN::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sboxN::P64;
           Sp = Sp - 16;
           call act_sbowD_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sboxT_info" {
     sat_sboxT_info:
         const sat_sboxT_entry;
         const 1;
         const 4393751543817;
         const 8589934597;
         const SboCL_srt+1024;
 },
 _cbtQu() //  [R1]
         { []
         }
     {offset
       cbtQu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtQC; else goto cbtQB;
       cbtQC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtQB: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtQu_info" {
     block_cbtQu_info:
         const _cbtQu;
         const 1;
         const 30;
 },
 io_sboxL_entry() //  [R1]
         { []
         }
     {offset
       cbtQI: // global
           _sboxL::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtQM; else goto cbtQN;
       cbtQN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbtQP; else goto cbtQO;
       cbtQP: // global
           HpAlloc = 16;
           goto cbtQM;
       cbtQM: // global
           R1 = _sboxL::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtQO: // global
           _sbowD::P64 = P64[_sboxL::P64 + 7];
           _sboxF::P64 = P64[_sboxL::P64 + 15];
           _sboxH::P64 = P64[_sboxL::P64 + 23];
           I64[Hp - 8] = sat_sboxT_info;
           P64[Hp] = _sbowD::P64;
           I64[Sp - 16] = block_cbtQD_info;
           R5 = _sboxH::P64;
           R4 = Hp - 6;
           R3 = _sboxF::P64;
           R2 = lvl37_rbnXj_closure;
           P64[Sp - 8] = _sboxH::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sboxL_info" {
     io_sboxL_info:
         const io_sboxL_entry;
         const 3;
         const 1152358558948392968;
         const 4294967299;
         const SboCL_srt+888;
 },
 _cbtQD() //  [R1]
         { []
         }
     {offset
       cbtQD: // global
           I64[Sp] = block_cbtQF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtQU; else goto cbtQG;
       ubtQU: // global
           call _cbtQF(R1) args: 0, res: 0, upd: 0;
       cbtQG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtQD_info" {
     block_cbtQD_info:
         const _cbtQD;
         const 1;
         const 30;
 },
 _cbtQF() //  [R1]
         { []
         }
     {offset
       cbtQF: // global
           I64[Sp] = block_cbtQL_info;
           R2 = P64[R1 + 7];
           _sboxZ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sboxZ::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtQF_info" {
     block_cbtQF_info:
         const _cbtQF;
         const 1;
         const 30;
 },
 _cbtQL() //  []
         { []
         }
     {offset
       cbtQL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtQL_info" {
     block_cbtQL_info:
         const _cbtQL;
         const 1;
         const 30;
 },
 sat_sboyg_entry() //  [R1, R2]
         { []
         }
     {offset
       cbtRc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbtRd; else goto cbtRe;
       cbtRd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtRe: // global
           I64[Sp - 16] = block_cbtR9_info;
           _sboya::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sboya::P64;
           Sp = Sp - 16;
           call act_sbowD_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sboyg_info" {
     sat_sboyg_info:
         const sat_sboyg_entry;
         const 1;
         const 4393751543817;
         const 8589934597;
         const SboCL_srt+1024;
 },
 _cbtR9() //  [R1]
         { []
         }
     {offset
       cbtR9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtRh; else goto cbtRg;
       cbtRh: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbtRg: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtR9_info" {
     block_cbtR9_info:
         const _cbtR9;
         const 1;
         const 30;
 },
 io_sboy8_entry() //  [R1]
         { []
         }
     {offset
       cbtRn: // global
           _sboy8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbtRr; else goto cbtRs;
       cbtRs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbtRu; else goto cbtRt;
       cbtRu: // global
           HpAlloc = 16;
           goto cbtRr;
       cbtRr: // global
           R1 = _sboy8::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbtRt: // global
           _sbowD::P64 = P64[_sboy8::P64 + 7];
           _sboxF::P64 = P64[_sboy8::P64 + 15];
           _sboy3::P64 = P64[_sboy8::P64 + 23];
           I64[Hp - 8] = sat_sboyg_info;
           P64[Hp] = _sbowD::P64;
           I64[Sp - 16] = block_cbtRi_info;
           R5 = _sboy3::P64;
           R4 = Hp - 6;
           R3 = _sboxF::P64;
           R2 = lvl37_rbnXj_closure;
           P64[Sp - 8] = _sboy3::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sboy8_info" {
     io_sboy8_info:
         const io_sboy8_entry;
         const 3;
         const 1152358558948392968;
         const 4294967299;
         const SboCL_srt+888;
 },
 _cbtRi() //  [R1]
         { []
         }
     {offset
       cbtRi: // global
           I64[Sp] = block_cbtRk_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubtRz; else goto cbtRl;
       ubtRz: // global
           call _cbtRk(R1) args: 0, res: 0, upd: 0;
       cbtRl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtRi_info" {
     block_cbtRi_info:
         const _cbtRi;
         const 1;
         const 30;
 },
 _cbtRk() //  [R1]
         { []
         }
     {offset
       cbtRk: // global
           I64[Sp] = block_cbtRq_info;
           R2 = P64[R1 + 7];
           _sboym::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sboym::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtRk_info" {
     block_cbtRk_info:
         const _cbtRk;
         const 1;
         const 30;
 },
 _cbtRq() //  []
         { []
         }
     {offset
       cbtRq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtRq_info" {
     block_cbtRq_info:
         const _cbtRq;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hShow2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbtRE: // global
           _sbowB::P64 = R4;
           _sbowA::P64 = R3;
           _sbowz::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cbtRF; else goto cbtRG;
       cbtRG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtRI; else goto cbtRH;
       cbtRI: // global
           HpAlloc = 24;
           goto cbtRF;
       cbtRF: // global
           R4 = _sbowB::P64;
           R3 = _sbowA::P64;
           R2 = _sbowz::P64;
           R1 = GHC.IO.Handle.hShow2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbtRH: // global
           I64[Hp - 16] = act_sbowD_info;
           P64[Hp - 8] = _sbowz::P64;
           P64[Hp] = _sbowA::P64;
           I64[Sp - 16] = block_cbtQd_info;
           R1 = _sbowB::P64;
           P64[Sp - 8] = Hp - 14;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubtRZ; else goto cbtQe;
       ubtRZ: // global
           call _cbtQd(R1) args: 0, res: 0, upd: 0;
       cbtQe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hShow2_info" {
     GHC.IO.Handle.hShow2_info:
         const GHC.IO.Handle.hShow2_entry;
         const 0;
         const 2305280063555239950;
         const 17179869207;
         const SboCL_srt+888;
 },
 _cbtQd() //  [R1]
         { []
         }
     {offset
       cbtQd: // global
           if (R1 & 7 == 1) goto cbtRB; else goto cbtRC;
       cbtRB: // global
           I64[Sp - 16] = block_cbtQi_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbtRC: // global
           I64[Sp - 16] = block_cbtQX_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtQd_info" {
     block_cbtQd_info:
         const _cbtQd;
         const 1;
         const 1152358558948392990;
         const SboCL_srt+888;
 },
 _cbtQi() //  [R1]
         { []
         }
     {offset
       cbtQi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbtRM; else goto cbtRL;
       cbtRM: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtRL: // global
           I64[Hp - 24] = io_sboxL_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtQk::P64 = Hp - 23;
           if (R1 == 0) goto cbtRQ; else goto cbtRP;
       cbtRQ: // global
           R1 = _cbtQk::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtRP: // global
           R1 = _cbtQk::P64;
           Sp = Sp + 32;
           call io_sboxL_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtQi_info" {
     block_cbtQi_info:
         const _cbtQi;
         const 3;
         const 1152358558948392990;
         const SboCL_srt+888;
 },
 _cbtQX() //  [R1]
         { []
         }
     {offset
       cbtQX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbtRU; else goto cbtRT;
       cbtRU: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbtRT: // global
           I64[Hp - 24] = io_sboy8_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbtQZ::P64 = Hp - 23;
           if (R1 == 0) goto cbtRY; else goto cbtRX;
       cbtRY: // global
           R1 = _cbtQZ::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbtRX: // global
           R1 = _cbtQZ::P64;
           Sp = Sp + 32;
           call io_sboy8_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtQX_info" {
     block_cbtQX_info:
         const _cbtQX;
         const 3;
         const 1152358558948392990;
         const SboCL_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.979805648 UTC

[section ""data" . GHC.IO.Handle.hShow1_closure" {
     GHC.IO.Handle.hShow1_closure:
         const GHC.IO.Handle.hShow1_info;
         const 0;
 },
 GHC.IO.Handle.hShow1_entry() //  [R2]
         { []
         }
     {offset
       cbtV2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbtV3; else goto cbtV4;
       cbtV3: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hShow1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbtV4: // global
           I64[Sp - 8] = block_cbtUV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubtVb; else goto cbtUW;
       ubtVb: // global
           call _cbtUV(R1) args: 0, res: 0, upd: 0;
       cbtUW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hShow1_info" {
     GHC.IO.Handle.hShow1_info:
         const GHC.IO.Handle.hShow1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SboCL_srt+1112;
 },
 _cbtUV() //  [R1]
         { []
         }
     {offset
       cbtUV: // global
           if (R1 & 7 == 1) goto cbtUZ; else goto cbtV0;
       cbtUZ: // global
           R4 = R1;
           R3 = GHC.Types.False_closure+1;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.hShow2_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       cbtV0: // global
           R4 = R1;
           R3 = GHC.Types.True_closure+2;
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.IO.Handle.hShow2_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbtUV_info" {
     block_cbtUV_info:
         const _cbtUV;
         const 0;
         const 4294967326;
         const SboCL_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.98535939 UTC

[section ""data" . GHC.IO.Handle.hShow_closure" {
     GHC.IO.Handle.hShow_closure:
         const GHC.IO.Handle.hShow_info;
         const 0;
 },
 GHC.IO.Handle.hShow_entry() //  [R2]
         { []
         }
     {offset
       cbtVr: // global
           R2 = R2;
           call GHC.IO.Handle.hShow1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hShow_info" {
     GHC.IO.Handle.hShow_info:
         const GHC.IO.Handle.hShow_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SboCL_srt+1120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.988694121 UTC

[section ""data" . GHC.IO.Handle.HandlePosn_closure" {
     GHC.IO.Handle.HandlePosn_closure:
         const GHC.IO.Handle.HandlePosn_info;
 },
 GHC.IO.Handle.HandlePosn_entry() //  [R2, R3]
         { []
         }
     {offset
       cbtVD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbtVH; else goto cbtVG;
       cbtVH: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.HandlePosn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbtVG: // global
           I64[Hp - 16] = GHC.IO.Handle.HandlePosn_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.HandlePosn_info" {
     GHC.IO.Handle.HandlePosn_info:
         const GHC.IO.Handle.HandlePosn_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.992118782 UTC

[section ""cstring" . ibrxi_str" {
     ibrxi_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,72,97,110,100,108,101,80,111,115,110]
 },
 GHC.IO.Handle.HandlePosn_con_entry() //  [R1]
         { []
         }
     {offset
       cbtVN: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.HandlePosn_con_info" {
     GHC.IO.Handle.HandlePosn_con_info:
         const GHC.IO.Handle.HandlePosn_con_entry;
         const 2;
         const 4;
         const ibrxi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:18.996236591 UTC

[section ""relreadonly" . SboCL_srt" {
     SboCL_srt:
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.IO.Handle.$w$cshowsPrec_closure;
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure;
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_closure;
         const GHC.IO.Handle.$fShowHandlePosn1_closure;
         const GHC.IO.Handle.Internals.hLookAhead_1_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.hLookAhead2_closure;
         const GHC.IO.Handle.hLookAhead1_closure;
         const GHC.IO.Handle.Internals.wantWritableHandle1_closure;
         const GHC.IO.Handle.hFlush2_closure;
         const GHC.IO.Handle.hFlush1_closure;
         const GHC.IO.Handle.Internals.flushBuffer1_closure;
         const GHC.IO.Handle.hFlushAll2_closure;
         const GHC.IO.Handle.Internals.$wdo_operation_closure;
         const GHC.IO.Handle.hFlushAll3_closure;
         const GHC.IO.Handle.hFlushAll1_closure;
         const GHC.IO.Handle.Internals.ioe_closedHandle1_closure;
         const GHC.IO.Handle.hGetEcho6_closure;
         const GHC.IO.Handle.hGetEcho_fun_closure;
         const GHC.IO.Handle.hGetEcho5_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_rbnWC_closure;
         const lvl3_rbnWE_closure;
         const ioe_dupHandlesNotCompatible_rbnWF_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle5_closure;
         const dupHandle__rbnWK_closure;
         const GHC.IO.failIO1_closure;
         const lvl5_rbnWM_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const dupHandleTo_rbnWN_closure;
         const GHC.IO.Handle.Internals.withAllHandles__1_closure;
         const GHC.IO.Handle.$whSetNewlineMode_closure;
         const GHC.IO.Handle.hSetNewlineMode2_closure;
         const GHC.IO.Handle.hSetNewlineMode1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.IO.Handle.Internals.flushCharBuffer2_closure;
         const lvl11_rbnWT_closure;
         const GHC.IO.Handle.hSetBinaryMode1_closure;
         const lvl9_rbnWR_closure;
         const GHC.IO.Handle.Internals.ioe_semiclosedHandle1_closure;
         const GHC.IO.Handle.hIsSeekable2_closure;
         const GHC.IO.Handle.hIsSeekable3_closure;
         const GHC.IO.Handle.hIsSeekable1_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.IO.Handle.hGetPosn2_closure;
         const GHC.IO.Handle.Internals.wantSeekableHandle1_closure;
         const GHC.IO.Handle.hGetPosn3_closure;
         const GHC.IO.Handle.hTell1_closure;
         const lvl14_rbnWW_closure;
         const GHC.IO.Handle.Internals.flushBuffer2_closure;
         const GHC.IO.Handle.hSeek1_closure;
         const lvl13_rbnWV_closure;
         const GHC.IO.Handle.hSetPosn1_closure;
         const GHC.IO.Handle.hGetEncoding3_closure;
         const GHC.IO.Handle.Internals.$wdo_operation_closure;
         const GHC.IO.Handle.hGetEncoding1_closure;
         const lvl18_rbnX0_closure;
         const GHC.IO.Handle.hSetEncoding1_closure;
         const lvl16_rbnWY_closure;
         const GHC.IO.Handle.Internals.$wioe_bufsiz_closure;
         const GHC.IO.Handle.Internals.ioe_closedHandle1_closure;
         const GHC.IO.Handle.hSetBuffering1_closure;
         const GHC.IO.Handle.hSetBuffering2_closure;
         const GHC.IO.Handle.hIsEOF3_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.hIsEOF1_closure;
         const GHC.IO.Handle.FD.stdin_closure;
         const GHC.IO.Handle.isEOF1_closure;
         const lvl20_rbnX2_closure;
         const GHC.IO.Handle.hSetFileSize1_closure;
         const GHC.IO.Handle.hFileSize5_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const sat_sbojQ_closure;
         const GHC.IO.Handle.hFileSize3_closure;
         const GHC.IO.Handle.hFileSize4_closure;
         const GHC.IO.Handle.hFileSize10_closure;
         const GHC.IO.Handle.hFileSize2_closure;
         const GHC.IO.Handle.hFileSize8_closure;
         const GHC.IO.Handle.hFileSize1_closure;
         const lvl21_rbnX3_closure;
         const dupHandleTo_rbnWN_closure;
         const GHC.IO.Handle.Internals.hClose_help1_closure;
         const GHC.IO.Handle.Internals.$wwithHandle'_closure;
         const GHC.IO.Handle.Internals.$wwithHandle__'_closure;
         const GHC.IO.Handle.hDuplicateTo1_closure;
         const lvl25_rbnX7_closure;
         const GHC.IO.failIO1_closure;
         const lvl27_rbnX9_closure;
         const dupHandle__rbnWK_closure;
         const lvl7_rbnWP_closure;
         const GHC.IO.Handle.hDuplicate1_closure;
         const lvl23_rbnX5_closure;
         const GHC.IO.Handle.hGetEcho2_closure;
         const GHC.IO.Handle.Internals.ioe_closedHandle1_closure;
         const GHC.IO.Handle.hGetEcho3_closure;
         const GHC.IO.Handle.hGetEcho1_closure;
         const GHC.IO.Handle.hSetEcho2_closure;
         const GHC.IO.Handle.hSetEcho1_closure;
         const GHC.IO.Handle.hGetBuffering2_closure;
         const GHC.IO.Handle.hGetBuffering_fun_closure;
         const GHC.IO.Handle.hGetBuffering1_closure;
         const GHC.IO.Handle.hIsWritable2_closure;
         const GHC.IO.Handle.hIsWritable3_closure;
         const GHC.IO.Handle.hIsWritable1_closure;
         const GHC.IO.Handle.hIsReadable2_closure;
         const GHC.IO.Handle.hIsReadable3_closure;
         const GHC.IO.Handle.hIsReadable1_closure;
         const GHC.IO.Handle.hIsClosed3_closure;
         const GHC.IO.Handle.Internals.$wdo_operation_closure;
         const GHC.IO.Handle.hIsClosed1_closure;
         const GHC.IO.Handle.hIsOpen3_closure;
         const GHC.IO.Handle.hIsOpen1_closure;
         const GHC.IO.Handle.hGetPosn1_closure;
         const GHC.IO.Handle.hGetPosn3_closure;
         const GHC.IO.Handle.Internals.wantSeekableHandle1_closure;
         const GHC.IO.Handle.hGetPosn2_closure;
         const GHC.IO.Handle.hClose2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Handle.$wlvl_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Handle.hClose1_closure;
         const lvl33_rbnXf_closure;
         const lvl42_rbnXo_closure;
         const lvl35_rbnXh_closure;
         const GHC.IO.Handle.Types.$fShowHandleType11_closure;
         const lvl46_rbnXs_closure;
         const lvl43_rbnXp_closure;
         const lvl44_rbnXq_closure;
         const GHC.IO.Handle.Types.$fShowHandleType1_closure;
         const GHC.IO.Handle.Types.$fShowHandleType3_closure;
         const GHC.IO.Handle.Types.$fShowHandleType5_closure;
         const GHC.IO.Handle.Types.$fShowHandleType7_closure;
         const GHC.IO.Handle.Types.$fShowHandleType9_closure;
         const lvl31_rbnXd_closure;
         const lvl47_rbnXt_closure;
         const lvl37_rbnXj_closure;
         const GHC.IO.Handle.hShow2_closure;
         const GHC.IO.Handle.hShow1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.855943957 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:06:27.858155515 UTC

[section ""data" . GHC.IO.Handle.$w$c==_closure" {
     GHC.IO.Handle.$w$c==_closure:
         const GHC.IO.Handle.$w$c==_info;
 },
 GHC.IO.Handle.$w$c==_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cbux5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbux6; else goto cbux7;
       cbux6: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$w$c==_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbux7: // global
           I64[Sp - 24] = block_cbux0_info;
           _sbtVV::P64 = R3;
           R3 = R5;
           _sbtVU::P64 = R2;
           R2 = _sbtVV::P64;
           P64[Sp - 16] = _sbtVU::P64;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$w$c==_info" {
     GHC.IO.Handle.$w$c==_info:
         const GHC.IO.Handle.$w$c==_entry;
         const 0;
         const 14;
         const 17179869208;
 },
 _cbux0() //  [R1]
         { []
         }
     {offset
       cbux0: // global
           if (R1 == 1) goto cbux4; else goto cbux3;
       cbux4: // global
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.IO.Handle.Types.$fEqHandle_$c==_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
       cbux3: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbux0_info" {
     block_cbux0_info:
         const _cbux0;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.864357937 UTC

[section ""data" . GHC.IO.Handle.$fEqHandlePosn_$c==_closure" {
     GHC.IO.Handle.$fEqHandlePosn_$c==_closure:
         const GHC.IO.Handle.$fEqHandlePosn_$c==_info;
 },
 GHC.IO.Handle.$fEqHandlePosn_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cbuxw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuxA; else goto cbuxB;
       cbuxA: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fEqHandlePosn_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbuxB: // global
           I64[Sp - 16] = block_cbuxt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubuxJ; else goto cbuxu;
       ubuxJ: // global
           call _cbuxt(R1) args: 0, res: 0, upd: 0;
       cbuxu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fEqHandlePosn_$c==_info" {
     GHC.IO.Handle.$fEqHandlePosn_$c==_info:
         const GHC.IO.Handle.$fEqHandlePosn_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbuxt() //  [R1]
         { []
         }
     {offset
       cbuxt: // global
           I64[Sp - 8] = block_cbuxz_info;
           _sbtW2::P64 = P64[R1 + 7];
           _sbtW3::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbtW3::P64;
           P64[Sp + 8] = _sbtW2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubuxI; else goto cbuxD;
       ubuxI: // global
           call _cbuxz(R1) args: 0, res: 0, upd: 0;
       cbuxD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuxt_info" {
     block_cbuxt_info:
         const _cbuxt;
         const 1;
         const 30;
 },
 _cbuxz() //  [R1]
         { []
         }
     {offset
       cbuxz: // global
           R5 = P64[R1 + 15];
           R4 = P64[R1 + 7];
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           Sp = Sp + 24;
           call GHC.IO.Handle.$w$c==_entry(R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuxz_info" {
     block_cbuxz_info:
         const _cbuxz;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.875980901 UTC

[section ""data" . GHC.IO.Handle.$fEqHandlePosn_$c/=_closure" {
     GHC.IO.Handle.$fEqHandlePosn_$c/=_closure:
         const GHC.IO.Handle.$fEqHandlePosn_$c/=_info;
 },
 GHC.IO.Handle.$fEqHandlePosn_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cbuy6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuya; else goto cbuyb;
       cbuya: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fEqHandlePosn_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbuyb: // global
           I64[Sp - 16] = block_cbuy3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubuzI; else goto cbuy4;
       ubuzI: // global
           call _cbuy3(R1) args: 0, res: 0, upd: 0;
       cbuy4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fEqHandlePosn_$c/=_info" {
     GHC.IO.Handle.$fEqHandlePosn_$c/=_info:
         const GHC.IO.Handle.$fEqHandlePosn_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cbuy3() //  [R1]
         { []
         }
     {offset
       cbuy3: // global
           I64[Sp - 8] = block_cbuy9_info;
           _sbtWa::P64 = P64[R1 + 7];
           _sbtWb::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp] = _sbtWb::P64;
           P64[Sp + 8] = _sbtWa::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubuzH; else goto cbuyd;
       ubuzH: // global
           call _cbuy9(R1) args: 0, res: 0, upd: 0;
       cbuyd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuy3_info" {
     block_cbuy3_info:
         const _cbuy3;
         const 1;
         const 30;
 },
 _cbuy9() //  [R1]
         { []
         }
     {offset
       cbuy9: // global
           I64[Sp] = block_cbuyh_info;
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = P64[R1 + 7];
           call GHC.Integer.Type.eqInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuy9_info" {
     block_cbuy9_info:
         const _cbuy9;
         const 2;
         const 30;
 },
 _cbuyh() //  [R1]
         { []
         }
     {offset
       cbuyh: // global
           if (R1 == 1) goto cbuyt; else goto ubuzA;
       cbuyt: // global
           I64[Sp] = block_cbuyr_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubuzJ; else goto cbuyu;
       ubuzJ: // global
           call _cbuyr(R1) args: 0, res: 0, upd: 0;
       cbuyu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubuzA: // global
           Sp = Sp + 24;
           call _cbuzm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuyh_info" {
     block_cbuyh_info:
         const _cbuyh;
         const 2;
         const 30;
 },
 _cbuyr() //  [R1]
         { []
         }
     {offset
       cbuyr: // global
           _sbtWd::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbuyB; else goto cbuz6;
       cbuyB: // global
           I64[Sp + 8] = block_cbuyy_info;
           _sbtWi::P64 = P64[R1 + 15];
           R1 = _sbtWd::P64;
           P64[Sp + 16] = _sbtWi::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubuzL; else goto cbuyC;
       ubuzL: // global
           call _cbuyy(R1) args: 0, res: 0, upd: 0;
       cbuyC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbuz6: // global
           I64[Sp + 8] = block_cbuz4_info;
           _sbtWr::P64 = P64[R1 + 14];
           R1 = _sbtWd::P64;
           P64[Sp + 16] = _sbtWr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubuzM; else goto cbuz7;
       ubuzM: // global
           call _cbuz4(R1) args: 0, res: 0, upd: 0;
       cbuz7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuyr_info" {
     block_cbuyr_info:
         const _cbuyr;
         const 130;
         const 30;
 },
 _cbuyy() //  [R1]
         { []
         }
     {offset
       cbuyy: // global
           if (R1 & 7 == 1) goto cbuyX; else goto ubuzE;
       cbuyX: // global
           if (P64[Sp + 8] == P64[R1 + 15]) goto ubuzF; else goto ubuzG;
       ubuzF: // global
           Sp = Sp + 16;
           call _cbuzs() args: 0, res: 0, upd: 0;
       ubuzG: // global
           Sp = Sp + 16;
           goto ubuzP;
       ubuzE: // global
           Sp = Sp + 16;
           goto ubuzP;
       ubuzP: // global
           call _cbuzm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuyy_info" {
     block_cbuyy_info:
         const _cbuyy;
         const 1;
         const 30;
 },
 _cbuz4() //  [R1]
         { []
         }
     {offset
       cbuz4: // global
           if (R1 & 7 == 1) goto ubuzB; else goto cbuzw;
       ubuzB: // global
           Sp = Sp + 16;
           goto ubuzS;
       cbuzw: // global
           if (P64[Sp + 8] == P64[R1 + 14]) goto ubuzC; else goto ubuzD;
       ubuzC: // global
           Sp = Sp + 16;
           call _cbuzs() args: 0, res: 0, upd: 0;
       ubuzD: // global
           Sp = Sp + 16;
           goto ubuzS;
       ubuzS: // global
           call _cbuzm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuz4_info" {
     block_cbuz4_info:
         const _cbuz4;
         const 1;
         const 30;
 },
 _cbuzs() //  []
         { []
         }
     {offset
       cbuzs: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cbuzm() //  []
         { []
         }
     {offset
       cbuzm: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.89081672 UTC

[section ""data" . GHC.IO.Handle.$fEqHandlePosn_closure" {
     GHC.IO.Handle.$fEqHandlePosn_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.IO.Handle.$fEqHandlePosn_$c==_closure+2;
         const GHC.IO.Handle.$fEqHandlePosn_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.892486837 UTC

[section ""cstring" . GHC.IO.Handle.$fShowHandlePosn2_bytes" {
     GHC.IO.Handle.$fShowHandlePosn2_bytes:
         I8[] [32,97,116,32,112,111,115,105,116,105,111,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.900056153 UTC

[section ""data" . GHC.IO.Handle.$w$cshowsPrec_closure" {
     GHC.IO.Handle.$w$cshowsPrec_closure:
         const GHC.IO.Handle.$w$cshowsPrec_info;
         const 0;
 },
 sat_sbtWJ_entry() //  [R1]
         { []
         }
     {offset
       cbuBc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuBd; else goto cbuBe;
       cbuBd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuBe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbuB9_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbtWJ_info" {
     sat_sbtWJ_info:
         const sat_sbtWJ_entry;
         const 2;
         const 4294967314;
         const SbuCr_srt;
 },
 _cbuB9() //  [R1, R2]
         { []
         }
     {offset
       cbuB9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuBh; else goto cbuBg;
       cbuBh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbuBg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbuB9_info" {
     block_cbuB9_info:
         const _cbuB9;
         const 0;
         const 30;
 },
 sat_sbtWK_entry() //  [R1]
         { []
         }
     {offset
       cbuBi: // global
           _sbtWK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbuBj; else goto cbuBk;
       cbuBk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbuBm; else goto cbuBl;
       cbuBm: // global
           HpAlloc = 32;
           goto cbuBj;
       cbuBj: // global
           R1 = _sbtWK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuBl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbtWK::P64;
           _sbtWB::P64 = P64[_sbtWK::P64 + 16];
           _sbtWC::P64 = P64[_sbtWK::P64 + 24];
           I64[Hp - 24] = sat_sbtWJ_info;
           P64[Hp - 8] = _sbtWB::P64;
           P64[Hp] = _sbtWC::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.$fShowHandlePosn2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbtWK_info" {
     sat_sbtWK_info:
         const sat_sbtWK_entry;
         const 2;
         const 4294967314;
         const SbuCr_srt;
 },
 sat_sbtWL_entry() //  [R1]
         { []
         }
     {offset
       cbuBn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbuBr; else goto cbuBq;
       cbuBr: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuBq: // global
           _sbtWB::P64 = P64[R1 + 16];
           _sbtWC::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sbtWK_info;
           P64[Hp - 8] = _sbtWB::P64;
           P64[Hp] = _sbtWC::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbtWL_info" {
     sat_sbtWL_info:
         const sat_sbtWL_entry;
         const 2;
         const 4294967314;
         const SbuCr_srt;
 },
 sat_sbtWM_entry() //  [R1]
         { []
         }
     {offset
       cbuBs: // global
           _sbtWM::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbuBt; else goto cbuBu;
       cbuBu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbuBw; else goto cbuBv;
       cbuBw: // global
           HpAlloc = 32;
           goto cbuBt;
       cbuBt: // global
           R1 = _sbtWM::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuBv: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbtWM::P64;
           _sbtWB::P64 = P64[_sbtWM::P64 + 16];
           _sbtWC::P64 = P64[_sbtWM::P64 + 24];
           _sbtWE::P64 = P64[_sbtWM::P64 + 32];
           I64[Hp - 24] = sat_sbtWL_info;
           P64[Hp - 8] = _sbtWB::P64;
           P64[Hp] = _sbtWC::P64;
           R3 = Hp - 24;
           R2 = _sbtWE::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbtWM_info" {
     sat_sbtWM_info:
         const sat_sbtWM_entry;
         const 3;
         const 4294967311;
         const SbuCr_srt;
 },
 sat_sbtWT_entry() //  [R1]
         { []
         }
     {offset
       cbuBS: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuBT; else goto cbuBU;
       cbuBT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuBU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbuBP_info;
           R4 = P64[R1 + 24];
           R3 = P64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$w$cshowsPrec4_entry(R4,
                                              R3,
                                              R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbtWT_info" {
     sat_sbtWT_info:
         const sat_sbtWT_entry;
         const 2;
         const 4294967314;
         const SbuCr_srt;
 },
 _cbuBP() //  [R1, R2]
         { []
         }
     {offset
       cbuBP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuBX; else goto cbuBW;
       cbuBX: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbuBW: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbuBP_info" {
     block_cbuBP_info:
         const _cbuBP;
         const 0;
         const 30;
 },
 sat_sbtWU_entry() //  [R1]
         { []
         }
     {offset
       cbuBY: // global
           _sbtWU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbuBZ; else goto cbuC0;
       cbuC0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbuC2; else goto cbuC1;
       cbuC2: // global
           HpAlloc = 32;
           goto cbuBZ;
       cbuBZ: // global
           R1 = _sbtWU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuC1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbtWU::P64;
           _sbtWB::P64 = P64[_sbtWU::P64 + 16];
           _sbtWC::P64 = P64[_sbtWU::P64 + 24];
           I64[Hp - 24] = sat_sbtWT_info;
           P64[Hp - 8] = _sbtWB::P64;
           P64[Hp] = _sbtWC::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.$fShowHandlePosn2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbtWU_info" {
     sat_sbtWU_info:
         const sat_sbtWU_entry;
         const 2;
         const 4294967314;
         const SbuCr_srt;
 },
 sat_sbtWV_entry() //  [R1]
         { []
         }
     {offset
       cbuC3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbuC7; else goto cbuC6;
       cbuC7: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuC6: // global
           _sbtWB::P64 = P64[R1 + 16];
           _sbtWC::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sbtWU_info;
           P64[Hp - 8] = _sbtWB::P64;
           P64[Hp] = _sbtWC::P64;
           R3 = Hp - 24;
           R2 = GHC.IO.Handle.Types.$fReadNewlineMode5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbtWV_info" {
     sat_sbtWV_info:
         const sat_sbtWV_entry;
         const 2;
         const 4294967314;
         const SbuCr_srt;
 },
 sat_sbtWW_entry() //  [R1]
         { []
         }
     {offset
       cbuC8: // global
           _sbtWW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbuC9; else goto cbuCa;
       cbuCa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbuCc; else goto cbuCb;
       cbuCc: // global
           HpAlloc = 32;
           goto cbuC9;
       cbuC9: // global
           R1 = _sbtWW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuCb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbtWW::P64;
           _sbtWB::P64 = P64[_sbtWW::P64 + 16];
           _sbtWC::P64 = P64[_sbtWW::P64 + 24];
           _sbtWN::P64 = P64[_sbtWW::P64 + 32];
           I64[Hp - 24] = sat_sbtWV_info;
           P64[Hp - 8] = _sbtWB::P64;
           P64[Hp] = _sbtWC::P64;
           R3 = Hp - 24;
           R2 = _sbtWN::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbtWW_info" {
     sat_sbtWW_info:
         const sat_sbtWW_entry;
         const 3;
         const 4294967311;
         const SbuCr_srt;
 },
 GHC.IO.Handle.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbuCh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuCi; else goto cbuCj;
       cbuCi: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbuCj: // global
           I64[Sp - 24] = block_cbuAO_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubuCq; else goto cbuAP;
       ubuCq: // global
           call _cbuAO(R1) args: 0, res: 0, upd: 0;
       cbuAP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$w$cshowsPrec_info" {
     GHC.IO.Handle.$w$cshowsPrec_info:
         const GHC.IO.Handle.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbuCr_srt;
 },
 _cbuAO() //  [R1]
         { []
         }
     {offset
       cbuAO: // global
           _sbtWB::P64 = P64[Sp + 8];
           _sbtWC::P64 = P64[Sp + 16];
           if (R1 & 7 == 1) goto cbuCe; else goto cbuCf;
       cbuCe: // global
           Hp = Hp + 40;
           _sbtWD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbuCp; else goto cbuCl;
       cbuCl: // global
           _sbtWE::P64 = P64[_sbtWD::P64 + 7];
           I64[Hp - 32] = sat_sbtWM_info;
           P64[Hp - 16] = _sbtWB::P64;
           P64[Hp - 8] = _sbtWC::P64;
           P64[Hp] = _sbtWE::P64;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cbuCf: // global
           Hp = Hp + 40;
           _sbtWD::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbuCp; else goto cbuCo;
       cbuCp: // global
           HpAlloc = 40;
           R1 = _sbtWD::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuCo: // global
           _sbtWN::P64 = P64[_sbtWD::P64 + 6];
           I64[Hp - 32] = sat_sbtWW_info;
           P64[Hp - 16] = _sbtWB::P64;
           P64[Hp - 8] = _sbtWC::P64;
           P64[Hp] = _sbtWN::P64;
           R3 = Hp - 32;
           R2 = GHC.IO.Handle.Types.showHandle1_bytes;
           Sp = Sp + 24;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuAO_info" {
     block_cbuAO_info:
         const _cbuAO;
         const 2;
         const 4294967326;
         const SbuCr_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.924826973 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbuDF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuDG; else goto cbuDH;
       cbuDG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbuDH: // global
           I64[Sp - 16] = block_cbuDC_info;
           R1 = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubuDL; else goto cbuDD;
       ubuDL: // global
           call _cbuDC(R1) args: 0, res: 0, upd: 0;
       cbuDD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_info" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_info:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SbuCr_srt+8;
 },
 _cbuDC() //  [R1]
         { []
         }
     {offset
       cbuDC: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.$w$cshowsPrec_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuDC_info" {
     block_cbuDC_info:
         const _cbuDC;
         const 1;
         const 4294967326;
         const SbuCr_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.929983105 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn3_closure" {
     GHC.IO.Handle.$fShowHandlePosn3_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.932354551 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_$cshow_closure" {
     GHC.IO.Handle.$fShowHandlePosn_$cshow_closure:
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cbuE4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbuE5; else goto cbuE6;
       cbuE5: // global
           R2 = R2;
           R1 = GHC.IO.Handle.$fShowHandlePosn_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuE6: // global
           I64[Sp - 8] = block_cbuE1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubuEa; else goto cbuE2;
       ubuEa: // global
           call _cbuE1(R1) args: 0, res: 0, upd: 0;
       cbuE2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn_$cshow_info" {
     GHC.IO.Handle.$fShowHandlePosn_$cshow_info:
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SbuCr_srt+8;
 },
 _cbuE1() //  [R1]
         { []
         }
     {offset
       cbuE1: // global
           R4 = GHC.Types.[]_closure+1;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.$w$cshowsPrec_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuE1_info" {
     block_cbuE1_info:
         const _cbuE1;
         const 0;
         const 4294967326;
         const SbuCr_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.93817939 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn1_closure" {
     GHC.IO.Handle.$fShowHandlePosn1_closure:
         const GHC.IO.Handle.$fShowHandlePosn1_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbuEt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuEu; else goto cbuEv;
       cbuEu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$fShowHandlePosn1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbuEv: // global
           I64[Sp - 16] = block_cbuEq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubuEz; else goto cbuEr;
       ubuEz: // global
           call _cbuEq(R1) args: 0, res: 0, upd: 0;
       cbuEr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn1_info" {
     GHC.IO.Handle.$fShowHandlePosn1_info:
         const GHC.IO.Handle.$fShowHandlePosn1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SbuCr_srt+8;
 },
 _cbuEq() //  [R1]
         { []
         }
     {offset
       cbuEq: // global
           R4 = P64[Sp + 8];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp + 16;
           call GHC.IO.Handle.$w$cshowsPrec_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuEq_info" {
     block_cbuEq_info:
         const _cbuEq;
         const 1;
         const 4294967326;
         const SbuCr_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.943295944 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_$cshowList_closure" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowList_closure:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowList_info;
         const 0;
 },
 GHC.IO.Handle.$fShowHandlePosn_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cbuEO: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.IO.Handle.$fShowHandlePosn1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$fShowHandlePosn_$cshowList_info" {
     GHC.IO.Handle.$fShowHandlePosn_$cshowList_info:
         const GHC.IO.Handle.$fShowHandlePosn_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SbuCr_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.946418807 UTC

[section ""data" . GHC.IO.Handle.$fShowHandlePosn_closure" {
     GHC.IO.Handle.$fShowHandlePosn_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure+3;
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_closure+1;
         const GHC.IO.Handle.$fShowHandlePosn_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.948585951 UTC

[section ""cstring" . GHC.IO.Handle.hLookAhead3_bytes" {
     GHC.IO.Handle.hLookAhead3_bytes:
         I8[] [104,76,111,111,107,65,104,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.95077914 UTC

[section ""data" . GHC.IO.Handle.hLookAhead2_closure" {
     GHC.IO.Handle.hLookAhead2_closure:
         const GHC.IO.Handle.hLookAhead2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hLookAhead2_entry() //  [R1]
         { []
         }
     {offset
       cbuF3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuF4; else goto cbuF5;
       cbuF4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuF5: // global
           (_cbuF0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuF0::I64 == 0) goto cbuF2; else goto cbuF1;
       cbuF2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuF1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuF0::I64;
           R2 = GHC.IO.Handle.hLookAhead3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hLookAhead2_info" {
     GHC.IO.Handle.hLookAhead2_info:
         const GHC.IO.Handle.hLookAhead2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.9550642 UTC

[section ""data" . GHC.IO.Handle.hLookAhead1_closure" {
     GHC.IO.Handle.hLookAhead1_closure:
         const GHC.IO.Handle.hLookAhead1_info;
         const 0;
 },
 GHC.IO.Handle.hLookAhead1_entry() //  [R2]
         { []
         }
     {offset
       cbuFi: // global
           R4 = GHC.IO.Handle.Internals.hLookAhead_1_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hLookAhead2_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hLookAhead1_info" {
     GHC.IO.Handle.hLookAhead1_info:
         const GHC.IO.Handle.hLookAhead1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SbuCr_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.958334815 UTC

[section ""data" . GHC.IO.Handle.hLookAhead_closure" {
     GHC.IO.Handle.hLookAhead_closure:
         const GHC.IO.Handle.hLookAhead_info;
         const 0;
 },
 GHC.IO.Handle.hLookAhead_entry() //  [R2]
         { []
         }
     {offset
       cbuFu: // global
           R2 = R2;
           call GHC.IO.Handle.hLookAhead1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hLookAhead_info" {
     GHC.IO.Handle.hLookAhead_info:
         const GHC.IO.Handle.hLookAhead_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.961423938 UTC

[section ""cstring" . GHC.IO.Handle.hFlush3_bytes" {
     GHC.IO.Handle.hFlush3_bytes:
         I8[] [104,70,108,117,115,104]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.963763484 UTC

[section ""data" . GHC.IO.Handle.hFlush2_closure" {
     GHC.IO.Handle.hFlush2_closure:
         const GHC.IO.Handle.hFlush2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFlush2_entry() //  [R1]
         { []
         }
     {offset
       cbuFI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuFJ; else goto cbuFK;
       cbuFJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuFK: // global
           (_cbuFF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuFF::I64 == 0) goto cbuFH; else goto cbuFG;
       cbuFH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuFG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuFF::I64;
           R2 = GHC.IO.Handle.hFlush3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlush2_info" {
     GHC.IO.Handle.hFlush2_info:
         const GHC.IO.Handle.hFlush2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.967598961 UTC

[section ""data" . GHC.IO.Handle.hFlush1_closure" {
     GHC.IO.Handle.hFlush1_closure:
         const GHC.IO.Handle.hFlush1_info;
         const 0;
 },
 GHC.IO.Handle.hFlush1_entry() //  [R2]
         { []
         }
     {offset
       cbuFX: // global
           R4 = GHC.IO.Handle.Internals.flushWriteBuffer1_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hFlush2_closure;
           call GHC.IO.Handle.Internals.wantWritableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlush1_info" {
     GHC.IO.Handle.hFlush1_info:
         const GHC.IO.Handle.hFlush1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbuCr_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.970965401 UTC

[section ""data" . GHC.IO.Handle.hFlush_closure" {
     GHC.IO.Handle.hFlush_closure:
         const GHC.IO.Handle.hFlush_info;
         const 0;
 },
 GHC.IO.Handle.hFlush_entry() //  [R2]
         { []
         }
     {offset
       cbuG9: // global
           R2 = R2;
           call GHC.IO.Handle.hFlush1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlush_info" {
     GHC.IO.Handle.hFlush_info:
         const GHC.IO.Handle.hFlush_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.973917896 UTC

[section ""cstring" . GHC.IO.Handle.hFlushAll4_bytes" {
     GHC.IO.Handle.hFlushAll4_bytes:
         I8[] [104,70,108,117,115,104,65,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.976063059 UTC

[section ""data" . GHC.IO.Handle.hFlushAll3_closure" {
     GHC.IO.Handle.hFlushAll3_closure:
         const GHC.IO.Handle.hFlushAll3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFlushAll3_entry() //  [R1]
         { []
         }
     {offset
       cbuGn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuGo; else goto cbuGp;
       cbuGo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuGp: // global
           (_cbuGk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuGk::I64 == 0) goto cbuGm; else goto cbuGl;
       cbuGm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuGl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuGk::I64;
           R2 = GHC.IO.Handle.hFlushAll4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll3_info" {
     GHC.IO.Handle.hFlushAll3_info:
         const GHC.IO.Handle.hFlushAll3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.980962903 UTC

[section ""data" . GHC.IO.Handle.hFlushAll2_closure" {
     GHC.IO.Handle.hFlushAll2_closure:
         const GHC.IO.Handle.hFlushAll2_info;
         const 0;
 },
 GHC.IO.Handle.hFlushAll2_entry() //  [R2]
         { []
         }
     {offset
       cbuGF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuGG; else goto cbuGH;
       cbuGG: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFlushAll2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuGH: // global
           I64[Sp - 16] = block_cbuGC_info;
           _sbtXg::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbtXg::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll2_info" {
     GHC.IO.Handle.hFlushAll2_info:
         const GHC.IO.Handle.hFlushAll2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbuCr_srt+96;
 },
 _cbuGC() //  [R1]
         { []
         }
     {offset
       cbuGC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuGK; else goto cbuGJ;
       cbuGK: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuGJ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuGC_info" {
     block_cbuGC_info:
         const _cbuGC;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:27.994204445 UTC

[section ""data" . GHC.IO.Handle.hFlushAll1_closure" {
     GHC.IO.Handle.hFlushAll1_closure:
         const GHC.IO.Handle.hFlushAll1_info;
         const 0;
 },
 io_sbtXu_entry() //  [R1]
         { []
         }
     {offset
       cbuHi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuHm; else goto cbuHn;
       cbuHm: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbuHn: // global
           I64[Sp - 16] = block_cbuHd_info;
           _sbtXq::P64 = P64[R1 + 15];
           R5 = _sbtXq::P64;
           R4 = GHC.IO.Handle.hFlushAll2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFlushAll3_closure;
           P64[Sp - 8] = _sbtXq::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbtXu_info" {
     io_sbtXu_info:
         const io_sbtXu_entry;
         const 2;
         const 30064771083;
         const 4294967299;
         const SbuCr_srt+104;
 },
 _cbuHd() //  [R1]
         { []
         }
     {offset
       cbuHd: // global
           I64[Sp] = block_cbuHf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubuHs; else goto cbuHg;
       ubuHs: // global
           call _cbuHf(R1) args: 0, res: 0, upd: 0;
       cbuHg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuHd_info" {
     block_cbuHd_info:
         const _cbuHd;
         const 1;
         const 30;
 },
 _cbuHf() //  [R1]
         { []
         }
     {offset
       cbuHf: // global
           I64[Sp] = block_cbuHl_info;
           R2 = P64[R1 + 7];
           _sbtXB::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbtXB::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuHf_info" {
     block_cbuHf_info:
         const _cbuHf;
         const 1;
         const 30;
 },
 _cbuHl() //  []
         { []
         }
     {offset
       cbuHl: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuHl_info" {
     block_cbuHl_info:
         const _cbuHl;
         const 1;
         const 30;
 },
 io_sbtXK_entry() //  [R1]
         { []
         }
     {offset
       cbuHH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuHL; else goto cbuHM;
       cbuHL: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbuHM: // global
           I64[Sp - 16] = block_cbuHC_info;
           _sbtXF::P64 = P64[R1 + 15];
           R5 = _sbtXF::P64;
           R4 = GHC.IO.Handle.hFlushAll2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFlushAll3_closure;
           P64[Sp - 8] = _sbtXF::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbtXK_info" {
     io_sbtXK_info:
         const io_sbtXK_entry;
         const 2;
         const 30064771083;
         const 4294967299;
         const SbuCr_srt+104;
 },
 _cbuHC() //  [R1]
         { []
         }
     {offset
       cbuHC: // global
           I64[Sp] = block_cbuHE_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubuHR; else goto cbuHF;
       ubuHR: // global
           call _cbuHE(R1) args: 0, res: 0, upd: 0;
       cbuHF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuHC_info" {
     block_cbuHC_info:
         const _cbuHC;
         const 1;
         const 30;
 },
 _cbuHE() //  [R1]
         { []
         }
     {offset
       cbuHE: // global
           I64[Sp] = block_cbuHK_info;
           R2 = P64[R1 + 7];
           _sbtXR::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbtXR::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuHE_info" {
     block_cbuHE_info:
         const _cbuHE;
         const 1;
         const 30;
 },
 _cbuHK() //  []
         { []
         }
     {offset
       cbuHK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuHK_info" {
     block_cbuHK_info:
         const _cbuHK;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hFlushAll1_entry() //  [R2]
         { []
         }
     {offset
       cbuHW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuHX; else goto cbuHY;
       cbuHX: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFlushAll1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuHY: // global
           I64[Sp - 8] = block_cbuH1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubuIf; else goto cbuH2;
       ubuIf: // global
           call _cbuH1(R1) args: 0, res: 0, upd: 0;
       cbuH2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll1_info" {
     GHC.IO.Handle.hFlushAll1_info:
         const GHC.IO.Handle.hFlushAll1_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SbuCr_srt+104;
 },
 _cbuH1() //  [R1]
         { []
         }
     {offset
       cbuH1: // global
           if (R1 & 7 == 1) goto cbuHT; else goto cbuHU;
       cbuHT: // global
           I64[Sp - 16] = block_cbuH6_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbuHU: // global
           I64[Sp - 16] = block_cbuHv_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuH1_info" {
     block_cbuH1_info:
         const _cbuH1;
         const 0;
         const 30064771102;
         const SbuCr_srt+104;
 },
 _cbuH6() //  [R1]
         { []
         }
     {offset
       cbuH6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuI2; else goto cbuI1;
       cbuI2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbuI1: // global
           I64[Hp - 16] = io_sbtXu_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbuH8::P64 = Hp - 15;
           if (R1 == 0) goto cbuI6; else goto cbuI5;
       cbuI6: // global
           R1 = _cbuH8::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbuI5: // global
           R1 = _cbuH8::P64;
           Sp = Sp + 24;
           call io_sbtXu_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuH6_info" {
     block_cbuH6_info:
         const _cbuH6;
         const 2;
         const 30064771102;
         const SbuCr_srt+104;
 },
 _cbuHv() //  [R1]
         { []
         }
     {offset
       cbuHv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuIa; else goto cbuI9;
       cbuIa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbuI9: // global
           I64[Hp - 16] = io_sbtXK_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbuHx::P64 = Hp - 15;
           if (R1 == 0) goto cbuIe; else goto cbuId;
       cbuIe: // global
           R1 = _cbuHx::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbuId: // global
           R1 = _cbuHx::P64;
           Sp = Sp + 24;
           call io_sbtXK_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuHv_info" {
     block_cbuHv_info:
         const _cbuHv;
         const 2;
         const 30064771102;
         const SbuCr_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.018060916 UTC

[section ""data" . GHC.IO.Handle.hFlushAll_closure" {
     GHC.IO.Handle.hFlushAll_closure:
         const GHC.IO.Handle.hFlushAll_info;
         const 0;
 },
 GHC.IO.Handle.hFlushAll_entry() //  [R2]
         { []
         }
     {offset
       cbuJm: // global
           R2 = R2;
           call GHC.IO.Handle.hFlushAll1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFlushAll_info" {
     GHC.IO.Handle.hFlushAll_info:
         const GHC.IO.Handle.hFlushAll_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.022300485 UTC

[section ""cstring" . GHC.IO.Handle.hGetEcho7_bytes" {
     GHC.IO.Handle.hGetEcho7_bytes:
         I8[] [104,73,115,84,101,114,109,105,110,97,108,68,101,118,105,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.024602129 UTC

[section ""data" . GHC.IO.Handle.hGetEcho_fun_closure" {
     GHC.IO.Handle.hGetEcho_fun_closure:
         const GHC.IO.Handle.hGetEcho_fun_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetEcho_fun_entry() //  [R1]
         { []
         }
     {offset
       cbuJA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuJB; else goto cbuJC;
       cbuJB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuJC: // global
           (_cbuJx::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuJx::I64 == 0) goto cbuJz; else goto cbuJy;
       cbuJz: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuJy: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuJx::I64;
           R2 = GHC.IO.Handle.hGetEcho7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho_fun_info" {
     GHC.IO.Handle.hGetEcho_fun_info:
         const GHC.IO.Handle.hGetEcho_fun_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.030190607 UTC

[section ""data" . GHC.IO.Handle.hGetEcho6_closure" {
     GHC.IO.Handle.hGetEcho6_closure:
         const GHC.IO.Handle.hGetEcho6_info;
         const 0;
 },
 GHC.IO.Handle.hGetEcho6_entry() //  [R2]
         { []
         }
     {offset
       cbuJS: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbuJT; else goto cbuJU;
       cbuJT: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuJU: // global
           I64[Sp - 8] = block_cbuJP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubuKi; else goto cbuJQ;
       ubuKi: // global
           call _cbuJP(R1) args: 0, res: 0, upd: 0;
       cbuJQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho6_info" {
     GHC.IO.Handle.hGetEcho6_info:
         const GHC.IO.Handle.hGetEcho6_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbuCr_srt+136;
 },
 _cbuJP() //  [R1]
         { []
         }
     {offset
       cbuJP: // global
           I64[Sp - 24] = block_cbuJX_info;
           _sbtXW::P64 = R1;
           _sbtXX::P64 = P64[R1 + 7];
           _sbtY0::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbtXX::P64;
           P64[Sp - 8] = _sbtY0::P64;
           P64[Sp] = _sbtXW::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubuKh; else goto cbuJZ;
       ubuKh: // global
           call _cbuJX(R1) args: 0, res: 0, upd: 0;
       cbuJZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuJP_info" {
     block_cbuJP_info:
         const _cbuJP;
         const 0;
         const 4294967326;
         const SbuCr_srt+136;
 },
 _cbuJX() //  [R1]
         { []
         }
     {offset
       cbuJX: // global
           if (R1 & 7 == 1) goto cbuKf; else goto cbuK8;
       cbuKf: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbuK8: // global
           _sbtY0::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbuK3_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbtY0::P64;
           call GHC.IO.Device.isTerminal_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuJX_info" {
     block_cbuJX_info:
         const _cbuJX;
         const 3;
         const 4294967326;
         const SbuCr_srt+136;
 },
 _cbuK3() //  [R1]
         { []
         }
     {offset
       cbuK3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuKb; else goto cbuKa;
       cbuKb: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuKa: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuK3_info" {
     block_cbuK3_info:
         const _cbuK3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.041973141 UTC

[section ""data" . GHC.IO.Handle.hGetEcho5_closure" {
     GHC.IO.Handle.hGetEcho5_closure:
         const GHC.IO.Handle.hGetEcho5_info;
         const 0;
 },
 io_sbtYr_entry() //  [R1]
         { []
         }
     {offset
       cbuL3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuL7; else goto cbuL8;
       cbuL7: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbuL8: // global
           I64[Sp - 16] = block_cbuKY_info;
           _sbtYn::P64 = P64[R1 + 15];
           R5 = _sbtYn::P64;
           R4 = GHC.IO.Handle.hGetEcho6_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho_fun_closure;
           P64[Sp - 8] = _sbtYn::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbtYr_info" {
     io_sbtYr_info:
         const io_sbtYr_entry;
         const 2;
         const 210453397515;
         const 4294967299;
         const SbuCr_srt+112;
 },
 _cbuKY() //  [R1]
         { []
         }
     {offset
       cbuKY: // global
           I64[Sp] = block_cbuL0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubuLd; else goto cbuL1;
       ubuLd: // global
           call _cbuL0(R1) args: 0, res: 0, upd: 0;
       cbuL1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuKY_info" {
     block_cbuKY_info:
         const _cbuKY;
         const 1;
         const 30;
 },
 _cbuL0() //  [R1]
         { []
         }
     {offset
       cbuL0: // global
           I64[Sp] = block_cbuL6_info;
           R2 = P64[R1 + 7];
           _sbtYy::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbtYy::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuL0_info" {
     block_cbuL0_info:
         const _cbuL0;
         const 1;
         const 30;
 },
 _cbuL6() //  []
         { []
         }
     {offset
       cbuL6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuL6_info" {
     block_cbuL6_info:
         const _cbuL6;
         const 1;
         const 30;
 },
 io_sbtYH_entry() //  [R1]
         { []
         }
     {offset
       cbuLs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuLw; else goto cbuLx;
       cbuLw: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbuLx: // global
           I64[Sp - 16] = block_cbuLn_info;
           _sbtYC::P64 = P64[R1 + 15];
           R5 = _sbtYC::P64;
           R4 = GHC.IO.Handle.hGetEcho6_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho_fun_closure;
           P64[Sp - 8] = _sbtYC::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbtYH_info" {
     io_sbtYH_info:
         const io_sbtYH_entry;
         const 2;
         const 210453397515;
         const 4294967299;
         const SbuCr_srt+112;
 },
 _cbuLn() //  [R1]
         { []
         }
     {offset
       cbuLn: // global
           I64[Sp] = block_cbuLp_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubuLC; else goto cbuLq;
       ubuLC: // global
           call _cbuLp(R1) args: 0, res: 0, upd: 0;
       cbuLq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuLn_info" {
     block_cbuLn_info:
         const _cbuLn;
         const 1;
         const 30;
 },
 _cbuLp() //  [R1]
         { []
         }
     {offset
       cbuLp: // global
           I64[Sp] = block_cbuLv_info;
           R2 = P64[R1 + 7];
           _sbtYO::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbtYO::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuLp_info" {
     block_cbuLp_info:
         const _cbuLp;
         const 1;
         const 30;
 },
 _cbuLv() //  []
         { []
         }
     {offset
       cbuLv: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuLv_info" {
     block_cbuLv_info:
         const _cbuLv;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hGetEcho5_entry() //  [R2]
         { []
         }
     {offset
       cbuLH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuLI; else goto cbuLJ;
       cbuLI: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuLJ: // global
           I64[Sp - 8] = block_cbuKM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubuM0; else goto cbuKN;
       ubuM0: // global
           call _cbuKM(R1) args: 0, res: 0, upd: 0;
       cbuKN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho5_info" {
     GHC.IO.Handle.hGetEcho5_info:
         const GHC.IO.Handle.hGetEcho5_entry;
         const 0;
         const 485331304462;
         const 8589934597;
         const SbuCr_srt+112;
 },
 _cbuKM() //  [R1]
         { []
         }
     {offset
       cbuKM: // global
           if (R1 & 7 == 1) goto cbuLE; else goto cbuLF;
       cbuLE: // global
           I64[Sp - 16] = block_cbuKR_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbuLF: // global
           I64[Sp - 16] = block_cbuLg_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuKM_info" {
     block_cbuKM_info:
         const _cbuKM;
         const 0;
         const 210453397534;
         const SbuCr_srt+112;
 },
 _cbuKR() //  [R1]
         { []
         }
     {offset
       cbuKR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuLN; else goto cbuLM;
       cbuLN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbuLM: // global
           I64[Hp - 16] = io_sbtYr_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbuKT::P64 = Hp - 15;
           if (R1 == 0) goto cbuLR; else goto cbuLQ;
       cbuLR: // global
           R1 = _cbuKT::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbuLQ: // global
           R1 = _cbuKT::P64;
           Sp = Sp + 24;
           call io_sbtYr_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuKR_info" {
     block_cbuKR_info:
         const _cbuKR;
         const 2;
         const 210453397534;
         const SbuCr_srt+112;
 },
 _cbuLg() //  [R1]
         { []
         }
     {offset
       cbuLg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuLV; else goto cbuLU;
       cbuLV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbuLU: // global
           I64[Hp - 16] = io_sbtYH_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbuLi::P64 = Hp - 15;
           if (R1 == 0) goto cbuLZ; else goto cbuLY;
       cbuLZ: // global
           R1 = _cbuLi::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbuLY: // global
           R1 = _cbuLi::P64;
           Sp = Sp + 24;
           call io_sbtYH_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuLg_info" {
     block_cbuLg_info:
         const _cbuLg;
         const 2;
         const 210453397534;
         const SbuCr_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.064200705 UTC

[section ""data" . GHC.IO.Handle.hIsTerminalDevice_closure" {
     GHC.IO.Handle.hIsTerminalDevice_closure:
         const GHC.IO.Handle.hIsTerminalDevice_info;
         const 0;
 },
 GHC.IO.Handle.hIsTerminalDevice_entry() //  [R2]
         { []
         }
     {offset
       cbuN7: // global
           R2 = R2;
           call GHC.IO.Handle.hGetEcho5_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsTerminalDevice_info" {
     GHC.IO.Handle.hIsTerminalDevice_info:
         const GHC.IO.Handle.hIsTerminalDevice_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.067079556 UTC

[section ""cstring" . lvl_rbnWB_bytes" {
     lvl_rbnWB_bytes:
         I8[] [104,68,117,112,108,105,99,97,116,101,84,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.069162978 UTC

[section ""data" . lvl1_rbnWC_closure" {
     lvl1_rbnWC_closure:
         const lvl1_rbnWC_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rbnWC_entry() //  [R1]
         { []
         }
     {offset
       cbuNl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuNm; else goto cbuNn;
       cbuNm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuNn: // global
           (_cbuNi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuNi::I64 == 0) goto cbuNk; else goto cbuNj;
       cbuNk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuNj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuNi::I64;
           R2 = lvl_rbnWB_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rbnWC_info" {
     lvl1_rbnWC_info:
         const lvl1_rbnWC_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.072941443 UTC

[section ""cstring" . lvl2_rbnWD_bytes" {
     lvl2_rbnWD_bytes:
         I8[] [104,97,110,100,108,101,115,32,97,114,101,32,105,110,99,111,109,112,97,116,105,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.075109729 UTC

[section ""data" . lvl3_rbnWE_closure" {
     lvl3_rbnWE_closure:
         const lvl3_rbnWE_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rbnWE_entry() //  [R1]
         { []
         }
     {offset
       cbuND: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuNE; else goto cbuNF;
       cbuNE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuNF: // global
           (_cbuNA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuNA::I64 == 0) goto cbuNC; else goto cbuNB;
       cbuNC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuNB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuNA::I64;
           R2 = lvl2_rbnWD_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rbnWE_info" {
     lvl3_rbnWE_info:
         const lvl3_rbnWE_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.07969081 UTC

[section ""data" . ioe_dupHandlesNotCompatible_rbnWF_closure" {
     ioe_dupHandlesNotCompatible_rbnWF_closure:
         const ioe_dupHandlesNotCompatible_rbnWF_info;
         const 0;
 },
 sat_sbtYV_entry() //  [R1]
         { []
         }
     {offset
       cbuNY: // global
           _sbtYV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbuNZ; else goto cbuO0;
       cbuO0: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbuO2; else goto cbuO1;
       cbuO2: // global
           HpAlloc = 72;
           goto cbuNZ;
       cbuNZ: // global
           R1 = _sbtYV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuO1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbtYV::P64;
           _sbtYR::P64 = P64[_sbtYV::P64 + 16];
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbtYR::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = GHC.IO.Exception.IllegalOperation_closure+1;
           P64[Hp - 24] = lvl1_rbnWC_closure;
           P64[Hp - 16] = lvl3_rbnWE_closure;
           P64[Hp - 8] = GHC.Base.Nothing_closure+1;
           P64[Hp] = GHC.Base.Nothing_closure+1;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbtYV_info" {
     sat_sbtYV_info:
         const sat_sbtYV_entry;
         const 1;
         const 30064771088;
         const SbuCr_srt+168;
 },
 ioe_dupHandlesNotCompatible_rbnWF_entry() //  [R2]
         { []
         }
     {offset
       cbuO3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuO7; else goto cbuO6;
       cbuO7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = ioe_dupHandlesNotCompatible_rbnWF_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuO6: // global
           I64[Hp - 16] = sat_sbtYV_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ioe_dupHandlesNotCompatible_rbnWF_info" {
     ioe_dupHandlesNotCompatible_rbnWF_info:
         const ioe_dupHandlesNotCompatible_rbnWF_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SbuCr_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.085395286 UTC

[section ""cstring" . GHC.IO.Handle.$trModule4_bytes" {
     GHC.IO.Handle.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.087046354 UTC

[section ""data" . GHC.IO.Handle.$trModule3_closure" {
     GHC.IO.Handle.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.088692192 UTC

[section ""cstring" . GHC.IO.Handle.$trModule2_bytes" {
     GHC.IO.Handle.$trModule2_bytes:
         I8[] [71,72,67,46,73,79,46,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.090419776 UTC

[section ""data" . GHC.IO.Handle.$trModule1_closure" {
     GHC.IO.Handle.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.092538159 UTC

[section ""data" . GHC.IO.Handle.$trModule_closure" {
     GHC.IO.Handle.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.IO.Handle.$trModule3_closure+1;
         const GHC.IO.Handle.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.094712048 UTC

[section ""data" . $krep_rbnWG_closure" {
     $krep_rbnWG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Integer.Type.$tcInteger_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.096380525 UTC

[section ""data" . $krep1_rbnWH_closure" {
     $krep1_rbnWH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.Types.$tcHandle_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.09815948 UTC

[section ""cstring" . GHC.IO.Handle.$tcHandlePosn2_bytes" {
     GHC.IO.Handle.$tcHandlePosn2_bytes:
         I8[] [72,97,110,100,108,101,80,111,115,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.0997271 UTC

[section ""data" . GHC.IO.Handle.$tcHandlePosn1_closure" {
     GHC.IO.Handle.$tcHandlePosn1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$tcHandlePosn2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.101394489 UTC

[section ""data" . GHC.IO.Handle.$tcHandlePosn_closure" {
     GHC.IO.Handle.$tcHandlePosn_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.$trModule_closure+1;
         const GHC.IO.Handle.$tcHandlePosn1_closure+1;
         const GHC.Types.krep$*_closure;
         const 14603627022044816180;
         const 6047646306417636971;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.103242496 UTC

[section ""data" . $krep2_rbnWI_closure" {
     $krep2_rbnWI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IO.Handle.$tcHandlePosn_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.104932706 UTC

[section ""data" . $krep3_rbnWJ_closure" {
     $krep3_rbnWJ_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rbnWG_closure+1;
         const $krep2_rbnWI_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.10717446 UTC

[section ""data" . GHC.IO.Handle.$tc'HandlePosn1_closure" {
     GHC.IO.Handle.$tc'HandlePosn1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rbnWH_closure+1;
         const $krep3_rbnWJ_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.108801194 UTC

[section ""cstring" . GHC.IO.Handle.$tc'HandlePosn3_bytes" {
     GHC.IO.Handle.$tc'HandlePosn3_bytes:
         I8[] [39,72,97,110,100,108,101,80,111,115,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.110475409 UTC

[section ""data" . GHC.IO.Handle.$tc'HandlePosn2_closure" {
     GHC.IO.Handle.$tc'HandlePosn2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.IO.Handle.$tc'HandlePosn3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.112223399 UTC

[section ""data" . GHC.IO.Handle.$tc'HandlePosn_closure" {
     GHC.IO.Handle.$tc'HandlePosn_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.IO.Handle.$trModule_closure+1;
         const GHC.IO.Handle.$tc'HandlePosn2_closure+1;
         const GHC.IO.Handle.$tc'HandlePosn1_closure+4;
         const 2346493220596692855;
         const 1604707260447826943;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.117388972 UTC

[section ""data" . dupHandle__rbnWK_closure" {
     dupHandle__rbnWK_closure:
         const dupHandle__rbnWK_info;
         const 0;
 },
 dupHandle__rbnWK_slow() //  [R1]
         { []
         }
     {offset
       cbuOK: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2,
                                       R1) args: 32, res: 0, upd: 8;
     }
 },
 dupHandle__rbnWK_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbuOR: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbuOS; else goto cbuOT;
       cbuOS: // global
           R1 = dupHandle__rbnWK_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 72, res: 0, upd: 8;
       cbuOT: // global
           I64[Sp - 40] = block_cbuOO_info;
           R1 = P64[Sp + 8];
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           P64[Sp + 8] = R2;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubuPz; else goto cbuOP;
       ubuPz: // global
           call _cbuOO(R1) args: 0, res: 0, upd: 0;
       cbuOP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dupHandle__rbnWK_info" {
     dupHandle__rbnWK_info:
         const dupHandle__rbnWK_entry;
         const 0;
         const 30064771086;
         const 38654705664;
         const SbuCr_srt+200;
         const 8;
         const dupHandle__rbnWK_slow;
 },
 _cbuOO() //  [R1]
         { []
         }
     {offset
       cbuOO: // global
           I64[Sp - 24] = block_cbuOY_info;
           _sbtZa::P64 = P64[R1 + 39];
           _sbtZj::P64 = P64[R1 + 111];
           _sbtZk::P64 = P64[R1 + 119];
           R1 = P64[R1 + 87];
           P64[Sp - 16] = _sbtZj::P64;
           P64[Sp - 8] = _sbtZk::P64;
           P64[Sp] = _sbtZa::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubuPy; else goto cbuP6;
       ubuPy: // global
           call _cbuOY(R1) args: 0, res: 0, upd: 0;
       cbuP6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuOO_info" {
     block_cbuOO_info:
         const _cbuOO;
         const 7;
         const 12884901918;
         const SbuCr_srt+200;
 },
 _cbuOY() //  [R1]
         { []
         }
     {offset
       cbuOY: // global
           if (R1 & 7 == 1) goto cbuPc; else goto cbuPh;
       cbuPc: // global
           P64[Sp] = GHC.Base.Nothing_closure+1;
           call _cbuP1() args: 0, res: 0, upd: 0;
       cbuPh: // global
           I64[Sp] = block_cbuPf_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubuPA; else goto cbuPi;
       ubuPA: // global
           call _cbuPf(R1) args: 0, res: 0, upd: 0;
       cbuPi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuOY_info" {
     block_cbuOY_info:
         const _cbuOY;
         const 10;
         const 12884901918;
         const SbuCr_srt+200;
 },
 _cbuPf() //  [R1]
         { []
         }
     {offset
       cbuPf: // global
           I64[Sp] = block_cbuPm_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuPf_info" {
     block_cbuPf_info:
         const _cbuPf;
         const 10;
         const 4294967326;
         const SbuCr_srt+208;
 },
 _cbuPm() //  [R1]
         { []
         }
     {offset
       cbuPm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbuPr; else goto cbuPq;
       cbuPr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuPq: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp] = Hp - 6;
           call _cbuP1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuPm_info" {
     block_cbuPm_info:
         const _cbuPm;
         const 10;
         const 4294967326;
         const SbuCr_srt+208;
 },
 _cbuP1() //  []
         { []
         }
     {offset
       cbuP1: // global
           Hp = Hp + 24;
           _sbtZo::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cbuP5; else goto cbuP4;
       cbuP5: // global
           HpAlloc = 24;
           I64[Sp] = block_cbuP0_info;
           R1 = _sbtZo::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuP4: // global
           I64[Hp - 16] = GHC.IO.Handle.Types.NewlineMode_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 40];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 72];
           P64[Sp + 40] = P64[Sp + 24];
           P64[Sp + 48] = GHC.Types.True_closure+2;
           P64[Sp + 56] = _sbtZo::P64;
           _sbtZ1::P64 = P64[Sp + 64];
           P64[Sp + 64] = Hp - 15;
           P64[Sp + 72] = P64[Sp + 80];
           P64[Sp + 80] = _sbtZ1::P64;
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.mkDuplexHandle5_entry(R6,
                                                              R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 56, res: 0, upd: 8;
     }
 },
 _cbuP0() //  [R1]
         { []
         }
     {offset
       cbuP0: // global
           P64[Sp] = R1;
           call _cbuP1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuP0_info" {
     block_cbuP0_info:
         const _cbuP0;
         const 10;
         const 4294967326;
         const SbuCr_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.131522961 UTC

[section ""cstring" . lvl4_rbnWL_bytes" {
     lvl4_rbnWL_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,73,79,47,72,97,110,100,108,101,46,104,115,58,55,49,51,58,55,45,50,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.134366198 UTC

[section ""data" . lvl5_rbnWM_closure" {
     lvl5_rbnWM_closure:
         const lvl5_rbnWM_info;
         const 0;
 },
 lvl5_rbnWM_entry() //  []
         { []
         }
     {offset
       cbuQv: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbuQw; else goto cbuQx;
       cbuQw: // global
           R1 = lvl5_rbnWM_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbuQx: // global
           I64[Sp - 8] = block_cbuQt_info;
           R2 = lvl4_rbnWL_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_rbnWM_info" {
     lvl5_rbnWM_info:
         const lvl5_rbnWM_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SbuCr_srt+224;
 },
 _cbuQt() //  [R1]
         { []
         }
     {offset
       cbuQt: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuQt_info" {
     block_cbuQt_info:
         const _cbuQt;
         const 0;
         const 4294967326;
         const SbuCr_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.141707658 UTC

[section ""data" . dupHandleTo_rbnWN_closure" {
     dupHandleTo_rbnWN_closure:
         const dupHandleTo_rbnWN_info;
         const 0;
 },
 dupHandleTo_rbnWN_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbuQR: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cbuQV; else goto cbuQW;
       cbuQV: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = dupHandleTo_rbnWN_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       cbuQW: // global
           I64[Sp - 40] = block_cbuQO_info;
           R1 = R5;
           P64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubuRC; else goto cbuQP;
       ubuRC: // global
           call _cbuQO(R1) args: 0, res: 0, upd: 0;
       cbuQP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . dupHandleTo_rbnWN_info" {
     dupHandleTo_rbnWN_info:
         const dupHandleTo_rbnWN_entry;
         const 0;
         const 4098983643316238;
         const 30064771098;
         const SbuCr_srt+96;
 },
 _cbuQO() //  [R1]
         { []
         }
     {offset
       cbuQO: // global
           I64[Sp - 8] = block_cbuQU_info;
           _sbtZL::P64 = P64[R1 + 23];
           _sbtZM::P64 = P64[R1 + 31];
           R1 = P64[Sp + 32];
           P64[Sp] = _sbtZM::P64;
           P64[Sp + 32] = _sbtZL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubuRB; else goto cbuQY;
       ubuRB: // global
           call _cbuQU(R1) args: 0, res: 0, upd: 0;
       cbuQY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuQO_info" {
     block_cbuQO_info:
         const _cbuQO;
         const 5;
         const 1847183829631006;
         const SbuCr_srt+96;
 },
 _cbuQU() //  [R1]
         { []
         }
     {offset
       cbuQU: // global
           I64[Sp - 40] = block_cbuR2_info;
           R2 = R1;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 31];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuQU_info" {
     block_cbuQU_info:
         const _cbuQU;
         const 6;
         const 1847183829631006;
         const SbuCr_srt+96;
 },
 _cbuR2() //  []
         { []
         }
     {offset
       cbuR2: // global
           I64[Sp] = block_cbuR4_info;
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 80];
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuR2_info" {
     block_cbuR2_info:
         const _cbuR2;
         const 11;
         const 450971566110;
         const SbuCr_srt+192;
 },
 _cbuR4() //  [R1]
         { []
         }
     {offset
       cbuR4: // global
           if (R1 & 7 == 1) goto cbuRc; else goto cbuRl;
       cbuRc: // global
           R2 = P64[Sp + 64];
           Sp = Sp + 96;
           call ioe_dupHandlesNotCompatible_rbnWF_entry(R2) args: 8, res: 0, upd: 8;
       cbuRl: // global
           I64[Sp] = block_cbuRf_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 32];
           P64[Sp - 8] = P64[Sp + 48];
           Sp = Sp - 24;
           call GHC.IO.Device.dup2_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuR4_info" {
     block_cbuR4_info:
         const _cbuR4;
         const 32779;
         const 176093659166;
         const SbuCr_srt+192;
 },
 _cbuRf() //  []
         { []
         }
     {offset
       cbuRf: // global
           _sbtZG::P64 = P64[Sp + 88];
           I64[Sp + 88] = block_cbuRh_info;
           R6 = P64[Sp + 56];
           R5 = P64[Sp + 48];
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 64] = P64[Sp + 72];
           P64[Sp + 72] = P64[Sp + 40];
           P64[Sp + 80] = _sbtZG::P64;
           Sp = Sp + 64;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuRf_info" {
     block_cbuRf_info:
         const _cbuRf;
         const 41483;
         const 21474836510;
         const SbuCr_srt+216;
 },
 _cbuRh() //  [R1]
         { []
         }
     {offset
       cbuRh: // global
           I64[Sp] = block_cbuRj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubuRD; else goto cbuRo;
       ubuRD: // global
           call _cbuRj(R1) args: 0, res: 0, upd: 0;
       cbuRo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuRh_info" {
     block_cbuRh_info:
         const _cbuRh;
         const 0;
         const 4294967326;
         const SbuCr_srt+232;
 },
 _cbuRj() //  [R1]
         { []
         }
     {offset
       cbuRj: // global
           if (R1 & 7 == 1) goto cbuRu; else goto cbuRy;
       cbuRu: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
       cbuRy: // global
           Sp = Sp + 8;
           call lvl5_rbnWM_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuRj_info" {
     block_cbuRj_info:
         const _cbuRj;
         const 0;
         const 4294967326;
         const SbuCr_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.15634202 UTC

[section ""cstring" . lvl6_rbnWO_bytes" {
     lvl6_rbnWO_bytes:
         I8[] [100,117,112,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.1591616 UTC

[section ""data" . lvl7_rbnWP_closure" {
     lvl7_rbnWP_closure:
         const lvl7_rbnWP_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_rbnWP_entry() //  [R1]
         { []
         }
     {offset
       cbuSy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuSz; else goto cbuSA;
       cbuSz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuSA: // global
           (_cbuSv::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuSv::I64 == 0) goto cbuSx; else goto cbuSw;
       cbuSx: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuSw: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuSv::I64;
           R2 = lvl6_rbnWO_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_rbnWP_info" {
     lvl7_rbnWP_info:
         const lvl7_rbnWP_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.162808516 UTC

[section ""cstring" . GHC.IO.Handle.hSetNewlineMode3_bytes" {
     GHC.IO.Handle.hSetNewlineMode3_bytes:
         I8[] [104,83,101,116,78,101,119,108,105,110,101,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.164925638 UTC

[section ""data" . GHC.IO.Handle.hSetNewlineMode2_closure" {
     GHC.IO.Handle.hSetNewlineMode2_closure:
         const GHC.IO.Handle.hSetNewlineMode2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hSetNewlineMode2_entry() //  [R1]
         { []
         }
     {offset
       cbuSQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuSR; else goto cbuSS;
       cbuSR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuSS: // global
           (_cbuSN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuSN::I64 == 0) goto cbuSP; else goto cbuSO;
       cbuSP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuSO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuSN::I64;
           R2 = GHC.IO.Handle.hSetNewlineMode3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetNewlineMode2_info" {
     GHC.IO.Handle.hSetNewlineMode2_info:
         const GHC.IO.Handle.hSetNewlineMode2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.170793977 UTC

[section ""data" . GHC.IO.Handle.$whSetNewlineMode_closure" {
     GHC.IO.Handle.$whSetNewlineMode_closure:
         const GHC.IO.Handle.$whSetNewlineMode_info;
         const 0;
 },
 sat_sbu0X_entry() //  [R1, R2]
         { []
         }
     {offset
       cbuTd: // global
           if ((Sp + -136) < SpLim) (likely: False) goto cbuTj; else goto cbuTk;
       cbuTj: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuTk: // global
           I64[Sp - 24] = block_cbuTa_info;
           _sbu0x::P64 = P64[R1 + 6];
           _sbu0y::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbu0x::P64;
           P64[Sp - 8] = _sbu0y::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubuTp; else goto cbuTb;
       ubuTp: // global
           call _cbuTa(R1) args: 0, res: 0, upd: 0;
       cbuTb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbu0X_info" {
     sat_sbu0X_info:
         const sat_sbu0X_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const SbuCr_srt+96;
 },
 _cbuTa() //  [R1]
         { []
         }
     {offset
       cbuTa: // global
           I64[Sp - 112] = block_cbuTg_info;
           R2 = R1;
           P64[Sp - 104] = P64[R1 + 15];
           P64[Sp - 96] = P64[R1 + 23];
           P64[Sp - 88] = P64[R1 + 31];
           P64[Sp - 80] = P64[R1 + 39];
           P64[Sp - 72] = P64[R1 + 47];
           P64[Sp - 64] = P64[R1 + 55];
           P64[Sp - 56] = P64[R1 + 63];
           P64[Sp - 48] = P64[R1 + 71];
           P64[Sp - 40] = P64[R1 + 79];
           P64[Sp - 32] = P64[R1 + 87];
           P64[Sp - 24] = P64[R1 + 95];
           P64[Sp - 16] = P64[R1 + 103];
           P64[Sp - 8] = P64[R1 + 127];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 112;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuTa_info" {
     block_cbuTa_info:
         const _cbuTa;
         const 2;
         const 4294967326;
         const SbuCr_srt+96;
 },
 _cbuTg() //  [R1]
         { []
         }
     {offset
       cbuTg: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbuTo; else goto cbuTn;
       cbuTo: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuTn: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 112];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 56];
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = P64[Sp + 80];
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = P64[Sp + 120];
           P64[Hp - 8] = P64[Sp + 128];
           P64[Hp] = P64[Sp + 104];
           R1 = Hp - 127;
           Sp = Sp + 136;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuTg_info" {
     block_cbuTg_info:
         const _cbuTg;
         const 16;
         const 30;
 },
 GHC.IO.Handle.$whSetNewlineMode_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbuTq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuTu; else goto cbuTt;
       cbuTu: // global
           HpAlloc = 24;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$whSetNewlineMode_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbuTt: // global
           I64[Hp - 16] = sat_sbu0X_info;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R4 = Hp - 14;
           R3 = R2;
           R2 = GHC.IO.Handle.hSetNewlineMode2_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$whSetNewlineMode_info" {
     GHC.IO.Handle.$whSetNewlineMode_info:
         const GHC.IO.Handle.$whSetNewlineMode_entry;
         const 0;
         const 31525201686560782;
         const 17179869207;
         const SbuCr_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.181216307 UTC

[section ""data" . GHC.IO.Handle.hSetNewlineMode1_closure" {
     GHC.IO.Handle.hSetNewlineMode1_closure:
         const GHC.IO.Handle.hSetNewlineMode1_info;
         const 0;
 },
 GHC.IO.Handle.hSetNewlineMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbuUq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuUr; else goto cbuUs;
       cbuUr: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetNewlineMode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbuUs: // global
           I64[Sp - 16] = block_cbuUn_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubuUw; else goto cbuUo;
       ubuUw: // global
           call _cbuUn(R1) args: 0, res: 0, upd: 0;
       cbuUo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetNewlineMode1_info" {
     GHC.IO.Handle.hSetNewlineMode1_info:
         const GHC.IO.Handle.hSetNewlineMode1_entry;
         const 0;
         const 21474836494;
         const 12884901903;
         const SbuCr_srt+264;
 },
 _cbuUn() //  [R1]
         { []
         }
     {offset
       cbuUn: // global
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.$whSetNewlineMode_entry(R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuUn_info" {
     block_cbuUn_info:
         const _cbuUn;
         const 1;
         const 4294967326;
         const SbuCr_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.186669937 UTC

[section ""data" . GHC.IO.Handle.hSetNewlineMode_closure" {
     GHC.IO.Handle.hSetNewlineMode_closure:
         const GHC.IO.Handle.hSetNewlineMode_info;
         const 0;
 },
 GHC.IO.Handle.hSetNewlineMode_entry() //  [R2, R3]
         { []
         }
     {offset
       cbuUL: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetNewlineMode1_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetNewlineMode_info" {
     GHC.IO.Handle.hSetNewlineMode_info:
         const GHC.IO.Handle.hSetNewlineMode_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbuCr_srt+280;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.189670708 UTC

[section ""cstring" . lvl8_rbnWQ_bytes" {
     lvl8_rbnWQ_bytes:
         I8[] [104,83,101,116,66,105,110,97,114,121,77,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.191860974 UTC

[section ""data" . lvl9_rbnWR_closure" {
     lvl9_rbnWR_closure:
         const lvl9_rbnWR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl9_rbnWR_entry() //  [R1]
         { []
         }
     {offset
       cbuUZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbuV0; else goto cbuV1;
       cbuV0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuV1: // global
           (_cbuUW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuUW::I64 == 0) goto cbuUY; else goto cbuUX;
       cbuUY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuUX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuUW::I64;
           R2 = lvl8_rbnWQ_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl9_rbnWR_info" {
     lvl9_rbnWR_info:
         const lvl9_rbnWR_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.195856162 UTC

[section ""cstring" . lvl10_rbnWS_bytes" {
     lvl10_rbnWS_bytes:
         I8[] [99,111,100,101,99,95,115,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.19856448 UTC

[section ""data" . lvl11_rbnWT_closure" {
     lvl11_rbnWT_closure:
         const lvl11_rbnWT_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rbnWT_entry() //  [R1]
         { []
         }
     {offset
       cbuVj: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuVk; else goto cbuVl;
       cbuVk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuVl: // global
           (_cbuVe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbuVe::I64 == 0) goto cbuVg; else goto cbuVf;
       cbuVg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbuVf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbuVe::I64;
           I64[Sp - 24] = block_cbuVh_info;
           R2 = lvl10_rbnWS_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rbnWT_info" {
     lvl11_rbnWT_info:
         const lvl11_rbnWT_entry;
         const 0;
         const 4294967317;
         const SbuCr_srt+288;
 },
 _cbuVh() //  [R1]
         { []
         }
     {offset
       cbuVh: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbuVh_info" {
     block_cbuVh_info:
         const _cbuVh;
         const 0;
         const 4294967326;
         const SbuCr_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.226174038 UTC

[section ""data" . GHC.IO.Handle.hSetBinaryMode1_closure" {
     GHC.IO.Handle.hSetBinaryMode1_closure:
         const GHC.IO.Handle.hSetBinaryMode1_info;
         const 0;
 },
 lvl48_sbu18_entry() //  [R1]
         { []
         }
     {offset
       cbuVM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuVN; else goto cbuVO;
       cbuVN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuVO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbuVJ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubuVS; else goto cbuVK;
       ubuVS: // global
           call _cbuVJ() args: 0, res: 0, upd: 0;
       cbuVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_sbu18_info" {
     lvl48_sbu18_info:
         const lvl48_sbu18_entry;
         const 1;
         const 16;
 },
 _cbuVJ() //  []
         { []
         }
     {offset
       cbuVJ: // global
           R1 = GHC.IO.Handle.Types.LF_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbuVJ_info" {
     block_cbuVJ_info:
         const _cbuVJ;
         const 0;
         const 30;
 },
 sat_sbu41_entry() //  [R1]
         { []
         }
     {offset
       cbuWE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbuWI; else goto cbuWJ;
       cbuWI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuWJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbuWB_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubuWN; else goto cbuWC;
       ubuWN: // global
           call _cbuWB(R1) args: 0, res: 0, upd: 0;
       cbuWC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu41_info" {
     sat_sbu41_info:
         const sat_sbu41_entry;
         const 1;
         const 16;
 },
 _cbuWB() //  [R1]
         { []
         }
     {offset
       cbuWB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbuWM; else goto cbuWL;
       cbuWM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbuWL: // global
           _sbu3W::P64 = P64[R1 + 7];
           _sbu3X::P64 = P64[R1 + 15];
           _sbu3V::I64 = I64[R1 + 23];
           _sbu3Y::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbu3W::P64;
           P64[Hp - 32] = _sbu3X::P64;
           I64[Hp - 24] = _sbu3V::I64;
           I64[Hp - 16] = _sbu3Y::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbuWB_info" {
     block_cbuWB_info:
         const _cbuWB;
         const 0;
         const 30;
 },
 sat_sbu4k_entry() //  [R1]
         { []
         }
     {offset
       cbuXa: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbuXh; else goto cbuXi;
       cbuXh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbuXi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbuX7_info;
           _sbu4a::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbu4a::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubuXm; else goto cbuX8;
       ubuXm: // global
           call _cbuX7(R1) args: 0, res: 0, upd: 0;
       cbuX8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu4k_info" {
     sat_sbu4k_info:
         const sat_sbu4k_entry;
         const 4294967297;
         const 19;
 },
 _cbuX7() //  [R1]
         { []
         }
     {offset
       cbuX7: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbuXl; else goto cbuXk;
       cbuXl: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbuXk: // global
           _sbu4e::P64 = P64[R1 + 7];
           _sbu4f::P64 = P64[R1 + 15];
           _sbu4d::I64 = I64[R1 + 23];
           _sbu4g::I64 = I64[R1 + 31];
           _sbu4i::I64 = I64[R1 + 47];
           _sbu4j::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbu4e::P64;
           P64[Hp - 32] = _sbu4f::P64;
           I64[Hp - 24] = _sbu4d::I64;
           I64[Hp - 16] = _sbu4g::I64;
           I64[Hp - 8] = _sbu4j::I64;
           I64[Hp] = _sbu4i::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbuX7_info" {
     block_cbuX7_info:
         const _cbuX7;
         const 65;
         const 30;
 },
 sat_sbu4H_entry() //  [R1, R2]
         { []
         }
     {offset
       cbuXn: // global
           if ((Sp + -176) < SpLim) (likely: False) goto cbuXo; else goto cbuXp;
       cbuXo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbuXp: // global
           I64[Sp - 24] = block_cbuVY_info;
           _sbu16::P64 = P64[R1 + 6];
           _sbu18::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbu16::P64;
           P64[Sp - 8] = _sbu18::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubv2Z; else goto cbuVZ;
       ubv2Z: // global
           call _cbuVY(R1) args: 0, res: 0, upd: 0;
       cbuVZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbu4H_info" {
     sat_sbu4H_info:
         const sat_sbu4H_entry;
         const 2;
         const 52780853100555;
         const 8589934597;
         const SbuCr_srt+200;
 },
 _cbuVY() //  [R1]
         { []
         }
     {offset
       cbuVY: // global
           I64[Sp - 104] = block_cbuW3_info;
           _sbu1d::P64 = P64[R1 + 7];
           _sbu1e::P64 = P64[R1 + 15];
           _sbu1f::P64 = P64[R1 + 23];
           _sbu1g::P64 = P64[R1 + 31];
           _sbu1h::P64 = P64[R1 + 39];
           _sbu1i::P64 = P64[R1 + 47];
           _sbu1j::P64 = P64[R1 + 55];
           _sbu1k::P64 = P64[R1 + 63];
           _sbu1l::P64 = P64[R1 + 71];
           _sbu1m::P64 = P64[R1 + 79];
           _sbu1n::P64 = P64[R1 + 87];
           _sbu1o::P64 = P64[R1 + 95];
           _sbu1s::P64 = P64[R1 + 127];
           R1 = P64[_sbu1l::P64 + 8];
           P64[Sp - 96] = _sbu1e::P64;
           P64[Sp - 88] = _sbu1f::P64;
           P64[Sp - 80] = _sbu1g::P64;
           P64[Sp - 72] = _sbu1h::P64;
           P64[Sp - 64] = _sbu1i::P64;
           P64[Sp - 56] = _sbu1j::P64;
           P64[Sp - 48] = _sbu1k::P64;
           P64[Sp - 40] = _sbu1l::P64;
           P64[Sp - 32] = _sbu1m::P64;
           P64[Sp - 24] = _sbu1n::P64;
           P64[Sp - 16] = _sbu1o::P64;
           P64[Sp - 8] = _sbu1s::P64;
           P64[Sp] = _sbu1d::P64;
           Sp = Sp - 104;
           if (R1 & 7 != 0) goto ubv2M; else goto cbuW4;
       ubv2M: // global
           call _cbuW3(R1) args: 0, res: 0, upd: 0;
       cbuW4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuVY_info" {
     block_cbuVY_info:
         const _cbuVY;
         const 2;
         const 52780853100574;
         const SbuCr_srt+200;
 },
 _cbuW3() //  [R1]
         { []
         }
     {offset
       cbuW3: // global
           I64[Sp - 16] = block_cbuWa_info;
           _sbu1B::I64 = I64[R1 + 39];
           _sbu1C::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbu1C::I64;
           I64[Sp] = _sbu1B::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubv2N; else goto cbuWb;
       ubv2N: // global
           call _cbuWa(R1) args: 0, res: 0, upd: 0;
       cbuWb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuW3_info" {
     block_cbuW3_info:
         const _cbuW3;
         const 15;
         const 52780853100574;
         const SbuCr_srt+200;
 },
 _cbuWa() //  [R1]
         { []
         }
     {offset
       cbuWa: // global
           if (R1 & 7 == 1) goto cbv1b; else goto cbv26;
       cbv1b: // global
           _sbu3B::P64 = P64[P64[Sp + 80] + 8];
           I64[Sp + 16] = block_cbuWf_info;
           R1 = _sbu3B::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubv2O; else goto cbuWg;
       ubv2O: // global
           call _cbuWf(R1) args: 0, res: 0, upd: 0;
       cbuWg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbv26: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubv2x; else goto cbv24;
       ubv2x: // global
           Sp = Sp + 24;
           call _sbu1D() args: 0, res: 0, upd: 0;
       cbv24: // global
           R1 = GHC.IO.Handle.Internals.flushCharBuffer2_closure;
           Sp = Sp + 144;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuWa_info" {
     block_cbuWa_info:
         const _cbuWa;
         const 209;
         const 52780853100574;
         const SbuCr_srt+200;
 },
 _cbuWf() //  [R1]
         { []
         }
     {offset
       cbuWf: // global
           I64[Sp - 16] = block_cbuWk_info;
           _sbu3H::I64 = I64[R1 + 39];
           _sbu3I::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbu3I::I64;
           I64[Sp] = _sbu3H::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubv2Q; else goto cbuWl;
       ubv2Q: // global
           call _cbuWk(R1) args: 0, res: 0, upd: 0;
       cbuWl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuWf_info" {
     block_cbuWf_info:
         const _cbuWf;
         const 15;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbuWk() //  [R1]
         { []
         }
     {offset
       cbuWk: // global
           if (R1 & 7 == 1) goto cbv1T; else goto ubv2y;
       cbv1T: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubv2z; else goto cbv1f;
       ubv2z: // global
           Sp = Sp + 24;
           goto ubv2T;
       cbv1f: // global
           _sbu3N::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 16] = block_cbuWs_info;
           R1 = _sbu3N::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubv2R; else goto cbuWt;
       ubv2R: // global
           call _cbuWs(R1) args: 0, res: 0, upd: 0;
       cbuWt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubv2y: // global
           Sp = Sp + 24;
           goto ubv2T;
       ubv2T: // global
           call _sbu1D() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuWk_info" {
     block_cbuWk_info:
         const _cbuWk;
         const 209;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbuWs() //  [R1]
         { []
         }
     {offset
       cbuWs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbv1i; else goto cbv1h;
       cbv1i: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbv1h: // global
           _sbu1l::P64 = P64[Sp + 64];
           _sbu3P::P64 = P64[R1 + 7];
           _sbu3Q::P64 = P64[R1 + 15];
           _sbu3T::P64 = P64[_sbu1l::P64 + 8];
           I64[Hp - 16] = sat_sbu41_info;
           P64[Hp] = _sbu3T::P64;
           call MO_WriteBarrier();
           P64[_sbu1l::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu1l::P64);
           I64[Sp - 8] = block_cbuWR_info;
           R1 = _sbu3T::P64;
           P64[Sp] = _sbu3Q::P64;
           P64[Sp + 56] = _sbu3P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubv2U; else goto cbuWS;
       ubv2U: // global
           call _cbuWR(R1) args: 0, res: 0, upd: 0;
       cbuWS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuWs_info" {
     block_cbuWs_info:
         const _cbuWs;
         const 4111;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbuWR() //  [R1]
         { []
         }
     {offset
       cbuWR: // global
           _sbu4a::I64 = I64[R1 + 39];
           if (_sbu4a::I64 != 0) goto cbv1l; else goto cbv1Q;
       cbv1l: // global
           I64[Sp - 32] = block_cbuWY_info;
           _sbu45::P64 = P64[R1 + 7];
           _sbu46::P64 = P64[R1 + 15];
           _sbu44::I64 = I64[R1 + 23];
           R1 = P64[Sp + 96];
           P64[Sp - 24] = _sbu45::P64;
           P64[Sp - 16] = _sbu46::P64;
           I64[Sp - 8] = _sbu4a::I64;
           I64[Sp] = _sbu44::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubv2V; else goto cbuWZ;
       ubv2V: // global
           call _cbuWY(R1) args: 0, res: 0, upd: 0;
       cbuWZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbv1Q: // global
           _sbu1i::P64 = P64[Sp + 48];
           _sbu3Q::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbu1i::P64 + 8] = _sbu3Q::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu1i::P64);
           Sp = Sp + 16;
           call _sbu1D() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuWR_info" {
     block_cbuWR_info:
         const _cbuWR;
         const 16;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbuWY() //  [R1]
         { []
         }
     {offset
       cbuWY: // global
           if (R1 & 7 == 1) goto cbv1n; else goto cbv1F;
       cbv1n: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbv1q; else goto cbv1p;
       cbv1q: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbv1p: // global
           I64[Hp - 24] = sat_sbu4k_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 24];
           _sbu1i::P64 = P64[Sp + 80];
           call MO_WriteBarrier();
           P64[_sbu1i::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu1i::P64);
           Sp = Sp + 48;
           call _sbu1D() args: 0, res: 0, upd: 0;
       cbv1F: // global
           I64[Sp] = block_cbv1t_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubv2X; else goto cbv1u;
       ubv2X: // global
           call _cbv1t(R1) args: 0, res: 0, upd: 0;
       cbv1u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuWY_info" {
     block_cbuWY_info:
         const _cbuWY;
         const 788;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv1t() //  [R1]
         { []
         }
     {offset
       cbv1t: // global
           I64[Sp - 8] = block_cbv1y_info;
           R2 = P64[Sp + 96];
           _sbu4o::P64 = P64[R1 + 7];
           _sbu4p::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbu4p::P64;
           P64[Sp + 96] = _sbu4o::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv1t_info" {
     block_cbv1t_info:
         const _cbv1t;
         const 788;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv1y() //  [R1]
         { []
         }
     {offset
       cbv1y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbv1J; else goto cbv1I;
       cbv1J: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbv1I: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sbu3Q::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_cbv1B_info;
           R5 = Hp - 47;
           R4 = _sbu3Q::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 104];
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv1y_info" {
     block_cbv1y_info:
         const _cbv1y;
         const 1557;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv1B() //  [R1]
         { []
         }
     {offset
       cbv1B: // global
           I64[Sp] = block_cbv1D_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubv3h; else goto cbv1L;
       ubv3h: // global
           call _cbv1D(R1) args: 0, res: 0, upd: 0;
       cbv1L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv1B_info" {
     block_cbv1B_info:
         const _cbv1B;
         const 4111;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv1D() //  [R1]
         { []
         }
     {offset
       cbv1D: // global
           _sbu1i::P64 = P64[Sp + 40];
           _sbu4B::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbu1i::P64 + 8] = _sbu4B::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu1i::P64);
           Sp = Sp + 8;
           call _sbu1D() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbv1D_info" {
     block_cbv1D_info:
         const _cbv1D;
         const 4111;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _sbu1D() //  []
         { []
         }
     {offset
       sbu1D: // global
           I64[Sp - 8] = block_cbuXx_info;
           R1 = P64[Sp + 80];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubv3j; else goto cbv09;
       ubv3j: // global
           call _cbuXx(R1) args: 0, res: 0, upd: 0;
       cbv09: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbuXx() //  [R1]
         { []
         }
     {offset
       cbuXx: // global
           if (R1 & 7 == 1) goto cbv0g; else goto cbv0F;
       cbv0g: // global
           I64[Sp] = block_cbv0d_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubv30; else goto cbv0h;
       ubv30: // global
           call _cbv0d(R1) args: 0, res: 0, upd: 0;
       cbv0h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbv0F: // global
           I64[Sp] = block_cbv0D_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubv31; else goto cbv0G;
       ubv31: // global
           call _cbv0D(R1) args: 0, res: 0, upd: 0;
       cbv0G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuXx_info" {
     block_cbuXx_info:
         const _cbuXx;
         const 69647;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv0d() //  [R1]
         { []
         }
     {offset
       cbv0d: // global
           if (R1 & 7 == 1) goto ubv2F; else goto cbv0x;
       ubv2F: // global
           Sp = Sp + 8;
           call _sbu1F() args: 0, res: 0, upd: 0;
       cbv0x: // global
           I64[Sp] = block_cbv0q_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubv3a; else goto cbv0r;
       ubv3a: // global
           call _cbv0q(R1) args: 0, res: 0, upd: 0;
       cbv0r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv0d_info" {
     block_cbv0d_info:
         const _cbv0d;
         const 102415;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv0q() //  [R1]
         { []
         }
     {offset
       cbv0q: // global
           I64[Sp] = block_cbv0v_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv0q_info" {
     block_cbv0q_info:
         const _cbv0q;
         const 102415;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv0v() //  []
         { []
         }
     {offset
       cbv0v: // global
           Sp = Sp + 8;
           call _sbu1F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbv0v_info" {
     block_cbv0v_info:
         const _cbv0v;
         const 102415;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv0D() //  [R1]
         { []
         }
     {offset
       cbv0D: // global
           I64[Sp] = block_cbv0K_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv0D_info" {
     block_cbv0D_info:
         const _cbv0D;
         const 69647;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv0K() //  []
         { []
         }
     {offset
       cbv0K: // global
           I64[Sp] = block_cbv0M_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubv3d; else goto cbv0P;
       ubv3d: // global
           call _cbv0M(R1) args: 0, res: 0, upd: 0;
       cbv0P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv0K_info" {
     block_cbv0K_info:
         const _cbv0K;
         const 69647;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv0M() //  [R1]
         { []
         }
     {offset
       cbv0M: // global
           if (R1 & 7 == 1) goto ubv2D; else goto cbv15;
       ubv2D: // global
           Sp = Sp + 8;
           call _sbu1F() args: 0, res: 0, upd: 0;
       cbv15: // global
           I64[Sp] = block_cbv0Y_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubv3e; else goto cbv0Z;
       ubv3e: // global
           call _cbv0Y(R1) args: 0, res: 0, upd: 0;
       cbv0Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv0M_info" {
     block_cbv0M_info:
         const _cbv0M;
         const 102415;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv0Y() //  [R1]
         { []
         }
     {offset
       cbv0Y: // global
           I64[Sp] = block_cbv13_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbv0Y_info" {
     block_cbv0Y_info:
         const _cbv0Y;
         const 102415;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbv13() //  []
         { []
         }
     {offset
       cbv13: // global
           Sp = Sp + 8;
           call _sbu1F() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbv13_info" {
     block_cbv13_info:
         const _cbv13;
         const 102415;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _sbu1F() //  []
         { []
         }
     {offset
       sbu1F: // global
           I64[Sp - 8] = block_cbuXE_info;
           R1 = P64[Sp + 104];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubv3k; else goto cbuZN;
       ubv3k: // global
           call _cbuXE(R1) args: 0, res: 0, upd: 0;
       cbuZN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbuXE() //  [R1]
         { []
         }
     {offset
       cbuXE: // global
           if (R1 & 7 == 1) goto cbuZU; else goto cbv08;
       cbuZU: // global
           I64[Sp] = block_cbuZR_info;
           R1 = GHC.IO.Encoding.getLocaleEncoding1_closure;
           if (R1 & 7 != 0) goto ubv32; else goto cbuZV;
       ubv32: // global
           call _cbuZR(R1) args: 0, res: 0, upd: 0;
       cbuZV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbv08: // global
           P64[Sp + 112] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _sbu1H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuXE_info" {
     block_cbuXE_info:
         const _cbuXE;
         const 626703;
         const 35188667056158;
         const SbuCr_srt+200;
 },
 _cbuZR() //  [R1]
         { []
         }
     {offset
       cbuZR: // global
           I64[Sp] = block_cbuZZ_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuZR_info" {
     block_cbuZR_info:
         const _cbuZR;
         const 626703;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuZZ() //  [R1]
         { []
         }
     {offset
       cbuZZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbv04; else goto cbv03;
       cbv04: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbv03: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 112] = Hp - 6;
           Sp = Sp + 8;
           call _sbu1H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuZZ_info" {
     block_cbuZZ_info:
         const _cbuZZ;
         const 626703;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _sbu1H() //  []
         { []
         }
     {offset
       sbu1H: // global
           I64[Sp - 8] = block_cbuXJ_info;
           R1 = P64[Sp + 104];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubv3l; else goto cbuXL;
       ubv3l: // global
           call _cbuXJ(R1) args: 0, res: 0, upd: 0;
       cbuXL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbuXJ() //  [R1]
         { []
         }
     {offset
       cbuXJ: // global
           if (R1 & 7 == 1) goto cbuXU; else goto cbuY5;
       cbuXU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuXX; else goto cbuXW;
       cbuXX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuXW: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbuXQ_info;
           R1 = Hp - 15;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbuY5: // global
           I64[Sp] = block_cbuY3_info;
           _sbu1K::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp + 112] = _sbu1K::P64;
           if (R1 & 7 != 0) goto ubv34; else goto cbuY6;
       ubv34: // global
           call _cbuY3(R1) args: 0, res: 0, upd: 0;
       cbuY6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuXJ_info" {
     block_cbuXJ_info:
         const _cbuXJ;
         const 626703;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuXQ() //  [R1]
         { []
         }
     {offset
       cbuXQ: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbuY0; else goto cbuXZ;
       cbuY0: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuXZ: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 32];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = GHC.Base.Nothing_closure+1;
           P64[Hp - 24] = GHC.Base.Nothing_closure+1;
           _sbu18::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbu18::P64;
           P64[Hp - 8] = _sbu18::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuXQ_info" {
     block_cbuXQ_info:
         const _cbuXQ;
         const 626703;
         const 30;
 },
 _cbuY3() //  [R1]
         { []
         }
     {offset
       cbuY3: // global
           I64[Sp] = block_cbuYc_info;
           _sbu1W::P64 = P64[R1 + 15];
           _sbu1X::P64 = P64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp + 80] = _sbu1X::P64;
           P64[Sp + 88] = _sbu1W::P64;
           if (R1 & 7 != 0) goto ubv35; else goto cbuZo;
       ubv35: // global
           call _cbuYc(R1) args: 0, res: 0, upd: 0;
       cbuZo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuY3_info" {
     block_cbuY3_info:
         const _cbuY3;
         const 102415;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuYc() //  [R1]
         { []
         }
     {offset
       cbuYc: // global
           _sbu1W::P64 = P64[Sp + 88];
           _cbv2q::P64 = R1 & 7;
           if (_cbv2q::P64 != 3) goto ubv2u; else goto cbuZz;
       ubv2u: // global
           if (_cbv2q::P64 != 6) goto cbuZu; else goto cbuZI;
       cbuZu: // global
           P64[Sp + 88] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _sbu1Y() args: 0, res: 0, upd: 0;
       cbuZI: // global
           I64[Sp] = block_cbuZG_info;
           R1 = _sbu1W::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbuZz: // global
           I64[Sp] = block_cbuZx_info;
           R1 = _sbu1W::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuYc_info" {
     block_cbuYc_info:
         const _cbuYc;
         const 4111;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuZG() //  [R1]
         { []
         }
     {offset
       cbuZG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbuZM; else goto cbuZL;
       cbuZM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuZL: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 88] = Hp - 6;
           Sp = Sp + 8;
           call _sbu1Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuZG_info" {
     block_cbuZG_info:
         const _cbuZG;
         const 69647;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuZx() //  [R1]
         { []
         }
     {offset
       cbuZx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbuZD; else goto cbuZC;
       cbuZD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuZC: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 88] = Hp - 6;
           Sp = Sp + 8;
           call _sbu1Y() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbuZx_info" {
     block_cbuZx_info:
         const _cbuZx;
         const 69647;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _sbu1Y() //  []
         { []
         }
     {offset
       sbu1Y: // global
           I64[Sp - 8] = block_cbuYh_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubv3m; else goto cbuYj;
       ubv3m: // global
           call _cbuYh(R1) args: 0, res: 0, upd: 0;
       cbuYj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbuYh() //  [R1]
         { []
         }
     {offset
       cbuYh: // global
           _sbu1X::P64 = P64[Sp + 80];
           _cbv2t::P64 = R1 & 7;
           if (_cbv2t::P64 < 5) goto ubv2v; else goto ubv2w;
       ubv2v: // global
           if (_cbv2t::P64 < 4) goto cbuYs; else goto cbuYJ;
       cbuYs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuYv; else goto cbuYu;
       cbuYv: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuYu: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbuYo_info;
           _sbu21::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbu21::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbuYJ: // global
           I64[Sp] = block_cbuYB_info;
           R1 = _sbu1X::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ubv2w: // global
           if (_cbv2t::P64 < 6) goto cbuZ0; else goto cbuZh;
       cbuZ0: // global
           I64[Sp] = block_cbuYS_info;
           R1 = _sbu1X::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbuZh: // global
           I64[Sp] = block_cbuZ9_info;
           R1 = _sbu1X::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuYh_info" {
     block_cbuYh_info:
         const _cbuYh;
         const 4623;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuYo() //  [R1]
         { []
         }
     {offset
       cbuYo: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbuYy; else goto cbuYx;
       cbuYy: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuYx: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 80];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbu18::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbu18::P64;
           P64[Hp - 8] = _sbu18::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuYo_info" {
     block_cbuYo_info:
         const _cbuYo;
         const 4623;
         const 30;
 },
 _cbuYB() //  [R1]
         { []
         }
     {offset
       cbuYB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuYM; else goto cbuYL;
       cbuYM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuYL: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbuYE_info;
           _sbu2c::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbu2c::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuYB_info" {
     block_cbuYB_info:
         const _cbuYB;
         const 37391;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuYE() //  [R1]
         { []
         }
     {offset
       cbuYE: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbuYP; else goto cbuYO;
       cbuYP: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuYO: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 80];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbu18::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbu18::P64;
           P64[Hp - 8] = _sbu18::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuYE_info" {
     block_cbuYE_info:
         const _cbuYE;
         const 4623;
         const 30;
 },
 _cbuYS() //  [R1]
         { []
         }
     {offset
       cbuYS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuZ3; else goto cbuZ2;
       cbuZ3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuZ2: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbuYV_info;
           _sbu2o::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbu2o::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuYS_info" {
     block_cbuYS_info:
         const _cbuYS;
         const 37391;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuYV() //  [R1]
         { []
         }
     {offset
       cbuYV: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbuZ6; else goto cbuZ5;
       cbuZ6: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuZ5: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 80];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.AppendHandle_closure+5;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbu18::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbu18::P64;
           P64[Hp - 8] = _sbu18::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuYV_info" {
     block_cbuYV_info:
         const _cbuYV;
         const 4623;
         const 30;
 },
 _cbuZ9() //  [R1]
         { []
         }
     {offset
       cbuZ9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbuZk; else goto cbuZj;
       cbuZk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuZj: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = lvl11_rbnWT_closure;
           P64[Hp] = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbuZc_info;
           _sbu2A::P64 = R1;
           R1 = Hp - 15;
           P64[Sp + 80] = _sbu2A::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuZ9_info" {
     block_cbuZ9_info:
         const _cbuZ9;
         const 37391;
         const 4294967326;
         const SbuCr_srt+304;
 },
 _cbuZc() //  [R1]
         { []
         }
     {offset
       cbuZc: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbuZn; else goto cbuZm;
       cbuZn: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbuZm: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 80];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 104];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 88];
           P64[Hp - 24] = P64[Sp + 112];
           _sbu18::P64 = P64[Sp + 120];
           P64[Hp - 16] = _sbu18::P64;
           P64[Hp - 8] = _sbu18::P64;
           P64[Hp] = P64[Sp + 96];
           R1 = Hp - 127;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbuZc_info" {
     block_cbuZc_info:
         const _cbuZc;
         const 4623;
         const 30;
 },
 GHC.IO.Handle.hSetBinaryMode1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbv3n: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbv3r; else goto cbv3q;
       cbv3r: // global
           HpAlloc = 48;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetBinaryMode1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbv3q: // global
           I64[Hp - 40] = lvl48_sbu18_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbu4H_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 40;
           R4 = Hp - 14;
           R3 = R2;
           R2 = lvl9_rbnWR_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBinaryMode1_info" {
     GHC.IO.Handle.hSetBinaryMode1_info:
         const GHC.IO.Handle.hSetBinaryMode1_entry;
         const 0;
         const 264436841447438;
         const 12884901903;
         const SbuCr_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.321064531 UTC

[section ""data" . GHC.IO.Handle.hSetBinaryMode_closure" {
     GHC.IO.Handle.hSetBinaryMode_closure:
         const GHC.IO.Handle.hSetBinaryMode_info;
         const 0;
 },
 GHC.IO.Handle.hSetBinaryMode_entry() //  [R2, R3]
         { []
         }
     {offset
       cbv9J: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetBinaryMode1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBinaryMode_info" {
     GHC.IO.Handle.hSetBinaryMode_info:
         const GHC.IO.Handle.hSetBinaryMode_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbuCr_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.324189136 UTC

[section ""cstring" . GHC.IO.Handle.hIsSeekable4_bytes" {
     GHC.IO.Handle.hIsSeekable4_bytes:
         I8[] [104,73,115,83,101,101,107,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.326380827 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable3_closure" {
     GHC.IO.Handle.hIsSeekable3_closure:
         const GHC.IO.Handle.hIsSeekable3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsSeekable3_entry() //  [R1]
         { []
         }
     {offset
       cbv9X: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbv9Y; else goto cbv9Z;
       cbv9Y: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbv9Z: // global
           (_cbv9U::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbv9U::I64 == 0) goto cbv9W; else goto cbv9V;
       cbv9W: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbv9V: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbv9U::I64;
           R2 = GHC.IO.Handle.hIsSeekable4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable3_info" {
     GHC.IO.Handle.hIsSeekable3_info:
         const GHC.IO.Handle.hIsSeekable3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.331923094 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable2_closure" {
     GHC.IO.Handle.hIsSeekable2_closure:
         const GHC.IO.Handle.hIsSeekable2_info;
         const 0;
 },
 GHC.IO.Handle.hIsSeekable2_entry() //  [R2]
         { []
         }
     {offset
       cbvaf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbvag; else goto cbvah;
       cbvag: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsSeekable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvah: // global
           I64[Sp - 8] = block_cbvac_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvaS; else goto cbvad;
       ubvaS: // global
           call _cbvac(R1) args: 0, res: 0, upd: 0;
       cbvad: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable2_info" {
     GHC.IO.Handle.hIsSeekable2_info:
         const GHC.IO.Handle.hIsSeekable2_entry;
         const 0;
         const 216172786408751118;
         const 8589934597;
         const SbuCr_srt+136;
 },
 _cbvac() //  [R1]
         { []
         }
     {offset
       cbvac: // global
           I64[Sp - 24] = block_cbvak_info;
           _sbu4K::P64 = R1;
           _sbu4L::P64 = P64[R1 + 7];
           _sbu4O::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbu4L::P64;
           P64[Sp - 8] = _sbu4O::P64;
           P64[Sp] = _sbu4K::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubvaR; else goto cbvam;
       ubvaR: // global
           call _cbvak(R1) args: 0, res: 0, upd: 0;
       cbvam: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvac_info" {
     block_cbvac_info:
         const _cbvac;
         const 0;
         const 72057598332895262;
         const SbuCr_srt+136;
 },
 _cbvak() //  [R1]
         { []
         }
     {offset
       cbvak: // global
           _cbvaO::P64 = R1 & 7;
           if (_cbvaO::P64 < 3) goto ubvaP; else goto ubvaQ;
       ubvaP: // global
           if (_cbvaO::P64 < 2) goto cbvaC; else goto cbvaG;
       cbvaC: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbvaG: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       ubvaQ: // global
           if (_cbvaO::P64 == 5) goto cbvaK; else goto cbvav;
       cbvaK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvaN; else goto cbvaM;
       cbvaN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvaM: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbvav: // global
           _sbu4O::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbvaq_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbu4O::P64;
           call GHC.IO.Device.isSeekable_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvak_info" {
     block_cbvak_info:
         const _cbvak;
         const 3;
         const 72057598332895262;
         const SbuCr_srt+136;
 },
 _cbvaq() //  [R1]
         { []
         }
     {offset
       cbvaq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvay; else goto cbvax;
       cbvay: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvax: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvaq_info" {
     block_cbvaq_info:
         const _cbvaq;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.345845942 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable1_closure" {
     GHC.IO.Handle.hIsSeekable1_closure:
         const GHC.IO.Handle.hIsSeekable1_info;
         const 0;
 },
 io_sbu5h_entry() //  [R1]
         { []
         }
     {offset
       cbvbH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvbL; else goto cbvbM;
       cbvbL: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbvbM: // global
           I64[Sp - 16] = block_cbvbC_info;
           _sbu5d::P64 = P64[R1 + 15];
           R5 = _sbu5d::P64;
           R4 = GHC.IO.Handle.hIsSeekable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsSeekable3_closure;
           P64[Sp - 8] = _sbu5d::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbu5h_info" {
     io_sbu5h_info:
         const io_sbu5h_entry;
         const 2;
         const 3458764518115508235;
         const 4294967299;
         const SbuCr_srt+112;
 },
 _cbvbC() //  [R1]
         { []
         }
     {offset
       cbvbC: // global
           I64[Sp] = block_cbvbE_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvbR; else goto cbvbF;
       ubvbR: // global
           call _cbvbE(R1) args: 0, res: 0, upd: 0;
       cbvbF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvbC_info" {
     block_cbvbC_info:
         const _cbvbC;
         const 1;
         const 30;
 },
 _cbvbE() //  [R1]
         { []
         }
     {offset
       cbvbE: // global
           I64[Sp] = block_cbvbK_info;
           R2 = P64[R1 + 7];
           _sbu5o::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbu5o::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvbE_info" {
     block_cbvbE_info:
         const _cbvbE;
         const 1;
         const 30;
 },
 _cbvbK() //  []
         { []
         }
     {offset
       cbvbK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvbK_info" {
     block_cbvbK_info:
         const _cbvbK;
         const 1;
         const 30;
 },
 io_sbu5x_entry() //  [R1]
         { []
         }
     {offset
       cbvc6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvca; else goto cbvcb;
       cbvca: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbvcb: // global
           I64[Sp - 16] = block_cbvc1_info;
           _sbu5s::P64 = P64[R1 + 15];
           R5 = _sbu5s::P64;
           R4 = GHC.IO.Handle.hIsSeekable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsSeekable3_closure;
           P64[Sp - 8] = _sbu5s::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbu5x_info" {
     io_sbu5x_info:
         const io_sbu5x_entry;
         const 2;
         const 3458764518115508235;
         const 4294967299;
         const SbuCr_srt+112;
 },
 _cbvc1() //  [R1]
         { []
         }
     {offset
       cbvc1: // global
           I64[Sp] = block_cbvc3_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvcg; else goto cbvc4;
       ubvcg: // global
           call _cbvc3(R1) args: 0, res: 0, upd: 0;
       cbvc4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvc1_info" {
     block_cbvc1_info:
         const _cbvc1;
         const 1;
         const 30;
 },
 _cbvc3() //  [R1]
         { []
         }
     {offset
       cbvc3: // global
           I64[Sp] = block_cbvc9_info;
           R2 = P64[R1 + 7];
           _sbu5E::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbu5E::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvc3_info" {
     block_cbvc3_info:
         const _cbvc3;
         const 1;
         const 30;
 },
 _cbvc9() //  []
         { []
         }
     {offset
       cbvc9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvc9_info" {
     block_cbvc9_info:
         const _cbvc9;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hIsSeekable1_entry() //  [R2]
         { []
         }
     {offset
       cbvcl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvcm; else goto cbvcn;
       cbvcm: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsSeekable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvcn: // global
           I64[Sp - 8] = block_cbvbq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvcE; else goto cbvbr;
       ubvcE: // global
           call _cbvbq(R1) args: 0, res: 0, upd: 0;
       cbvbr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable1_info" {
     GHC.IO.Handle.hIsSeekable1_info:
         const GHC.IO.Handle.hIsSeekable1_entry;
         const 0;
         const 8070450536542896142;
         const 8589934597;
         const SbuCr_srt+112;
 },
 _cbvbq() //  [R1]
         { []
         }
     {offset
       cbvbq: // global
           if (R1 & 7 == 1) goto cbvci; else goto cbvcj;
       cbvci: // global
           I64[Sp - 16] = block_cbvbv_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbvcj: // global
           I64[Sp - 16] = block_cbvbU_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvbq_info" {
     block_cbvbq_info:
         const _cbvbq;
         const 0;
         const 3458764518115508254;
         const SbuCr_srt+112;
 },
 _cbvbv() //  [R1]
         { []
         }
     {offset
       cbvbv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvcr; else goto cbvcq;
       cbvcr: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbvcq: // global
           I64[Hp - 16] = io_sbu5h_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbvbx::P64 = Hp - 15;
           if (R1 == 0) goto cbvcv; else goto cbvcu;
       cbvcv: // global
           R1 = _cbvbx::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbvcu: // global
           R1 = _cbvbx::P64;
           Sp = Sp + 24;
           call io_sbu5h_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvbv_info" {
     block_cbvbv_info:
         const _cbvbv;
         const 2;
         const 3458764518115508254;
         const SbuCr_srt+112;
 },
 _cbvbU() //  [R1]
         { []
         }
     {offset
       cbvbU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvcz; else goto cbvcy;
       cbvcz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbvcy: // global
           I64[Hp - 16] = io_sbu5x_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbvbW::P64 = Hp - 15;
           if (R1 == 0) goto cbvcD; else goto cbvcC;
       cbvcD: // global
           R1 = _cbvbW::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbvcC: // global
           R1 = _cbvbW::P64;
           Sp = Sp + 24;
           call io_sbu5x_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvbU_info" {
     block_cbvbU_info:
         const _cbvbU;
         const 2;
         const 3458764518115508254;
         const SbuCr_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.36671118 UTC

[section ""data" . GHC.IO.Handle.hIsSeekable_closure" {
     GHC.IO.Handle.hIsSeekable_closure:
         const GHC.IO.Handle.hIsSeekable_info;
         const 0;
 },
 GHC.IO.Handle.hIsSeekable_entry() //  [R2]
         { []
         }
     {offset
       cbvdL: // global
           R2 = R2;
           call GHC.IO.Handle.hIsSeekable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsSeekable_info" {
     GHC.IO.Handle.hIsSeekable_info:
         const GHC.IO.Handle.hIsSeekable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.370196512 UTC

[section ""cstring" . GHC.IO.Handle.hGetPosn4_bytes" {
     GHC.IO.Handle.hGetPosn4_bytes:
         I8[] [104,71,101,116,80,111,115,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.372576715 UTC

[section ""data" . GHC.IO.Handle.hGetPosn3_closure" {
     GHC.IO.Handle.hGetPosn3_closure:
         const GHC.IO.Handle.hGetPosn3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetPosn3_entry() //  [R1]
         { []
         }
     {offset
       cbvdZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbve0; else goto cbve1;
       cbve0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbve1: // global
           (_cbvdW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvdW::I64 == 0) goto cbvdY; else goto cbvdX;
       cbvdY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvdX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvdW::I64;
           R2 = GHC.IO.Handle.hGetPosn4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn3_info" {
     GHC.IO.Handle.hGetPosn3_info:
         const GHC.IO.Handle.hGetPosn3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.388917422 UTC

[section ""data" . GHC.IO.Handle.hGetPosn2_closure" {
     GHC.IO.Handle.hGetPosn2_closure:
         const GHC.IO.Handle.hGetPosn2_info;
         const 0;
 },
 sat_sbu6x_entry() //  [R1]
         { []
         }
     {offset
       cbveC: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbveD; else goto cbveE;
       cbveD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbveE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbvez_info;
           _sbu62::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbu62::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubvfc; else goto cbveA;
       ubvfc: // global
           call _cbvez(R1) args: 0, res: 0, upd: 0;
       cbveA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu6x_info" {
     sat_sbu6x_info:
         const sat_sbu6x_entry;
         const 2;
         const 12884901906;
         const SbuCr_srt+360;
 },
 _cbvez() //  [R1]
         { []
         }
     {offset
       cbvez: // global
           I64[Sp - 16] = block_cbveH_info;
           _sbu6q::I64 = I64[R1 + 39];
           _sbu6r::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbu6r::I64;
           I64[Sp] = _sbu6q::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubvfb; else goto cbveJ;
       ubvfb: // global
           call _cbveH(R1) args: 0, res: 0, upd: 0;
       cbveJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvez_info" {
     block_cbvez_info:
         const _cbvez;
         const 1;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbveH() //  [R1]
         { []
         }
     {offset
       cbveH: // global
           _sbu6q::I64 = I64[Sp + 16];
           _sbu6r::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cbveT; else goto cbvf5;
       cbveT: // global
           I64[Sp + 16] = block_cbveQ_info;
           R2 = _sbu6r::I64 - _sbu6q::I64;
           Sp = Sp + 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
       cbvf5: // global
           I64[Sp + 16] = block_cbvf3_info;
           R2 = _sbu6r::I64 - _sbu6q::I64;
           Sp = Sp + 16;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbveH_info" {
     block_cbveH_info:
         const _cbveH;
         const 195;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbveQ() //  [R1]
         { []
         }
     {offset
       cbveQ: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.minusInteger_entry(R3,
                                                    R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbveQ_info" {
     block_cbveQ_info:
         const _cbveQ;
         const 1;
         const 4294967326;
         const SbuCr_srt+368;
 },
 _cbvf3() //  [R1]
         { []
         }
     {offset
       cbvf3: // global
           R3 = R1;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Integer.Type.plusInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvf3_info" {
     block_cbvf3_info:
         const _cbvf3;
         const 1;
         const 4294967326;
         const SbuCr_srt+360;
 },
 sat_sbu71_entry() //  [R1]
         { []
         }
     {offset
       cbvfH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvfL; else goto cbvfM;
       cbvfL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvfM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbvfE_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubvfQ; else goto cbvfF;
       ubvfQ: // global
           call _cbvfE(R1) args: 0, res: 0, upd: 0;
       cbvfF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu71_info" {
     sat_sbu71_info:
         const sat_sbu71_entry;
         const 1;
         const 16;
 },
 _cbvfE() //  [R1]
         { []
         }
     {offset
       cbvfE: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvfP; else goto cbvfO;
       cbvfP: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbvfO: // global
           _sbu6W::P64 = P64[R1 + 7];
           _sbu6X::P64 = P64[R1 + 15];
           _sbu6V::I64 = I64[R1 + 23];
           _sbu6Y::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbu6W::P64;
           P64[Hp - 32] = _sbu6X::P64;
           I64[Hp - 24] = _sbu6V::I64;
           I64[Hp - 16] = _sbu6Y::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvfE_info" {
     block_cbvfE_info:
         const _cbvfE;
         const 0;
         const 30;
 },
 sat_sbu7k_entry() //  [R1]
         { []
         }
     {offset
       cbvgd: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbvgk; else goto cbvgl;
       cbvgk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvgl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbvga_info;
           _sbu7a::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbu7a::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubvgp; else goto cbvgb;
       ubvgp: // global
           call _cbvga(R1) args: 0, res: 0, upd: 0;
       cbvgb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu7k_info" {
     sat_sbu7k_info:
         const sat_sbu7k_entry;
         const 4294967297;
         const 19;
 },
 _cbvga() //  [R1]
         { []
         }
     {offset
       cbvga: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvgo; else goto cbvgn;
       cbvgo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbvgn: // global
           _sbu7e::P64 = P64[R1 + 7];
           _sbu7f::P64 = P64[R1 + 15];
           _sbu7d::I64 = I64[R1 + 23];
           _sbu7g::I64 = I64[R1 + 31];
           _sbu7i::I64 = I64[R1 + 47];
           _sbu7j::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbu7e::P64;
           P64[Hp - 32] = _sbu7f::P64;
           I64[Hp - 24] = _sbu7d::I64;
           I64[Hp - 16] = _sbu7g::I64;
           I64[Hp - 8] = _sbu7j::I64;
           I64[Hp] = _sbu7i::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvga_info" {
     block_cbvga_info:
         const _cbvga;
         const 65;
         const 30;
 },
 GHC.IO.Handle.hGetPosn2_entry() //  [R2]
         { []
         }
     {offset
       cbvgq: // global
           if ((Sp + -88) < SpLim) (likely: False) goto cbvgr; else goto cbvgs;
       cbvgr: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetPosn2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvgs: // global
           I64[Sp - 8] = block_cbvee_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvi2; else goto cbvef;
       ubvi2: // global
           call _cbvee(R1) args: 0, res: 0, upd: 0;
       cbvef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn2_info" {
     GHC.IO.Handle.hGetPosn2_info:
         const GHC.IO.Handle.hGetPosn2_entry;
         const 0;
         const 7700876361742;
         const 8589934597;
         const SbuCr_srt+296;
 },
 _cbvee() //  [R1]
         { []
         }
     {offset
       cbvee: // global
           I64[Sp - 32] = block_cbvej_info;
           R2 = P64[R1 + 7];
           I64[Sp - 48] = stg_ap_pv_info;
           P64[Sp - 40] = P64[R1 + 31];
           P64[Sp - 24] = P64[R1 + 63];
           P64[Sp - 16] = P64[R1 + 71];
           P64[Sp - 8] = P64[R1 + 95];
           P64[Sp] = P64[R1 + 47];
           Sp = Sp - 48;
           call GHC.IO.Device.tell_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvee_info" {
     block_cbvee_info:
         const _cbvee;
         const 0;
         const 3302829850654;
         const SbuCr_srt+296;
 },
 _cbvej() //  [R1]
         { []
         }
     {offset
       cbvej: // global
           _sbu65::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp - 8] = block_cbvel_info;
           _sbu62::P64 = R1;
           R1 = _sbu65::P64;
           P64[Sp] = _sbu62::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvhP; else goto cbvem;
       ubvhP: // global
           call _cbvel(R1) args: 0, res: 0, upd: 0;
       cbvem: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvej_info" {
     block_cbvej_info:
         const _cbvej;
         const 4;
         const 3302829850654;
         const SbuCr_srt+296;
 },
 _cbvel() //  [R1]
         { []
         }
     {offset
       cbvel: // global
           I64[Sp - 16] = block_cbvfd_info;
           _sbu6b::I64 = I64[R1 + 39];
           _sbu6c::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbu6c::I64;
           I64[Sp] = _sbu6b::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubvhQ; else goto cbvfe;
       ubvhQ: // global
           call _cbvfd(R1) args: 0, res: 0, upd: 0;
       cbvfe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvel_info" {
     block_cbvel_info:
         const _cbvel;
         const 5;
         const 3302829850654;
         const SbuCr_srt+296;
 },
 _cbvfd() //  [R1]
         { []
         }
     {offset
       cbvfd: // global
           if (R1 & 7 == 1) goto cbvgB; else goto cbvhw;
       cbvgB: // global
           _sbu6B::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp + 16] = block_cbvfi_info;
           R1 = _sbu6B::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubvhR; else goto cbvfj;
       ubvhR: // global
           call _cbvfi(R1) args: 0, res: 0, upd: 0;
       cbvfj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvhw: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubvhK; else goto cbvhu;
       ubvhK: // global
           Sp = Sp + 16;
           call _cbvet() args: 0, res: 0, upd: 0;
       cbvhu: // global
           R1 = GHC.IO.Handle.Internals.flushCharBuffer2_closure;
           Sp = Sp + 64;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvfd_info" {
     block_cbvfd_info:
         const _cbvfd;
         const 199;
         const 3302829850654;
         const SbuCr_srt+296;
 },
 _cbvfi() //  [R1]
         { []
         }
     {offset
       cbvfi: // global
           I64[Sp - 16] = block_cbvfn_info;
           _sbu6H::I64 = I64[R1 + 39];
           _sbu6I::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbu6I::I64;
           I64[Sp] = _sbu6H::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubvhT; else goto cbvfo;
       ubvhT: // global
           call _cbvfn(R1) args: 0, res: 0, upd: 0;
       cbvfo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvfi_info" {
     block_cbvfi_info:
         const _cbvfi;
         const 5;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvfn() //  [R1]
         { []
         }
     {offset
       cbvfn: // global
           if (R1 & 7 == 1) goto cbvhj; else goto ubvhL;
       cbvhj: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubvhM; else goto cbvgF;
       ubvhM: // global
           Sp = Sp + 16;
           goto ubvhW;
       cbvgF: // global
           _sbu6N::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp + 16] = block_cbvfv_info;
           R1 = _sbu6N::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubvhU; else goto cbvfw;
       ubvhU: // global
           call _cbvfv(R1) args: 0, res: 0, upd: 0;
       cbvfw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubvhL: // global
           Sp = Sp + 16;
           goto ubvhW;
       ubvhW: // global
           call _cbvet() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvfn_info" {
     block_cbvfn_info:
         const _cbvfn;
         const 199;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvfv() //  [R1]
         { []
         }
     {offset
       cbvfv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvgI; else goto cbvgH;
       cbvgI: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvgH: // global
           _sbu5S::P64 = P64[Sp + 24];
           _sbu6P::P64 = P64[R1 + 7];
           _sbu6Q::P64 = P64[R1 + 15];
           _sbu6T::P64 = P64[_sbu5S::P64 + 8];
           I64[Hp - 16] = sat_sbu71_info;
           P64[Hp] = _sbu6T::P64;
           call MO_WriteBarrier();
           P64[_sbu5S::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu5S::P64);
           I64[Sp - 8] = block_cbvfU_info;
           R1 = _sbu6T::P64;
           P64[Sp] = _sbu6Q::P64;
           P64[Sp + 16] = _sbu6P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvhX; else goto cbvfV;
       ubvhX: // global
           call _cbvfU(R1) args: 0, res: 0, upd: 0;
       cbvfV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvfv_info" {
     block_cbvfv_info:
         const _cbvfv;
         const 133;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvfU() //  [R1]
         { []
         }
     {offset
       cbvfU: // global
           _sbu7a::I64 = I64[R1 + 39];
           if (_sbu7a::I64 != 0) goto cbvgL; else goto cbvhg;
       cbvgL: // global
           I64[Sp - 24] = block_cbvg1_info;
           _sbu75::P64 = P64[R1 + 7];
           _sbu76::P64 = P64[R1 + 15];
           _sbu74::I64 = I64[R1 + 23];
           R1 = P64[Sp + 40];
           P64[Sp - 16] = _sbu76::P64;
           I64[Sp - 8] = _sbu7a::I64;
           P64[Sp] = _sbu75::P64;
           I64[Sp + 40] = _sbu74::I64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubvhY; else goto cbvg2;
       ubvhY: // global
           call _cbvg1(R1) args: 0, res: 0, upd: 0;
       cbvg2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvhg: // global
           _sbu5P::P64 = P64[Sp + 48];
           _sbu6Q::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbu5P::P64 + 8] = _sbu6Q::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu5P::P64);
           Sp = Sp + 8;
           call _cbvet() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvfU_info" {
     block_cbvfU_info:
         const _cbvfU;
         const 6;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvg1() //  [R1]
         { []
         }
     {offset
       cbvg1: // global
           if (R1 & 7 == 1) goto cbvgN; else goto cbvh5;
       cbvgN: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbvgQ; else goto cbvgP;
       cbvgQ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvgP: // global
           I64[Hp - 24] = sat_sbu7k_info;
           P64[Hp - 8] = P64[Sp + 32];
           I64[Hp] = I64[Sp + 16];
           _sbu5P::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_sbu5P::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu5P::P64);
           Sp = Sp + 32;
           call _cbvet() args: 0, res: 0, upd: 0;
       cbvh5: // global
           I64[Sp] = block_cbvgT_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubvi0; else goto cbvgU;
       ubvi0: // global
           call _cbvgT(R1) args: 0, res: 0, upd: 0;
       cbvgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvg1_info" {
     block_cbvg1_info:
         const _cbvg1;
         const 8329;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvgT() //  [R1]
         { []
         }
     {offset
       cbvgT: // global
           I64[Sp - 8] = block_cbvgY_info;
           R2 = P64[Sp + 48];
           _sbu7o::P64 = P64[R1 + 7];
           _sbu7p::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbu7p::P64;
           P64[Sp + 48] = _sbu7o::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvgT_info" {
     block_cbvgT_info:
         const _cbvgT;
         const 8329;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvgY() //  [R1]
         { []
         }
     {offset
       cbvgY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvh9; else goto cbvh8;
       cbvh9: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvh8: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 72];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sbu6Q::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbvh1_info;
           R5 = Hp - 47;
           R4 = _sbu6Q::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 56];
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvgY_info" {
     block_cbvgY_info:
         const _cbvgY;
         const 16650;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvh1() //  [R1]
         { []
         }
     {offset
       cbvh1: // global
           I64[Sp] = block_cbvh3_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvi3; else goto cbvhb;
       ubvi3: // global
           call _cbvh3(R1) args: 0, res: 0, upd: 0;
       cbvhb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvh1_info" {
     block_cbvh1_info:
         const _cbvh1;
         const 645;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvh3() //  [R1]
         { []
         }
     {offset
       cbvh3: // global
           _sbu5P::P64 = P64[Sp + 40];
           _sbu7B::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbu5P::P64 + 8] = _sbu7B::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu5P::P64);
           call _cbvet() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvh3_info" {
     block_cbvh3_info:
         const _cbvh3;
         const 645;
         const 12884901918;
         const SbuCr_srt+360;
 },
 _cbvet() //  []
         { []
         }
     {offset
       cbvet: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbvgy; else goto cbvgx;
       cbvgy: // global
           HpAlloc = 32;
           I64[Sp] = block_cbvet_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cbvgx: // global
           I64[Hp - 24] = sat_sbu6x_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[P64[Sp + 40] + 8];
           R1 = Hp - 24;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvet_info" {
     block_cbvet_info:
         const _cbvet;
         const 645;
         const 12884901918;
         const SbuCr_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.441045285 UTC

[section ""data" . GHC.IO.Handle.hTell1_closure" {
     GHC.IO.Handle.hTell1_closure:
         const GHC.IO.Handle.hTell1_info;
         const 0;
 },
 GHC.IO.Handle.hTell1_entry() //  [R2]
         { []
         }
     {offset
       cbvkJ: // global
           R4 = GHC.IO.Handle.hGetPosn2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hGetPosn3_closure;
           call GHC.IO.Handle.Internals.wantSeekableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hTell1_info" {
     GHC.IO.Handle.hTell1_info:
         const GHC.IO.Handle.hTell1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SbuCr_srt+376;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.444713857 UTC

[section ""data" . GHC.IO.Handle.hTell_closure" {
     GHC.IO.Handle.hTell_closure:
         const GHC.IO.Handle.hTell_info;
         const 0;
 },
 GHC.IO.Handle.hTell_entry() //  [R2]
         { []
         }
     {offset
       cbvkU: // global
           R2 = R2;
           call GHC.IO.Handle.hTell1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hTell_info" {
     GHC.IO.Handle.hTell_info:
         const GHC.IO.Handle.hTell_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+400;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.447718616 UTC

[section ""cstring" . lvl12_rbnWU_bytes" {
     lvl12_rbnWU_bytes:
         I8[] [104,83,101,101,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.449917486 UTC

[section ""data" . lvl13_rbnWV_closure" {
     lvl13_rbnWV_closure:
         const lvl13_rbnWV_info;
         const 0;
         const 0;
         const 0;
 },
 lvl13_rbnWV_entry() //  [R1]
         { []
         }
     {offset
       cbvl8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvl9; else goto cbvla;
       cbvl9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvla: // global
           (_cbvl5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvl5::I64 == 0) goto cbvl7; else goto cbvl6;
       cbvl7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvl6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvl5::I64;
           R2 = lvl12_rbnWU_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl13_rbnWV_info" {
     lvl13_rbnWV_info:
         const lvl13_rbnWV_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.454195539 UTC

[section ""data" . lvl14_rbnWW_closure" {
     lvl14_rbnWW_closure:
         const lvl14_rbnWW_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_rbnWW_entry() //  [R1]
         { []
         }
     {offset
       cbvlp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvlq; else goto cbvlr;
       cbvlq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvlr: // global
           (_cbvlm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvlm::I64 == 0) goto cbvlo; else goto cbvln;
       cbvlo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvln: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvlm::I64;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Types.True_closure+2;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_rbnWW_info" {
     lvl14_rbnWW_info:
         const lvl14_rbnWW_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.475475518 UTC

[section ""data" . GHC.IO.Handle.hSeek1_closure" {
     GHC.IO.Handle.hSeek1_closure:
         const GHC.IO.Handle.hSeek1_info;
         const 0;
 },
 lvl48_sbu7M_entry() //  [R1]
         { []
         }
     {offset
       cbvlM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvlQ; else goto cbvlR;
       cbvlQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvlR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbvlK_info;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.integerToInt_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl48_sbu7M_info" {
     lvl48_sbu7M_info:
         const lvl48_sbu7M_entry;
         const 1;
         const 16;
 },
 _cbvlK() //  [R1]
         { []
         }
     {offset
       cbvlK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbvlU; else goto cbvlT;
       cbvlU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cbvlT: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvlK_info" {
     block_cbvlK_info:
         const _cbvlK;
         const 0;
         const 30;
 },
 lvl49_sbu7O_entry() //  [R1]
         { []
         }
     {offset
       cbvm1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvm5; else goto cbvm6;
       cbvm5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvm6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbvlZ_info;
           R3 = lvl14_rbnWW_closure;
           R2 = P64[R1 + 16];
           Sp = Sp - 24;
           call GHC.Integer.Type.geInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl49_sbu7O_info" {
     lvl49_sbu7O_info:
         const lvl49_sbu7O_entry;
         const 1;
         const 4294967312;
         const SbuCr_srt+408;
 },
 _cbvlZ() //  [R1]
         { []
         }
     {offset
       cbvlZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbvm9; else goto cbvm8;
       cbvm9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cbvm8: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvlZ_info" {
     block_cbvlZ_info:
         const _cbvlZ;
         const 0;
         const 30;
 },
 sat_sbu8N_entry() //  [R1]
         { []
         }
     {offset
       cbvmY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvn2; else goto cbvn3;
       cbvn2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvn3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbvmV_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubvn7; else goto cbvmW;
       ubvn7: // global
           call _cbvmV(R1) args: 0, res: 0, upd: 0;
       cbvmW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu8N_info" {
     sat_sbu8N_info:
         const sat_sbu8N_entry;
         const 1;
         const 16;
 },
 _cbvmV() //  [R1]
         { []
         }
     {offset
       cbvmV: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvn6; else goto cbvn5;
       cbvn6: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbvn5: // global
           _sbu8I::P64 = P64[R1 + 7];
           _sbu8J::P64 = P64[R1 + 15];
           _sbu8H::I64 = I64[R1 + 23];
           _sbu8K::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbu8I::P64;
           P64[Hp - 32] = _sbu8J::P64;
           I64[Hp - 24] = _sbu8H::I64;
           I64[Hp - 16] = _sbu8K::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvmV_info" {
     block_cbvmV_info:
         const _cbvmV;
         const 0;
         const 30;
 },
 sat_sbu96_entry() //  [R1]
         { []
         }
     {offset
       cbvnu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbvnB; else goto cbvnC;
       cbvnB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvnC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbvnr_info;
           _sbu8W::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbu8W::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubvnG; else goto cbvns;
       ubvnG: // global
           call _cbvnr(R1) args: 0, res: 0, upd: 0;
       cbvns: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu96_info" {
     sat_sbu96_info:
         const sat_sbu96_entry;
         const 4294967297;
         const 19;
 },
 _cbvnr() //  [R1]
         { []
         }
     {offset
       cbvnr: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvnF; else goto cbvnE;
       cbvnF: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbvnE: // global
           _sbu90::P64 = P64[R1 + 7];
           _sbu91::P64 = P64[R1 + 15];
           _sbu8Z::I64 = I64[R1 + 23];
           _sbu92::I64 = I64[R1 + 31];
           _sbu94::I64 = I64[R1 + 47];
           _sbu95::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbu90::P64;
           P64[Hp - 32] = _sbu91::P64;
           I64[Hp - 24] = _sbu8Z::I64;
           I64[Hp - 16] = _sbu92::I64;
           I64[Hp - 8] = _sbu95::I64;
           I64[Hp] = _sbu94::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvnr_info" {
     block_cbvnr_info:
         const _cbvnr;
         const 65;
         const 30;
 },
 sat_sbu9R_entry() //  [R1]
         { []
         }
     {offset
       cbvoj: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbvoq; else goto cbvor;
       cbvoq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvor: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 64] = block_cbvog_info;
           _sbu8e::P64 = P64[R1 + 24];
           _sbu8d::I64 = I64[R1 + 32];
           _sbu8g::I64 = I64[R1 + 40];
           _sbu8h::I64 = I64[R1 + 48];
           _sbu8i::I64 = I64[R1 + 56];
           R1 = P64[R1 + 16];
           I64[Sp - 56] = _sbu8d::I64;
           P64[Sp - 48] = _sbu8e::P64;
           I64[Sp - 40] = _sbu8g::I64;
           I64[Sp - 32] = _sbu8h::I64;
           I64[Sp - 24] = _sbu8i::I64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubvov; else goto cbvoh;
       ubvov: // global
           call _cbvog(R1) args: 0, res: 0, upd: 0;
       cbvoh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbu9R_info" {
     sat_sbu9R_info:
         const sat_sbu9R_entry;
         const 17179869186;
         const 15;
 },
 _cbvog() //  [R1]
         { []
         }
     {offset
       cbvog: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvou; else goto cbvot;
       cbvou: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbvot: // global
           _sbu9Q::I64 = I64[Sp + 32] + I64[R1 + 7];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = GHC.IO.Buffer.ReadBuffer_closure+1;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = _sbu9Q::I64;
           I64[Hp] = I64[Sp + 40];
           R1 = Hp - 47;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvog_info" {
     block_cbvog_info:
         const _cbvog;
         const 1861;
         const 30;
 },
 sat_sbuak_entry() //  [R1, R2]
         { []
         }
     {offset
       cbvow: // global
           if ((Sp + -144) < SpLim) (likely: False) goto cbvox; else goto cbvoy;
       cbvox: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvoy: // global
           I64[Sp - 40] = block_cbvmf_info;
           _sbu7J::P64 = P64[R1 + 6];
           _sbu7K::P64 = P64[R1 + 14];
           _sbu7M::P64 = P64[R1 + 22];
           _sbu7O::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 32] = _sbu7J::P64;
           P64[Sp - 24] = _sbu7K::P64;
           P64[Sp - 16] = _sbu7M::P64;
           P64[Sp - 8] = _sbu7O::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubvrp; else goto cbvmg;
       ubvrp: // global
           call _cbvmf(R1) args: 0, res: 0, upd: 0;
       cbvmg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuak_info" {
     sat_sbuak_info:
         const sat_sbuak_entry;
         const 4;
         const 4294967304;
         const 8589934597;
         const SbuCr_srt+416;
 },
 _cbvmf() //  [R1]
         { []
         }
     {offset
       cbvmf: // global
           I64[Sp - 64] = block_cbvmk_info;
           _sbu7S::P64 = R1;
           _sbu7T::P64 = P64[R1 + 7];
           _sbu7U::P64 = P64[R1 + 15];
           _sbu7W::P64 = P64[R1 + 31];
           _sbu7Y::P64 = P64[R1 + 47];
           _sbu80::P64 = P64[R1 + 63];
           _sbu81::P64 = P64[R1 + 71];
           _sbu84::P64 = P64[R1 + 95];
           R1 = P64[_sbu81::P64 + 8];
           P64[Sp - 56] = _sbu7T::P64;
           P64[Sp - 48] = _sbu7U::P64;
           P64[Sp - 40] = _sbu7W::P64;
           P64[Sp - 32] = _sbu7Y::P64;
           P64[Sp - 24] = _sbu80::P64;
           P64[Sp - 16] = _sbu81::P64;
           P64[Sp - 8] = _sbu84::P64;
           P64[Sp] = _sbu7S::P64;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto ubvra; else goto cbvml;
       ubvra: // global
           call _cbvmk(R1) args: 0, res: 0, upd: 0;
       cbvml: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvmf_info" {
     block_cbvmf_info:
         const _cbvmf;
         const 4;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvmk() //  [R1]
         { []
         }
     {offset
       cbvmk: // global
           I64[Sp - 40] = block_cbvmp_info;
           _sbu8e::P64 = P64[R1 + 7];
           _sbu8d::I64 = I64[R1 + 23];
           _sbu8g::I64 = I64[R1 + 31];
           _sbu8h::I64 = I64[R1 + 39];
           _sbu8i::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _sbu8e::P64;
           I64[Sp - 24] = _sbu8g::I64;
           I64[Sp - 16] = _sbu8h::I64;
           I64[Sp - 8] = _sbu8i::I64;
           I64[Sp] = _sbu8d::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubvrb; else goto cbvmq;
       ubvrb: // global
           call _cbvmp(R1) args: 0, res: 0, upd: 0;
       cbvmq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvmk_info" {
     block_cbvmk_info:
         const _cbvmk;
         const 12;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvmp() //  [R1]
         { []
         }
     {offset
       cbvmp: // global
           if (R1 & 7 == 1) goto cbvpQ; else goto cbvql;
       cbvpQ: // global
           I64[Sp] = block_cbvnH_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto ubvrc; else goto cbvnI;
       ubvrc: // global
           call _cbvnH(R1) args: 0, res: 0, upd: 0;
       cbvnI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvql: // global
           _sbu9W::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 40] = block_cbvqj_info;
           R1 = _sbu9W::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto ubvrd; else goto cbvqm;
       ubvrd: // global
           call _cbvqj(R1) args: 0, res: 0, upd: 0;
       cbvqm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvmp_info" {
     block_cbvmp_info:
         const _cbvmp;
         const 1937;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvnH() //  [R1]
         { []
         }
     {offset
       cbvnH: // global
           if (R1 & 7 == 2) goto cbvpW; else goto ubvr6;
       cbvpW: // global
           I64[Sp] = block_cbvnN_info;
           R1 = P64[Sp + 96];
           if (R1 & 7 != 0) goto ubvrj; else goto cbvnO;
       ubvrj: // global
           call _cbvnN(R1) args: 0, res: 0, upd: 0;
       cbvnO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubvr6: // global
           Sp = Sp + 48;
           call _sbu8k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvnH_info" {
     block_cbvnH_info:
         const _cbvnH;
         const 6033;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvnN() //  [R1]
         { []
         }
     {offset
       cbvnN: // global
           if (R1 & 7 == 1) goto cbvpZ; else goto ubvr7;
       cbvpZ: // global
           I64[Sp] = block_cbvnS_info;
           R1 = P64[Sp + 136];
           if (R1 & 7 != 0) goto ubvrl; else goto cbvnT;
       ubvrl: // global
           call _cbvnS(R1) args: 0, res: 0, upd: 0;
       cbvnT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubvr7: // global
           Sp = Sp + 48;
           call _sbu8k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvnN_info" {
     block_cbvnN_info:
         const _cbvnN;
         const 6033;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvnS() //  [R1]
         { []
         }
     {offset
       cbvnS: // global
           if (I64[R1 + 7] == 1) goto cbvq3; else goto ubvr8;
       cbvq3: // global
           _sbu9L::I64 = I64[Sp + 32] - I64[Sp + 24];
           I64[Sp] = block_cbvo3_info;
           R2 = _sbu9L::I64;
           call GHC.Integer.Type.smallInteger_entry(R2) args: 8, res: 8, upd: 8;
       ubvr8: // global
           Sp = Sp + 48;
           call _sbu8k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvnS_info" {
     block_cbvnS_info:
         const _cbvnS;
         const 4200337;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvo3() //  [R1]
         { []
         }
     {offset
       cbvo3: // global
           I64[Sp] = block_cbvo7_info;
           R3 = R1;
           R2 = P64[Sp + 120];
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvo3_info" {
     block_cbvo3_info:
         const _cbvo3;
         const 4200337;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvo7() //  [R1]
         { []
         }
     {offset
       cbvo7: // global
           if (R1 == 1) goto cbvq9; else goto ubvr9;
       cbvq9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbvqc; else goto cbvqb;
       cbvqc: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbvqb: // global
           I64[Hp - 56] = sat_sbu9R_info;
           P64[Hp - 40] = P64[Sp + 128];
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 32];
           _sbu81::P64 = P64[Sp + 88];
           call MO_WriteBarrier();
           P64[_sbu81::P64 + 8] = Hp - 56;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu81::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ubvr9: // global
           Sp = Sp + 48;
           call _sbu8k() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvo7_info" {
     block_cbvo7_info:
         const _cbvo7;
         const 4200337;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _sbu8k() //  []
         { []
         }
     {offset
       sbu8k: // global
           _sbu8n::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp - 8] = block_cbvmz_info;
           R1 = _sbu8n::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvrv; else goto cbvmA;
       ubvrv: // global
           call _cbvmz(R1) args: 0, res: 0, upd: 0;
       cbvmA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbvmz() //  [R1]
         { []
         }
     {offset
       cbvmz: // global
           I64[Sp] = block_cbvmE_info;
           _sbu8t::I64 = I64[R1 + 39];
           _sbu8u::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp + 88] = _sbu8u::I64;
           I64[Sp + 96] = _sbu8t::I64;
           if (R1 & 7 != 0) goto ubvre; else goto cbvmF;
       ubvre: // global
           call _cbvmE(R1) args: 0, res: 0, upd: 0;
       cbvmF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvmz_info" {
     block_cbvmz_info:
         const _cbvmz;
         const 196748;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvmE() //  [R1]
         { []
         }
     {offset
       cbvmE: // global
           _sbu7S::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto cbvpH; else goto cbvpM;
       cbvpH: // global
           if (I64[Sp + 96] == I64[Sp + 88]) goto cbvpD; else goto cbvoG;
       cbvpD: // global
           I64[Sp] = block_cbvpC_info;
           R2 = _sbu7S::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
       cbvoG: // global
           _sbu8z::P64 = P64[P64[Sp + 40] + 8];
           I64[Sp] = block_cbvmM_info;
           R1 = _sbu8z::P64;
           if (R1 & 7 != 0) goto ubvrf; else goto cbvmN;
       ubvrf: // global
           call _cbvmM(R1) args: 0, res: 0, upd: 0;
       cbvmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvpM: // global
           I64[Sp] = block_cbvpK_info;
           R2 = _sbu7S::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvmE_info" {
     block_cbvmE_info:
         const _cbvmE;
         const 196748;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvpC() //  []
         { []
         }
     {offset
       cbvpC: // global
           R2 = P64[Sp + 8];
           _sbu7J::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbu7K::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbu7J::P64;
           P64[Sp + 96] = _sbu7K::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvpC_info" {
     block_cbvpC_info:
         const _cbvpC;
         const 212620;
         const 30;
 },
 _cbvmM() //  [R1]
         { []
         }
     {offset
       cbvmM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvoJ; else goto cbvoI;
       cbvoJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvoI: // global
           _sbu81::P64 = P64[Sp + 48];
           _sbu8B::P64 = P64[R1 + 7];
           _sbu8C::P64 = P64[R1 + 15];
           _sbu8F::P64 = P64[_sbu81::P64 + 8];
           I64[Hp - 16] = sat_sbu8N_info;
           P64[Hp] = _sbu8F::P64;
           call MO_WriteBarrier();
           P64[_sbu81::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu81::P64);
           I64[Sp] = block_cbvnb_info;
           R1 = _sbu8F::P64;
           P64[Sp + 88] = _sbu8C::P64;
           P64[Sp + 96] = _sbu8B::P64;
           if (R1 & 7 != 0) goto ubvrg; else goto cbvnc;
       ubvrg: // global
           call _cbvnb(R1) args: 0, res: 0, upd: 0;
       cbvnc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvmM_info" {
     block_cbvmM_info:
         const _cbvmM;
         const 197772;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvnb() //  [R1]
         { []
         }
     {offset
       cbvnb: // global
           _sbu8W::I64 = I64[R1 + 39];
           if (_sbu8W::I64 != 0) goto cbvoM; else goto cbvpy;
       cbvoM: // global
           I64[Sp] = block_cbvni_info;
           _sbu8R::P64 = P64[R1 + 7];
           _sbu8S::P64 = P64[R1 + 15];
           _sbu8Q::I64 = I64[R1 + 23];
           R1 = P64[Sp + 56];
           I64[Sp + 16] = _sbu8W::I64;
           P64[Sp + 40] = _sbu8S::P64;
           P64[Sp + 48] = _sbu8R::P64;
           I64[Sp + 56] = _sbu8Q::I64;
           if (R1 & 7 != 0) goto ubvrh; else goto cbvnj;
       ubvrh: // global
           call _cbvni(R1) args: 0, res: 0, upd: 0;
       cbvnj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvpy: // global
           _sbu7S::P64 = P64[Sp + 64];
           _sbu7Y::P64 = P64[Sp + 32];
           _sbu8C::P64 = P64[Sp + 88];
           call MO_WriteBarrier();
           P64[_sbu7Y::P64 + 8] = _sbu8C::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu7Y::P64);
           I64[Sp] = block_cbvpx_info;
           R2 = _sbu7S::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvnb_info" {
     block_cbvnb_info:
         const _cbvnb;
         const 3212;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvni() //  [R1]
         { []
         }
     {offset
       cbvni: // global
           if (R1 & 7 == 1) goto cbvoS; else goto cbvpk;
       cbvoS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbvoV; else goto cbvoU;
       cbvoV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvoU: // global
           I64[Hp - 24] = sat_sbu96_info;
           P64[Hp - 8] = P64[Sp + 88];
           I64[Hp] = I64[Sp + 16];
           _sbu7S::P64 = P64[Sp + 64];
           _sbu7Y::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sbu7Y::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu7Y::P64);
           I64[Sp] = block_cbvoQ_info;
           R2 = _sbu7S::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
       cbvpk: // global
           I64[Sp] = block_cbvp0_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubvri; else goto cbvp1;
       ubvri: // global
           call _cbvp0(R1) args: 0, res: 0, upd: 0;
       cbvp1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvni_info" {
     block_cbvni_info:
         const _cbvni;
         const 4236;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvoQ() //  []
         { []
         }
     {offset
       cbvoQ: // global
           R2 = P64[Sp + 8];
           _sbu7J::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbu7K::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbu7J::P64;
           P64[Sp + 96] = _sbu7K::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvoQ_info" {
     block_cbvoQ_info:
         const _cbvoQ;
         const 212620;
         const 30;
 },
 _cbvp0() //  [R1]
         { []
         }
     {offset
       cbvp0: // global
           I64[Sp - 8] = block_cbvp5_info;
           R2 = P64[Sp + 96];
           _sbu9d::P64 = P64[R1 + 7];
           _sbu9e::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbu9e::P64;
           P64[Sp + 96] = _sbu9d::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvp0_info" {
     block_cbvp0_info:
         const _cbvp0;
         const 4236;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvp5() //  [R1]
         { []
         }
     {offset
       cbvp5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvpo; else goto cbvpn;
       cbvpo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvpn: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 56];
           P64[Hp - 32] = P64[Sp + 48];
           I64[Hp - 24] = I64[Sp + 64];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sbu9e::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbvp8_info;
           R5 = Hp - 47;
           R4 = P64[Sp + 96];
           R3 = _sbu9e::P64;
           R2 = P64[Sp + 104];
           Sp = Sp + 8;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvp5_info" {
     block_cbvp5_info:
         const _cbvp5;
         const 8461;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvp8() //  [R1]
         { []
         }
     {offset
       cbvp8: // global
           I64[Sp] = block_cbvpa_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvrq; else goto cbvpb;
       ubvrq: // global
           call _cbvpa(R1) args: 0, res: 0, upd: 0;
       cbvpb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvp8_info" {
     block_cbvp8_info:
         const _cbvp8;
         const 203916;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvpa() //  [R1]
         { []
         }
     {offset
       cbvpa: // global
           _sbu7S::P64 = P64[Sp + 64];
           _sbu7Y::P64 = P64[Sp + 32];
           _sbu9q::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbu7Y::P64 + 8] = _sbu9q::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu7Y::P64);
           I64[Sp] = block_cbvpi_info;
           R2 = _sbu7S::P64;
           call GHC.IO.Handle.Internals.flushBuffer2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvpa_info" {
     block_cbvpa_info:
         const _cbvpa;
         const 203916;
         const 4294967326;
         const SbuCr_srt+416;
 },
 _cbvpi() //  []
         { []
         }
     {offset
       cbvpi: // global
           R2 = P64[Sp + 8];
           _sbu7J::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbu7K::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbu7J::P64;
           P64[Sp + 96] = _sbu7K::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvpi_info" {
     block_cbvpi_info:
         const _cbvpi;
         const 212620;
         const 30;
 },
 _cbvpx() //  []
         { []
         }
     {offset
       cbvpx: // global
           R2 = P64[Sp + 8];
           _sbu7J::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbu7K::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbu7J::P64;
           P64[Sp + 96] = _sbu7K::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvpx_info" {
     block_cbvpx_info:
         const _cbvpx;
         const 212620;
         const 30;
 },
 _cbvpK() //  []
         { []
         }
     {offset
       cbvpK: // global
           R2 = P64[Sp + 8];
           _sbu7J::P64 = P64[Sp + 72];
           I64[Sp + 72] = stg_ap_pppv_info;
           _sbu7K::P64 = P64[Sp + 80];
           P64[Sp + 80] = P64[Sp + 24];
           P64[Sp + 88] = _sbu7J::P64;
           P64[Sp + 96] = _sbu7K::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvpK_info" {
     block_cbvpK_info:
         const _cbvpK;
         const 212620;
         const 30;
 },
 _cbvqj() //  [R1]
         { []
         }
     {offset
       cbvqj: // global
           I64[Sp] = block_cbvqq_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubvrr; else goto cbvqs;
       ubvrr: // global
           call _cbvqq(R1) args: 0, res: 0, upd: 0;
       cbvqs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvqj_info" {
     block_cbvqj_info:
         const _cbvqj;
         const 211980;
         const 30;
 },
 _cbvqq() //  [R1]
         { []
         }
     {offset
       cbvqq: // global
           if (R1 & 7 == 1) goto ubvr4; else goto cbvqD;
       ubvr4: // global
           Sp = Sp + 8;
           call _cbvqR() args: 0, res: 0, upd: 0;
       cbvqD: // global
           _sbua7::P64 = P64[P64[Sp + 32] + 8];
           I64[Sp] = block_cbvqB_info;
           R1 = _sbua7::P64;
           if (R1 & 7 != 0) goto ubvrs; else goto cbvqE;
       ubvrs: // global
           call _cbvqB(R1) args: 0, res: 0, upd: 0;
       cbvqE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvqq_info" {
     block_cbvqq_info:
         const _cbvqq;
         const 211980;
         const 30;
 },
 _cbvqB() //  [R1]
         { []
         }
     {offset
       cbvqB: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubvr5; else goto cbvqO;
       ubvr5: // global
           Sp = Sp + 8;
           call _cbvqR() args: 0, res: 0, upd: 0;
       cbvqO: // global
           I64[Sp] = block_cbvqM_info;
           R2 = P64[Sp + 16];
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = P64[Sp + 24];
           P64[Sp - 8] = R1;
           Sp = Sp - 24;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvqB_info" {
     block_cbvqB_info:
         const _cbvqB;
         const 211980;
         const 30;
 },
 _cbvqR() //  []
         { []
         }
     {offset
       cbvqR: // global
           R2 = P64[Sp];
           _sbu7J::P64 = P64[Sp + 64];
           I64[Sp + 64] = stg_ap_pppv_info;
           _sbu7K::P64 = P64[Sp + 72];
           P64[Sp + 72] = P64[Sp + 16];
           P64[Sp + 80] = _sbu7J::P64;
           P64[Sp + 88] = _sbu7K::P64;
           Sp = Sp + 64;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 _cbvqM() //  [R1]
         { []
         }
     {offset
       cbvqM: // global
           _sbu7J::P64 = P64[Sp + 72];
           _sbu7K::P64 = P64[Sp + 80];
           _sbu7T::P64 = P64[Sp + 8];
           _sbu7W::P64 = P64[Sp + 24];
           _sbu7Y::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[_sbu7Y::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbu7Y::P64);
           R2 = _sbu7T::P64;
           I64[Sp + 72] = stg_ap_pppv_info;
           P64[Sp + 80] = _sbu7W::P64;
           P64[Sp + 88] = _sbu7J::P64;
           P64[Sp + 96] = _sbu7K::P64;
           Sp = Sp + 72;
           call GHC.IO.Device.seek_entry(R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvqM_info" {
     block_cbvqM_info:
         const _cbvqM;
         const 212108;
         const 30;
 },
 GHC.IO.Handle.hSeek1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbvrw: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cbvrA; else goto cbvrz;
       cbvrA: // global
           HpAlloc = 88;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSeek1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbvrz: // global
           I64[Hp - 80] = lvl48_sbu7M_info;
           P64[Hp - 64] = R4;
           I64[Hp - 56] = lvl49_sbu7O_info;
           P64[Hp - 40] = R4;
           I64[Hp - 32] = sat_sbuak_info;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = Hp - 80;
           P64[Hp] = Hp - 56;
           R4 = Hp - 30;
           R3 = R2;
           R2 = lvl13_rbnWV_closure;
           call GHC.IO.Handle.Internals.wantSeekableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSeek1_info" {
     GHC.IO.Handle.hSeek1_info:
         const GHC.IO.Handle.hSeek1_entry;
         const 0;
         const 519691042830;
         const 17179869207;
         const SbuCr_srt+384;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.547539291 UTC

[section ""data" . GHC.IO.Handle.hSeek_closure" {
     GHC.IO.Handle.hSeek_closure:
         const GHC.IO.Handle.hSeek_info;
         const 0;
 },
 GHC.IO.Handle.hSeek_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbvvW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSeek1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSeek_info" {
     GHC.IO.Handle.hSeek_info:
         const GHC.IO.Handle.hSeek_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SbuCr_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.551439547 UTC

[section ""data" . GHC.IO.Handle.hSetPosn1_closure" {
     GHC.IO.Handle.hSetPosn1_closure:
         const GHC.IO.Handle.hSetPosn1_info;
         const 0;
 },
 GHC.IO.Handle.hSetPosn1_entry() //  [R2]
         { []
         }
     {offset
       cbvwa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbvwb; else goto cbvwc;
       cbvwb: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hSetPosn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvwc: // global
           I64[Sp - 8] = block_cbvw7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvwg; else goto cbvw8;
       ubvwg: // global
           call _cbvw7(R1) args: 0, res: 0, upd: 0;
       cbvw8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetPosn1_info" {
     GHC.IO.Handle.hSetPosn1_info:
         const GHC.IO.Handle.hSetPosn1_entry;
         const 0;
         const 21474836494;
         const 8589934597;
         const SbuCr_srt+424;
 },
 _cbvw7() //  [R1]
         { []
         }
     {offset
       cbvw7: // global
           R4 = P64[R1 + 15];
           R3 = GHC.IO.Device.AbsoluteSeek_closure+1;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.hSeek1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvw7_info" {
     block_cbvw7_info:
         const _cbvw7;
         const 0;
         const 4294967326;
         const SbuCr_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.557110232 UTC

[section ""data" . GHC.IO.Handle.hSetPosn_closure" {
     GHC.IO.Handle.hSetPosn_closure:
         const GHC.IO.Handle.hSetPosn_info;
         const 0;
 },
 GHC.IO.Handle.hSetPosn_entry() //  [R2]
         { []
         }
     {offset
       cbvww: // global
           R2 = R2;
           call GHC.IO.Handle.hSetPosn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetPosn_info" {
     GHC.IO.Handle.hSetPosn_info:
         const GHC.IO.Handle.hSetPosn_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.560274878 UTC

[section ""cstring" . GHC.IO.Handle.hGetEncoding4_bytes" {
     GHC.IO.Handle.hGetEncoding4_bytes:
         I8[] [104,71,101,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.562983202 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding3_closure" {
     GHC.IO.Handle.hGetEncoding3_closure:
         const GHC.IO.Handle.hGetEncoding3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetEncoding3_entry() //  [R1]
         { []
         }
     {offset
       cbvwK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvwL; else goto cbvwM;
       cbvwL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvwM: // global
           (_cbvwH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvwH::I64 == 0) goto cbvwJ; else goto cbvwI;
       cbvwJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvwI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvwH::I64;
           R2 = GHC.IO.Handle.hGetEncoding4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding3_info" {
     GHC.IO.Handle.hGetEncoding3_info:
         const GHC.IO.Handle.hGetEncoding3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.567417642 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding2_closure" {
     GHC.IO.Handle.hGetEncoding2_closure:
         const GHC.IO.Handle.hGetEncoding2_info;
 },
 GHC.IO.Handle.hGetEncoding2_entry() //  [R2]
         { []
         }
     {offset
       cbvx2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbvx6; else goto cbvx7;
       cbvx6: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEncoding2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvx7: // global
           I64[Sp - 8] = block_cbvwZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvxb; else goto cbvx0;
       ubvxb: // global
           call _cbvwZ(R1) args: 0, res: 0, upd: 0;
       cbvx0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding2_info" {
     GHC.IO.Handle.hGetEncoding2_info:
         const GHC.IO.Handle.hGetEncoding2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbvwZ() //  [R1]
         { []
         }
     {offset
       cbvwZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvxa; else goto cbvx9;
       cbvxa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvx9: // global
           _sbuaF::P64 = P64[R1 + 103];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = _sbuaF::P64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvwZ_info" {
     block_cbvwZ_info:
         const _cbvwZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.576323385 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding1_closure" {
     GHC.IO.Handle.hGetEncoding1_closure:
         const GHC.IO.Handle.hGetEncoding1_info;
         const 0;
 },
 io_sbuaS_entry() //  [R1]
         { []
         }
     {offset
       cbvxJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvxN; else goto cbvxO;
       cbvxN: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbvxO: // global
           I64[Sp - 16] = block_cbvxE_info;
           _sbuaO::P64 = P64[R1 + 15];
           R5 = _sbuaO::P64;
           R4 = GHC.IO.Handle.hGetEncoding2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEncoding3_closure;
           P64[Sp - 8] = _sbuaO::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuaS_info" {
     io_sbuaS_info:
         const io_sbuaS_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SbuCr_srt+448;
 },
 _cbvxE() //  [R1]
         { []
         }
     {offset
       cbvxE: // global
           I64[Sp] = block_cbvxG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvxT; else goto cbvxH;
       ubvxT: // global
           call _cbvxG(R1) args: 0, res: 0, upd: 0;
       cbvxH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvxE_info" {
     block_cbvxE_info:
         const _cbvxE;
         const 1;
         const 30;
 },
 _cbvxG() //  [R1]
         { []
         }
     {offset
       cbvxG: // global
           I64[Sp] = block_cbvxM_info;
           R2 = P64[R1 + 7];
           _sbuaZ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuaZ::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvxG_info" {
     block_cbvxG_info:
         const _cbvxG;
         const 1;
         const 30;
 },
 _cbvxM() //  []
         { []
         }
     {offset
       cbvxM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvxM_info" {
     block_cbvxM_info:
         const _cbvxM;
         const 1;
         const 30;
 },
 io_sbub8_entry() //  [R1]
         { []
         }
     {offset
       cbvy8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvyc; else goto cbvyd;
       cbvyc: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbvyd: // global
           I64[Sp - 16] = block_cbvy3_info;
           _sbub3::P64 = P64[R1 + 15];
           R5 = _sbub3::P64;
           R4 = GHC.IO.Handle.hGetEncoding2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEncoding3_closure;
           P64[Sp - 8] = _sbub3::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbub8_info" {
     io_sbub8_info:
         const io_sbub8_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SbuCr_srt+448;
 },
 _cbvy3() //  [R1]
         { []
         }
     {offset
       cbvy3: // global
           I64[Sp] = block_cbvy5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvyi; else goto cbvy6;
       ubvyi: // global
           call _cbvy5(R1) args: 0, res: 0, upd: 0;
       cbvy6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvy3_info" {
     block_cbvy3_info:
         const _cbvy3;
         const 1;
         const 30;
 },
 _cbvy5() //  [R1]
         { []
         }
     {offset
       cbvy5: // global
           I64[Sp] = block_cbvyb_info;
           R2 = P64[R1 + 7];
           _sbubf::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbubf::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvy5_info" {
     block_cbvy5_info:
         const _cbvy5;
         const 1;
         const 30;
 },
 _cbvyb() //  []
         { []
         }
     {offset
       cbvyb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvyb_info" {
     block_cbvyb_info:
         const _cbvyb;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hGetEncoding1_entry() //  [R2]
         { []
         }
     {offset
       cbvyn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvyo; else goto cbvyp;
       cbvyo: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEncoding1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvyp: // global
           I64[Sp - 8] = block_cbvxs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvyG; else goto cbvxt;
       ubvyG: // global
           call _cbvxs(R1) args: 0, res: 0, upd: 0;
       cbvxt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding1_info" {
     GHC.IO.Handle.hGetEncoding1_info:
         const GHC.IO.Handle.hGetEncoding1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SbuCr_srt+448;
 },
 _cbvxs() //  [R1]
         { []
         }
     {offset
       cbvxs: // global
           if (R1 & 7 == 1) goto cbvyk; else goto cbvyl;
       cbvyk: // global
           I64[Sp - 16] = block_cbvxx_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbvyl: // global
           I64[Sp - 16] = block_cbvxW_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvxs_info" {
     block_cbvxs_info:
         const _cbvxs;
         const 0;
         const 12884901918;
         const SbuCr_srt+448;
 },
 _cbvxx() //  [R1]
         { []
         }
     {offset
       cbvxx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvyt; else goto cbvys;
       cbvyt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbvys: // global
           I64[Hp - 16] = io_sbuaS_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbvxz::P64 = Hp - 15;
           if (R1 == 0) goto cbvyx; else goto cbvyw;
       cbvyx: // global
           R1 = _cbvxz::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbvyw: // global
           R1 = _cbvxz::P64;
           Sp = Sp + 24;
           call io_sbuaS_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvxx_info" {
     block_cbvxx_info:
         const _cbvxx;
         const 2;
         const 12884901918;
         const SbuCr_srt+448;
 },
 _cbvxW() //  [R1]
         { []
         }
     {offset
       cbvxW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvyB; else goto cbvyA;
       cbvyB: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbvyA: // global
           I64[Hp - 16] = io_sbub8_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbvxY::P64 = Hp - 15;
           if (R1 == 0) goto cbvyF; else goto cbvyE;
       cbvyF: // global
           R1 = _cbvxY::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbvyE: // global
           R1 = _cbvxY::P64;
           Sp = Sp + 24;
           call io_sbub8_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvxW_info" {
     block_cbvxW_info:
         const _cbvxW;
         const 2;
         const 12884901918;
         const SbuCr_srt+448;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.598282095 UTC

[section ""data" . GHC.IO.Handle.hGetEncoding_closure" {
     GHC.IO.Handle.hGetEncoding_closure:
         const GHC.IO.Handle.hGetEncoding_info;
         const 0;
 },
 GHC.IO.Handle.hGetEncoding_entry() //  [R2]
         { []
         }
     {offset
       cbvzN: // global
           R2 = R2;
           call GHC.IO.Handle.hGetEncoding1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEncoding_info" {
     GHC.IO.Handle.hGetEncoding_info:
         const GHC.IO.Handle.hGetEncoding_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+464;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.601186487 UTC

[section ""cstring" . lvl15_rbnWX_bytes" {
     lvl15_rbnWX_bytes:
         I8[] [104,83,101,116,69,110,99,111,100,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.60351015 UTC

[section ""data" . lvl16_rbnWY_closure" {
     lvl16_rbnWY_closure:
         const lvl16_rbnWY_info;
         const 0;
         const 0;
         const 0;
 },
 lvl16_rbnWY_entry() //  [R1]
         { []
         }
     {offset
       cbvA1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvA2; else goto cbvA3;
       cbvA2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvA3: // global
           (_cbvzY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvzY::I64 == 0) goto cbvA0; else goto cbvzZ;
       cbvA0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvzZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvzY::I64;
           R2 = lvl15_rbnWX_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl16_rbnWY_info" {
     lvl16_rbnWY_info:
         const lvl16_rbnWY_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.607035229 UTC

[section ""cstring" . lvl17_rbnWZ_bytes" {
     lvl17_rbnWZ_bytes:
         I8[] [108,97,115,116,95,100,101,99,111,100,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.609416561 UTC

[section ""data" . lvl18_rbnX0_closure" {
     lvl18_rbnX0_closure:
         const lvl18_rbnX0_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_rbnX0_entry() //  [R1]
         { []
         }
     {offset
       cbvAl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvAm; else goto cbvAn;
       cbvAm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvAn: // global
           (_cbvAg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvAg::I64 == 0) goto cbvAi; else goto cbvAh;
       cbvAi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvAh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvAg::I64;
           I64[Sp - 24] = block_cbvAj_info;
           R2 = lvl17_rbnWZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_rbnX0_info" {
     lvl18_rbnX0_info:
         const lvl18_rbnX0_entry;
         const 0;
         const 4294967317;
         const SbuCr_srt+288;
 },
 _cbvAj() //  [R1]
         { []
         }
     {offset
       cbvAj: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvAj_info" {
     block_cbvAj_info:
         const _cbvAj;
         const 0;
         const 4294967326;
         const SbuCr_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.633405179 UTC

[section ""data" . GHC.IO.Handle.hSetEncoding1_closure" {
     GHC.IO.Handle.hSetEncoding1_closure:
         const GHC.IO.Handle.hSetEncoding1_info;
         const 0;
 },
 sat_sbudP_entry() //  [R1]
         { []
         }
     {offset
       cbvBt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbvBx; else goto cbvBy;
       cbvBx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvBy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbvBq_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubvBC; else goto cbvBr;
       ubvBC: // global
           call _cbvBq(R1) args: 0, res: 0, upd: 0;
       cbvBr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbudP_info" {
     sat_sbudP_info:
         const sat_sbudP_entry;
         const 1;
         const 16;
 },
 _cbvBq() //  [R1]
         { []
         }
     {offset
       cbvBq: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvBB; else goto cbvBA;
       cbvBB: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbvBA: // global
           _sbudK::P64 = P64[R1 + 7];
           _sbudL::P64 = P64[R1 + 15];
           _sbudJ::I64 = I64[R1 + 23];
           _sbudM::I64 = I64[R1 + 31];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbudK::P64;
           P64[Hp - 32] = _sbudL::P64;
           I64[Hp - 24] = _sbudJ::I64;
           I64[Hp - 16] = _sbudM::I64;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 47;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvBq_info" {
     block_cbvBq_info:
         const _cbvBq;
         const 0;
         const 30;
 },
 sat_sbue8_entry() //  [R1]
         { []
         }
     {offset
       cbvBZ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbvC6; else goto cbvC7;
       cbvC6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvC7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbvBW_info;
           _sbudY::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sbudY::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubvCb; else goto cbvBX;
       ubvCb: // global
           call _cbvBW(R1) args: 0, res: 0, upd: 0;
       cbvBX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbue8_info" {
     sat_sbue8_info:
         const sat_sbue8_entry;
         const 4294967297;
         const 19;
 },
 _cbvBW() //  [R1]
         { []
         }
     {offset
       cbvBW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvCa; else goto cbvC9;
       cbvCa: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbvC9: // global
           _sbue2::P64 = P64[R1 + 7];
           _sbue3::P64 = P64[R1 + 15];
           _sbue1::I64 = I64[R1 + 23];
           _sbue4::I64 = I64[R1 + 31];
           _sbue6::I64 = I64[R1 + 47];
           _sbue7::I64 = I64[R1 + 39] + I64[Sp + 8];
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = _sbue2::P64;
           P64[Hp - 32] = _sbue3::P64;
           I64[Hp - 24] = _sbue1::I64;
           I64[Hp - 16] = _sbue4::I64;
           I64[Hp - 8] = _sbue7::I64;
           I64[Hp] = _sbue6::I64;
           R1 = Hp - 47;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbvBW_info" {
     block_cbvBW_info:
         const _cbvBW;
         const 65;
         const 30;
 },
 sat_sbuev_entry() //  [R1, R2]
         { []
         }
     {offset
       cbvCc: // global
           if ((Sp + -192) < SpLim) (likely: False) goto cbvCd; else goto cbvCe;
       cbvCd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvCe: // global
           I64[Sp - 24] = block_cbvAN_info;
           _sbubk::P64 = P64[R1 + 6];
           _sbubm::P64 = P64[R1 + 14];
           R1 = R2;
           P64[Sp - 16] = _sbubk::P64;
           P64[Sp - 8] = _sbubm::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubvGJ; else goto cbvAO;
       ubvGJ: // global
           call _cbvAN(R1) args: 0, res: 0, upd: 0;
       cbvAO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuev_info" {
     sat_sbuev_info:
         const sat_sbuev_entry;
         const 2;
         const 18014402804449291;
         const 8589934597;
         const SbuCr_srt+296;
 },
 _cbvAN() //  [R1]
         { []
         }
     {offset
       cbvAN: // global
           I64[Sp - 120] = block_cbvAS_info;
           _sbubq::P64 = P64[R1 + 7];
           _sbubr::P64 = P64[R1 + 15];
           _sbubs::P64 = P64[R1 + 23];
           _sbubt::P64 = P64[R1 + 31];
           _sbubu::P64 = P64[R1 + 39];
           _sbubv::P64 = P64[R1 + 47];
           _sbubw::P64 = P64[R1 + 55];
           _sbubx::P64 = P64[R1 + 63];
           _sbuby::P64 = P64[R1 + 71];
           _sbubz::P64 = P64[R1 + 79];
           _sbubA::P64 = P64[R1 + 87];
           _sbubB::P64 = P64[R1 + 95];
           _sbubD::P64 = P64[R1 + 111];
           _sbubE::P64 = P64[R1 + 119];
           _sbubF::P64 = P64[R1 + 127];
           R1 = P64[_sbuby::P64 + 8];
           P64[Sp - 112] = _sbubr::P64;
           P64[Sp - 104] = _sbubs::P64;
           P64[Sp - 96] = _sbubt::P64;
           P64[Sp - 88] = _sbubu::P64;
           P64[Sp - 80] = _sbubv::P64;
           P64[Sp - 72] = _sbubw::P64;
           P64[Sp - 64] = _sbubx::P64;
           P64[Sp - 56] = _sbuby::P64;
           P64[Sp - 48] = _sbubz::P64;
           P64[Sp - 40] = _sbubA::P64;
           P64[Sp - 32] = _sbubB::P64;
           P64[Sp - 24] = _sbubD::P64;
           P64[Sp - 16] = _sbubE::P64;
           P64[Sp - 8] = _sbubF::P64;
           P64[Sp] = _sbubq::P64;
           Sp = Sp - 120;
           if (R1 & 7 != 0) goto ubvGw; else goto cbvAT;
       ubvGw: // global
           call _cbvAS(R1) args: 0, res: 0, upd: 0;
       cbvAT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvAN_info" {
     block_cbvAN_info:
         const _cbvAN;
         const 2;
         const 18014402804449310;
         const SbuCr_srt+296;
 },
 _cbvAS() //  [R1]
         { []
         }
     {offset
       cbvAS: // global
           I64[Sp - 16] = block_cbvAZ_info;
           _sbubO::I64 = I64[R1 + 39];
           _sbubP::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbubP::I64;
           I64[Sp] = _sbubO::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubvGx; else goto cbvB0;
       ubvGx: // global
           call _cbvAZ(R1) args: 0, res: 0, upd: 0;
       cbvB0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvAS_info" {
     block_cbvAS_info:
         const _cbvAS;
         const 17;
         const 18014402804449310;
         const SbuCr_srt+296;
 },
 _cbvAZ() //  [R1]
         { []
         }
     {offset
       cbvAZ: // global
           if (R1 & 7 == 1) goto cbvF0; else goto cbvFV;
       cbvF0: // global
           _sbudp::P64 = P64[P64[Sp + 80] + 8];
           I64[Sp + 16] = block_cbvB4_info;
           R1 = _sbudp::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubvGy; else goto cbvB5;
       ubvGy: // global
           call _cbvB4(R1) args: 0, res: 0, upd: 0;
       cbvB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvFV: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubvGj; else goto cbvFT;
       ubvGj: // global
           Sp = Sp + 24;
           call _sbubQ() args: 0, res: 0, upd: 0;
       cbvFT: // global
           R1 = GHC.IO.Handle.Internals.flushCharBuffer2_closure;
           Sp = Sp + 160;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvAZ_info" {
     block_cbvAZ_info:
         const _cbvAZ;
         const 211;
         const 18014402804449310;
         const SbuCr_srt+296;
 },
 _cbvB4() //  [R1]
         { []
         }
     {offset
       cbvB4: // global
           I64[Sp - 16] = block_cbvB9_info;
           _sbudv::I64 = I64[R1 + 39];
           _sbudw::I64 = I64[R1 + 47];
           R1 = P64[R1 + 15];
           I64[Sp - 8] = _sbudw::I64;
           I64[Sp] = _sbudv::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubvGA; else goto cbvBa;
       ubvGA: // global
           call _cbvB9(R1) args: 0, res: 0, upd: 0;
       cbvBa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvB4_info" {
     block_cbvB4_info:
         const _cbvB4;
         const 17;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvB9() //  [R1]
         { []
         }
     {offset
       cbvB9: // global
           if (R1 & 7 == 1) goto cbvFI; else goto ubvGk;
       cbvFI: // global
           if (I64[Sp + 16] == I64[Sp + 8]) goto ubvGl; else goto cbvF4;
       ubvGl: // global
           Sp = Sp + 24;
           goto ubvGD;
       cbvF4: // global
           _sbudB::P64 = P64[P64[Sp + 72] + 8];
           I64[Sp + 16] = block_cbvBh_info;
           R1 = _sbudB::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto ubvGB; else goto cbvBi;
       ubvGB: // global
           call _cbvBh(R1) args: 0, res: 0, upd: 0;
       cbvBi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubvGk: // global
           Sp = Sp + 24;
           goto ubvGD;
       ubvGD: // global
           call _sbubQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvB9_info" {
     block_cbvB9_info:
         const _cbvB9;
         const 211;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvBh() //  [R1]
         { []
         }
     {offset
       cbvBh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvF7; else goto cbvF6;
       cbvF7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvF6: // global
           _sbuby::P64 = P64[Sp + 64];
           _sbudD::P64 = P64[R1 + 7];
           _sbudE::P64 = P64[R1 + 15];
           _sbudH::P64 = P64[_sbuby::P64 + 8];
           I64[Hp - 16] = sat_sbudP_info;
           P64[Hp] = _sbudH::P64;
           call MO_WriteBarrier();
           P64[_sbuby::P64 + 8] = Hp - 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbuby::P64);
           I64[Sp - 8] = block_cbvBG_info;
           R1 = _sbudH::P64;
           P64[Sp] = _sbudE::P64;
           P64[Sp + 56] = _sbudD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvGE; else goto cbvBH;
       ubvGE: // global
           call _cbvBG(R1) args: 0, res: 0, upd: 0;
       cbvBH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvBh_info" {
     block_cbvBh_info:
         const _cbvBh;
         const 4113;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvBG() //  [R1]
         { []
         }
     {offset
       cbvBG: // global
           _sbudY::I64 = I64[R1 + 39];
           if (_sbudY::I64 != 0) goto cbvFa; else goto cbvFF;
       cbvFa: // global
           I64[Sp - 32] = block_cbvBN_info;
           _sbudT::P64 = P64[R1 + 7];
           _sbudU::P64 = P64[R1 + 15];
           _sbudS::I64 = I64[R1 + 23];
           R1 = P64[Sp + 96];
           P64[Sp - 24] = _sbudT::P64;
           P64[Sp - 16] = _sbudU::P64;
           I64[Sp - 8] = _sbudY::I64;
           I64[Sp] = _sbudS::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubvGF; else goto cbvBO;
       ubvGF: // global
           call _cbvBN(R1) args: 0, res: 0, upd: 0;
       cbvBO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvFF: // global
           _sbubv::P64 = P64[Sp + 48];
           _sbudE::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbubv::P64 + 8] = _sbudE::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbubv::P64);
           Sp = Sp + 16;
           call _sbubQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvBG_info" {
     block_cbvBG_info:
         const _cbvBG;
         const 18;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvBN() //  [R1]
         { []
         }
     {offset
       cbvBN: // global
           if (R1 & 7 == 1) goto cbvFc; else goto cbvFu;
       cbvFc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbvFf; else goto cbvFe;
       cbvFf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvFe: // global
           I64[Hp - 24] = sat_sbue8_info;
           P64[Hp - 8] = P64[Sp + 40];
           I64[Hp] = I64[Sp + 24];
           _sbubv::P64 = P64[Sp + 80];
           call MO_WriteBarrier();
           P64[_sbubv::P64 + 8] = Hp - 24;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbubv::P64);
           Sp = Sp + 48;
           call _sbubQ() args: 0, res: 0, upd: 0;
       cbvFu: // global
           I64[Sp] = block_cbvFi_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubvGH; else goto cbvFj;
       ubvGH: // global
           call _cbvFi(R1) args: 0, res: 0, upd: 0;
       cbvFj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvBN_info" {
     block_cbvBN_info:
         const _cbvBN;
         const 790;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvFi() //  [R1]
         { []
         }
     {offset
       cbvFi: // global
           I64[Sp - 8] = block_cbvFn_info;
           R2 = P64[Sp + 96];
           _sbuec::P64 = P64[R1 + 7];
           _sbued::P64 = P64[R1 + 15];
           R1 = P64[R1 + 39];
           P64[Sp] = _sbued::P64;
           P64[Sp + 96] = _sbuec::P64;
           Sp = Sp - 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvFi_info" {
     block_cbvFi_info:
         const _cbvFi;
         const 790;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvFn() //  [R1]
         { []
         }
     {offset
       cbvFn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbvFy; else goto cbvFx;
       cbvFy: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvFx: // global
           I64[Hp - 48] = GHC.IO.Buffer.Buffer_con_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 24];
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 32];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           _sbudE::P64 = P64[Sp + 48];
           I64[Sp + 48] = block_cbvFq_info;
           R5 = Hp - 47;
           R4 = _sbudE::P64;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 104];
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.$wstreamEncode_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvFn_info" {
     block_cbvFn_info:
         const _cbvFn;
         const 1559;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvFq() //  [R1]
         { []
         }
     {offset
       cbvFq: // global
           I64[Sp] = block_cbvFs_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvGX; else goto cbvFA;
       ubvGX: // global
           call _cbvFs(R1) args: 0, res: 0, upd: 0;
       cbvFA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvFq_info" {
     block_cbvFq_info:
         const _cbvFq;
         const 4113;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvFs() //  [R1]
         { []
         }
     {offset
       cbvFs: // global
           _sbubv::P64 = P64[Sp + 40];
           _sbuep::P64 = P64[R1 + 7];
           call MO_WriteBarrier();
           P64[_sbubv::P64 + 8] = _sbuep::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbubv::P64);
           Sp = Sp + 8;
           call _sbubQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvFs_info" {
     block_cbvFs_info:
         const _cbvFs;
         const 4113;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _sbubQ() //  []
         { []
         }
     {offset
       sbubQ: // global
           I64[Sp - 8] = block_cbvCm_info;
           R1 = P64[Sp + 80];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvGZ; else goto cbvDY;
       ubvGZ: // global
           call _cbvCm(R1) args: 0, res: 0, upd: 0;
       cbvDY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbvCm() //  [R1]
         { []
         }
     {offset
       cbvCm: // global
           if (R1 & 7 == 1) goto cbvE5; else goto cbvEu;
       cbvE5: // global
           I64[Sp] = block_cbvE2_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubvGK; else goto cbvE6;
       ubvGK: // global
           call _cbvE2(R1) args: 0, res: 0, upd: 0;
       cbvE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvEu: // global
           I64[Sp] = block_cbvEs_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubvGL; else goto cbvEv;
       ubvGL: // global
           call _cbvEs(R1) args: 0, res: 0, upd: 0;
       cbvEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvCm_info" {
     block_cbvCm_info:
         const _cbvCm;
         const 69649;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvE2() //  [R1]
         { []
         }
     {offset
       cbvE2: // global
           if (R1 & 7 == 1) goto ubvGr; else goto cbvEm;
       ubvGr: // global
           Sp = Sp + 8;
           call _sbubS() args: 0, res: 0, upd: 0;
       cbvEm: // global
           I64[Sp] = block_cbvEf_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubvGQ; else goto cbvEg;
       ubvGQ: // global
           call _cbvEf(R1) args: 0, res: 0, upd: 0;
       cbvEg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvE2_info" {
     block_cbvE2_info:
         const _cbvE2;
         const 102417;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvEf() //  [R1]
         { []
         }
     {offset
       cbvEf: // global
           I64[Sp] = block_cbvEk_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvEf_info" {
     block_cbvEf_info:
         const _cbvEf;
         const 102417;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvEk() //  []
         { []
         }
     {offset
       cbvEk: // global
           Sp = Sp + 8;
           call _sbubS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvEk_info" {
     block_cbvEk_info:
         const _cbvEk;
         const 102417;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvEs() //  [R1]
         { []
         }
     {offset
       cbvEs: // global
           I64[Sp] = block_cbvEz_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvEs_info" {
     block_cbvEs_info:
         const _cbvEs;
         const 69649;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvEz() //  []
         { []
         }
     {offset
       cbvEz: // global
           I64[Sp] = block_cbvEB_info;
           R1 = P64[Sp + 80];
           if (R1 & 7 != 0) goto ubvGT; else goto cbvEE;
       ubvGT: // global
           call _cbvEB(R1) args: 0, res: 0, upd: 0;
       cbvEE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvEz_info" {
     block_cbvEz_info:
         const _cbvEz;
         const 69649;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvEB() //  [R1]
         { []
         }
     {offset
       cbvEB: // global
           if (R1 & 7 == 1) goto ubvGp; else goto cbvEU;
       ubvGp: // global
           Sp = Sp + 8;
           call _sbubS() args: 0, res: 0, upd: 0;
       cbvEU: // global
           I64[Sp] = block_cbvEN_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubvGU; else goto cbvEO;
       ubvGU: // global
           call _cbvEN(R1) args: 0, res: 0, upd: 0;
       cbvEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvEB_info" {
     block_cbvEB_info:
         const _cbvEB;
         const 102417;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvEN() //  [R1]
         { []
         }
     {offset
       cbvEN: // global
           I64[Sp] = block_cbvES_info;
           R1 = P64[R1 + 23];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvEN_info" {
     block_cbvEN_info:
         const _cbvEN;
         const 102417;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvES() //  []
         { []
         }
     {offset
       cbvES: // global
           Sp = Sp + 8;
           call _sbubS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvES_info" {
     block_cbvES_info:
         const _cbvES;
         const 102417;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _sbubS() //  []
         { []
         }
     {offset
       sbubS: // global
           I64[Sp - 8] = block_cbvCr_info;
           R1 = P64[Sp + 120];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvH0; else goto cbvCt;
       ubvH0: // global
           call _cbvCr(R1) args: 0, res: 0, upd: 0;
       cbvCt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbvCr() //  [R1]
         { []
         }
     {offset
       cbvCr: // global
           I64[Sp] = block_cbvCz_info;
           _sbubW::P64 = P64[R1 + 15];
           _sbubX::P64 = P64[R1 + 23];
           R1 = P64[Sp + 32];
           P64[Sp + 88] = _sbubX::P64;
           P64[Sp + 128] = _sbubW::P64;
           if (R1 & 7 != 0) goto ubvGM; else goto cbvDz;
       ubvGM: // global
           call _cbvCz(R1) args: 0, res: 0, upd: 0;
       cbvDz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvCr_info" {
     block_cbvCr_info:
         const _cbvCr;
         const 2199569;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvCz() //  [R1]
         { []
         }
     {offset
       cbvCz: // global
           _sbubW::P64 = P64[Sp + 128];
           _cbvGc::P64 = R1 & 7;
           if (_cbvGc::P64 != 3) goto ubvGg; else goto cbvDK;
       ubvGg: // global
           if (_cbvGc::P64 != 6) goto cbvDF; else goto cbvDT;
       cbvDF: // global
           P64[Sp + 128] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call _sbubY() args: 0, res: 0, upd: 0;
       cbvDT: // global
           I64[Sp] = block_cbvDR_info;
           R1 = _sbubW::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbvDK: // global
           I64[Sp] = block_cbvDI_info;
           R1 = _sbubW::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvCz_info" {
     block_cbvCz_info:
         const _cbvCz;
         const 36881;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvDR() //  [R1]
         { []
         }
     {offset
       cbvDR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbvDX; else goto cbvDW;
       cbvDX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvDW: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 128] = Hp - 6;
           Sp = Sp + 8;
           call _sbubY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvDR_info" {
     block_cbvDR_info:
         const _cbvDR;
         const 2134033;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvDI() //  [R1]
         { []
         }
     {offset
       cbvDI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbvDO; else goto cbvDN;
       cbvDO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvDN: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = R1;
           P64[Sp + 128] = Hp - 6;
           Sp = Sp + 8;
           call _sbubY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvDI_info" {
     block_cbvDI_info:
         const _cbvDI;
         const 2134033;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _sbubY() //  []
         { []
         }
     {offset
       sbubY: // global
           I64[Sp - 8] = block_cbvCE_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvH1; else goto cbvCG;
       ubvH1: // global
           call _cbvCE(R1) args: 0, res: 0, upd: 0;
       cbvCG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbvCE() //  [R1]
         { []
         }
     {offset
       cbvCE: // global
           _sbubX::P64 = P64[Sp + 88];
           _cbvGf::P64 = R1 & 7;
           if (_cbvGf::P64 < 5) goto ubvGh; else goto ubvGi;
       ubvGh: // global
           if (_cbvGf::P64 < 4) goto cbvCP; else goto cbvD2;
       cbvCP: // global
           I64[Sp] = block_cbvCK_info;
           _sbuc1::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sbuc1::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
       cbvD2: // global
           I64[Sp] = block_cbvCV_info;
           R1 = _sbubX::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       ubvGi: // global
           if (_cbvGf::P64 < 6) goto cbvDg; else goto cbvDu;
       cbvDg: // global
           I64[Sp] = block_cbvD9_info;
           R1 = _sbubX::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
       cbvDu: // global
           I64[Sp] = block_cbvDn_info;
           R1 = _sbubX::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvCE_info" {
     block_cbvCE_info:
         const _cbvCE;
         const 37393;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvCK() //  [R1]
         { []
         }
     {offset
       cbvCK: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbvCS; else goto cbvCR;
       cbvCS: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvCR: // global
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = P64[Sp + 88];
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = GHC.Base.Nothing_closure+1;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvCK_info" {
     block_cbvCK_info:
         const _cbvCK;
         const 37393;
         const 30;
 },
 _cbvCV() //  [R1]
         { []
         }
     {offset
       cbvCV: // global
           I64[Sp] = block_cbvCX_info;
           _sbucb::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sbucb::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvCV_info" {
     block_cbvCV_info:
         const _cbvCV;
         const 102929;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvCX() //  [R1]
         { []
         }
     {offset
       cbvCX: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbvD6; else goto cbvD5;
       cbvD6: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvD5: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 88];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.WriteHandle_closure+4;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvCX_info" {
     block_cbvCX_info:
         const _cbvCX;
         const 37393;
         const 30;
 },
 _cbvD9() //  [R1]
         { []
         }
     {offset
       cbvD9: // global
           I64[Sp] = block_cbvDb_info;
           _sbucm::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sbucm::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvD9_info" {
     block_cbvD9_info:
         const _cbvD9;
         const 102929;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvDb() //  [R1]
         { []
         }
     {offset
       cbvDb: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbvDk; else goto cbvDj;
       cbvDk: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvDj: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 88];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.AppendHandle_closure+5;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvDb_info" {
     block_cbvDb_info:
         const _cbvDb;
         const 37393;
         const 30;
 },
 _cbvDn() //  [R1]
         { []
         }
     {offset
       cbvDn: // global
           I64[Sp] = block_cbvDp_info;
           _sbucx::P64 = R1;
           R1 = lvl18_rbnX0_closure;
           P64[Sp + 88] = _sbucx::P64;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvDn_info" {
     block_cbvDn_info:
         const _cbvDn;
         const 102929;
         const 4294967326;
         const SbuCr_srt+472;
 },
 _cbvDp() //  [R1]
         { []
         }
     {offset
       cbvDp: // global
           Hp = Hp + 152;
           if (Hp > HpLim) (likely: False) goto cbvDy; else goto cbvDx;
       cbvDy: // global
           HpAlloc = 152;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvDx: // global
           I64[Hp - 144] = GHC.Base.Just_con_info;
           P64[Hp - 136] = P64[Sp + 88];
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = P64[Sp + 120];
           P64[Hp - 112] = P64[Sp + 8];
           P64[Hp - 104] = P64[Sp + 16];
           P64[Hp - 96] = P64[Sp + 24];
           P64[Hp - 88] = GHC.IO.Handle.Types.ReadWriteHandle_closure+6;
           P64[Hp - 80] = P64[Sp + 40];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = R1;
           P64[Hp - 56] = P64[Sp + 64];
           P64[Hp - 48] = P64[Sp + 72];
           P64[Hp - 40] = Hp - 142;
           P64[Hp - 32] = P64[Sp + 128];
           P64[Hp - 24] = P64[Sp + 136];
           P64[Hp - 16] = P64[Sp + 96];
           P64[Hp - 8] = P64[Sp + 104];
           P64[Hp] = P64[Sp + 112];
           R1 = Hp - 127;
           Sp = Sp + 144;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvDp_info" {
     block_cbvDp_info:
         const _cbvDp;
         const 37393;
         const 30;
 },
 GHC.IO.Handle.hSetEncoding1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbvH2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbvH6; else goto cbvH5;
       cbvH6: // global
           HpAlloc = 40;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetEncoding1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbvH5: // global
           I64[Hp - 32] = GHC.Base.Just_con_info;
           P64[Hp - 24] = R3;
           I64[Hp - 16] = sat_sbuev_info;
           P64[Hp - 8] = R3;
           P64[Hp] = Hp - 30;
           R4 = Hp - 14;
           R3 = R2;
           R2 = lvl16_rbnWY_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEncoding1_info" {
     GHC.IO.Handle.hSetEncoding1_info:
         const GHC.IO.Handle.hSetEncoding1_entry;
         const 0;
         const 4035225407857885198;
         const 12884901903;
         const SbuCr_srt+256;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.707734723 UTC

[section ""data" . GHC.IO.Handle.hSetEncoding_closure" {
     GHC.IO.Handle.hSetEncoding_closure:
         const GHC.IO.Handle.hSetEncoding_info;
         const 0;
 },
 GHC.IO.Handle.hSetEncoding_entry() //  [R2, R3]
         { []
         }
     {offset
       cbvMb: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetEncoding1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEncoding_info" {
     GHC.IO.Handle.hSetEncoding_info:
         const GHC.IO.Handle.hSetEncoding_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbuCr_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.710931093 UTC

[section ""cstring" . GHC.IO.Handle.hSetBuffering3_bytes" {
     GHC.IO.Handle.hSetBuffering3_bytes:
         I8[] [104,83,101,116,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.713161933 UTC

[section ""data" . GHC.IO.Handle.hSetBuffering2_closure" {
     GHC.IO.Handle.hSetBuffering2_closure:
         const GHC.IO.Handle.hSetBuffering2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hSetBuffering2_entry() //  [R1]
         { []
         }
     {offset
       cbvMp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvMq; else goto cbvMr;
       cbvMq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvMr: // global
           (_cbvMm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvMm::I64 == 0) goto cbvMo; else goto cbvMn;
       cbvMo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvMn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvMm::I64;
           R2 = GHC.IO.Handle.hSetBuffering3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBuffering2_info" {
     GHC.IO.Handle.hSetBuffering2_info:
         const GHC.IO.Handle.hSetBuffering2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.730154035 UTC

[section ""data" . GHC.IO.Handle.hSetBuffering1_closure" {
     GHC.IO.Handle.hSetBuffering1_closure:
         const GHC.IO.Handle.hSetBuffering1_info;
         const 0;
 },
 sat_sbufG_entry() //  [R1, R2]
         { []
         }
     {offset
       cbvMM: // global
           if ((Sp + -176) < SpLim) (likely: False) goto cbvMN; else goto cbvMO;
       cbvMN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvMO: // global
           I64[Sp - 16] = block_cbvMJ_info;
           _sbuex::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbuex::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubvRg; else goto cbvMK;
       ubvRg: // global
           call _cbvMJ(R1) args: 0, res: 0, upd: 0;
       cbvMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbufG_info" {
     sat_sbufG_info:
         const sat_sbufG_entry;
         const 1;
         const 12884901897;
         const 8589934597;
         const SbuCr_srt+496;
 },
 _cbvMJ() //  [R1]
         { []
         }
     {offset
       cbvMJ: // global
           I64[Sp - 128] = block_cbvMR_info;
           _sbueB::P64 = R1;
           _sbueC::P64 = P64[R1 + 7];
           _sbueD::P64 = P64[R1 + 15];
           _sbueE::P64 = P64[R1 + 23];
           _sbueF::P64 = P64[R1 + 31];
           _sbueH::P64 = P64[R1 + 47];
           _sbueI::P64 = P64[R1 + 55];
           _sbueJ::P64 = P64[R1 + 63];
           _sbueK::P64 = P64[R1 + 71];
           _sbueL::P64 = P64[R1 + 79];
           _sbueM::P64 = P64[R1 + 87];
           _sbueN::P64 = P64[R1 + 95];
           _sbueO::P64 = P64[R1 + 103];
           _sbueP::P64 = P64[R1 + 111];
           _sbueQ::P64 = P64[R1 + 119];
           _sbueR::P64 = P64[R1 + 127];
           R1 = P64[R1 + 39];
           P64[Sp - 120] = _sbueC::P64;
           P64[Sp - 112] = _sbueD::P64;
           P64[Sp - 104] = _sbueE::P64;
           P64[Sp - 96] = _sbueF::P64;
           P64[Sp - 88] = _sbueH::P64;
           P64[Sp - 80] = _sbueI::P64;
           P64[Sp - 72] = _sbueJ::P64;
           P64[Sp - 64] = _sbueK::P64;
           P64[Sp - 56] = _sbueL::P64;
           P64[Sp - 48] = _sbueM::P64;
           P64[Sp - 40] = _sbueN::P64;
           P64[Sp - 32] = _sbueO::P64;
           P64[Sp - 24] = _sbueP::P64;
           P64[Sp - 16] = _sbueQ::P64;
           P64[Sp - 8] = _sbueR::P64;
           P64[Sp] = _sbueB::P64;
           Sp = Sp - 128;
           if (R1 & 7 != 0) goto ubvRf; else goto cbvMT;
       ubvRf: // global
           call _cbvMR(R1) args: 0, res: 0, upd: 0;
       cbvMT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvMJ_info" {
     block_cbvMJ_info:
         const _cbvMJ;
         const 1;
         const 12884901918;
         const SbuCr_srt+496;
 },
 _cbvMR() //  [R1]
         { []
         }
     {offset
       cbvMR: // global
           if (R1 & 7 == 1) goto cbvQM; else goto cbvP2;
       cbvQM: // global
           Sp = Sp + 144;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbvP2: // global
           I64[Sp - 8] = block_cbvMZ_info;
           _sbueS::P64 = R1;
           R1 = P64[Sp + 136];
           P64[Sp] = _sbueS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvRh; else goto cbvP3;
       ubvRh: // global
           call _cbvMZ(R1) args: 0, res: 0, upd: 0;
       cbvP3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvMR_info" {
     block_cbvMR_info:
         const _cbvMR;
         const 17;
         const 12884901918;
         const SbuCr_srt+496;
 },
 _cbvMZ() //  [R1]
         { []
         }
     {offset
       cbvMZ: // global
           _sbueI::P64 = P64[Sp + 56];
           _cbvQO::P64 = R1 & 7;
           if (_cbvQO::P64 < 3) goto ubvR0; else goto cbvPG;
       ubvR0: // global
           if (_cbvQO::P64 < 2) goto cbvPa; else goto cbvPq;
       cbvPa: // global
           I64[Sp] = block_cbvP7_info;
           R1 = _sbueI::P64;
           if (R1 & 7 != 0) goto ubvRi; else goto cbvPb;
       ubvRi: // global
           call _cbvP7(R1) args: 0, res: 0, upd: 0;
       cbvPb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvPq: // global
           I64[Sp] = block_cbvPo_info;
           R1 = _sbueI::P64;
           if (R1 & 7 != 0) goto ubvRj; else goto cbvPr;
       ubvRj: // global
           call _cbvPo(R1) args: 0, res: 0, upd: 0;
       cbvPr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvPG: // global
           I64[Sp] = block_cbvPE_info;
           _sbufs::P64 = P64[R1 + 5];
           R1 = _sbueI::P64;
           P64[Sp + 56] = _sbufs::P64;
           if (R1 & 7 != 0) goto ubvRk; else goto cbvPH;
       ubvRk: // global
           call _cbvPE(R1) args: 0, res: 0, upd: 0;
       cbvPH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvMZ_info" {
     block_cbvMZ_info:
         const _cbvMZ;
         const 18;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvP7() //  [R1]
         { []
         }
     {offset
       cbvP7: // global
           if (R1 & 7 == 1) goto ubvR2; else goto ubvR3;
       ubvR2: // global
           Sp = Sp + 136;
           call _cbvQI() args: 0, res: 0, upd: 0;
       ubvR3: // global
           Sp = Sp + 8;
           call _sbueT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvP7_info" {
     block_cbvP7_info:
         const _cbvP7;
         const 4114;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvPo() //  [R1]
         { []
         }
     {offset
       cbvPo: // global
           if (R1 & 7 == 2) goto ubvR4; else goto ubvR5;
       ubvR4: // global
           Sp = Sp + 136;
           call _cbvQI() args: 0, res: 0, upd: 0;
       ubvR5: // global
           Sp = Sp + 8;
           call _sbueT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvPo_info" {
     block_cbvPo_info:
         const _cbvPo;
         const 4114;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvPE() //  [R1]
         { []
         }
     {offset
       cbvPE: // global
           if (R1 & 7 == 3) goto cbvPS; else goto ubvR6;
       cbvPS: // global
           I64[Sp] = block_cbvPQ_info;
           _sbufu::P64 = P64[R1 + 5];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _sbufu::P64;
           if (R1 & 7 != 0) goto ubvRx; else goto cbvPT;
       ubvRx: // global
           call _cbvPQ(R1) args: 0, res: 0, upd: 0;
       cbvPT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubvR6: // global
           Sp = Sp + 8;
           call _sbueT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvPE_info" {
     block_cbvPE_info:
         const _cbvPE;
         const 18;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvPQ() //  [R1]
         { []
         }
     {offset
       cbvPQ: // global
           _sbufu::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto cbvQ0; else goto cbvQg;
       cbvQ0: // global
           I64[Sp] = block_cbvPX_info;
           R1 = _sbufu::P64;
           if (R1 & 7 != 0) goto ubvRz; else goto cbvQ1;
       ubvRz: // global
           call _cbvPX(R1) args: 0, res: 0, upd: 0;
       cbvQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvQg: // global
           I64[Sp] = block_cbvQe_info;
           _sbufy::P64 = P64[R1 + 6];
           R1 = _sbufu::P64;
           P64[Sp + 56] = _sbufy::P64;
           if (R1 & 7 != 0) goto ubvRA; else goto cbvQh;
       ubvRA: // global
           call _cbvQe(R1) args: 0, res: 0, upd: 0;
       cbvQh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvPQ_info" {
     block_cbvPQ_info:
         const _cbvPQ;
         const 18;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvPX() //  [R1]
         { []
         }
     {offset
       cbvPX: // global
           if (R1 & 7 == 1) goto ubvRa; else goto ubvRb;
       ubvRa: // global
           Sp = Sp + 136;
           call _cbvQI() args: 0, res: 0, upd: 0;
       ubvRb: // global
           Sp = Sp + 8;
           call _sbueT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvPX_info" {
     block_cbvPX_info:
         const _cbvPX;
         const 4114;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvQe() //  [R1]
         { []
         }
     {offset
       cbvQe: // global
           if (R1 & 7 == 1) goto ubvR7; else goto cbvQx;
       ubvR7: // global
           Sp = Sp + 8;
           call _sbueT() args: 0, res: 0, upd: 0;
       cbvQx: // global
           I64[Sp] = block_cbvQq_info;
           _sbufA::P64 = P64[R1 + 6];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _sbufA::P64;
           if (R1 & 7 != 0) goto ubvRD; else goto cbvQr;
       ubvRD: // global
           call _cbvQq(R1) args: 0, res: 0, upd: 0;
       cbvQr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvQe_info" {
     block_cbvQe_info:
         const _cbvQe;
         const 18;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvQq() //  [R1]
         { []
         }
     {offset
       cbvQq: // global
           I64[Sp] = block_cbvQv_info;
           _sbufC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           I64[Sp + 56] = _sbufC::I64;
           if (R1 & 7 != 0) goto ubvRF; else goto cbvQz;
       ubvRF: // global
           call _cbvQv(R1) args: 0, res: 0, upd: 0;
       cbvQz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvQq_info" {
     block_cbvQq_info:
         const _cbvQq;
         const 18;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvQv() //  [R1]
         { []
         }
     {offset
       cbvQv: // global
           if (I64[Sp + 56] == I64[R1 + 7]) goto ubvR8; else goto ubvR9;
       ubvR8: // global
           Sp = Sp + 136;
           call _cbvQI() args: 0, res: 0, upd: 0;
       ubvR9: // global
           Sp = Sp + 8;
           call _sbueT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvQv_info" {
     block_cbvQv_info:
         const _cbvQv;
         const 4114;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvQI() //  []
         { []
         }
     {offset
       cbvQI: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _sbueT() //  []
         { []
         }
     {offset
       sbueT: // global
           I64[Sp - 8] = block_cbvN6_info;
           R1 = P64[Sp + 136];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvRI; else goto cbvOt;
       ubvRI: // global
           call _cbvN6(R1) args: 0, res: 0, upd: 0;
       cbvOt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cbvN6() //  [R1]
         { []
         }
     {offset
       cbvN6: // global
           if (R1 & 7 == 3) goto cbvOE; else goto ubvRc;
       cbvOE: // global
           I64[Sp] = block_cbvOC_info;
           R1 = P64[R1 + 5];
           if (R1 & 7 != 0) goto ubvRl; else goto cbvOF;
       ubvRl: // global
           call _cbvOC(R1) args: 0, res: 0, upd: 0;
       cbvOF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubvRc: // global
           Sp = Sp + 8;
           call _sbueU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvN6_info" {
     block_cbvN6_info:
         const _cbvN6;
         const 4198418;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvOC() //  [R1]
         { []
         }
     {offset
       cbvOC: // global
           if (R1 & 7 == 1) goto ubvRd; else goto cbvOQ;
       ubvRd: // global
           Sp = Sp + 8;
           call _sbueU() args: 0, res: 0, upd: 0;
       cbvOQ: // global
           I64[Sp] = block_cbvOO_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubvRq; else goto cbvOR;
       ubvRq: // global
           call _cbvOO(R1) args: 0, res: 0, upd: 0;
       cbvOR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvOC_info" {
     block_cbvOC_info:
         const _cbvOC;
         const 4198418;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _cbvOO() //  [R1]
         { []
         }
     {offset
       cbvOO: // global
           _sbufm::I64 = I64[R1 + 7];
           if (%MO_S_Gt_W64(_sbufm::I64, 0)) goto ubvRe; else goto cbvP0;
       ubvRe: // global
           Sp = Sp + 8;
           call _sbueU() args: 0, res: 0, upd: 0;
       cbvP0: // global
           R2 = _sbufm::I64;
           Sp = Sp + 152;
           call GHC.IO.Handle.Internals.$wioe_bufsiz_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvOO_info" {
     block_cbvOO_info:
         const _cbvOO;
         const 4198418;
         const 4294967326;
         const SbuCr_srt+496;
 },
 _sbueU() //  []
         { []
         }
     {offset
       sbueU: // global
           I64[Sp - 8] = block_cbvNb_info;
           R2 = P64[Sp + 8];
           I64[Sp - 24] = stg_ap_pv_info;
           P64[Sp - 16] = P64[Sp + 32];
           Sp = Sp - 24;
           call GHC.IO.Device.isTerminal_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _cbvNb() //  [R1]
         { []
         }
     {offset
       cbvNb: // global
           I64[Sp] = block_cbvNd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvRn; else goto cbvNg;
       ubvRn: // global
           call _cbvNd(R1) args: 0, res: 0, upd: 0;
       cbvNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvNb_info" {
     block_cbvNb_info:
         const _cbvNb;
         const 4198418;
         const 30;
 },
 _cbvNd() //  [R1]
         { []
         }
     {offset
       cbvNd: // global
           _sbueS::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbvNp; else goto cbvO7;
       cbvNp: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbvNs; else goto cbvNr;
       cbvNs: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvNr: // global
           _sbuex::P64 = P64[Sp + 144];
           _sbueC::P64 = P64[Sp + 16];
           _sbueD::P64 = P64[Sp + 24];
           _sbueE::P64 = P64[Sp + 32];
           _sbueF::P64 = P64[Sp + 40];
           _sbueH::P64 = P64[Sp + 48];
           _sbueJ::P64 = P64[Sp + 64];
           _sbueK::P64 = P64[Sp + 72];
           _sbueL::P64 = P64[Sp + 80];
           _sbueM::P64 = P64[Sp + 88];
           _sbueN::P64 = P64[Sp + 96];
           _sbueO::P64 = P64[Sp + 104];
           _sbueP::P64 = P64[Sp + 112];
           _sbueQ::P64 = P64[Sp + 120];
           _sbueR::P64 = P64[Sp + 128];
           call MO_WriteBarrier();
           P64[_sbueL::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbueL::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbueC::P64;
           P64[Hp - 112] = _sbueD::P64;
           P64[Hp - 104] = _sbueE::P64;
           P64[Hp - 96] = _sbueF::P64;
           P64[Hp - 88] = _sbueS::P64;
           P64[Hp - 80] = _sbueH::P64;
           P64[Hp - 72] = _sbuex::P64;
           P64[Hp - 64] = _sbueJ::P64;
           P64[Hp - 56] = _sbueK::P64;
           P64[Hp - 48] = _sbueL::P64;
           P64[Hp - 40] = _sbueM::P64;
           P64[Hp - 32] = _sbueN::P64;
           P64[Hp - 24] = _sbueO::P64;
           P64[Hp - 16] = _sbueP::P64;
           P64[Hp - 8] = _sbueQ::P64;
           P64[Hp] = _sbueR::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbvO7: // global
           I64[Sp] = block_cbvNx_info;
           R1 = _sbueS::P64;
           if (R1 & 7 != 0) goto ubvRo; else goto cbvO8;
       ubvRo: // global
           call _cbvNx(R1) args: 0, res: 0, upd: 0;
       cbvO8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvNd_info" {
     block_cbvNd_info:
         const _cbvNd;
         const 4198418;
         const 30;
 },
 _cbvNx() //  [R1]
         { []
         }
     {offset
       cbvNx: // global
           _sbuex::P64 = P64[Sp + 144];
           _cbvQY::P64 = R1 & 7;
           if (_cbvQY::P64 == 3) goto sbuf2; else goto ubvR1;
       ubvR1: // global
           if (_cbvQY::P64 == 6) goto sbuf2; else goto cbvOh;
       sbuf2: // global
           I64[Sp] = block_cbvNC_info;
           R1 = _sbuex::P64;
           if (R1 & 7 != 0) goto ubvRp; else goto cbvNE;
       ubvRp: // global
           call _cbvNC(R1) args: 0, res: 0, upd: 0;
       cbvNE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvOh: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbvOk; else goto cbvOj;
       cbvOk: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvOj: // global
           _sbueC::P64 = P64[Sp + 16];
           _sbueD::P64 = P64[Sp + 24];
           _sbueE::P64 = P64[Sp + 32];
           _sbueF::P64 = P64[Sp + 40];
           _sbueH::P64 = P64[Sp + 48];
           _sbueJ::P64 = P64[Sp + 64];
           _sbueK::P64 = P64[Sp + 72];
           _sbueL::P64 = P64[Sp + 80];
           _sbueM::P64 = P64[Sp + 88];
           _sbueN::P64 = P64[Sp + 96];
           _sbueO::P64 = P64[Sp + 104];
           _sbueP::P64 = P64[Sp + 112];
           _sbueQ::P64 = P64[Sp + 120];
           _sbueR::P64 = P64[Sp + 128];
           call MO_WriteBarrier();
           P64[_sbueL::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbueL::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbueC::P64;
           P64[Hp - 112] = _sbueD::P64;
           P64[Hp - 104] = _sbueE::P64;
           P64[Hp - 96] = _sbueF::P64;
           P64[Hp - 88] = R1;
           P64[Hp - 80] = _sbueH::P64;
           P64[Hp - 72] = _sbuex::P64;
           P64[Hp - 64] = _sbueJ::P64;
           P64[Hp - 56] = _sbueK::P64;
           P64[Hp - 48] = _sbueL::P64;
           P64[Hp - 40] = _sbueM::P64;
           P64[Hp - 32] = _sbueN::P64;
           P64[Hp - 24] = _sbueO::P64;
           P64[Hp - 16] = _sbueP::P64;
           P64[Hp - 8] = _sbueQ::P64;
           P64[Hp] = _sbueR::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvNx_info" {
     block_cbvNx_info:
         const _cbvNx;
         const 4198418;
         const 30;
 },
 _cbvNC() //  [R1]
         { []
         }
     {offset
       cbvNC: // global
           _sbueC::P64 = P64[Sp + 16];
           _sbueF::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cbvO3; else goto cbvNQ;
       cbvO3: // global
           I64[Sp] = block_cbvNW_info;
           R2 = _sbueC::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _sbueF::P64;
           P64[Sp - 8] = GHC.Types.True_closure+2;
           Sp = Sp - 24;
           call GHC.IO.Device.setRaw_entry(R2) args: 32, res: 8, upd: 8;
       cbvNQ: // global
           I64[Sp] = block_cbvNI_info;
           R2 = _sbueC::P64;
           I64[Sp - 24] = stg_ap_ppv_info;
           P64[Sp - 16] = _sbueF::P64;
           P64[Sp - 8] = GHC.Types.False_closure+1;
           P64[Sp + 144] = R1;
           Sp = Sp - 24;
           call GHC.IO.Device.setRaw_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvNC_info" {
     block_cbvNC_info:
         const _cbvNC;
         const 12587026;
         const 30;
 },
 _cbvNW() //  [R1]
         { []
         }
     {offset
       cbvNW: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbvO6; else goto cbvO5;
       cbvO6: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvO5: // global
           _sbueC::P64 = P64[Sp + 16];
           _sbueD::P64 = P64[Sp + 24];
           _sbueE::P64 = P64[Sp + 32];
           _sbueF::P64 = P64[Sp + 40];
           _sbueH::P64 = P64[Sp + 48];
           _sbueJ::P64 = P64[Sp + 64];
           _sbueK::P64 = P64[Sp + 72];
           _sbueL::P64 = P64[Sp + 80];
           _sbueM::P64 = P64[Sp + 88];
           _sbueN::P64 = P64[Sp + 96];
           _sbueO::P64 = P64[Sp + 104];
           _sbueP::P64 = P64[Sp + 112];
           _sbueQ::P64 = P64[Sp + 120];
           _sbueR::P64 = P64[Sp + 128];
           _sbueS::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sbueL::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbueL::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbueC::P64;
           P64[Hp - 112] = _sbueD::P64;
           P64[Hp - 104] = _sbueE::P64;
           P64[Hp - 96] = _sbueF::P64;
           P64[Hp - 88] = _sbueS::P64;
           P64[Hp - 80] = _sbueH::P64;
           P64[Hp - 72] = GHC.IO.Handle.Types.NoBuffering_closure+1;
           P64[Hp - 64] = _sbueJ::P64;
           P64[Hp - 56] = _sbueK::P64;
           P64[Hp - 48] = _sbueL::P64;
           P64[Hp - 40] = _sbueM::P64;
           P64[Hp - 32] = _sbueN::P64;
           P64[Hp - 24] = _sbueO::P64;
           P64[Hp - 16] = _sbueP::P64;
           P64[Hp - 8] = _sbueQ::P64;
           P64[Hp] = _sbueR::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvNW_info" {
     block_cbvNW_info:
         const _cbvNW;
         const 12587026;
         const 30;
 },
 _cbvNI() //  [R1]
         { []
         }
     {offset
       cbvNI: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto cbvNT; else goto cbvNS;
       cbvNT: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvNS: // global
           _sbueC::P64 = P64[Sp + 16];
           _sbueD::P64 = P64[Sp + 24];
           _sbueE::P64 = P64[Sp + 32];
           _sbueF::P64 = P64[Sp + 40];
           _sbueH::P64 = P64[Sp + 48];
           _sbueJ::P64 = P64[Sp + 64];
           _sbueK::P64 = P64[Sp + 72];
           _sbueL::P64 = P64[Sp + 80];
           _sbueM::P64 = P64[Sp + 88];
           _sbueN::P64 = P64[Sp + 96];
           _sbueO::P64 = P64[Sp + 104];
           _sbueP::P64 = P64[Sp + 112];
           _sbueQ::P64 = P64[Sp + 120];
           _sbueR::P64 = P64[Sp + 128];
           _sbueS::P64 = P64[Sp + 8];
           _sbuf3::P64 = P64[Sp + 144];
           call MO_WriteBarrier();
           P64[_sbueL::P64 + 8] = GHC.IO.Handle.Types.BufferListNil_closure+1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbueL::P64);
           I64[Hp - 128] = GHC.IO.Handle.Types.Handle___con_info;
           P64[Hp - 120] = _sbueC::P64;
           P64[Hp - 112] = _sbueD::P64;
           P64[Hp - 104] = _sbueE::P64;
           P64[Hp - 96] = _sbueF::P64;
           P64[Hp - 88] = _sbueS::P64;
           P64[Hp - 80] = _sbueH::P64;
           P64[Hp - 72] = _sbuf3::P64;
           P64[Hp - 64] = _sbueJ::P64;
           P64[Hp - 56] = _sbueK::P64;
           P64[Hp - 48] = _sbueL::P64;
           P64[Hp - 40] = _sbueM::P64;
           P64[Hp - 32] = _sbueN::P64;
           P64[Hp - 24] = _sbueO::P64;
           P64[Hp - 16] = _sbueP::P64;
           P64[Hp - 8] = _sbueQ::P64;
           P64[Hp] = _sbueR::P64;
           R1 = Hp - 127;
           Sp = Sp + 152;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvNI_info" {
     block_cbvNI_info:
         const _cbvNI;
         const 4198418;
         const 30;
 },
 section ""relreadonly" . ubvRO_srtd" {
     ubvRO_srtd:
         const SbuCr_srt+256;
         const 34;
         const 16106127361;
 },
 GHC.IO.Handle.hSetBuffering1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbvRJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbvRN; else goto cbvRM;
       cbvRN: // global
           HpAlloc = 16;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetBuffering1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbvRM: // global
           I64[Hp - 8] = sat_sbufG_info;
           P64[Hp] = R3;
           R4 = Hp - 6;
           R3 = R2;
           R2 = GHC.IO.Handle.hSetBuffering2_closure;
           call GHC.IO.Handle.Internals.withAllHandles__1_entry(R4,
                                                                R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBuffering1_info" {
     GHC.IO.Handle.hSetBuffering1_info:
         const GHC.IO.Handle.hSetBuffering1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubvRO_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.778635645 UTC

[section ""data" . GHC.IO.Handle.hSetBuffering_closure" {
     GHC.IO.Handle.hSetBuffering_closure:
         const GHC.IO.Handle.hSetBuffering_info;
         const 0;
 },
 GHC.IO.Handle.hSetBuffering_entry() //  [R2, R3]
         { []
         }
     {offset
       cbvUC: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetBuffering1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetBuffering_info" {
     GHC.IO.Handle.hSetBuffering_info:
         const GHC.IO.Handle.hSetBuffering_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbuCr_srt+512;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.781919756 UTC

[section ""cstring" . GHC.IO.Handle.hIsEOF4_bytes" {
     GHC.IO.Handle.hIsEOF4_bytes:
         I8[] [104,73,115,69,79,70]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.784202444 UTC

[section ""data" . GHC.IO.Handle.hIsEOF3_closure" {
     GHC.IO.Handle.hIsEOF3_closure:
         const GHC.IO.Handle.hIsEOF3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsEOF3_entry() //  [R1]
         { []
         }
     {offset
       cbvUQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvUR; else goto cbvUS;
       cbvUR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvUS: // global
           (_cbvUN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvUN::I64 == 0) goto cbvUP; else goto cbvUO;
       cbvUP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvUO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvUN::I64;
           R2 = GHC.IO.Handle.hIsEOF4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF3_info" {
     GHC.IO.Handle.hIsEOF3_info:
         const GHC.IO.Handle.hIsEOF3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.792118298 UTC

[section ""data" . GHC.IO.Handle.hIsEOF2_closure" {
     GHC.IO.Handle.hIsEOF2_closure:
         const GHC.IO.Handle.hIsEOF2_info;
 },
 GHC.IO.Handle.hIsEOF2_entry() //  [R2]
         { []
         }
     {offset
       cbvV8: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbvVc; else goto cbvVd;
       cbvVc: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsEOF2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvVd: // global
           I64[Sp - 8] = block_cbvV5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubvW4; else goto cbvV6;
       ubvW4: // global
           call _cbvV5(R1) args: 0, res: 0, upd: 0;
       cbvV6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF2_info" {
     GHC.IO.Handle.hIsEOF2_info:
         const GHC.IO.Handle.hIsEOF2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbvV5() //  [R1]
         { []
         }
     {offset
       cbvV5: // global
           _sbug2::P64 = P64[P64[R1 + 71] + 8];
           I64[Sp - 24] = block_cbvVb_info;
           _sbufL::P64 = P64[R1 + 15];
           _sbufN::P64 = P64[R1 + 31];
           _sbufP::P64 = P64[R1 + 47];
           R1 = _sbug2::P64;
           P64[Sp - 16] = _sbufN::P64;
           P64[Sp - 8] = _sbufP::P64;
           P64[Sp] = _sbufL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubvW3; else goto cbvVf;
       ubvW3: // global
           call _cbvVb(R1) args: 0, res: 0, upd: 0;
       cbvVf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvV5_info" {
     block_cbvV5_info:
         const _cbvV5;
         const 0;
         const 30;
 },
 _cbvVb() //  [R1]
         { []
         }
     {offset
       cbvVb: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbvVr; else goto ubvW1;
       cbvVr: // global
           _sbugd::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp] = block_cbvVq_info;
           R1 = _sbugd::P64;
           if (R1 & 7 != 0) goto ubvW5; else goto cbvVs;
       ubvW5: // global
           call _cbvVq(R1) args: 0, res: 0, upd: 0;
       cbvVs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       ubvW1: // global
           Sp = Sp + 32;
           call _cbvVA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvVb_info" {
     block_cbvVb_info:
         const _cbvVb;
         const 3;
         const 30;
 },
 _cbvVq() //  [R1]
         { []
         }
     {offset
       cbvVq: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbvVL; else goto ubvW2;
       cbvVL: // global
           _sbufN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbvVD_info;
           R2 = P64[Sp + 24];
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sbufN::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.fillReadBuffer_entry(R2) args: 32, res: 8, upd: 8;
       ubvW2: // global
           Sp = Sp + 32;
           call _cbvVA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbvVq_info" {
     block_cbvVq_info:
         const _cbvVq;
         const 3;
         const 30;
 },
 _cbvVD() //  [R1]
         { []
         }
     {offset
       cbvVD: // global
           I64[Sp] = block_cbvVF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubvW8; else goto cbvVG;
       ubvW8: // global
           call _cbvVF(R1) args: 0, res: 0, upd: 0;
       cbvVG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvVD_info" {
     block_cbvVD_info:
         const _cbvVD;
         const 130;
         const 30;
 },
 _cbvVF() //  [R1]
         { []
         }
     {offset
       cbvVF: // global
           I64[Sp] = block_cbvVK_info;
           _sbugr::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp + 16] = _sbugr::P64;
           if (R1 & 7 != 0) goto ubvW9; else goto cbvVO;
       ubvW9: // global
           call _cbvVK(R1) args: 0, res: 0, upd: 0;
       cbvVO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvVF_info" {
     block_cbvVF_info:
         const _cbvVF;
         const 130;
         const 30;
 },
 _cbvVK() //  [R1]
         { []
         }
     {offset
       cbvVK: // global
           if (I64[R1 + 7] == 0) goto cbvVW; else goto cbvVV;
       cbvVW: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbvVV: // global
           _sbufP::P64 = P64[Sp + 8];
           _sbugr::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbufP::P64 + 8] = _sbugr::P64;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbufP::P64);
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvVK_info" {
     block_cbvVK_info:
         const _cbvVK;
         const 2;
         const 30;
 },
 _cbvVA() //  []
         { []
         }
     {offset
       cbvVA: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.808155809 UTC

[section ""data" . GHC.IO.Handle.hIsEOF1_closure" {
     GHC.IO.Handle.hIsEOF1_closure:
         const GHC.IO.Handle.hIsEOF1_info;
         const 0;
 },
 GHC.IO.Handle.hIsEOF1_entry() //  [R2]
         { []
         }
     {offset
       cbvX0: // global
           R4 = GHC.IO.Handle.hIsEOF2_closure+2;
           R3 = R2;
           R2 = GHC.IO.Handle.hIsEOF3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF1_info" {
     GHC.IO.Handle.hIsEOF1_info:
         const GHC.IO.Handle.hIsEOF1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbuCr_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.812099264 UTC

[section ""data" . GHC.IO.Handle.hIsEOF_closure" {
     GHC.IO.Handle.hIsEOF_closure:
         const GHC.IO.Handle.hIsEOF_info;
         const 0;
 },
 GHC.IO.Handle.hIsEOF_entry() //  [R2]
         { []
         }
     {offset
       cbvXb: // global
           R2 = R2;
           call GHC.IO.Handle.hIsEOF1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsEOF_info" {
     GHC.IO.Handle.hIsEOF_info:
         const GHC.IO.Handle.hIsEOF_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+544;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.816497223 UTC

[section ""data" . GHC.IO.Handle.isEOF1_closure" {
     GHC.IO.Handle.isEOF1_closure:
         const GHC.IO.Handle.isEOF1_info;
         const 0;
 },
 GHC.IO.Handle.isEOF1_entry() //  []
         { []
         }
     {offset
       cbvXm: // global
           R4 = GHC.IO.Handle.hIsEOF2_closure+2;
           R3 = GHC.IO.Handle.FD.stdin_closure;
           R2 = GHC.IO.Handle.hIsEOF3_closure;
           call GHC.IO.Handle.Internals.wantReadableHandle_1_entry(R4,
                                                                   R3,
                                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.isEOF1_info" {
     GHC.IO.Handle.isEOF1_info:
         const GHC.IO.Handle.isEOF1_entry;
         const 0;
         const 47244640270;
         const 4294967299;
         const SbuCr_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.820084089 UTC

[section ""data" . GHC.IO.Handle.isEOF_closure" {
     GHC.IO.Handle.isEOF_closure:
         const GHC.IO.Handle.isEOF_info;
         const 0;
 },
 GHC.IO.Handle.isEOF_entry() //  []
         { []
         }
     {offset
       cbvXx: // global
           call GHC.IO.Handle.isEOF1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.isEOF_info" {
     GHC.IO.Handle.isEOF_info:
         const GHC.IO.Handle.isEOF_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SbuCr_srt+560;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.823455716 UTC

[section ""cstring" . lvl19_rbnX1_bytes" {
     lvl19_rbnX1_bytes:
         I8[] [104,83,101,116,70,105,108,101,83,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.826156653 UTC

[section ""data" . lvl20_rbnX2_closure" {
     lvl20_rbnX2_closure:
         const lvl20_rbnX2_info;
         const 0;
         const 0;
         const 0;
 },
 lvl20_rbnX2_entry() //  [R1]
         { []
         }
     {offset
       cbvXL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvXM; else goto cbvXN;
       cbvXM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbvXN: // global
           (_cbvXI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbvXI::I64 == 0) goto cbvXK; else goto cbvXJ;
       cbvXK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbvXJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbvXI::I64;
           R2 = lvl19_rbnX1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl20_rbnX2_info" {
     lvl20_rbnX2_info:
         const lvl20_rbnX2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.839071805 UTC

[section ""data" . GHC.IO.Handle.hSetFileSize1_closure" {
     GHC.IO.Handle.hSetFileSize1_closure:
         const GHC.IO.Handle.hSetFileSize1_info;
         const 0;
 },
 act_sbugA_entry() //  [R1, R2]
         { []
         }
     {offset
       cbvY8: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cbvY9; else goto cbvYa;
       cbvY9: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvYa: // global
           I64[Sp - 16] = block_cbvY5_info;
           _sbugy::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbugy::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubvZi; else goto cbvY6;
       ubvZi: // global
           call _cbvY5(R1) args: 0, res: 0, upd: 0;
       cbvY6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . act_sbugA_info" {
     act_sbugA_info:
         const act_sbugA_entry;
         const 1;
         const 18014402804449289;
         const 8589934597;
         const SbuCr_srt+328;
 },
 _cbvY5() //  [R1]
         { []
         }
     {offset
       cbvY5: // global
           I64[Sp - 32] = block_cbvYd_info;
           _sbugE::P64 = P64[R1 + 7];
           _sbugF::P64 = P64[R1 + 15];
           _sbugH::P64 = P64[R1 + 31];
           _sbugJ::P64 = P64[R1 + 47];
           R1 = P64[R1 + 39];
           P64[Sp - 24] = _sbugF::P64;
           P64[Sp - 16] = _sbugH::P64;
           P64[Sp - 8] = _sbugJ::P64;
           P64[Sp] = _sbugE::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubvZh; else goto cbvYf;
       ubvZh: // global
           call _cbvYd(R1) args: 0, res: 0, upd: 0;
       cbvYf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvY5_info" {
     block_cbvY5_info:
         const _cbvY5;
         const 1;
         const 18014402804449310;
         const SbuCr_srt+328;
 },
 _cbvYd() //  [R1]
         { []
         }
     {offset
       cbvYd: // global
           _cbvZe::P64 = R1 & 7;
           if (_cbvZe::P64 != 1) goto ubvZg; else goto cbvZ9;
       ubvZg: // global
           if (_cbvZe::P64 != 2) goto cbvYm; else goto cbvZd;
       cbvYm: // global
           _sbugX::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbvYj_info;
           R1 = _sbugX::P64;
           if (R1 & 7 != 0) goto ubvZj; else goto cbvYn;
       ubvZj: // global
           call _cbvYj(R1) args: 0, res: 0, upd: 0;
       cbvYn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbvZd: // global
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbvZ9: // global
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvYd_info" {
     block_cbvYd_info:
         const _cbvYd;
         const 5;
         const 18014402804449310;
         const SbuCr_srt+328;
 },
 _cbvYj() //  [R1]
         { []
         }
     {offset
       cbvYj: // global
           I64[Sp] = block_cbvYr_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubvZk; else goto cbvYt;
       ubvZk: // global
           call _cbvYr(R1) args: 0, res: 0, upd: 0;
       cbvYt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvYj_info" {
     block_cbvYj_info:
         const _cbvYj;
         const 5;
         const 30;
 },
 _cbvYr() //  [R1]
         { []
         }
     {offset
       cbvYr: // global
           if (R1 & 7 == 1) goto cbvYA; else goto cbvYH;
       cbvYA: // global
           _sbugy::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbvYx_info;
           R2 = P64[Sp + 32];
           _sbugH::P64 = P64[Sp + 16];
           I64[Sp + 16] = stg_ap_ppv_info;
           P64[Sp + 24] = _sbugH::P64;
           P64[Sp + 32] = _sbugy::P64;
           Sp = Sp + 16;
           call GHC.IO.Device.setSize_entry(R2) args: 32, res: 8, upd: 8;
       cbvYH: // global
           _sbuhb::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbvYF_info;
           R1 = _sbuhb::P64;
           if (R1 & 7 != 0) goto ubvZl; else goto cbvYI;
       ubvZl: // global
           call _cbvYF(R1) args: 0, res: 0, upd: 0;
       cbvYI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvYr_info" {
     block_cbvYr_info:
         const _cbvYr;
         const 5;
         const 30;
 },
 _cbvYx() //  []
         { []
         }
     {offset
       cbvYx: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvYx_info" {
     block_cbvYx_info:
         const _cbvYx;
         const 0;
         const 30;
 },
 _cbvYF() //  [R1]
         { []
         }
     {offset
       cbvYF: // global
           _sbugH::P64 = P64[Sp + 16];
           if (I64[R1 + 39] == I64[R1 + 47]) goto cbvZ3; else goto cbvYX;
       cbvZ3: // global
           _sbugy::P64 = P64[Sp + 40];
           I64[Sp + 40] = block_cbvZ2_info;
           R2 = P64[Sp + 32];
           I64[Sp + 16] = stg_ap_ppv_info;
           P64[Sp + 24] = _sbugH::P64;
           P64[Sp + 32] = _sbugy::P64;
           Sp = Sp + 16;
           call GHC.IO.Device.setSize_entry(R2) args: 32, res: 8, upd: 8;
       cbvYX: // global
           _sbugF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbvYQ_info;
           R2 = _sbugF::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = _sbugH::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvYF_info" {
     block_cbvYF_info:
         const _cbvYF;
         const 5;
         const 30;
 },
 _cbvZ2() //  []
         { []
         }
     {offset
       cbvZ2: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvZ2_info" {
     block_cbvZ2_info:
         const _cbvZ2;
         const 0;
         const 30;
 },
 _cbvYQ() //  [R1]
         { []
         }
     {offset
       cbvYQ: // global
           _sbugy::P64 = P64[Sp + 32];
           _sbugE::P64 = P64[Sp + 24];
           _sbugH::P64 = P64[Sp + 8];
           _sbugJ::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbugJ::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbugJ::P64);
           I64[Sp + 32] = block_cbvYV_info;
           R2 = _sbugE::P64;
           I64[Sp + 8] = stg_ap_ppv_info;
           P64[Sp + 16] = _sbugH::P64;
           P64[Sp + 24] = _sbugy::P64;
           Sp = Sp + 8;
           call GHC.IO.Device.setSize_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvYQ_info" {
     block_cbvYQ_info:
         const _cbvYQ;
         const 4;
         const 30;
 },
 _cbvYV() //  []
         { []
         }
     {offset
       cbvYV: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvYV_info" {
     block_cbvYV_info:
         const _cbvYV;
         const 0;
         const 30;
 },
 sat_sbuhI_entry() //  [R1, R2]
         { []
         }
     {offset
       cbvZG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbvZH; else goto cbvZI;
       cbvZH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbvZI: // global
           I64[Sp - 16] = block_cbvZD_info;
           _sbuhC::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sbuhC::P64;
           Sp = Sp - 16;
           call act_sbugA_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuhI_info" {
     sat_sbuhI_info:
         const sat_sbuhI_entry;
         const 1;
         const 18014402804449289;
         const 8589934597;
         const SbuCr_srt+328;
 },
 _cbvZD() //  [R1]
         { []
         }
     {offset
       cbvZD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbvZL; else goto cbvZK;
       cbvZL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbvZK: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvZD_info" {
     block_cbvZD_info:
         const _cbvZD;
         const 1;
         const 30;
 },
 io_sbuhA_entry() //  [R1]
         { []
         }
     {offset
       cbvZR: // global
           _sbuhA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbvZV; else goto cbvZW;
       cbvZW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbvZY; else goto cbvZX;
       cbvZY: // global
           HpAlloc = 16;
           goto cbvZV;
       cbvZV: // global
           R1 = _sbuhA::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbvZX: // global
           _sbugA::P64 = P64[_sbuhA::P64 + 7];
           _sbuhu::P64 = P64[_sbuhA::P64 + 15];
           _sbuhw::P64 = P64[_sbuhA::P64 + 23];
           I64[Hp - 8] = sat_sbuhI_info;
           P64[Hp] = _sbugA::P64;
           I64[Sp - 16] = block_cbvZM_info;
           R5 = _sbuhw::P64;
           R4 = Hp - 6;
           R3 = _sbuhu::P64;
           R2 = lvl20_rbnX2_closure;
           P64[Sp - 8] = _sbuhw::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuhA_info" {
     io_sbuhA_info:
         const io_sbuhA_entry;
         const 3;
         const 4629981896208547848;
         const 4294967299;
         const SbuCr_srt+328;
 },
 _cbvZM() //  [R1]
         { []
         }
     {offset
       cbvZM: // global
           I64[Sp] = block_cbvZO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubw03; else goto cbvZP;
       ubw03: // global
           call _cbvZO(R1) args: 0, res: 0, upd: 0;
       cbvZP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvZM_info" {
     block_cbvZM_info:
         const _cbvZM;
         const 1;
         const 30;
 },
 _cbvZO() //  [R1]
         { []
         }
     {offset
       cbvZO: // global
           I64[Sp] = block_cbvZU_info;
           R2 = P64[R1 + 7];
           _sbuhO::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuhO::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvZO_info" {
     block_cbvZO_info:
         const _cbvZO;
         const 1;
         const 30;
 },
 _cbvZU() //  []
         { []
         }
     {offset
       cbvZU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvZU_info" {
     block_cbvZU_info:
         const _cbvZU;
         const 1;
         const 30;
 },
 sat_sbui5_entry() //  [R1, R2]
         { []
         }
     {offset
       cbw0l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw0m; else goto cbw0n;
       cbw0m: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbw0n: // global
           I64[Sp - 16] = block_cbw0i_info;
           _sbuhZ::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sbuhZ::P64;
           Sp = Sp - 16;
           call act_sbugA_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbui5_info" {
     sat_sbui5_info:
         const sat_sbui5_entry;
         const 1;
         const 18014402804449289;
         const 8589934597;
         const SbuCr_srt+328;
 },
 _cbw0i() //  [R1]
         { []
         }
     {offset
       cbw0i: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbw0q; else goto cbw0p;
       cbw0q: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbw0p: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw0i_info" {
     block_cbw0i_info:
         const _cbw0i;
         const 1;
         const 30;
 },
 io_sbuhX_entry() //  [R1]
         { []
         }
     {offset
       cbw0w: // global
           _sbuhX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbw0A; else goto cbw0B;
       cbw0B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbw0D; else goto cbw0C;
       cbw0D: // global
           HpAlloc = 16;
           goto cbw0A;
       cbw0A: // global
           R1 = _sbuhX::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbw0C: // global
           _sbugA::P64 = P64[_sbuhX::P64 + 7];
           _sbuhu::P64 = P64[_sbuhX::P64 + 15];
           _sbuhS::P64 = P64[_sbuhX::P64 + 23];
           I64[Hp - 8] = sat_sbui5_info;
           P64[Hp] = _sbugA::P64;
           I64[Sp - 16] = block_cbw0r_info;
           R5 = _sbuhS::P64;
           R4 = Hp - 6;
           R3 = _sbuhu::P64;
           R2 = lvl20_rbnX2_closure;
           P64[Sp - 8] = _sbuhS::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuhX_info" {
     io_sbuhX_info:
         const io_sbuhX_entry;
         const 3;
         const 4629981896208547848;
         const 4294967299;
         const SbuCr_srt+328;
 },
 _cbw0r() //  [R1]
         { []
         }
     {offset
       cbw0r: // global
           I64[Sp] = block_cbw0t_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubw0I; else goto cbw0u;
       ubw0I: // global
           call _cbw0t(R1) args: 0, res: 0, upd: 0;
       cbw0u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw0r_info" {
     block_cbw0r_info:
         const _cbw0r;
         const 1;
         const 30;
 },
 _cbw0t() //  [R1]
         { []
         }
     {offset
       cbw0t: // global
           I64[Sp] = block_cbw0z_info;
           R2 = P64[R1 + 7];
           _sbuib::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuib::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw0t_info" {
     block_cbw0t_info:
         const _cbw0t;
         const 1;
         const 30;
 },
 _cbw0z() //  []
         { []
         }
     {offset
       cbw0z: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw0z_info" {
     block_cbw0z_info:
         const _cbw0z;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hSetFileSize1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbw0N: // global
           _sbugy::P64 = R3;
           _sbugx::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cbw0O; else goto cbw0P;
       cbw0P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbw0R; else goto cbw0Q;
       cbw0R: // global
           HpAlloc = 16;
           goto cbw0O;
       cbw0O: // global
           R3 = _sbugy::P64;
           R2 = _sbugx::P64;
           R1 = GHC.IO.Handle.hSetFileSize1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbw0Q: // global
           I64[Hp - 8] = act_sbugA_info;
           P64[Hp] = _sbugy::P64;
           I64[Sp - 16] = block_cbvZm_info;
           R1 = _sbugx::P64;
           P64[Sp - 8] = Hp - 6;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubw18; else goto cbvZn;
       ubw18: // global
           call _cbvZm(R1) args: 0, res: 0, upd: 0;
       cbvZn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetFileSize1_info" {
     GHC.IO.Handle.hSetFileSize1_info:
         const GHC.IO.Handle.hSetFileSize1_entry;
         const 0;
         const 13853353933063323662;
         const 12884901903;
         const SbuCr_srt+328;
 },
 _cbvZm() //  [R1]
         { []
         }
     {offset
       cbvZm: // global
           if (R1 & 7 == 1) goto cbw0K; else goto cbw0L;
       cbw0K: // global
           I64[Sp - 16] = block_cbvZr_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbw0L: // global
           I64[Sp - 16] = block_cbw06_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvZm_info" {
     block_cbvZm_info:
         const _cbvZm;
         const 1;
         const 4629981896208547870;
         const SbuCr_srt+328;
 },
 _cbvZr() //  [R1]
         { []
         }
     {offset
       cbvZr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbw0V; else goto cbw0U;
       cbw0V: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbw0U: // global
           I64[Hp - 24] = io_sbuhA_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbvZt::P64 = Hp - 23;
           if (R1 == 0) goto cbw0Z; else goto cbw0Y;
       cbw0Z: // global
           R1 = _cbvZt::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbw0Y: // global
           R1 = _cbvZt::P64;
           Sp = Sp + 32;
           call io_sbuhA_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbvZr_info" {
     block_cbvZr_info:
         const _cbvZr;
         const 3;
         const 4629981896208547870;
         const SbuCr_srt+328;
 },
 _cbw06() //  [R1]
         { []
         }
     {offset
       cbw06: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbw13; else goto cbw12;
       cbw13: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbw12: // global
           I64[Hp - 24] = io_sbuhX_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbw08::P64 = Hp - 23;
           if (R1 == 0) goto cbw17; else goto cbw16;
       cbw17: // global
           R1 = _cbw08::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbw16: // global
           R1 = _cbw08::P64;
           Sp = Sp + 32;
           call io_sbuhX_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw06_info" {
     block_cbw06_info:
         const _cbw06;
         const 3;
         const 4629981896208547870;
         const SbuCr_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.885932787 UTC

[section ""data" . GHC.IO.Handle.hSetFileSize_closure" {
     GHC.IO.Handle.hSetFileSize_closure:
         const GHC.IO.Handle.hSetFileSize_info;
         const 0;
 },
 GHC.IO.Handle.hSetFileSize_entry() //  [R2, R3]
         { []
         }
     {offset
       cbw3H: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetFileSize1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetFileSize_info" {
     GHC.IO.Handle.hSetFileSize_info:
         const GHC.IO.Handle.hSetFileSize_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbuCr_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.888823568 UTC

[section ""cstring" . GHC.IO.Handle.hFileSize9_bytes" {
     GHC.IO.Handle.hFileSize9_bytes:
         I8[] [104,70,105,108,101,83,105,122,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.891004174 UTC

[section ""data" . GHC.IO.Handle.hFileSize8_closure" {
     GHC.IO.Handle.hFileSize8_closure:
         const GHC.IO.Handle.hFileSize8_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize8_entry() //  [R1]
         { []
         }
     {offset
       cbw3V: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw3W; else goto cbw3X;
       cbw3W: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbw3X: // global
           (_cbw3S::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbw3S::I64 == 0) goto cbw3U; else goto cbw3T;
       cbw3U: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbw3T: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbw3S::I64;
           R2 = GHC.IO.Handle.hFileSize9_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize8_info" {
     GHC.IO.Handle.hFileSize8_info:
         const GHC.IO.Handle.hFileSize8_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.895497784 UTC

[section ""cstring" . GHC.IO.Handle.hFileSize7_bytes" {
     GHC.IO.Handle.hFileSize7_bytes:
         I8[] [110,111,116,32,97,32,114,101,103,117,108,97,114,32,102,105,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.89769652 UTC

[section ""data" . GHC.IO.Handle.hFileSize6_closure" {
     GHC.IO.Handle.hFileSize6_closure:
         const GHC.IO.Handle.hFileSize6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize6_entry() //  [R1]
         { []
         }
     {offset
       cbw4d: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw4e; else goto cbw4f;
       cbw4e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbw4f: // global
           (_cbw4a::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbw4a::I64 == 0) goto cbw4c; else goto cbw4b;
       cbw4c: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbw4b: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbw4a::I64;
           R2 = GHC.IO.Handle.hFileSize7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize6_info" {
     GHC.IO.Handle.hFileSize6_info:
         const GHC.IO.Handle.hFileSize6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.901151742 UTC

[section ""data" . GHC.IO.Handle.hFileSize5_closure" {
     GHC.IO.Handle.hFileSize5_closure:
         const GHC.IO.Exception.IOError_con_info;
         const GHC.Base.Nothing_closure+1;
         const GHC.IO.Exception.InappropriateType_closure+1;
         const GHC.IO.Handle.hFileSize8_closure;
         const GHC.IO.Handle.hFileSize6_closure;
         const GHC.Base.Nothing_closure+1;
         const GHC.Base.Nothing_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.903498245 UTC

[section ""data" . GHC.IO.Handle.hFileSize4_closure" {
     GHC.IO.Handle.hFileSize4_closure:
         const GHC.IO.Handle.hFileSize4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize4_entry() //  [R1]
         { []
         }
     {offset
       cbw4v: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw4w; else goto cbw4x;
       cbw4w: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbw4x: // global
           (_cbw4s::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbw4s::I64 == 0) goto cbw4u; else goto cbw4t;
       cbw4u: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbw4t: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbw4s::I64;
           R2 = GHC.IO.Handle.hFileSize5_closure+1;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize4_info" {
     GHC.IO.Handle.hFileSize4_info:
         const GHC.IO.Handle.hFileSize4_entry;
         const 0;
         const 12884901909;
         const SbuCr_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.907050448 UTC

[section ""data" . sat_sbuie_closure" {
     sat_sbuie_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.908695407 UTC

[section ""data" . sat_sbuif_closure" {
     sat_sbuif_closure:
         const :_con_info;
         const sat_sbuie_closure+1;
         const GHC.Types.[]_closure+1;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.911356357 UTC

[section ""data" . GHC.IO.Handle.hFileSize10_closure" {
     GHC.IO.Handle.hFileSize10_closure:
         const GHC.IO.Handle.hFileSize10_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hFileSize10_entry() //  [R1]
         { []
         }
     {offset
       cbw4O: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw4P; else goto cbw4Q;
       cbw4P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbw4Q: // global
           (_cbw4L::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbw4L::I64 == 0) goto cbw4N; else goto cbw4M;
       cbw4N: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbw4M: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbw4L::I64;
           R3 = sat_sbuif_closure+2;
           R2 = GHC.Types.False_closure+1;
           Sp = Sp - 16;
           call GHC.Integer.Type.mkInteger_entry(R3,
                                                 R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize10_info" {
     GHC.IO.Handle.hFileSize10_info:
         const GHC.IO.Handle.hFileSize10_entry;
         const 0;
         const 4294967317;
         const SbuCr_srt+600;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.918464355 UTC

[section ""data" . GHC.IO.Handle.hFileSize3_closure" {
     GHC.IO.Handle.hFileSize3_closure:
         const GHC.IO.Handle.hFileSize3_info;
         const 0;
 },
 section ""relreadonly" . ubw6B_srtd" {
     ubw6B_srtd:
         const SbuCr_srt+328;
         const 38;
         const 240522362881;
 },
 GHC.IO.Handle.hFileSize3_entry() //  [R2]
         { []
         }
     {offset
       cbw57: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbw58; else goto cbw59;
       cbw58: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFileSize3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbw59: // global
           I64[Sp - 8] = block_cbw54_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubw6u; else goto cbw55;
       ubw6u: // global
           call _cbw54(R1) args: 0, res: 0, upd: 0;
       cbw55: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize3_info" {
     GHC.IO.Handle.hFileSize3_info:
         const GHC.IO.Handle.hFileSize3_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubw6B_srtd;
 },
 section ""relreadonly" . ubw6C_srtd" {
     ubw6C_srtd:
         const SbuCr_srt+328;
         const 38;
         const 206162624513;
 },
 _cbw54() //  [R1]
         { []
         }
     {offset
       cbw54: // global
           I64[Sp - 32] = block_cbw5c_info;
           _sbuij::P64 = P64[R1 + 7];
           _sbuik::P64 = P64[R1 + 15];
           _sbuim::P64 = P64[R1 + 31];
           _sbuio::P64 = P64[R1 + 47];
           R1 = P64[R1 + 39];
           P64[Sp - 24] = _sbuik::P64;
           P64[Sp - 16] = _sbuim::P64;
           P64[Sp - 8] = _sbuio::P64;
           P64[Sp] = _sbuij::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubw6t; else goto cbw5e;
       ubw6t: // global
           call _cbw5c(R1) args: 0, res: 0, upd: 0;
       cbw5e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw54_info" {
     block_cbw54_info:
         const _cbw54;
         const 0;
         const 18446744069414584350;
         const ubw6C_srtd;
 },
 section ""relreadonly" . ubw6D_srtd" {
     ubw6D_srtd:
         const SbuCr_srt+328;
         const 38;
         const 206162624513;
 },
 _cbw5c() //  [R1]
         { []
         }
     {offset
       cbw5c: // global
           _cbw6k::P64 = R1 & 7;
           if (_cbw6k::P64 != 1) goto ubw6p; else goto cbw6f;
       ubw6p: // global
           if (_cbw6k::P64 != 2) goto cbw5l; else goto cbw6j;
       cbw5l: // global
           _sbuiC::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbw5i_info;
           R1 = _sbuiC::P64;
           if (R1 & 7 != 0) goto ubw6v; else goto cbw5m;
       ubw6v: // global
           call _cbw5i(R1) args: 0, res: 0, upd: 0;
       cbw5m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbw6j: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbw6f: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw5c_info" {
     block_cbw5c_info:
         const _cbw5c;
         const 4;
         const 18446744069414584350;
         const ubw6D_srtd;
 },
 _cbw5i() //  [R1]
         { []
         }
     {offset
       cbw5i: // global
           I64[Sp] = block_cbw5s_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto ubw6w; else goto cbw5M;
       ubw6w: // global
           call _cbw5s(R1) args: 0, res: 0, upd: 0;
       cbw5M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw5i_info" {
     block_cbw5i_info:
         const _cbw5i;
         const 4;
         const 12884901918;
         const SbuCr_srt+616;
 },
 _cbw5s() //  [R1]
         { []
         }
     {offset
       cbw5s: // global
           if (R1 & 7 == 1) goto ubw6q; else goto cbw5X;
       ubw6q: // global
           Sp = Sp + 16;
           call _sbuiK() args: 0, res: 0, upd: 0;
       cbw5X: // global
           _sbuiT::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp] = block_cbw5V_info;
           R1 = _sbuiT::P64;
           if (R1 & 7 != 0) goto ubw6x; else goto cbw5Y;
       ubw6x: // global
           call _cbw5V(R1) args: 0, res: 0, upd: 0;
       cbw5Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw5s_info" {
     block_cbw5s_info:
         const _cbw5s;
         const 4;
         const 12884901918;
         const SbuCr_srt+616;
 },
 _cbw5V() //  [R1]
         { []
         }
     {offset
       cbw5V: // global
           if (I64[R1 + 39] == I64[R1 + 47]) goto ubw6r; else goto cbw68;
       ubw6r: // global
           Sp = Sp + 16;
           call _sbuiK() args: 0, res: 0, upd: 0;
       cbw68: // global
           _sbuik::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbw66_info;
           R2 = _sbuik::P64;
           I64[Sp - 16] = stg_ap_ppv_info;
           P64[Sp - 8] = P64[Sp + 16];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.BufferedIO.flushWriteBuffer_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw5V_info" {
     block_cbw5V_info:
         const _cbw5V;
         const 4;
         const 12884901918;
         const SbuCr_srt+616;
 },
 _cbw66() //  [R1]
         { []
         }
     {offset
       cbw66: // global
           _sbuio::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sbuio::P64 + 8] = R1;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sbuio::P64);
           Sp = Sp + 8;
           call _sbuiK() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbw66_info" {
     block_cbw66_info:
         const _cbw66;
         const 3;
         const 12884901918;
         const SbuCr_srt+616;
 },
 _sbuiK() //  []
         { []
         }
     {offset
       sbuiK: // global
           _sbuij::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbw5x_info;
           R2 = _sbuij::P64;
           _sbuim::P64 = P64[Sp];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbuim::P64;
           call GHC.IO.Device.getSize_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 _cbw5x() //  [R1]
         { []
         }
     {offset
       cbw5x: // global
           I64[Sp - 8] = block_cbw5z_info;
           R3 = GHC.IO.Handle.hFileSize10_closure;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Integer.Type.neqInteger#_entry(R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw5x_info" {
     block_cbw5x_info:
         const _cbw5x;
         const 0;
         const 12884901918;
         const SbuCr_srt+616;
 },
 _cbw5z() //  [R1]
         { []
         }
     {offset
       cbw5z: // global
           if (R1 == 1) goto cbw5L; else goto cbw5H;
       cbw5L: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbw5H: // global
           R1 = GHC.IO.Handle.hFileSize4_closure;
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw5z_info" {
     block_cbw5z_info:
         const _cbw5z;
         const 1;
         const 4294967326;
         const SbuCr_srt+616;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.940741949 UTC

[section ""data" . GHC.IO.Handle.hFileSize2_closure" {
     GHC.IO.Handle.hFileSize2_closure:
         const GHC.IO.Handle.hFileSize2_info;
         const 0;
 },
 GHC.IO.Handle.hFileSize2_entry() //  [R2]
         { []
         }
     {offset
       cbw7H: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw7I; else goto cbw7J;
       cbw7I: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFileSize2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbw7J: // global
           I64[Sp - 16] = block_cbw7E_info;
           _sbuj6::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbuj6::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hFileSize3_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize2_info" {
     GHC.IO.Handle.hFileSize2_info:
         const GHC.IO.Handle.hFileSize2_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const SbuCr_srt+608;
 },
 _cbw7E() //  [R1]
         { []
         }
     {offset
       cbw7E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbw7M; else goto cbw7L;
       cbw7M: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbw7L: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw7E_info" {
     block_cbw7E_info:
         const _cbw7E;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.94998489 UTC

[section ""data" . GHC.IO.Handle.hFileSize1_closure" {
     GHC.IO.Handle.hFileSize1_closure:
         const GHC.IO.Handle.hFileSize1_info;
         const 0;
 },
 io_sbujk_entry() //  [R1]
         { []
         }
     {offset
       cbw8k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw8o; else goto cbw8p;
       cbw8o: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbw8p: // global
           I64[Sp - 16] = block_cbw8f_info;
           _sbujg::P64 = P64[R1 + 15];
           R5 = _sbujg::P64;
           R4 = GHC.IO.Handle.hFileSize2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFileSize8_closure;
           P64[Sp - 8] = _sbujg::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbujk_info" {
     io_sbujk_info:
         const io_sbujk_entry;
         const 2;
         const 54043199823413259;
         const 4294967299;
         const SbuCr_srt+456;
 },
 _cbw8f() //  [R1]
         { []
         }
     {offset
       cbw8f: // global
           I64[Sp] = block_cbw8h_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubw8u; else goto cbw8i;
       ubw8u: // global
           call _cbw8h(R1) args: 0, res: 0, upd: 0;
       cbw8i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw8f_info" {
     block_cbw8f_info:
         const _cbw8f;
         const 1;
         const 30;
 },
 _cbw8h() //  [R1]
         { []
         }
     {offset
       cbw8h: // global
           I64[Sp] = block_cbw8n_info;
           R2 = P64[R1 + 7];
           _sbujr::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbujr::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw8h_info" {
     block_cbw8h_info:
         const _cbw8h;
         const 1;
         const 30;
 },
 _cbw8n() //  []
         { []
         }
     {offset
       cbw8n: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw8n_info" {
     block_cbw8n_info:
         const _cbw8n;
         const 1;
         const 30;
 },
 io_sbujA_entry() //  [R1]
         { []
         }
     {offset
       cbw8J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbw8N; else goto cbw8O;
       cbw8N: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbw8O: // global
           I64[Sp - 16] = block_cbw8E_info;
           _sbujv::P64 = P64[R1 + 15];
           R5 = _sbujv::P64;
           R4 = GHC.IO.Handle.hFileSize2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hFileSize8_closure;
           P64[Sp - 8] = _sbujv::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbujA_info" {
     io_sbujA_info:
         const io_sbujA_entry;
         const 2;
         const 54043199823413259;
         const 4294967299;
         const SbuCr_srt+456;
 },
 _cbw8E() //  [R1]
         { []
         }
     {offset
       cbw8E: // global
           I64[Sp] = block_cbw8G_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubw8T; else goto cbw8H;
       ubw8T: // global
           call _cbw8G(R1) args: 0, res: 0, upd: 0;
       cbw8H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw8E_info" {
     block_cbw8E_info:
         const _cbw8E;
         const 1;
         const 30;
 },
 _cbw8G() //  [R1]
         { []
         }
     {offset
       cbw8G: // global
           I64[Sp] = block_cbw8M_info;
           R2 = P64[R1 + 7];
           _sbujH::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbujH::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw8G_info" {
     block_cbw8G_info:
         const _cbw8G;
         const 1;
         const 30;
 },
 _cbw8M() //  []
         { []
         }
     {offset
       cbw8M: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw8M_info" {
     block_cbw8M_info:
         const _cbw8M;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hFileSize1_entry() //  [R2]
         { []
         }
     {offset
       cbw8Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbw8Z; else goto cbw90;
       cbw8Z: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hFileSize1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbw90: // global
           I64[Sp - 8] = block_cbw83_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubw9h; else goto cbw84;
       ubw9h: // global
           call _cbw83(R1) args: 0, res: 0, upd: 0;
       cbw84: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize1_info" {
     GHC.IO.Handle.hFileSize1_info:
         const GHC.IO.Handle.hFileSize1_entry;
         const 0;
         const 126100793861341198;
         const 8589934597;
         const SbuCr_srt+456;
 },
 _cbw83() //  [R1]
         { []
         }
     {offset
       cbw83: // global
           if (R1 & 7 == 1) goto cbw8V; else goto cbw8W;
       cbw8V: // global
           I64[Sp - 16] = block_cbw88_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbw8W: // global
           I64[Sp - 16] = block_cbw8x_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw83_info" {
     block_cbw83_info:
         const _cbw83;
         const 0;
         const 54043199823413278;
         const SbuCr_srt+456;
 },
 _cbw88() //  [R1]
         { []
         }
     {offset
       cbw88: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbw94; else goto cbw93;
       cbw94: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbw93: // global
           I64[Hp - 16] = io_sbujk_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbw8a::P64 = Hp - 15;
           if (R1 == 0) goto cbw98; else goto cbw97;
       cbw98: // global
           R1 = _cbw8a::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbw97: // global
           R1 = _cbw8a::P64;
           Sp = Sp + 24;
           call io_sbujk_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw88_info" {
     block_cbw88_info:
         const _cbw88;
         const 2;
         const 54043199823413278;
         const SbuCr_srt+456;
 },
 _cbw8x() //  [R1]
         { []
         }
     {offset
       cbw8x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbw9c; else goto cbw9b;
       cbw9c: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbw9b: // global
           I64[Hp - 16] = io_sbujA_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbw8z::P64 = Hp - 15;
           if (R1 == 0) goto cbw9g; else goto cbw9f;
       cbw9g: // global
           R1 = _cbw8z::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbw9f: // global
           R1 = _cbw8z::P64;
           Sp = Sp + 24;
           call io_sbujA_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbw8x_info" {
     block_cbw8x_info:
         const _cbw8x;
         const 2;
         const 54043199823413278;
         const SbuCr_srt+456;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.97198562 UTC

[section ""data" . GHC.IO.Handle.hFileSize_closure" {
     GHC.IO.Handle.hFileSize_closure:
         const GHC.IO.Handle.hFileSize_info;
         const 0;
 },
 GHC.IO.Handle.hFileSize_entry() //  [R2]
         { []
         }
     {offset
       cbwao: // global
           R2 = R2;
           call GHC.IO.Handle.hFileSize1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hFileSize_info" {
     GHC.IO.Handle.hFileSize_info:
         const GHC.IO.Handle.hFileSize_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+648;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.976084643 UTC

[section ""data" . lvl21_rbnX3_closure" {
     lvl21_rbnX3_closure:
         const GHC.Base.Just_con_info;
         const GHC.IO.Handle.Internals.handleFinalizer1_closure+3;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:28.993869326 UTC

[section ""data" . GHC.IO.Handle.hDuplicateTo1_closure" {
     GHC.IO.Handle.hDuplicateTo1_closure:
         const GHC.IO.Handle.hDuplicateTo1_info;
         const 0;
 },
 sat_sbuk4_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwaZ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwb0; else goto cbwb1;
       cbwb0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwb1: // global
           I64[Sp - 16] = block_cbwaW_info;
           R6 = R2;
           R5 = P64[R1 + 22];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[R1 + 6];
           _sbujY::P64 = R2;
           R2 = P64[R1 + 14];
           P64[Sp - 24] = lvl21_rbnX3_closure+2;
           P64[Sp - 8] = _sbujY::P64;
           Sp = Sp - 24;
           call dupHandleTo_rbnWN_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuk4_info" {
     sat_sbuk4_info:
         const sat_sbuk4_entry;
         const 3;
         const 12884901896;
         const 8589934597;
         const SbuCr_srt+656;
 },
 _cbwaW() //  [R1]
         { []
         }
     {offset
       cbwaW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwb4; else goto cbwb3;
       cbwb4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwb3: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwaW_info" {
     block_cbwaW_info:
         const _cbwaW;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwcR_srtd" {
     ubwcR_srtd:
         const SbuCr_srt+176;
         const 64;
         const 17293822569102704641;
 },
 sat_sbuk5_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwb5: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbwb6; else goto cbwb7;
       cbwb6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwb7: // global
           I64[Sp - 40] = block_cbwaP_info;
           _sbujT::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _sbujT::P64;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuk5_info" {
     sat_sbuk5_info:
         const sat_sbuk5_entry;
         const 3;
         const 18446744069414584328;
         const 8589934597;
         const ubwcR_srtd;
 },
 section ""relreadonly" . ubwcS_srtd" {
     ubwcS_srtd:
         const SbuCr_srt+176;
         const 64;
         const 12682136550675316737;
 },
 _cbwaP() //  [R1]
         { []
         }
     {offset
       cbwaP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwba; else goto cbwb9;
       cbwba: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwb9: // global
           I64[Hp - 24] = sat_sbuk4_info;
           _sbujN::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sbujN::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           R5 = Hp - 22;
           R4 = P64[Sp + 24];
           R3 = _sbujN::P64;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwaP_info" {
     block_cbwaP_info:
         const _cbwaP;
         const 4;
         const 18446744069414584350;
         const ubwcS_srtd;
 },
 sat_sbukt_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwby: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwbz; else goto cbwbA;
       cbwbz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwbA: // global
           I64[Sp - 16] = block_cbwbv_info;
           R6 = R2;
           R5 = P64[R1 + 22];
           R4 = GHC.Base.Nothing_closure+1;
           R3 = P64[R1 + 6];
           _sbukn::P64 = R2;
           R2 = P64[R1 + 14];
           P64[Sp - 24] = lvl21_rbnX3_closure+2;
           P64[Sp - 8] = _sbukn::P64;
           Sp = Sp - 24;
           call dupHandleTo_rbnWN_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbukt_info" {
     sat_sbukt_info:
         const sat_sbukt_entry;
         const 3;
         const 12884901896;
         const 8589934597;
         const SbuCr_srt+656;
 },
 _cbwbv() //  [R1]
         { []
         }
     {offset
       cbwbv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwbD; else goto cbwbC;
       cbwbD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwbC: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwbv_info" {
     block_cbwbv_info:
         const _cbwbv;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwcT_srtd" {
     ubwcT_srtd:
         const SbuCr_srt+176;
         const 64;
         const 17293822569102704641;
 },
 sat_sbuku_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwbE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbwbF; else goto cbwbG;
       cbwbF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwbG: // global
           I64[Sp - 40] = block_cbwbo_info;
           _sbuki::P64 = R2;
           R2 = R2;
           P64[Sp - 32] = P64[R1 + 6];
           P64[Sp - 24] = P64[R1 + 14];
           P64[Sp - 16] = P64[R1 + 22];
           P64[Sp - 8] = _sbuki::P64;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuku_info" {
     sat_sbuku_info:
         const sat_sbuku_entry;
         const 3;
         const 18446744069414584328;
         const 8589934597;
         const ubwcT_srtd;
 },
 section ""relreadonly" . ubwcU_srtd" {
     ubwcU_srtd:
         const SbuCr_srt+176;
         const 64;
         const 12682136550675316737;
 },
 _cbwbo() //  [R1]
         { []
         }
     {offset
       cbwbo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwbJ; else goto cbwbI;
       cbwbJ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwbI: // global
           I64[Hp - 24] = sat_sbukt_info;
           _sbujN::P64 = P64[Sp + 8];
           P64[Hp - 16] = _sbujN::P64;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 32];
           R5 = Hp - 22;
           R4 = P64[Sp + 24];
           R3 = _sbujN::P64;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwbo_info" {
     block_cbwbo_info:
         const _cbwbo;
         const 4;
         const 18446744069414584350;
         const ubwcU_srtd;
 },
 sat_sbukL_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwc3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwc4; else goto cbwc5;
       cbwc4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwc5: // global
           I64[Sp - 16] = block_cbwc0_info;
           R6 = R2;
           R5 = P64[R1 + 30];
           R4 = P64[R1 + 22];
           R3 = P64[R1 + 6];
           _sbukF::P64 = R2;
           R2 = P64[R1 + 14];
           P64[Sp - 24] = GHC.Base.Nothing_closure+1;
           P64[Sp - 8] = _sbukF::P64;
           Sp = Sp - 24;
           call dupHandleTo_rbnWN_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbukL_info" {
     sat_sbukL_info:
         const sat_sbukL_entry;
         const 4;
         const 4294967304;
         const 8589934597;
         const SbuCr_srt+664;
 },
 _cbwc0() //  [R1]
         { []
         }
     {offset
       cbwc0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwc8; else goto cbwc7;
       cbwc8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwc7: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwc0_info" {
     block_cbwc0_info:
         const _cbwc0;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwcV_srtd" {
     ubwcV_srtd:
         const SbuCr_srt+176;
         const 64;
         const 16140901064495857665;
 },
 sat_sbukM_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwc9: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbwca; else goto cbwcb;
       cbwca: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwcb: // global
           I64[Sp - 48] = block_cbwbT_info;
           _sbukA::P64 = R2;
           R2 = R2;
           P64[Sp - 40] = P64[R1 + 6];
           P64[Sp - 32] = P64[R1 + 14];
           P64[Sp - 24] = P64[R1 + 22];
           P64[Sp - 16] = P64[R1 + 30];
           P64[Sp - 8] = _sbukA::P64;
           Sp = Sp - 48;
           call GHC.IO.Handle.Internals.hClose_help1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbukM_info" {
     sat_sbukM_info:
         const sat_sbukM_entry;
         const 4;
         const 18446744069414584328;
         const 8589934597;
         const ubwcV_srtd;
 },
 section ""relreadonly" . ubwcW_srtd" {
     ubwcW_srtd:
         const SbuCr_srt+176;
         const 64;
         const 11529215046068469761;
 },
 _cbwbT() //  [R1]
         { []
         }
     {offset
       cbwbT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cbwce; else goto cbwcd;
       cbwce: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwcd: // global
           I64[Hp - 32] = sat_sbukL_info;
           _sbujN::P64 = P64[Sp + 8];
           P64[Hp - 24] = _sbujN::P64;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 32];
           P64[Hp] = P64[Sp + 40];
           R5 = Hp - 30;
           R4 = P64[Sp + 24];
           R3 = _sbujN::P64;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 48;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwbT_info" {
     block_cbwbT_info:
         const _cbwbT;
         const 5;
         const 18446744069414584350;
         const ubwcW_srtd;
 },
 section ""relreadonly" . ubwcX_srtd" {
     ubwcX_srtd:
         const SbuCr_srt+176;
         const 66;
         const 17293822569102704645;
         const 3;
 },
 GHC.IO.Handle.hDuplicateTo1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbwcj: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbwck; else goto cbwcl;
       cbwck: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hDuplicateTo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbwcl: // global
           I64[Sp - 16] = block_cbwaA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubwcQ; else goto cbwaB;
       ubwcQ: // global
           call _cbwaA(R1) args: 0, res: 0, upd: 0;
       cbwaB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicateTo1_info" {
     GHC.IO.Handle.hDuplicateTo1_info:
         const GHC.IO.Handle.hDuplicateTo1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubwcX_srtd;
 },
 section ""relreadonly" . ubwcY_srtd" {
     ubwcY_srtd:
         const SbuCr_srt+176;
         const 65;
         const 17293822569102704645;
         const 1;
 },
 _cbwaA() //  [R1]
         { []
         }
     {offset
       cbwaA: // global
           _sbujL::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbwcg; else goto cbwch;
       cbwcg: // global
           I64[Sp - 16] = block_cbwaF_info;
           _sbujN::P64 = R1;
           _sbujO::P64 = P64[R1 + 7];
           _sbujP::P64 = P64[R1 + 15];
           R1 = _sbujL::P64;
           P64[Sp - 8] = _sbujP::P64;
           P64[Sp] = _sbujO::P64;
           P64[Sp + 8] = _sbujN::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubwcM; else goto cbwaG;
       ubwcM: // global
           call _cbwaF(R1) args: 0, res: 0, upd: 0;
       cbwaG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cbwch: // global
           I64[Sp - 24] = block_cbwbd_info;
           _sbujN::P64 = R1;
           _sbuk9::P64 = P64[R1 + 6];
           _sbuka::P64 = P64[R1 + 14];
           _sbukb::P64 = P64[R1 + 22];
           R1 = _sbujL::P64;
           P64[Sp - 16] = _sbuka::P64;
           P64[Sp - 8] = _sbukb::P64;
           P64[Sp] = _sbuk9::P64;
           P64[Sp + 8] = _sbujN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubwcN; else goto cbwbe;
       ubwcN: // global
           call _cbwbd(R1) args: 0, res: 0, upd: 0;
       cbwbe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwaA_info" {
     block_cbwaA_info:
         const _cbwaA;
         const 1;
         const 18446744069414584350;
         const ubwcY_srtd;
 },
 section ""relreadonly" . ubwcZ_srtd" {
     ubwcZ_srtd:
         const SbuCr_srt+176;
         const 65;
         const 17293822569102704645;
         const 1;
 },
 _cbwaF() //  [R1]
         { []
         }
     {offset
       cbwaF: // global
           if (R1 & 7 == 1) goto cbwco; else goto ubwcL;
       cbwco: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwcr; else goto cbwcq;
       cbwcr: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwcq: // global
           _sbujS::P64 = P64[R1 + 15];
           I64[Hp - 24] = sat_sbuk5_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R5 = Hp - 22;
           R4 = _sbujS::P64;
           R3 = R1;
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.$wwithHandle__'_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       ubwcL: // global
           Sp = Sp + 24;
           call _cbwcA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cbwaF_info" {
     block_cbwaF_info:
         const _cbwaF;
         const 3;
         const 18446744069414584350;
         const ubwcZ_srtd;
 },
 section ""relreadonly" . ubwd0_srtd" {
     ubwd0_srtd:
         const SbuCr_srt+176;
         const 65;
         const 17293822569102704645;
         const 1;
 },
 _cbwbd() //  [R1]
         { []
         }
     {offset
       cbwbd: // global
           if (R1 & 7 == 1) goto ubwcK; else goto cbwcB;
       ubwcK: // global
           Sp = Sp + 32;
           call _cbwcA() args: 0, res: 0, upd: 0;
       cbwcB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwcE; else goto cbwcD;
       cbwcE: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwcD: // global
           _sbukg::P64 = P64[R1 + 14];
           _sbukh::P64 = P64[R1 + 22];
           I64[Hp - 24] = sat_sbuku_info;
           P64[Hp - 16] = P64[Sp + 32];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 16] = block_cbwbK_info;
           R5 = Hp - 22;
           R4 = _sbukh::P64;
           R3 = R1;
           R2 = lvl1_rbnWC_closure;
           P64[Sp - 8] = _sbukg::P64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wwithHandle__'_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwbd_info" {
     block_cbwbd_info:
         const _cbwbd;
         const 4;
         const 18446744069414584350;
         const ubwd0_srtd;
 },
 _cbwcA() //  []
         { []
         }
     {offset
       cbwcA: // global
           R2 = P64[Sp];
           Sp = Sp + 8;
           call ioe_dupHandlesNotCompatible_rbnWF_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubwd1_srtd" {
     ubwd1_srtd:
         const SbuCr_srt+176;
         const 65;
         const 16140901064495857665;
         const 1;
 },
 _cbwbK() //  [R1]
         { []
         }
     {offset
       cbwbK: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbwcH; else goto cbwcG;
       cbwcH: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwcG: // global
           I64[Hp - 64] = GHC.MVar.MVar_con_info;
           P64[Hp - 56] = P64[Sp + 32];
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = sat_sbukM_info;
           P64[Hp - 24] = P64[Sp + 48];
           P64[Hp - 16] = P64[Sp + 40];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = Hp - 46;
           R5 = Hp - 30;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = lvl1_rbnWC_closure;
           Sp = Sp + 56;
           call GHC.IO.Handle.Internals.$wwithHandle__'_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwbK_info" {
     block_cbwbK_info:
         const _cbwbK;
         const 6;
         const 18446744069414584350;
         const ubwd1_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.034272597 UTC

[section ""data" . GHC.IO.Handle.hDuplicateTo_closure" {
     GHC.IO.Handle.hDuplicateTo_closure:
         const GHC.IO.Handle.hDuplicateTo_info;
         const 0;
 },
 GHC.IO.Handle.hDuplicateTo_entry() //  [R2, R3]
         { []
         }
     {offset
       cbwfp: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hDuplicateTo1_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicateTo_info" {
     GHC.IO.Handle.hDuplicateTo_info:
         const GHC.IO.Handle.hDuplicateTo_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbuCr_srt+696;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.037182355 UTC

[section ""cstring" . lvl22_rbnX4_bytes" {
     lvl22_rbnX4_bytes:
         I8[] [104,68,117,112,108,105,99,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.0396592 UTC

[section ""data" . lvl23_rbnX5_closure" {
     lvl23_rbnX5_closure:
         const lvl23_rbnX5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl23_rbnX5_entry() //  [R1]
         { []
         }
     {offset
       cbwfD: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwfE; else goto cbwfF;
       cbwfE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwfF: // global
           (_cbwfA::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwfA::I64 == 0) goto cbwfC; else goto cbwfB;
       cbwfC: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwfB: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwfA::I64;
           R2 = lvl22_rbnX4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl23_rbnX5_info" {
     lvl23_rbnX5_info:
         const lvl23_rbnX5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.043089823 UTC

[section ""cstring" . lvl24_rbnX6_bytes" {
     lvl24_rbnX6_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,73,79,47,72,97,110,100,108,101,46,104,115,58,54,50,54,58,51,45,51,51]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.045283725 UTC

[section ""data" . lvl25_rbnX7_closure" {
     lvl25_rbnX7_closure:
         const lvl25_rbnX7_info;
         const 0;
 },
 lvl25_rbnX7_entry() //  []
         { []
         }
     {offset
       cbwfV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbwfW; else goto cbwfX;
       cbwfW: // global
           R1 = lvl25_rbnX7_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwfX: // global
           I64[Sp - 8] = block_cbwfT_info;
           R2 = lvl24_rbnX6_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl25_rbnX7_info" {
     lvl25_rbnX7_info:
         const lvl25_rbnX7_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SbuCr_srt+704;
 },
 _cbwfT() //  [R1]
         { []
         }
     {offset
       cbwfT: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwfT_info" {
     block_cbwfT_info:
         const _cbwfT;
         const 0;
         const 4294967326;
         const SbuCr_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.049637161 UTC

[section ""cstring" . lvl26_rbnX8_bytes" {
     lvl26_rbnX8_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,73,79,47,72,97,110,100,108,101,46,104,115,58,54,50,51,58,51,45,51,53]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.052251035 UTC

[section ""data" . lvl27_rbnX9_closure" {
     lvl27_rbnX9_closure:
         const lvl27_rbnX9_info;
         const 0;
 },
 lvl27_rbnX9_entry() //  []
         { []
         }
     {offset
       cbwgh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbwgi; else goto cbwgj;
       cbwgi: // global
           R1 = lvl27_rbnX9_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwgj: // global
           I64[Sp - 8] = block_cbwgf_info;
           R2 = lvl26_rbnX8_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl27_rbnX9_info" {
     lvl27_rbnX9_info:
         const lvl27_rbnX9_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SbuCr_srt+712;
 },
 _cbwgf() //  [R1]
         { []
         }
     {offset
       cbwgf: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwgf_info" {
     block_cbwgf_info:
         const _cbwgf;
         const 0;
         const 4294967326;
         const SbuCr_srt+712;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.066677398 UTC

[section ""data" . GHC.IO.Handle.hDuplicate1_closure" {
     GHC.IO.Handle.hDuplicate1_closure:
         const GHC.IO.Handle.hDuplicate1_info;
         const 0;
 },
 section ""relreadonly" . ubwjd_srtd" {
     ubwjd_srtd:
         const SbuCr_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 sat_sbulp_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwgN: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cbwgX; else goto cbwgY;
       cbwgX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwgY: // global
           I64[Sp - 16] = block_cbwgK_info;
           _sbukU::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbukU::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubwh5; else goto cbwgL;
       ubwh5: // global
           call _cbwgK(R1) args: 0, res: 0, upd: 0;
       cbwgL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbulp_info" {
     sat_sbulp_info:
         const sat_sbulp_entry;
         const 1;
         const 18446744069414584329;
         const 8589934597;
         const ubwjd_srtd;
 },
 section ""relreadonly" . ubwje_srtd" {
     ubwje_srtd:
         const SbuCr_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 _cbwgK() //  [R1]
         { []
         }
     {offset
       cbwgK: // global
           I64[Sp - 40] = block_cbwgQ_info;
           R2 = R1;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 31];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwgK_info" {
     block_cbwgK_info:
         const _cbwgK;
         const 1;
         const 18446744069414584350;
         const ubwje_srtd;
 },
 section ""relreadonly" . ubwjf_srtd" {
     ubwjf_srtd:
         const SbuCr_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbwgQ() //  []
         { []
         }
     {offset
       cbwgQ: // global
           I64[Sp] = block_cbwgS_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 16;
           call GHC.IO.Device.dup_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwgQ_info" {
     block_cbwgQ_info:
         const _cbwgQ;
         const 6;
         const 18446744069414584350;
         const ubwjf_srtd;
 },
 section ""relreadonly" . ubwjg_srtd" {
     ubwjg_srtd:
         const SbuCr_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbwgS() //  [R1]
         { []
         }
     {offset
       cbwgS: // global
           I64[Sp + 32] = block_cbwgU_info;
           R6 = P64[Sp + 48];
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = P64[Sp + 40];
           P64[Sp + 24] = lvl21_rbnX3_closure+2;
           Sp = Sp + 8;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwgS_info" {
     block_cbwgS_info:
         const _cbwgS;
         const 518;
         const 18446744069414584350;
         const ubwjg_srtd;
 },
 _cbwgU() //  [R1]
         { []
         }
     {offset
       cbwgU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwh4; else goto cbwh3;
       cbwh4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwh3: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwgU_info" {
     block_cbwgU_info:
         const _cbwgU;
         const 130;
         const 30;
 },
 section ""relreadonly" . ubwjh_srtd" {
     ubwjh_srtd:
         const SbuCr_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 sat_sbulW_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwhg: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cbwhq; else goto cbwhr;
       cbwhq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwhr: // global
           I64[Sp - 16] = block_cbwhd_info;
           _sbulq::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbulq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubwhy; else goto cbwhe;
       ubwhy: // global
           call _cbwhd(R1) args: 0, res: 0, upd: 0;
       cbwhe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbulW_info" {
     sat_sbulW_info:
         const sat_sbulW_entry;
         const 1;
         const 18446744069414584329;
         const 8589934597;
         const ubwjh_srtd;
 },
 section ""relreadonly" . ubwji_srtd" {
     ubwji_srtd:
         const SbuCr_srt+96;
         const 71;
         const 32769;
         const 64;
 },
 _cbwhd() //  [R1]
         { []
         }
     {offset
       cbwhd: // global
           I64[Sp - 40] = block_cbwhj_info;
           R2 = R1;
           P64[Sp - 32] = P64[R1 + 7];
           P64[Sp - 24] = P64[R1 + 15];
           P64[Sp - 16] = P64[R1 + 23];
           P64[Sp - 8] = P64[R1 + 31];
           P64[Sp] = R1;
           Sp = Sp - 40;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhd_info" {
     block_cbwhd_info:
         const _cbwhd;
         const 1;
         const 18446744069414584350;
         const ubwji_srtd;
 },
 section ""relreadonly" . ubwjj_srtd" {
     ubwjj_srtd:
         const SbuCr_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbwhj() //  []
         { []
         }
     {offset
       cbwhj: // global
           I64[Sp] = block_cbwhl_info;
           R2 = P64[Sp + 8];
           I64[Sp - 16] = stg_ap_pv_info;
           P64[Sp - 8] = P64[Sp + 32];
           Sp = Sp - 16;
           call GHC.IO.Device.dup_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhj_info" {
     block_cbwhj_info:
         const _cbwhj;
         const 6;
         const 18446744069414584350;
         const ubwjj_srtd;
 },
 section ""relreadonly" . ubwjk_srtd" {
     ubwjk_srtd:
         const SbuCr_srt+216;
         const 56;
         const 36028797018963969;
 },
 _cbwhl() //  [R1]
         { []
         }
     {offset
       cbwhl: // global
           I64[Sp + 32] = block_cbwhn_info;
           R6 = P64[Sp + 48];
           R5 = R1;
           R4 = P64[Sp + 24];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 16] = P64[Sp + 40];
           P64[Sp + 24] = lvl21_rbnX3_closure+2;
           Sp = Sp + 8;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhl_info" {
     block_cbwhl_info:
         const _cbwhl;
         const 518;
         const 18446744069414584350;
         const ubwjk_srtd;
 },
 _cbwhn() //  [R1]
         { []
         }
     {offset
       cbwhn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwhx; else goto cbwhw;
       cbwhx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwhw: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhn_info" {
     block_cbwhn_info:
         const _cbwhn;
         const 130;
         const 30;
 },
 sat_sbumO_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwi2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cbwi8; else goto cbwi9;
       cbwi8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwi9: // global
           I64[Sp - 32] = block_cbwhZ_info;
           _sbulq::P64 = P64[R1 + 6];
           _sbum4::P64 = P64[R1 + 14];
           _sbum7::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sbulq::P64;
           P64[Sp - 16] = _sbum4::P64;
           P64[Sp - 8] = _sbum7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubwie; else goto cbwi0;
       ubwie: // global
           call _cbwhZ(R1) args: 0, res: 0, upd: 0;
       cbwi0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbumO_info" {
     sat_sbumO_info:
         const sat_sbumO_entry;
         const 3;
         const 4294967304;
         const 8589934597;
         const SbuCr_srt+728;
 },
 _cbwhZ() //  [R1]
         { []
         }
     {offset
       cbwhZ: // global
           _sbum4::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbwi5_info;
           R6 = P64[Sp + 8];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sbum4::P64;
           P64[Sp] = P64[Sp + 24];
           P64[Sp + 8] = GHC.Base.Nothing_closure+1;
           P64[Sp + 24] = R1;
           Sp = Sp - 8;
           call dupHandle__rbnWK_entry(R6,
                                       R5,
                                       R4,
                                       R3,
                                       R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhZ_info" {
     block_cbwhZ_info:
         const _cbwhZ;
         const 3;
         const 4294967326;
         const SbuCr_srt+728;
 },
 _cbwi5() //  [R1]
         { []
         }
     {offset
       cbwi5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwid; else goto cbwic;
       cbwid: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwic: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwi5_info" {
     block_cbwi5_info:
         const _cbwi5;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwjl_srtd" {
     ubwjl_srtd:
         const SbuCr_srt+96;
         const 81;
         const 1;
         const 98816;
 },
 sat_sbumT_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwif: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbwij; else goto cbwik;
       cbwij: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwik: // global
           I64[Sp - 40] = block_cbwhN_info;
           _sbukT::P64 = P64[R1 + 6];
           _sbulq::P64 = P64[R1 + 14];
           _sbum2::P64 = P64[R1 + 22];
           _sbum4::P64 = P64[R1 + 30];
           R1 = R2;
           P64[Sp - 32] = _sbukT::P64;
           P64[Sp - 24] = _sbulq::P64;
           P64[Sp - 16] = _sbum2::P64;
           P64[Sp - 8] = _sbum4::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubwis; else goto cbwhO;
       ubwis: // global
           call _cbwhN(R1) args: 0, res: 0, upd: 0;
       cbwhO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbumT_info" {
     sat_sbumT_info:
         const sat_sbumT_entry;
         const 4;
         const 18446744069414584328;
         const 8589934597;
         const ubwjl_srtd;
 },
 section ""relreadonly" . ubwjm_srtd" {
     ubwjm_srtd:
         const SbuCr_srt+96;
         const 81;
         const 1;
         const 98816;
 },
 _cbwhN() //  [R1]
         { []
         }
     {offset
       cbwhN: // global
           I64[Sp - 8] = block_cbwhS_info;
           R2 = R1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.flushBuffer1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhN_info" {
     block_cbwhN_info:
         const _cbwhN;
         const 4;
         const 18446744069414584350;
         const ubwjm_srtd;
 },
 _cbwhS() //  [R1]
         { []
         }
     {offset
       cbwhS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwio; else goto cbwin;
       cbwio: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwin: // global
           I64[Hp - 24] = sat_sbumO_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 40];
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_cbwig_info;
           R5 = Hp - 22;
           R4 = P64[Sp + 32];
           R3 = P64[Sp + 16];
           R2 = lvl7_rbnWP_closure;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhS_info" {
     block_cbwhS_info:
         const _cbwhS;
         const 5;
         const 828928688158;
         const SbuCr_srt+680;
 },
 _cbwig() //  [R1]
         { []
         }
     {offset
       cbwig: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwir; else goto cbwiq;
       cbwir: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwiq: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwig_info" {
     block_cbwig_info:
         const _cbwig;
         const 1925;
         const 30;
 },
 section ""relreadonly" . ubwjn_srtd" {
     ubwjn_srtd:
         const SbuCr_srt+96;
         const 83;
         const 1;
         const 512576;
 },
 GHC.IO.Handle.hDuplicate1_entry() //  [R2]
         { []
         }
     {offset
       cbwix: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbwiy; else goto cbwiz;
       cbwiy: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hDuplicate1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwiz: // global
           I64[Sp - 8] = block_cbwgA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwjb; else goto cbwgB;
       ubwjb: // global
           call _cbwgA(R1) args: 0, res: 0, upd: 0;
       cbwgB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicate1_info" {
     GHC.IO.Handle.hDuplicate1_info:
         const GHC.IO.Handle.hDuplicate1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwjn_srtd;
 },
 section ""relreadonly" . ubwjo_srtd" {
     ubwjo_srtd:
         const SbuCr_srt+96;
         const 83;
         const 1;
         const 381504;
 },
 _cbwgA() //  [R1]
         { []
         }
     {offset
       cbwgA: // global
           if (R1 & 7 == 1) goto cbwiu; else goto cbwiv;
       cbwiu: // global
           Hp = Hp + 16;
           _sbukT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwiF; else goto cbwiB;
       cbwiB: // global
           _sbukU::P64 = P64[_sbukT::P64 + 7];
           _sbukV::P64 = P64[_sbukT::P64 + 15];
           I64[Hp - 8] = sat_sbulp_info;
           P64[Hp] = _sbukU::P64;
           R5 = Hp - 6;
           R4 = _sbukV::P64;
           R3 = _sbukT::P64;
           R2 = lvl23_rbnX5_closure;
           Sp = Sp + 8;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
       cbwiv: // global
           Hp = Hp + 16;
           _sbukT::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwiF; else goto cbwiE;
       cbwiF: // global
           HpAlloc = 16;
           R1 = _sbukT::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwiE: // global
           _sbulq::P64 = P64[_sbukT::P64 + 6];
           _sbulr::P64 = P64[_sbukT::P64 + 14];
           _sbuls::P64 = P64[_sbukT::P64 + 22];
           I64[Hp - 8] = sat_sbulW_info;
           P64[Hp] = _sbulq::P64;
           I64[Sp - 24] = block_cbwhz_info;
           R5 = Hp - 6;
           R4 = _sbuls::P64;
           R3 = _sbukT::P64;
           R2 = lvl23_rbnX5_closure;
           P64[Sp - 16] = _sbulq::P64;
           P64[Sp - 8] = _sbulr::P64;
           P64[Sp] = _sbukT::P64;
           Sp = Sp - 24;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwgA_info" {
     block_cbwgA_info:
         const _cbwgA;
         const 0;
         const 18446744069414584350;
         const ubwjo_srtd;
 },
 section ""relreadonly" . ubwjp_srtd" {
     ubwjp_srtd:
         const SbuCr_srt+96;
         const 83;
         const 1;
         const 381440;
 },
 _cbwhz() //  [R1]
         { []
         }
     {offset
       cbwhz: // global
           I64[Sp] = block_cbwhB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwja; else goto cbwhC;
       ubwja: // global
           call _cbwhB(R1) args: 0, res: 0, upd: 0;
       cbwhC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhz_info" {
     block_cbwhz_info:
         const _cbwhz;
         const 3;
         const 18446744069414584350;
         const ubwjp_srtd;
 },
 section ""relreadonly" . ubwjq_srtd" {
     ubwjq_srtd:
         const SbuCr_srt+96;
         const 83;
         const 1;
         const 381440;
 },
 _cbwhB() //  [R1]
         { []
         }
     {offset
       cbwhB: // global
           if (R1 & 7 == 1) goto cbwiL; else goto cbwj7;
       cbwiL: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbwiO; else goto cbwiN;
       cbwiO: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwiN: // global
           _sbum2::P64 = P64[R1 + 15];
           I64[Hp - 64] = GHC.MVar.MVar_con_info;
           P64[Hp - 56] = _sbum2::P64;
           I64[Hp - 48] = GHC.Base.Just_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = sat_sbumT_info;
           _sbukT::P64 = P64[Sp + 24];
           P64[Hp - 24] = _sbukT::P64;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sbum2::P64;
           P64[Hp] = Hp - 46;
           I64[Sp] = block_cbwiH_info;
           R5 = Hp - 30;
           R4 = P64[Sp + 16];
           R3 = _sbukT::P64;
           R2 = lvl23_rbnX5_closure;
           P64[Sp + 24] = _sbum2::P64;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
       cbwj7: // global
           Sp = Sp + 32;
           call lvl27_rbnX9_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwhB_info" {
     block_cbwhB_info:
         const _cbwhB;
         const 3;
         const 18446744069414584350;
         const ubwjq_srtd;
 },
 _cbwiH() //  [R1]
         { []
         }
     {offset
       cbwiH: // global
           I64[Sp] = block_cbwiJ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwjc; else goto cbwiQ;
       ubwjc: // global
           call _cbwiJ(R1) args: 0, res: 0, upd: 0;
       cbwiQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwiH_info" {
     block_cbwiH_info:
         const _cbwiH;
         const 131;
         const 4294967326;
         const SbuCr_srt+704;
 },
 _cbwiJ() //  [R1]
         { []
         }
     {offset
       cbwiJ: // global
           if (R1 & 7 == 1) goto cbwiW; else goto cbwj3;
       cbwiW: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwiZ; else goto cbwiY;
       cbwiZ: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwiY: // global
           _sbumZ::P64 = P64[R1 + 15];
           I64[Hp - 24] = GHC.IO.Handle.Types.DuplexHandle_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = _sbumZ::P64;
           P64[Hp] = P64[Sp + 24];
           R1 = Hp - 22;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbwj3: // global
           Sp = Sp + 32;
           call lvl25_rbnX7_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwiJ_info" {
     block_cbwiJ_info:
         const _cbwiJ;
         const 131;
         const 4294967326;
         const SbuCr_srt+704;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.115834303 UTC

[section ""data" . GHC.IO.Handle.hDuplicate_closure" {
     GHC.IO.Handle.hDuplicate_closure:
         const GHC.IO.Handle.hDuplicate_info;
         const 0;
 },
 GHC.IO.Handle.hDuplicate_entry() //  [R2]
         { []
         }
     {offset
       cbwmg: // global
           R2 = R2;
           call GHC.IO.Handle.hDuplicate1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hDuplicate_info" {
     GHC.IO.Handle.hDuplicate_info:
         const GHC.IO.Handle.hDuplicate_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+744;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.118744534 UTC

[section ""cstring" . GHC.IO.Handle.hGetEcho4_bytes" {
     GHC.IO.Handle.hGetEcho4_bytes:
         I8[] [104,71,101,116,69,99,104,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.120923758 UTC

[section ""data" . GHC.IO.Handle.hGetEcho3_closure" {
     GHC.IO.Handle.hGetEcho3_closure:
         const GHC.IO.Handle.hGetEcho3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetEcho3_entry() //  [R1]
         { []
         }
     {offset
       cbwmu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwmv; else goto cbwmw;
       cbwmv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwmw: // global
           (_cbwmr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwmr::I64 == 0) goto cbwmt; else goto cbwms;
       cbwmt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwms: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwmr::I64;
           R2 = GHC.IO.Handle.hGetEcho4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho3_info" {
     GHC.IO.Handle.hGetEcho3_info:
         const GHC.IO.Handle.hGetEcho3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.127067484 UTC

[section ""data" . GHC.IO.Handle.hGetEcho2_closure" {
     GHC.IO.Handle.hGetEcho2_closure:
         const GHC.IO.Handle.hGetEcho2_info;
         const 0;
 },
 GHC.IO.Handle.hGetEcho2_entry() //  [R2]
         { []
         }
     {offset
       cbwmM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbwmN; else goto cbwmO;
       cbwmN: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwmO: // global
           I64[Sp - 8] = block_cbwmJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwnc; else goto cbwmK;
       ubwnc: // global
           call _cbwmJ(R1) args: 0, res: 0, upd: 0;
       cbwmK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho2_info" {
     GHC.IO.Handle.hGetEcho2_info:
         const GHC.IO.Handle.hGetEcho2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbuCr_srt+760;
 },
 _cbwmJ() //  [R1]
         { []
         }
     {offset
       cbwmJ: // global
           I64[Sp - 24] = block_cbwmR_info;
           _sbun9::P64 = R1;
           _sbuna::P64 = P64[R1 + 7];
           _sbund::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbuna::P64;
           P64[Sp - 8] = _sbund::P64;
           P64[Sp] = _sbun9::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubwnb; else goto cbwmT;
       ubwnb: // global
           call _cbwmR(R1) args: 0, res: 0, upd: 0;
       cbwmT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwmJ_info" {
     block_cbwmJ_info:
         const _cbwmJ;
         const 0;
         const 4294967326;
         const SbuCr_srt+768;
 },
 _cbwmR() //  [R1]
         { []
         }
     {offset
       cbwmR: // global
           if (R1 & 7 == 1) goto cbwn9; else goto cbwn2;
       cbwn9: // global
           Sp = Sp + 32;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbwn2: // global
           _sbund::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbwmX_info;
           R2 = P64[Sp + 8];
           I64[Sp] = stg_ap_pv_info;
           P64[Sp + 8] = _sbund::P64;
           call GHC.IO.Device.getEcho_entry(R2) args: 24, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwmR_info" {
     block_cbwmR_info:
         const _cbwmR;
         const 3;
         const 4294967326;
         const SbuCr_srt+768;
 },
 _cbwmX() //  [R1]
         { []
         }
     {offset
       cbwmX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwn5; else goto cbwn4;
       cbwn5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwn4: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwmX_info" {
     block_cbwmX_info:
         const _cbwmX;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.140238731 UTC

[section ""data" . GHC.IO.Handle.hGetEcho1_closure" {
     GHC.IO.Handle.hGetEcho1_closure:
         const GHC.IO.Handle.hGetEcho1_info;
         const 0;
 },
 section ""relreadonly" . ubwpc_srtd" {
     ubwpc_srtd:
         const SbuCr_srt+456;
         const 41;
         const 1374389534721;
 },
 io_sbunI_entry() //  [R1]
         { []
         }
     {offset
       cbwo5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwo9; else goto cbwoa;
       cbwo9: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwoa: // global
           I64[Sp - 16] = block_cbwo0_info;
           _sbunE::P64 = P64[R1 + 15];
           R5 = _sbunE::P64;
           R4 = GHC.IO.Handle.hGetEcho2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho3_closure;
           P64[Sp - 8] = _sbunE::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbunI_info" {
     io_sbunI_info:
         const io_sbunI_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubwpc_srtd;
 },
 _cbwo0() //  [R1]
         { []
         }
     {offset
       cbwo0: // global
           I64[Sp] = block_cbwo2_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwof; else goto cbwo3;
       ubwof: // global
           call _cbwo2(R1) args: 0, res: 0, upd: 0;
       cbwo3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwo0_info" {
     block_cbwo0_info:
         const _cbwo0;
         const 1;
         const 30;
 },
 _cbwo2() //  [R1]
         { []
         }
     {offset
       cbwo2: // global
           I64[Sp] = block_cbwo8_info;
           R2 = P64[R1 + 7];
           _sbunP::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbunP::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwo2_info" {
     block_cbwo2_info:
         const _cbwo2;
         const 1;
         const 30;
 },
 _cbwo8() //  []
         { []
         }
     {offset
       cbwo8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwo8_info" {
     block_cbwo8_info:
         const _cbwo8;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwpd_srtd" {
     ubwpd_srtd:
         const SbuCr_srt+456;
         const 41;
         const 1374389534721;
 },
 io_sbunY_entry() //  [R1]
         { []
         }
     {offset
       cbwou: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwoy; else goto cbwoz;
       cbwoy: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwoz: // global
           I64[Sp - 16] = block_cbwop_info;
           _sbunT::P64 = P64[R1 + 15];
           R5 = _sbunT::P64;
           R4 = GHC.IO.Handle.hGetEcho2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetEcho3_closure;
           P64[Sp - 8] = _sbunT::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbunY_info" {
     io_sbunY_info:
         const io_sbunY_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubwpd_srtd;
 },
 _cbwop() //  [R1]
         { []
         }
     {offset
       cbwop: // global
           I64[Sp] = block_cbwor_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwoE; else goto cbwos;
       ubwoE: // global
           call _cbwor(R1) args: 0, res: 0, upd: 0;
       cbwos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwop_info" {
     block_cbwop_info:
         const _cbwop;
         const 1;
         const 30;
 },
 _cbwor() //  [R1]
         { []
         }
     {offset
       cbwor: // global
           I64[Sp] = block_cbwox_info;
           R2 = P64[R1 + 7];
           _sbuo5::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuo5::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwor_info" {
     block_cbwor_info:
         const _cbwor;
         const 1;
         const 30;
 },
 _cbwox() //  []
         { []
         }
     {offset
       cbwox: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwox_info" {
     block_cbwox_info:
         const _cbwox;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwpe_srtd" {
     ubwpe_srtd:
         const SbuCr_srt+160;
         const 79;
         const 137438953473;
         const 26624;
 },
 GHC.IO.Handle.hGetEcho1_entry() //  [R2]
         { []
         }
     {offset
       cbwoJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwoK; else goto cbwoL;
       cbwoK: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetEcho1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwoL: // global
           I64[Sp - 16] = block_cbwnG_info;
           _sbunw::P64 = R2;
           R2 = R2;
           P64[Sp - 8] = _sbunw::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.hGetEcho5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho1_info" {
     GHC.IO.Handle.hGetEcho1_info:
         const GHC.IO.Handle.hGetEcho1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwpe_srtd;
 },
 section ""relreadonly" . ubwpf_srtd" {
     ubwpf_srtd:
         const SbuCr_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbwnG() //  [R1]
         { []
         }
     {offset
       cbwnG: // global
           I64[Sp] = block_cbwnI_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwpa; else goto cbwnJ;
       ubwpa: // global
           call _cbwnI(R1) args: 0, res: 0, upd: 0;
       cbwnJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwnG_info" {
     block_cbwnG_info:
         const _cbwnG;
         const 1;
         const 18446744069414584350;
         const ubwpf_srtd;
 },
 section ""relreadonly" . ubwpg_srtd" {
     ubwpg_srtd:
         const SbuCr_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbwnI() //  [R1]
         { []
         }
     {offset
       cbwnI: // global
           if (R1 & 7 == 1) goto cbwoG; else goto cbwoH;
       cbwoG: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbwoH: // global
           _sbunw::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbwnO_info;
           R1 = _sbunw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubwpb; else goto cbwnP;
       ubwpb: // global
           call _cbwnO(R1) args: 0, res: 0, upd: 0;
       cbwnP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwnI_info" {
     block_cbwnI_info:
         const _cbwnI;
         const 1;
         const 18446744069414584350;
         const ubwpg_srtd;
 },
 section ""relreadonly" . ubwph_srtd" {
     ubwph_srtd:
         const SbuCr_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbwnO() //  [R1]
         { []
         }
     {offset
       cbwnO: // global
           if (R1 & 7 == 1) goto cbwoS; else goto cbwp1;
       cbwoS: // global
           I64[Sp - 16] = block_cbwnT_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbwp1: // global
           I64[Sp - 16] = block_cbwoi_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwnO_info" {
     block_cbwnO_info:
         const _cbwnO;
         const 0;
         const 18446744069414584350;
         const ubwph_srtd;
 },
 section ""relreadonly" . ubwpi_srtd" {
     ubwpi_srtd:
         const SbuCr_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbwnT() //  [R1]
         { []
         }
     {offset
       cbwnT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwoV; else goto cbwoU;
       cbwoV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwoU: // global
           I64[Hp - 16] = io_sbunI_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwnV::P64 = Hp - 15;
           if (R1 == 0) goto cbwoZ; else goto cbwoY;
       cbwoZ: // global
           R1 = _cbwnV::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwoY: // global
           R1 = _cbwnV::P64;
           Sp = Sp + 24;
           call io_sbunI_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwnT_info" {
     block_cbwnT_info:
         const _cbwnT;
         const 2;
         const 18446744069414584350;
         const ubwpi_srtd;
 },
 section ""relreadonly" . ubwpj_srtd" {
     ubwpj_srtd:
         const SbuCr_srt+456;
         const 41;
         const 1374389534721;
 },
 _cbwoi() //  [R1]
         { []
         }
     {offset
       cbwoi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwp4; else goto cbwp3;
       cbwp4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwp3: // global
           I64[Hp - 16] = io_sbunY_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwok::P64 = Hp - 15;
           if (R1 == 0) goto cbwp8; else goto cbwp7;
       cbwp8: // global
           R1 = _cbwok::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwp7: // global
           R1 = _cbwok::P64;
           Sp = Sp + 24;
           call io_sbunY_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwoi_info" {
     block_cbwoi_info:
         const _cbwoi;
         const 2;
         const 18446744069414584350;
         const ubwpj_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.169478951 UTC

[section ""data" . GHC.IO.Handle.hGetEcho_closure" {
     GHC.IO.Handle.hGetEcho_closure:
         const GHC.IO.Handle.hGetEcho_info;
         const 0;
 },
 GHC.IO.Handle.hGetEcho_entry() //  [R2]
         { []
         }
     {offset
       cbwqL: // global
           R2 = R2;
           call GHC.IO.Handle.hGetEcho1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetEcho_info" {
     GHC.IO.Handle.hGetEcho_info:
         const GHC.IO.Handle.hGetEcho_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+784;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.172420175 UTC

[section ""cstring" . GHC.IO.Handle.hSetEcho3_bytes" {
     GHC.IO.Handle.hSetEcho3_bytes:
         I8[] [104,83,101,116,69,99,104,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.174639034 UTC

[section ""data" . GHC.IO.Handle.hSetEcho2_closure" {
     GHC.IO.Handle.hSetEcho2_closure:
         const GHC.IO.Handle.hSetEcho2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hSetEcho2_entry() //  [R1]
         { []
         }
     {offset
       cbwqZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwr0; else goto cbwr1;
       cbwr0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwr1: // global
           (_cbwqW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwqW::I64 == 0) goto cbwqY; else goto cbwqX;
       cbwqY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwqX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwqW::I64;
           R2 = GHC.IO.Handle.hSetEcho3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEcho2_info" {
     GHC.IO.Handle.hSetEcho2_info:
         const GHC.IO.Handle.hSetEcho2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.188297467 UTC

[section ""data" . GHC.IO.Handle.hSetEcho1_closure" {
     GHC.IO.Handle.hSetEcho1_closure:
         const GHC.IO.Handle.hSetEcho1_info;
         const 0;
 },
 sat_sbuoM_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwrG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbwrH; else goto cbwrI;
       cbwrH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwrI: // global
           I64[Sp - 16] = block_cbwrD_info;
           _sbuo9::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbuo9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubws6; else goto cbwrE;
       ubws6: // global
           call _cbwrD(R1) args: 0, res: 0, upd: 0;
       cbwrE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuoM_info" {
     sat_sbuoM_info:
         const sat_sbuoM_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbuCr_srt+768;
 },
 _cbwrD() //  [R1]
         { []
         }
     {offset
       cbwrD: // global
           I64[Sp - 24] = block_cbwrL_info;
           _sbuop::P64 = R1;
           _sbuoq::P64 = P64[R1 + 7];
           _sbuot::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbuoq::P64;
           P64[Sp - 8] = _sbuot::P64;
           P64[Sp] = _sbuop::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubws5; else goto cbwrN;
       ubws5: // global
           call _cbwrL(R1) args: 0, res: 0, upd: 0;
       cbwrN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwrD_info" {
     block_cbwrD_info:
         const _cbwrD;
         const 1;
         const 4294967326;
         const SbuCr_srt+768;
 },
 _cbwrL() //  [R1]
         { []
         }
     {offset
       cbwrL: // global
           if (R1 & 7 == 1) goto cbws3; else goto cbwrW;
       cbws3: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbwrW: // global
           _sbuot::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbwrR_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = _sbuot::P64;
           P64[Sp + 8] = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.IO.Device.setEcho_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwrL_info" {
     block_cbwrL_info:
         const _cbwrL;
         const 4;
         const 4294967326;
         const SbuCr_srt+768;
 },
 _cbwrR() //  [R1]
         { []
         }
     {offset
       cbwrR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwrZ; else goto cbwrY;
       cbwrZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwrY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwrR_info" {
     block_cbwrR_info:
         const _cbwrR;
         const 130;
         const 30;
 },
 section ""relreadonly" . ubwtW_srtd" {
     ubwtW_srtd:
         const SbuCr_srt+456;
         const 43;
         const 4947802324993;
 },
 io_sbuol_entry() //  [R1]
         { []
         }
     {offset
       cbwsc: // global
           _sbuol::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbwsg; else goto cbwsh;
       cbwsh: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbwsj; else goto cbwsi;
       cbwsj: // global
           HpAlloc = 16;
           goto cbwsg;
       cbwsg: // global
           R1 = _sbuol::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwsi: // global
           _sbuo9::P64 = P64[_sbuol::P64 + 7];
           _sbuof::P64 = P64[_sbuol::P64 + 15];
           _sbuoh::P64 = P64[_sbuol::P64 + 23];
           I64[Hp - 8] = sat_sbuoM_info;
           P64[Hp] = _sbuo9::P64;
           I64[Sp - 16] = block_cbws7_info;
           R5 = _sbuoh::P64;
           R4 = Hp - 6;
           R3 = _sbuof::P64;
           R2 = GHC.IO.Handle.hSetEcho2_closure;
           P64[Sp - 8] = _sbuoh::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuol_info" {
     io_sbuol_info:
         const io_sbuol_entry;
         const 3;
         const 18446744069414584328;
         const 4294967299;
         const ubwtW_srtd;
 },
 _cbws7() //  [R1]
         { []
         }
     {offset
       cbws7: // global
           I64[Sp] = block_cbws9_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwso; else goto cbwsa;
       ubwso: // global
           call _cbws9(R1) args: 0, res: 0, upd: 0;
       cbwsa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbws7_info" {
     block_cbws7_info:
         const _cbws7;
         const 1;
         const 30;
 },
 _cbws9() //  [R1]
         { []
         }
     {offset
       cbws9: // global
           I64[Sp] = block_cbwsf_info;
           R2 = P64[R1 + 7];
           _sbuoS::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuoS::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbws9_info" {
     block_cbws9_info:
         const _cbws9;
         const 1;
         const 30;
 },
 _cbwsf() //  []
         { []
         }
     {offset
       cbwsf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwsf_info" {
     block_cbwsf_info:
         const _cbwsf;
         const 1;
         const 30;
 },
 sat_sbups_entry() //  [R1, R2]
         { []
         }
     {offset
       cbwsG: // global
           if ((Sp + -48) < SpLim) (likely: False) goto cbwsH; else goto cbwsI;
       cbwsH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwsI: // global
           I64[Sp - 16] = block_cbwsD_info;
           _sbuo9::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _sbuo9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubwt6; else goto cbwsE;
       ubwt6: // global
           call _cbwsD(R1) args: 0, res: 0, upd: 0;
       cbwsE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbups_info" {
     sat_sbups_info:
         const sat_sbups_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SbuCr_srt+768;
 },
 _cbwsD() //  [R1]
         { []
         }
     {offset
       cbwsD: // global
           I64[Sp - 24] = block_cbwsL_info;
           _sbup5::P64 = R1;
           _sbup6::P64 = P64[R1 + 7];
           _sbup9::P64 = P64[R1 + 31];
           R1 = P64[R1 + 39];
           P64[Sp - 16] = _sbup6::P64;
           P64[Sp - 8] = _sbup9::P64;
           P64[Sp] = _sbup5::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubwt5; else goto cbwsN;
       ubwt5: // global
           call _cbwsL(R1) args: 0, res: 0, upd: 0;
       cbwsN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwsD_info" {
     block_cbwsD_info:
         const _cbwsD;
         const 1;
         const 4294967326;
         const SbuCr_srt+768;
 },
 _cbwsL() //  [R1]
         { []
         }
     {offset
       cbwsL: // global
           if (R1 & 7 == 1) goto cbwt3; else goto cbwsW;
       cbwt3: // global
           Sp = Sp + 40;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbwsW: // global
           _sbup9::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cbwsR_info;
           R2 = P64[Sp + 8];
           I64[Sp - 8] = stg_ap_ppv_info;
           P64[Sp] = _sbup9::P64;
           P64[Sp + 8] = P64[Sp + 32];
           Sp = Sp - 8;
           call GHC.IO.Device.setEcho_entry(R2) args: 32, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwsL_info" {
     block_cbwsL_info:
         const _cbwsL;
         const 4;
         const 4294967326;
         const SbuCr_srt+768;
 },
 _cbwsR() //  [R1]
         { []
         }
     {offset
       cbwsR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwsZ; else goto cbwsY;
       cbwsZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwsY: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwsR_info" {
     block_cbwsR_info:
         const _cbwsR;
         const 130;
         const 30;
 },
 section ""relreadonly" . ubwtX_srtd" {
     ubwtX_srtd:
         const SbuCr_srt+456;
         const 43;
         const 4947802324993;
 },
 io_sbup1_entry() //  [R1]
         { []
         }
     {offset
       cbwtc: // global
           _sbup1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbwtg; else goto cbwth;
       cbwth: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbwtj; else goto cbwti;
       cbwtj: // global
           HpAlloc = 16;
           goto cbwtg;
       cbwtg: // global
           R1 = _sbup1::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwti: // global
           _sbuo9::P64 = P64[_sbup1::P64 + 7];
           _sbuof::P64 = P64[_sbup1::P64 + 15];
           _sbuoW::P64 = P64[_sbup1::P64 + 23];
           I64[Hp - 8] = sat_sbups_info;
           P64[Hp] = _sbuo9::P64;
           I64[Sp - 16] = block_cbwt7_info;
           R5 = _sbuoW::P64;
           R4 = Hp - 6;
           R3 = _sbuof::P64;
           R2 = GHC.IO.Handle.hSetEcho2_closure;
           P64[Sp - 8] = _sbuoW::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbup1_info" {
     io_sbup1_info:
         const io_sbup1_entry;
         const 3;
         const 18446744069414584328;
         const 4294967299;
         const ubwtX_srtd;
 },
 _cbwt7() //  [R1]
         { []
         }
     {offset
       cbwt7: // global
           I64[Sp] = block_cbwt9_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwto; else goto cbwta;
       ubwto: // global
           call _cbwt9(R1) args: 0, res: 0, upd: 0;
       cbwta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwt7_info" {
     block_cbwt7_info:
         const _cbwt7;
         const 1;
         const 30;
 },
 _cbwt9() //  [R1]
         { []
         }
     {offset
       cbwt9: // global
           I64[Sp] = block_cbwtf_info;
           R2 = P64[R1 + 7];
           _sbupy::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbupy::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwt9_info" {
     block_cbwt9_info:
         const _cbwt9;
         const 1;
         const 30;
 },
 _cbwtf() //  []
         { []
         }
     {offset
       cbwtf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwtf_info" {
     block_cbwtf_info:
         const _cbwtf;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwtY_srtd" {
     ubwtY_srtd:
         const SbuCr_srt+160;
         const 81;
         const 137438953473;
         const 102400;
 },
 GHC.IO.Handle.hSetEcho1_entry() //  [R2, R3]
         { []
         }
     {offset
       cbwtt: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbwtu; else goto cbwtv;
       cbwtu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.hSetEcho1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbwtv: // global
           I64[Sp - 24] = block_cbwre_info;
           _sbuo8::P64 = R2;
           R2 = R2;
           P64[Sp - 16] = _sbuo8::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call GHC.IO.Handle.hGetEcho5_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEcho1_info" {
     GHC.IO.Handle.hSetEcho1_info:
         const GHC.IO.Handle.hSetEcho1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const ubwtY_srtd;
 },
 section ""relreadonly" . ubwtZ_srtd" {
     ubwtZ_srtd:
         const SbuCr_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbwre() //  [R1]
         { []
         }
     {offset
       cbwre: // global
           I64[Sp] = block_cbwrg_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwtU; else goto cbwrh;
       ubwtU: // global
           call _cbwrg(R1) args: 0, res: 0, upd: 0;
       cbwrh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwre_info" {
     block_cbwre_info:
         const _cbwre;
         const 2;
         const 18446744069414584350;
         const ubwtZ_srtd;
 },
 section ""relreadonly" . ubwu0_srtd" {
     ubwu0_srtd:
         const SbuCr_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbwrg() //  [R1]
         { []
         }
     {offset
       cbwrg: // global
           if (R1 & 7 == 1) goto cbwtq; else goto cbwtr;
       cbwtq: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbwtr: // global
           _sbuo8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbwrm_info;
           R1 = _sbuo8::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubwtV; else goto cbwrn;
       ubwtV: // global
           call _cbwrm(R1) args: 0, res: 0, upd: 0;
       cbwrn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwrg_info" {
     block_cbwrg_info:
         const _cbwrg;
         const 2;
         const 18446744069414584350;
         const ubwu0_srtd;
 },
 section ""relreadonly" . ubwu1_srtd" {
     ubwu1_srtd:
         const SbuCr_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbwrm() //  [R1]
         { []
         }
     {offset
       cbwrm: // global
           if (R1 & 7 == 1) goto cbwtC; else goto cbwtL;
       cbwtC: // global
           I64[Sp - 16] = block_cbwrr_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbwtL: // global
           I64[Sp - 16] = block_cbwsr_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwrm_info" {
     block_cbwrm_info:
         const _cbwrm;
         const 1;
         const 18446744069414584350;
         const ubwu1_srtd;
 },
 section ""relreadonly" . ubwu2_srtd" {
     ubwu2_srtd:
         const SbuCr_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbwrr() //  [R1]
         { []
         }
     {offset
       cbwrr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwtF; else goto cbwtE;
       cbwtF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwtE: // global
           I64[Hp - 24] = io_sbuol_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwrt::P64 = Hp - 23;
           if (R1 == 0) goto cbwtJ; else goto cbwtI;
       cbwtJ: // global
           R1 = _cbwrt::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwtI: // global
           R1 = _cbwrt::P64;
           Sp = Sp + 32;
           call io_sbuol_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwrr_info" {
     block_cbwrr_info:
         const _cbwrr;
         const 3;
         const 18446744069414584350;
         const ubwu2_srtd;
 },
 section ""relreadonly" . ubwu3_srtd" {
     ubwu3_srtd:
         const SbuCr_srt+456;
         const 43;
         const 4947802324993;
 },
 _cbwsr() //  [R1]
         { []
         }
     {offset
       cbwsr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbwtO; else goto cbwtN;
       cbwtO: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwtN: // global
           I64[Hp - 24] = io_sbup1_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwst::P64 = Hp - 23;
           if (R1 == 0) goto cbwtS; else goto cbwtR;
       cbwtS: // global
           R1 = _cbwst::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwtR: // global
           R1 = _cbwst::P64;
           Sp = Sp + 32;
           call io_sbup1_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwsr_info" {
     block_cbwsr_info:
         const _cbwsr;
         const 3;
         const 18446744069414584350;
         const ubwu3_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.232242201 UTC

[section ""data" . GHC.IO.Handle.hSetEcho_closure" {
     GHC.IO.Handle.hSetEcho_closure:
         const GHC.IO.Handle.hSetEcho_info;
         const 0;
 },
 GHC.IO.Handle.hSetEcho_entry() //  [R2, R3]
         { []
         }
     {offset
       cbwwn: // global
           R3 = R3;
           R2 = R2;
           call GHC.IO.Handle.hSetEcho1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hSetEcho_info" {
     GHC.IO.Handle.hSetEcho_info:
         const GHC.IO.Handle.hSetEcho_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SbuCr_srt+800;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.235619163 UTC

[section ""cstring" . GHC.IO.Handle.hGetBuffering3_bytes" {
     GHC.IO.Handle.hGetBuffering3_bytes:
         I8[] [104,71,101,116,66,117,102,102,101,114,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.237886186 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering_fun_closure" {
     GHC.IO.Handle.hGetBuffering_fun_closure:
         const GHC.IO.Handle.hGetBuffering_fun_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hGetBuffering_fun_entry() //  [R1]
         { []
         }
     {offset
       cbwwB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwwC; else goto cbwwD;
       cbwwC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwwD: // global
           (_cbwwy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwwy::I64 == 0) goto cbwwA; else goto cbwwz;
       cbwwA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwwz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwwy::I64;
           R2 = GHC.IO.Handle.hGetBuffering3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering_fun_info" {
     GHC.IO.Handle.hGetBuffering_fun_info:
         const GHC.IO.Handle.hGetBuffering_fun_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.243695068 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering2_closure" {
     GHC.IO.Handle.hGetBuffering2_closure:
         const GHC.IO.Handle.hGetBuffering2_info;
         const 0;
 },
 GHC.IO.Handle.hGetBuffering2_entry() //  [R2]
         { []
         }
     {offset
       cbwwT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwwU; else goto cbwwV;
       cbwwU: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetBuffering2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwwV: // global
           I64[Sp - 8] = block_cbwwQ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwxg; else goto cbwwR;
       ubwxg: // global
           call _cbwwQ(R1) args: 0, res: 0, upd: 0;
       cbwwR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering2_info" {
     GHC.IO.Handle.hGetBuffering2_info:
         const GHC.IO.Handle.hGetBuffering2_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const SbuCr_srt+768;
 },
 _cbwwQ() //  [R1]
         { []
         }
     {offset
       cbwwQ: // global
           I64[Sp - 16] = block_cbwwY_info;
           _sbupD::P64 = R1;
           _sbupK::P64 = P64[R1 + 55];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _sbupK::P64;
           P64[Sp] = _sbupD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubwxf; else goto cbwx0;
       ubwxf: // global
           call _cbwwY(R1) args: 0, res: 0, upd: 0;
       cbwx0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwwQ_info" {
     block_cbwwQ_info:
         const _cbwwQ;
         const 0;
         const 4294967326;
         const SbuCr_srt+768;
 },
 _cbwwY() //  [R1]
         { []
         }
     {offset
       cbwwY: // global
           if (R1 & 7 == 1) goto cbwxd; else goto cbwx6;
       cbwxd: // global
           Sp = Sp + 24;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       cbwx6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwx9; else goto cbwx8;
       cbwx9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwx8: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwwY_info" {
     block_cbwwY_info:
         const _cbwwY;
         const 2;
         const 4294967326;
         const SbuCr_srt+768;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.254307491 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering1_closure" {
     GHC.IO.Handle.hGetBuffering1_closure:
         const GHC.IO.Handle.hGetBuffering1_info;
         const 0;
 },
 section ""relreadonly" . ubwyV_srtd" {
     ubwyV_srtd:
         const SbuCr_srt+456;
         const 46;
         const 52776558133249;
 },
 io_sbuq5_entry() //  [R1]
         { []
         }
     {offset
       cbwxX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwy1; else goto cbwy2;
       cbwy1: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwy2: // global
           I64[Sp - 16] = block_cbwxS_info;
           _sbuq1::P64 = P64[R1 + 15];
           R5 = _sbuq1::P64;
           R4 = GHC.IO.Handle.hGetBuffering2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetBuffering_fun_closure;
           P64[Sp - 8] = _sbuq1::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuq5_info" {
     io_sbuq5_info:
         const io_sbuq5_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubwyV_srtd;
 },
 _cbwxS() //  [R1]
         { []
         }
     {offset
       cbwxS: // global
           I64[Sp] = block_cbwxU_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwy7; else goto cbwxV;
       ubwy7: // global
           call _cbwxU(R1) args: 0, res: 0, upd: 0;
       cbwxV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwxS_info" {
     block_cbwxS_info:
         const _cbwxS;
         const 1;
         const 30;
 },
 _cbwxU() //  [R1]
         { []
         }
     {offset
       cbwxU: // global
           I64[Sp] = block_cbwy0_info;
           R2 = P64[R1 + 7];
           _sbuqc::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuqc::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwxU_info" {
     block_cbwxU_info:
         const _cbwxU;
         const 1;
         const 30;
 },
 _cbwy0() //  []
         { []
         }
     {offset
       cbwy0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwy0_info" {
     block_cbwy0_info:
         const _cbwy0;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwyW_srtd" {
     ubwyW_srtd:
         const SbuCr_srt+456;
         const 46;
         const 52776558133249;
 },
 io_sbuql_entry() //  [R1]
         { []
         }
     {offset
       cbwym: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwyq; else goto cbwyr;
       cbwyq: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwyr: // global
           I64[Sp - 16] = block_cbwyh_info;
           _sbuqg::P64 = P64[R1 + 15];
           R5 = _sbuqg::P64;
           R4 = GHC.IO.Handle.hGetBuffering2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hGetBuffering_fun_closure;
           P64[Sp - 8] = _sbuqg::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuql_info" {
     io_sbuql_info:
         const io_sbuql_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubwyW_srtd;
 },
 _cbwyh() //  [R1]
         { []
         }
     {offset
       cbwyh: // global
           I64[Sp] = block_cbwyj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwyw; else goto cbwyk;
       ubwyw: // global
           call _cbwyj(R1) args: 0, res: 0, upd: 0;
       cbwyk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwyh_info" {
     block_cbwyh_info:
         const _cbwyh;
         const 1;
         const 30;
 },
 _cbwyj() //  [R1]
         { []
         }
     {offset
       cbwyj: // global
           I64[Sp] = block_cbwyp_info;
           R2 = P64[R1 + 7];
           _sbuqs::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuqs::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwyj_info" {
     block_cbwyj_info:
         const _cbwyj;
         const 1;
         const 30;
 },
 _cbwyp() //  []
         { []
         }
     {offset
       cbwyp: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwyp_info" {
     block_cbwyp_info:
         const _cbwyp;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwyX_srtd" {
     ubwyX_srtd:
         const SbuCr_srt+456;
         const 47;
         const 123145302310913;
 },
 GHC.IO.Handle.hGetBuffering1_entry() //  [R2]
         { []
         }
     {offset
       cbwyB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwyC; else goto cbwyD;
       cbwyC: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetBuffering1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwyD: // global
           I64[Sp - 8] = block_cbwxG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwyU; else goto cbwxH;
       ubwyU: // global
           call _cbwxG(R1) args: 0, res: 0, upd: 0;
       cbwxH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering1_info" {
     GHC.IO.Handle.hGetBuffering1_info:
         const GHC.IO.Handle.hGetBuffering1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwyX_srtd;
 },
 section ""relreadonly" . ubwyY_srtd" {
     ubwyY_srtd:
         const SbuCr_srt+456;
         const 46;
         const 52776558133249;
 },
 _cbwxG() //  [R1]
         { []
         }
     {offset
       cbwxG: // global
           if (R1 & 7 == 1) goto cbwyy; else goto cbwyz;
       cbwyy: // global
           I64[Sp - 16] = block_cbwxL_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbwyz: // global
           I64[Sp - 16] = block_cbwya_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwxG_info" {
     block_cbwxG_info:
         const _cbwxG;
         const 0;
         const 18446744069414584350;
         const ubwyY_srtd;
 },
 section ""relreadonly" . ubwyZ_srtd" {
     ubwyZ_srtd:
         const SbuCr_srt+456;
         const 46;
         const 52776558133249;
 },
 _cbwxL() //  [R1]
         { []
         }
     {offset
       cbwxL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwyH; else goto cbwyG;
       cbwyH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwyG: // global
           I64[Hp - 16] = io_sbuq5_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwxN::P64 = Hp - 15;
           if (R1 == 0) goto cbwyL; else goto cbwyK;
       cbwyL: // global
           R1 = _cbwxN::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwyK: // global
           R1 = _cbwxN::P64;
           Sp = Sp + 24;
           call io_sbuq5_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwxL_info" {
     block_cbwxL_info:
         const _cbwxL;
         const 2;
         const 18446744069414584350;
         const ubwyZ_srtd;
 },
 section ""relreadonly" . ubwz0_srtd" {
     ubwz0_srtd:
         const SbuCr_srt+456;
         const 46;
         const 52776558133249;
 },
 _cbwya() //  [R1]
         { []
         }
     {offset
       cbwya: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwyP; else goto cbwyO;
       cbwyP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwyO: // global
           I64[Hp - 16] = io_sbuql_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwyc::P64 = Hp - 15;
           if (R1 == 0) goto cbwyT; else goto cbwyS;
       cbwyT: // global
           R1 = _cbwyc::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwyS: // global
           R1 = _cbwyc::P64;
           Sp = Sp + 24;
           call io_sbuql_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwya_info" {
     block_cbwya_info:
         const _cbwya;
         const 2;
         const 18446744069414584350;
         const ubwz0_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.279624576 UTC

[section ""data" . GHC.IO.Handle.hGetBuffering_closure" {
     GHC.IO.Handle.hGetBuffering_closure:
         const GHC.IO.Handle.hGetBuffering_info;
         const 0;
 },
 GHC.IO.Handle.hGetBuffering_entry() //  [R2]
         { []
         }
     {offset
       cbwAd: // global
           R2 = R2;
           call GHC.IO.Handle.hGetBuffering1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetBuffering_info" {
     GHC.IO.Handle.hGetBuffering_info:
         const GHC.IO.Handle.hGetBuffering_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+824;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.282616937 UTC

[section ""cstring" . GHC.IO.Handle.hIsWritable4_bytes" {
     GHC.IO.Handle.hIsWritable4_bytes:
         I8[] [104,73,115,87,114,105,116,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.284769249 UTC

[section ""data" . GHC.IO.Handle.hIsWritable3_closure" {
     GHC.IO.Handle.hIsWritable3_closure:
         const GHC.IO.Handle.hIsWritable3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsWritable3_entry() //  [R1]
         { []
         }
     {offset
       cbwAr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwAs; else goto cbwAt;
       cbwAs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwAt: // global
           (_cbwAo::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwAo::I64 == 0) goto cbwAq; else goto cbwAp;
       cbwAq: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwAp: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwAo::I64;
           R2 = GHC.IO.Handle.hIsWritable4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable3_info" {
     GHC.IO.Handle.hIsWritable3_info:
         const GHC.IO.Handle.hIsWritable3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.290941062 UTC

[section ""data" . GHC.IO.Handle.hIsWritable2_closure" {
     GHC.IO.Handle.hIsWritable2_closure:
         const GHC.IO.Handle.hIsWritable2_info;
         const 0;
 },
 sat_sbuqQ_entry() //  [R1]
         { []
         }
     {offset
       cbwB3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwB4; else goto cbwB5;
       cbwB4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwB5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbwAU_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubwBj; else goto cbwAV;
       ubwBj: // global
           call _cbwAU(R1) args: 0, res: 0, upd: 0;
       cbwAV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuqQ_info" {
     sat_sbuqQ_info:
         const sat_sbuqQ_entry;
         const 1;
         const 16;
 },
 _cbwAU() //  [R1]
         { []
         }
     {offset
       cbwAU: // global
           _cbwB2::P64 = R1 & 7;
           if (_cbwB2::P64 < 4) goto cbwAY; else goto ubwBi;
       cbwAY: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       ubwBi: // global
           if (_cbwB2::P64 != 5) goto cbwB1; else goto cbwB1;
       cbwB1: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwAU_info" {
     block_cbwAU_info:
         const _cbwAU;
         const 0;
         const 30;
 },
 section ""relreadonly" . ubwBG_srtd" {
     ubwBG_srtd:
         const SbuCr_srt+328;
         const 64;
         const 9259400833873739777;
 },
 GHC.IO.Handle.hIsWritable2_entry() //  [R2]
         { []
         }
     {offset
       cbwBk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwBl; else goto cbwBm;
       cbwBl: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsWritable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwBm: // global
           I64[Sp - 8] = block_cbwAG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwBF; else goto cbwAH;
       ubwBF: // global
           call _cbwAG(R1) args: 0, res: 0, upd: 0;
       cbwAH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable2_info" {
     GHC.IO.Handle.hIsWritable2_info:
         const GHC.IO.Handle.hIsWritable2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwBG_srtd;
 },
 section ""relreadonly" . ubwBH_srtd" {
     ubwBH_srtd:
         const SbuCr_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbwAG() //  [R1]
         { []
         }
     {offset
       cbwAG: // global
           I64[Sp - 8] = block_cbwAL_info;
           _sbuqx::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sbuqx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwBE; else goto cbwAM;
       ubwBE: // global
           call _cbwAL(R1) args: 0, res: 0, upd: 0;
       cbwAM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwAG_info" {
     block_cbwAG_info:
         const _cbwAG;
         const 0;
         const 18446744069414584350;
         const ubwBH_srtd;
 },
 section ""relreadonly" . ubwBI_srtd" {
     ubwBI_srtd:
         const SbuCr_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbwAL() //  [R1]
         { []
         }
     {offset
       cbwAL: // global
           _cbwBC::P64 = R1 & 7;
           if (_cbwBC::P64 == 1) goto cbwBx; else goto ubwBD;
       cbwBx: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       ubwBD: // global
           if (_cbwBC::P64 == 2) goto cbwBB; else goto cbwBq;
       cbwBB: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbwBq: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbwBt; else goto cbwBs;
       cbwBt: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwBs: // global
           I64[Hp - 40] = sat_sbuqQ_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwAL_info" {
     block_cbwAL_info:
         const _cbwAL;
         const 1;
         const 18446744069414584350;
         const ubwBI_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.305942558 UTC

[section ""data" . GHC.IO.Handle.hIsWritable1_closure" {
     GHC.IO.Handle.hIsWritable1_closure:
         const GHC.IO.Handle.hIsWritable1_info;
         const 0;
 },
 section ""relreadonly" . ubwDb_srtd" {
     ubwDb_srtd:
         const SbuCr_srt+456;
         const 49;
         const 422212465065985;
 },
 io_sbur2_entry() //  [R1]
         { []
         }
     {offset
       cbwCH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwCL; else goto cbwCM;
       cbwCL: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwCM: // global
           I64[Sp - 16] = block_cbwCC_info;
           _sbuqY::P64 = P64[R1 + 15];
           R5 = _sbuqY::P64;
           R4 = GHC.IO.Handle.hIsWritable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsWritable3_closure;
           P64[Sp - 8] = _sbuqY::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbur2_info" {
     io_sbur2_info:
         const io_sbur2_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubwDb_srtd;
 },
 _cbwCC() //  [R1]
         { []
         }
     {offset
       cbwCC: // global
           I64[Sp] = block_cbwCE_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwCR; else goto cbwCF;
       ubwCR: // global
           call _cbwCE(R1) args: 0, res: 0, upd: 0;
       cbwCF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwCC_info" {
     block_cbwCC_info:
         const _cbwCC;
         const 1;
         const 30;
 },
 _cbwCE() //  [R1]
         { []
         }
     {offset
       cbwCE: // global
           I64[Sp] = block_cbwCK_info;
           R2 = P64[R1 + 7];
           _sbur9::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbur9::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwCE_info" {
     block_cbwCE_info:
         const _cbwCE;
         const 1;
         const 30;
 },
 _cbwCK() //  []
         { []
         }
     {offset
       cbwCK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwCK_info" {
     block_cbwCK_info:
         const _cbwCK;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwDc_srtd" {
     ubwDc_srtd:
         const SbuCr_srt+456;
         const 50;
         const 985162418487297;
 },
 GHC.IO.Handle.hIsWritable1_entry() //  [R2]
         { []
         }
     {offset
       cbwCW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwCX; else goto cbwCY;
       cbwCX: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsWritable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwCY: // global
           I64[Sp - 8] = block_cbwCq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwDa; else goto cbwCr;
       ubwDa: // global
           call _cbwCq(R1) args: 0, res: 0, upd: 0;
       cbwCr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable1_info" {
     GHC.IO.Handle.hIsWritable1_info:
         const GHC.IO.Handle.hIsWritable1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwDc_srtd;
 },
 section ""relreadonly" . ubwDd_srtd" {
     ubwDd_srtd:
         const SbuCr_srt+456;
         const 49;
         const 422212465065985;
 },
 _cbwCq() //  [R1]
         { []
         }
     {offset
       cbwCq: // global
           if (R1 & 7 == 1) goto cbwCT; else goto cbwCU;
       cbwCT: // global
           I64[Sp - 16] = block_cbwCv_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbwCU: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwCq_info" {
     block_cbwCq_info:
         const _cbwCq;
         const 0;
         const 18446744069414584350;
         const ubwDd_srtd;
 },
 section ""relreadonly" . ubwDe_srtd" {
     ubwDe_srtd:
         const SbuCr_srt+456;
         const 49;
         const 422212465065985;
 },
 _cbwCv() //  [R1]
         { []
         }
     {offset
       cbwCv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwD2; else goto cbwD1;
       cbwD2: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwD1: // global
           I64[Hp - 16] = io_sbur2_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwCx::P64 = Hp - 15;
           if (R1 == 0) goto cbwD6; else goto cbwD5;
       cbwD6: // global
           R1 = _cbwCx::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwD5: // global
           R1 = _cbwCx::P64;
           Sp = Sp + 24;
           call io_sbur2_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwCv_info" {
     block_cbwCv_info:
         const _cbwCv;
         const 2;
         const 18446744069414584350;
         const ubwDe_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.322375617 UTC

[section ""data" . GHC.IO.Handle.hIsWritable_closure" {
     GHC.IO.Handle.hIsWritable_closure:
         const GHC.IO.Handle.hIsWritable_info;
         const 0;
 },
 GHC.IO.Handle.hIsWritable_entry() //  [R2]
         { []
         }
     {offset
       cbwE1: // global
           R2 = R2;
           call GHC.IO.Handle.hIsWritable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsWritable_info" {
     GHC.IO.Handle.hIsWritable_info:
         const GHC.IO.Handle.hIsWritable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+848;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.325338454 UTC

[section ""cstring" . GHC.IO.Handle.hIsReadable4_bytes" {
     GHC.IO.Handle.hIsReadable4_bytes:
         I8[] [104,73,115,82,101,97,100,97,98,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.327522812 UTC

[section ""data" . GHC.IO.Handle.hIsReadable3_closure" {
     GHC.IO.Handle.hIsReadable3_closure:
         const GHC.IO.Handle.hIsReadable3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsReadable3_entry() //  [R1]
         { []
         }
     {offset
       cbwEf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwEg; else goto cbwEh;
       cbwEg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwEh: // global
           (_cbwEc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwEc::I64 == 0) goto cbwEe; else goto cbwEd;
       cbwEe: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwEd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwEc::I64;
           R2 = GHC.IO.Handle.hIsReadable4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable3_info" {
     GHC.IO.Handle.hIsReadable3_info:
         const GHC.IO.Handle.hIsReadable3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.333689741 UTC

[section ""data" . GHC.IO.Handle.hIsReadable2_closure" {
     GHC.IO.Handle.hIsReadable2_closure:
         const GHC.IO.Handle.hIsReadable2_info;
         const 0;
 },
 sat_sburA_entry() //  [R1]
         { []
         }
     {offset
       cbwEQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwER; else goto cbwES;
       cbwER: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwES: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbwEI_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubwF3; else goto cbwEJ;
       ubwF3: // global
           call _cbwEI(R1) args: 0, res: 0, upd: 0;
       cbwEJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sburA_info" {
     sat_sburA_info:
         const sat_sburA_entry;
         const 1;
         const 16;
 },
 _cbwEI() //  [R1]
         { []
         }
     {offset
       cbwEI: // global
           _cbwEP::P64 = R1 & 7;
           if (_cbwEP::P64 == 3) goto cbwEO; else goto ubwF2;
       ubwF2: // global
           if (_cbwEP::P64 == 6) goto cbwEO; else goto cbwEM;
       cbwEO: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbwEM: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwEI_info" {
     block_cbwEI_info:
         const _cbwEI;
         const 0;
         const 30;
 },
 section ""relreadonly" . ubwFq_srtd" {
     ubwFq_srtd:
         const SbuCr_srt+328;
         const 67;
         const 36028797018963969;
         const 4;
 },
 GHC.IO.Handle.hIsReadable2_entry() //  [R2]
         { []
         }
     {offset
       cbwF4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwF5; else goto cbwF6;
       cbwF5: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsReadable2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwF6: // global
           I64[Sp - 8] = block_cbwEu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwFp; else goto cbwEv;
       ubwFp: // global
           call _cbwEu(R1) args: 0, res: 0, upd: 0;
       cbwEv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable2_info" {
     GHC.IO.Handle.hIsReadable2_info:
         const GHC.IO.Handle.hIsReadable2_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwFq_srtd;
 },
 section ""relreadonly" . ubwFr_srtd" {
     ubwFr_srtd:
         const SbuCr_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbwEu() //  [R1]
         { []
         }
     {offset
       cbwEu: // global
           I64[Sp - 8] = block_cbwEz_info;
           _sburh::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sburh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwFo; else goto cbwEA;
       ubwFo: // global
           call _cbwEz(R1) args: 0, res: 0, upd: 0;
       cbwEA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwEu_info" {
     block_cbwEu_info:
         const _cbwEu;
         const 0;
         const 18446744069414584350;
         const ubwFr_srtd;
 },
 section ""relreadonly" . ubwFs_srtd" {
     ubwFs_srtd:
         const SbuCr_srt+328;
         const 56;
         const 36028797018963969;
 },
 _cbwEz() //  [R1]
         { []
         }
     {offset
       cbwEz: // global
           _cbwFm::P64 = R1 & 7;
           if (_cbwFm::P64 == 1) goto cbwFh; else goto ubwFn;
       cbwFh: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_closedHandle1_entry() args: 8, res: 0, upd: 8;
       ubwFn: // global
           if (_cbwFm::P64 == 2) goto cbwFl; else goto cbwFa;
       cbwFl: // global
           Sp = Sp + 16;
           call GHC.IO.Handle.Internals.ioe_semiclosedHandle1_entry() args: 8, res: 0, upd: 8;
       cbwFa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbwFd; else goto cbwFc;
       cbwFd: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwFc: // global
           I64[Hp - 40] = sat_sburA_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwEz_info" {
     block_cbwEz_info:
         const _cbwEz;
         const 1;
         const 18446744069414584350;
         const ubwFs_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.348286062 UTC

[section ""data" . GHC.IO.Handle.hIsReadable1_closure" {
     GHC.IO.Handle.hIsReadable1_closure:
         const GHC.IO.Handle.hIsReadable1_info;
         const 0;
 },
 section ""relreadonly" . ubwGV_srtd" {
     ubwGV_srtd:
         const SbuCr_srt+456;
         const 52;
         const 3377699720527873;
 },
 io_sburM_entry() //  [R1]
         { []
         }
     {offset
       cbwGr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwGv; else goto cbwGw;
       cbwGv: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwGw: // global
           I64[Sp - 16] = block_cbwGm_info;
           _sburI::P64 = P64[R1 + 15];
           R5 = _sburI::P64;
           R4 = GHC.IO.Handle.hIsReadable2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsReadable3_closure;
           P64[Sp - 8] = _sburI::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sburM_info" {
     io_sburM_info:
         const io_sburM_entry;
         const 2;
         const 18446744069414584331;
         const 4294967299;
         const ubwGV_srtd;
 },
 _cbwGm() //  [R1]
         { []
         }
     {offset
       cbwGm: // global
           I64[Sp] = block_cbwGo_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwGB; else goto cbwGp;
       ubwGB: // global
           call _cbwGo(R1) args: 0, res: 0, upd: 0;
       cbwGp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwGm_info" {
     block_cbwGm_info:
         const _cbwGm;
         const 1;
         const 30;
 },
 _cbwGo() //  [R1]
         { []
         }
     {offset
       cbwGo: // global
           I64[Sp] = block_cbwGu_info;
           R2 = P64[R1 + 7];
           _sburT::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sburT::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwGo_info" {
     block_cbwGo_info:
         const _cbwGo;
         const 1;
         const 30;
 },
 _cbwGu() //  []
         { []
         }
     {offset
       cbwGu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwGu_info" {
     block_cbwGu_info:
         const _cbwGu;
         const 1;
         const 30;
 },
 section ""relreadonly" . ubwGW_srtd" {
     ubwGW_srtd:
         const SbuCr_srt+456;
         const 53;
         const 7881299347898369;
 },
 GHC.IO.Handle.hIsReadable1_entry() //  [R2]
         { []
         }
     {offset
       cbwGG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwGH; else goto cbwGI;
       cbwGH: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsReadable1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwGI: // global
           I64[Sp - 8] = block_cbwGa_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwGU; else goto cbwGb;
       ubwGU: // global
           call _cbwGa(R1) args: 0, res: 0, upd: 0;
       cbwGb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable1_info" {
     GHC.IO.Handle.hIsReadable1_info:
         const GHC.IO.Handle.hIsReadable1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwGW_srtd;
 },
 section ""relreadonly" . ubwGX_srtd" {
     ubwGX_srtd:
         const SbuCr_srt+456;
         const 52;
         const 3377699720527873;
 },
 _cbwGa() //  [R1]
         { []
         }
     {offset
       cbwGa: // global
           if (R1 & 7 == 1) goto cbwGD; else goto cbwGE;
       cbwGD: // global
           I64[Sp - 16] = block_cbwGf_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbwGE: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwGa_info" {
     block_cbwGa_info:
         const _cbwGa;
         const 0;
         const 18446744069414584350;
         const ubwGX_srtd;
 },
 section ""relreadonly" . ubwGY_srtd" {
     ubwGY_srtd:
         const SbuCr_srt+456;
         const 52;
         const 3377699720527873;
 },
 _cbwGf() //  [R1]
         { []
         }
     {offset
       cbwGf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwGM; else goto cbwGL;
       cbwGM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwGL: // global
           I64[Hp - 16] = io_sburM_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwGh::P64 = Hp - 15;
           if (R1 == 0) goto cbwGQ; else goto cbwGP;
       cbwGQ: // global
           R1 = _cbwGh::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwGP: // global
           R1 = _cbwGh::P64;
           Sp = Sp + 24;
           call io_sburM_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwGf_info" {
     block_cbwGf_info:
         const _cbwGf;
         const 2;
         const 18446744069414584350;
         const ubwGY_srtd;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.36449521 UTC

[section ""data" . GHC.IO.Handle.hIsReadable_closure" {
     GHC.IO.Handle.hIsReadable_closure:
         const GHC.IO.Handle.hIsReadable_info;
         const 0;
 },
 GHC.IO.Handle.hIsReadable_entry() //  [R2]
         { []
         }
     {offset
       cbwHL: // global
           R2 = R2;
           call GHC.IO.Handle.hIsReadable1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsReadable_info" {
     GHC.IO.Handle.hIsReadable_info:
         const GHC.IO.Handle.hIsReadable_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+872;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.367541095 UTC

[section ""cstring" . GHC.IO.Handle.hIsClosed4_bytes" {
     GHC.IO.Handle.hIsClosed4_bytes:
         I8[] [104,73,115,67,108,111,115,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.369792019 UTC

[section ""data" . GHC.IO.Handle.hIsClosed3_closure" {
     GHC.IO.Handle.hIsClosed3_closure:
         const GHC.IO.Handle.hIsClosed3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsClosed3_entry() //  [R1]
         { []
         }
     {offset
       cbwHZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwI0; else goto cbwI1;
       cbwI0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwI1: // global
           (_cbwHW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwHW::I64 == 0) goto cbwHY; else goto cbwHX;
       cbwHY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwHX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwHW::I64;
           R2 = GHC.IO.Handle.hIsClosed4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed3_info" {
     GHC.IO.Handle.hIsClosed3_info:
         const GHC.IO.Handle.hIsClosed3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.374672008 UTC

[section ""data" . GHC.IO.Handle.hIsClosed2_closure" {
     GHC.IO.Handle.hIsClosed2_closure:
         const GHC.IO.Handle.hIsClosed2_info;
 },
 GHC.IO.Handle.hIsClosed2_entry() //  [R2]
         { []
         }
     {offset
       cbwIh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwIi; else goto cbwIj;
       cbwIi: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsClosed2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwIj: // global
           I64[Sp - 8] = block_cbwIe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwIH; else goto cbwIf;
       ubwIH: // global
           call _cbwIe(R1) args: 0, res: 0, upd: 0;
       cbwIf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed2_info" {
     GHC.IO.Handle.hIsClosed2_info:
         const GHC.IO.Handle.hIsClosed2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbwIe() //  [R1]
         { []
         }
     {offset
       cbwIe: // global
           I64[Sp - 8] = block_cbwIm_info;
           _sbus1::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sbus1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwIG; else goto cbwIo;
       ubwIG: // global
           call _cbwIm(R1) args: 0, res: 0, upd: 0;
       cbwIo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwIe_info" {
     block_cbwIe_info:
         const _cbwIe;
         const 0;
         const 30;
 },
 _cbwIm() //  [R1]
         { []
         }
     {offset
       cbwIm: // global
           _sbus1::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cbwIB; else goto cbwIu;
       cbwIB: // global
           Hp = Hp + 24;
           _sbusi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwIE; else goto cbwID;
       cbwID: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbus1::P64;
           P64[Hp] = GHC.Types.True_closure+2;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbwIu: // global
           Hp = Hp + 24;
           _sbusi::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwIE; else goto cbwIw;
       cbwIE: // global
           HpAlloc = 24;
           R1 = _sbusi::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwIw: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbus1::P64;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwIm_info" {
     block_cbwIm_info:
         const _cbwIm;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.38561442 UTC

[section ""data" . GHC.IO.Handle.hIsClosed1_closure" {
     GHC.IO.Handle.hIsClosed1_closure:
         const GHC.IO.Handle.hIsClosed1_info;
         const 0;
 },
 io_sbust_entry() //  [R1]
         { []
         }
     {offset
       cbwJs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwJw; else goto cbwJx;
       cbwJw: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwJx: // global
           I64[Sp - 16] = block_cbwJn_info;
           _sbusp::P64 = P64[R1 + 15];
           R5 = _sbusp::P64;
           R4 = GHC.IO.Handle.hIsClosed2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsClosed3_closure;
           P64[Sp - 8] = _sbusp::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbust_info" {
     io_sbust_info:
         const io_sbust_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SbuCr_srt+880;
 },
 _cbwJn() //  [R1]
         { []
         }
     {offset
       cbwJn: // global
           I64[Sp] = block_cbwJp_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwJC; else goto cbwJq;
       ubwJC: // global
           call _cbwJp(R1) args: 0, res: 0, upd: 0;
       cbwJq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJn_info" {
     block_cbwJn_info:
         const _cbwJn;
         const 1;
         const 30;
 },
 _cbwJp() //  [R1]
         { []
         }
     {offset
       cbwJp: // global
           I64[Sp] = block_cbwJv_info;
           R2 = P64[R1 + 7];
           _sbusA::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbusA::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJp_info" {
     block_cbwJp_info:
         const _cbwJp;
         const 1;
         const 30;
 },
 _cbwJv() //  []
         { []
         }
     {offset
       cbwJv: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJv_info" {
     block_cbwJv_info:
         const _cbwJv;
         const 1;
         const 30;
 },
 io_sbusJ_entry() //  [R1]
         { []
         }
     {offset
       cbwJR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwJV; else goto cbwJW;
       cbwJV: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwJW: // global
           I64[Sp - 16] = block_cbwJM_info;
           _sbusE::P64 = P64[R1 + 15];
           R5 = _sbusE::P64;
           R4 = GHC.IO.Handle.hIsClosed2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsClosed3_closure;
           P64[Sp - 8] = _sbusE::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbusJ_info" {
     io_sbusJ_info:
         const io_sbusJ_entry;
         const 2;
         const 12884901899;
         const 4294967299;
         const SbuCr_srt+880;
 },
 _cbwJM() //  [R1]
         { []
         }
     {offset
       cbwJM: // global
           I64[Sp] = block_cbwJO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwK1; else goto cbwJP;
       ubwK1: // global
           call _cbwJO(R1) args: 0, res: 0, upd: 0;
       cbwJP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJM_info" {
     block_cbwJM_info:
         const _cbwJM;
         const 1;
         const 30;
 },
 _cbwJO() //  [R1]
         { []
         }
     {offset
       cbwJO: // global
           I64[Sp] = block_cbwJU_info;
           R2 = P64[R1 + 7];
           _sbusQ::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbusQ::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJO_info" {
     block_cbwJO_info:
         const _cbwJO;
         const 1;
         const 30;
 },
 _cbwJU() //  []
         { []
         }
     {offset
       cbwJU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJU_info" {
     block_cbwJU_info:
         const _cbwJU;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hIsClosed1_entry() //  [R2]
         { []
         }
     {offset
       cbwK6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwK7; else goto cbwK8;
       cbwK7: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsClosed1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwK8: // global
           I64[Sp - 8] = block_cbwJb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwKp; else goto cbwJc;
       ubwKp: // global
           call _cbwJb(R1) args: 0, res: 0, upd: 0;
       cbwJc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed1_info" {
     GHC.IO.Handle.hIsClosed1_info:
         const GHC.IO.Handle.hIsClosed1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SbuCr_srt+880;
 },
 _cbwJb() //  [R1]
         { []
         }
     {offset
       cbwJb: // global
           if (R1 & 7 == 1) goto cbwK3; else goto cbwK4;
       cbwK3: // global
           I64[Sp - 16] = block_cbwJg_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbwK4: // global
           I64[Sp - 16] = block_cbwJF_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJb_info" {
     block_cbwJb_info:
         const _cbwJb;
         const 0;
         const 12884901918;
         const SbuCr_srt+880;
 },
 _cbwJg() //  [R1]
         { []
         }
     {offset
       cbwJg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwKc; else goto cbwKb;
       cbwKc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwKb: // global
           I64[Hp - 16] = io_sbust_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwJi::P64 = Hp - 15;
           if (R1 == 0) goto cbwKg; else goto cbwKf;
       cbwKg: // global
           R1 = _cbwJi::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwKf: // global
           R1 = _cbwJi::P64;
           Sp = Sp + 24;
           call io_sbust_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJg_info" {
     block_cbwJg_info:
         const _cbwJg;
         const 2;
         const 12884901918;
         const SbuCr_srt+880;
 },
 _cbwJF() //  [R1]
         { []
         }
     {offset
       cbwJF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwKk; else goto cbwKj;
       cbwKk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwKj: // global
           I64[Hp - 16] = io_sbusJ_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwJH::P64 = Hp - 15;
           if (R1 == 0) goto cbwKo; else goto cbwKn;
       cbwKo: // global
           R1 = _cbwJH::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwKn: // global
           R1 = _cbwJH::P64;
           Sp = Sp + 24;
           call io_sbusJ_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwJF_info" {
     block_cbwJF_info:
         const _cbwJF;
         const 2;
         const 12884901918;
         const SbuCr_srt+880;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.407460707 UTC

[section ""data" . GHC.IO.Handle.hIsClosed_closure" {
     GHC.IO.Handle.hIsClosed_closure:
         const GHC.IO.Handle.hIsClosed_info;
         const 0;
 },
 GHC.IO.Handle.hIsClosed_entry() //  [R2]
         { []
         }
     {offset
       cbwLw: // global
           R2 = R2;
           call GHC.IO.Handle.hIsClosed1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsClosed_info" {
     GHC.IO.Handle.hIsClosed_info:
         const GHC.IO.Handle.hIsClosed_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+896;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.410542431 UTC

[section ""cstring" . GHC.IO.Handle.hIsOpen4_bytes" {
     GHC.IO.Handle.hIsOpen4_bytes:
         I8[] [104,73,115,79,112,101,110]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.412691564 UTC

[section ""data" . GHC.IO.Handle.hIsOpen3_closure" {
     GHC.IO.Handle.hIsOpen3_closure:
         const GHC.IO.Handle.hIsOpen3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hIsOpen3_entry() //  [R1]
         { []
         }
     {offset
       cbwLK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwLL; else goto cbwLM;
       cbwLL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwLM: // global
           (_cbwLH::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwLH::I64 == 0) goto cbwLJ; else goto cbwLI;
       cbwLJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwLI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwLH::I64;
           R2 = GHC.IO.Handle.hIsOpen4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen3_info" {
     GHC.IO.Handle.hIsOpen3_info:
         const GHC.IO.Handle.hIsOpen3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.418214824 UTC

[section ""data" . GHC.IO.Handle.hIsOpen2_closure" {
     GHC.IO.Handle.hIsOpen2_closure:
         const GHC.IO.Handle.hIsOpen2_info;
 },
 GHC.IO.Handle.hIsOpen2_entry() //  [R2]
         { []
         }
     {offset
       cbwM2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwM3; else goto cbwM4;
       cbwM3: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsOpen2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwM4: // global
           I64[Sp - 8] = block_cbwLZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwMA; else goto cbwM0;
       ubwMA: // global
           call _cbwLZ(R1) args: 0, res: 0, upd: 0;
       cbwM0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen2_info" {
     GHC.IO.Handle.hIsOpen2_info:
         const GHC.IO.Handle.hIsOpen2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cbwLZ() //  [R1]
         { []
         }
     {offset
       cbwLZ: // global
           I64[Sp - 8] = block_cbwM7_info;
           _sbusV::P64 = R1;
           R1 = P64[R1 + 39];
           P64[Sp] = _sbusV::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwMz; else goto cbwM9;
       ubwMz: // global
           call _cbwM7(R1) args: 0, res: 0, upd: 0;
       cbwM9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwLZ_info" {
     block_cbwLZ_info:
         const _cbwLZ;
         const 0;
         const 30;
 },
 _cbwM7() //  [R1]
         { []
         }
     {offset
       cbwM7: // global
           _sbusV::P64 = P64[Sp + 8];
           _cbwMx::P64 = R1 & 7;
           if (_cbwMx::P64 == 1) goto cbwMm; else goto ubwMy;
       cbwMm: // global
           Hp = Hp + 24;
           _sbutc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwMw; else goto cbwMo;
       cbwMo: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbusV::P64;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       ubwMy: // global
           if (_cbwMx::P64 == 2) goto cbwMt; else goto cbwMf;
       cbwMt: // global
           Hp = Hp + 24;
           _sbutc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwMw; else goto cbwMv;
       cbwMv: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbusV::P64;
           P64[Hp] = GHC.Types.False_closure+1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cbwMf: // global
           Hp = Hp + 24;
           _sbutc::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwMw; else goto cbwMh;
       cbwMw: // global
           HpAlloc = 24;
           R1 = _sbutc::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwMh: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _sbusV::P64;
           P64[Hp] = GHC.Types.True_closure+2;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwM7_info" {
     block_cbwM7_info:
         const _cbwM7;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.430161797 UTC

[section ""data" . GHC.IO.Handle.hIsOpen1_closure" {
     GHC.IO.Handle.hIsOpen1_closure:
         const GHC.IO.Handle.hIsOpen1_info;
         const 0;
 },
 io_sbuto_entry() //  [R1]
         { []
         }
     {offset
       cbwNo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwNs; else goto cbwNt;
       cbwNs: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwNt: // global
           I64[Sp - 16] = block_cbwNj_info;
           _sbutk::P64 = P64[R1 + 15];
           R5 = _sbutk::P64;
           R4 = GHC.IO.Handle.hIsOpen2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsOpen3_closure;
           P64[Sp - 8] = _sbutk::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuto_info" {
     io_sbuto_info:
         const io_sbuto_entry;
         const 2;
         const 21474836491;
         const 4294967299;
         const SbuCr_srt+888;
 },
 _cbwNj() //  [R1]
         { []
         }
     {offset
       cbwNj: // global
           I64[Sp] = block_cbwNl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwNy; else goto cbwNm;
       ubwNy: // global
           call _cbwNl(R1) args: 0, res: 0, upd: 0;
       cbwNm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNj_info" {
     block_cbwNj_info:
         const _cbwNj;
         const 1;
         const 30;
 },
 _cbwNl() //  [R1]
         { []
         }
     {offset
       cbwNl: // global
           I64[Sp] = block_cbwNr_info;
           R2 = P64[R1 + 7];
           _sbutv::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbutv::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNl_info" {
     block_cbwNl_info:
         const _cbwNl;
         const 1;
         const 30;
 },
 _cbwNr() //  []
         { []
         }
     {offset
       cbwNr: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNr_info" {
     block_cbwNr_info:
         const _cbwNr;
         const 1;
         const 30;
 },
 io_sbutE_entry() //  [R1]
         { []
         }
     {offset
       cbwNN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwNR; else goto cbwNS;
       cbwNR: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbwNS: // global
           I64[Sp - 16] = block_cbwNI_info;
           _sbutz::P64 = P64[R1 + 15];
           R5 = _sbutz::P64;
           R4 = GHC.IO.Handle.hIsOpen2_closure+2;
           R3 = P64[R1 + 7];
           R2 = GHC.IO.Handle.hIsOpen3_closure;
           P64[Sp - 8] = _sbutz::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbutE_info" {
     io_sbutE_info:
         const io_sbutE_entry;
         const 2;
         const 21474836491;
         const 4294967299;
         const SbuCr_srt+888;
 },
 _cbwNI() //  [R1]
         { []
         }
     {offset
       cbwNI: // global
           I64[Sp] = block_cbwNK_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwNX; else goto cbwNL;
       ubwNX: // global
           call _cbwNK(R1) args: 0, res: 0, upd: 0;
       cbwNL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNI_info" {
     block_cbwNI_info:
         const _cbwNI;
         const 1;
         const 30;
 },
 _cbwNK() //  [R1]
         { []
         }
     {offset
       cbwNK: // global
           I64[Sp] = block_cbwNQ_info;
           R2 = P64[R1 + 7];
           _sbutL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbutL::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNK_info" {
     block_cbwNK_info:
         const _cbwNK;
         const 1;
         const 30;
 },
 _cbwNQ() //  []
         { []
         }
     {offset
       cbwNQ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNQ_info" {
     block_cbwNQ_info:
         const _cbwNQ;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hIsOpen1_entry() //  [R2]
         { []
         }
     {offset
       cbwO2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbwO3; else goto cbwO4;
       cbwO3: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hIsOpen1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwO4: // global
           I64[Sp - 8] = block_cbwN7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwOl; else goto cbwN8;
       ubwOl: // global
           call _cbwN7(R1) args: 0, res: 0, upd: 0;
       cbwN8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen1_info" {
     GHC.IO.Handle.hIsOpen1_info:
         const GHC.IO.Handle.hIsOpen1_entry;
         const 0;
         const 55834574862;
         const 8589934597;
         const SbuCr_srt+888;
 },
 _cbwN7() //  [R1]
         { []
         }
     {offset
       cbwN7: // global
           if (R1 & 7 == 1) goto cbwNZ; else goto cbwO0;
       cbwNZ: // global
           I64[Sp - 16] = block_cbwNc_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbwO0: // global
           I64[Sp - 16] = block_cbwNB_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwN7_info" {
     block_cbwN7_info:
         const _cbwN7;
         const 0;
         const 21474836510;
         const SbuCr_srt+888;
 },
 _cbwNc() //  [R1]
         { []
         }
     {offset
       cbwNc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwO8; else goto cbwO7;
       cbwO8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwO7: // global
           I64[Hp - 16] = io_sbuto_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwNe::P64 = Hp - 15;
           if (R1 == 0) goto cbwOc; else goto cbwOb;
       cbwOc: // global
           R1 = _cbwNe::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwOb: // global
           R1 = _cbwNe::P64;
           Sp = Sp + 24;
           call io_sbuto_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNc_info" {
     block_cbwNc_info:
         const _cbwNc;
         const 2;
         const 21474836510;
         const SbuCr_srt+888;
 },
 _cbwNB() //  [R1]
         { []
         }
     {offset
       cbwNB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwOg; else goto cbwOf;
       cbwOg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbwOf: // global
           I64[Hp - 16] = io_sbutE_info;
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbwND::P64 = Hp - 15;
           if (R1 == 0) goto cbwOk; else goto cbwOj;
       cbwOk: // global
           R1 = _cbwND::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbwOj: // global
           R1 = _cbwND::P64;
           Sp = Sp + 24;
           call io_sbutE_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwNB_info" {
     block_cbwNB_info:
         const _cbwNB;
         const 2;
         const 21474836510;
         const SbuCr_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.45074111 UTC

[section ""data" . GHC.IO.Handle.hIsOpen_closure" {
     GHC.IO.Handle.hIsOpen_closure:
         const GHC.IO.Handle.hIsOpen_info;
         const 0;
 },
 GHC.IO.Handle.hIsOpen_entry() //  [R2]
         { []
         }
     {offset
       cbwPs: // global
           R2 = R2;
           call GHC.IO.Handle.hIsOpen1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hIsOpen_info" {
     GHC.IO.Handle.hIsOpen_info:
         const GHC.IO.Handle.hIsOpen_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+912;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.45456678 UTC

[section ""data" . GHC.IO.Handle.hGetPosn1_closure" {
     GHC.IO.Handle.hGetPosn1_closure:
         const GHC.IO.Handle.hGetPosn1_info;
         const 0;
 },
 GHC.IO.Handle.hGetPosn1_entry() //  [R2]
         { []
         }
     {offset
       cbwPG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwPH; else goto cbwPI;
       cbwPH: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hGetPosn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwPI: // global
           I64[Sp - 16] = block_cbwPD_info;
           R4 = GHC.IO.Handle.hGetPosn2_closure+2;
           R3 = R2;
           _sbutO::P64 = R2;
           R2 = GHC.IO.Handle.hGetPosn3_closure;
           P64[Sp - 8] = _sbutO::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.wantSeekableHandle1_entry(R4,
                                                                  R3,
                                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn1_info" {
     GHC.IO.Handle.hGetPosn1_info:
         const GHC.IO.Handle.hGetPosn1_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SbuCr_srt+920;
 },
 _cbwPD() //  [R1]
         { []
         }
     {offset
       cbwPD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwPL; else goto cbwPK;
       cbwPL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwPK: // global
           I64[Hp - 16] = GHC.IO.Handle.HandlePosn_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwPD_info" {
     block_cbwPD_info:
         const _cbwPD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.459844004 UTC

[section ""data" . GHC.IO.Handle.hGetPosn_closure" {
     GHC.IO.Handle.hGetPosn_closure:
         const GHC.IO.Handle.hGetPosn_info;
         const 0;
 },
 GHC.IO.Handle.hGetPosn_entry() //  [R2]
         { []
         }
     {offset
       cbwQ2: // global
           R2 = R2;
           call GHC.IO.Handle.hGetPosn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hGetPosn_info" {
     GHC.IO.Handle.hGetPosn_info:
         const GHC.IO.Handle.hGetPosn_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+920;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.463422961 UTC

[section ""cstring" . GHC.IO.Handle.hClose3_bytes" {
     GHC.IO.Handle.hClose3_bytes:
         I8[] [104,67,108,111,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.46560551 UTC

[section ""data" . GHC.IO.Handle.hClose2_closure" {
     GHC.IO.Handle.hClose2_closure:
         const GHC.IO.Handle.hClose2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.IO.Handle.hClose2_entry() //  [R1]
         { []
         }
     {offset
       cbwQg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwQh; else goto cbwQi;
       cbwQh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwQi: // global
           (_cbwQd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwQd::I64 == 0) goto cbwQf; else goto cbwQe;
       cbwQf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwQe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwQd::I64;
           R2 = GHC.IO.Handle.hClose3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hClose2_info" {
     GHC.IO.Handle.hClose2_info:
         const GHC.IO.Handle.hClose2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.471865002 UTC

[section ""data" . GHC.IO.Handle.$wlvl_closure" {
     GHC.IO.Handle.$wlvl_closure:
         const GHC.IO.Handle.$wlvl_info;
         const 0;
 },
 sat_sbuu9_entry() //  [R1]
         { []
         }
     {offset
       cbwQK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbwQL; else goto cbwQM;
       cbwQL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwQM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbwQD_info;
           _sbutU::P64 = P64[R1 + 16];
           R1 = P64[R1 + 24];
           P64[Sp - 24] = _sbutU::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubwRd; else goto cbwQE;
       ubwRd: // global
           call _cbwQD(R1) args: 0, res: 0, upd: 0;
       cbwQE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuu9_info" {
     sat_sbuu9_info:
         const sat_sbuu9_entry;
         const 2;
         const 18;
 },
 _cbwQD() //  [R1]
         { []
         }
     {offset
       cbwQD: // global
           if (R1 & 7 == 1) goto cbwQH; else goto cbwQI;
       cbwQH: // global
           _sbutU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbwQP_info;
           R1 = _sbutU::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubwRc; else goto cbwQR;
       ubwRc: // global
           call _cbwQP(R1) args: 0, res: 0, upd: 0;
       cbwQR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbwQI: // global
           R1 = R1 & (-8);
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwQD_info" {
     block_cbwQD_info:
         const _cbwQD;
         const 1;
         const 30;
 },
 _cbwQP() //  [R1]
         { []
         }
     {offset
       cbwQP: // global
           if (R1 & 7 == 1) goto cbwQX; else goto cbwR4;
       cbwQX: // global
           Hp = Hp + 16;
           _sbuu2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwR7; else goto cbwQZ;
       cbwQZ: // global
           _sbuu3::P64 = P64[_sbuu2::P64 + 7];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbuu3::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cbwR4: // global
           Hp = Hp + 16;
           _sbuu2::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbwR7; else goto cbwR6;
       cbwR7: // global
           HpAlloc = 16;
           R1 = _sbuu2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbwR6: // global
           _sbuu5::P64 = P64[_sbuu2::P64 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _sbuu5::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwQP_info" {
     block_cbwQP_info:
         const _cbwQP;
         const 0;
         const 30;
 },
 sat_sbuub_entry() //  [R1]
         { []
         }
     {offset
       cbwRg: // global
           _sbuub::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbwRh; else goto cbwRi;
       cbwRi: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto cbwRk; else goto cbwRj;
       cbwRk: // global
           HpAlloc = 104;
           goto cbwRh;
       cbwRh: // global
           R1 = _sbuub::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwRj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbuub::P64;
           _sbutU::P64 = P64[_sbuub::P64 + 16];
           _sbutV::P64 = P64[_sbuub::P64 + 24];
           _sbutW::P64 = P64[_sbuub::P64 + 32];
           _sbutX::P64 = P64[_sbuub::P64 + 40];
           _sbutY::P64 = P64[_sbuub::P64 + 48];
           I64[Hp - 96] = sat_sbuu9_info;
           P64[Hp - 80] = _sbutU::P64;
           P64[Hp - 72] = _sbutY::P64;
           I64[Hp - 64] = GHC.Base.Just_con_info;
           P64[Hp - 56] = _sbutU::P64;
           I64[Hp - 48] = GHC.IO.Exception.IOError_con_info;
           P64[Hp - 40] = Hp - 62;
           P64[Hp - 32] = _sbutV::P64;
           P64[Hp - 24] = GHC.IO.Handle.hClose2_closure;
           P64[Hp - 16] = _sbutW::P64;
           P64[Hp - 8] = _sbutX::P64;
           P64[Hp] = Hp - 96;
           R2 = Hp - 47;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuub_info" {
     sat_sbuub_info:
         const sat_sbuub_entry;
         const 5;
         const 12884901903;
         const SbuCr_srt+952;
 },
 GHC.IO.Handle.$wlvl_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cbwRl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbwRp; else goto cbwRo;
       cbwRp: // global
           HpAlloc = 56;
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.$wlvl_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbwRo: // global
           I64[Hp - 48] = sat_sbuub_info;
           P64[Hp - 32] = R2;
           P64[Hp - 24] = R3;
           P64[Hp - 16] = R4;
           P64[Hp - 8] = R5;
           P64[Hp] = R6;
           R1 = Hp - 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.$wlvl_info" {
     GHC.IO.Handle.$wlvl_info:
         const GHC.IO.Handle.$wlvl_entry;
         const 0;
         const 30064771086;
         const 25769803801;
         const SbuCr_srt+952;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.488061118 UTC

[section ""data" . GHC.IO.Handle.hClose1_closure" {
     GHC.IO.Handle.hClose1_closure:
         const GHC.IO.Handle.hClose1_info;
         const 0;
 },
 section ""relreadonly" . ubwU3_srtd" {
     ubwU3_srtd:
         const SbuCr_srt+240;
         const 94;
         const 54043195528445953;
         const 973078528;
 },
 GHC.IO.Handle.hClose1_entry() //  [R2]
         { []
         }
     {offset
       cbwSg: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbwSh; else goto cbwSi;
       cbwSh: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hClose1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbwSi: // global
           I64[Sp - 8] = block_cbwS9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubwTX; else goto cbwSa;
       ubwTX: // global
           call _cbwS9(R1) args: 0, res: 0, upd: 0;
       cbwSa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hClose1_info" {
     GHC.IO.Handle.hClose1_info:
         const GHC.IO.Handle.hClose1_entry;
         const 0;
         const 18446744069414584334;
         const 8589934597;
         const ubwU3_srtd;
 },
 section ""relreadonly" . ubwU4_srtd" {
     ubwU4_srtd:
         const SbuCr_srt+240;
         const 93;
         const 54043195528445953;
         const 436207616;
 },
 _cbwS9() //  [R1]
         { []
         }
     {offset
       cbwS9: // global
           if (R1 & 7 == 1) goto cbwSd; else goto cbwSe;
       cbwSd: // global
           I64[Sp - 8] = block_cbwSl_info;
           R5 = GHC.IO.Handle.Internals.hClose_help1_closure+2;
           R4 = P64[R1 + 15];
           R3 = R1;
           R2 = GHC.IO.Handle.hClose2_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
       cbwSe: // global
           I64[Sp - 16] = block_cbwT4_info;
           R5 = GHC.IO.Handle.Internals.hClose_help1_closure+2;
           R4 = P64[R1 + 14];
           R3 = R1;
           R2 = GHC.IO.Handle.hClose2_closure;
           P64[Sp - 8] = P64[R1 + 22];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwS9_info" {
     block_cbwS9_info:
         const _cbwS9;
         const 0;
         const 18446744069414584350;
         const ubwU4_srtd;
 },
 section ""relreadonly" . ubwU5_srtd" {
     ubwU5_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwSl() //  [R1]
         { []
         }
     {offset
       cbwSl: // global
           I64[Sp] = block_cbwSn_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubwTY; else goto cbwSq;
       ubwTY: // global
           call _cbwSn(R1) args: 0, res: 0, upd: 0;
       cbwSq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwSl_info" {
     block_cbwSl_info:
         const _cbwSl;
         const 1;
         const 18446744069414584350;
         const ubwU5_srtd;
 },
 section ""relreadonly" . ubwU6_srtd" {
     ubwU6_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwSn() //  [R1]
         { []
         }
     {offset
       cbwSn: // global
           if (R1 & 7 == 1) goto ubwTW; else goto cbwSG;
       ubwTW: // global
           Sp = Sp + 16;
           call _cbwTl() args: 0, res: 0, upd: 0;
       cbwSG: // global
           I64[Sp] = block_cbwSz_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubwTZ; else goto cbwSA;
       ubwTZ: // global
           call _cbwSz(R1) args: 0, res: 0, upd: 0;
       cbwSA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwSn_info" {
     block_cbwSn_info:
         const _cbwSn;
         const 1;
         const 18446744069414584350;
         const ubwU6_srtd;
 },
 section ""relreadonly" . ubwU7_srtd" {
     ubwU7_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwSz() //  [R1]
         { []
         }
     {offset
       cbwSz: // global
           I64[Sp - 16] = block_cbwSE_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwSz_info" {
     block_cbwSz_info:
         const _cbwSz;
         const 1;
         const 18446744069414584350;
         const ubwU7_srtd;
 },
 section ""relreadonly" . ubwU8_srtd" {
     ubwU8_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwSE() //  [R1]
         { []
         }
     {offset
       cbwSE: // global
           I64[Sp] = block_cbwSL_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwSE_info" {
     block_cbwSE_info:
         const _cbwSE;
         const 3;
         const 18446744069414584350;
         const ubwU8_srtd;
 },
 _cbwSL() //  [R1]
         { []
         }
     {offset
       cbwSL: // global
           if (R1 & 7 == 1) goto cbwSS; else goto cbwSX;
       cbwSS: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbwSX: // global
           I64[Sp + 16] = block_cbwSV_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwSL_info" {
     block_cbwSL_info:
         const _cbwSL;
         const 3;
         const 4294967326;
         const SbuCr_srt+968;
 },
 _cbwSV() //  [R1]
         { []
         }
     {offset
       cbwSV: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 39];
           R4 = P64[R1 + 31];
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.$wlvl_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwSV_info" {
     block_cbwSV_info:
         const _cbwSV;
         const 1;
         const 4294967326;
         const SbuCr_srt+968;
 },
 section ""relreadonly" . ubwU9_srtd" {
     ubwU9_srtd:
         const SbuCr_srt+240;
         const 93;
         const 54043195528445953;
         const 436207616;
 },
 _cbwT4() //  [R1]
         { []
         }
     {offset
       cbwT4: // global
           I64[Sp] = block_cbwT6_info;
           R5 = GHC.IO.Handle.Internals.hClose_help1_closure+2;
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 16];
           R2 = GHC.IO.Handle.hClose2_closure;
           P64[Sp + 8] = R1;
           call GHC.IO.Handle.Internals.$wwithHandle'_entry(R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwT4_info" {
     block_cbwT4_info:
         const _cbwT4;
         const 2;
         const 18446744069414584350;
         const ubwU9_srtd;
 },
 section ""relreadonly" . ubwUa_srtd" {
     ubwUa_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwT6() //  [R1]
         { []
         }
     {offset
       cbwT6: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbwTf; else goto cbwTe;
       cbwTf: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbwTe: // global
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 38;
           I64[Sp + 8] = block_cbwTa_info;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call Data.Maybe.catMaybes1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwT6_info" {
     block_cbwT6_info:
         const _cbwT6;
         const 2;
         const 18446744069414584350;
         const ubwUa_srtd;
 },
 section ""relreadonly" . ubwUb_srtd" {
     ubwUb_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwTa() //  [R1]
         { []
         }
     {offset
       cbwTa: // global
           if (R1 & 7 == 1) goto ubwTV; else goto cbwTv;
       ubwTV: // global
           Sp = Sp + 16;
           call _cbwTl() args: 0, res: 0, upd: 0;
       cbwTv: // global
           I64[Sp] = block_cbwTo_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ubwU1; else goto cbwTp;
       ubwU1: // global
           call _cbwTo(R1) args: 0, res: 0, upd: 0;
       cbwTp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwTa_info" {
     block_cbwTa_info:
         const _cbwTa;
         const 1;
         const 18446744069414584350;
         const ubwUb_srtd;
 },
 _cbwTl() //  []
         { []
         }
     {offset
       cbwTl: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . ubwUc_srtd" {
     ubwUc_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwTo() //  [R1]
         { []
         }
     {offset
       cbwTo: // global
           I64[Sp - 16] = block_cbwTt_info;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Exception.$p1Exception_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwTo_info" {
     block_cbwTo_info:
         const _cbwTo;
         const 1;
         const 18446744069414584350;
         const ubwUc_srtd;
 },
 section ""relreadonly" . ubwUd_srtd" {
     ubwUd_srtd:
         const SbuCr_srt+240;
         const 93;
         const 1;
         const 402653184;
 },
 _cbwTt() //  [R1]
         { []
         }
     {offset
       cbwTt: // global
           I64[Sp] = block_cbwTA_info;
           R3 = GHC.IO.Exception.$fExceptionIOException4_closure;
           R2 = R1;
           call Data.Typeable.Internal.sameTypeRep_entry(R3,
                                                         R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwTt_info" {
     block_cbwTt_info:
         const _cbwTt;
         const 3;
         const 18446744069414584350;
         const ubwUd_srtd;
 },
 _cbwTA() //  [R1]
         { []
         }
     {offset
       cbwTA: // global
           if (R1 & 7 == 1) goto cbwTH; else goto cbwTM;
       cbwTH: // global
           R1 = P64[Sp + 16];
           Sp = Sp + 32;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cbwTM: // global
           I64[Sp + 16] = block_cbwTK_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwTA_info" {
     block_cbwTA_info:
         const _cbwTA;
         const 3;
         const 4294967326;
         const SbuCr_srt+968;
 },
 _cbwTK() //  [R1]
         { []
         }
     {offset
       cbwTK: // global
           R6 = P64[R1 + 47];
           R5 = P64[R1 + 39];
           R4 = P64[R1 + 31];
           R3 = P64[R1 + 15];
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.IO.Handle.$wlvl_entry(R6,
                                          R5,
                                          R4,
                                          R3,
                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbwTK_info" {
     block_cbwTK_info:
         const _cbwTK;
         const 1;
         const 4294967326;
         const SbuCr_srt+968;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.521046793 UTC

[section ""data" . GHC.IO.Handle.hClose_closure" {
     GHC.IO.Handle.hClose_closure:
         const GHC.IO.Handle.hClose_info;
         const 0;
 },
 GHC.IO.Handle.hClose_entry() //  [R2]
         { []
         }
     {offset
       cbwVW: // global
           R2 = R2;
           call GHC.IO.Handle.hClose1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hClose_info" {
     GHC.IO.Handle.hClose_info:
         const GHC.IO.Handle.hClose_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+984;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.524279597 UTC

[section ""data" . lvl28_rbnXa_closure" {
     lvl28_rbnXa_closure:
         const GHC.Types.C#_con_info;
         const 123;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.525949504 UTC

[section ""data" . lvl29_rbnXb_closure" {
     lvl29_rbnXb_closure:
         const GHC.Types.C#_con_info;
         const 44;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.527461158 UTC

[section ""cstring" . lvl30_rbnXc_bytes" {
     lvl30_rbnXc_bytes:
         I8[] [100,117,112,108,101,120,32,40,114,101,97,100,45,119,114,105,116,101,41]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.529793651 UTC

[section ""data" . lvl31_rbnXd_closure" {
     lvl31_rbnXd_closure:
         const lvl31_rbnXd_info;
         const 0;
         const 0;
         const 0;
 },
 lvl31_rbnXd_entry() //  [R1]
         { []
         }
     {offset
       cbwWc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwWd; else goto cbwWe;
       cbwWd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwWe: // global
           (_cbwW9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwW9::I64 == 0) goto cbwWb; else goto cbwWa;
       cbwWb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwWa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwW9::I64;
           R2 = lvl30_rbnXc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl31_rbnXd_info" {
     lvl31_rbnXd_info:
         const lvl31_rbnXd_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.533940136 UTC

[section ""cstring" . lvl32_rbnXe_bytes" {
     lvl32_rbnXe_bytes:
         I8[] [110,111,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.536090562 UTC

[section ""data" . lvl33_rbnXf_closure" {
     lvl33_rbnXf_closure:
         const lvl33_rbnXf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl33_rbnXf_entry() //  [R1]
         { []
         }
     {offset
       cbwWu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwWv; else goto cbwWw;
       cbwWv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwWw: // global
           (_cbwWr::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwWr::I64 == 0) goto cbwWt; else goto cbwWs;
       cbwWt: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwWs: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwWr::I64;
           R2 = lvl32_rbnXe_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl33_rbnXf_info" {
     lvl33_rbnXf_info:
         const lvl33_rbnXf_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.540086448 UTC

[section ""cstring" . lvl34_rbnXg_bytes" {
     lvl34_rbnXg_bytes:
         I8[] [108,105,110,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.542314875 UTC

[section ""data" . lvl35_rbnXh_closure" {
     lvl35_rbnXh_closure:
         const lvl35_rbnXh_info;
         const 0;
         const 0;
         const 0;
 },
 lvl35_rbnXh_entry() //  [R1]
         { []
         }
     {offset
       cbwWM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwWN; else goto cbwWO;
       cbwWN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwWO: // global
           (_cbwWJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwWJ::I64 == 0) goto cbwWL; else goto cbwWK;
       cbwWL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwWK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwWJ::I64;
           R2 = lvl34_rbnXg_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl35_rbnXh_info" {
     lvl35_rbnXh_info:
         const lvl35_rbnXh_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.545668461 UTC

[section ""cstring" . lvl36_rbnXi_bytes" {
     lvl36_rbnXi_bytes:
         I8[] [115,104,111,119,72,97,110,100,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.547761532 UTC

[section ""data" . lvl37_rbnXj_closure" {
     lvl37_rbnXj_closure:
         const lvl37_rbnXj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl37_rbnXj_entry() //  [R1]
         { []
         }
     {offset
       cbwX4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwX5; else goto cbwX6;
       cbwX5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwX6: // global
           (_cbwX1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwX1::I64 == 0) goto cbwX3; else goto cbwX2;
       cbwX3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwX2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwX1::I64;
           R2 = lvl36_rbnXi_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl37_rbnXj_info" {
     lvl37_rbnXj_info:
         const lvl37_rbnXj_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.551140557 UTC

[section ""cstring" . lvl38_rbnXk_bytes" {
     lvl38_rbnXk_bytes:
         I8[] [108,111,99,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.552741362 UTC

[section ""cstring" . lvl39_rbnXl_bytes" {
     lvl39_rbnXl_bytes:
         I8[] [116,121,112,101,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.554737876 UTC

[section ""cstring" . lvl40_rbnXm_bytes" {
     lvl40_rbnXm_bytes:
         I8[] [98,117,102,102,101,114,105,110,103,61]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.556334728 UTC

[section ""cstring" . lvl41_rbnXn_bytes" {
     lvl41_rbnXn_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.558565327 UTC

[section ""data" . lvl42_rbnXo_closure" {
     lvl42_rbnXo_closure:
         const lvl42_rbnXo_info;
         const 0;
         const 0;
         const 0;
 },
 lvl42_rbnXo_entry() //  [R1]
         { []
         }
     {offset
       cbwXp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwXq; else goto cbwXr;
       cbwXq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwXr: // global
           (_cbwXm::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwXm::I64 == 0) goto cbwXo; else goto cbwXn;
       cbwXo: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwXn: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwXm::I64;
           R2 = lvl41_rbnXn_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl42_rbnXo_info" {
     lvl42_rbnXo_info:
         const lvl42_rbnXo_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.563267422 UTC

[section ""data" . lvl43_rbnXp_closure" {
     lvl43_rbnXp_closure:
         const lvl43_rbnXp_info;
         const 0;
         const 0;
         const 0;
 },
 lvl43_rbnXp_entry() //  [R1]
         { []
         }
     {offset
       cbwXG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwXH; else goto cbwXI;
       cbwXH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwXI: // global
           (_cbwXD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwXD::I64 == 0) goto cbwXF; else goto cbwXE;
       cbwXF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwXE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwXD::I64;
           R3 = lvl42_rbnXo_closure;
           R2 = lvl33_rbnXf_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl43_rbnXp_info" {
     lvl43_rbnXp_info:
         const lvl43_rbnXp_entry;
         const 0;
         const 12884901909;
         const SbuCr_srt+992;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.56727044 UTC

[section ""data" . lvl44_rbnXq_closure" {
     lvl44_rbnXq_closure:
         const lvl44_rbnXq_info;
         const 0;
         const 0;
         const 0;
 },
 lvl44_rbnXq_entry() //  [R1]
         { []
         }
     {offset
       cbwXX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwXY; else goto cbwXZ;
       cbwXY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwXZ: // global
           (_cbwXU::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwXU::I64 == 0) goto cbwXW; else goto cbwXV;
       cbwXW: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwXV: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwXU::I64;
           R3 = lvl42_rbnXo_closure;
           R2 = lvl35_rbnXh_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl44_rbnXq_info" {
     lvl44_rbnXq_info:
         const lvl44_rbnXq_entry;
         const 0;
         const 12884901909;
         const SbuCr_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.571063474 UTC

[section ""cstring" . lvl45_rbnXr_bytes" {
     lvl45_rbnXr_bytes:
         I8[] [98,108,111,99,107,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.572739285 UTC

[section ""data" . lvl46_rbnXs_closure" {
     lvl46_rbnXs_closure:
         const :_con_info;
         const GHC.Show.$fShow(,)2_closure;
         const lvl42_rbnXo_closure;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.575038877 UTC

[section ""data" . lvl47_rbnXt_closure" {
     lvl47_rbnXt_closure:
         const lvl47_rbnXt_info;
         const 0;
         const 0;
         const 0;
 },
 lvl47_rbnXt_entry() //  [R1]
         { []
         }
     {offset
       cbwYg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbwYh; else goto cbwYi;
       cbwYh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwYi: // global
           (_cbwYd::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cbwYd::I64 == 0) goto cbwYf; else goto cbwYe;
       cbwYf: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cbwYe: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cbwYd::I64;
           R3 = lvl42_rbnXo_closure;
           R2 = GHC.IO.Handle.Types.$fShowHandleType11_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl47_rbnXt_info" {
     lvl47_rbnXt_info:
         const lvl47_rbnXt_entry;
         const 0;
         const 21474836501;
         const SbuCr_srt+1000;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.595995565 UTC

[section ""data" . GHC.IO.Handle.hShow2_closure" {
     GHC.IO.Handle.hShow2_closure:
         const GHC.IO.Handle.hShow2_info;
         const 0;
 },
 sat_sbuvF_entry() //  [R1]
         { []
         }
     {offset
       cbwZw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbwZC; else goto cbwZD;
       cbwZC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbwZD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbwZo_info;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call stg_noDuplicate#() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuvF_info" {
     sat_sbuvF_info:
         const sat_sbuvF_entry;
         const 1;
         const 4294967312;
         const SbuCr_srt+1024;
 },
 _cbwZo() //  []
         { []
         }
     {offset
       cbwZo: // global
           _sbuvu::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_cbwZt_info;
           R1 = _sbuvu::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ubwZK; else goto cbwZu;
       ubwZK: // global
           call _cbwZt(R1) args: 0, res: 0, upd: 0;
       cbwZu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwZo_info" {
     block_cbwZo_info:
         const _cbwZo;
         const 1;
         const 4294967326;
         const SbuCr_srt+1024;
 },
 _cbwZt() //  [R1]
         { []
         }
     {offset
       cbwZt: // global
           I64[Sp] = block_cbwZz_info;
           R4 = lvl46_rbnXs_closure+2;
           R3 = I64[R1 + 31];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwZt_info" {
     block_cbwZt_info:
         const _cbwZt;
         const 0;
         const 4294967326;
         const SbuCr_srt+1024;
 },
 _cbwZz() //  [R1, R2]
         { []
         }
     {offset
       cbwZz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbwZJ; else goto cbwZI;
       cbwZJ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbwZI: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwZz_info" {
     block_cbwZz_info:
         const _cbwZz;
         const 0;
         const 30;
 },
 sat_sbuvN_entry() //  [R1]
         { []
         }
     {offset
       cbwZU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cbx00; else goto cbx01;
       cbx00: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbx01: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cbwZR_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ubx06; else goto cbwZS;
       ubx06: // global
           call _cbwZR(R1) args: 0, res: 0, upd: 0;
       cbwZS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuvN_info" {
     sat_sbuvN_info:
         const sat_sbuvN_entry;
         const 1;
         const 4294967312;
         const SbuCr_srt+1024;
 },
 _cbwZR() //  [R1]
         { []
         }
     {offset
       cbwZR: // global
           I64[Sp] = block_cbwZX_info;
           R4 = lvl46_rbnXs_closure+2;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwZR_info" {
     block_cbwZR_info:
         const _cbwZR;
         const 0;
         const 4294967326;
         const SbuCr_srt+1024;
 },
 _cbwZX() //  [R1, R2]
         { []
         }
     {offset
       cbwZX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbx05; else goto cbx04;
       cbx05: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cbx04: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwZX_info" {
     block_cbwZX_info:
         const _cbwZX;
         const 0;
         const 30;
 },
 sat_sbuvP_entry() //  [R1]
         { []
         }
     {offset
       cbx0c: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbx0d; else goto cbx0e;
       cbx0d: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbx0e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cbwZ8_info;
           _sbuve::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sbuve::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ubx0y; else goto cbwZ9;
       ubx0y: // global
           call _cbwZ8(R1) args: 0, res: 0, upd: 0;
       cbwZ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuvP_info" {
     sat_sbuvP_info:
         const sat_sbuvP_entry;
         const 2;
         const 30064771090;
         const SbuCr_srt+1024;
 },
 _cbwZ8() //  [R1]
         { []
         }
     {offset
       cbwZ8: // global
           _cbx0b::P64 = R1 & 7;
           if (_cbx0b::P64 < 3) goto ubx0w; else goto cbx0a;
       ubx0w: // global
           if (_cbx0b::P64 < 2) goto cbx08; else goto cbx09;
       cbx08: // global
           R1 = lvl43_rbnXp_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbx09: // global
           R1 = lvl44_rbnXq_closure;
           Sp = Sp + 16;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbx0a: // global
           I64[Sp] = block_cbwZf_info;
           R1 = P64[R1 + 5];
           if (R1 & 7 != 0) goto ubx0x; else goto cbwZg;
       ubx0x: // global
           call _cbwZf(R1) args: 0, res: 0, upd: 0;
       cbwZg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwZ8_info" {
     block_cbwZ8_info:
         const _cbwZ8;
         const 1;
         const 30064771102;
         const SbuCr_srt+1024;
 },
 _cbwZf() //  [R1]
         { []
         }
     {offset
       cbwZf: // global
           if (R1 & 7 == 1) goto cbx0m; else goto cbx0r;
       cbx0m: // global
           Hp = Hp + 48;
           _sbuvq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbx0u; else goto cbx0o;
       cbx0o: // global
           I64[Hp - 40] = sat_sbuvF_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl45_rbnXr_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
       cbx0r: // global
           Hp = Hp + 48;
           _sbuvq::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbx0u; else goto cbx0t;
       cbx0u: // global
           HpAlloc = 48;
           R1 = _sbuvq::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbx0t: // global
           _sbuvH::P64 = P64[_sbuvq::P64 + 6];
           I64[Hp - 40] = sat_sbuvN_info;
           P64[Hp - 24] = _sbuvH::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 40;
           R3 = Hp - 14;
           R2 = lvl45_rbnXr_bytes;
           Sp = Sp + 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwZf_info" {
     block_cbwZf_info:
         const _cbwZf;
         const 1;
         const 4294967326;
         const SbuCr_srt+1024;
 },
 karg_sbuvn_entry() //  [R1]
         { []
         }
     {offset
       cbx0z: // global
           _sbuvn::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbx0A; else goto cbx0B;
       cbx0B: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbx0D; else goto cbx0C;
       cbx0D: // global
           HpAlloc = 32;
           goto cbx0A;
       cbx0A: // global
           R1 = _sbuvn::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbx0C: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbuvn::P64;
           _sbuvc::P64 = P64[_sbuvn::P64 + 16];
           _sbuve::P64 = P64[_sbuvn::P64 + 24];
           I64[Hp - 24] = sat_sbuvP_info;
           P64[Hp - 8] = _sbuvc::P64;
           P64[Hp] = _sbuve::P64;
           R3 = Hp - 24;
           R2 = lvl40_rbnXm_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . karg_sbuvn_info" {
     karg_sbuvn_info:
         const karg_sbuvn_entry;
         const 2;
         const 30064771090;
         const SbuCr_srt+1024;
 },
 sat_sbuvY_entry() //  [R1]
         { []
         }
     {offset
       cbx0L: // global
           _sbuvY::P64 = R1;
           if ((Sp + -40) < SpLim) (likely: False) goto cbx0M; else goto cbx0N;
       cbx0N: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbx0P; else goto cbx0O;
       cbx0P: // global
           HpAlloc = 32;
           goto cbx0M;
       cbx0M: // global
           R1 = _sbuvY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbx0O: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbuvY::P64;
           _sbuuZ::P64 = P64[_sbuvY::P64 + 16];
           _sbuvc::P64 = P64[_sbuvY::P64 + 24];
           _sbuve::P64 = P64[_sbuvY::P64 + 32];
           _sbuvm::P64 = P64[_sbuvY::P64 + 40];
           I64[Hp - 24] = karg_sbuvn_info;
           P64[Hp - 8] = _sbuvc::P64;
           P64[Hp] = _sbuve::P64;
           I64[Sp - 40] = block_cbx0E_info;
           R1 = _sbuuZ::P64;
           P64[Sp - 32] = Hp - 24;
           P64[Sp - 24] = _sbuvm::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubx1H; else goto cbx0F;
       ubx1H: // global
           call _cbx0E(R1) args: 0, res: 0, upd: 0;
       cbx0F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuvY_info" {
     sat_sbuvY_info:
         const sat_sbuvY_entry;
         const 4;
         const 2194728288271;
         const SbuCr_srt+1024;
 },
 _cbx0E() //  [R1]
         { []
         }
     {offset
       cbx0E: // global
           if (R1 & 7 == 1) goto cbx0I; else goto cbx0J;
       cbx0I: // global
           I64[Sp] = block_cbx0S_info;
           R1 = P64[Sp + 16];
           if (R1 & 7 != 0) goto ubx1G; else goto cbx0U;
       ubx1G: // global
           call _cbx0S(R1) args: 0, res: 0, upd: 0;
       cbx0U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cbx0J: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbx1B; else goto cbx1A;
       cbx1B: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbx1A: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 14;
           R2 = lvl31_rbnXd_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbx0E_info" {
     block_cbx0E_info:
         const _cbx0E;
         const 2;
         const 270582939678;
         const SbuCr_srt+1048;
 },
 _cbx0S() //  [R1]
         { []
         }
     {offset
       cbx0S: // global
           _cbwZ0::P64 = P64[Sp + 8];
           _cbx1C::P64 = R1 & 7;
           if (_cbx1C::P64 < 5) goto ubx1D; else goto ubx1F;
       ubx1D: // global
           if (_cbx1C::P64 < 4) goto ubx1E; else goto cbx1e;
       ubx1E: // global
           if (_cbx1C::P64 < 3) goto cbx10; else goto cbx17;
       cbx10: // global
           Hp = Hp + 24;
           _sbuvR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbx1v; else goto cbx12;
       cbx12: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbwZ0::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType9_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbx17: // global
           Hp = Hp + 24;
           _sbuvR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbx1v; else goto cbx19;
       cbx19: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbwZ0::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType7_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbx1e: // global
           Hp = Hp + 24;
           _sbuvR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbx1v; else goto cbx1g;
       cbx1g: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbwZ0::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType5_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       ubx1F: // global
           if (_cbx1C::P64 < 6) goto cbx1l; else goto cbx1s;
       cbx1l: // global
           Hp = Hp + 24;
           _sbuvR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbx1v; else goto cbx1n;
       cbx1n: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbwZ0::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType3_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
       cbx1s: // global
           Hp = Hp + 24;
           _sbuvR::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cbx1v; else goto cbx1u;
       cbx1v: // global
           HpAlloc = 24;
           R1 = _sbuvR::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbx1u: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = _cbwZ0::P64;
           R3 = Hp - 14;
           R2 = GHC.IO.Handle.Types.$fShowHandleType1_closure;
           Sp = Sp + 24;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbx0S_info" {
     block_cbx0S_info:
         const _cbx0S;
         const 130;
         const 133143986206;
         const SbuCr_srt+1048;
 },
 sat_sbuvZ_entry() //  [R1]
         { []
         }
     {offset
       cbx1I: // global
           _sbuvZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbx1J; else goto cbx1K;
       cbx1K: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cbx1M; else goto cbx1L;
       cbx1M: // global
           HpAlloc = 48;
           goto cbx1J;
       cbx1J: // global
           R1 = _sbuvZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbx1L: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbuvZ::P64;
           _sbuuZ::P64 = P64[_sbuvZ::P64 + 16];
           _sbuvc::P64 = P64[_sbuvZ::P64 + 24];
           _sbuve::P64 = P64[_sbuvZ::P64 + 32];
           _sbuvm::P64 = P64[_sbuvZ::P64 + 40];
           I64[Hp - 40] = sat_sbuvY_info;
           P64[Hp - 24] = _sbuuZ::P64;
           P64[Hp - 16] = _sbuvc::P64;
           P64[Hp - 8] = _sbuve::P64;
           P64[Hp] = _sbuvm::P64;
           R3 = Hp - 40;
           R2 = lvl39_rbnXl_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuvZ_info" {
     sat_sbuvZ_info:
         const sat_sbuvZ_entry;
         const 4;
         const 2194728288271;
         const SbuCr_srt+1024;
 },
 sat_sbuw1_entry() //  [R1]
         { []
         }
     {offset
       cbx1O: // global
           _sbuw1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbx1P; else goto cbx1Q;
       cbx1Q: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cbx1S; else goto cbx1R;
       cbx1S: // global
           HpAlloc = 72;
           goto cbx1P;
       cbx1P: // global
           R1 = _sbuw1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbx1R: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sbuw1::P64;
           _sbuuY::P64 = P64[_sbuw1::P64 + 16];
           _sbuuZ::P64 = P64[_sbuw1::P64 + 24];
           _sbuvc::P64 = P64[_sbuw1::P64 + 32];
           _sbuve::P64 = P64[_sbuw1::P64 + 40];
           _sbuvm::P64 = P64[_sbuw1::P64 + 48];
           I64[Hp - 64] = sat_sbuvZ_info;
           P64[Hp - 48] = _sbuuZ::P64;
           P64[Hp - 40] = _sbuvc::P64;
           P64[Hp - 32] = _sbuve::P64;
           P64[Hp - 24] = _sbuvm::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl29_rbnXb_closure+1;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = _sbuuY::P64;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuw1_info" {
     sat_sbuw1_info:
         const sat_sbuw1_entry;
         const 5;
         const 2194728288271;
         const SbuCr_srt+1024;
 },
 sat_sbuw2_entry() //  [R1]
         { []
         }
     {offset
       cbx1T: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cbx1U; else goto cbx1V;
       cbx1U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbx1V: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_cbwYE_info;
           _sbuuY::P64 = P64[R1 + 16];
           _sbuuZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 32];
           P64[Sp - 32] = _sbuuY::P64;
           P64[Sp - 24] = _sbuuZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ubx28; else goto cbwYF;
       ubx28: // global
           call _cbwYE(R1) args: 0, res: 0, upd: 0;
       cbwYF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbuw2_info" {
     sat_sbuw2_info:
         const sat_sbuw2_entry;
         const 3;
         const 4393751543823;
         const SbuCr_srt+1024;
 },
 _cbwYE() //  [R1]
         { []
         }
     {offset
       cbwYE: // global
           I64[Sp - 16] = block_cbwYJ_info;
           _sbuvc::P64 = P64[R1 + 55];
           _sbuve::P64 = P64[R1 + 71];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _sbuve::P64;
           P64[Sp] = _sbuvc::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubx27; else goto cbwYK;
       ubx27: // global
           call _cbwYJ(R1) args: 0, res: 0, upd: 0;
       cbwYK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwYE_info" {
     block_cbwYE_info:
         const _cbwYE;
         const 2;
         const 4393751543838;
         const SbuCr_srt+1024;
 },
 _cbwYJ() //  [R1]
         { []
         }
     {offset
       cbwYJ: // global
           if (R1 & 7 == 1) goto cbx25; else goto cbx1Y;
       cbx25: // global
           R1 = lvl47_rbnXt_closure;
           Sp = Sp + 40;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cbx1Y: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cbx21; else goto cbx20;
       cbx21: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cbx20: // global
           I64[Hp - 48] = sat_sbuw1_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 32];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R3 = Hp - 48;
           R2 = lvl38_rbnXk_bytes;
           Sp = Sp + 40;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cbwYJ_info" {
     block_cbwYJ_info:
         const _cbwYJ;
         const 4;
         const 4393751543838;
         const SbuCr_srt+1024;
 },
 act_sbuv2_entry() //  [R1, R2]
         { []
         }
     {offset
       cbx2a: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cbx2e; else goto cbx2d;
       cbx2e: // global
           HpAlloc = 64;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbx2d: // global
           _sbuuY::P64 = P64[R1 + 6];
           _sbuuZ::P64 = P64[R1 + 14];
           I64[Hp - 56] = sat_sbuw2_info;
           P64[Hp - 40] = _sbuuY::P64;
           P64[Hp - 32] = _sbuuZ::P64;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = lvl28_rbnXa_closure+1;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . act_sbuv2_info" {
     act_sbuv2_info:
         const act_sbuv2_entry;
         const 2;
         const 4393751543819;
         const 8589934597;
         const SbuCr_srt+1024;
 },
 sat_sbuwi_entry() //  [R1, R2]
         { []
         }
     {offset
       cbx2z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbx2A; else goto cbx2B;
       cbx2A: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbx2B: // global
           I64[Sp - 16] = block_cbx2w_info;
           _sbuwc::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sbuwc::P64;
           Sp = Sp - 16;
           call act_sbuv2_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuwi_info" {
     sat_sbuwi_info:
         const sat_sbuwi_entry;
         const 1;
         const 4393751543817;
         const 8589934597;
         const SbuCr_srt+1024;
 },
 _cbx2w() //  [R1]
         { []
         }
     {offset
       cbx2w: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbx2E; else goto cbx2D;
       cbx2E: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbx2D: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx2w_info" {
     block_cbx2w_info:
         const _cbx2w;
         const 1;
         const 30;
 },
 io_sbuwa_entry() //  [R1]
         { []
         }
     {offset
       cbx2K: // global
           _sbuwa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbx2O; else goto cbx2P;
       cbx2P: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbx2R; else goto cbx2Q;
       cbx2R: // global
           HpAlloc = 16;
           goto cbx2O;
       cbx2O: // global
           R1 = _sbuwa::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbx2Q: // global
           _sbuv2::P64 = P64[_sbuwa::P64 + 7];
           _sbuw4::P64 = P64[_sbuwa::P64 + 15];
           _sbuw6::P64 = P64[_sbuwa::P64 + 23];
           I64[Hp - 8] = sat_sbuwi_info;
           P64[Hp] = _sbuv2::P64;
           I64[Sp - 16] = block_cbx2F_info;
           R5 = _sbuw6::P64;
           R4 = Hp - 6;
           R3 = _sbuw4::P64;
           R2 = lvl37_rbnXj_closure;
           P64[Sp - 8] = _sbuw6::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuwa_info" {
     io_sbuwa_info:
         const io_sbuwa_entry;
         const 3;
         const 1152358558948392968;
         const 4294967299;
         const SbuCr_srt+888;
 },
 _cbx2F() //  [R1]
         { []
         }
     {offset
       cbx2F: // global
           I64[Sp] = block_cbx2H_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubx2W; else goto cbx2I;
       ubx2W: // global
           call _cbx2H(R1) args: 0, res: 0, upd: 0;
       cbx2I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx2F_info" {
     block_cbx2F_info:
         const _cbx2F;
         const 1;
         const 30;
 },
 _cbx2H() //  [R1]
         { []
         }
     {offset
       cbx2H: // global
           I64[Sp] = block_cbx2N_info;
           R2 = P64[R1 + 7];
           _sbuwo::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuwo::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx2H_info" {
     block_cbx2H_info:
         const _cbx2H;
         const 1;
         const 30;
 },
 _cbx2N() //  []
         { []
         }
     {offset
       cbx2N: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx2N_info" {
     block_cbx2N_info:
         const _cbx2N;
         const 1;
         const 30;
 },
 sat_sbuwF_entry() //  [R1, R2]
         { []
         }
     {offset
       cbx3e: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbx3f; else goto cbx3g;
       cbx3f: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbx3g: // global
           I64[Sp - 16] = block_cbx3b_info;
           _sbuwz::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _sbuwz::P64;
           Sp = Sp - 16;
           call act_sbuv2_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sbuwF_info" {
     sat_sbuwF_info:
         const sat_sbuwF_entry;
         const 1;
         const 4393751543817;
         const 8589934597;
         const SbuCr_srt+1024;
 },
 _cbx3b() //  [R1]
         { []
         }
     {offset
       cbx3b: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbx3j; else goto cbx3i;
       cbx3j: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cbx3i: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx3b_info" {
     block_cbx3b_info:
         const _cbx3b;
         const 1;
         const 30;
 },
 io_sbuwx_entry() //  [R1]
         { []
         }
     {offset
       cbx3p: // global
           _sbuwx::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cbx3t; else goto cbx3u;
       cbx3u: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbx3w; else goto cbx3v;
       cbx3w: // global
           HpAlloc = 16;
           goto cbx3t;
       cbx3t: // global
           R1 = _sbuwx::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cbx3v: // global
           _sbuv2::P64 = P64[_sbuwx::P64 + 7];
           _sbuw4::P64 = P64[_sbuwx::P64 + 15];
           _sbuws::P64 = P64[_sbuwx::P64 + 23];
           I64[Hp - 8] = sat_sbuwF_info;
           P64[Hp] = _sbuv2::P64;
           I64[Sp - 16] = block_cbx3k_info;
           R5 = _sbuws::P64;
           R4 = Hp - 6;
           R3 = _sbuw4::P64;
           R2 = lvl37_rbnXj_closure;
           P64[Sp - 8] = _sbuws::P64;
           Sp = Sp - 16;
           call GHC.IO.Handle.Internals.$wdo_operation_entry(R5,
                                                             R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_sbuwx_info" {
     io_sbuwx_info:
         const io_sbuwx_entry;
         const 3;
         const 1152358558948392968;
         const 4294967299;
         const SbuCr_srt+888;
 },
 _cbx3k() //  [R1]
         { []
         }
     {offset
       cbx3k: // global
           I64[Sp] = block_cbx3m_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ubx3B; else goto cbx3n;
       ubx3B: // global
           call _cbx3m(R1) args: 0, res: 0, upd: 0;
       cbx3n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx3k_info" {
     block_cbx3k_info:
         const _cbx3k;
         const 1;
         const 30;
 },
 _cbx3m() //  [R1]
         { []
         }
     {offset
       cbx3m: // global
           I64[Sp] = block_cbx3s_info;
           R2 = P64[R1 + 7];
           _sbuwL::P64 = P64[R1 + 15];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sbuwL::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx3m_info" {
     block_cbx3m_info:
         const _cbx3m;
         const 1;
         const 30;
 },
 _cbx3s() //  []
         { []
         }
     {offset
       cbx3s: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx3s_info" {
     block_cbx3s_info:
         const _cbx3s;
         const 1;
         const 30;
 },
 GHC.IO.Handle.hShow2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cbx3G: // global
           _sbuv0::P64 = R4;
           _sbuuZ::P64 = R3;
           _sbuuY::P64 = R2;
           if ((Sp + -32) < SpLim) (likely: False) goto cbx3H; else goto cbx3I;
       cbx3I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbx3K; else goto cbx3J;
       cbx3K: // global
           HpAlloc = 24;
           goto cbx3H;
       cbx3H: // global
           R4 = _sbuv0::P64;
           R3 = _sbuuZ::P64;
           R2 = _sbuuY::P64;
           R1 = GHC.IO.Handle.hShow2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cbx3J: // global
           I64[Hp - 16] = act_sbuv2_info;
           P64[Hp - 8] = _sbuuY::P64;
           P64[Hp] = _sbuuZ::P64;
           I64[Sp - 16] = block_cbx2f_info;
           R1 = _sbuv0::P64;
           P64[Sp - 8] = Hp - 14;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ubx41; else goto cbx2g;
       ubx41: // global
           call _cbx2f(R1) args: 0, res: 0, upd: 0;
       cbx2g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hShow2_info" {
     GHC.IO.Handle.hShow2_info:
         const GHC.IO.Handle.hShow2_entry;
         const 0;
         const 2305280063555239950;
         const 17179869207;
         const SbuCr_srt+888;
 },
 _cbx2f() //  [R1]
         { []
         }
     {offset
       cbx2f: // global
           if (R1 & 7 == 1) goto cbx3D; else goto cbx3E;
       cbx3D: // global
           I64[Sp - 16] = block_cbx2k_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       cbx3E: // global
           I64[Sp - 16] = block_cbx2Z_info;
           P64[Sp - 8] = P64[R1 + 14];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx2f_info" {
     block_cbx2f_info:
         const _cbx2f;
         const 1;
         const 1152358558948392990;
         const SbuCr_srt+888;
 },
 _cbx2k() //  [R1]
         { []
         }
     {offset
       cbx2k: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbx3O; else goto cbx3N;
       cbx3O: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbx3N: // global
           I64[Hp - 24] = io_sbuwa_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbx2m::P64 = Hp - 23;
           if (R1 == 0) goto cbx3S; else goto cbx3R;
       cbx3S: // global
           R1 = _cbx2m::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbx3R: // global
           R1 = _cbx2m::P64;
           Sp = Sp + 32;
           call io_sbuwa_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx2k_info" {
     block_cbx2k_info:
         const _cbx2k;
         const 3;
         const 1152358558948392990;
         const SbuCr_srt+888;
 },
 _cbx2Z() //  [R1]
         { []
         }
     {offset
       cbx2Z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbx3W; else goto cbx3V;
       cbx3W: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbx3V: // global
           I64[Hp - 24] = io_sbuwx_info;
           P64[Hp - 16] = P64[Sp + 24];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 8];
           _cbx31::P64 = Hp - 23;
           if (R1 == 0) goto cbx40; else goto cbx3Z;
       cbx40: // global
           R1 = _cbx31::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       cbx3Z: // global
           R1 = _cbx31::P64;
           Sp = Sp + 32;
           call io_sbuwx_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx2Z_info" {
     block_cbx2Z_info:
         const _cbx2Z;
         const 3;
         const 1152358558948392990;
         const SbuCr_srt+888;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.666066833 UTC

[section ""data" . GHC.IO.Handle.hShow1_closure" {
     GHC.IO.Handle.hShow1_closure:
         const GHC.IO.Handle.hShow1_info;
         const 0;
 },
 GHC.IO.Handle.hShow1_entry() //  [R2]
         { []
         }
     {offset
       cbx89: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cbx8a; else goto cbx8b;
       cbx8a: // global
           R2 = R2;
           R1 = GHC.IO.Handle.hShow1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbx8b: // global
           I64[Sp - 8] = block_cbx82_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ubx8i; else goto cbx83;
       ubx8i: // global
           call _cbx82(R1) args: 0, res: 0, upd: 0;
       cbx83: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hShow1_info" {
     GHC.IO.Handle.hShow1_info:
         const GHC.IO.Handle.hShow1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SbuCr_srt+1112;
 },
 _cbx82() //  [R1]
         { []
         }
     {offset
       cbx82: // global
           if (R1 & 7 == 1) goto cbx86; else goto cbx87;
       cbx86: // global
           R4 = R1;
           R3 = GHC.Types.False_closure+1;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.IO.Handle.hShow2_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
       cbx87: // global
           R4 = R1;
           R3 = GHC.Types.True_closure+2;
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.IO.Handle.hShow2_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbx82_info" {
     block_cbx82_info:
         const _cbx82;
         const 0;
         const 4294967326;
         const SbuCr_srt+1112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.671298794 UTC

[section ""data" . GHC.IO.Handle.hShow_closure" {
     GHC.IO.Handle.hShow_closure:
         const GHC.IO.Handle.hShow_info;
         const 0;
 },
 GHC.IO.Handle.hShow_entry() //  [R2]
         { []
         }
     {offset
       cbx8B: // global
           R2 = R2;
           call GHC.IO.Handle.hShow1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.hShow_info" {
     GHC.IO.Handle.hShow_info:
         const GHC.IO.Handle.hShow_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SbuCr_srt+1120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.674789045 UTC

[section ""data" . GHC.IO.Handle.HandlePosn_closure" {
     GHC.IO.Handle.HandlePosn_closure:
         const GHC.IO.Handle.HandlePosn_info;
 },
 GHC.IO.Handle.HandlePosn_entry() //  [R2, R3]
         { []
         }
     {offset
       cbx8N: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cbx8R; else goto cbx8Q;
       cbx8R: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.IO.Handle.HandlePosn_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbx8Q: // global
           I64[Hp - 16] = GHC.IO.Handle.HandlePosn_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.HandlePosn_info" {
     GHC.IO.Handle.HandlePosn_info:
         const GHC.IO.Handle.HandlePosn_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.678611595 UTC

[section ""cstring" . ibx8Z_str" {
     ibx8Z_str:
         I8[] [98,97,115,101,58,71,72,67,46,73,79,46,72,97,110,100,108,101,46,72,97,110,100,108,101,80,111,115,110]
 },
 GHC.IO.Handle.HandlePosn_con_entry() //  [R1]
         { []
         }
     {offset
       cbx8Y: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.IO.Handle.HandlePosn_con_info" {
     GHC.IO.Handle.HandlePosn_con_info:
         const GHC.IO.Handle.HandlePosn_con_entry;
         const 2;
         const 4;
         const ibx8Z_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:06:29.682335214 UTC

[section ""relreadonly" . SbuCr_srt" {
     SbuCr_srt:
         const GHC.Show.$w$cshowsPrec4_closure;
         const GHC.IO.Handle.$w$cshowsPrec_closure;
         const GHC.IO.Handle.$fShowHandlePosn_$cshowsPrec_closure;
         const GHC.IO.Handle.$fShowHandlePosn_$cshow_closure;
         const GHC.IO.Handle.$fShowHandlePosn1_closure;
         const GHC.IO.Handle.Internals.hLookAhead_1_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.hLookAhead2_closure;
         const GHC.IO.Handle.hLookAhead1_closure;
         const GHC.IO.Handle.Internals.wantWritableHandle1_closure;
         const GHC.IO.Handle.hFlush2_closure;
         const GHC.IO.Handle.hFlush1_closure;
         const GHC.IO.Handle.Internals.flushBuffer1_closure;
         const GHC.IO.Handle.hFlushAll2_closure;
         const GHC.IO.Handle.Internals.$wdo_operation_closure;
         const GHC.IO.Handle.hFlushAll3_closure;
         const GHC.IO.Handle.hFlushAll1_closure;
         const GHC.IO.Handle.Internals.ioe_closedHandle1_closure;
         const GHC.IO.Handle.hGetEcho6_closure;
         const GHC.IO.Handle.hGetEcho_fun_closure;
         const GHC.IO.Handle.hGetEcho5_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl1_rbnWC_closure;
         const lvl3_rbnWE_closure;
         const ioe_dupHandlesNotCompatible_rbnWF_closure;
         const GHC.IO.Encoding.getLocaleEncoding1_closure;
         const GHC.IO.Handle.Internals.mkDuplexHandle5_closure;
         const dupHandle__rbnWK_closure;
         const GHC.IO.failIO1_closure;
         const lvl5_rbnWM_closure;
         const Data.Typeable.Internal.sameTypeRep_closure;
         const dupHandleTo_rbnWN_closure;
         const GHC.IO.Handle.Internals.withAllHandles__1_closure;
         const GHC.IO.Handle.$whSetNewlineMode_closure;
         const GHC.IO.Handle.hSetNewlineMode2_closure;
         const GHC.IO.Handle.hSetNewlineMode1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.IO.Handle.Internals.flushCharBuffer2_closure;
         const lvl11_rbnWT_closure;
         const GHC.IO.Handle.hSetBinaryMode1_closure;
         const lvl9_rbnWR_closure;
         const GHC.IO.Handle.Internals.ioe_semiclosedHandle1_closure;
         const GHC.IO.Handle.hIsSeekable2_closure;
         const GHC.IO.Handle.hIsSeekable3_closure;
         const GHC.IO.Handle.hIsSeekable1_closure;
         const GHC.Integer.Type.plusInteger_closure;
         const GHC.Integer.Type.minusInteger_closure;
         const GHC.IO.Handle.hGetPosn2_closure;
         const GHC.IO.Handle.Internals.wantSeekableHandle1_closure;
         const GHC.IO.Handle.hGetPosn3_closure;
         const GHC.IO.Handle.hTell1_closure;
         const lvl14_rbnWW_closure;
         const GHC.IO.Handle.Internals.flushBuffer2_closure;
         const GHC.IO.Handle.hSeek1_closure;
         const lvl13_rbnWV_closure;
         const GHC.IO.Handle.hSetPosn1_closure;
         const GHC.IO.Handle.hGetEncoding3_closure;
         const GHC.IO.Handle.Internals.$wdo_operation_closure;
         const GHC.IO.Handle.hGetEncoding1_closure;
         const lvl18_rbnX0_closure;
         const GHC.IO.Handle.hSetEncoding1_closure;
         const lvl16_rbnWY_closure;
         const GHC.IO.Handle.Internals.$wioe_bufsiz_closure;
         const GHC.IO.Handle.Internals.ioe_closedHandle1_closure;
         const GHC.IO.Handle.hSetBuffering1_closure;
         const GHC.IO.Handle.hSetBuffering2_closure;
         const GHC.IO.Handle.hIsEOF3_closure;
         const GHC.IO.Handle.Internals.wantReadableHandle_1_closure;
         const GHC.IO.Handle.hIsEOF1_closure;
         const GHC.IO.Handle.FD.stdin_closure;
         const GHC.IO.Handle.isEOF1_closure;
         const lvl20_rbnX2_closure;
         const GHC.IO.Handle.hSetFileSize1_closure;
         const GHC.IO.Handle.hFileSize5_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const sat_sbuif_closure;
         const GHC.IO.Handle.hFileSize3_closure;
         const GHC.IO.Handle.hFileSize4_closure;
         const GHC.IO.Handle.hFileSize10_closure;
         const GHC.IO.Handle.hFileSize2_closure;
         const GHC.IO.Handle.hFileSize8_closure;
         const GHC.IO.Handle.hFileSize1_closure;
         const lvl21_rbnX3_closure;
         const dupHandleTo_rbnWN_closure;
         const GHC.IO.Handle.Internals.hClose_help1_closure;
         const GHC.IO.Handle.Internals.$wwithHandle'_closure;
         const GHC.IO.Handle.Internals.$wwithHandle__'_closure;
         const GHC.IO.Handle.hDuplicateTo1_closure;
         const lvl25_rbnX7_closure;
         const GHC.IO.failIO1_closure;
         const lvl27_rbnX9_closure;
         const dupHandle__rbnWK_closure;
         const lvl7_rbnWP_closure;
         const GHC.IO.Handle.hDuplicate1_closure;
         const lvl23_rbnX5_closure;
         const GHC.IO.Handle.hGetEcho2_closure;
         const GHC.IO.Handle.Internals.ioe_closedHandle1_closure;
         const GHC.IO.Handle.hGetEcho3_closure;
         const GHC.IO.Handle.hGetEcho1_closure;
         const GHC.IO.Handle.hSetEcho2_closure;
         const GHC.IO.Handle.hSetEcho1_closure;
         const GHC.IO.Handle.hGetBuffering2_closure;
         const GHC.IO.Handle.hGetBuffering_fun_closure;
         const GHC.IO.Handle.hGetBuffering1_closure;
         const GHC.IO.Handle.hIsWritable2_closure;
         const GHC.IO.Handle.hIsWritable3_closure;
         const GHC.IO.Handle.hIsWritable1_closure;
         const GHC.IO.Handle.hIsReadable2_closure;
         const GHC.IO.Handle.hIsReadable3_closure;
         const GHC.IO.Handle.hIsReadable1_closure;
         const GHC.IO.Handle.hIsClosed3_closure;
         const GHC.IO.Handle.Internals.$wdo_operation_closure;
         const GHC.IO.Handle.hIsClosed1_closure;
         const GHC.IO.Handle.hIsOpen3_closure;
         const GHC.IO.Handle.hIsOpen1_closure;
         const GHC.IO.Handle.hGetPosn1_closure;
         const GHC.IO.Handle.hGetPosn3_closure;
         const GHC.IO.Handle.Internals.wantSeekableHandle1_closure;
         const GHC.IO.Handle.hGetPosn2_closure;
         const GHC.IO.Handle.hClose2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.IO.Handle.$wlvl_closure;
         const GHC.IO.Exception.$fExceptionIOException4_closure;
         const GHC.IO.Handle.hClose1_closure;
         const lvl33_rbnXf_closure;
         const lvl42_rbnXo_closure;
         const lvl35_rbnXh_closure;
         const GHC.IO.Handle.Types.$fShowHandleType11_closure;
         const lvl46_rbnXs_closure;
         const lvl43_rbnXp_closure;
         const lvl44_rbnXq_closure;
         const GHC.IO.Handle.Types.$fShowHandleType1_closure;
         const GHC.IO.Handle.Types.$fShowHandleType3_closure;
         const GHC.IO.Handle.Types.$fShowHandleType5_closure;
         const GHC.IO.Handle.Types.$fShowHandleType7_closure;
         const GHC.IO.Handle.Types.$fShowHandleType9_closure;
         const lvl31_rbnXd_closure;
         const lvl47_rbnXt_closure;
         const lvl37_rbnXj_closure;
         const GHC.IO.Handle.hShow2_closure;
         const GHC.IO.Handle.hShow1_closure;
 }]

