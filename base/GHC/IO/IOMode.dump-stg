
==================== Pre unarise: ====================
2018-03-16 15:59:38.77714305 UTC

GHC.IO.IOMode.$fReadIOMode21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadMode"#;

GHC.IO.IOMode.$fReadIOMode20 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode21;

GHC.IO.IOMode.$fReadIOMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WriteMode"#;

GHC.IO.IOMode.$fReadIOMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode17;

GHC.IO.IOMode.$fReadIOMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AppendMode"#;

GHC.IO.IOMode.$fReadIOMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode13;

GHC.IO.IOMode.$fReadIOMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadWriteMode"#;

GHC.IO.IOMode.$fReadIOMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode9;

GHC.IO.IOMode.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4KZ8 w1_s4KZ9]
        case w_s4KZ8 of {
          GHC.IO.IOMode.ReadMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode20 w1_s4KZ9;
          GHC.IO.IOMode.WriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode16 w1_s4KZ9;
          GHC.IO.IOMode.AppendMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode12 w1_s4KZ9;
          GHC.IO.IOMode.ReadWriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode8 w1_s4KZ9;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4KZb w1_s4KZc w2_s4KZd]
        GHC.IO.IOMode.$w$cshowsPrec w1_s4KZc w2_s4KZd;

GHC.IO.IOMode.$fShowIOMode_$cshow
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4KZe]
        case x_s4KZe of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fReadIOMode20;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fReadIOMode16;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fReadIOMode12;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fReadIOMode8;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowList
  :: [GHC.IO.IOMode.IOMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4KZg s_s4KZh]
        GHC.Show.showList__ GHC.IO.IOMode.$w$cshowsPrec ls_s4KZg s_s4KZh;

GHC.IO.IOMode.$fShowIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.IOMode.$fShowIOMode_$cshowsPrec
                                    GHC.IO.IOMode.$fShowIOMode_$cshow
                                    GHC.IO.IOMode.$fShowIOMode_$cshowList];

GHC.IO.IOMode.$fReadIOMode19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZi k_s4KZj] k_s4KZj GHC.IO.IOMode.ReadMode;

GHC.IO.IOMode.$fReadIOMode18
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode20
                        GHC.IO.IOMode.$fReadIOMode19];

GHC.IO.IOMode.$fReadIOMode15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZk k_s4KZl] k_s4KZl GHC.IO.IOMode.WriteMode;

GHC.IO.IOMode.$fReadIOMode14
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode16
                        GHC.IO.IOMode.$fReadIOMode15];

GHC.IO.IOMode.$fReadIOMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZm k_s4KZn] k_s4KZn GHC.IO.IOMode.AppendMode;

GHC.IO.IOMode.$fReadIOMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode12
                        GHC.IO.IOMode.$fReadIOMode11];

GHC.IO.IOMode.$fReadIOMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZo k_s4KZp] k_s4KZp GHC.IO.IOMode.ReadWriteMode;

GHC.IO.IOMode.$fReadIOMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode8
                        GHC.IO.IOMode.$fReadIOMode7];

GHC.IO.IOMode.$fReadIOMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode6 GHC.Types.[]];

GHC.IO.IOMode.$fReadIOMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode10
                      GHC.IO.IOMode.$fReadIOMode5];

GHC.IO.IOMode.$fReadIOMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode14
                      GHC.IO.IOMode.$fReadIOMode4];

GHC.IO.IOMode.$fReadIOMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode18
                      GHC.IO.IOMode.$fReadIOMode3];

GHC.IO.IOMode.$fReadIOMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s4KZq]
        GHC.Read.choose2 GHC.IO.IOMode.$fReadIOMode_sps eta_s4KZq;

GHC.IO.IOMode.$fReadIOMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.IOMode.$fReadIOMode2 eta_B2 eta_B1;

GHC.IO.IOMode.$fReadIOMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s4KZr]
        let {
          sat_s4KZs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.IOMode.IOMode
          [LclId] =
              [n_s4KZr] \u []
                  GHC.Read.list3
                      GHC.IO.IOMode.$fReadIOMode2
                      n_s4KZr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s4KZs;

GHC.IO.IOMode.$fReadIOMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.IOMode.$fReadIOMode1;

GHC.IO.IOMode.$fReadIOMode22
  :: Text.ParserCombinators.ReadP.P [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u []
        GHC.IO.IOMode.$fReadIOMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.IOMode.$fReadIOMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.IOMode.$fReadIOMode22 eta_B1;

GHC.IO.IOMode.$fReadIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.IOMode.$fReadIOMode_$creadsPrec
                                    GHC.IO.IOMode.$fReadIOMode_$creadList
                                    GHC.IO.IOMode.$fReadIOMode1
                                    GHC.IO.IOMode.$fReadIOMode_$creadListPrec];

GHC.IO.IOMode.$fEqIOMode_$c==
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZt ds1_s4KZu]
        case ds_s4KZt of {
          GHC.IO.IOMode.ReadMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
        };

GHC.IO.IOMode.$fEqIOMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s4KZA eta1_s4KZB]
        case eta_s4KZA of {
          GHC.IO.IOMode.ReadMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
        };

GHC.IO.IOMode.$fEqIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.IOMode.$fEqIOMode_$c==
                                     GHC.IO.IOMode.$fEqIOMode_$c/=];

GHC.IO.IOMode.$fOrdIOMode_$ccompare
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4KZH b_s4KZI]
        case a_s4KZH of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4KZI of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.LT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4KZI of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.GT [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4KZI of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4KZI of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.EQ [];
              };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4KZO b_s4KZP]
        case a_s4KZO of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4KZP of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4KZP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4KZP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4KZP of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4KZV b_s4KZW]
        case b_s4KZW of {
          GHC.IO.IOMode.ReadMode ->
              case a_s4KZV of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case a_s4KZV of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case a_s4KZV of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case a_s4KZV of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$cmax
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4L02 y_s4L03]
        case y_s4L03 of {
          GHC.IO.IOMode.ReadMode -> x_s4L02;
          GHC.IO.IOMode.WriteMode ->
              case x_s4L02 of {
                __DEFAULT -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4L02 of {
                __DEFAULT -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case x_s4L02 of { __DEFAULT -> GHC.IO.IOMode.ReadWriteMode []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4L08 b_s4L09]
        case a_s4L08 of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4L09 of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4L09 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4L09 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4L09 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4L0f b_s4L0g]
        GHC.IO.IOMode.$fOrdIOMode_$c< b_s4L0g a_s4L0f;

GHC.IO.IOMode.$fOrdIOMode_$cmin
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4L0h y_s4L0i]
        case y_s4L0i of {
          GHC.IO.IOMode.ReadMode ->
              case x_s4L0h of { __DEFAULT -> GHC.IO.IOMode.ReadMode []; };
          GHC.IO.IOMode.WriteMode ->
              case x_s4L0h of wild1_s4L0l {
                __DEFAULT -> wild1_s4L0l;
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.WriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4L0h of wild1_s4L0m {
                __DEFAULT -> wild1_s4L0m;
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
              };
          GHC.IO.IOMode.ReadWriteMode -> x_s4L0h;
        };

GHC.IO.IOMode.$fOrdIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.IOMode.$fEqIOMode
                                      GHC.IO.IOMode.$fOrdIOMode_$ccompare
                                      GHC.IO.IOMode.$fOrdIOMode_$c<
                                      GHC.IO.IOMode.$fOrdIOMode_$c<=
                                      GHC.IO.IOMode.$fOrdIOMode_$c>
                                      GHC.IO.IOMode.$fOrdIOMode_$c>=
                                      GHC.IO.IOMode.$fOrdIOMode_$cmax
                                      GHC.IO.IOMode.$fOrdIOMode_$cmin];

GHC.IO.IOMode.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L0n w_s4L0o]
        case ww_s4L0n of {
          GHC.IO.IOMode.ReadMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.WriteMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.AppendMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> -3#;
                GHC.IO.IOMode.WriteMode -> -2#;
                GHC.IO.IOMode.AppendMode -> -1#;
                GHC.IO.IOMode.ReadWriteMode -> 0#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s4L0u w1_s4L0v]
        case w_s4L0u of {
          (,) ww1_s4L0x [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.IOMode.$w$cunsafeIndex ww1_s4L0x w1_s4L0v
              of
              ww3_s4L0z
              { __DEFAULT -> GHC.Types.I# [ww3_s4L0z];
              };
        };

GHC.IO.IOMode.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L0A ww1_s4L0B w_s4L0C]
        let-no-escape {
          $j_s4L0D [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4L0B w_s4L0C] \r [a#_s4L0E]
                  let-no-escape {
                    $j1_s4L0F [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s4L0C a#_s4L0E] \r [b#_s4L0G]
                            case w_s4L0C of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [0# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s4L0G] of sat_s4L0J {
                                          __DEFAULT -> tagToEnum# [sat_s4L0J];
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [1# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s4L0G] of sat_s4L0L {
                                          __DEFAULT -> tagToEnum# [sat_s4L0L];
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [2# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s4L0G] of sat_s4L0N {
                                          __DEFAULT -> tagToEnum# [sat_s4L0N];
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [3# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [3# b#_s4L0G] of sat_s4L0P {
                                          __DEFAULT -> tagToEnum# [sat_s4L0P];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s4L0B of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4L0F 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4L0F 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4L0F 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4L0F 3#;
                    };
        } in 
          case ww_s4L0A of {
            GHC.IO.IOMode.ReadMode -> $j_s4L0D 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L0D 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L0D 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L0D 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4L0S w1_s4L0T]
        case w_s4L0S of {
          (,) ww1_s4L0V [Occ=Once] ww2_s4L0W [Occ=Once] ->
              GHC.IO.IOMode.$w$cinRange ww1_s4L0V ww2_s4L0W w1_s4L0T;
        };

lvl_r4KYL :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r4KYM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r4KYN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl3_r4KYO :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [3#];

GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
  :: GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s4L0X]
        case a_s4L0X of {
          GHC.IO.IOMode.ReadMode -> lvl_r4KYL;
          GHC.IO.IOMode.WriteMode -> lvl1_r4KYM;
          GHC.IO.IOMode.AppendMode -> lvl2_r4KYN;
          GHC.IO.IOMode.ReadWriteMode -> lvl3_r4KYO;
        };

GHC.IO.IOMode.$fIxIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L0Z]
        let {
          sat_s4L13 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L0Z] \u []
                  case x_s4L0Z of wild_s4L11 {
                    __DEFAULT ->
                        case +# [wild_s4L11 1#] of sat_s4L12 {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 sat_s4L12;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4L10 [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L0Z] \u [] tagToEnum# [x_s4L0Z];
        } in  : [sat_s4L10 sat_s4L13];

GHC.IO.IOMode.$fIxIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L14]
        let {
          sat_s4L18 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L14] \u []
                  case x_s4L14 of wild_s4L16 {
                    __DEFAULT ->
                        case +# [wild_s4L16 1#] of sat_s4L17 {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 sat_s4L17;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4L15 [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L14] \u [] tagToEnum# [x_s4L14];
        } in  : [sat_s4L15 sat_s4L18];

GHC.IO.IOMode.$fIxIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L19]
        let {
          sat_s4L1d [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L19] \u []
                  case x_s4L19 of wild_s4L1b {
                    __DEFAULT ->
                        case +# [wild_s4L1b 1#] of sat_s4L1c {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go sat_s4L1c;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4L1a [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L19] \u [] tagToEnum# [x_s4L19];
        } in  : [sat_s4L1a sat_s4L1d];

GHC.IO.IOMode.$fEnumIOMode_go4 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L1e]
        let {
          sat_s4L1i [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L1e] \u []
                  case x_s4L1e of wild_s4L1g {
                    __DEFAULT ->
                        case +# [wild_s4L1g 1#] of sat_s4L1h {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 sat_s4L1h;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4L1f [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L1e] \u [] tagToEnum# [x_s4L1e];
        } in  : [sat_s4L1f sat_s4L1i];

GHC.IO.IOMode.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L1j ww1_s4L1k]
        let-no-escape {
          $j_s4L1l [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4L1k] \r [a#_s4L1m]
                  case ww1_s4L1k of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [a#_s4L1m 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 a#_s4L1m;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [a#_s4L1m 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 a#_s4L1m;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [a#_s4L1m 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go a#_s4L1m;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [a#_s4L1m 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 a#_s4L1m;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s4L1j of {
            GHC.IO.IOMode.ReadMode -> $j_s4L1l 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L1l 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L1l 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L1l 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s4L1t]
        case w_s4L1t of {
          (,) ww1_s4L1v [Occ=Once] ww2_s4L1w [Occ=Once] ->
              GHC.IO.IOMode.$w$crange ww1_s4L1v ww2_s4L1w;
        };

GHC.IO.IOMode.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4L1x ww1_s4L1y]
        case GHC.IO.IOMode.$w$cinRange ww_s4L1x ww1_s4L1y ww1_s4L1y of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s4L1x of {
                GHC.IO.IOMode.ReadMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> 1#;
                      GHC.IO.IOMode.WriteMode -> 2#;
                      GHC.IO.IOMode.AppendMode -> 3#;
                      GHC.IO.IOMode.ReadWriteMode -> 4#;
                    };
                GHC.IO.IOMode.WriteMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> 0#;
                      GHC.IO.IOMode.WriteMode -> 1#;
                      GHC.IO.IOMode.AppendMode -> 2#;
                      GHC.IO.IOMode.ReadWriteMode -> 3#;
                    };
                GHC.IO.IOMode.AppendMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> -1#;
                      GHC.IO.IOMode.WriteMode -> 0#;
                      GHC.IO.IOMode.AppendMode -> 1#;
                      GHC.IO.IOMode.ReadWriteMode -> 2#;
                    };
                GHC.IO.IOMode.ReadWriteMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> -2#;
                      GHC.IO.IOMode.WriteMode -> -1#;
                      GHC.IO.IOMode.AppendMode -> 0#;
                      GHC.IO.IOMode.ReadWriteMode -> 1#;
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4L1F]
        case w_s4L1F of {
          (,) ww1_s4L1H [Occ=Once] ww2_s4L1I [Occ=Once] ->
              case GHC.IO.IOMode.$w$crangeSize ww1_s4L1H ww2_s4L1I of ww3_s4L1J {
                __DEFAULT -> GHC.Types.I# [ww3_s4L1J];
              };
        };

GHC.IO.IOMode.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L1K ww1_s4L1L]
        case ww_s4L1K of {
          GHC.IO.IOMode.ReadMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> 1#;
                GHC.IO.IOMode.WriteMode -> 2#;
                GHC.IO.IOMode.AppendMode -> 3#;
                GHC.IO.IOMode.ReadWriteMode -> 4#;
              };
          GHC.IO.IOMode.WriteMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.AppendMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4L1R]
        case w_s4L1R of {
          (,) ww1_s4L1T [Occ=Once] ww2_s4L1U [Occ=Once] ->
              case
                  GHC.IO.IOMode.$w$cunsafeRangeSize ww1_s4L1T ww2_s4L1U
              of
              ww3_s4L1V
              { __DEFAULT -> GHC.Types.I# [ww3_s4L1V];
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s4L1W eta1_s4L1X]
        case eta_s4L1W of {
          (,) ww1_s4L1Z ww2_s4L20 [Occ=Once] ->
              case GHC.IO.IOMode.$w$cinRange ww1_s4L1Z ww2_s4L20 eta1_s4L1X of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.IOMode.$w$cunsafeIndex ww1_s4L1Z eta1_s4L1X
                    of
                    ww3_s4L22
                    { __DEFAULT -> GHC.Types.I# [ww3_s4L22];
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.IOMode.$fOrdIOMode
                                 GHC.IO.IOMode.$fIxIOMode_$crange
                                 GHC.IO.IOMode.$fIxIOMode_$cindex
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex
                                 GHC.IO.IOMode.$fIxIOMode_$cinRange
                                 GHC.IO.IOMode.$fIxIOMode_$crangeSize
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize];

lvl4_r4KYP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl5_r4KYQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r4KYP;

GHC.IO.IOMode.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl6_r4KYR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule4;

GHC.IO.IOMode.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.IOMode"#;

lvl7_r4KYS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule2;

lvl8_r4KYT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/IOMode.hs"#;

lvl9_r4KYU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_r4KYT;

lvl10_r4KYV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

lvl11_r4KYW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [36#];

lvl12_r4KYX :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl6_r4KYR
                                           lvl7_r4KYS
                                           lvl9_r4KYU
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl11_r4KYW];

lvl13_r4KYY :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl5_r4KYQ
                                                  lvl12_r4KYX
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r4KYZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{IOMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode5 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r4KYZ of sat_s4L23 {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4L23;
        };

GHC.IO.IOMode.$fEnumIOMode_$cpred
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4L24]
        case a_s4L24 of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode5;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.ReadMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
        };

lvl15_r4KZ0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{IOMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode6 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r4KZ0 of sat_s4L26 {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4L26;
        };

GHC.IO.IOMode.$fEnumIOMode_$csucc
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4L27]
        case a_s4L27 of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.AppendMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.ReadWriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode6;
        };

lvl16_r4KZ1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r4KZ2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r4KZ3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r4KZ2;

lvl19_r4KZ4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 3# lvl18_r4KZ3 of {
          (#,#) ww5_s4L2a [Occ=Once] ww6_s4L2b [Occ=Once] ->
              : [ww5_s4L2a ww6_s4L2b];
        };

lvl20_r4KZ5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r4KZ1 lvl19_r4KZ4;

lvl21_r4KZ6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{IOMode}: tag ("#;

GHC.IO.IOMode.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4L2c]
        let {
          sat_s4L2g [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s4L2c] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s4L2c lvl20_r4KZ5 of {
                    (#,#) ww5_s4L2e [Occ=Once] ww6_s4L2f [Occ=Once] ->
                        : [ww5_s4L2e ww6_s4L2f];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r4KZ6 sat_s4L2g
          of
          sat_s4L2h
          { __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4L2h;
          };

GHC.IO.IOMode.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4L2i]
        case >=# [ww_s4L2i 0#] of {
          __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4L2i;
          1# ->
              case <=# [ww_s4L2i 3#] of {
                __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4L2i;
                1# -> tagToEnum# [ww_s4L2i];
              };
        };

GHC.IO.IOMode.$fEnumIOMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4L2l]
        case w_s4L2l of {
          GHC.Types.I# ww1_s4L2n [Occ=Once] ->
              GHC.IO.IOMode.$w$ctoEnum ww1_s4L2n;
        };

GHC.IO.IOMode.$fEnumIOMode4 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 0#;

GHC.IO.IOMode.$fEnumIOMode3 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 1#;

GHC.IO.IOMode.$fEnumIOMode2 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 2#;

GHC.IO.IOMode.$fEnumIOMode1 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 3#;

GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
  :: GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4L2o]
        case a_s4L2o of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode4;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fEnumIOMode3;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fEnumIOMode2;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode1;
        };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4L2q b_s4L2r]
        let-no-escape {
          $j_s4L2s [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s4L2r] \r [a#_s4L2t]
                  let-no-escape {
                    $j1_s4L2u [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s4L2t] \r [b#_s4L2v]
                            case ># [a#_s4L2t b#_s4L2v] of {
                              __DEFAULT ->
                                  case >=# [b#_s4L2v a#_s4L2t] of {
                                    __DEFAULT ->
                                        case ># [3# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L2J [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L2A [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L2A]
                                                              of
                                                              y'_s4L2B [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L2C [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L2A
                                                                                    y'_s4L2B
                                                                                    go_dn_s4L2C] \r [x_s4L2D]
                                                                              case
                                                                                  <# [x_s4L2D
                                                                                      y'_s4L2B]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L2H [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L2A
                                                                                           go_dn_s4L2C
                                                                                           x_s4L2D] \u []
                                                                                              case
                                                                                                  +# [x_s4L2D
                                                                                                      delta_s4L2A]
                                                                                              of
                                                                                              sat_s4L2G
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L2C
                                                                                                        sat_s4L2G;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L2F [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2D] \u []
                                                                                              tagToEnum# [x_s4L2D];
                                                                                    } in 
                                                                                      : [sat_s4L2F
                                                                                         sat_s4L2H];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L2I [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2D] \u []
                                                                                              tagToEnum# [x_s4L2D];
                                                                                    } in 
                                                                                      : [sat_s4L2I
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L2C b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L2z [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L2z sat_s4L2J];
                                          1# ->
                                              case ># [3# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L2L [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L2L GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L2X [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L2O [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L2O]
                                                              of
                                                              y'_s4L2P [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L2Q [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L2O
                                                                                    y'_s4L2P
                                                                                    go_up_s4L2Q] \r [x_s4L2R]
                                                                              case
                                                                                  ># [x_s4L2R
                                                                                      y'_s4L2P]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L2V [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L2O
                                                                                           go_up_s4L2Q
                                                                                           x_s4L2R] \u []
                                                                                              case
                                                                                                  +# [x_s4L2R
                                                                                                      delta_s4L2O]
                                                                                              of
                                                                                              sat_s4L2U
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L2Q
                                                                                                        sat_s4L2U;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L2T [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2R] \u []
                                                                                              tagToEnum# [x_s4L2R];
                                                                                    } in 
                                                                                      : [sat_s4L2T
                                                                                         sat_s4L2V];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L2W [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2R] \u []
                                                                                              tagToEnum# [x_s4L2R];
                                                                                    } in 
                                                                                      : [sat_s4L2W
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L2Q b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L2N [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L2N sat_s4L2X];
                                          1# ->
                                              case <# [3# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L2Z [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L2Z GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s4L2v a#_s4L2t] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L3c [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L33 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L33]
                                                              of
                                                              y'_s4L34 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L35 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L33
                                                                                    y'_s4L34
                                                                                    go_dn_s4L35] \r [x_s4L36]
                                                                              case
                                                                                  <# [x_s4L36
                                                                                      y'_s4L34]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L3a [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L33
                                                                                           go_dn_s4L35
                                                                                           x_s4L36] \u []
                                                                                              case
                                                                                                  +# [x_s4L36
                                                                                                      delta_s4L33]
                                                                                              of
                                                                                              sat_s4L39
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L35
                                                                                                        sat_s4L39;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L38 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L36] \u []
                                                                                              tagToEnum# [x_s4L36];
                                                                                    } in 
                                                                                      : [sat_s4L38
                                                                                         sat_s4L3a];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L3b [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L36] \u []
                                                                                              tagToEnum# [x_s4L36];
                                                                                    } in 
                                                                                      : [sat_s4L3b
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L35 b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L32 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L32 sat_s4L3c];
                                          1# ->
                                              case ># [0# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L3e [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L3e GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L3q [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L3h [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L3h]
                                                              of
                                                              y'_s4L3i [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L3j [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L3h
                                                                                    y'_s4L3i
                                                                                    go_up_s4L3j] \r [x_s4L3k]
                                                                              case
                                                                                  ># [x_s4L3k
                                                                                      y'_s4L3i]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L3o [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L3h
                                                                                           go_up_s4L3j
                                                                                           x_s4L3k] \u []
                                                                                              case
                                                                                                  +# [x_s4L3k
                                                                                                      delta_s4L3h]
                                                                                              of
                                                                                              sat_s4L3n
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L3j
                                                                                                        sat_s4L3n;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L3m [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L3k] \u []
                                                                                              tagToEnum# [x_s4L3k];
                                                                                    } in 
                                                                                      : [sat_s4L3m
                                                                                         sat_s4L3o];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L3p [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L3k] \u []
                                                                                              tagToEnum# [x_s4L3k];
                                                                                    } in 
                                                                                      : [sat_s4L3p
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L3j b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L3g [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L3g sat_s4L3q];
                                          1# ->
                                              case <# [0# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L3s [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L3s GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s4L2r of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4L2u 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4L2u 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4L2u 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4L2u 3#;
                    };
        } in 
          case a_s4L2q of {
            GHC.IO.IOMode.ReadMode -> $j_s4L2s 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L2s 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L2s 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L2s 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3v]
        let {
          sat_s4L3B [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3v] \u []
                  case x_s4L3v of wild_s4L3z {
                    __DEFAULT ->
                        case +# [wild_s4L3z 1#] of sat_s4L3A {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 sat_s4L3A;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4L3y [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3v] \u []
                  case >=# [x_s4L3v 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3v;
                    1# ->
                        case <=# [x_s4L3v 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3v;
                          1# -> tagToEnum# [x_s4L3v];
                        };
                  };
        } in  : [sat_s4L3y sat_s4L3B];

GHC.IO.IOMode.$fEnumIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3C]
        let {
          sat_s4L3I [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3C] \u []
                  case x_s4L3C of wild_s4L3G {
                    __DEFAULT ->
                        case +# [wild_s4L3G 1#] of sat_s4L3H {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 sat_s4L3H;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4L3F [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3C] \u []
                  case >=# [x_s4L3C 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3C;
                    1# ->
                        case <=# [x_s4L3C 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3C;
                          1# -> tagToEnum# [x_s4L3C];
                        };
                  };
        } in  : [sat_s4L3F sat_s4L3I];

GHC.IO.IOMode.$fEnumIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3J]
        let {
          sat_s4L3P [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3J] \u []
                  case x_s4L3J of wild_s4L3N {
                    __DEFAULT ->
                        case +# [wild_s4L3N 1#] of sat_s4L3O {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 sat_s4L3O;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4L3M [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3J] \u []
                  case >=# [x_s4L3J 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3J;
                    1# ->
                        case <=# [x_s4L3J 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3J;
                          1# -> tagToEnum# [x_s4L3J];
                        };
                  };
        } in  : [sat_s4L3M sat_s4L3P];

GHC.IO.IOMode.$fEnumIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3Q]
        let {
          sat_s4L3W [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3Q] \u []
                  case x_s4L3Q of wild_s4L3U {
                    __DEFAULT ->
                        case +# [wild_s4L3U 1#] of sat_s4L3V {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go sat_s4L3V;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4L3T [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3Q] \u []
                  case >=# [x_s4L3Q 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3Q;
                    1# ->
                        case <=# [x_s4L3Q 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3Q;
                          1# -> tagToEnum# [x_s4L3Q];
                        };
                  };
        } in  : [sat_s4L3T sat_s4L3W];

GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4L3X y_s4L3Y]
        let-no-escape {
          $j_s4L3Z [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s4L3Y] \r [x1_s4L40]
                  case y_s4L3Y of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [x1_s4L40 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 x1_s4L40;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [x1_s4L40 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 x1_s4L40;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [x1_s4L40 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 x1_s4L40;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [x1_s4L40 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go x1_s4L40;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s4L3X of {
            GHC.IO.IOMode.ReadMode -> $j_s4L3Z 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L3Z 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L3Z 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L3Z 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s4L47 x2_s4L48 y_s4L49]
        let-no-escape {
          $j_s4L4a [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s4L48 y_s4L49] \r [x4_s4L4b]
                  let-no-escape {
                    $j1_s4L4c [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s4L49 x4_s4L4b] \r [x5_s4L4d]
                            case y_s4L49 of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L4x [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L4k [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L4k]
                                                              of
                                                              y'_s4L4l [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L4m [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L4k
                                                                                    y'_s4L4l
                                                                                    go_dn_s4L4m] \r [x_s4L4n]
                                                                              case
                                                                                  <# [x_s4L4n
                                                                                      y'_s4L4l]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L4t [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L4k
                                                                                           go_dn_s4L4m
                                                                                           x_s4L4n] \u []
                                                                                              case
                                                                                                  +# [x_s4L4n
                                                                                                      delta_s4L4k]
                                                                                              of
                                                                                              sat_s4L4s
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L4m
                                                                                                        sat_s4L4s;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L4r [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4n] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4n
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4n;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4n
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4n;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4n];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4r
                                                                                         sat_s4L4t];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L4w [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4n] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4n
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4n;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4n
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4n;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4n];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4w
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L4m x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L4j [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L4j sat_s4L4x];
                                          1# ->
                                              case ># [0# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L4B [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L4B GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L4T [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L4G [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L4G]
                                                              of
                                                              y'_s4L4H [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L4I [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L4G
                                                                                    y'_s4L4H
                                                                                    go_up_s4L4I] \r [x_s4L4J]
                                                                              case
                                                                                  ># [x_s4L4J
                                                                                      y'_s4L4H]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L4P [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L4G
                                                                                           go_up_s4L4I
                                                                                           x_s4L4J] \u []
                                                                                              case
                                                                                                  +# [x_s4L4J
                                                                                                      delta_s4L4G]
                                                                                              of
                                                                                              sat_s4L4O
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L4I
                                                                                                        sat_s4L4O;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L4N [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4J] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4J
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4J;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4J
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4J;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4J];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4N
                                                                                         sat_s4L4P];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L4S [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4J] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4J
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4J;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4J
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4J;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4J];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4S
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L4I x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L4F [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L4F sat_s4L4T];
                                          1# ->
                                              case <# [0# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L4X [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L4X GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L5g [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L53 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4L53]
                                                              of
                                                              y'_s4L54 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L55 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L53
                                                                                    y'_s4L54
                                                                                    go_dn_s4L55] \r [x_s4L56]
                                                                              case
                                                                                  <# [x_s4L56
                                                                                      y'_s4L54]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L5c [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L53
                                                                                           go_dn_s4L55
                                                                                           x_s4L56] \u []
                                                                                              case
                                                                                                  +# [x_s4L56
                                                                                                      delta_s4L53]
                                                                                              of
                                                                                              sat_s4L5b
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L55
                                                                                                        sat_s4L5b;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L5a [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L56] \u []
                                                                                              case
                                                                                                  >=# [x_s4L56
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L56;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L56
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L56;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L56];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5a
                                                                                         sat_s4L5c];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L5f [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L56] \u []
                                                                                              case
                                                                                                  >=# [x_s4L56
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L56;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L56
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L56;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L56];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5f
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L55 x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L52 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L52 sat_s4L5g];
                                          1# ->
                                              case ># [1# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L5k [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L5k GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L5C [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L5p [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4L5p]
                                                              of
                                                              y'_s4L5q [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L5r [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L5p
                                                                                    y'_s4L5q
                                                                                    go_up_s4L5r] \r [x_s4L5s]
                                                                              case
                                                                                  ># [x_s4L5s
                                                                                      y'_s4L5q]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L5y [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L5p
                                                                                           go_up_s4L5r
                                                                                           x_s4L5s] \u []
                                                                                              case
                                                                                                  +# [x_s4L5s
                                                                                                      delta_s4L5p]
                                                                                              of
                                                                                              sat_s4L5x
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L5r
                                                                                                        sat_s4L5x;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L5w [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5s] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5s
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5s;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5s
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5s;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5s];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5w
                                                                                         sat_s4L5y];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L5B [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5s] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5s
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5s;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5s
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5s;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5s];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5B
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L5r x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L5o [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L5o sat_s4L5C];
                                          1# ->
                                              case <# [1# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L5G [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L5G GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L5Z [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L5M [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4L5M]
                                                              of
                                                              y'_s4L5N [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L5O [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L5M
                                                                                    y'_s4L5N
                                                                                    go_dn_s4L5O] \r [x_s4L5P]
                                                                              case
                                                                                  <# [x_s4L5P
                                                                                      y'_s4L5N]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L5V [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L5M
                                                                                           go_dn_s4L5O
                                                                                           x_s4L5P] \u []
                                                                                              case
                                                                                                  +# [x_s4L5P
                                                                                                      delta_s4L5M]
                                                                                              of
                                                                                              sat_s4L5U
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L5O
                                                                                                        sat_s4L5U;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L5T [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5P] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5P
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5P;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5P
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5P;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5P];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5T
                                                                                         sat_s4L5V];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L5Y [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5P] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5P
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5P;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5P
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5P;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5P];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5Y
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L5O x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L5L [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L5L sat_s4L5Z];
                                          1# ->
                                              case ># [2# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L63 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L63 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L6l [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L68 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4L68]
                                                              of
                                                              y'_s4L69 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L6a [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L68
                                                                                    y'_s4L69
                                                                                    go_up_s4L6a] \r [x_s4L6b]
                                                                              case
                                                                                  ># [x_s4L6b
                                                                                      y'_s4L69]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L6h [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L68
                                                                                           go_up_s4L6a
                                                                                           x_s4L6b] \u []
                                                                                              case
                                                                                                  +# [x_s4L6b
                                                                                                      delta_s4L68]
                                                                                              of
                                                                                              sat_s4L6g
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L6a
                                                                                                        sat_s4L6g;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L6f [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6b] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6b
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6b;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6b
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6b;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6b];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6f
                                                                                         sat_s4L6h];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L6k [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6b] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6b
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6b;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6b
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6b;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6b];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6k
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L6a x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L67 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L67 sat_s4L6l];
                                          1# ->
                                              case <# [2# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L6p [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L6p GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [3# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L6I [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L6v [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L6v]
                                                              of
                                                              y'_s4L6w [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L6x [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L6v
                                                                                    y'_s4L6w
                                                                                    go_dn_s4L6x] \r [x_s4L6y]
                                                                              case
                                                                                  <# [x_s4L6y
                                                                                      y'_s4L6w]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L6E [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L6v
                                                                                           go_dn_s4L6x
                                                                                           x_s4L6y] \u []
                                                                                              case
                                                                                                  +# [x_s4L6y
                                                                                                      delta_s4L6v]
                                                                                              of
                                                                                              sat_s4L6D
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L6x
                                                                                                        sat_s4L6D;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L6C [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6y] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6y
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6y;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6y
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6y;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6y];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6C
                                                                                         sat_s4L6E];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L6H [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6y] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6y
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6y;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6y
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6y;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6y];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6H
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L6x x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L6u [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L6u sat_s4L6I];
                                          1# ->
                                              case ># [3# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L6M [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L6M GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L74 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L6R [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L6R]
                                                              of
                                                              y'_s4L6S [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L6T [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L6R
                                                                                    y'_s4L6S
                                                                                    go_up_s4L6T] \r [x_s4L6U]
                                                                              case
                                                                                  ># [x_s4L6U
                                                                                      y'_s4L6S]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L70 [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L6R
                                                                                           go_up_s4L6T
                                                                                           x_s4L6U] \u []
                                                                                              case
                                                                                                  +# [x_s4L6U
                                                                                                      delta_s4L6R]
                                                                                              of
                                                                                              sat_s4L6Z
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L6T
                                                                                                        sat_s4L6Z;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L6Y [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6U] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6U
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6U;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6U
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6U;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6U];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6Y
                                                                                         sat_s4L70];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L73 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6U] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6U
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6U;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6U
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6U;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6U];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L73
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L6T x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L6Q [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L6Q sat_s4L74];
                                          1# ->
                                              case <# [3# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L78 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L78 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s4L48 of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4L4c 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4L4c 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4L4c 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4L4c 3#;
                    };
        } in 
          case x1_s4L47 of {
            GHC.IO.IOMode.ReadMode -> $j_s4L4a 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L4a 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L4a 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L4a 3#;
          };

GHC.IO.IOMode.$fEnumIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.IOMode.$fEnumIOMode_$csucc
                                    GHC.IO.IOMode.$fEnumIOMode_$cpred
                                    GHC.IO.IOMode.$fEnumIOMode_$ctoEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo];

GHC.IO.IOMode.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule4];

GHC.IO.IOMode.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule2];

GHC.IO.IOMode.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.IOMode.$trModule3
                                     GHC.IO.IOMode.$trModule1];

GHC.IO.IOMode.$tcIOMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IOMode"#;

GHC.IO.IOMode.$tcIOMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tcIOMode2];

GHC.IO.IOMode.$tcIOMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9818555080744742578##
                                    14348064797489060312##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tcIOMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.IOMode.$tc'AppendMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.IOMode.$tcIOMode
                                              GHC.Types.[]];

GHC.IO.IOMode.$tc'ReadMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadMode"#;

GHC.IO.IOMode.$tc'ReadMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadMode2];

GHC.IO.IOMode.$tc'ReadMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17697021977009842408##
                                    16081808542294250782##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'WriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteMode"#;

GHC.IO.IOMode.$tc'WriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'WriteMode2];

GHC.IO.IOMode.$tc'WriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16610458722029011495##
                                    11554819901902375488##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'WriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'AppendMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendMode"#;

GHC.IO.IOMode.$tc'AppendMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'AppendMode3];

GHC.IO.IOMode.$tc'AppendMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3610623883618650464##
                                    11131639874085434472##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'AppendMode2
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'ReadWriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteMode"#;

GHC.IO.IOMode.$tc'ReadWriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadWriteMode2];

GHC.IO.IOMode.$tc'ReadWriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [626157189396725199##
                                    9407417215311302278##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadWriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.ReadMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadMode! [];

GHC.IO.IOMode.WriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.WriteMode! [];

GHC.IO.IOMode.AppendMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.AppendMode! [];

GHC.IO.IOMode.ReadWriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadWriteMode! [];


==================== STG syntax: ====================
2018-03-16 15:59:38.826210228 UTC

GHC.IO.IOMode.$fReadIOMode21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadMode"#;

GHC.IO.IOMode.$fReadIOMode20 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode21;

GHC.IO.IOMode.$fReadIOMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WriteMode"#;

GHC.IO.IOMode.$fReadIOMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode17;

GHC.IO.IOMode.$fReadIOMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AppendMode"#;

GHC.IO.IOMode.$fReadIOMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode13;

GHC.IO.IOMode.$fReadIOMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadWriteMode"#;

GHC.IO.IOMode.$fReadIOMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode9;

GHC.IO.IOMode.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4KZ8 w1_s4KZ9]
        case w_s4KZ8 of {
          GHC.IO.IOMode.ReadMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode20 w1_s4KZ9;
          GHC.IO.IOMode.WriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode16 w1_s4KZ9;
          GHC.IO.IOMode.AppendMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode12 w1_s4KZ9;
          GHC.IO.IOMode.ReadWriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode8 w1_s4KZ9;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4KZb w1_s4KZc w2_s4KZd]
        GHC.IO.IOMode.$w$cshowsPrec w1_s4KZc w2_s4KZd;

GHC.IO.IOMode.$fShowIOMode_$cshow
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4KZe]
        case x_s4KZe of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fReadIOMode20;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fReadIOMode16;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fReadIOMode12;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fReadIOMode8;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowList
  :: [GHC.IO.IOMode.IOMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4KZg s_s4KZh]
        GHC.Show.showList__ GHC.IO.IOMode.$w$cshowsPrec ls_s4KZg s_s4KZh;

GHC.IO.IOMode.$fShowIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.IOMode.$fShowIOMode_$cshowsPrec
                                    GHC.IO.IOMode.$fShowIOMode_$cshow
                                    GHC.IO.IOMode.$fShowIOMode_$cshowList];

GHC.IO.IOMode.$fReadIOMode19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZi k_s4KZj] k_s4KZj GHC.IO.IOMode.ReadMode;

GHC.IO.IOMode.$fReadIOMode18
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode20
                        GHC.IO.IOMode.$fReadIOMode19];

GHC.IO.IOMode.$fReadIOMode15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZk k_s4KZl] k_s4KZl GHC.IO.IOMode.WriteMode;

GHC.IO.IOMode.$fReadIOMode14
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode16
                        GHC.IO.IOMode.$fReadIOMode15];

GHC.IO.IOMode.$fReadIOMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZm k_s4KZn] k_s4KZn GHC.IO.IOMode.AppendMode;

GHC.IO.IOMode.$fReadIOMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode12
                        GHC.IO.IOMode.$fReadIOMode11];

GHC.IO.IOMode.$fReadIOMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZo k_s4KZp] k_s4KZp GHC.IO.IOMode.ReadWriteMode;

GHC.IO.IOMode.$fReadIOMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode8
                        GHC.IO.IOMode.$fReadIOMode7];

GHC.IO.IOMode.$fReadIOMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode6 GHC.Types.[]];

GHC.IO.IOMode.$fReadIOMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode10
                      GHC.IO.IOMode.$fReadIOMode5];

GHC.IO.IOMode.$fReadIOMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode14
                      GHC.IO.IOMode.$fReadIOMode4];

GHC.IO.IOMode.$fReadIOMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode18
                      GHC.IO.IOMode.$fReadIOMode3];

GHC.IO.IOMode.$fReadIOMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s4KZq]
        GHC.Read.choose2 GHC.IO.IOMode.$fReadIOMode_sps eta_s4KZq;

GHC.IO.IOMode.$fReadIOMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.IOMode.$fReadIOMode2 eta_B2 eta_B1;

GHC.IO.IOMode.$fReadIOMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s4KZr]
        let {
          sat_s4KZs [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.IOMode.IOMode
          [LclId] =
              [n_s4KZr] \u []
                  GHC.Read.list3
                      GHC.IO.IOMode.$fReadIOMode2
                      n_s4KZr
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s4KZs;

GHC.IO.IOMode.$fReadIOMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.IOMode.$fReadIOMode1;

GHC.IO.IOMode.$fReadIOMode22
  :: Text.ParserCombinators.ReadP.P [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u []
        GHC.IO.IOMode.$fReadIOMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.IOMode.$fReadIOMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.IOMode.$fReadIOMode22 eta_B1;

GHC.IO.IOMode.$fReadIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.IOMode.$fReadIOMode_$creadsPrec
                                    GHC.IO.IOMode.$fReadIOMode_$creadList
                                    GHC.IO.IOMode.$fReadIOMode1
                                    GHC.IO.IOMode.$fReadIOMode_$creadListPrec];

GHC.IO.IOMode.$fEqIOMode_$c==
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s4KZt ds1_s4KZu]
        case ds_s4KZt of {
          GHC.IO.IOMode.ReadMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ds1_s4KZu of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
        };

GHC.IO.IOMode.$fEqIOMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s4KZA eta1_s4KZB]
        case eta_s4KZA of {
          GHC.IO.IOMode.ReadMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case eta1_s4KZB of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
        };

GHC.IO.IOMode.$fEqIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.IOMode.$fEqIOMode_$c==
                                     GHC.IO.IOMode.$fEqIOMode_$c/=];

GHC.IO.IOMode.$fOrdIOMode_$ccompare
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4KZH b_s4KZI]
        case a_s4KZH of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4KZI of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.LT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4KZI of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.GT [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4KZI of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4KZI of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.EQ [];
              };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4KZO b_s4KZP]
        case a_s4KZO of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4KZP of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4KZP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4KZP of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4KZP of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4KZV b_s4KZW]
        case b_s4KZW of {
          GHC.IO.IOMode.ReadMode ->
              case a_s4KZV of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case a_s4KZV of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case a_s4KZV of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case a_s4KZV of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$cmax
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4L02 y_s4L03]
        case y_s4L03 of {
          GHC.IO.IOMode.ReadMode -> x_s4L02;
          GHC.IO.IOMode.WriteMode ->
              case x_s4L02 of {
                __DEFAULT -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4L02 of {
                __DEFAULT -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case x_s4L02 of { __DEFAULT -> GHC.IO.IOMode.ReadWriteMode []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4L08 b_s4L09]
        case a_s4L08 of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4L09 of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4L09 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4L09 of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4L09 of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4L0f b_s4L0g]
        GHC.IO.IOMode.$fOrdIOMode_$c< b_s4L0g a_s4L0f;

GHC.IO.IOMode.$fOrdIOMode_$cmin
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4L0h y_s4L0i]
        case y_s4L0i of {
          GHC.IO.IOMode.ReadMode ->
              case x_s4L0h of { __DEFAULT -> GHC.IO.IOMode.ReadMode []; };
          GHC.IO.IOMode.WriteMode ->
              case x_s4L0h of wild1_s4L0l {
                __DEFAULT -> wild1_s4L0l;
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.WriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4L0h of wild1_s4L0m {
                __DEFAULT -> wild1_s4L0m;
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
              };
          GHC.IO.IOMode.ReadWriteMode -> x_s4L0h;
        };

GHC.IO.IOMode.$fOrdIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.IOMode.$fEqIOMode
                                      GHC.IO.IOMode.$fOrdIOMode_$ccompare
                                      GHC.IO.IOMode.$fOrdIOMode_$c<
                                      GHC.IO.IOMode.$fOrdIOMode_$c<=
                                      GHC.IO.IOMode.$fOrdIOMode_$c>
                                      GHC.IO.IOMode.$fOrdIOMode_$c>=
                                      GHC.IO.IOMode.$fOrdIOMode_$cmax
                                      GHC.IO.IOMode.$fOrdIOMode_$cmin];

GHC.IO.IOMode.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L0n w_s4L0o]
        case ww_s4L0n of {
          GHC.IO.IOMode.ReadMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.WriteMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.AppendMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case w_s4L0o of {
                GHC.IO.IOMode.ReadMode -> -3#;
                GHC.IO.IOMode.WriteMode -> -2#;
                GHC.IO.IOMode.AppendMode -> -1#;
                GHC.IO.IOMode.ReadWriteMode -> 0#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s4L0u w1_s4L0v]
        case w_s4L0u of {
          (,) ww1_s4L0x [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.IOMode.$w$cunsafeIndex ww1_s4L0x w1_s4L0v
              of
              ww3_s4L0z
              { __DEFAULT -> GHC.Types.I# [ww3_s4L0z];
              };
        };

GHC.IO.IOMode.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L0A ww1_s4L0B w_s4L0C]
        let-no-escape {
          $j_s4L0D [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4L0B w_s4L0C] \r [a#_s4L0E]
                  let-no-escape {
                    $j1_s4L0F [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s4L0C a#_s4L0E] \r [b#_s4L0G]
                            case w_s4L0C of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [0# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s4L0G] of sat_s4L0J {
                                          __DEFAULT -> tagToEnum# [sat_s4L0J];
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [1# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s4L0G] of sat_s4L0L {
                                          __DEFAULT -> tagToEnum# [sat_s4L0L];
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [2# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s4L0G] of sat_s4L0N {
                                          __DEFAULT -> tagToEnum# [sat_s4L0N];
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [3# a#_s4L0E] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [3# b#_s4L0G] of sat_s4L0P {
                                          __DEFAULT -> tagToEnum# [sat_s4L0P];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s4L0B of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4L0F 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4L0F 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4L0F 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4L0F 3#;
                    };
        } in 
          case ww_s4L0A of {
            GHC.IO.IOMode.ReadMode -> $j_s4L0D 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L0D 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L0D 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L0D 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4L0S w1_s4L0T]
        case w_s4L0S of {
          (,) ww1_s4L0V [Occ=Once] ww2_s4L0W [Occ=Once] ->
              GHC.IO.IOMode.$w$cinRange ww1_s4L0V ww2_s4L0W w1_s4L0T;
        };

lvl_r4KYL :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r4KYM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r4KYN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl3_r4KYO :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [3#];

GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
  :: GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s4L0X]
        case a_s4L0X of {
          GHC.IO.IOMode.ReadMode -> lvl_r4KYL;
          GHC.IO.IOMode.WriteMode -> lvl1_r4KYM;
          GHC.IO.IOMode.AppendMode -> lvl2_r4KYN;
          GHC.IO.IOMode.ReadWriteMode -> lvl3_r4KYO;
        };

GHC.IO.IOMode.$fIxIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L0Z]
        let {
          sat_s4L13 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L0Z] \u []
                  case x_s4L0Z of wild_s4L11 {
                    __DEFAULT ->
                        case +# [wild_s4L11 1#] of sat_s4L12 {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 sat_s4L12;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4L10 [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L0Z] \u [] tagToEnum# [x_s4L0Z];
        } in  : [sat_s4L10 sat_s4L13];

GHC.IO.IOMode.$fIxIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L14]
        let {
          sat_s4L18 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L14] \u []
                  case x_s4L14 of wild_s4L16 {
                    __DEFAULT ->
                        case +# [wild_s4L16 1#] of sat_s4L17 {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 sat_s4L17;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4L15 [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L14] \u [] tagToEnum# [x_s4L14];
        } in  : [sat_s4L15 sat_s4L18];

GHC.IO.IOMode.$fIxIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L19]
        let {
          sat_s4L1d [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L19] \u []
                  case x_s4L19 of wild_s4L1b {
                    __DEFAULT ->
                        case +# [wild_s4L1b 1#] of sat_s4L1c {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go sat_s4L1c;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4L1a [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L19] \u [] tagToEnum# [x_s4L19];
        } in  : [sat_s4L1a sat_s4L1d];

GHC.IO.IOMode.$fEnumIOMode_go4 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L1e]
        let {
          sat_s4L1i [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L1e] \u []
                  case x_s4L1e of wild_s4L1g {
                    __DEFAULT ->
                        case +# [wild_s4L1g 1#] of sat_s4L1h {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 sat_s4L1h;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4L1f [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L1e] \u [] tagToEnum# [x_s4L1e];
        } in  : [sat_s4L1f sat_s4L1i];

GHC.IO.IOMode.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L1j ww1_s4L1k]
        let-no-escape {
          $j_s4L1l [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4L1k] \r [a#_s4L1m]
                  case ww1_s4L1k of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [a#_s4L1m 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 a#_s4L1m;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [a#_s4L1m 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 a#_s4L1m;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [a#_s4L1m 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go a#_s4L1m;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [a#_s4L1m 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 a#_s4L1m;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s4L1j of {
            GHC.IO.IOMode.ReadMode -> $j_s4L1l 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L1l 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L1l 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L1l 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s4L1t]
        case w_s4L1t of {
          (,) ww1_s4L1v [Occ=Once] ww2_s4L1w [Occ=Once] ->
              GHC.IO.IOMode.$w$crange ww1_s4L1v ww2_s4L1w;
        };

GHC.IO.IOMode.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4L1x ww1_s4L1y]
        case GHC.IO.IOMode.$w$cinRange ww_s4L1x ww1_s4L1y ww1_s4L1y of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s4L1x of {
                GHC.IO.IOMode.ReadMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> 1#;
                      GHC.IO.IOMode.WriteMode -> 2#;
                      GHC.IO.IOMode.AppendMode -> 3#;
                      GHC.IO.IOMode.ReadWriteMode -> 4#;
                    };
                GHC.IO.IOMode.WriteMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> 0#;
                      GHC.IO.IOMode.WriteMode -> 1#;
                      GHC.IO.IOMode.AppendMode -> 2#;
                      GHC.IO.IOMode.ReadWriteMode -> 3#;
                    };
                GHC.IO.IOMode.AppendMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> -1#;
                      GHC.IO.IOMode.WriteMode -> 0#;
                      GHC.IO.IOMode.AppendMode -> 1#;
                      GHC.IO.IOMode.ReadWriteMode -> 2#;
                    };
                GHC.IO.IOMode.ReadWriteMode ->
                    case ww1_s4L1y of {
                      GHC.IO.IOMode.ReadMode -> -2#;
                      GHC.IO.IOMode.WriteMode -> -1#;
                      GHC.IO.IOMode.AppendMode -> 0#;
                      GHC.IO.IOMode.ReadWriteMode -> 1#;
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4L1F]
        case w_s4L1F of {
          (,) ww1_s4L1H [Occ=Once] ww2_s4L1I [Occ=Once] ->
              case GHC.IO.IOMode.$w$crangeSize ww1_s4L1H ww2_s4L1I of ww3_s4L1J {
                __DEFAULT -> GHC.Types.I# [ww3_s4L1J];
              };
        };

GHC.IO.IOMode.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4L1K ww1_s4L1L]
        case ww_s4L1K of {
          GHC.IO.IOMode.ReadMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> 1#;
                GHC.IO.IOMode.WriteMode -> 2#;
                GHC.IO.IOMode.AppendMode -> 3#;
                GHC.IO.IOMode.ReadWriteMode -> 4#;
              };
          GHC.IO.IOMode.WriteMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.AppendMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ww1_s4L1L of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4L1R]
        case w_s4L1R of {
          (,) ww1_s4L1T [Occ=Once] ww2_s4L1U [Occ=Once] ->
              case
                  GHC.IO.IOMode.$w$cunsafeRangeSize ww1_s4L1T ww2_s4L1U
              of
              ww3_s4L1V
              { __DEFAULT -> GHC.Types.I# [ww3_s4L1V];
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s4L1W eta1_s4L1X]
        case eta_s4L1W of {
          (,) ww1_s4L1Z ww2_s4L20 [Occ=Once] ->
              case GHC.IO.IOMode.$w$cinRange ww1_s4L1Z ww2_s4L20 eta1_s4L1X of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.IOMode.$w$cunsafeIndex ww1_s4L1Z eta1_s4L1X
                    of
                    ww3_s4L22
                    { __DEFAULT -> GHC.Types.I# [ww3_s4L22];
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.IOMode.$fOrdIOMode
                                 GHC.IO.IOMode.$fIxIOMode_$crange
                                 GHC.IO.IOMode.$fIxIOMode_$cindex
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex
                                 GHC.IO.IOMode.$fIxIOMode_$cinRange
                                 GHC.IO.IOMode.$fIxIOMode_$crangeSize
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize];

lvl4_r4KYP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl5_r4KYQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r4KYP;

GHC.IO.IOMode.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl6_r4KYR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule4;

GHC.IO.IOMode.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.IOMode"#;

lvl7_r4KYS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule2;

lvl8_r4KYT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/IOMode.hs"#;

lvl9_r4KYU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_r4KYT;

lvl10_r4KYV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

lvl11_r4KYW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [36#];

lvl12_r4KYX :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl6_r4KYR
                                           lvl7_r4KYS
                                           lvl9_r4KYU
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl11_r4KYW];

lvl13_r4KYY :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl5_r4KYQ
                                                  lvl12_r4KYX
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r4KYZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{IOMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode5 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r4KYZ of sat_s4L23 {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4L23;
        };

GHC.IO.IOMode.$fEnumIOMode_$cpred
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4L24]
        case a_s4L24 of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode5;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.ReadMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
        };

lvl15_r4KZ0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{IOMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode6 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r4KZ0 of sat_s4L26 {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4L26;
        };

GHC.IO.IOMode.$fEnumIOMode_$csucc
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4L27]
        case a_s4L27 of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.AppendMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.ReadWriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode6;
        };

lvl16_r4KZ1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r4KZ2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r4KZ3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r4KZ2;

lvl19_r4KZ4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 3# lvl18_r4KZ3 of {
          (#,#) ww5_s4L2a [Occ=Once] ww6_s4L2b [Occ=Once] ->
              : [ww5_s4L2a ww6_s4L2b];
        };

lvl20_r4KZ5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r4KZ1 lvl19_r4KZ4;

lvl21_r4KZ6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{IOMode}: tag ("#;

GHC.IO.IOMode.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4L2c]
        let {
          sat_s4L2g [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s4L2c] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s4L2c lvl20_r4KZ5 of {
                    (#,#) ww5_s4L2e [Occ=Once] ww6_s4L2f [Occ=Once] ->
                        : [ww5_s4L2e ww6_s4L2f];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r4KZ6 sat_s4L2g
          of
          sat_s4L2h
          { __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4L2h;
          };

GHC.IO.IOMode.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4L2i]
        case >=# [ww_s4L2i 0#] of {
          __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4L2i;
          1# ->
              case <=# [ww_s4L2i 3#] of {
                __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4L2i;
                1# -> tagToEnum# [ww_s4L2i];
              };
        };

GHC.IO.IOMode.$fEnumIOMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4L2l]
        case w_s4L2l of {
          GHC.Types.I# ww1_s4L2n [Occ=Once] ->
              GHC.IO.IOMode.$w$ctoEnum ww1_s4L2n;
        };

GHC.IO.IOMode.$fEnumIOMode4 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 0#;

GHC.IO.IOMode.$fEnumIOMode3 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 1#;

GHC.IO.IOMode.$fEnumIOMode2 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 2#;

GHC.IO.IOMode.$fEnumIOMode1 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 3#;

GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
  :: GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4L2o]
        case a_s4L2o of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode4;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fEnumIOMode3;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fEnumIOMode2;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode1;
        };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4L2q b_s4L2r]
        let-no-escape {
          $j_s4L2s [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s4L2r] \r [a#_s4L2t]
                  let-no-escape {
                    $j1_s4L2u [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s4L2t] \r [b#_s4L2v]
                            case ># [a#_s4L2t b#_s4L2v] of {
                              __DEFAULT ->
                                  case >=# [b#_s4L2v a#_s4L2t] of {
                                    __DEFAULT ->
                                        case ># [3# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L2J [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L2A [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L2A]
                                                              of
                                                              y'_s4L2B [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L2C [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L2A
                                                                                    y'_s4L2B
                                                                                    go_dn_s4L2C] \r [x_s4L2D]
                                                                              case
                                                                                  <# [x_s4L2D
                                                                                      y'_s4L2B]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L2H [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L2A
                                                                                           go_dn_s4L2C
                                                                                           x_s4L2D] \u []
                                                                                              case
                                                                                                  +# [x_s4L2D
                                                                                                      delta_s4L2A]
                                                                                              of
                                                                                              sat_s4L2G
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L2C
                                                                                                        sat_s4L2G;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L2F [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2D] \u []
                                                                                              tagToEnum# [x_s4L2D];
                                                                                    } in 
                                                                                      : [sat_s4L2F
                                                                                         sat_s4L2H];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L2I [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2D] \u []
                                                                                              tagToEnum# [x_s4L2D];
                                                                                    } in 
                                                                                      : [sat_s4L2I
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L2C b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L2z [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L2z sat_s4L2J];
                                          1# ->
                                              case ># [3# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L2L [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L2L GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L2X [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L2O [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L2O]
                                                              of
                                                              y'_s4L2P [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L2Q [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L2O
                                                                                    y'_s4L2P
                                                                                    go_up_s4L2Q] \r [x_s4L2R]
                                                                              case
                                                                                  ># [x_s4L2R
                                                                                      y'_s4L2P]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L2V [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L2O
                                                                                           go_up_s4L2Q
                                                                                           x_s4L2R] \u []
                                                                                              case
                                                                                                  +# [x_s4L2R
                                                                                                      delta_s4L2O]
                                                                                              of
                                                                                              sat_s4L2U
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L2Q
                                                                                                        sat_s4L2U;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L2T [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2R] \u []
                                                                                              tagToEnum# [x_s4L2R];
                                                                                    } in 
                                                                                      : [sat_s4L2T
                                                                                         sat_s4L2V];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L2W [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L2R] \u []
                                                                                              tagToEnum# [x_s4L2R];
                                                                                    } in 
                                                                                      : [sat_s4L2W
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L2Q b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L2N [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L2N sat_s4L2X];
                                          1# ->
                                              case <# [3# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L2Z [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L2Z GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s4L2v a#_s4L2t] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L3c [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L33 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L33]
                                                              of
                                                              y'_s4L34 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L35 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L33
                                                                                    y'_s4L34
                                                                                    go_dn_s4L35] \r [x_s4L36]
                                                                              case
                                                                                  <# [x_s4L36
                                                                                      y'_s4L34]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L3a [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L33
                                                                                           go_dn_s4L35
                                                                                           x_s4L36] \u []
                                                                                              case
                                                                                                  +# [x_s4L36
                                                                                                      delta_s4L33]
                                                                                              of
                                                                                              sat_s4L39
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L35
                                                                                                        sat_s4L39;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L38 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L36] \u []
                                                                                              tagToEnum# [x_s4L36];
                                                                                    } in 
                                                                                      : [sat_s4L38
                                                                                         sat_s4L3a];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L3b [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L36] \u []
                                                                                              tagToEnum# [x_s4L36];
                                                                                    } in 
                                                                                      : [sat_s4L3b
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L35 b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L32 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L32 sat_s4L3c];
                                          1# ->
                                              case ># [0# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L3e [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L3e GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s4L2v] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L3q [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4L2t b#_s4L2v] \u []
                                                        case
                                                            -# [b#_s4L2v a#_s4L2t]
                                                        of
                                                        delta_s4L3h [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L3h]
                                                              of
                                                              y'_s4L3i [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L3j [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L3h
                                                                                    y'_s4L3i
                                                                                    go_up_s4L3j] \r [x_s4L3k]
                                                                              case
                                                                                  ># [x_s4L3k
                                                                                      y'_s4L3i]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L3o [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L3h
                                                                                           go_up_s4L3j
                                                                                           x_s4L3k] \u []
                                                                                              case
                                                                                                  +# [x_s4L3k
                                                                                                      delta_s4L3h]
                                                                                              of
                                                                                              sat_s4L3n
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L3j
                                                                                                        sat_s4L3n;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L3m [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L3k] \u []
                                                                                              tagToEnum# [x_s4L3k];
                                                                                    } in 
                                                                                      : [sat_s4L3m
                                                                                         sat_s4L3o];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L3p [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L3k] \u []
                                                                                              tagToEnum# [x_s4L3k];
                                                                                    } in 
                                                                                      : [sat_s4L3p
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L3j b#_s4L2v;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L3g [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                              } in  : [sat_s4L3g sat_s4L3q];
                                          1# ->
                                              case <# [0# a#_s4L2t] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L3s [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4L2t] \u [] tagToEnum# [a#_s4L2t];
                                                    } in  : [sat_s4L3s GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s4L2r of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4L2u 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4L2u 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4L2u 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4L2u 3#;
                    };
        } in 
          case a_s4L2q of {
            GHC.IO.IOMode.ReadMode -> $j_s4L2s 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L2s 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L2s 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L2s 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3v]
        let {
          sat_s4L3B [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3v] \u []
                  case x_s4L3v of wild_s4L3z {
                    __DEFAULT ->
                        case +# [wild_s4L3z 1#] of sat_s4L3A {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 sat_s4L3A;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4L3y [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3v] \u []
                  case >=# [x_s4L3v 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3v;
                    1# ->
                        case <=# [x_s4L3v 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3v;
                          1# -> tagToEnum# [x_s4L3v];
                        };
                  };
        } in  : [sat_s4L3y sat_s4L3B];

GHC.IO.IOMode.$fEnumIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3C]
        let {
          sat_s4L3I [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3C] \u []
                  case x_s4L3C of wild_s4L3G {
                    __DEFAULT ->
                        case +# [wild_s4L3G 1#] of sat_s4L3H {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 sat_s4L3H;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4L3F [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3C] \u []
                  case >=# [x_s4L3C 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3C;
                    1# ->
                        case <=# [x_s4L3C 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3C;
                          1# -> tagToEnum# [x_s4L3C];
                        };
                  };
        } in  : [sat_s4L3F sat_s4L3I];

GHC.IO.IOMode.$fEnumIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3J]
        let {
          sat_s4L3P [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3J] \u []
                  case x_s4L3J of wild_s4L3N {
                    __DEFAULT ->
                        case +# [wild_s4L3N 1#] of sat_s4L3O {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 sat_s4L3O;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4L3M [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3J] \u []
                  case >=# [x_s4L3J 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3J;
                    1# ->
                        case <=# [x_s4L3J 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3J;
                          1# -> tagToEnum# [x_s4L3J];
                        };
                  };
        } in  : [sat_s4L3M sat_s4L3P];

GHC.IO.IOMode.$fEnumIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4L3Q]
        let {
          sat_s4L3W [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4L3Q] \u []
                  case x_s4L3Q of wild_s4L3U {
                    __DEFAULT ->
                        case +# [wild_s4L3U 1#] of sat_s4L3V {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go sat_s4L3V;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4L3T [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4L3Q] \u []
                  case >=# [x_s4L3Q 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3Q;
                    1# ->
                        case <=# [x_s4L3Q 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4L3Q;
                          1# -> tagToEnum# [x_s4L3Q];
                        };
                  };
        } in  : [sat_s4L3T sat_s4L3W];

GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4L3X y_s4L3Y]
        let-no-escape {
          $j_s4L3Z [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s4L3Y] \r [x1_s4L40]
                  case y_s4L3Y of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [x1_s4L40 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 x1_s4L40;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [x1_s4L40 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 x1_s4L40;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [x1_s4L40 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 x1_s4L40;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [x1_s4L40 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go x1_s4L40;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s4L3X of {
            GHC.IO.IOMode.ReadMode -> $j_s4L3Z 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L3Z 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L3Z 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L3Z 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s4L47 x2_s4L48 y_s4L49]
        let-no-escape {
          $j_s4L4a [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s4L48 y_s4L49] \r [x4_s4L4b]
                  let-no-escape {
                    $j1_s4L4c [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s4L49 x4_s4L4b] \r [x5_s4L4d]
                            case y_s4L49 of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L4x [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L4k [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L4k]
                                                              of
                                                              y'_s4L4l [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L4m [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L4k
                                                                                    y'_s4L4l
                                                                                    go_dn_s4L4m] \r [x_s4L4n]
                                                                              case
                                                                                  <# [x_s4L4n
                                                                                      y'_s4L4l]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L4t [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L4k
                                                                                           go_dn_s4L4m
                                                                                           x_s4L4n] \u []
                                                                                              case
                                                                                                  +# [x_s4L4n
                                                                                                      delta_s4L4k]
                                                                                              of
                                                                                              sat_s4L4s
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L4m
                                                                                                        sat_s4L4s;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L4r [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4n] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4n
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4n;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4n
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4n;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4n];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4r
                                                                                         sat_s4L4t];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L4w [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4n] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4n
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4n;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4n
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4n;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4n];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4w
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L4m x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L4j [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L4j sat_s4L4x];
                                          1# ->
                                              case ># [0# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L4B [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L4B GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L4T [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L4G [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4L4G]
                                                              of
                                                              y'_s4L4H [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L4I [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L4G
                                                                                    y'_s4L4H
                                                                                    go_up_s4L4I] \r [x_s4L4J]
                                                                              case
                                                                                  ># [x_s4L4J
                                                                                      y'_s4L4H]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L4P [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L4G
                                                                                           go_up_s4L4I
                                                                                           x_s4L4J] \u []
                                                                                              case
                                                                                                  +# [x_s4L4J
                                                                                                      delta_s4L4G]
                                                                                              of
                                                                                              sat_s4L4O
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L4I
                                                                                                        sat_s4L4O;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L4N [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4J] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4J
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4J;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4J
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4J;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4J];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4N
                                                                                         sat_s4L4P];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L4S [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L4J] \u []
                                                                                              case
                                                                                                  >=# [x_s4L4J
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L4J;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L4J
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L4J;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L4J];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L4S
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L4I x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L4F [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L4F sat_s4L4T];
                                          1# ->
                                              case <# [0# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L4X [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L4X GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L5g [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L53 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4L53]
                                                              of
                                                              y'_s4L54 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L55 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L53
                                                                                    y'_s4L54
                                                                                    go_dn_s4L55] \r [x_s4L56]
                                                                              case
                                                                                  <# [x_s4L56
                                                                                      y'_s4L54]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L5c [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L53
                                                                                           go_dn_s4L55
                                                                                           x_s4L56] \u []
                                                                                              case
                                                                                                  +# [x_s4L56
                                                                                                      delta_s4L53]
                                                                                              of
                                                                                              sat_s4L5b
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L55
                                                                                                        sat_s4L5b;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L5a [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L56] \u []
                                                                                              case
                                                                                                  >=# [x_s4L56
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L56;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L56
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L56;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L56];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5a
                                                                                         sat_s4L5c];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L5f [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L56] \u []
                                                                                              case
                                                                                                  >=# [x_s4L56
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L56;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L56
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L56;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L56];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5f
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L55 x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L52 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L52 sat_s4L5g];
                                          1# ->
                                              case ># [1# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L5k [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L5k GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L5C [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L5p [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4L5p]
                                                              of
                                                              y'_s4L5q [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L5r [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L5p
                                                                                    y'_s4L5q
                                                                                    go_up_s4L5r] \r [x_s4L5s]
                                                                              case
                                                                                  ># [x_s4L5s
                                                                                      y'_s4L5q]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L5y [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L5p
                                                                                           go_up_s4L5r
                                                                                           x_s4L5s] \u []
                                                                                              case
                                                                                                  +# [x_s4L5s
                                                                                                      delta_s4L5p]
                                                                                              of
                                                                                              sat_s4L5x
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L5r
                                                                                                        sat_s4L5x;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L5w [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5s] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5s
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5s;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5s
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5s;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5s];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5w
                                                                                         sat_s4L5y];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L5B [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5s] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5s
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5s;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5s
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5s;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5s];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5B
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L5r x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L5o [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L5o sat_s4L5C];
                                          1# ->
                                              case <# [1# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L5G [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L5G GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L5Z [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L5M [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4L5M]
                                                              of
                                                              y'_s4L5N [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L5O [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L5M
                                                                                    y'_s4L5N
                                                                                    go_dn_s4L5O] \r [x_s4L5P]
                                                                              case
                                                                                  <# [x_s4L5P
                                                                                      y'_s4L5N]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L5V [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L5M
                                                                                           go_dn_s4L5O
                                                                                           x_s4L5P] \u []
                                                                                              case
                                                                                                  +# [x_s4L5P
                                                                                                      delta_s4L5M]
                                                                                              of
                                                                                              sat_s4L5U
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L5O
                                                                                                        sat_s4L5U;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L5T [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5P] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5P
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5P;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5P
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5P;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5P];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5T
                                                                                         sat_s4L5V];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L5Y [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L5P] \u []
                                                                                              case
                                                                                                  >=# [x_s4L5P
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L5P;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L5P
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L5P;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L5P];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L5Y
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L5O x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L5L [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L5L sat_s4L5Z];
                                          1# ->
                                              case ># [2# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L63 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L63 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L6l [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L68 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4L68]
                                                              of
                                                              y'_s4L69 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L6a [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L68
                                                                                    y'_s4L69
                                                                                    go_up_s4L6a] \r [x_s4L6b]
                                                                              case
                                                                                  ># [x_s4L6b
                                                                                      y'_s4L69]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L6h [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L68
                                                                                           go_up_s4L6a
                                                                                           x_s4L6b] \u []
                                                                                              case
                                                                                                  +# [x_s4L6b
                                                                                                      delta_s4L68]
                                                                                              of
                                                                                              sat_s4L6g
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L6a
                                                                                                        sat_s4L6g;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L6f [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6b] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6b
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6b;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6b
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6b;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6b];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6f
                                                                                         sat_s4L6h];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L6k [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6b] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6b
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6b;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6b
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6b;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6b];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6k
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L6a x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L67 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L67 sat_s4L6l];
                                          1# ->
                                              case <# [2# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L6p [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L6p GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [x5_s4L4d x4_s4L4b] of {
                                    __DEFAULT ->
                                        case ># [3# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L6I [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L6v [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L6v]
                                                              of
                                                              y'_s4L6w [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4L6x [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L6v
                                                                                    y'_s4L6w
                                                                                    go_dn_s4L6x] \r [x_s4L6y]
                                                                              case
                                                                                  <# [x_s4L6y
                                                                                      y'_s4L6w]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L6E [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L6v
                                                                                           go_dn_s4L6x
                                                                                           x_s4L6y] \u []
                                                                                              case
                                                                                                  +# [x_s4L6y
                                                                                                      delta_s4L6v]
                                                                                              of
                                                                                              sat_s4L6D
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4L6x
                                                                                                        sat_s4L6D;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L6C [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6y] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6y
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6y;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6y
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6y;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6y];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6C
                                                                                         sat_s4L6E];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L6H [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6y] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6y
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6y;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6y
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6y;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6y];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6H
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4L6x x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L6u [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L6u sat_s4L6I];
                                          1# ->
                                              case ># [3# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L6M [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L6M GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# x5_s4L4d] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4L74 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4L4b x5_s4L4d] \u []
                                                        case
                                                            -# [x5_s4L4d x4_s4L4b]
                                                        of
                                                        delta_s4L6R [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4L6R]
                                                              of
                                                              y'_s4L6S [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4L6T [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4L6R
                                                                                    y'_s4L6S
                                                                                    go_up_s4L6T] \r [x_s4L6U]
                                                                              case
                                                                                  ># [x_s4L6U
                                                                                      y'_s4L6S]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4L70 [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4L6R
                                                                                           go_up_s4L6T
                                                                                           x_s4L6U] \u []
                                                                                              case
                                                                                                  +# [x_s4L6U
                                                                                                      delta_s4L6R]
                                                                                              of
                                                                                              sat_s4L6Z
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4L6T
                                                                                                        sat_s4L6Z;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4L6Y [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6U] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6U
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6U;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6U
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6U;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6U];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L6Y
                                                                                         sat_s4L70];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4L73 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4L6U] \u []
                                                                                              case
                                                                                                  >=# [x_s4L6U
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4L6U;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4L6U
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4L6U;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4L6U];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4L73
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4L6T x5_s4L4d;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4L6Q [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4L4b] \u []
                                                        case >=# [x4_s4L4b 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                          1# ->
                                                              case <=# [x4_s4L4b 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# -> tagToEnum# [x4_s4L4b];
                                                              };
                                                        };
                                              } in  : [sat_s4L6Q sat_s4L74];
                                          1# ->
                                              case <# [3# x4_s4L4b] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4L78 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4L4b] \u []
                                                              case >=# [x4_s4L4b 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4L4b;
                                                                1# ->
                                                                    case <=# [x4_s4L4b 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4L4b;
                                                                      1# -> tagToEnum# [x4_s4L4b];
                                                                    };
                                                              };
                                                    } in  : [sat_s4L78 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s4L48 of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4L4c 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4L4c 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4L4c 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4L4c 3#;
                    };
        } in 
          case x1_s4L47 of {
            GHC.IO.IOMode.ReadMode -> $j_s4L4a 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4L4a 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4L4a 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4L4a 3#;
          };

GHC.IO.IOMode.$fEnumIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.IOMode.$fEnumIOMode_$csucc
                                    GHC.IO.IOMode.$fEnumIOMode_$cpred
                                    GHC.IO.IOMode.$fEnumIOMode_$ctoEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo];

GHC.IO.IOMode.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule4];

GHC.IO.IOMode.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule2];

GHC.IO.IOMode.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.IOMode.$trModule3
                                     GHC.IO.IOMode.$trModule1];

GHC.IO.IOMode.$tcIOMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IOMode"#;

GHC.IO.IOMode.$tcIOMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tcIOMode2];

GHC.IO.IOMode.$tcIOMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9818555080744742578##
                                    14348064797489060312##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tcIOMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.IOMode.$tc'AppendMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.IOMode.$tcIOMode
                                              GHC.Types.[]];

GHC.IO.IOMode.$tc'ReadMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadMode"#;

GHC.IO.IOMode.$tc'ReadMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadMode2];

GHC.IO.IOMode.$tc'ReadMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17697021977009842408##
                                    16081808542294250782##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'WriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteMode"#;

GHC.IO.IOMode.$tc'WriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'WriteMode2];

GHC.IO.IOMode.$tc'WriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16610458722029011495##
                                    11554819901902375488##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'WriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'AppendMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendMode"#;

GHC.IO.IOMode.$tc'AppendMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'AppendMode3];

GHC.IO.IOMode.$tc'AppendMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3610623883618650464##
                                    11131639874085434472##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'AppendMode2
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'ReadWriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteMode"#;

GHC.IO.IOMode.$tc'ReadWriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadWriteMode2];

GHC.IO.IOMode.$tc'ReadWriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [626157189396725199##
                                    9407417215311302278##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadWriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.ReadMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadMode! [];

GHC.IO.IOMode.WriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.WriteMode! [];

GHC.IO.IOMode.AppendMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.AppendMode! [];

GHC.IO.IOMode.ReadWriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadWriteMode! [];


==================== Pre unarise: ====================
2018-03-16 15:59:44.439046897 UTC

GHC.IO.IOMode.$fReadIOMode21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadMode"#;

GHC.IO.IOMode.$fReadIOMode20 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode21;

GHC.IO.IOMode.$fReadIOMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WriteMode"#;

GHC.IO.IOMode.$fReadIOMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode17;

GHC.IO.IOMode.$fReadIOMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AppendMode"#;

GHC.IO.IOMode.$fReadIOMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode13;

GHC.IO.IOMode.$fReadIOMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadWriteMode"#;

GHC.IO.IOMode.$fReadIOMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode9;

GHC.IO.IOMode.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4OOX w1_s4OOY]
        case w_s4OOX of {
          GHC.IO.IOMode.ReadMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode20 w1_s4OOY;
          GHC.IO.IOMode.WriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode16 w1_s4OOY;
          GHC.IO.IOMode.AppendMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode12 w1_s4OOY;
          GHC.IO.IOMode.ReadWriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode8 w1_s4OOY;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4OP0 w1_s4OP1 w2_s4OP2]
        GHC.IO.IOMode.$w$cshowsPrec w1_s4OP1 w2_s4OP2;

GHC.IO.IOMode.$fShowIOMode_$cshow
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4OP3]
        case x_s4OP3 of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fReadIOMode20;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fReadIOMode16;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fReadIOMode12;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fReadIOMode8;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowList
  :: [GHC.IO.IOMode.IOMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4OP5 s_s4OP6]
        GHC.Show.showList__ GHC.IO.IOMode.$w$cshowsPrec ls_s4OP5 s_s4OP6;

GHC.IO.IOMode.$fShowIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.IOMode.$fShowIOMode_$cshowsPrec
                                    GHC.IO.IOMode.$fShowIOMode_$cshow
                                    GHC.IO.IOMode.$fShowIOMode_$cshowList];

GHC.IO.IOMode.$fReadIOMode19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OP7 k_s4OP8] k_s4OP8 GHC.IO.IOMode.ReadMode;

GHC.IO.IOMode.$fReadIOMode18
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode20
                        GHC.IO.IOMode.$fReadIOMode19];

GHC.IO.IOMode.$fReadIOMode15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OP9 k_s4OPa] k_s4OPa GHC.IO.IOMode.WriteMode;

GHC.IO.IOMode.$fReadIOMode14
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode16
                        GHC.IO.IOMode.$fReadIOMode15];

GHC.IO.IOMode.$fReadIOMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OPb k_s4OPc] k_s4OPc GHC.IO.IOMode.AppendMode;

GHC.IO.IOMode.$fReadIOMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode12
                        GHC.IO.IOMode.$fReadIOMode11];

GHC.IO.IOMode.$fReadIOMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OPd k_s4OPe] k_s4OPe GHC.IO.IOMode.ReadWriteMode;

GHC.IO.IOMode.$fReadIOMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode8
                        GHC.IO.IOMode.$fReadIOMode7];

GHC.IO.IOMode.$fReadIOMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode6 GHC.Types.[]];

GHC.IO.IOMode.$fReadIOMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode10
                      GHC.IO.IOMode.$fReadIOMode5];

GHC.IO.IOMode.$fReadIOMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode14
                      GHC.IO.IOMode.$fReadIOMode4];

GHC.IO.IOMode.$fReadIOMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode18
                      GHC.IO.IOMode.$fReadIOMode3];

GHC.IO.IOMode.$fReadIOMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s4OPf]
        GHC.Read.choose2 GHC.IO.IOMode.$fReadIOMode_sps eta_s4OPf;

GHC.IO.IOMode.$fReadIOMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.IOMode.$fReadIOMode2 eta_B2 eta_B1;

GHC.IO.IOMode.$fReadIOMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s4OPg]
        let {
          sat_s4OPh [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.IOMode.IOMode
          [LclId] =
              [n_s4OPg] \u []
                  GHC.Read.list3
                      GHC.IO.IOMode.$fReadIOMode2
                      n_s4OPg
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s4OPh;

GHC.IO.IOMode.$fReadIOMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.IOMode.$fReadIOMode1;

GHC.IO.IOMode.$fReadIOMode22
  :: Text.ParserCombinators.ReadP.P [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u []
        GHC.IO.IOMode.$fReadIOMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.IOMode.$fReadIOMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.IOMode.$fReadIOMode22 eta_B1;

GHC.IO.IOMode.$fReadIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.IOMode.$fReadIOMode_$creadsPrec
                                    GHC.IO.IOMode.$fReadIOMode_$creadList
                                    GHC.IO.IOMode.$fReadIOMode1
                                    GHC.IO.IOMode.$fReadIOMode_$creadListPrec];

GHC.IO.IOMode.$fEqIOMode_$c==
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s4OPi ds1_s4OPj]
        case ds_s4OPi of {
          GHC.IO.IOMode.ReadMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
        };

GHC.IO.IOMode.$fEqIOMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s4OPp eta1_s4OPq]
        case eta_s4OPp of {
          GHC.IO.IOMode.ReadMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
        };

GHC.IO.IOMode.$fEqIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.IOMode.$fEqIOMode_$c==
                                     GHC.IO.IOMode.$fEqIOMode_$c/=];

GHC.IO.IOMode.$fOrdIOMode_$ccompare
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPw b_s4OPx]
        case a_s4OPw of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4OPx of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.LT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4OPx of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.GT [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4OPx of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4OPx of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.EQ [];
              };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPD b_s4OPE]
        case a_s4OPD of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4OPE of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4OPE of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4OPE of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4OPE of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPK b_s4OPL]
        case b_s4OPL of {
          GHC.IO.IOMode.ReadMode ->
              case a_s4OPK of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case a_s4OPK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case a_s4OPK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case a_s4OPK of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$cmax
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4OPR y_s4OPS]
        case y_s4OPS of {
          GHC.IO.IOMode.ReadMode -> x_s4OPR;
          GHC.IO.IOMode.WriteMode ->
              case x_s4OPR of {
                __DEFAULT -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4OPR of {
                __DEFAULT -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case x_s4OPR of { __DEFAULT -> GHC.IO.IOMode.ReadWriteMode []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPX b_s4OPY]
        case a_s4OPX of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4OPY of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4OPY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4OPY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4OPY of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OQ4 b_s4OQ5]
        GHC.IO.IOMode.$fOrdIOMode_$c< b_s4OQ5 a_s4OQ4;

GHC.IO.IOMode.$fOrdIOMode_$cmin
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4OQ6 y_s4OQ7]
        case y_s4OQ7 of {
          GHC.IO.IOMode.ReadMode ->
              case x_s4OQ6 of { __DEFAULT -> GHC.IO.IOMode.ReadMode []; };
          GHC.IO.IOMode.WriteMode ->
              case x_s4OQ6 of wild1_s4OQa {
                __DEFAULT -> wild1_s4OQa;
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.WriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4OQ6 of wild1_s4OQb {
                __DEFAULT -> wild1_s4OQb;
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
              };
          GHC.IO.IOMode.ReadWriteMode -> x_s4OQ6;
        };

GHC.IO.IOMode.$fOrdIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.IOMode.$fEqIOMode
                                      GHC.IO.IOMode.$fOrdIOMode_$ccompare
                                      GHC.IO.IOMode.$fOrdIOMode_$c<
                                      GHC.IO.IOMode.$fOrdIOMode_$c<=
                                      GHC.IO.IOMode.$fOrdIOMode_$c>
                                      GHC.IO.IOMode.$fOrdIOMode_$c>=
                                      GHC.IO.IOMode.$fOrdIOMode_$cmax
                                      GHC.IO.IOMode.$fOrdIOMode_$cmin];

GHC.IO.IOMode.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4OQc w_s4OQd]
        case ww_s4OQc of {
          GHC.IO.IOMode.ReadMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.WriteMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.AppendMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> -3#;
                GHC.IO.IOMode.WriteMode -> -2#;
                GHC.IO.IOMode.AppendMode -> -1#;
                GHC.IO.IOMode.ReadWriteMode -> 0#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s4OQj w1_s4OQk]
        case w_s4OQj of {
          (,) ww1_s4OQm [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.IOMode.$w$cunsafeIndex ww1_s4OQm w1_s4OQk
              of
              ww3_s4OQo
              { __DEFAULT -> GHC.Types.I# [ww3_s4OQo];
              };
        };

GHC.IO.IOMode.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4OQp ww1_s4OQq w_s4OQr]
        let-no-escape {
          $j_s4OQs [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4OQq w_s4OQr] \r [a#_s4OQt]
                  let-no-escape {
                    $j1_s4OQu [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s4OQr a#_s4OQt] \r [b#_s4OQv]
                            case w_s4OQr of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [0# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s4OQv] of sat_s4OQy {
                                          __DEFAULT -> tagToEnum# [sat_s4OQy];
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [1# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s4OQv] of sat_s4OQA {
                                          __DEFAULT -> tagToEnum# [sat_s4OQA];
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [2# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s4OQv] of sat_s4OQC {
                                          __DEFAULT -> tagToEnum# [sat_s4OQC];
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [3# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [3# b#_s4OQv] of sat_s4OQE {
                                          __DEFAULT -> tagToEnum# [sat_s4OQE];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s4OQq of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4OQu 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4OQu 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4OQu 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4OQu 3#;
                    };
        } in 
          case ww_s4OQp of {
            GHC.IO.IOMode.ReadMode -> $j_s4OQs 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OQs 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OQs 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OQs 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4OQH w1_s4OQI]
        case w_s4OQH of {
          (,) ww1_s4OQK [Occ=Once] ww2_s4OQL [Occ=Once] ->
              GHC.IO.IOMode.$w$cinRange ww1_s4OQK ww2_s4OQL w1_s4OQI;
        };

lvl_r4KYL :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r4KYM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r4KYN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl3_r4KYO :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [3#];

GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
  :: GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s4OQM]
        case a_s4OQM of {
          GHC.IO.IOMode.ReadMode -> lvl_r4KYL;
          GHC.IO.IOMode.WriteMode -> lvl1_r4KYM;
          GHC.IO.IOMode.AppendMode -> lvl2_r4KYN;
          GHC.IO.IOMode.ReadWriteMode -> lvl3_r4KYO;
        };

GHC.IO.IOMode.$fIxIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OQO]
        let {
          sat_s4OQS [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OQO] \u []
                  case x_s4OQO of wild_s4OQQ {
                    __DEFAULT ->
                        case +# [wild_s4OQQ 1#] of sat_s4OQR {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 sat_s4OQR;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4OQP [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OQO] \u [] tagToEnum# [x_s4OQO];
        } in  : [sat_s4OQP sat_s4OQS];

GHC.IO.IOMode.$fIxIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OQT]
        let {
          sat_s4OQX [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OQT] \u []
                  case x_s4OQT of wild_s4OQV {
                    __DEFAULT ->
                        case +# [wild_s4OQV 1#] of sat_s4OQW {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 sat_s4OQW;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4OQU [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OQT] \u [] tagToEnum# [x_s4OQT];
        } in  : [sat_s4OQU sat_s4OQX];

GHC.IO.IOMode.$fIxIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OQY]
        let {
          sat_s4OR2 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OQY] \u []
                  case x_s4OQY of wild_s4OR0 {
                    __DEFAULT ->
                        case +# [wild_s4OR0 1#] of sat_s4OR1 {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go sat_s4OR1;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4OQZ [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OQY] \u [] tagToEnum# [x_s4OQY];
        } in  : [sat_s4OQZ sat_s4OR2];

GHC.IO.IOMode.$fEnumIOMode_go4 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OR3]
        let {
          sat_s4OR7 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OR3] \u []
                  case x_s4OR3 of wild_s4OR5 {
                    __DEFAULT ->
                        case +# [wild_s4OR5 1#] of sat_s4OR6 {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 sat_s4OR6;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4OR4 [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OR3] \u [] tagToEnum# [x_s4OR3];
        } in  : [sat_s4OR4 sat_s4OR7];

GHC.IO.IOMode.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4OR8 ww1_s4OR9]
        let-no-escape {
          $j_s4ORa [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4OR9] \r [a#_s4ORb]
                  case ww1_s4OR9 of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [a#_s4ORb 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 a#_s4ORb;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [a#_s4ORb 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 a#_s4ORb;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [a#_s4ORb 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go a#_s4ORb;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [a#_s4ORb 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 a#_s4ORb;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s4OR8 of {
            GHC.IO.IOMode.ReadMode -> $j_s4ORa 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4ORa 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4ORa 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4ORa 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s4ORi]
        case w_s4ORi of {
          (,) ww1_s4ORk [Occ=Once] ww2_s4ORl [Occ=Once] ->
              GHC.IO.IOMode.$w$crange ww1_s4ORk ww2_s4ORl;
        };

GHC.IO.IOMode.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4ORm ww1_s4ORn]
        case GHC.IO.IOMode.$w$cinRange ww_s4ORm ww1_s4ORn ww1_s4ORn of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s4ORm of {
                GHC.IO.IOMode.ReadMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> 1#;
                      GHC.IO.IOMode.WriteMode -> 2#;
                      GHC.IO.IOMode.AppendMode -> 3#;
                      GHC.IO.IOMode.ReadWriteMode -> 4#;
                    };
                GHC.IO.IOMode.WriteMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> 0#;
                      GHC.IO.IOMode.WriteMode -> 1#;
                      GHC.IO.IOMode.AppendMode -> 2#;
                      GHC.IO.IOMode.ReadWriteMode -> 3#;
                    };
                GHC.IO.IOMode.AppendMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> -1#;
                      GHC.IO.IOMode.WriteMode -> 0#;
                      GHC.IO.IOMode.AppendMode -> 1#;
                      GHC.IO.IOMode.ReadWriteMode -> 2#;
                    };
                GHC.IO.IOMode.ReadWriteMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> -2#;
                      GHC.IO.IOMode.WriteMode -> -1#;
                      GHC.IO.IOMode.AppendMode -> 0#;
                      GHC.IO.IOMode.ReadWriteMode -> 1#;
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4ORu]
        case w_s4ORu of {
          (,) ww1_s4ORw [Occ=Once] ww2_s4ORx [Occ=Once] ->
              case GHC.IO.IOMode.$w$crangeSize ww1_s4ORw ww2_s4ORx of ww3_s4ORy {
                __DEFAULT -> GHC.Types.I# [ww3_s4ORy];
              };
        };

GHC.IO.IOMode.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4ORz ww1_s4ORA]
        case ww_s4ORz of {
          GHC.IO.IOMode.ReadMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> 1#;
                GHC.IO.IOMode.WriteMode -> 2#;
                GHC.IO.IOMode.AppendMode -> 3#;
                GHC.IO.IOMode.ReadWriteMode -> 4#;
              };
          GHC.IO.IOMode.WriteMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.AppendMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4ORG]
        case w_s4ORG of {
          (,) ww1_s4ORI [Occ=Once] ww2_s4ORJ [Occ=Once] ->
              case
                  GHC.IO.IOMode.$w$cunsafeRangeSize ww1_s4ORI ww2_s4ORJ
              of
              ww3_s4ORK
              { __DEFAULT -> GHC.Types.I# [ww3_s4ORK];
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s4ORL eta1_s4ORM]
        case eta_s4ORL of {
          (,) ww1_s4ORO ww2_s4ORP [Occ=Once] ->
              case GHC.IO.IOMode.$w$cinRange ww1_s4ORO ww2_s4ORP eta1_s4ORM of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.IOMode.$w$cunsafeIndex ww1_s4ORO eta1_s4ORM
                    of
                    ww3_s4ORR
                    { __DEFAULT -> GHC.Types.I# [ww3_s4ORR];
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.IOMode.$fOrdIOMode
                                 GHC.IO.IOMode.$fIxIOMode_$crange
                                 GHC.IO.IOMode.$fIxIOMode_$cindex
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex
                                 GHC.IO.IOMode.$fIxIOMode_$cinRange
                                 GHC.IO.IOMode.$fIxIOMode_$crangeSize
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize];

lvl4_r4KYP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl5_r4KYQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r4KYP;

GHC.IO.IOMode.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl6_r4KYR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule4;

GHC.IO.IOMode.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.IOMode"#;

lvl7_r4KYS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule2;

lvl8_r4KYT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/IOMode.hs"#;

lvl9_r4KYU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_r4KYT;

lvl10_r4KYV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

lvl11_r4KYW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [36#];

lvl12_r4KYX :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl6_r4KYR
                                           lvl7_r4KYS
                                           lvl9_r4KYU
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl11_r4KYW];

lvl13_r4KYY :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl5_r4KYQ
                                                  lvl12_r4KYX
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r4KYZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{IOMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode5 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r4KYZ of sat_s4ORS {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4ORS;
        };

GHC.IO.IOMode.$fEnumIOMode_$cpred
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4ORT]
        case a_s4ORT of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode5;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.ReadMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
        };

lvl15_r4KZ0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{IOMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode6 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r4KZ0 of sat_s4ORV {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4ORV;
        };

GHC.IO.IOMode.$fEnumIOMode_$csucc
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4ORW]
        case a_s4ORW of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.AppendMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.ReadWriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode6;
        };

lvl16_r4KZ1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r4KZ2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r4KZ3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r4KZ2;

lvl19_r4KZ4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 3# lvl18_r4KZ3 of {
          (#,#) ww5_s4ORZ [Occ=Once] ww6_s4OS0 [Occ=Once] ->
              : [ww5_s4ORZ ww6_s4OS0];
        };

lvl20_r4KZ5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r4KZ1 lvl19_r4KZ4;

lvl21_r4KZ6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{IOMode}: tag ("#;

GHC.IO.IOMode.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4OS1]
        let {
          sat_s4OS5 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s4OS1] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s4OS1 lvl20_r4KZ5 of {
                    (#,#) ww5_s4OS3 [Occ=Once] ww6_s4OS4 [Occ=Once] ->
                        : [ww5_s4OS3 ww6_s4OS4];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r4KZ6 sat_s4OS5
          of
          sat_s4OS6
          { __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4OS6;
          };

GHC.IO.IOMode.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4OS7]
        case >=# [ww_s4OS7 0#] of {
          __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4OS7;
          1# ->
              case <=# [ww_s4OS7 3#] of {
                __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4OS7;
                1# -> tagToEnum# [ww_s4OS7];
              };
        };

GHC.IO.IOMode.$fEnumIOMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4OSa]
        case w_s4OSa of {
          GHC.Types.I# ww1_s4OSc [Occ=Once] ->
              GHC.IO.IOMode.$w$ctoEnum ww1_s4OSc;
        };

GHC.IO.IOMode.$fEnumIOMode4 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 0#;

GHC.IO.IOMode.$fEnumIOMode3 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 1#;

GHC.IO.IOMode.$fEnumIOMode2 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 2#;

GHC.IO.IOMode.$fEnumIOMode1 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 3#;

GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
  :: GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4OSd]
        case a_s4OSd of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode4;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fEnumIOMode3;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fEnumIOMode2;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode1;
        };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OSf b_s4OSg]
        let-no-escape {
          $j_s4OSh [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s4OSg] \r [a#_s4OSi]
                  let-no-escape {
                    $j1_s4OSj [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s4OSi] \r [b#_s4OSk]
                            case ># [a#_s4OSi b#_s4OSk] of {
                              __DEFAULT ->
                                  case >=# [b#_s4OSk a#_s4OSi] of {
                                    __DEFAULT ->
                                        case ># [3# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OSy [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OSp [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OSp]
                                                              of
                                                              y'_s4OSq [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OSr [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OSp
                                                                                    y'_s4OSq
                                                                                    go_dn_s4OSr] \r [x_s4OSs]
                                                                              case
                                                                                  <# [x_s4OSs
                                                                                      y'_s4OSq]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OSw [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OSp
                                                                                           go_dn_s4OSr
                                                                                           x_s4OSs] \u []
                                                                                              case
                                                                                                  +# [x_s4OSs
                                                                                                      delta_s4OSp]
                                                                                              of
                                                                                              sat_s4OSv
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OSr
                                                                                                        sat_s4OSv;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OSu [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSs] \u []
                                                                                              tagToEnum# [x_s4OSs];
                                                                                    } in 
                                                                                      : [sat_s4OSu
                                                                                         sat_s4OSw];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OSx [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSs] \u []
                                                                                              tagToEnum# [x_s4OSs];
                                                                                    } in 
                                                                                      : [sat_s4OSx
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OSr b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OSo [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OSo sat_s4OSy];
                                          1# ->
                                              case ># [3# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OSA [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OSA GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OSM [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OSD [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OSD]
                                                              of
                                                              y'_s4OSE [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OSF [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OSD
                                                                                    y'_s4OSE
                                                                                    go_up_s4OSF] \r [x_s4OSG]
                                                                              case
                                                                                  ># [x_s4OSG
                                                                                      y'_s4OSE]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OSK [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OSD
                                                                                           go_up_s4OSF
                                                                                           x_s4OSG] \u []
                                                                                              case
                                                                                                  +# [x_s4OSG
                                                                                                      delta_s4OSD]
                                                                                              of
                                                                                              sat_s4OSJ
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OSF
                                                                                                        sat_s4OSJ;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OSI [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSG] \u []
                                                                                              tagToEnum# [x_s4OSG];
                                                                                    } in 
                                                                                      : [sat_s4OSI
                                                                                         sat_s4OSK];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OSL [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSG] \u []
                                                                                              tagToEnum# [x_s4OSG];
                                                                                    } in 
                                                                                      : [sat_s4OSL
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OSF b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OSC [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OSC sat_s4OSM];
                                          1# ->
                                              case <# [3# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OSO [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OSO GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s4OSk a#_s4OSi] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OT1 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OSS [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OSS]
                                                              of
                                                              y'_s4OST [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OSU [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OSS
                                                                                    y'_s4OST
                                                                                    go_dn_s4OSU] \r [x_s4OSV]
                                                                              case
                                                                                  <# [x_s4OSV
                                                                                      y'_s4OST]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OSZ [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OSS
                                                                                           go_dn_s4OSU
                                                                                           x_s4OSV] \u []
                                                                                              case
                                                                                                  +# [x_s4OSV
                                                                                                      delta_s4OSS]
                                                                                              of
                                                                                              sat_s4OSY
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OSU
                                                                                                        sat_s4OSY;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OSX [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSV] \u []
                                                                                              tagToEnum# [x_s4OSV];
                                                                                    } in 
                                                                                      : [sat_s4OSX
                                                                                         sat_s4OSZ];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OT0 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSV] \u []
                                                                                              tagToEnum# [x_s4OSV];
                                                                                    } in 
                                                                                      : [sat_s4OT0
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OSU b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OSR [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OSR sat_s4OT1];
                                          1# ->
                                              case ># [0# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OT3 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OT3 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OTf [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OT6 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OT6]
                                                              of
                                                              y'_s4OT7 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OT8 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OT6
                                                                                    y'_s4OT7
                                                                                    go_up_s4OT8] \r [x_s4OT9]
                                                                              case
                                                                                  ># [x_s4OT9
                                                                                      y'_s4OT7]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OTd [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OT6
                                                                                           go_up_s4OT8
                                                                                           x_s4OT9] \u []
                                                                                              case
                                                                                                  +# [x_s4OT9
                                                                                                      delta_s4OT6]
                                                                                              of
                                                                                              sat_s4OTc
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OT8
                                                                                                        sat_s4OTc;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OTb [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OT9] \u []
                                                                                              tagToEnum# [x_s4OT9];
                                                                                    } in 
                                                                                      : [sat_s4OTb
                                                                                         sat_s4OTd];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OTe [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OT9] \u []
                                                                                              tagToEnum# [x_s4OT9];
                                                                                    } in 
                                                                                      : [sat_s4OTe
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OT8 b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OT5 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OT5 sat_s4OTf];
                                          1# ->
                                              case <# [0# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OTh [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OTh GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s4OSg of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4OSj 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4OSj 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4OSj 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4OSj 3#;
                    };
        } in 
          case a_s4OSf of {
            GHC.IO.IOMode.ReadMode -> $j_s4OSh 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OSh 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OSh 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OSh 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTk]
        let {
          sat_s4OTq [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTk] \u []
                  case x_s4OTk of wild_s4OTo {
                    __DEFAULT ->
                        case +# [wild_s4OTo 1#] of sat_s4OTp {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 sat_s4OTp;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4OTn [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTk] \u []
                  case >=# [x_s4OTk 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTk;
                    1# ->
                        case <=# [x_s4OTk 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTk;
                          1# -> tagToEnum# [x_s4OTk];
                        };
                  };
        } in  : [sat_s4OTn sat_s4OTq];

GHC.IO.IOMode.$fEnumIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTr]
        let {
          sat_s4OTx [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTr] \u []
                  case x_s4OTr of wild_s4OTv {
                    __DEFAULT ->
                        case +# [wild_s4OTv 1#] of sat_s4OTw {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 sat_s4OTw;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4OTu [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTr] \u []
                  case >=# [x_s4OTr 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTr;
                    1# ->
                        case <=# [x_s4OTr 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTr;
                          1# -> tagToEnum# [x_s4OTr];
                        };
                  };
        } in  : [sat_s4OTu sat_s4OTx];

GHC.IO.IOMode.$fEnumIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTy]
        let {
          sat_s4OTE [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTy] \u []
                  case x_s4OTy of wild_s4OTC {
                    __DEFAULT ->
                        case +# [wild_s4OTC 1#] of sat_s4OTD {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 sat_s4OTD;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4OTB [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTy] \u []
                  case >=# [x_s4OTy 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTy;
                    1# ->
                        case <=# [x_s4OTy 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTy;
                          1# -> tagToEnum# [x_s4OTy];
                        };
                  };
        } in  : [sat_s4OTB sat_s4OTE];

GHC.IO.IOMode.$fEnumIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTF]
        let {
          sat_s4OTL [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTF] \u []
                  case x_s4OTF of wild_s4OTJ {
                    __DEFAULT ->
                        case +# [wild_s4OTJ 1#] of sat_s4OTK {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go sat_s4OTK;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4OTI [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTF] \u []
                  case >=# [x_s4OTF 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTF;
                    1# ->
                        case <=# [x_s4OTF 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTF;
                          1# -> tagToEnum# [x_s4OTF];
                        };
                  };
        } in  : [sat_s4OTI sat_s4OTL];

GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4OTM y_s4OTN]
        let-no-escape {
          $j_s4OTO [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s4OTN] \r [x1_s4OTP]
                  case y_s4OTN of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [x1_s4OTP 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 x1_s4OTP;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [x1_s4OTP 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 x1_s4OTP;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [x1_s4OTP 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 x1_s4OTP;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [x1_s4OTP 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go x1_s4OTP;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s4OTM of {
            GHC.IO.IOMode.ReadMode -> $j_s4OTO 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OTO 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OTO 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OTO 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s4OTW x2_s4OTX y_s4OTY]
        let-no-escape {
          $j_s4OTZ [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s4OTX y_s4OTY] \r [x4_s4OU0]
                  let-no-escape {
                    $j1_s4OU1 [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s4OTY x4_s4OU0] \r [x5_s4OU2]
                            case y_s4OTY of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OUm [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OU9 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OU9]
                                                              of
                                                              y'_s4OUa [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OUb [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OU9
                                                                                    y'_s4OUa
                                                                                    go_dn_s4OUb] \r [x_s4OUc]
                                                                              case
                                                                                  <# [x_s4OUc
                                                                                      y'_s4OUa]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OUi [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OU9
                                                                                           go_dn_s4OUb
                                                                                           x_s4OUc] \u []
                                                                                              case
                                                                                                  +# [x_s4OUc
                                                                                                      delta_s4OU9]
                                                                                              of
                                                                                              sat_s4OUh
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OUb
                                                                                                        sat_s4OUh;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OUg [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUc] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUc
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUg
                                                                                         sat_s4OUi];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OUl [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUc] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUc
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUl
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OUb x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OU8 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OU8 sat_s4OUm];
                                          1# ->
                                              case ># [0# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OUq [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OUq GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OUI [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OUv [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OUv]
                                                              of
                                                              y'_s4OUw [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OUx [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OUv
                                                                                    y'_s4OUw
                                                                                    go_up_s4OUx] \r [x_s4OUy]
                                                                              case
                                                                                  ># [x_s4OUy
                                                                                      y'_s4OUw]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OUE [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OUv
                                                                                           go_up_s4OUx
                                                                                           x_s4OUy] \u []
                                                                                              case
                                                                                                  +# [x_s4OUy
                                                                                                      delta_s4OUv]
                                                                                              of
                                                                                              sat_s4OUD
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OUx
                                                                                                        sat_s4OUD;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OUC [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUy] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUy
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUy;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUy
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUy;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUy];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUC
                                                                                         sat_s4OUE];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OUH [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUy] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUy
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUy;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUy
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUy;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUy];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUH
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OUx x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OUu [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OUu sat_s4OUI];
                                          1# ->
                                              case <# [0# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OUM [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OUM GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OV5 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OUS [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4OUS]
                                                              of
                                                              y'_s4OUT [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OUU [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OUS
                                                                                    y'_s4OUT
                                                                                    go_dn_s4OUU] \r [x_s4OUV]
                                                                              case
                                                                                  <# [x_s4OUV
                                                                                      y'_s4OUT]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OV1 [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OUS
                                                                                           go_dn_s4OUU
                                                                                           x_s4OUV] \u []
                                                                                              case
                                                                                                  +# [x_s4OUV
                                                                                                      delta_s4OUS]
                                                                                              of
                                                                                              sat_s4OV0
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OUU
                                                                                                        sat_s4OV0;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OUZ [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUV] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUV
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUZ
                                                                                         sat_s4OV1];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OV4 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUV] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUV
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OV4
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OUU x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OUR [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OUR sat_s4OV5];
                                          1# ->
                                              case ># [1# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OV9 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OV9 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OVr [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OVe [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4OVe]
                                                              of
                                                              y'_s4OVf [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OVg [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OVe
                                                                                    y'_s4OVf
                                                                                    go_up_s4OVg] \r [x_s4OVh]
                                                                              case
                                                                                  ># [x_s4OVh
                                                                                      y'_s4OVf]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OVn [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OVe
                                                                                           go_up_s4OVg
                                                                                           x_s4OVh] \u []
                                                                                              case
                                                                                                  +# [x_s4OVh
                                                                                                      delta_s4OVe]
                                                                                              of
                                                                                              sat_s4OVm
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OVg
                                                                                                        sat_s4OVm;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OVl [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVh] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVh
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVh;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVh
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVh;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVh];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVl
                                                                                         sat_s4OVn];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OVq [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVh] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVh
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVh;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVh
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVh;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVh];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVq
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OVg x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OVd [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OVd sat_s4OVr];
                                          1# ->
                                              case <# [1# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OVv [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OVv GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OVO [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OVB [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4OVB]
                                                              of
                                                              y'_s4OVC [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OVD [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OVB
                                                                                    y'_s4OVC
                                                                                    go_dn_s4OVD] \r [x_s4OVE]
                                                                              case
                                                                                  <# [x_s4OVE
                                                                                      y'_s4OVC]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OVK [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OVB
                                                                                           go_dn_s4OVD
                                                                                           x_s4OVE] \u []
                                                                                              case
                                                                                                  +# [x_s4OVE
                                                                                                      delta_s4OVB]
                                                                                              of
                                                                                              sat_s4OVJ
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OVD
                                                                                                        sat_s4OVJ;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OVI [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVE] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVE
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVE;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVE
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVE;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVE];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVI
                                                                                         sat_s4OVK];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OVN [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVE] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVE
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVE;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVE
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVE;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVE];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVN
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OVD x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OVA [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OVA sat_s4OVO];
                                          1# ->
                                              case ># [2# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OVS [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OVS GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OWa [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OVX [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4OVX]
                                                              of
                                                              y'_s4OVY [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OVZ [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OVX
                                                                                    y'_s4OVY
                                                                                    go_up_s4OVZ] \r [x_s4OW0]
                                                                              case
                                                                                  ># [x_s4OW0
                                                                                      y'_s4OVY]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OW6 [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OVX
                                                                                           go_up_s4OVZ
                                                                                           x_s4OW0] \u []
                                                                                              case
                                                                                                  +# [x_s4OW0
                                                                                                      delta_s4OVX]
                                                                                              of
                                                                                              sat_s4OW5
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OVZ
                                                                                                        sat_s4OW5;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OW4 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OW0] \u []
                                                                                              case
                                                                                                  >=# [x_s4OW0
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OW0;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OW0
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OW0;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OW0];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OW4
                                                                                         sat_s4OW6];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OW9 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OW0] \u []
                                                                                              case
                                                                                                  >=# [x_s4OW0
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OW0;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OW0
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OW0;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OW0];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OW9
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OVZ x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OVW [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OVW sat_s4OWa];
                                          1# ->
                                              case <# [2# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OWe [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OWe GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [3# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OWx [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OWk [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OWk]
                                                              of
                                                              y'_s4OWl [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OWm [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OWk
                                                                                    y'_s4OWl
                                                                                    go_dn_s4OWm] \r [x_s4OWn]
                                                                              case
                                                                                  <# [x_s4OWn
                                                                                      y'_s4OWl]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OWt [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OWk
                                                                                           go_dn_s4OWm
                                                                                           x_s4OWn] \u []
                                                                                              case
                                                                                                  +# [x_s4OWn
                                                                                                      delta_s4OWk]
                                                                                              of
                                                                                              sat_s4OWs
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OWm
                                                                                                        sat_s4OWs;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OWr [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWn] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWn
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWn;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWn
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWn;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWn];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWr
                                                                                         sat_s4OWt];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OWw [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWn] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWn
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWn;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWn
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWn;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWn];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWw
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OWm x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OWj [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OWj sat_s4OWx];
                                          1# ->
                                              case ># [3# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OWB [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OWB GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OWT [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OWG [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OWG]
                                                              of
                                                              y'_s4OWH [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OWI [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OWG
                                                                                    y'_s4OWH
                                                                                    go_up_s4OWI] \r [x_s4OWJ]
                                                                              case
                                                                                  ># [x_s4OWJ
                                                                                      y'_s4OWH]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OWP [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OWG
                                                                                           go_up_s4OWI
                                                                                           x_s4OWJ] \u []
                                                                                              case
                                                                                                  +# [x_s4OWJ
                                                                                                      delta_s4OWG]
                                                                                              of
                                                                                              sat_s4OWO
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OWI
                                                                                                        sat_s4OWO;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OWN [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWJ] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWJ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWJ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWJ
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWJ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWJ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWN
                                                                                         sat_s4OWP];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OWS [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWJ] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWJ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWJ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWJ
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWJ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWJ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWS
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OWI x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OWF [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OWF sat_s4OWT];
                                          1# ->
                                              case <# [3# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OWX [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OWX GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s4OTX of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4OU1 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4OU1 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4OU1 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4OU1 3#;
                    };
        } in 
          case x1_s4OTW of {
            GHC.IO.IOMode.ReadMode -> $j_s4OTZ 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OTZ 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OTZ 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OTZ 3#;
          };

GHC.IO.IOMode.$fEnumIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.IOMode.$fEnumIOMode_$csucc
                                    GHC.IO.IOMode.$fEnumIOMode_$cpred
                                    GHC.IO.IOMode.$fEnumIOMode_$ctoEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo];

GHC.IO.IOMode.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule4];

GHC.IO.IOMode.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule2];

GHC.IO.IOMode.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.IOMode.$trModule3
                                     GHC.IO.IOMode.$trModule1];

GHC.IO.IOMode.$tcIOMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IOMode"#;

GHC.IO.IOMode.$tcIOMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tcIOMode2];

GHC.IO.IOMode.$tcIOMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9818555080744742578##
                                    14348064797489060312##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tcIOMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.IOMode.$tc'AppendMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.IOMode.$tcIOMode
                                              GHC.Types.[]];

GHC.IO.IOMode.$tc'ReadMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadMode"#;

GHC.IO.IOMode.$tc'ReadMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadMode2];

GHC.IO.IOMode.$tc'ReadMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17697021977009842408##
                                    16081808542294250782##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'WriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteMode"#;

GHC.IO.IOMode.$tc'WriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'WriteMode2];

GHC.IO.IOMode.$tc'WriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16610458722029011495##
                                    11554819901902375488##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'WriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'AppendMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendMode"#;

GHC.IO.IOMode.$tc'AppendMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'AppendMode3];

GHC.IO.IOMode.$tc'AppendMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3610623883618650464##
                                    11131639874085434472##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'AppendMode2
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'ReadWriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteMode"#;

GHC.IO.IOMode.$tc'ReadWriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadWriteMode2];

GHC.IO.IOMode.$tc'ReadWriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [626157189396725199##
                                    9407417215311302278##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadWriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.ReadMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadMode! [];

GHC.IO.IOMode.WriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.WriteMode! [];

GHC.IO.IOMode.AppendMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.AppendMode! [];

GHC.IO.IOMode.ReadWriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadWriteMode! [];


==================== STG syntax: ====================
2018-03-16 15:59:44.522807602 UTC

GHC.IO.IOMode.$fReadIOMode21 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadMode"#;

GHC.IO.IOMode.$fReadIOMode20 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode21;

GHC.IO.IOMode.$fReadIOMode17 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "WriteMode"#;

GHC.IO.IOMode.$fReadIOMode16 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode17;

GHC.IO.IOMode.$fReadIOMode13 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "AppendMode"#;

GHC.IO.IOMode.$fReadIOMode12 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode13;

GHC.IO.IOMode.$fReadIOMode9 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ReadWriteMode"#;

GHC.IO.IOMode.$fReadIOMode8 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$fReadIOMode9;

GHC.IO.IOMode.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String -> GHC.Base.String
[GblId, Arity=2, Str=<S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4OOX w1_s4OOY]
        case w_s4OOX of {
          GHC.IO.IOMode.ReadMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode20 w1_s4OOY;
          GHC.IO.IOMode.WriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode16 w1_s4OOY;
          GHC.IO.IOMode.AppendMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode12 w1_s4OOY;
          GHC.IO.IOMode.ReadWriteMode ->
              GHC.Base.++ GHC.IO.IOMode.$fReadIOMode8 w1_s4OOY;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode -> GHC.Show.ShowS
[GblId, Arity=3, Str=<L,A><S,1*U><L,1*U>, Unf=OtherCon []] =
    [] \r [w_s4OP0 w1_s4OP1 w2_s4OP2]
        GHC.IO.IOMode.$w$cshowsPrec w1_s4OP1 w2_s4OP2;

GHC.IO.IOMode.$fShowIOMode_$cshow
  :: GHC.IO.IOMode.IOMode -> GHC.Base.String
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4OP3]
        case x_s4OP3 of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fReadIOMode20;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fReadIOMode16;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fReadIOMode12;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fReadIOMode8;
        };

GHC.IO.IOMode.$fShowIOMode_$cshowList
  :: [GHC.IO.IOMode.IOMode] -> GHC.Show.ShowS
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ls_s4OP5 s_s4OP6]
        GHC.Show.showList__ GHC.IO.IOMode.$w$cshowsPrec ls_s4OP5 s_s4OP6;

GHC.IO.IOMode.$fShowIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Show.Show GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Show.C:Show! [GHC.IO.IOMode.$fShowIOMode_$cshowsPrec
                                    GHC.IO.IOMode.$fShowIOMode_$cshow
                                    GHC.IO.IOMode.$fShowIOMode_$cshowList];

GHC.IO.IOMode.$fReadIOMode19
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OP7 k_s4OP8] k_s4OP8 GHC.IO.IOMode.ReadMode;

GHC.IO.IOMode.$fReadIOMode18
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode20
                        GHC.IO.IOMode.$fReadIOMode19];

GHC.IO.IOMode.$fReadIOMode15
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OP9 k_s4OPa] k_s4OPa GHC.IO.IOMode.WriteMode;

GHC.IO.IOMode.$fReadIOMode14
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode16
                        GHC.IO.IOMode.$fReadIOMode15];

GHC.IO.IOMode.$fReadIOMode11
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OPb k_s4OPc] k_s4OPc GHC.IO.IOMode.AppendMode;

GHC.IO.IOMode.$fReadIOMode10
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode12
                        GHC.IO.IOMode.$fReadIOMode11];

GHC.IO.IOMode.$fReadIOMode7
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,A><C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [ds_s4OPd k_s4OPe] k_s4OPe GHC.IO.IOMode.ReadWriteMode;

GHC.IO.IOMode.$fReadIOMode6
  :: ([GHC.Types.Char],
      Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE (,)! [GHC.IO.IOMode.$fReadIOMode8
                        GHC.IO.IOMode.$fReadIOMode7];

GHC.IO.IOMode.$fReadIOMode5
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode6 GHC.Types.[]];

GHC.IO.IOMode.$fReadIOMode4
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode10
                      GHC.IO.IOMode.$fReadIOMode5];

GHC.IO.IOMode.$fReadIOMode3
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode14
                      GHC.IO.IOMode.$fReadIOMode4];

GHC.IO.IOMode.$fReadIOMode_sps
  :: [(GHC.Base.String,
       Text.ParserCombinators.ReadPrec.ReadPrec GHC.IO.IOMode.IOMode)]
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.IO.IOMode.$fReadIOMode18
                      GHC.IO.IOMode.$fReadIOMode3];

GHC.IO.IOMode.$fReadIOMode2
  :: Text.ParserCombinators.ReadPrec.Prec
     -> Text.ParserCombinators.ReadP.ReadP GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_s4OPf]
        GHC.Read.choose2 GHC.IO.IOMode.$fReadIOMode_sps eta_s4OPf;

GHC.IO.IOMode.$fReadIOMode1
  :: Text.ParserCombinators.ReadPrec.Prec
     -> forall b.
        (GHC.IO.IOMode.IOMode -> Text.ParserCombinators.ReadP.P b)
        -> Text.ParserCombinators.ReadP.P b
[GblId, Arity=2, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1]
        GHC.Read.list3 GHC.IO.IOMode.$fReadIOMode2 eta_B2 eta_B1;

GHC.IO.IOMode.$fReadIOMode_$creadsPrec
  :: GHC.Types.Int
     -> Text.ParserCombinators.ReadP.ReadS GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<L,U>, Unf=OtherCon []] =
    [] \r [n_s4OPg]
        let {
          sat_s4OPh [Occ=Once]
            :: Text.ParserCombinators.ReadP.P GHC.IO.IOMode.IOMode
          [LclId] =
              [n_s4OPg] \u []
                  GHC.Read.list3
                      GHC.IO.IOMode.$fReadIOMode2
                      n_s4OPg
                      Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;
        } in  Text.ParserCombinators.ReadP.run sat_s4OPh;

GHC.IO.IOMode.$fReadIOMode_$creadListPrec
  :: Text.ParserCombinators.ReadPrec.ReadPrec [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.Read.list GHC.IO.IOMode.$fReadIOMode1;

GHC.IO.IOMode.$fReadIOMode22
  :: Text.ParserCombinators.ReadP.P [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u []
        GHC.IO.IOMode.$fReadIOMode_$creadListPrec
            GHC.Read.$fRead()7
            Text.ParserCombinators.ReadP.$fApplicativeP_$cpure;

GHC.IO.IOMode.$fReadIOMode_$creadList
  :: Text.ParserCombinators.ReadP.ReadS [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Unf=OtherCon []] =
    [] \r [eta_B1]
        Text.ParserCombinators.ReadP.run
            GHC.IO.IOMode.$fReadIOMode22 eta_B1;

GHC.IO.IOMode.$fReadIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Read.Read GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Read.C:Read! [GHC.IO.IOMode.$fReadIOMode_$creadsPrec
                                    GHC.IO.IOMode.$fReadIOMode_$creadList
                                    GHC.IO.IOMode.$fReadIOMode1
                                    GHC.IO.IOMode.$fReadIOMode_$creadListPrec];

GHC.IO.IOMode.$fEqIOMode_$c==
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s4OPi ds1_s4OPj]
        case ds_s4OPi of {
          GHC.IO.IOMode.ReadMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ds1_s4OPj of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
        };

GHC.IO.IOMode.$fEqIOMode_$c/= [InlPrag=INLINE (sat-args=2)]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [eta_s4OPp eta1_s4OPq]
        case eta_s4OPp of {
          GHC.IO.IOMode.ReadMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case eta1_s4OPq of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
        };

GHC.IO.IOMode.$fEqIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.IO.IOMode.$fEqIOMode_$c==
                                     GHC.IO.IOMode.$fEqIOMode_$c/=];

GHC.IO.IOMode.$fOrdIOMode_$ccompare
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPw b_s4OPx]
        case a_s4OPw of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4OPx of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.LT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4OPx of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.GT [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.LT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4OPx of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.EQ [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.LT [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4OPx of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.EQ [];
              };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPD b_s4OPE]
        case a_s4OPD of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4OPE of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.False [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4OPE of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4OPE of {
                __DEFAULT -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.True [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4OPE of { __DEFAULT -> GHC.Types.False []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c<=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPK b_s4OPL]
        case b_s4OPL of {
          GHC.IO.IOMode.ReadMode ->
              case a_s4OPK of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case a_s4OPK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case a_s4OPK of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case a_s4OPK of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$cmax
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4OPR y_s4OPS]
        case y_s4OPS of {
          GHC.IO.IOMode.ReadMode -> x_s4OPR;
          GHC.IO.IOMode.WriteMode ->
              case x_s4OPR of {
                __DEFAULT -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4OPR of {
                __DEFAULT -> GHC.IO.IOMode.AppendMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.ReadWriteMode [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case x_s4OPR of { __DEFAULT -> GHC.IO.IOMode.ReadWriteMode []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>=
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OPX b_s4OPY]
        case a_s4OPX of {
          GHC.IO.IOMode.ReadMode ->
              case b_s4OPY of {
                GHC.IO.IOMode.ReadMode -> GHC.Types.True [];
                GHC.IO.IOMode.WriteMode -> GHC.Types.False [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.WriteMode ->
              case b_s4OPY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.AppendMode -> GHC.Types.False [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.AppendMode ->
              case b_s4OPY of {
                __DEFAULT -> GHC.Types.True [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.Types.False [];
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case b_s4OPY of { __DEFAULT -> GHC.Types.True []; };
        };

GHC.IO.IOMode.$fOrdIOMode_$c>
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OQ4 b_s4OQ5]
        GHC.IO.IOMode.$fOrdIOMode_$c< b_s4OQ5 a_s4OQ4;

GHC.IO.IOMode.$fOrdIOMode_$cmin
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s4OQ6 y_s4OQ7]
        case y_s4OQ7 of {
          GHC.IO.IOMode.ReadMode ->
              case x_s4OQ6 of { __DEFAULT -> GHC.IO.IOMode.ReadMode []; };
          GHC.IO.IOMode.WriteMode ->
              case x_s4OQ6 of wild1_s4OQa {
                __DEFAULT -> wild1_s4OQa;
                GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.WriteMode [];
              };
          GHC.IO.IOMode.AppendMode ->
              case x_s4OQ6 of wild1_s4OQb {
                __DEFAULT -> wild1_s4OQb;
                GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
              };
          GHC.IO.IOMode.ReadWriteMode -> x_s4OQ6;
        };

GHC.IO.IOMode.$fOrdIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.IO.IOMode.IOMode
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.IO.IOMode.$fEqIOMode
                                      GHC.IO.IOMode.$fOrdIOMode_$ccompare
                                      GHC.IO.IOMode.$fOrdIOMode_$c<
                                      GHC.IO.IOMode.$fOrdIOMode_$c<=
                                      GHC.IO.IOMode.$fOrdIOMode_$c>
                                      GHC.IO.IOMode.$fOrdIOMode_$c>=
                                      GHC.IO.IOMode.$fOrdIOMode_$cmax
                                      GHC.IO.IOMode.$fOrdIOMode_$cmin];

GHC.IO.IOMode.$w$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4OQc w_s4OQd]
        case ww_s4OQc of {
          GHC.IO.IOMode.ReadMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.WriteMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.AppendMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case w_s4OQd of {
                GHC.IO.IOMode.ReadMode -> -3#;
                GHC.IO.IOMode.WriteMode -> -2#;
                GHC.IO.IOMode.AppendMode -> -1#;
                GHC.IO.IOMode.ReadWriteMode -> 0#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U,A)><S,1*U>m,
 Unf=OtherCon []] =
    [] \r [w_s4OQj w1_s4OQk]
        case w_s4OQj of {
          (,) ww1_s4OQm [Occ=Once] _ [Occ=Dead] ->
              case
                  GHC.IO.IOMode.$w$cunsafeIndex ww1_s4OQm w1_s4OQk
              of
              ww3_s4OQo
              { __DEFAULT -> GHC.Types.I# [ww3_s4OQo];
              };
        };

GHC.IO.IOMode.$w$cinRange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4OQp ww1_s4OQq w_s4OQr]
        let-no-escape {
          $j_s4OQs [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> GHC.Types.Bool
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4OQq w_s4OQr] \r [a#_s4OQt]
                  let-no-escape {
                    $j1_s4OQu [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> GHC.Types.Bool
                    [LclId[JoinId(1)], Arity=1, Str=<L,U>, Unf=OtherCon []] =
                        sat-only [w_s4OQr a#_s4OQt] \r [b#_s4OQv]
                            case w_s4OQr of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [0# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [0# b#_s4OQv] of sat_s4OQy {
                                          __DEFAULT -> tagToEnum# [sat_s4OQy];
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [1# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [1# b#_s4OQv] of sat_s4OQA {
                                          __DEFAULT -> tagToEnum# [sat_s4OQA];
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [2# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [2# b#_s4OQv] of sat_s4OQC {
                                          __DEFAULT -> tagToEnum# [sat_s4OQC];
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [3# a#_s4OQt] of {
                                    __DEFAULT -> GHC.Types.False [];
                                    1# ->
                                        case <=# [3# b#_s4OQv] of sat_s4OQE {
                                          __DEFAULT -> tagToEnum# [sat_s4OQE];
                                        };
                                  };
                            };
                  } in 
                    case ww1_s4OQq of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4OQu 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4OQu 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4OQu 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4OQu 3#;
                    };
        } in 
          case ww_s4OQp of {
            GHC.IO.IOMode.ReadMode -> $j_s4OQs 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OQs 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OQs 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OQs 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$cinRange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s4OQH w1_s4OQI]
        case w_s4OQH of {
          (,) ww1_s4OQK [Occ=Once] ww2_s4OQL [Occ=Once] ->
              GHC.IO.IOMode.$w$cinRange ww1_s4OQK ww2_s4OQL w1_s4OQI;
        };

lvl_r4KYL :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [0#];

lvl1_r4KYM :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [1#];

lvl2_r4KYN :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [2#];

lvl3_r4KYO :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [3#];

GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
  :: GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [a_s4OQM]
        case a_s4OQM of {
          GHC.IO.IOMode.ReadMode -> lvl_r4KYL;
          GHC.IO.IOMode.WriteMode -> lvl1_r4KYM;
          GHC.IO.IOMode.AppendMode -> lvl2_r4KYN;
          GHC.IO.IOMode.ReadWriteMode -> lvl3_r4KYO;
        };

GHC.IO.IOMode.$fIxIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OQO]
        let {
          sat_s4OQS [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OQO] \u []
                  case x_s4OQO of wild_s4OQQ {
                    __DEFAULT ->
                        case +# [wild_s4OQQ 1#] of sat_s4OQR {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 sat_s4OQR;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4OQP [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OQO] \u [] tagToEnum# [x_s4OQO];
        } in  : [sat_s4OQP sat_s4OQS];

GHC.IO.IOMode.$fIxIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OQT]
        let {
          sat_s4OQX [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OQT] \u []
                  case x_s4OQT of wild_s4OQV {
                    __DEFAULT ->
                        case +# [wild_s4OQV 1#] of sat_s4OQW {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 sat_s4OQW;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4OQU [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OQT] \u [] tagToEnum# [x_s4OQT];
        } in  : [sat_s4OQU sat_s4OQX];

GHC.IO.IOMode.$fIxIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OQY]
        let {
          sat_s4OR2 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OQY] \u []
                  case x_s4OQY of wild_s4OR0 {
                    __DEFAULT ->
                        case +# [wild_s4OR0 1#] of sat_s4OR1 {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go sat_s4OR1;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4OQZ [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OQY] \u [] tagToEnum# [x_s4OQY];
        } in  : [sat_s4OQZ sat_s4OR2];

GHC.IO.IOMode.$fEnumIOMode_go4 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OR3]
        let {
          sat_s4OR7 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OR3] \u []
                  case x_s4OR3 of wild_s4OR5 {
                    __DEFAULT ->
                        case +# [wild_s4OR5 1#] of sat_s4OR6 {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 sat_s4OR6;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4OR4 [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OR3] \u [] tagToEnum# [x_s4OR3];
        } in  : [sat_s4OR4 sat_s4OR7];

GHC.IO.IOMode.$w$crange [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4OR8 ww1_s4OR9]
        let-no-escape {
          $j_s4ORa [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [ww1_s4OR9] \r [a#_s4ORb]
                  case ww1_s4OR9 of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [a#_s4ORb 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go2 a#_s4ORb;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [a#_s4ORb 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go1 a#_s4ORb;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [a#_s4ORb 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fIxIOMode_go a#_s4ORb;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [a#_s4ORb 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go4 a#_s4ORb;
                          1# -> [] [];
                        };
                  };
        } in 
          case ww_s4OR8 of {
            GHC.IO.IOMode.ReadMode -> $j_s4ORa 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4ORa 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4ORa 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4ORa 3#;
          };

GHC.IO.IOMode.$fIxIOMode_$crange [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>,
 Unf=OtherCon []] =
    [] \r [w_s4ORi]
        case w_s4ORi of {
          (,) ww1_s4ORk [Occ=Once] ww2_s4ORl [Occ=Once] ->
              GHC.IO.IOMode.$w$crange ww1_s4ORk ww2_s4ORl;
        };

GHC.IO.IOMode.$w$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s4ORm ww1_s4ORn]
        case GHC.IO.IOMode.$w$cinRange ww_s4ORm ww1_s4ORn ww1_s4ORn of {
          GHC.Types.False -> 0#;
          GHC.Types.True ->
              case ww_s4ORm of {
                GHC.IO.IOMode.ReadMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> 1#;
                      GHC.IO.IOMode.WriteMode -> 2#;
                      GHC.IO.IOMode.AppendMode -> 3#;
                      GHC.IO.IOMode.ReadWriteMode -> 4#;
                    };
                GHC.IO.IOMode.WriteMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> 0#;
                      GHC.IO.IOMode.WriteMode -> 1#;
                      GHC.IO.IOMode.AppendMode -> 2#;
                      GHC.IO.IOMode.ReadWriteMode -> 3#;
                    };
                GHC.IO.IOMode.AppendMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> -1#;
                      GHC.IO.IOMode.WriteMode -> 0#;
                      GHC.IO.IOMode.AppendMode -> 1#;
                      GHC.IO.IOMode.ReadWriteMode -> 2#;
                    };
                GHC.IO.IOMode.ReadWriteMode ->
                    case ww1_s4ORn of {
                      GHC.IO.IOMode.ReadMode -> -2#;
                      GHC.IO.IOMode.WriteMode -> -1#;
                      GHC.IO.IOMode.AppendMode -> 0#;
                      GHC.IO.IOMode.ReadWriteMode -> 1#;
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode_$crangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(U,U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4ORu]
        case w_s4ORu of {
          (,) ww1_s4ORw [Occ=Once] ww2_s4ORx [Occ=Once] ->
              case GHC.IO.IOMode.$w$crangeSize ww1_s4ORw ww2_s4ORx of ww3_s4ORy {
                __DEFAULT -> GHC.Types.I# [ww3_s4ORy];
              };
        };

GHC.IO.IOMode.$w$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ww_s4ORz ww1_s4ORA]
        case ww_s4ORz of {
          GHC.IO.IOMode.ReadMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> 1#;
                GHC.IO.IOMode.WriteMode -> 2#;
                GHC.IO.IOMode.AppendMode -> 3#;
                GHC.IO.IOMode.ReadWriteMode -> 4#;
              };
          GHC.IO.IOMode.WriteMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> 0#;
                GHC.IO.IOMode.WriteMode -> 1#;
                GHC.IO.IOMode.AppendMode -> 2#;
                GHC.IO.IOMode.ReadWriteMode -> 3#;
              };
          GHC.IO.IOMode.AppendMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> -1#;
                GHC.IO.IOMode.WriteMode -> 0#;
                GHC.IO.IOMode.AppendMode -> 1#;
                GHC.IO.IOMode.ReadWriteMode -> 2#;
              };
          GHC.IO.IOMode.ReadWriteMode ->
              case ww1_s4ORA of {
                GHC.IO.IOMode.ReadMode -> -2#;
                GHC.IO.IOMode.WriteMode -> -1#;
                GHC.IO.IOMode.AppendMode -> 0#;
                GHC.IO.IOMode.ReadWriteMode -> 1#;
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize [InlPrag=NOUSERINLINE[0]]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode) -> GHC.Types.Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SS),1*U(1*U,1*U)>m,
 Unf=OtherCon []] =
    [] \r [w_s4ORG]
        case w_s4ORG of {
          (,) ww1_s4ORI [Occ=Once] ww2_s4ORJ [Occ=Once] ->
              case
                  GHC.IO.IOMode.$w$cunsafeRangeSize ww1_s4ORI ww2_s4ORJ
              of
              ww3_s4ORK
              { __DEFAULT -> GHC.Types.I# [ww3_s4ORK];
              };
        };

GHC.IO.IOMode.$fIxIOMode_$cindex [InlPrag=INLINE (sat-args=2)]
  :: (GHC.IO.IOMode.IOMode, GHC.IO.IOMode.IOMode)
     -> GHC.IO.IOMode.IOMode -> GHC.Types.Int
[GblId, Arity=2, Str=<S(SS),1*U(U,1*U)><S,U>m, Unf=OtherCon []] =
    [] \r [eta_s4ORL eta1_s4ORM]
        case eta_s4ORL of {
          (,) ww1_s4ORO ww2_s4ORP [Occ=Once] ->
              case GHC.IO.IOMode.$w$cinRange ww1_s4ORO ww2_s4ORP eta1_s4ORM of {
                GHC.Types.False -> GHC.Arr.hopelessIndexError;
                GHC.Types.True ->
                    case
                        GHC.IO.IOMode.$w$cunsafeIndex ww1_s4ORO eta1_s4ORM
                    of
                    ww3_s4ORR
                    { __DEFAULT -> GHC.Types.I# [ww3_s4ORR];
                    };
              };
        };

GHC.IO.IOMode.$fIxIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Arr.Ix GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Arr.C:Ix! [GHC.IO.IOMode.$fOrdIOMode
                                 GHC.IO.IOMode.$fIxIOMode_$crange
                                 GHC.IO.IOMode.$fIxIOMode_$cindex
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeIndex
                                 GHC.IO.IOMode.$fIxIOMode_$cinRange
                                 GHC.IO.IOMode.$fIxIOMode_$crangeSize
                                 GHC.IO.IOMode.$fIxIOMode_$cunsafeRangeSize];

lvl4_r4KYP :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "error"#;

lvl5_r4KYQ :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl4_r4KYP;

GHC.IO.IOMode.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

lvl6_r4KYR :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule4;

GHC.IO.IOMode.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.IO.IOMode"#;

lvl7_r4KYS :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# GHC.IO.IOMode.$trModule2;

lvl8_r4KYT :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "./GHC/IO/IOMode.hs"#;

lvl9_r4KYU :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl8_r4KYT;

lvl10_r4KYV :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [32#];

lvl11_r4KYW :: GHC.Types.Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.I#! [36#];

lvl12_r4KYX :: GHC.Stack.Types.SrcLoc
[GblId, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.SrcLoc! [lvl6_r4KYR
                                           lvl7_r4KYS
                                           lvl9_r4KYU
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl10_r4KYV
                                           lvl11_r4KYW];

lvl13_r4KYY :: GHC.Stack.Types.CallStack
[GblId, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Stack.Types.PushCallStack! [lvl5_r4KYQ
                                                  lvl12_r4KYX
                                                  GHC.Stack.Types.EmptyCallStack];

lvl14_r4KYZ :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "pred{IOMode}: tried to take `pred' of first tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode5 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl14_r4KYZ of sat_s4ORS {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4ORS;
        };

GHC.IO.IOMode.$fEnumIOMode_$cpred
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4ORT]
        case a_s4ORT of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode5;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.ReadMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.AppendMode [];
        };

lvl15_r4KZ0 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "succ{IOMode}: tried to take `succ' of last tag in enumeration"#;

GHC.IO.IOMode.$fEnumIOMode6 :: GHC.IO.IOMode.IOMode
[GblId, Str=x] =
    [] \u []
        case GHC.CString.unpackCString# lvl15_r4KZ0 of sat_s4ORV {
          __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4ORV;
        };

GHC.IO.IOMode.$fEnumIOMode_$csucc
  :: GHC.IO.IOMode.IOMode -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4ORW]
        case a_s4ORW of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.WriteMode [];
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.AppendMode [];
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.ReadWriteMode [];
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode6;
        };

lvl16_r4KZ1 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ") is outside of enumeration's range (0,"#;

lvl17_r4KZ2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    ")"#;

lvl18_r4KZ3 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackCString# lvl17_r4KZ2;

lvl19_r4KZ4 :: [GHC.Types.Char]
[GblId] =
    [] \u []
        case GHC.Show.$wshowSignedInt 0# 3# lvl18_r4KZ3 of {
          (#,#) ww5_s4ORZ [Occ=Once] ww6_s4OS0 [Occ=Once] ->
              : [ww5_s4ORZ ww6_s4OS0];
        };

lvl20_r4KZ5 :: [GHC.Types.Char]
[GblId] =
    [] \u [] GHC.CString.unpackAppendCString# lvl16_r4KZ1 lvl19_r4KZ4;

lvl21_r4KZ6 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "toEnum{IOMode}: tag ("#;

GHC.IO.IOMode.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_s4OS1]
        let {
          sat_s4OS5 [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_s4OS1] \u []
                  case GHC.Show.$wshowSignedInt 0# ww_s4OS1 lvl20_r4KZ5 of {
                    (#,#) ww5_s4OS3 [Occ=Once] ww6_s4OS4 [Occ=Once] ->
                        : [ww5_s4OS3 ww6_s4OS4];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl21_r4KZ6 sat_s4OS5
          of
          sat_s4OS6
          { __DEFAULT -> GHC.Err.error lvl13_r4KYY sat_s4OS6;
          };

GHC.IO.IOMode.$w$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [ww_s4OS7]
        case >=# [ww_s4OS7 0#] of {
          __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4OS7;
          1# ->
              case <=# [ww_s4OS7 3#] of {
                __DEFAULT -> GHC.IO.IOMode.$wlvl ww_s4OS7;
                1# -> tagToEnum# [ww_s4OS7];
              };
        };

GHC.IO.IOMode.$fEnumIOMode_$ctoEnum [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.IO.IOMode.IOMode
[GblId, Arity=1, Str=<S(S),1*U(U)>, Unf=OtherCon []] =
    [] \r [w_s4OSa]
        case w_s4OSa of {
          GHC.Types.I# ww1_s4OSc [Occ=Once] ->
              GHC.IO.IOMode.$w$ctoEnum ww1_s4OSc;
        };

GHC.IO.IOMode.$fEnumIOMode4 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 0#;

GHC.IO.IOMode.$fEnumIOMode3 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 1#;

GHC.IO.IOMode.$fEnumIOMode2 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 2#;

GHC.IO.IOMode.$fEnumIOMode1 :: [GHC.IO.IOMode.IOMode]
[GblId] =
    [] \u [] GHC.IO.IOMode.$fEnumIOMode_go4 3#;

GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
  :: GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [a_s4OSd]
        case a_s4OSd of {
          GHC.IO.IOMode.ReadMode -> GHC.IO.IOMode.$fEnumIOMode4;
          GHC.IO.IOMode.WriteMode -> GHC.IO.IOMode.$fEnumIOMode3;
          GHC.IO.IOMode.AppendMode -> GHC.IO.IOMode.$fEnumIOMode2;
          GHC.IO.IOMode.ReadWriteMode -> GHC.IO.IOMode.$fEnumIOMode1;
        };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s4OSf b_s4OSg]
        let-no-escape {
          $j_s4OSh [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [b_s4OSg] \r [a#_s4OSi]
                  let-no-escape {
                    $j1_s4OSj [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [a#_s4OSi] \r [b#_s4OSk]
                            case ># [a#_s4OSi b#_s4OSk] of {
                              __DEFAULT ->
                                  case >=# [b#_s4OSk a#_s4OSi] of {
                                    __DEFAULT ->
                                        case ># [3# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OSy [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OSp [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OSp]
                                                              of
                                                              y'_s4OSq [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OSr [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OSp
                                                                                    y'_s4OSq
                                                                                    go_dn_s4OSr] \r [x_s4OSs]
                                                                              case
                                                                                  <# [x_s4OSs
                                                                                      y'_s4OSq]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OSw [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OSp
                                                                                           go_dn_s4OSr
                                                                                           x_s4OSs] \u []
                                                                                              case
                                                                                                  +# [x_s4OSs
                                                                                                      delta_s4OSp]
                                                                                              of
                                                                                              sat_s4OSv
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OSr
                                                                                                        sat_s4OSv;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OSu [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSs] \u []
                                                                                              tagToEnum# [x_s4OSs];
                                                                                    } in 
                                                                                      : [sat_s4OSu
                                                                                         sat_s4OSw];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OSx [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSs] \u []
                                                                                              tagToEnum# [x_s4OSs];
                                                                                    } in 
                                                                                      : [sat_s4OSx
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OSr b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OSo [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OSo sat_s4OSy];
                                          1# ->
                                              case ># [3# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OSA [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OSA GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OSM [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OSD [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OSD]
                                                              of
                                                              y'_s4OSE [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OSF [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OSD
                                                                                    y'_s4OSE
                                                                                    go_up_s4OSF] \r [x_s4OSG]
                                                                              case
                                                                                  ># [x_s4OSG
                                                                                      y'_s4OSE]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OSK [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OSD
                                                                                           go_up_s4OSF
                                                                                           x_s4OSG] \u []
                                                                                              case
                                                                                                  +# [x_s4OSG
                                                                                                      delta_s4OSD]
                                                                                              of
                                                                                              sat_s4OSJ
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OSF
                                                                                                        sat_s4OSJ;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OSI [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSG] \u []
                                                                                              tagToEnum# [x_s4OSG];
                                                                                    } in 
                                                                                      : [sat_s4OSI
                                                                                         sat_s4OSK];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OSL [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSG] \u []
                                                                                              tagToEnum# [x_s4OSG];
                                                                                    } in 
                                                                                      : [sat_s4OSL
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OSF b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OSC [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OSC sat_s4OSM];
                                          1# ->
                                              case <# [3# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OSO [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OSO GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              1# ->
                                  case >=# [b#_s4OSk a#_s4OSi] of {
                                    __DEFAULT ->
                                        case ># [0# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OT1 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OSS [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OSS]
                                                              of
                                                              y'_s4OST [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OSU [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OSS
                                                                                    y'_s4OST
                                                                                    go_dn_s4OSU] \r [x_s4OSV]
                                                                              case
                                                                                  <# [x_s4OSV
                                                                                      y'_s4OST]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OSZ [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OSS
                                                                                           go_dn_s4OSU
                                                                                           x_s4OSV] \u []
                                                                                              case
                                                                                                  +# [x_s4OSV
                                                                                                      delta_s4OSS]
                                                                                              of
                                                                                              sat_s4OSY
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OSU
                                                                                                        sat_s4OSY;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OSX [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSV] \u []
                                                                                              tagToEnum# [x_s4OSV];
                                                                                    } in 
                                                                                      : [sat_s4OSX
                                                                                         sat_s4OSZ];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OT0 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OSV] \u []
                                                                                              tagToEnum# [x_s4OSV];
                                                                                    } in 
                                                                                      : [sat_s4OT0
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OSU b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OSR [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OSR sat_s4OT1];
                                          1# ->
                                              case ># [0# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OT3 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OT3 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# b#_s4OSk] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OTf [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [a#_s4OSi b#_s4OSk] \u []
                                                        case
                                                            -# [b#_s4OSk a#_s4OSi]
                                                        of
                                                        delta_s4OT6 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OT6]
                                                              of
                                                              y'_s4OT7 [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OT8 [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OT6
                                                                                    y'_s4OT7
                                                                                    go_up_s4OT8] \r [x_s4OT9]
                                                                              case
                                                                                  ># [x_s4OT9
                                                                                      y'_s4OT7]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OTd [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OT6
                                                                                           go_up_s4OT8
                                                                                           x_s4OT9] \u []
                                                                                              case
                                                                                                  +# [x_s4OT9
                                                                                                      delta_s4OT6]
                                                                                              of
                                                                                              sat_s4OTc
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OT8
                                                                                                        sat_s4OTc;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OTb [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OT9] \u []
                                                                                              tagToEnum# [x_s4OT9];
                                                                                    } in 
                                                                                      : [sat_s4OTb
                                                                                         sat_s4OTd];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OTe [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OT9] \u []
                                                                                              tagToEnum# [x_s4OT9];
                                                                                    } in 
                                                                                      : [sat_s4OTe
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OT8 b#_s4OSk;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OT5 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                              } in  : [sat_s4OT5 sat_s4OTf];
                                          1# ->
                                              case <# [0# a#_s4OSi] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OTh [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [a#_s4OSi] \u [] tagToEnum# [a#_s4OSi];
                                                    } in  : [sat_s4OTh GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case b_s4OSg of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4OSj 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4OSj 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4OSj 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4OSj 3#;
                    };
        } in 
          case a_s4OSf of {
            GHC.IO.IOMode.ReadMode -> $j_s4OSh 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OSh 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OSh 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OSh 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_go3 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTk]
        let {
          sat_s4OTq [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTk] \u []
                  case x_s4OTk of wild_s4OTo {
                    __DEFAULT ->
                        case +# [wild_s4OTo 1#] of sat_s4OTp {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 sat_s4OTp;
                        };
                    0# -> [] [];
                  }; } in
        let {
          sat_s4OTn [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTk] \u []
                  case >=# [x_s4OTk 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTk;
                    1# ->
                        case <=# [x_s4OTk 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTk;
                          1# -> tagToEnum# [x_s4OTk];
                        };
                  };
        } in  : [sat_s4OTn sat_s4OTq];

GHC.IO.IOMode.$fEnumIOMode_go2 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTr]
        let {
          sat_s4OTx [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTr] \u []
                  case x_s4OTr of wild_s4OTv {
                    __DEFAULT ->
                        case +# [wild_s4OTv 1#] of sat_s4OTw {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 sat_s4OTw;
                        };
                    1# -> [] [];
                  }; } in
        let {
          sat_s4OTu [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTr] \u []
                  case >=# [x_s4OTr 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTr;
                    1# ->
                        case <=# [x_s4OTr 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTr;
                          1# -> tagToEnum# [x_s4OTr];
                        };
                  };
        } in  : [sat_s4OTu sat_s4OTx];

GHC.IO.IOMode.$fEnumIOMode_go1 [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTy]
        let {
          sat_s4OTE [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTy] \u []
                  case x_s4OTy of wild_s4OTC {
                    __DEFAULT ->
                        case +# [wild_s4OTC 1#] of sat_s4OTD {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 sat_s4OTD;
                        };
                    2# -> [] [];
                  }; } in
        let {
          sat_s4OTB [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTy] \u []
                  case >=# [x_s4OTy 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTy;
                    1# ->
                        case <=# [x_s4OTy 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTy;
                          1# -> tagToEnum# [x_s4OTy];
                        };
                  };
        } in  : [sat_s4OTB sat_s4OTE];

GHC.IO.IOMode.$fEnumIOMode_go [Occ=LoopBreaker]
  :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=1, Str=<L,U>m2, Unf=OtherCon []] =
    [] \r [x_s4OTF]
        let {
          sat_s4OTL [Occ=Once] :: [GHC.IO.IOMode.IOMode]
          [LclId] =
              [x_s4OTF] \u []
                  case x_s4OTF of wild_s4OTJ {
                    __DEFAULT ->
                        case +# [wild_s4OTJ 1#] of sat_s4OTK {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go sat_s4OTK;
                        };
                    3# -> [] [];
                  }; } in
        let {
          sat_s4OTI [Occ=Once] :: GHC.IO.IOMode.IOMode
          [LclId] =
              [x_s4OTF] \u []
                  case >=# [x_s4OTF 0#] of {
                    __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTF;
                    1# ->
                        case <=# [x_s4OTF 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$wlvl x_s4OTF;
                          1# -> tagToEnum# [x_s4OTF];
                        };
                  };
        } in  : [sat_s4OTI sat_s4OTL];

GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x_s4OTM y_s4OTN]
        let-no-escape {
          $j_s4OTO [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [y_s4OTN] \r [x1_s4OTP]
                  case y_s4OTN of {
                    GHC.IO.IOMode.ReadMode ->
                        case ># [x1_s4OTP 0#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go3 x1_s4OTP;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.WriteMode ->
                        case ># [x1_s4OTP 1#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go2 x1_s4OTP;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.AppendMode ->
                        case ># [x1_s4OTP 2#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go1 x1_s4OTP;
                          1# -> [] [];
                        };
                    GHC.IO.IOMode.ReadWriteMode ->
                        case ># [x1_s4OTP 3#] of {
                          __DEFAULT -> GHC.IO.IOMode.$fEnumIOMode_go x1_s4OTP;
                          1# -> [] [];
                        };
                  };
        } in 
          case x_s4OTM of {
            GHC.IO.IOMode.ReadMode -> $j_s4OTO 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OTO 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OTO 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OTO 3#;
          };

GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo
  :: GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> GHC.IO.IOMode.IOMode
     -> [GHC.IO.IOMode.IOMode]
[GblId, Arity=3, Str=<S,1*U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x1_s4OTW x2_s4OTX y_s4OTY]
        let-no-escape {
          $j_s4OTZ [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
            :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
          [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [x2_s4OTX y_s4OTY] \r [x4_s4OU0]
                  let-no-escape {
                    $j1_s4OU1 [Occ=Once*!T[1], Dmd=<C(S),1*C1(U)>]
                      :: GHC.Prim.Int# -> [GHC.IO.IOMode.IOMode]
                    [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []] =
                        sat-only [y_s4OTY x4_s4OU0] \r [x5_s4OU2]
                            case y_s4OTY of {
                              GHC.IO.IOMode.ReadMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [0# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OUm [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OU9 [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OU9]
                                                              of
                                                              y'_s4OUa [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OUb [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OU9
                                                                                    y'_s4OUa
                                                                                    go_dn_s4OUb] \r [x_s4OUc]
                                                                              case
                                                                                  <# [x_s4OUc
                                                                                      y'_s4OUa]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OUi [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OU9
                                                                                           go_dn_s4OUb
                                                                                           x_s4OUc] \u []
                                                                                              case
                                                                                                  +# [x_s4OUc
                                                                                                      delta_s4OU9]
                                                                                              of
                                                                                              sat_s4OUh
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OUb
                                                                                                        sat_s4OUh;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OUg [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUc] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUc
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUg
                                                                                         sat_s4OUi];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OUl [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUc] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUc
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUc;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUc
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUc;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUc];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUl
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OUb x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OU8 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OU8 sat_s4OUm];
                                          1# ->
                                              case ># [0# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OUq [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OUq GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [0# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OUI [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OUv [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [0# delta_s4OUv]
                                                              of
                                                              y'_s4OUw [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OUx [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OUv
                                                                                    y'_s4OUw
                                                                                    go_up_s4OUx] \r [x_s4OUy]
                                                                              case
                                                                                  ># [x_s4OUy
                                                                                      y'_s4OUw]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OUE [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OUv
                                                                                           go_up_s4OUx
                                                                                           x_s4OUy] \u []
                                                                                              case
                                                                                                  +# [x_s4OUy
                                                                                                      delta_s4OUv]
                                                                                              of
                                                                                              sat_s4OUD
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OUx
                                                                                                        sat_s4OUD;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OUC [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUy] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUy
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUy;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUy
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUy;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUy];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUC
                                                                                         sat_s4OUE];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OUH [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUy] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUy
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUy;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUy
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUy;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUy];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUH
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OUx x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OUu [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OUu sat_s4OUI];
                                          1# ->
                                              case <# [0# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OUM [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OUM GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.WriteMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [1# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OV5 [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OUS [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4OUS]
                                                              of
                                                              y'_s4OUT [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OUU [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OUS
                                                                                    y'_s4OUT
                                                                                    go_dn_s4OUU] \r [x_s4OUV]
                                                                              case
                                                                                  <# [x_s4OUV
                                                                                      y'_s4OUT]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OV1 [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OUS
                                                                                           go_dn_s4OUU
                                                                                           x_s4OUV] \u []
                                                                                              case
                                                                                                  +# [x_s4OUV
                                                                                                      delta_s4OUS]
                                                                                              of
                                                                                              sat_s4OV0
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OUU
                                                                                                        sat_s4OV0;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OUZ [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUV] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUV
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OUZ
                                                                                         sat_s4OV1];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OV4 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OUV] \u []
                                                                                              case
                                                                                                  >=# [x_s4OUV
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OUV;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OUV
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OUV;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OUV];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OV4
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OUU x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OUR [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OUR sat_s4OV5];
                                          1# ->
                                              case ># [1# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OV9 [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OV9 GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [1# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OVr [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OVe [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [1# delta_s4OVe]
                                                              of
                                                              y'_s4OVf [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OVg [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OVe
                                                                                    y'_s4OVf
                                                                                    go_up_s4OVg] \r [x_s4OVh]
                                                                              case
                                                                                  ># [x_s4OVh
                                                                                      y'_s4OVf]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OVn [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OVe
                                                                                           go_up_s4OVg
                                                                                           x_s4OVh] \u []
                                                                                              case
                                                                                                  +# [x_s4OVh
                                                                                                      delta_s4OVe]
                                                                                              of
                                                                                              sat_s4OVm
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OVg
                                                                                                        sat_s4OVm;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OVl [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVh] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVh
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVh;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVh
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVh;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVh];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVl
                                                                                         sat_s4OVn];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OVq [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVh] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVh
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVh;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVh
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVh;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVh];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVq
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OVg x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OVd [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OVd sat_s4OVr];
                                          1# ->
                                              case <# [1# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OVv [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OVv GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.AppendMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [2# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OVO [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OVB [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4OVB]
                                                              of
                                                              y'_s4OVC [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OVD [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OVB
                                                                                    y'_s4OVC
                                                                                    go_dn_s4OVD] \r [x_s4OVE]
                                                                              case
                                                                                  <# [x_s4OVE
                                                                                      y'_s4OVC]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OVK [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OVB
                                                                                           go_dn_s4OVD
                                                                                           x_s4OVE] \u []
                                                                                              case
                                                                                                  +# [x_s4OVE
                                                                                                      delta_s4OVB]
                                                                                              of
                                                                                              sat_s4OVJ
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OVD
                                                                                                        sat_s4OVJ;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OVI [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVE] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVE
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVE;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVE
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVE;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVE];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVI
                                                                                         sat_s4OVK];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OVN [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OVE] \u []
                                                                                              case
                                                                                                  >=# [x_s4OVE
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OVE;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OVE
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OVE;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OVE];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OVN
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OVD x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OVA [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OVA sat_s4OVO];
                                          1# ->
                                              case ># [2# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OVS [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OVS GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [2# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OWa [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OVX [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [2# delta_s4OVX]
                                                              of
                                                              y'_s4OVY [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OVZ [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OVX
                                                                                    y'_s4OVY
                                                                                    go_up_s4OVZ] \r [x_s4OW0]
                                                                              case
                                                                                  ># [x_s4OW0
                                                                                      y'_s4OVY]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OW6 [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OVX
                                                                                           go_up_s4OVZ
                                                                                           x_s4OW0] \u []
                                                                                              case
                                                                                                  +# [x_s4OW0
                                                                                                      delta_s4OVX]
                                                                                              of
                                                                                              sat_s4OW5
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OVZ
                                                                                                        sat_s4OW5;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OW4 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OW0] \u []
                                                                                              case
                                                                                                  >=# [x_s4OW0
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OW0;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OW0
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OW0;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OW0];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OW4
                                                                                         sat_s4OW6];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OW9 [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OW0] \u []
                                                                                              case
                                                                                                  >=# [x_s4OW0
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OW0;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OW0
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OW0;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OW0];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OW9
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OVZ x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OVW [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OVW sat_s4OWa];
                                          1# ->
                                              case <# [2# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OWe [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OWe GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                              GHC.IO.IOMode.ReadWriteMode ->
                                  case >=# [x5_s4OU2 x4_s4OU0] of {
                                    __DEFAULT ->
                                        case ># [3# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OWx [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OWk [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OWk]
                                                              of
                                                              y'_s4OWl [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_dn_s4OWm [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OWk
                                                                                    y'_s4OWl
                                                                                    go_dn_s4OWm] \r [x_s4OWn]
                                                                              case
                                                                                  <# [x_s4OWn
                                                                                      y'_s4OWl]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OWt [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OWk
                                                                                           go_dn_s4OWm
                                                                                           x_s4OWn] \u []
                                                                                              case
                                                                                                  +# [x_s4OWn
                                                                                                      delta_s4OWk]
                                                                                              of
                                                                                              sat_s4OWs
                                                                                              { __DEFAULT ->
                                                                                                    go_dn_s4OWm
                                                                                                        sat_s4OWs;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OWr [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWn] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWn
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWn;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWn
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWn;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWn];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWr
                                                                                         sat_s4OWt];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OWw [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWn] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWn
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWn;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWn
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWn;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWn];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWw
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_dn_s4OWm x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OWj [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OWj sat_s4OWx];
                                          1# ->
                                              case ># [3# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OWB [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OWB GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                    1# ->
                                        case <# [3# x5_s4OU2] of {
                                          __DEFAULT ->
                                              let {
                                                sat_s4OWT [Occ=Once] :: [GHC.IO.IOMode.IOMode]
                                                [LclId] =
                                                    [x4_s4OU0 x5_s4OU2] \u []
                                                        case
                                                            -# [x5_s4OU2 x4_s4OU0]
                                                        of
                                                        delta_s4OWG [Dmd=<S,U>]
                                                        { __DEFAULT ->
                                                              case
                                                                  -# [3# delta_s4OWG]
                                                              of
                                                              y'_s4OWH [Dmd=<S,U>]
                                                              { __DEFAULT ->
                                                                    let {
                                                                      go_up_s4OWI [Occ=LoopBreaker]
                                                                        :: GHC.Prim.Int#
                                                                           -> [GHC.IO.IOMode.IOMode]
                                                                      [LclId,
                                                                       Arity=1,
                                                                       Str=<S,U>,
                                                                       Unf=OtherCon []] =
                                                                          sat-only [delta_s4OWG
                                                                                    y'_s4OWH
                                                                                    go_up_s4OWI] \r [x_s4OWJ]
                                                                              case
                                                                                  ># [x_s4OWJ
                                                                                      y'_s4OWH]
                                                                              of
                                                                              { __DEFAULT ->
                                                                                    let {
                                                                                      sat_s4OWP [Occ=Once]
                                                                                        :: [GHC.IO.IOMode.IOMode]
                                                                                      [LclId] =
                                                                                          [delta_s4OWG
                                                                                           go_up_s4OWI
                                                                                           x_s4OWJ] \u []
                                                                                              case
                                                                                                  +# [x_s4OWJ
                                                                                                      delta_s4OWG]
                                                                                              of
                                                                                              sat_s4OWO
                                                                                              { __DEFAULT ->
                                                                                                    go_up_s4OWI
                                                                                                        sat_s4OWO;
                                                                                              }; } in
                                                                                    let {
                                                                                      sat_s4OWN [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWJ] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWJ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWJ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWJ
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWJ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWJ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWN
                                                                                         sat_s4OWP];
                                                                                1# ->
                                                                                    let {
                                                                                      sat_s4OWS [Occ=Once]
                                                                                        :: GHC.IO.IOMode.IOMode
                                                                                      [LclId] =
                                                                                          [x_s4OWJ] \u []
                                                                                              case
                                                                                                  >=# [x_s4OWJ
                                                                                                       0#]
                                                                                              of
                                                                                              { __DEFAULT ->
                                                                                                    GHC.IO.IOMode.$wlvl
                                                                                                        x_s4OWJ;
                                                                                                1# ->
                                                                                                    case
                                                                                                        <=# [x_s4OWJ
                                                                                                             3#]
                                                                                                    of
                                                                                                    { __DEFAULT ->
                                                                                                          GHC.IO.IOMode.$wlvl
                                                                                                              x_s4OWJ;
                                                                                                      1# ->
                                                                                                          tagToEnum# [x_s4OWJ];
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      : [sat_s4OWS
                                                                                         GHC.Types.[]];
                                                                              };
                                                                    } in  go_up_s4OWI x5_s4OU2;
                                                              };
                                                        }; } in
                                              let {
                                                sat_s4OWF [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                [LclId] =
                                                    [x4_s4OU0] \u []
                                                        case >=# [x4_s4OU0 0#] of {
                                                          __DEFAULT -> GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                          1# ->
                                                              case <=# [x4_s4OU0 3#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# -> tagToEnum# [x4_s4OU0];
                                                              };
                                                        };
                                              } in  : [sat_s4OWF sat_s4OWT];
                                          1# ->
                                              case <# [3# x4_s4OU0] of {
                                                __DEFAULT ->
                                                    let {
                                                      sat_s4OWX [Occ=Once] :: GHC.IO.IOMode.IOMode
                                                      [LclId] =
                                                          [x4_s4OU0] \u []
                                                              case >=# [x4_s4OU0 0#] of {
                                                                __DEFAULT ->
                                                                    GHC.IO.IOMode.$wlvl x4_s4OU0;
                                                                1# ->
                                                                    case <=# [x4_s4OU0 3#] of {
                                                                      __DEFAULT ->
                                                                          GHC.IO.IOMode.$wlvl
                                                                              x4_s4OU0;
                                                                      1# -> tagToEnum# [x4_s4OU0];
                                                                    };
                                                              };
                                                    } in  : [sat_s4OWX GHC.Types.[]];
                                                1# -> [] [];
                                              };
                                        };
                                  };
                            };
                  } in 
                    case x2_s4OTX of {
                      GHC.IO.IOMode.ReadMode -> $j1_s4OU1 0#;
                      GHC.IO.IOMode.WriteMode -> $j1_s4OU1 1#;
                      GHC.IO.IOMode.AppendMode -> $j1_s4OU1 2#;
                      GHC.IO.IOMode.ReadWriteMode -> $j1_s4OU1 3#;
                    };
        } in 
          case x1_s4OTW of {
            GHC.IO.IOMode.ReadMode -> $j_s4OTZ 0#;
            GHC.IO.IOMode.WriteMode -> $j_s4OTZ 1#;
            GHC.IO.IOMode.AppendMode -> $j_s4OTZ 2#;
            GHC.IO.IOMode.ReadWriteMode -> $j_s4OTZ 3#;
          };

GHC.IO.IOMode.$fEnumIOMode [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Enum.Enum GHC.IO.IOMode.IOMode
[GblId[DFunId], Str=m] =
    CCS_DONT_CARE GHC.Enum.C:Enum! [GHC.IO.IOMode.$fEnumIOMode_$csucc
                                    GHC.IO.IOMode.$fEnumIOMode_$cpred
                                    GHC.IO.IOMode.$fEnumIOMode_$ctoEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cfromEnum
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFrom
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThen
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromTo
                                    GHC.IO.IOMode.$fEnumIOMode_$cenumFromThenTo];

GHC.IO.IOMode.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule4];

GHC.IO.IOMode.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$trModule2];

GHC.IO.IOMode.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.IO.IOMode.$trModule3
                                     GHC.IO.IOMode.$trModule1];

GHC.IO.IOMode.$tcIOMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IOMode"#;

GHC.IO.IOMode.$tcIOMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tcIOMode2];

GHC.IO.IOMode.$tcIOMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [9818555080744742578##
                                    14348064797489060312##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tcIOMode1
                                    0#
                                    GHC.Types.krep$*];

GHC.IO.IOMode.$tc'AppendMode1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IO.IOMode.$tcIOMode
                                              GHC.Types.[]];

GHC.IO.IOMode.$tc'ReadMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadMode"#;

GHC.IO.IOMode.$tc'ReadMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadMode2];

GHC.IO.IOMode.$tc'ReadMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17697021977009842408##
                                    16081808542294250782##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'WriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'WriteMode"#;

GHC.IO.IOMode.$tc'WriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'WriteMode2];

GHC.IO.IOMode.$tc'WriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16610458722029011495##
                                    11554819901902375488##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'WriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'AppendMode3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'AppendMode"#;

GHC.IO.IOMode.$tc'AppendMode2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'AppendMode3];

GHC.IO.IOMode.$tc'AppendMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3610623883618650464##
                                    11131639874085434472##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'AppendMode2
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.$tc'ReadWriteMode2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'ReadWriteMode"#;

GHC.IO.IOMode.$tc'ReadWriteMode1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.IO.IOMode.$tc'ReadWriteMode2];

GHC.IO.IOMode.$tc'ReadWriteMode :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [626157189396725199##
                                    9407417215311302278##
                                    GHC.IO.IOMode.$trModule
                                    GHC.IO.IOMode.$tc'ReadWriteMode1
                                    0#
                                    GHC.IO.IOMode.$tc'AppendMode1];

GHC.IO.IOMode.ReadMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadMode! [];

GHC.IO.IOMode.WriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.WriteMode! [];

GHC.IO.IOMode.AppendMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.AppendMode! [];

GHC.IO.IOMode.ReadWriteMode :: GHC.IO.IOMode.IOMode
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.IO.IOMode.ReadWriteMode! [];

