
==================== Pre unarise: ====================
2018-03-16 15:55:35.68330818 UTC

lvl_rQ8I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.chr: bad argument: "#;

GHC.Char.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sQ8K]
        let {
          sat_sQ8O [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sQ8K] \u []
                  case GHC.Show.$wshowSignedInt 9# ww_sQ8K GHC.Types.[] of {
                    (#,#) ww5_sQ8M [Occ=Once] ww6_sQ8N [Occ=Once] ->
                        : [ww5_sQ8M ww6_sQ8N];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rQ8I sat_sQ8O
          of
          sat_sQ8P
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sQ8P;
          };

GHC.Char.chr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_sQ8Q]
        case w_sQ8Q of {
          GHC.Types.I# ww1_sQ8S [Occ=Once] -> GHC.Char.$wlvl ww1_sQ8S;
        };

GHC.Char.chr :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_sQ8T]
        case i_sQ8T of {
          GHC.Types.I# i#_sQ8V ->
              case int2Word# [i#_sQ8V] of sat_sQ8W {
                __DEFAULT ->
                    case leWord# [sat_sQ8W 1114111##] of {
                      __DEFAULT -> GHC.Char.$wlvl i#_sQ8V;
                      1# ->
                          case chr# [i#_sQ8V] of sat_sQ8Y {
                            __DEFAULT -> GHC.Types.C# [sat_sQ8Y];
                          };
                    };
              };
        };

GHC.Char.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Char.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule4];

GHC.Char.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Char"#;

GHC.Char.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule2];

GHC.Char.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Char.$trModule3
                                     GHC.Char.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:55:35.685223492 UTC

lvl_rQ8I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.chr: bad argument: "#;

GHC.Char.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sQ8K]
        let {
          sat_sQ8O [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sQ8K] \u []
                  case GHC.Show.$wshowSignedInt 9# ww_sQ8K GHC.Types.[] of {
                    (#,#) ww5_sQ8M [Occ=Once] ww6_sQ8N [Occ=Once] ->
                        : [ww5_sQ8M ww6_sQ8N];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rQ8I sat_sQ8O
          of
          sat_sQ8P
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sQ8P;
          };

GHC.Char.chr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_sQ8Q]
        case w_sQ8Q of {
          GHC.Types.I# ww1_sQ8S [Occ=Once] -> GHC.Char.$wlvl ww1_sQ8S;
        };

GHC.Char.chr :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_sQ8T]
        case i_sQ8T of {
          GHC.Types.I# i#_sQ8V ->
              case int2Word# [i#_sQ8V] of sat_sQ8W {
                __DEFAULT ->
                    case leWord# [sat_sQ8W 1114111##] of {
                      __DEFAULT -> GHC.Char.$wlvl i#_sQ8V;
                      1# ->
                          case chr# [i#_sQ8V] of sat_sQ8Y {
                            __DEFAULT -> GHC.Types.C# [sat_sQ8Y];
                          };
                    };
              };
        };

GHC.Char.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Char.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule4];

GHC.Char.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Char"#;

GHC.Char.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule2];

GHC.Char.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Char.$trModule3
                                     GHC.Char.$trModule1];


==================== Pre unarise: ====================
2018-03-16 15:55:35.799728764 UTC

lvl_rQ8I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.chr: bad argument: "#;

GHC.Char.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sQd7]
        let {
          sat_sQdb [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sQd7] \u []
                  case GHC.Show.$wshowSignedInt 9# ww_sQd7 GHC.Types.[] of {
                    (#,#) ww5_sQd9 [Occ=Once] ww6_sQda [Occ=Once] ->
                        : [ww5_sQd9 ww6_sQda];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rQ8I sat_sQdb
          of
          sat_sQdc
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sQdc;
          };

GHC.Char.chr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_sQdd]
        case w_sQdd of {
          GHC.Types.I# ww1_sQdf [Occ=Once] -> GHC.Char.$wlvl ww1_sQdf;
        };

GHC.Char.chr :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_sQdg]
        case i_sQdg of {
          GHC.Types.I# i#_sQdi ->
              case int2Word# [i#_sQdi] of sat_sQdj {
                __DEFAULT ->
                    case leWord# [sat_sQdj 1114111##] of {
                      __DEFAULT -> GHC.Char.$wlvl i#_sQdi;
                      1# ->
                          case chr# [i#_sQdi] of sat_sQdl {
                            __DEFAULT -> GHC.Types.C# [sat_sQdl];
                          };
                    };
              };
        };

GHC.Char.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Char.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule4];

GHC.Char.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Char"#;

GHC.Char.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule2];

GHC.Char.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Char.$trModule3
                                     GHC.Char.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:55:35.801574532 UTC

lvl_rQ8I :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Prelude.chr: bad argument: "#;

GHC.Char.$wlvl [InlPrag=NOUSERINLINE[0]]
  :: GHC.Prim.Int# -> GHC.Types.Char
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [ww_sQd7]
        let {
          sat_sQdb [Occ=Once] :: [GHC.Types.Char]
          [LclId] =
              [ww_sQd7] \u []
                  case GHC.Show.$wshowSignedInt 9# ww_sQd7 GHC.Types.[] of {
                    (#,#) ww5_sQd9 [Occ=Once] ww6_sQda [Occ=Once] ->
                        : [ww5_sQd9 ww6_sQda];
                  };
        } in 
          case
              GHC.CString.unpackAppendCString# lvl_rQ8I sat_sQdb
          of
          sat_sQdc
          { __DEFAULT -> GHC.Err.errorWithoutStackTrace sat_sQdc;
          };

GHC.Char.chr1 [InlPrag=NOUSERINLINE[0]]
  :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<B,1*U(U)>x, Unf=OtherCon []] =
    [] \r [w_sQdd]
        case w_sQdd of {
          GHC.Types.I# ww1_sQdf [Occ=Once] -> GHC.Char.$wlvl ww1_sQdf;
        };

GHC.Char.chr :: GHC.Types.Int -> GHC.Types.Char
[GblId, Arity=1, Str=<S(S),1*U(U)>m, Unf=OtherCon []] =
    [] \r [i_sQdg]
        case i_sQdg of {
          GHC.Types.I# i#_sQdi ->
              case int2Word# [i#_sQdi] of sat_sQdj {
                __DEFAULT ->
                    case leWord# [sat_sQdj 1114111##] of {
                      __DEFAULT -> GHC.Char.$wlvl i#_sQdi;
                      1# ->
                          case chr# [i#_sQdi] of sat_sQdl {
                            __DEFAULT -> GHC.Types.C# [sat_sQdl];
                          };
                    };
              };
        };

GHC.Char.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Char.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule4];

GHC.Char.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Char"#;

GHC.Char.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Char.$trModule2];

GHC.Char.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Char.$trModule3
                                     GHC.Char.$trModule1];

