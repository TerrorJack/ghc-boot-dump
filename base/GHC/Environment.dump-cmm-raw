
==================== Raw Cmm ====================
2018-03-16 16:05:16.755040416 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:16.756175469 UTC

[section ""cstring" . GHC.Environment.$trModule4_bytes" {
     GHC.Environment.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.757896507 UTC

[section ""data" . GHC.Environment.$trModule3_closure" {
     GHC.Environment.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Environment.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.759594634 UTC

[section ""cstring" . GHC.Environment.$trModule2_bytes" {
     GHC.Environment.$trModule2_bytes:
         I8[] [71,72,67,46,69,110,118,105,114,111,110,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.761342204 UTC

[section ""data" . GHC.Environment.$trModule1_closure" {
     GHC.Environment.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Environment.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.763056003 UTC

[section ""data" . GHC.Environment.$trModule_closure" {
     GHC.Environment.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Environment.$trModule3_closure+1;
         const GHC.Environment.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.770231743 UTC

[section ""data" . GHC.Environment.getFullArgs1_closure" {
     GHC.Environment.getFullArgs1_closure:
         const GHC.Environment.getFullArgs1_info;
         const 0;
 },
 go_safro_entry() //  [R1, R2]
         { []
         }
     {offset
       cafxz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cafxA; else goto cafxB;
       cafxA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cafxB: // global
           I64[Sp - 24] = block_cafxs_info;
           _safro::P64 = R1;
           _safrk::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _safrk::P64;
           P64[Sp - 8] = _safro::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uafxY; else goto cafxt;
       uafxY: // global
           call _cafxs(R1) args: 0, res: 0, upd: 0;
       cafxt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_safro_info" {
     go_safro_info:
         const go_safro_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const Safub_srt;
 },
 _cafxs() //  [R1]
         { []
         }
     {offset
       cafxs: // global
           if (R1 & 7 == 1) goto cafxw; else goto cafxx;
       cafxw: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cafxx: // global
           I64[Sp - 8] = block_cafxH_info;
           _safrt::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _safrt::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uafxX; else goto cafxI;
       uafxX: // global
           call _cafxH(R1) args: 0, res: 0, upd: 0;
       cafxI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafxs_info" {
     block_cafxs_info:
         const _cafxs;
         const 2;
         const 4294967326;
         const Safub_srt;
 },
 _cafxH() //  [R1]
         { []
         }
     {offset
       cafxH: // global
           I64[Sp] = block_cafxM_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafxH_info" {
     block_cafxH_info:
         const _cafxH;
         const 3;
         const 4294967326;
         const Safub_srt;
 },
 _cafxM() //  [R1]
         { []
         }
     {offset
       cafxM: // global
           I64[Sp + 16] = block_cafxO_info;
           R2 = P64[Sp + 8];
           _safry::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _safry::P64;
           Sp = Sp + 16;
           call go_safro_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafxM_info" {
     block_cafxM_info:
         const _cafxM;
         const 131;
         const 4294967326;
         const Safub_srt;
 },
 _cafxO() //  [R1]
         { []
         }
     {offset
       cafxO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cafxW; else goto cafxV;
       cafxW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cafxV: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cafxO_info" {
     block_cafxO_info:
         const _cafxO;
         const 1;
         const 30;
 },
 GHC.Environment.getFullArgs1_entry() //  []
         { []
         }
     {offset
       cafxZ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cafy0; else goto cafy1;
       cafy0: // global
           R1 = GHC.Environment.getFullArgs1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cafy1: // global
           I64[Sp - 8] = block_cafwH_info;
           R2 = 4;
           R1 = 4;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Environment.getFullArgs1_info" {
     GHC.Environment.getFullArgs1_info:
         const GHC.Environment.getFullArgs1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const Safub_srt;
 },
 _cafwH() //  [R1]
         { []
         }
     {offset
       cafwH: // global
           I64[Sp - 8] = block_cafwJ_info;
           R2 = 8;
           _safqX::P64 = R1;
           R1 = 8;
           P64[Sp] = _safqX::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafwH_info" {
     block_cafwH_info:
         const _cafwH;
         const 0;
         const 12884901918;
         const Safub_srt;
 },
 _cafwJ() //  [R1]
         { []
         }
     {offset
       cafwJ: // global
           _safr4::I64 = P64[Sp + 8] + 16;
           _safr5::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] getFullProgArgv(_safr4::I64, _safr5::I64);
           _safrb::I64 = %MO_SS_Conv_W32_W64(I32[_safr4::I64]);
           _safre::I64 = I64[_safr5::I64];
           I64[Sp - 24] = block_cafwU_info;
           _safr3::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 16] = _safrb::I64;
           I64[Sp - 8] = _safre::I64;
           P64[Sp] = _safr3::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uafyD; else goto cafwV;
       uafyD: // global
           call _cafwU(R1) args: 0, res: 0, upd: 0;
       cafwV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafwJ_info" {
     block_cafwJ_info:
         const _cafwJ;
         const 1;
         const 12884901918;
         const Safub_srt;
 },
 _cafwU() //  [R1]
         { []
         }
     {offset
       cafwU: // global
           I64[Sp] = block_cafwZ_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafwU_info" {
     block_cafwU_info:
         const _cafwU;
         const 196;
         const 4294967326;
         const Safub_srt;
 },
 _cafwZ() //  [R1]
         { []
         }
     {offset
       cafwZ: // global
           _safrb::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_safrb::I64, 0)) goto cafyp; else goto cafyq;
       cafyp: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = _safrb::I64 - 1;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _cafxd() args: 0, res: 0, upd: 0;
       cafyq: // global
           P64[Sp + 8] = R1;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call _cafxl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafwZ_info" {
     block_cafwZ_info:
         const _cafwZ;
         const 196;
         const 4294967326;
         const Safub_srt;
 },
 _cafxd() //  []
         { []
         }
     {offset
       cafxd: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cafyk; else goto cafyj;
       cafyk: // global
           HpAlloc = 40;
           I64[Sp] = block_cafxd_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cafyj: // global
           _safrT::P64 = P64[Sp + 8];
           _safrV::I64 = I64[Sp + 16];
           if (_safrV::I64 != 0) goto cafym; else goto cafyn;
       cafym: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 32] + (_safrV::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _safrT::P64;
           I64[Sp + 16] = _safrV::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           call _cafxd() args: 0, res: 0, upd: 0;
       cafyn: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _safrT::P64;
           Sp = Sp + 16;
           call _cafyd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafxd_info" {
     block_cafxd_info:
         const _cafxd;
         const 646;
         const 4294967326;
         const Safub_srt;
 },
 _cafyd() //  []
         { []
         }
     {offset
       cafyd: // global
           Hp = Hp + 40;
           _safrK::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cafyh; else goto cafyg;
       cafyh: // global
           HpAlloc = 40;
           I64[Sp] = block_cafyc_info;
           R1 = _safrK::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cafyg: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 16]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _safrK::P64;
           P64[Sp + 16] = Hp - 14;
           Sp = Sp + 8;
           call _cafxl() args: 0, res: 0, upd: 0;
     }
 },
 _cafyc() //  [R1]
         { []
         }
     {offset
       cafyc: // global
           P64[Sp] = R1;
           call _cafyd() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafyc_info" {
     block_cafyc_info:
         const _cafyc;
         const 132;
         const 4294967326;
         const Safub_srt;
 },
 _cafxl() //  []
         { []
         }
     {offset
       cafxl: // global
           Hp = Hp + 16;
           _safrn::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cafy9; else goto cafy8;
       cafy9: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_cafxk_info;
           R1 = _safrn::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cafy8: // global
           I64[Hp - 8] = go_safro_info;
           P64[Hp] = P64[Sp];
           I64[Sp + 8] = block_cafy6_info;
           R2 = _safrn::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call go_safro_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cafxk() //  [R1]
         { []
         }
     {offset
       cafxk: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cafxl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafxk_info" {
     block_cafxk_info:
         const _cafxk;
         const 132;
         const 4294967326;
         const Safub_srt;
 },
 _cafy6() //  [R1]
         { []
         }
     {offset
       cafy6: // global
           _safqX::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_safqX::P64);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cafy6_info" {
     block_cafy6_info:
         const _cafy6;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.79789293 UTC

[section ""data" . GHC.Environment.getFullArgs_closure" {
     GHC.Environment.getFullArgs_closure:
         const GHC.Environment.getFullArgs_info;
         const 0;
 },
 GHC.Environment.getFullArgs_entry() //  []
         { []
         }
     {offset
       cafzY: // global
           call GHC.Environment.getFullArgs1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Environment.getFullArgs_info" {
     GHC.Environment.getFullArgs_info:
         const GHC.Environment.getFullArgs_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Safub_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.800819045 UTC

[section ""relreadonly" . Safub_srt" {
     Safub_srt:
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.Environment.getFullArgs1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.906000331 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:16.907057721 UTC

[section ""cstring" . GHC.Environment.$trModule4_bytes" {
     GHC.Environment.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.908748462 UTC

[section ""data" . GHC.Environment.$trModule3_closure" {
     GHC.Environment.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Environment.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.910374376 UTC

[section ""cstring" . GHC.Environment.$trModule2_bytes" {
     GHC.Environment.$trModule2_bytes:
         I8[] [71,72,67,46,69,110,118,105,114,111,110,109,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.911970076 UTC

[section ""data" . GHC.Environment.$trModule1_closure" {
     GHC.Environment.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Environment.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.913649305 UTC

[section ""data" . GHC.Environment.$trModule_closure" {
     GHC.Environment.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Environment.$trModule3_closure+1;
         const GHC.Environment.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.920827546 UTC

[section ""data" . GHC.Environment.getFullArgs1_closure" {
     GHC.Environment.getFullArgs1_closure:
         const GHC.Environment.getFullArgs1_info;
         const 0;
 },
 go_safAD_entry() //  [R1, R2]
         { []
         }
     {offset
       cafCj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cafCk; else goto cafCl;
       cafCk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cafCl: // global
           I64[Sp - 24] = block_cafCc_info;
           _safAD::P64 = R1;
           _safAz::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _safAz::P64;
           P64[Sp - 8] = _safAD::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uafCI; else goto cafCd;
       uafCI: // global
           call _cafCc(R1) args: 0, res: 0, upd: 0;
       cafCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go_safAD_info" {
     go_safAD_info:
         const go_safAD_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SafDv_srt;
 },
 _cafCc() //  [R1]
         { []
         }
     {offset
       cafCc: // global
           if (R1 & 7 == 1) goto cafCg; else goto cafCh;
       cafCg: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cafCh: // global
           I64[Sp - 8] = block_cafCr_info;
           _safAI::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _safAI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uafCH; else goto cafCs;
       uafCH: // global
           call _cafCr(R1) args: 0, res: 0, upd: 0;
       cafCs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafCc_info" {
     block_cafCc_info:
         const _cafCc;
         const 2;
         const 4294967326;
         const SafDv_srt;
 },
 _cafCr() //  [R1]
         { []
         }
     {offset
       cafCr: // global
           I64[Sp] = block_cafCw_info;
           R3 = I64[R1 + 7];
           R2 = P64[Sp + 16];
           call GHC.Foreign.$wpeekCString_entry(R3,
                                                R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafCr_info" {
     block_cafCr_info:
         const _cafCr;
         const 3;
         const 4294967326;
         const SafDv_srt;
 },
 _cafCw() //  [R1]
         { []
         }
     {offset
       cafCw: // global
           I64[Sp + 16] = block_cafCy_info;
           R2 = P64[Sp + 8];
           _safAN::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _safAN::P64;
           Sp = Sp + 16;
           call go_safAD_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafCw_info" {
     block_cafCw_info:
         const _cafCw;
         const 131;
         const 4294967326;
         const SafDv_srt;
 },
 _cafCy() //  [R1]
         { []
         }
     {offset
       cafCy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cafCG; else goto cafCF;
       cafCG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cafCF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cafCy_info" {
     block_cafCy_info:
         const _cafCy;
         const 1;
         const 30;
 },
 GHC.Environment.getFullArgs1_entry() //  []
         { []
         }
     {offset
       cafCJ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cafCK; else goto cafCL;
       cafCK: // global
           R1 = GHC.Environment.getFullArgs1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cafCL: // global
           I64[Sp - 8] = block_cafBr_info;
           R2 = 4;
           R1 = 4;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Environment.getFullArgs1_info" {
     GHC.Environment.getFullArgs1_info:
         const GHC.Environment.getFullArgs1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SafDv_srt;
 },
 _cafBr() //  [R1]
         { []
         }
     {offset
       cafBr: // global
           I64[Sp - 8] = block_cafBt_info;
           R2 = 8;
           _safAc::P64 = R1;
           R1 = 8;
           P64[Sp] = _safAc::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafBr_info" {
     block_cafBr_info:
         const _cafBr;
         const 0;
         const 12884901918;
         const SafDv_srt;
 },
 _cafBt() //  [R1]
         { []
         }
     {offset
       cafBt: // global
           _safAj::I64 = P64[Sp + 8] + 16;
           _safAk::I64 = R1 + 16;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] getFullProgArgv(_safAj::I64, _safAk::I64);
           _safAq::I64 = %MO_SS_Conv_W32_W64(I32[_safAj::I64]);
           _safAt::I64 = I64[_safAk::I64];
           I64[Sp - 24] = block_cafBE_info;
           _safAi::P64 = R1;
           R1 = GHC.IO.Encoding.getFileSystemEncoding1_closure;
           I64[Sp - 16] = _safAq::I64;
           I64[Sp - 8] = _safAt::I64;
           P64[Sp] = _safAi::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uafDn; else goto cafBF;
       uafDn: // global
           call _cafBE(R1) args: 0, res: 0, upd: 0;
       cafBF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafBt_info" {
     block_cafBt_info:
         const _cafBt;
         const 1;
         const 12884901918;
         const SafDv_srt;
 },
 _cafBE() //  [R1]
         { []
         }
     {offset
       cafBE: // global
           I64[Sp] = block_cafBJ_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cafBE_info" {
     block_cafBE_info:
         const _cafBE;
         const 196;
         const 4294967326;
         const SafDv_srt;
 },
 _cafBJ() //  [R1]
         { []
         }
     {offset
       cafBJ: // global
           _safAq::I64 = I64[Sp + 8];
           if (%MO_S_Gt_W64(_safAq::I64, 0)) goto cafD9; else goto cafDa;
       cafD9: // global
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = _safAq::I64 - 1;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _cafBX() args: 0, res: 0, upd: 0;
       cafDa: // global
           P64[Sp + 8] = R1;
           P64[Sp + 16] = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call _cafC5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafBJ_info" {
     block_cafBJ_info:
         const _cafBJ;
         const 196;
         const 4294967326;
         const SafDv_srt;
 },
 _cafBX() //  []
         { []
         }
     {offset
       cafBX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cafD4; else goto cafD3;
       cafD4: // global
           HpAlloc = 40;
           I64[Sp] = block_cafBX_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cafD3: // global
           _safB8::P64 = P64[Sp + 8];
           _safBa::I64 = I64[Sp + 16];
           if (_safBa::I64 != 0) goto cafD6; else goto cafD7;
       cafD6: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 32] + (_safBa::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _safB8::P64;
           I64[Sp + 16] = _safBa::I64 - 1;
           P64[Sp + 8] = Hp - 14;
           call _cafBX() args: 0, res: 0, upd: 0;
       cafD7: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _safB8::P64;
           Sp = Sp + 16;
           call _cafCX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafBX_info" {
     block_cafBX_info:
         const _cafBX;
         const 646;
         const 4294967326;
         const SafDv_srt;
 },
 _cafCX() //  []
         { []
         }
     {offset
       cafCX: // global
           Hp = Hp + 40;
           _safAZ::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cafD1; else goto cafD0;
       cafD1: // global
           HpAlloc = 40;
           I64[Sp] = block_cafCW_info;
           R1 = _safAZ::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cafD0: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 16]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _safAZ::P64;
           P64[Sp + 16] = Hp - 14;
           Sp = Sp + 8;
           call _cafC5() args: 0, res: 0, upd: 0;
     }
 },
 _cafCW() //  [R1]
         { []
         }
     {offset
       cafCW: // global
           P64[Sp] = R1;
           call _cafCX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafCW_info" {
     block_cafCW_info:
         const _cafCW;
         const 132;
         const 4294967326;
         const SafDv_srt;
 },
 _cafC5() //  []
         { []
         }
     {offset
       cafC5: // global
           Hp = Hp + 16;
           _safAC::P64 = P64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cafCT; else goto cafCS;
       cafCT: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_cafC4_info;
           R1 = _safAC::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cafCS: // global
           I64[Hp - 8] = go_safAD_info;
           P64[Hp] = P64[Sp];
           I64[Sp + 8] = block_cafCQ_info;
           R2 = _safAC::P64;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call go_safAD_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cafC4() //  [R1]
         { []
         }
     {offset
       cafC4: // global
           P64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cafC5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cafC4_info" {
     block_cafC4_info:
         const _cafC4;
         const 132;
         const 4294967326;
         const SafDv_srt;
 },
 _cafCQ() //  [R1]
         { []
         }
     {offset
       cafCQ: // global
           _safAc::P64 = P64[Sp + 16];
           call MO_Touch(P64[Sp + 8]);
           call MO_Touch(_safAc::P64);
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cafCQ_info" {
     block_cafCQ_info:
         const _cafCQ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.947839575 UTC

[section ""data" . GHC.Environment.getFullArgs_closure" {
     GHC.Environment.getFullArgs_closure:
         const GHC.Environment.getFullArgs_info;
         const 0;
 },
 GHC.Environment.getFullArgs_entry() //  []
         { []
         }
     {offset
       cafF6: // global
           call GHC.Environment.getFullArgs1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Environment.getFullArgs_info" {
     GHC.Environment.getFullArgs_info:
         const GHC.Environment.getFullArgs_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SafDv_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:16.95081179 UTC

[section ""relreadonly" . SafDv_srt" {
     SafDv_srt:
         const GHC.Foreign.$wpeekCString_closure;
         const GHC.IO.Encoding.getFileSystemEncoding1_closure;
         const GHC.Environment.getFullArgs1_closure;
 }]

