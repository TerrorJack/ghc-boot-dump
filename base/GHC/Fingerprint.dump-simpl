
==================== Tidy Core ====================
2018-03-16 16:06:33.20106026 UTC

Result size of Tidy Core
  = {terms: 531, types: 745, coercions: 30, joins: 7/18}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Fingerprint.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Fingerprint.$trModule3
  = GHC.Types.TrNameS GHC.Fingerprint.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Fingerprint.$trModule2 = "GHC.Fingerprint"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Fingerprint.$trModule1
  = GHC.Types.TrNameS GHC.Fingerprint.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Fingerprint.$trModule
  = GHC.Types.Module
      GHC.Fingerprint.$trModule3 GHC.Fingerprint.$trModule1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$tcMD5Context2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Fingerprint.$tcMD5Context2 = "MD5Context"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$tcMD5Context1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Fingerprint.$tcMD5Context1
  = GHC.Types.TrNameS GHC.Fingerprint.$tcMD5Context2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Fingerprint.$tcMD5Context :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Fingerprint.$tcMD5Context
  = GHC.Types.TyCon
      2786815183060026909##
      11852912954819316049##
      GHC.Fingerprint.$trModule
      GHC.Fingerprint.$tcMD5Context1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
fingerprint0 :: Fingerprint
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
fingerprint0 = GHC.Fingerprint.Type.Fingerprint 0## 0##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rbDDO :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_rbDDO = "GHC.Fingerprint.getFileHash: only read "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rbDDP :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl1_rbDDP = " bytes"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_rbDDQ :: [Char]
[GblId]
lvl2_rbDDQ = unpackCString# lvl1_rbDDP

-- RHS size: {terms: 15, types: 16, coercions: 0, joins: 0/0}
GHC.Fingerprint.$wlvl [InlPrag=NOUSERINLINE[0]] :: Int# -> IO ()
[GblId, Arity=1, Str=<B,U>x, Unf=OtherCon []]
GHC.Fingerprint.$wlvl
  = \ (ww_sbDxB :: Int#) ->
      errorWithoutStackTrace
        @ 'LiftedRep
        @ (IO ())
        (unpackAppendCString#
           lvl_rbDDO
           (case GHC.Show.$wshowSignedInt 0# ww_sbDxB (GHC.Types.[] @ Char) of
            { (# ww5_i7NVe, ww6_i7NVf #) ->
            ++ @ Char (GHC.Types.: @ Char ww5_i7NVe ww6_i7NVf) lvl2_rbDDQ
            }))

-- RHS size: {terms: 146, types: 217, coercions: 5, joins: 3/7}
GHC.Fingerprint.getFileHash2
  :: Handle
     -> State# RealWorld -> (# State# RealWorld, Fingerprint #)
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 507 0}]
GHC.Fingerprint.getFileHash2
  = \ (h_abCYj [OS=OneShot] :: Handle)
      (eta_ibD86 [OS=OneShot] :: State# RealWorld) ->
      case newPinnedByteArray# @ RealWorld 0# eta_ibD86 of
      { (# ipv_ibD8d, ipv1_ibD8e #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv1_ibD8e ipv_ibD8d of
      { (# ipv2_ibD8i, ipv3_ibD8j #) ->
      let {
        pctxt_sbDjw [Dmd=<S,U>] :: Addr#
        [LclId]
        pctxt_sbDjw = byteArrayContents# ipv3_ibD8j } in
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> State# RealWorld -> (# State# RealWorld #)}_dbD6e
             pctxt_sbDjw ipv2_ibD8i
      of
      { (# ds_dbD6c #) ->
      case newPinnedByteArray# @ RealWorld 4096# ds_dbD6c of
      { (# ipv4_XbD97, ipv5_XbD99 #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv5_XbD99 ipv4_XbD97 of
      { (# ipv6_XbD9h, ipv7_XbD9j #) ->
      let {
        arrPtr_sbDBt :: Addr#
        [LclId]
        arrPtr_sbDBt = byteArrayContents# ipv7_XbD9j } in
      let {
        lvl3_sbDBu [Dmd=<L,U(U)>] :: Ptr Word8
        [LclId, Unf=OtherCon []]
        lvl3_sbDBu = GHC.Ptr.Ptr @ Word8 arrPtr_sbDBt } in
      join {
        $w$j_sbDxG [InlPrag=NOUSERINLINE[0], Dmd=<L,C(U(U,U))>]
          :: State# RealWorld -> (# State# RealWorld, Fingerprint #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>]
        $w$j_sbDxG (w_sbDxE [OS=OneShot] :: State# RealWorld)
          = case touch# @ 'UnliftedRep @ ByteArray# ipv7_XbD9j w_sbDxE
            of s4_ibD8q
            { __DEFAULT ->
            case newPinnedByteArray# @ RealWorld 16# s4_ibD8q of
            { (# ipv8_XbDax, ipv9_XbD9f #) ->
            case unsafeFreezeByteArray# @ RealWorld ipv9_XbD9f ipv8_XbDax of
            { (# ipv10_XbD9n, ipv11_XbD9p #) ->
            let {
              pdigest_sbDjA [Dmd=<S,U>] :: Addr#
              [LclId]
              pdigest_sbDjA = byteArrayContents# ipv11_XbD9p } in
            case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr# -> State# RealWorld -> (# State# RealWorld #)}_dbD5U
                   pdigest_sbDjA pctxt_sbDjw ipv10_XbD9n
            of
            { (# ds8_dbD5S #) ->
            case Foreign.Storable.$wpeekW64
                   (GHC.Ptr.Ptr @ Word8 pdigest_sbDjA) 8# 0## ds8_dbD5S
            of
            { (# ipv12_ibDdU, ipv13_ibDdV #) ->
            case Foreign.Storable.$wpeekW64
                   (GHC.Ptr.Ptr @ Word8 (plusAddr# pdigest_sbDjA 8#))
                   8#
                   0##
                   ipv12_ibDdU
            of
            { (# ipv14_ibDe3, ipv15_ibDe4 #) ->
            case touch# @ 'UnliftedRep @ ByteArray# ipv11_XbD9p ipv14_ibDe3
            of s1_XbDad
            { __DEFAULT ->
            case touch# @ 'UnliftedRep @ ByteArray# ipv3_ibD8j s1_XbDad
            of s2_XbDai
            { __DEFAULT ->
            (# s2_XbDai,
               GHC.Fingerprint.Type.$WFingerprint ipv13_ibDdV ipv15_ibDe4 #)
            }
            }
            }
            }
            }
            }
            }
            } } in
      joinrec {
        loop_sbDjv [Occ=LoopBreaker]
          :: State# RealWorld -> (# State# RealWorld, Fingerprint #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        loop_sbDjv (s_i7IAv :: State# RealWorld)
          = case GHC.IO.Handle.Text.$whGetBuf
                   @ Word8 h_abCYj lvl3_sbDBu 4096# s_i7IAv
            of
            { (# ipv8_i7IAy, ipv9_i7IAz #) ->
            case GHC.IO.Handle.Internals.wantReadableHandle_1
                   @ Bool
                   GHC.IO.Handle.hIsEOF3
                   h_abCYj
                   (GHC.IO.Handle.hIsEOF2
                    `cast` (<GHC.IO.Handle.Types.Handle__>_R
                            ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                            :: (GHC.IO.Handle.Types.Handle__
                                -> State# RealWorld -> (# State# RealWorld, Bool #) :: *)
                               ~R# (GHC.IO.Handle.Types.Handle__ -> IO Bool :: *)))
                   ipv8_i7IAy
            of
            { (# ipv10_X7IBN, ipv11_X7IBP #) ->
            case ipv9_i7IAz of { I# x_aPOG ->
            join {
              $j_sbDjY [Dmd=<S,1*U(U,U)>] :: (# State# RealWorld, Fingerprint #)
              [LclId[JoinId(0)]]
              $j_sbDjY
                = case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr# -> Int# -> State# RealWorld -> (# State# RealWorld #)}_dbD67
                         pctxt_sbDjw arrPtr_sbDBt (narrow32Int# x_aPOG) ipv10_X7IBN
                  of
                  { (# ds8_dbD65 #) ->
                  case ipv11_X7IBP of {
                    False -> jump loop_sbDjv ds8_dbD65;
                    True -> jump $w$j_sbDxG ds8_dbD65
                  }
                  } } in
            case x_aPOG of wild2_X1n {
              __DEFAULT ->
                case ipv11_X7IBP of {
                  False -> case GHC.Fingerprint.$wlvl wild2_X1n of wild4_00 { };
                  True -> jump $j_sbDjY
                };
              4096# -> jump $j_sbDjY
            }
            }
            }
            }; } in
      jump loop_sbDjv ipv6_XbD9h
      }
      }
      }
      }
      }

-- RHS size: {terms: 7, types: 4, coercions: 5, joins: 0/0}
GHC.Fingerprint.getFileHash1
  :: FilePath
     -> State# RealWorld -> (# State# RealWorld, Fingerprint #)
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (path_abCYa [Occ=Once] :: FilePath)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 System.IO.withBinaryFile1
                   @ Fingerprint
                   path_abCYa
                   GHC.IO.IOMode.ReadMode
                   (GHC.Fingerprint.getFileHash2
                    `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Fingerprint>_R)
                            :: (Handle
                                -> State# RealWorld -> (# State# RealWorld, Fingerprint #) :: *)
                               ~R# (Handle -> IO Fingerprint :: *)))
                   eta_B1}]
GHC.Fingerprint.getFileHash1
  = \ (path_abCYa :: FilePath) (eta_B1 :: State# RealWorld) ->
      System.IO.withBinaryFile1
        @ Fingerprint
        path_abCYa
        GHC.IO.IOMode.ReadMode
        (GHC.Fingerprint.getFileHash2
         `cast` (<Handle>_R ->_R Sym (GHC.Types.N:IO[0] <Fingerprint>_R)
                 :: (Handle
                     -> State# RealWorld -> (# State# RealWorld, Fingerprint #) :: *)
                    ~R# (Handle -> IO Fingerprint :: *)))
        eta_B1

-- RHS size: {terms: 1, types: 0, coercions: 5, joins: 0/0}
getFileHash :: FilePath -> IO Fingerprint
[GblId,
 Arity=2,
 Str=<L,U><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Fingerprint.getFileHash1
               `cast` (<FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <Fingerprint>_R)
                       :: (FilePath
                           -> State# RealWorld -> (# State# RealWorld, Fingerprint #) :: *)
                          ~R# (FilePath -> IO Fingerprint :: *))}]
getFileHash
  = GHC.Fingerprint.getFileHash1
    `cast` (<FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <Fingerprint>_R)
            :: (FilePath
                -> State# RealWorld -> (# State# RealWorld, Fingerprint #) :: *)
               ~R# (FilePath -> IO Fingerprint :: *))

-- RHS size: {terms: 81, types: 121, coercions: 0, joins: 0/2}
GHC.Fingerprint.$wfingerprintData [InlPrag=NOUSERINLINE[0]]
  :: Addr#
     -> Int# -> State# RealWorld -> (# State# RealWorld, Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0 0] 272 30}]
GHC.Fingerprint.$wfingerprintData
  = \ (ww_sbDxP :: Addr#)
      (ww1_sbDxT :: Int#)
      (w_sbDxM :: State# RealWorld) ->
      case newPinnedByteArray# @ RealWorld 0# w_sbDxM of
      { (# ipv_ibD8d, ipv1_ibD8e #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv1_ibD8e ipv_ibD8d of
      { (# ipv2_ibD8i, ipv3_ibD8j #) ->
      let {
        pctxt_sbDjq [Dmd=<S,U>] :: Addr#
        [LclId]
        pctxt_sbDjq = byteArrayContents# ipv3_ibD8j } in
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> State# RealWorld -> (# State# RealWorld #)}_dbD6e
             pctxt_sbDjq ipv2_ibD8i
      of
      { (# ds_dbD6c #) ->
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr# -> Int# -> State# RealWorld -> (# State# RealWorld #)}_dbD67
             pctxt_sbDjq ww_sbDxP (narrow32Int# ww1_sbDxT) ds_dbD6c
      of
      { (# ds4_dbD65 #) ->
      case newPinnedByteArray# @ RealWorld 16# ds4_dbD65 of
      { (# ipv4_XbD9d, ipv5_XbD9f #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv5_XbD9f ipv4_XbD9d of
      { (# ipv6_XbD9n, ipv7_XbD9p #) ->
      let {
        pdigest_sbDjp [Dmd=<S,U>] :: Addr#
        [LclId]
        pdigest_sbDjp = byteArrayContents# ipv7_XbD9p } in
      case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr# -> State# RealWorld -> (# State# RealWorld #)}_dbD5U
             pdigest_sbDjp pctxt_sbDjq ipv6_XbD9n
      of
      { (# ds7_dbD5S #) ->
      case Foreign.Storable.$wpeekW64
             (GHC.Ptr.Ptr @ Word8 pdigest_sbDjp) 8# 0## ds7_dbD5S
      of
      { (# ipv8_ibDdU, ipv9_ibDdV #) ->
      case Foreign.Storable.$wpeekW64
             (GHC.Ptr.Ptr @ Word8 (plusAddr# pdigest_sbDjp 8#))
             8#
             0##
             ipv8_ibDdU
      of
      { (# ipv10_ibDe3, ipv11_ibDe4 #) ->
      case touch# @ 'UnliftedRep @ ByteArray# ipv7_XbD9p ipv10_ibDe3
      of s4_ibD8q
      { __DEFAULT ->
      case touch# @ 'UnliftedRep @ ByteArray# ipv3_ibD8j s4_ibD8q
      of s1_XbDaf
      { __DEFAULT ->
      (# s1_XbDaf,
         GHC.Fingerprint.Type.$WFingerprint ipv9_ibDdV ipv11_ibDe4 #)
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 13, types: 10, coercions: 0, joins: 0/0}
GHC.Fingerprint.fingerprintData1 [InlPrag=NOUSERINLINE[0]]
  :: Ptr Word8
     -> Int -> State# RealWorld -> (# State# RealWorld, Fingerprint #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_sbDxK [Occ=Once!] :: Ptr Word8)
                 (w1_sbDxL [Occ=Once!] :: Int)
                 (w2_sbDxM [Occ=Once] :: State# RealWorld) ->
                 case w_sbDxK of { GHC.Ptr.Ptr ww1_sbDxP [Occ=Once] ->
                 case w1_sbDxL of { I# ww3_sbDxT [Occ=Once] ->
                 GHC.Fingerprint.$wfingerprintData ww1_sbDxP ww3_sbDxT w2_sbDxM
                 }
                 }}]
GHC.Fingerprint.fingerprintData1
  = \ (w_sbDxK :: Ptr Word8)
      (w1_sbDxL :: Int)
      (w2_sbDxM :: State# RealWorld) ->
      case w_sbDxK of { GHC.Ptr.Ptr ww1_sbDxP ->
      case w1_sbDxL of { I# ww3_sbDxT ->
      GHC.Fingerprint.$wfingerprintData ww1_sbDxP ww3_sbDxT w2_sbDxM
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 8, joins: 0/0}
fingerprintData :: Ptr Word8 -> Int -> IO Fingerprint
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Fingerprint.fingerprintData1
               `cast` (<Ptr Word8>_R
                       ->_R <Int>_R
                       ->_R Sym (GHC.Types.N:IO[0] <Fingerprint>_R)
                       :: (Ptr Word8
                           -> Int
                           -> State# RealWorld
                           -> (# State# RealWorld, Fingerprint #) :: *)
                          ~R# (Ptr Word8 -> Int -> IO Fingerprint :: *))}]
fingerprintData
  = GHC.Fingerprint.fingerprintData1
    `cast` (<Ptr Word8>_R
            ->_R <Int>_R
            ->_R Sym (GHC.Types.N:IO[0] <Fingerprint>_R)
            :: (Ptr Word8
                -> Int
                -> State# RealWorld
                -> (# State# RealWorld, Fingerprint #) :: *)
               ~R# (Ptr Word8 -> Int -> IO Fingerprint :: *))

Rec {
-- RHS size: {terms: 51, types: 23, coercions: 0, joins: 0/1}
GHC.Fingerprint.fingerprintString_go [Occ=LoopBreaker]
  :: [Char] -> [Word8]
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []]
GHC.Fingerprint.fingerprintString_go
  = \ (ds_i7Jck :: [Char]) ->
      case ds_i7Jck of {
        [] -> GHC.Types.[] @ Word8;
        : y_i7Jcp ys_i7Jcq ->
          let {
            w32_sbDjm [Dmd=<L,U(U)>] :: Word32
            [LclId]
            w32_sbDjm
              = case y_i7Jcp of { C# c#_i8rxX ->
                GHC.Word.W32# (narrow32Word# (int2Word# (ord# c#_i8rxX)))
                } } in
          GHC.Types.:
            @ Word8
            (case w32_sbDjm of { GHC.Word.W32# x#_i9hdy ->
             GHC.Word.W8# (narrow8Word# (uncheckedShiftRL# x#_i9hdy 24#))
             })
            (GHC.Types.:
               @ Word8
               (case w32_sbDjm of { GHC.Word.W32# x#_i9hdy ->
                GHC.Word.W8# (narrow8Word# (uncheckedShiftRL# x#_i9hdy 16#))
                })
               (GHC.Types.:
                  @ Word8
                  (case w32_sbDjm of { GHC.Word.W32# x#_i9hdy ->
                   GHC.Word.W8# (narrow8Word# (uncheckedShiftRL# x#_i9hdy 8#))
                   })
                  (GHC.Types.:
                     @ Word8
                     (case w32_sbDjm of { GHC.Word.W32# x#_i7NYx ->
                      GHC.Word.W8# (narrow8Word# x#_i7NYx)
                      })
                     (GHC.Fingerprint.fingerprintString_go ys_i7Jcq))))
      }
end Rec }

-- RHS size: {terms: 74, types: 126, coercions: 0, joins: 2/4}
fingerprintString :: String -> Fingerprint
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 202 0}]
fingerprintString
  = \ (str_abCY3 :: String) ->
      case runRW#
             @ ('TupleRep '['TupleRep '[], 'LiftedRep])
             @ (# State# RealWorld, Fingerprint #)
             (\ (eta1_ibDf6 [OS=OneShot] :: State# RealWorld) ->
                let {
                  vals_sbDjj [Dmd=<S,U>] :: [Word8]
                  [LclId]
                  vals_sbDjj = GHC.Fingerprint.fingerprintString_go str_abCY3 } in
                case GHC.List.$wlenAcc @ Word8 vals_sbDjj 0# of ww2_ibD5e
                { __DEFAULT ->
                case newAlignedPinnedByteArray# @ RealWorld ww2_ibD5e 1# eta1_ibDf6
                of
                { (# ipv_ibDfl, ipv1_ibDfm #) ->
                case unsafeFreezeByteArray# @ RealWorld ipv1_ibDfm ipv_ibDfl of
                { (# ipv2_ibDfq, ipv3_ibDfr #) ->
                let {
                  ptr_sbDjk [Dmd=<S,U>] :: Addr#
                  [LclId]
                  ptr_sbDjk = byteArrayContents# ipv3_ibDfr } in
                join {
                  exit_XD [Dmd=<C(S),C(U)>]
                    :: State# RealWorld -> (# State# RealWorld, Fingerprint #)
                  [LclId[JoinId(1)], Arity=1, Str=<S,U>]
                  exit_XD (eta2_ibDfL [OS=OneShot] :: State# RealWorld)
                    = case GHC.Fingerprint.$wfingerprintData
                             ptr_sbDjk ww2_ibD5e eta2_ibDfL
                      of
                      { (# ipv4_ibDfv, ipv5_ibDfw #) ->
                      case touch# @ 'UnliftedRep @ ByteArray# ipv3_ibDfr ipv4_ibDfv
                      of s4_ibDfy
                      { __DEFAULT ->
                      (# s4_ibDfy, ipv5_ibDfw #)
                      }
                      } } in
                joinrec {
                  go_sbDji [Occ=LoopBreaker]
                    :: [Word8]
                       -> Int# -> State# RealWorld -> (# State# RealWorld, Fingerprint #)
                  [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
                  go_sbDji (ds_ibDfJ :: [Word8])
                           (ds1_ibDfK :: Int#)
                           (eta2_ibDfL :: State# RealWorld)
                    = case ds_ibDfJ of {
                        [] -> jump exit_XD eta2_ibDfL;
                        : val_ibDfQ vals1_ibDfR ->
                          case val_ibDfQ of { GHC.Word.W8# x_i8Sb7 ->
                          case writeWord8OffAddr#
                                 @ RealWorld ptr_sbDjk ds1_ibDfK x_i8Sb7 eta2_ibDfL
                          of s2_i8Sb9
                          { __DEFAULT ->
                          jump go_sbDji vals1_ibDfR (+# ds1_ibDfK 1#) s2_i8Sb9
                          }
                          }
                      }; } in
                jump go_sbDji vals_sbDjj 0# ipv2_ibDfq
                }
                }
                })
      of
      { (# ipv_i8hmF, ipv1_i8hmG #) ->
      ipv1_i8hmG
      }

-- RHS size: {terms: 94, types: 148, coercions: 7, joins: 2/4}
fingerprintFingerprints :: [Fingerprint] -> Fingerprint
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 316 0}]
fingerprintFingerprints
  = \ (fs_abCXW :: [Fingerprint]) ->
      case runRW#
             @ ('TupleRep '['TupleRep '[], 'LiftedRep])
             @ (# State# RealWorld, Fingerprint #)
             (\ (eta1_ibDf6 [OS=OneShot] :: State# RealWorld) ->
                case GHC.List.$wlenAcc @ Fingerprint fs_abCXW 0# of ww2_ibD5e
                { __DEFAULT ->
                case newAlignedPinnedByteArray#
                       @ RealWorld (*# ww2_ibD5e 16#) 8# eta1_ibDf6
                of
                { (# ipv_ibDfl, ipv1_ibDfm #) ->
                case unsafeFreezeByteArray# @ RealWorld ipv1_ibDfm ipv_ibDfl of
                { (# ipv2_ibDfq, ipv3_ibDfr #) ->
                let {
                  ptr_sbDje [Dmd=<S,U>] :: Addr#
                  [LclId]
                  ptr_sbDje = byteArrayContents# ipv3_ibDfr } in
                join {
                  exit_XB [Dmd=<L,C(U)>]
                    :: State# RealWorld -> (# State# RealWorld, Fingerprint #)
                  [LclId[JoinId(1)], Arity=1, Str=<S,U>]
                  exit_XB (eta2_ibDfL [OS=OneShot] :: State# RealWorld)
                    = case GHC.Fingerprint.$wfingerprintData
                             ptr_sbDje (*# ww2_ibD5e 16#) eta2_ibDfL
                      of
                      { (# ipv4_ibDfv, ipv5_ibDfw #) ->
                      case touch# @ 'UnliftedRep @ ByteArray# ipv3_ibDfr ipv4_ibDfv
                      of s4_ibDfy
                      { __DEFAULT ->
                      (# s4_ibDfy, ipv5_ibDfw #)
                      }
                      } } in
                joinrec {
                  go_sbDjd [Occ=LoopBreaker]
                    :: [Fingerprint]
                       -> Int# -> State# RealWorld -> (# State# RealWorld, Fingerprint #)
                  [LclId[JoinId(3)], Arity=3, Str=<S,1*U><L,U><S,U>, Unf=OtherCon []]
                  go_sbDjd (ds_ibDfJ :: [Fingerprint])
                           (ds1_ibDfK :: Int#)
                           (eta2_ibDfL :: State# RealWorld)
                    = case ds_ibDfJ of {
                        [] -> jump exit_XB eta2_ibDfL;
                        : val_ibDfQ vals_ibDfR ->
                          case val_ibDfQ of { Fingerprint ww1_ibDgz ww4_ibDgA ->
                          let {
                            w_sbDtq :: Addr#
                            [LclId]
                            w_sbDtq = plusAddr# ptr_sbDje (*# ds1_ibDfK 16#) } in
                          case Foreign.Storable.$wpokeW64
                                 ((GHC.Ptr.Ptr @ Fingerprint w_sbDtq)
                                  `cast` ((Ptr Univ(phantom phantom <*>_N :: Fingerprint, Word8))_R
                                          :: (Ptr Fingerprint :: *) ~R# (Ptr Word8 :: *)))
                                 8#
                                 (GHC.Word.W64# ww1_ibDgz)
                                 eta2_ibDfL
                          of
                          { (# ipv4_ibDtj, ipv5_ibDtk #) ->
                          case Foreign.Storable.$wpokeW64
                                 (GHC.Ptr.Ptr @ Word8 (plusAddr# w_sbDtq 8#))
                                 8#
                                 (GHC.Word.W64# ww4_ibDgA)
                                 ipv4_ibDtj
                          of
                          { (# ipv6_ibDfV, ipv7_ibDfW #) ->
                          jump go_sbDjd vals_ibDfR (+# ds1_ibDfK 1#) ipv6_ibDfV
                          }
                          }
                          }
                      }; } in
                jump go_sbDjd fs_abCXW 0# ipv2_ibDfq
                }
                }
                })
      of
      { (# ipv_i8hmF, ipv1_i8hmG #) ->
      ipv1_i8hmG
      }


