
==================== Output Cmm ====================
2018-03-16 15:54:40.041703753 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:40.048227495 UTC

[section ""data" . GHC.Err.error_closure" {
     GHC.Err.error_closure:
         const GHC.Err.error_info;
         const 0;
 },
 sat_s2Tl_entry() //  [R1]
         { info_tbl: [(c2TB,
                       label: sat_s2Tl_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2TB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2TC; else goto c2TD;
       c2TC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2TD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.error_entry() //  [R2, R3]
         { info_tbl: [(c2TE,
                       label: GHC.Err.error_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2TE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2TI; else goto c2TH;
       c2TI: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Err.error_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2TH: // global
           I64[Hp - 24] = sat_s2Tl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.04975745 UTC

[section ""data" . lvl_r2T3_closure" {
     lvl_r2T3_closure:
         const GHC.Stack.Types.FreezeCallStack_con_info;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.050792678 UTC

[section ""data" . GHC.Err.errorWithoutStackTrace_closure" {
     GHC.Err.errorWithoutStackTrace_closure:
         const GHC.Err.errorWithoutStackTrace_info;
         const 0;
 },
 sat_s2Tn_entry() //  [R1]
         { info_tbl: [(c2TS,
                       label: sat_s2Tn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2TS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2TT; else goto c2TU;
       c2TT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2TU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r2T3_closure+3;
           R2 = P64[R1 + 16];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.errorWithoutStackTrace_entry() //  [R2]
         { info_tbl: [(c2TV,
                       label: GHC.Err.errorWithoutStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2TV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2TZ; else goto c2TY;
       c2TZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.errorWithoutStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2TY: // global
           I64[Hp - 16] = sat_s2Tn_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.052464891 UTC

[section ""cstring" . lvl1_r2T4_bytes" {
     lvl1_r2T4_bytes:
         I8[] [79,111,112,115,33,32,84,104,101,32,112,114,111,103,114,97,109,32,104,97,115,32,101,110,116,101,114,101,100,32,97,110,32,96,97,98,115,101,110,116,39,32,97,114,103,117,109,101,110,116,33,10]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.053420215 UTC

[section ""data" . lvl2_r2T5_closure" {
     lvl2_r2T5_closure:
         const lvl2_r2T5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r2T5_entry() //  [R1]
         { info_tbl: [(c2U6,
                       label: lvl2_r2T5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2U6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2U7; else goto c2U8;
       c2U7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2U8: // global
           (_c2U3::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2U3::I64 == 0) goto c2U5; else goto c2U4;
       c2U5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2U4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2U3::I64;
           R2 = lvl1_r2T4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.054565542 UTC

[section ""data" . GHC.Err.absentErr_closure" {
     GHC.Err.absentErr_closure:
         const GHC.Err.absentErr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Err.absentErr_entry() //  [R1]
         { info_tbl: [(c2Uf,
                       label: GHC.Err.absentErr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Uf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Ug; else goto c2Uh;
       c2Ug: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Uh: // global
           (_c2Uc::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Uc::I64 == 0) goto c2Ue; else goto c2Ud;
       c2Ue: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Ud: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Uc::I64;
           R2 = lvl2_r2T5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.055482875 UTC

[section ""cstring" . lvl3_r2T6_bytes" {
     lvl3_r2T6_bytes:
         I8[] [80,114,101,108,117,100,101,46,117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.056219768 UTC

[section ""data" . lvl4_r2T7_closure" {
     lvl4_r2T7_closure:
         const lvl4_r2T7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r2T7_entry() //  [R1]
         { info_tbl: [(c2Uo,
                       label: lvl4_r2T7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Uo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Up; else goto c2Uq;
       c2Up: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Uq: // global
           (_c2Ul::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Ul::I64 == 0) goto c2Un; else goto c2Um;
       c2Un: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Um: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Ul::I64;
           R2 = lvl3_r2T6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.057161406 UTC

[section ""cstring" . lvl5_r2T8_bytes" {
     lvl5_r2T8_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.057966754 UTC

[section ""data" . lvl6_r2T9_closure" {
     lvl6_r2T9_closure:
         const lvl6_r2T9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r2T9_entry() //  [R1]
         { info_tbl: [(c2Ux,
                       label: lvl6_r2T9_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ux: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Uy; else goto c2Uz;
       c2Uy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Uz: // global
           (_c2Uu::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Uu::I64 == 0) goto c2Uw; else goto c2Uv;
       c2Uw: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Uv: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Uu::I64;
           R2 = lvl5_r2T8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.058895693 UTC

[section ""cstring" . GHC.Err.$trModule4_bytes" {
     GHC.Err.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.059817561 UTC

[section ""data" . lvl7_r2Ta_closure" {
     lvl7_r2Ta_closure:
         const lvl7_r2Ta_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2Ta_entry() //  [R1]
         { info_tbl: [(c2UG,
                       label: lvl7_r2Ta_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2UG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2UH; else goto c2UI;
       c2UH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2UI: // global
           (_c2UD::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2UD::I64 == 0) goto c2UF; else goto c2UE;
       c2UF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2UE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2UD::I64;
           R2 = GHC.Err.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.061414034 UTC

[section ""cstring" . GHC.Err.$trModule2_bytes" {
     GHC.Err.$trModule2_bytes:
         I8[] [71,72,67,46,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.062271027 UTC

[section ""data" . lvl8_r2Tb_closure" {
     lvl8_r2Tb_closure:
         const lvl8_r2Tb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r2Tb_entry() //  [R1]
         { info_tbl: [(c2UP,
                       label: lvl8_r2Tb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2UP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2UQ; else goto c2UR;
       c2UQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2UR: // global
           (_c2UM::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2UM::I64 == 0) goto c2UO; else goto c2UN;
       c2UO: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2UN: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2UM::I64;
           R2 = GHC.Err.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.063178215 UTC

[section ""cstring" . lvl9_r2Tc_bytes" {
     lvl9_r2Tc_bytes:
         I8[] [46,47,71,72,67,47,69,114,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.063932811 UTC

[section ""data" . lvl10_r2Td_closure" {
     lvl10_r2Td_closure:
         const lvl10_r2Td_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r2Td_entry() //  [R1]
         { info_tbl: [(c2UY,
                       label: lvl10_r2Td_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2UY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2UZ; else goto c2V0;
       c2UZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2V0: // global
           (_c2UV::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2UV::I64 == 0) goto c2UX; else goto c2UW;
       c2UX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2UW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2UV::I64;
           R2 = lvl9_r2Tc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.064877608 UTC

[section ""data" . lvl11_r2Te_closure" {
     lvl11_r2Te_closure:
         const GHC.Types.I#_con_info;
         const 79;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.065625079 UTC

[section ""data" . lvl12_r2Tf_closure" {
     lvl12_r2Tf_closure:
         const GHC.Types.I#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.066184965 UTC

[section ""data" . lvl13_r2Tg_closure" {
     lvl13_r2Tg_closure:
         const GHC.Types.I#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.066768813 UTC

[section ""data" . lvl14_r2Th_closure" {
     lvl14_r2Th_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r2Ta_closure;
         const lvl8_r2Tb_closure;
         const lvl10_r2Td_closure;
         const lvl11_r2Te_closure+1;
         const lvl12_r2Tf_closure+1;
         const lvl11_r2Te_closure+1;
         const lvl13_r2Tg_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.068298001 UTC

[section ""data" . GHC.Err.undefined_closure" {
     GHC.Err.undefined_closure:
         const GHC.Err.undefined_info;
         const 0;
 },
 sat_s2Tr_entry() //  [R1]
         { info_tbl: [(c2Vk,
                       label: sat_s2Tr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Vk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2Vl; else goto c2Vm;
       c2Vl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Vm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2Vd_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2Vw; else goto c2Ve;
       u2Vw: // global
           call _c2Vd(R1) args: 0, res: 0, upd: 0;
       c2Ve: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c2Vd() //  [R1]
         { info_tbl: [(c2Vd,
                       label: block_c2Vd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Vd: // global
           if (R1 & 7 == 3) goto c2Vi; else goto c2Vh;
       c2Vi: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c2Vh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2Vs; else goto c2Vr;
       c2Vs: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2Vr: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = lvl6_r2T9_closure;
           P64[Hp - 8] = lvl14_r2Th_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2Ts_entry() //  [R1]
         { info_tbl: [(c2Vx,
                       label: sat_s2Ts_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Vx: // global
           _s2Ts::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2Vy; else goto c2Vz;
       c2Vz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2VB; else goto c2VA;
       c2VB: // global
           HpAlloc = 24;
           goto c2Vy;
       c2Vy: // global
           R1 = _s2Ts::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2VA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Ts::P64;
           _s2To::P64 = P64[_s2Ts::P64 + 16];
           I64[Hp - 16] = sat_s2Tr_info;
           P64[Hp] = _s2To::P64;
           R3 = Hp - 16;
           R2 = lvl4_r2T7_closure;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.undefined_entry() //  [R2]
         { info_tbl: [(c2VC,
                       label: GHC.Err.undefined_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2VC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2VG; else goto c2VF;
       c2VG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.undefined_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2VF: // global
           I64[Hp - 16] = sat_s2Ts_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.070916873 UTC

[section ""data" . GHC.Err.$trModule3_closure" {
     GHC.Err.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.071477334 UTC

[section ""data" . GHC.Err.$trModule1_closure" {
     GHC.Err.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.072050717 UTC

[section ""data" . GHC.Err.$trModule_closure" {
     GHC.Err.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Err.$trModule3_closure+1;
         const GHC.Err.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.072630058 UTC

[section ""relreadonly" . S2TJ_srt" {
     S2TJ_srt:
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Err.error_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl2_r2T5_closure;
         const lvl6_r2T9_closure;
         const lvl14_r2Th_closure;
         const lvl4_r2T7_closure;
         const GHC.Err.undefined_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.073235394 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:40.074316659 UTC

[section ""data" . GHC.Err.error_closure" {
     GHC.Err.error_closure:
         const GHC.Err.error_info;
         const 0;
 },
 sat_s2Tl_entry() //  [R1]
         { info_tbl: [(c2VP,
                       label: sat_s2Tl_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2VP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2VQ; else goto c2VR;
       c2VQ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2VR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.error_entry() //  [R2, R3]
         { info_tbl: [(c2VS,
                       label: GHC.Err.error_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2VS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2VW; else goto c2VV;
       c2VW: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Err.error_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2VV: // global
           I64[Hp - 24] = sat_s2Tl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.075558802 UTC

[section ""data" . lvl_r2T3_closure" {
     lvl_r2T3_closure:
         const GHC.Stack.Types.FreezeCallStack_con_info;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.076493095 UTC

[section ""data" . GHC.Err.errorWithoutStackTrace_closure" {
     GHC.Err.errorWithoutStackTrace_closure:
         const GHC.Err.errorWithoutStackTrace_info;
         const 0;
 },
 sat_s2Tn_entry() //  [R1]
         { info_tbl: [(c2W5,
                       label: sat_s2Tn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2W5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2W6; else goto c2W7;
       c2W6: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2W7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r2T3_closure+3;
           R2 = P64[R1 + 16];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.errorWithoutStackTrace_entry() //  [R2]
         { info_tbl: [(c2W8,
                       label: GHC.Err.errorWithoutStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2W8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2Wc; else goto c2Wb;
       c2Wc: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.errorWithoutStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Wb: // global
           I64[Hp - 16] = sat_s2Tn_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.078168269 UTC

[section ""cstring" . lvl1_r2T4_bytes" {
     lvl1_r2T4_bytes:
         I8[] [79,111,112,115,33,32,84,104,101,32,112,114,111,103,114,97,109,32,104,97,115,32,101,110,116,101,114,101,100,32,97,110,32,96,97,98,115,101,110,116,39,32,97,114,103,117,109,101,110,116,33,10]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.078934938 UTC

[section ""data" . lvl2_r2T5_closure" {
     lvl2_r2T5_closure:
         const lvl2_r2T5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r2T5_entry() //  [R1]
         { info_tbl: [(c2Wj,
                       label: lvl2_r2T5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Wj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Wk; else goto c2Wl;
       c2Wk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Wl: // global
           (_c2Wg::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Wg::I64 == 0) goto c2Wi; else goto c2Wh;
       c2Wi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Wh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Wg::I64;
           R2 = lvl1_r2T4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.08000658 UTC

[section ""data" . GHC.Err.absentErr_closure" {
     GHC.Err.absentErr_closure:
         const GHC.Err.absentErr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Err.absentErr_entry() //  [R1]
         { info_tbl: [(c2Ws,
                       label: GHC.Err.absentErr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Ws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Wt; else goto c2Wu;
       c2Wt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Wu: // global
           (_c2Wp::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Wp::I64 == 0) goto c2Wr; else goto c2Wq;
       c2Wr: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Wq: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Wp::I64;
           R2 = lvl2_r2T5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.080886718 UTC

[section ""cstring" . lvl3_r2T6_bytes" {
     lvl3_r2T6_bytes:
         I8[] [80,114,101,108,117,100,101,46,117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.081659271 UTC

[section ""data" . lvl4_r2T7_closure" {
     lvl4_r2T7_closure:
         const lvl4_r2T7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r2T7_entry() //  [R1]
         { info_tbl: [(c2WB,
                       label: lvl4_r2T7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2WB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2WC; else goto c2WD;
       c2WC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2WD: // global
           (_c2Wy::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Wy::I64 == 0) goto c2WA; else goto c2Wz;
       c2WA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Wz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Wy::I64;
           R2 = lvl3_r2T6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.082582445 UTC

[section ""cstring" . lvl5_r2T8_bytes" {
     lvl5_r2T8_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.083307587 UTC

[section ""data" . lvl6_r2T9_closure" {
     lvl6_r2T9_closure:
         const lvl6_r2T9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r2T9_entry() //  [R1]
         { info_tbl: [(c2WK,
                       label: lvl6_r2T9_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2WK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2WL; else goto c2WM;
       c2WL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2WM: // global
           (_c2WH::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2WH::I64 == 0) goto c2WJ; else goto c2WI;
       c2WJ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2WI: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2WH::I64;
           R2 = lvl5_r2T8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.084229912 UTC

[section ""cstring" . GHC.Err.$trModule4_bytes" {
     GHC.Err.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.084966044 UTC

[section ""data" . lvl7_r2Ta_closure" {
     lvl7_r2Ta_closure:
         const lvl7_r2Ta_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2Ta_entry() //  [R1]
         { info_tbl: [(c2WT,
                       label: lvl7_r2Ta_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2WT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2WU; else goto c2WV;
       c2WU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2WV: // global
           (_c2WQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2WQ::I64 == 0) goto c2WS; else goto c2WR;
       c2WS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2WR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2WQ::I64;
           R2 = GHC.Err.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.086524561 UTC

[section ""cstring" . GHC.Err.$trModule2_bytes" {
     GHC.Err.$trModule2_bytes:
         I8[] [71,72,67,46,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.087271431 UTC

[section ""data" . lvl8_r2Tb_closure" {
     lvl8_r2Tb_closure:
         const lvl8_r2Tb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r2Tb_entry() //  [R1]
         { info_tbl: [(c2X2,
                       label: lvl8_r2Tb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2X2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2X3; else goto c2X4;
       c2X3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2X4: // global
           (_c2WZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2WZ::I64 == 0) goto c2X1; else goto c2X0;
       c2X1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2X0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2WZ::I64;
           R2 = GHC.Err.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.088203543 UTC

[section ""cstring" . lvl9_r2Tc_bytes" {
     lvl9_r2Tc_bytes:
         I8[] [46,47,71,72,67,47,69,114,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.088922934 UTC

[section ""data" . lvl10_r2Td_closure" {
     lvl10_r2Td_closure:
         const lvl10_r2Td_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r2Td_entry() //  [R1]
         { info_tbl: [(c2Xb,
                       label: lvl10_r2Td_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Xb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Xc; else goto c2Xd;
       c2Xc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Xd: // global
           (_c2X8::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2X8::I64 == 0) goto c2Xa; else goto c2X9;
       c2Xa: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2X9: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2X8::I64;
           R2 = lvl9_r2Tc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.08987481 UTC

[section ""data" . lvl11_r2Te_closure" {
     lvl11_r2Te_closure:
         const GHC.Types.I#_con_info;
         const 79;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.090427867 UTC

[section ""data" . lvl12_r2Tf_closure" {
     lvl12_r2Tf_closure:
         const GHC.Types.I#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.09100303 UTC

[section ""data" . lvl13_r2Tg_closure" {
     lvl13_r2Tg_closure:
         const GHC.Types.I#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.091569305 UTC

[section ""data" . lvl14_r2Th_closure" {
     lvl14_r2Th_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r2Ta_closure;
         const lvl8_r2Tb_closure;
         const lvl10_r2Td_closure;
         const lvl11_r2Te_closure+1;
         const lvl12_r2Tf_closure+1;
         const lvl11_r2Te_closure+1;
         const lvl13_r2Tg_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.092957911 UTC

[section ""data" . GHC.Err.undefined_closure" {
     GHC.Err.undefined_closure:
         const GHC.Err.undefined_info;
         const 0;
 },
 sat_s2Tr_entry() //  [R1]
         { info_tbl: [(c2Xx,
                       label: sat_s2Tr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Xx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c2Xy; else goto c2Xz;
       c2Xy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Xz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c2Xq_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u2XJ; else goto c2Xr;
       u2XJ: // global
           call _c2Xq(R1) args: 0, res: 0, upd: 0;
       c2Xr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c2Xq() //  [R1]
         { info_tbl: [(c2Xq,
                       label: block_c2Xq_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Xq: // global
           if (R1 & 7 == 3) goto c2Xv; else goto c2Xu;
       c2Xv: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c2Xu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2XF; else goto c2XE;
       c2XF: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c2XE: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = lvl6_r2T9_closure;
           P64[Hp - 8] = lvl14_r2Th_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2Ts_entry() //  [R1]
         { info_tbl: [(c2XK,
                       label: sat_s2Ts_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2XK: // global
           _s2Ts::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c2XL; else goto c2XM;
       c2XM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2XO; else goto c2XN;
       c2XO: // global
           HpAlloc = 24;
           goto c2XL;
       c2XL: // global
           R1 = _s2Ts::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2XN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Ts::P64;
           _s2To::P64 = P64[_s2Ts::P64 + 16];
           I64[Hp - 16] = sat_s2Tr_info;
           P64[Hp] = _s2To::P64;
           R3 = Hp - 16;
           R2 = lvl4_r2T7_closure;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.undefined_entry() //  [R2]
         { info_tbl: [(c2XP,
                       label: GHC.Err.undefined_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2XP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2XT; else goto c2XS;
       c2XT: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.undefined_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2XS: // global
           I64[Hp - 16] = sat_s2Ts_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.095476152 UTC

[section ""data" . GHC.Err.$trModule3_closure" {
     GHC.Err.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.096109248 UTC

[section ""data" . GHC.Err.$trModule1_closure" {
     GHC.Err.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.09665344 UTC

[section ""data" . GHC.Err.$trModule_closure" {
     GHC.Err.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Err.$trModule3_closure+1;
         const GHC.Err.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.09719407 UTC

[section ""relreadonly" . S2TJ_srt" {
     S2TJ_srt:
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Err.error_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl2_r2T5_closure;
         const lvl6_r2T9_closure;
         const lvl14_r2Th_closure;
         const lvl4_r2T7_closure;
         const GHC.Err.undefined_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.098121078 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:40.099670044 UTC

[section ""data" . GHC.Err.error_closure" {
     GHC.Err.error_closure:
         const GHC.Err.error_info;
         const 0;
 },
 sat_s2Tl_entry() //  [R1]
         { info_tbl: [(c2Y2,
                       label: sat_s2Tl_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Y2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Y3; else goto c2Y4;
       c2Y3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Y4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.error_entry() //  [R2, R3]
         { info_tbl: [(c2Y5,
                       label: GHC.Err.error_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Y5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c2Y9; else goto c2Y8;
       c2Y9: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Err.error_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c2Y8: // global
           I64[Hp - 24] = sat_s2Tl_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.106470432 UTC

[section ""data" . lvl_r2T3_closure" {
     lvl_r2T3_closure:
         const GHC.Stack.Types.FreezeCallStack_con_info;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.108774587 UTC

[section ""data" . GHC.Err.errorWithoutStackTrace_closure" {
     GHC.Err.errorWithoutStackTrace_closure:
         const GHC.Err.errorWithoutStackTrace_info;
         const 0;
 },
 sat_s2Tn_entry() //  [R1]
         { info_tbl: [(c2Yr,
                       label: sat_s2Tn_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Yr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Ys; else goto c2Yt;
       c2Ys: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Yt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r2T3_closure+3;
           R2 = P64[R1 + 16];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.errorWithoutStackTrace_entry() //  [R2]
         { info_tbl: [(c2Yu,
                       label: GHC.Err.errorWithoutStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Yu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c2Yy; else goto c2Yx;
       c2Yy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.errorWithoutStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c2Yx: // global
           I64[Hp - 16] = sat_s2Tn_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.115713597 UTC

[section ""cstring" . lvl1_r2T4_bytes" {
     lvl1_r2T4_bytes:
         I8[] [79,111,112,115,33,32,84,104,101,32,112,114,111,103,114,97,109,32,104,97,115,32,101,110,116,101,114,101,100,32,97,110,32,96,97,98,115,101,110,116,39,32,97,114,103,117,109,101,110,116,33,10]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.117949935 UTC

[section ""data" . lvl2_r2T5_closure" {
     lvl2_r2T5_closure:
         const lvl2_r2T5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r2T5_entry() //  [R1]
         { info_tbl: [(c2YO,
                       label: lvl2_r2T5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2YO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2YP; else goto c2YQ;
       c2YP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2YQ: // global
           (_c2YL::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2YL::I64 == 0) goto c2YN; else goto c2YM;
       c2YN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2YM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2YL::I64;
           R2 = lvl1_r2T4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.122983908 UTC

[section ""data" . GHC.Err.absentErr_closure" {
     GHC.Err.absentErr_closure:
         const GHC.Err.absentErr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Err.absentErr_entry() //  [R1]
         { info_tbl: [(c2Z4,
                       label: GHC.Err.absentErr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Z4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Z5; else goto c2Z6;
       c2Z5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Z6: // global
           (_c2Z1::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Z1::I64 == 0) goto c2Z3; else goto c2Z2;
       c2Z3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Z2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Z1::I64;
           R2 = lvl2_r2T5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.127214847 UTC

[section ""cstring" . lvl3_r2T6_bytes" {
     lvl3_r2T6_bytes:
         I8[] [80,114,101,108,117,100,101,46,117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.129816548 UTC

[section ""data" . lvl4_r2T7_closure" {
     lvl4_r2T7_closure:
         const lvl4_r2T7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r2T7_entry() //  [R1]
         { info_tbl: [(c2Zl,
                       label: lvl4_r2T7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2Zl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2Zm; else goto c2Zn;
       c2Zm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2Zn: // global
           (_c2Zi::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Zi::I64 == 0) goto c2Zk; else goto c2Zj;
       c2Zk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2Zj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Zi::I64;
           R2 = lvl3_r2T6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.135042051 UTC

[section ""cstring" . lvl5_r2T8_bytes" {
     lvl5_r2T8_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.137817251 UTC

[section ""data" . lvl6_r2T9_closure" {
     lvl6_r2T9_closure:
         const lvl6_r2T9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r2T9_entry() //  [R1]
         { info_tbl: [(c2ZC,
                       label: lvl6_r2T9_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ZC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ZD; else goto c2ZE;
       c2ZD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ZE: // global
           (_c2Zz::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2Zz::I64 == 0) goto c2ZB; else goto c2ZA;
       c2ZB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ZA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2Zz::I64;
           R2 = lvl5_r2T8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.142727159 UTC

[section ""cstring" . GHC.Err.$trModule4_bytes" {
     GHC.Err.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.144806858 UTC

[section ""data" . lvl7_r2Ta_closure" {
     lvl7_r2Ta_closure:
         const lvl7_r2Ta_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2Ta_entry() //  [R1]
         { info_tbl: [(c2ZT,
                       label: lvl7_r2Ta_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c2ZT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c2ZU; else goto c2ZV;
       c2ZU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c2ZV: // global
           (_c2ZQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c2ZQ::I64 == 0) goto c2ZS; else goto c2ZR;
       c2ZS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c2ZR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c2ZQ::I64;
           R2 = GHC.Err.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.149644106 UTC

[section ""cstring" . GHC.Err.$trModule2_bytes" {
     GHC.Err.$trModule2_bytes:
         I8[] [71,72,67,46,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.151824683 UTC

[section ""data" . lvl8_r2Tb_closure" {
     lvl8_r2Tb_closure:
         const lvl8_r2Tb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r2Tb_entry() //  [R1]
         { info_tbl: [(c30a,
                       label: lvl8_r2Tb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c30a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c30b; else goto c30c;
       c30b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c30c: // global
           (_c307::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c307::I64 == 0) goto c309; else goto c308;
       c309: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c308: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c307::I64;
           R2 = GHC.Err.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.156651658 UTC

[section ""cstring" . lvl9_r2Tc_bytes" {
     lvl9_r2Tc_bytes:
         I8[] [46,47,71,72,67,47,69,114,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.160642271 UTC

[section ""data" . lvl10_r2Td_closure" {
     lvl10_r2Td_closure:
         const lvl10_r2Td_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r2Td_entry() //  [R1]
         { info_tbl: [(c30r,
                       label: lvl10_r2Td_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c30r: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c30s; else goto c30t;
       c30s: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c30t: // global
           (_c30o::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c30o::I64 == 0) goto c30q; else goto c30p;
       c30q: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c30p: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c30o::I64;
           R2 = lvl9_r2Tc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.165042089 UTC

[section ""data" . lvl11_r2Te_closure" {
     lvl11_r2Te_closure:
         const GHC.Types.I#_con_info;
         const 79;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.167247631 UTC

[section ""data" . lvl12_r2Tf_closure" {
     lvl12_r2Tf_closure:
         const GHC.Types.I#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.168934586 UTC

[section ""data" . lvl13_r2Tg_closure" {
     lvl13_r2Tg_closure:
         const GHC.Types.I#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.17073006 UTC

[section ""data" . lvl14_r2Th_closure" {
     lvl14_r2Th_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r2Ta_closure;
         const lvl8_r2Tb_closure;
         const lvl10_r2Td_closure;
         const lvl11_r2Te_closure+1;
         const lvl12_r2Tf_closure+1;
         const lvl11_r2Te_closure+1;
         const lvl13_r2Tg_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.174170157 UTC

[section ""data" . GHC.Err.undefined_closure" {
     GHC.Err.undefined_closure:
         const GHC.Err.undefined_info;
         const 0;
 },
 sat_s2Tr_entry() //  [R1]
         { info_tbl: [(c30Y,
                       label: sat_s2Tr_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c30Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c30Z; else goto c310;
       c30Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c310: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c30R_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u31a; else goto c30S;
       u31a: // global
           call _c30R(R1) args: 0, res: 0, upd: 0;
       c30S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c30R() //  [R1]
         { info_tbl: [(c30R,
                       label: block_c30R_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c30R: // global
           if (R1 & 7 == 3) goto c30W; else goto c30V;
       c30W: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c30V: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c316; else goto c315;
       c316: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c315: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = lvl6_r2T9_closure;
           P64[Hp - 8] = lvl14_r2Th_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s2Ts_entry() //  [R1]
         { info_tbl: [(c31b,
                       label: sat_s2Ts_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c31b: // global
           _s2Ts::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c31c; else goto c31d;
       c31d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c31f; else goto c31e;
       c31f: // global
           HpAlloc = 24;
           goto c31c;
       c31c: // global
           R1 = _s2Ts::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c31e: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s2Ts::P64;
           _s2To::P64 = P64[_s2Ts::P64 + 16];
           I64[Hp - 16] = sat_s2Tr_info;
           P64[Hp] = _s2To::P64;
           R3 = Hp - 16;
           R2 = lvl4_r2T7_closure;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.undefined_entry() //  [R2]
         { info_tbl: [(c31g,
                       label: GHC.Err.undefined_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c31g: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c31k; else goto c31j;
       c31k: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.undefined_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c31j: // global
           I64[Hp - 16] = sat_s2Ts_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.185494195 UTC

[section ""data" . GHC.Err.$trModule3_closure" {
     GHC.Err.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.187172096 UTC

[section ""data" . GHC.Err.$trModule1_closure" {
     GHC.Err.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.188799054 UTC

[section ""data" . GHC.Err.$trModule_closure" {
     GHC.Err.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Err.$trModule3_closure+1;
         const GHC.Err.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.190764482 UTC

[section ""relreadonly" . S2TJ_srt" {
     S2TJ_srt:
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Err.error_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl2_r2T5_closure;
         const lvl6_r2T9_closure;
         const lvl14_r2Th_closure;
         const lvl4_r2T7_closure;
         const GHC.Err.undefined_closure;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.323313501 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:54:40.325016714 UTC

[section ""data" . GHC.Err.error_closure" {
     GHC.Err.error_closure:
         const GHC.Err.error_info;
         const 0;
 },
 sat_s31M_entry() //  [R1]
         { info_tbl: [(c322,
                       label: sat_s31M_info
                       rep:HeapRep 2 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c322: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c323; else goto c324;
       c323: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c324: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.error_entry() //  [R2, R3]
         { info_tbl: [(c325,
                       label: GHC.Err.error_info
                       rep:HeapRep static { Fun {arity: 2 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c325: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c329; else goto c328;
       c329: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Err.error_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c328: // global
           I64[Hp - 24] = sat_s31M_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 24;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.330859895 UTC

[section ""data" . lvl_r2T3_closure" {
     lvl_r2T3_closure:
         const GHC.Stack.Types.FreezeCallStack_con_info;
         const GHC.Stack.Types.EmptyCallStack_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.333831607 UTC

[section ""data" . GHC.Err.errorWithoutStackTrace_closure" {
     GHC.Err.errorWithoutStackTrace_closure:
         const GHC.Err.errorWithoutStackTrace_info;
         const 0;
 },
 sat_s31O_entry() //  [R1]
         { info_tbl: [(c32u,
                       label: sat_s31O_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c32u: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c32v; else goto c32w;
       c32v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c32w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = lvl_r2T3_closure+3;
           R2 = P64[R1 + 16];
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.errorWithoutStackTrace_entry() //  [R2]
         { info_tbl: [(c32x,
                       label: GHC.Err.errorWithoutStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c32x: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c32B; else goto c32A;
       c32B: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.errorWithoutStackTrace_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c32A: // global
           I64[Hp - 16] = sat_s31O_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.339208382 UTC

[section ""cstring" . lvl1_r2T4_bytes" {
     lvl1_r2T4_bytes:
         I8[] [79,111,112,115,33,32,84,104,101,32,112,114,111,103,114,97,109,32,104,97,115,32,101,110,116,101,114,101,100,32,97,110,32,96,97,98,115,101,110,116,39,32,97,114,103,117,109,101,110,116,33,10]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.341183823 UTC

[section ""data" . lvl2_r2T5_closure" {
     lvl2_r2T5_closure:
         const lvl2_r2T5_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_r2T5_entry() //  [R1]
         { info_tbl: [(c32T,
                       label: lvl2_r2T5_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c32T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c32U; else goto c32V;
       c32U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c32V: // global
           (_c32Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c32Q::I64 == 0) goto c32S; else goto c32R;
       c32S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c32R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c32Q::I64;
           R2 = lvl1_r2T4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.345738421 UTC

[section ""data" . GHC.Err.absentErr_closure" {
     GHC.Err.absentErr_closure:
         const GHC.Err.absentErr_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Err.absentErr_entry() //  [R1]
         { info_tbl: [(c33a,
                       label: GHC.Err.absentErr_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c33a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c33b; else goto c33c;
       c33b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c33c: // global
           (_c337::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c337::I64 == 0) goto c339; else goto c338;
       c339: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c338: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c337::I64;
           R2 = lvl2_r2T5_closure;
           Sp = Sp - 16;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.349630815 UTC

[section ""cstring" . lvl3_r2T6_bytes" {
     lvl3_r2T6_bytes:
         I8[] [80,114,101,108,117,100,101,46,117,110,100,101,102,105,110,101,100]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.351624431 UTC

[section ""data" . lvl4_r2T7_closure" {
     lvl4_r2T7_closure:
         const lvl4_r2T7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_r2T7_entry() //  [R1]
         { info_tbl: [(c33s,
                       label: lvl4_r2T7_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c33s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c33t; else goto c33u;
       c33t: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c33u: // global
           (_c33p::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c33p::I64 == 0) goto c33r; else goto c33q;
       c33r: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c33q: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c33p::I64;
           R2 = lvl3_r2T6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.355881045 UTC

[section ""cstring" . lvl5_r2T8_bytes" {
     lvl5_r2T8_bytes:
         I8[] [101,114,114,111,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.357740666 UTC

[section ""data" . lvl6_r2T9_closure" {
     lvl6_r2T9_closure:
         const lvl6_r2T9_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_r2T9_entry() //  [R1]
         { info_tbl: [(c33K,
                       label: lvl6_r2T9_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c33K: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c33L; else goto c33M;
       c33L: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c33M: // global
           (_c33H::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c33H::I64 == 0) goto c33J; else goto c33I;
       c33J: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c33I: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c33H::I64;
           R2 = lvl5_r2T8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.362020248 UTC

[section ""cstring" . GHC.Err.$trModule4_bytes" {
     GHC.Err.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.363876701 UTC

[section ""data" . lvl7_r2Ta_closure" {
     lvl7_r2Ta_closure:
         const lvl7_r2Ta_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_r2Ta_entry() //  [R1]
         { info_tbl: [(c342,
                       label: lvl7_r2Ta_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c342: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c343; else goto c344;
       c343: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c344: // global
           (_c33Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c33Z::I64 == 0) goto c341; else goto c340;
       c341: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c340: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c33Z::I64;
           R2 = GHC.Err.$trModule4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.367837547 UTC

[section ""cstring" . GHC.Err.$trModule2_bytes" {
     GHC.Err.$trModule2_bytes:
         I8[] [71,72,67,46,69,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.370532158 UTC

[section ""data" . lvl8_r2Tb_closure" {
     lvl8_r2Tb_closure:
         const lvl8_r2Tb_info;
         const 0;
         const 0;
         const 0;
 },
 lvl8_r2Tb_entry() //  [R1]
         { info_tbl: [(c34k,
                       label: lvl8_r2Tb_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c34k: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34l; else goto c34m;
       c34l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34m: // global
           (_c34h::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c34h::I64 == 0) goto c34j; else goto c34i;
       c34j: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c34i: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34h::I64;
           R2 = GHC.Err.$trModule2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.376139846 UTC

[section ""cstring" . lvl9_r2Tc_bytes" {
     lvl9_r2Tc_bytes:
         I8[] [46,47,71,72,67,47,69,114,114,46,104,115]
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.378123271 UTC

[section ""data" . lvl10_r2Td_closure" {
     lvl10_r2Td_closure:
         const lvl10_r2Td_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_r2Td_entry() //  [R1]
         { info_tbl: [(c34C,
                       label: lvl10_r2Td_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c34C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c34D; else goto c34E;
       c34D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c34E: // global
           (_c34z::I64) = call "ccall" arg hints:  [PtrHint,
                                                    PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c34z::I64 == 0) goto c34B; else goto c34A;
       c34B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c34A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c34z::I64;
           R2 = lvl9_r2Tc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.382867664 UTC

[section ""data" . lvl11_r2Te_closure" {
     lvl11_r2Te_closure:
         const GHC.Types.I#_con_info;
         const 79;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.384856134 UTC

[section ""data" . lvl12_r2Tf_closure" {
     lvl12_r2Tf_closure:
         const GHC.Types.I#_con_info;
         const 14;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.386608483 UTC

[section ""data" . lvl13_r2Tg_closure" {
     lvl13_r2Tg_closure:
         const GHC.Types.I#_con_info;
         const 39;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.388319782 UTC

[section ""data" . lvl14_r2Th_closure" {
     lvl14_r2Th_closure:
         const GHC.Stack.Types.SrcLoc_con_info;
         const lvl7_r2Ta_closure;
         const lvl8_r2Tb_closure;
         const lvl10_r2Td_closure;
         const lvl11_r2Te_closure+1;
         const lvl12_r2Tf_closure+1;
         const lvl11_r2Te_closure+1;
         const lvl13_r2Tg_closure+1;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.391044109 UTC

[section ""data" . GHC.Err.undefined_closure" {
     GHC.Err.undefined_closure:
         const GHC.Err.undefined_info;
         const 0;
 },
 sat_s31S_entry() //  [R1]
         { info_tbl: [(c35a,
                       label: sat_s31S_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c35a: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c35b; else goto c35c;
       c35b: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35c: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c353_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u35m; else goto c354;
       u35m: // global
           call _c353(R1) args: 0, res: 0, upd: 0;
       c354: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _c353() //  [R1]
         { info_tbl: [(c353,
                       label: block_c353_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c353: // global
           if (R1 & 7 == 3) goto c358; else goto c357;
       c358: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       c357: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c35i; else goto c35h;
       c35i: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c35h: // global
           I64[Hp - 24] = GHC.Stack.Types.PushCallStack_con_info;
           P64[Hp - 16] = lvl6_r2T9_closure;
           P64[Hp - 8] = lvl14_r2Th_closure+1;
           P64[Hp] = R1;
           R1 = Hp - 22;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_s31T_entry() //  [R1]
         { info_tbl: [(c35n,
                       label: sat_s31T_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c35n: // global
           _s31T::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c35o; else goto c35p;
       c35p: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35r; else goto c35q;
       c35r: // global
           HpAlloc = 24;
           goto c35o;
       c35o: // global
           R1 = _s31T::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c35q: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s31T::P64;
           _s31P::P64 = P64[_s31T::P64 + 16];
           I64[Hp - 16] = sat_s31S_info;
           P64[Hp] = _s31P::P64;
           R3 = Hp - 16;
           R2 = lvl4_r2T7_closure;
           R1 = GHC.Exception.errorCallWithCallStackException_closure;
           Sp = Sp - 16;
           call stg_ap_pp_fast(R3, R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.Err.undefined_entry() //  [R2]
         { info_tbl: [(c35s,
                       label: GHC.Err.undefined_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c35s: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c35w; else goto c35v;
       c35w: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Err.undefined_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c35v: // global
           I64[Hp - 16] = sat_s31T_info;
           P64[Hp] = R2;
           R1 = Hp - 16;
           call stg_raise#(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.402131975 UTC

[section ""data" . GHC.Err.$trModule3_closure" {
     GHC.Err.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.403822095 UTC

[section ""data" . GHC.Err.$trModule1_closure" {
     GHC.Err.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Err.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.406023976 UTC

[section ""data" . GHC.Err.$trModule_closure" {
     GHC.Err.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Err.$trModule3_closure+1;
         const GHC.Err.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:54:40.407674727 UTC

[section ""relreadonly" . S32a_srt" {
     S32a_srt:
         const GHC.Exception.errorCallWithCallStackException_closure;
         const GHC.Err.error_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl2_r2T5_closure;
         const lvl6_r2T9_closure;
         const lvl14_r2Th_closure;
         const lvl4_r2T7_closure;
         const GHC.Err.undefined_closure;
 }]

