
==================== Raw Cmm ====================
2018-03-16 16:11:13.125919536 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:13.127279825 UTC

[section ""data" . GHC.StaticPtr.fromStaticPtr_closure" {
     GHC.StaticPtr.fromStaticPtr_closure:
         const GHC.StaticPtr.fromStaticPtr_info;
 },
 GHC.StaticPtr.fromStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfvLi: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.fromStaticPtr_info" {
     GHC.StaticPtr.fromStaticPtr_info:
         const GHC.StaticPtr.fromStaticPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.131341239 UTC

[section ""data" . GHC.StaticPtr.$fIsStaticStaticPtr_closure" {
     GHC.StaticPtr.$fIsStaticStaticPtr_closure:
         const GHC.StaticPtr.$fIsStaticStaticPtr_info;
 },
 GHC.StaticPtr.$fIsStaticStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfvLt: // global
           R2 = R2;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fIsStaticStaticPtr_info" {
     GHC.StaticPtr.$fIsStaticStaticPtr_info:
         const GHC.StaticPtr.$fIsStaticStaticPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.135517812 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo6_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo6_bytes:
         I8[] [83,116,97,116,105,99,80,116,114,73,110,102,111,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.13777739 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo5_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo5_bytes:
         I8[] [115,112,73,110,102,111,85,110,105,116,73,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.140031653 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo4_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo4_bytes:
         I8[] [115,112,73,110,102,111,77,111,100,117,108,101,78,97,109,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.142358756 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo3_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo3_bytes:
         I8[] [115,112,73,110,102,111,83,114,99,76,111,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.144474809 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo2_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.160640272 UTC

[section ""data" . GHC.StaticPtr.$w$cshowsPrec_closure" {
     GHC.StaticPtr.$w$cshowsPrec_closure:
         const GHC.StaticPtr.$w$cshowsPrec_info;
         const 0;
 },
 GHC.StaticPtr.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cfvLG: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sfvma_entry() //  [R1]
         { []
         }
     {offset
       cfvMy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfvMz; else goto cfvMA;
       cfvMz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvMA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvma_info" {
     sat_sfvma_info:
         const sat_sfvma_entry;
         const 1;
         const 16;
 },
 sat_sfvm7_entry() //  [R1, R2]
         { []
         }
     {offset
       cfvMK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfvMQ; else goto cfvMR;
       cfvMQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvMR: // global
           I64[Sp - 16] = block_cfvMH_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufvMW; else goto cfvMI;
       ufvMW: // global
           call _cfvMH(R1) args: 0, res: 0, upd: 0;
       cfvMI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfvm7_info" {
     sat_sfvm7_info:
         const sat_sfvm7_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfvMH() //  [R1]
         { []
         }
     {offset
       cfvMH: // global
           _sfvm1::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfvMN_info;
           R4 = _sfvm1::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvMH_info" {
     block_cfvMH_info:
         const _cfvMH;
         const 1;
         const 30;
 },
 _cfvMN() //  [R1, R2]
         { []
         }
     {offset
       cfvMN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfvMV; else goto cfvMU;
       cfvMV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cfvMU: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvMN_info" {
     block_cfvMN_info:
         const _cfvMN;
         const 0;
         const 30;
 },
 sat_sfvm0_entry() //  [R1, R2]
         { []
         }
     {offset
       cfvN6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfvNc; else goto cfvNd;
       cfvNc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvNd: // global
           I64[Sp - 16] = block_cfvN3_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufvNi; else goto cfvN4;
       ufvNi: // global
           call _cfvN3(R1) args: 0, res: 0, upd: 0;
       cfvN4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfvm0_info" {
     sat_sfvm0_info:
         const sat_sfvm0_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfvN3() //  [R1]
         { []
         }
     {offset
       cfvN3: // global
           _sfvlU::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfvN9_info;
           R4 = _sfvlU::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvN3_info" {
     block_cfvN3_info:
         const _cfvN3;
         const 1;
         const 30;
 },
 _cfvN9() //  [R1, R2]
         { []
         }
     {offset
       cfvN9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfvNh; else goto cfvNg;
       cfvNh: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cfvNg: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvN9_info" {
     block_cfvN9_info:
         const _cfvN9;
         const 0;
         const 30;
 },
 sat_sfvmc_entry() //  [R1]
         { []
         }
     {offset
       cfvNk: // global
           _sfvmc::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfvNl; else goto cfvNm;
       cfvNm: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cfvNo; else goto cfvNn;
       cfvNo: // global
           HpAlloc = 128;
           goto cfvNl;
       cfvNl: // global
           R1 = _sfvmc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvNn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfvmc::P64;
           _sfvlQ::P64 = P64[_sfvmc::P64 + 16];
           _sfvlS::P64 = P64[_sfvmc::P64 + 24];
           _sfvlT::P64 = P64[_sfvmc::P64 + 32];
           I64[Hp - 120] = sat_sfvma_info;
           P64[Hp - 104] = _sfvlQ::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = sat_sfvm7_info;
           P64[Hp - 64] = _sfvlT::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = sat_sfvm0_info;
           P64[Hp - 24] = _sfvlS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           R3 = Hp - 94;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmc_info" {
     sat_sfvmc_info:
         const sat_sfvmc_entry;
         const 3;
         const 4294967311;
         const SfvsE_srt;
 },
 sat_sfvmd_entry() //  [R1]
         { []
         }
     {offset
       cfvNp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfvNr; else goto cfvNs;
       cfvNr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvNs: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfvMl_info;
           _sfvlQ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfvlQ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufvNw; else goto cfvMm;
       ufvNw: // global
           call _cfvMl(R1) args: 0, res: 0, upd: 0;
       cfvMm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmd_info" {
     sat_sfvmd_info:
         const sat_sfvmd_entry;
         const 2;
         const 4294967314;
         const SfvsE_srt;
 },
 _cfvMl() //  [R1]
         { []
         }
     {offset
       cfvMl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfvNv; else goto cfvNu;
       cfvNv: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfvNu: // global
           _sfvlS::P64 = P64[R1 + 7];
           _sfvlT::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sfvmc_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sfvlS::P64;
           P64[Hp - 24] = _sfvlT::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfvMl_info" {
     block_cfvMl_info:
         const _cfvMl;
         const 1;
         const 4294967326;
         const SfvsE_srt;
 },
 sat_sfvme_entry() //  [R1]
         { []
         }
     {offset
       cfvNx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfvNB; else goto cfvNA;
       cfvNB: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvNA: // global
           _sfvlN::P64 = P64[R1 + 16];
           _sfvlQ::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sfvmd_info;
           P64[Hp - 8] = _sfvlN::P64;
           P64[Hp] = _sfvlQ::P64;
           R3 = Hp - 24;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfvme_info" {
     sat_sfvme_info:
         const sat_sfvme_entry;
         const 2;
         const 4294967314;
         const SfvsE_srt;
 },
 sat_sfvmf_entry() //  [R1]
         { []
         }
     {offset
       cfvNC: // global
           _sfvmf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfvND; else goto cfvNE;
       cfvNE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfvNG; else goto cfvNF;
       cfvNG: // global
           HpAlloc = 32;
           goto cfvND;
       cfvND: // global
           R1 = _sfvmf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvNF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfvmf::P64;
           _sfvlN::P64 = P64[_sfvmf::P64 + 16];
           _sfvlQ::P64 = P64[_sfvmf::P64 + 24];
           I64[Hp - 24] = sat_sfvme_info;
           P64[Hp - 8] = _sfvlN::P64;
           P64[Hp] = _sfvlQ::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmf_info" {
     sat_sfvmf_info:
         const sat_sfvmf_entry;
         const 2;
         const 12884901906;
         const SfvsE_srt;
 },
 sat_sfvmh_entry() //  [R1]
         { []
         }
     {offset
       cfvNI: // global
           _sfvmh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfvNJ; else goto cfvNK;
       cfvNK: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfvNM; else goto cfvNL;
       cfvNM: // global
           HpAlloc = 56;
           goto cfvNJ;
       cfvNJ: // global
           R1 = _sfvmh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvNL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfvmh::P64;
           _sfvlM::P64 = P64[_sfvmh::P64 + 16];
           _sfvlN::P64 = P64[_sfvmh::P64 + 24];
           _sfvlQ::P64 = P64[_sfvmh::P64 + 32];
           I64[Hp - 48] = sat_sfvmf_info;
           P64[Hp - 32] = _sfvlN::P64;
           P64[Hp - 24] = _sfvlQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sfvlM::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmh_info" {
     sat_sfvmh_info:
         const sat_sfvmh_entry;
         const 3;
         const 30064771087;
         const SfvsE_srt;
 },
 sat_sfvmj_entry() //  [R1]
         { []
         }
     {offset
       cfvNO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfvNS; else goto cfvNR;
       cfvNS: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvNR: // global
           _sfvlM::P64 = P64[R1 + 16];
           _sfvlN::P64 = P64[R1 + 24];
           _sfvlQ::P64 = P64[R1 + 32];
           I64[Hp - 56] = sat_sfvmh_info;
           P64[Hp - 40] = _sfvlM::P64;
           P64[Hp - 32] = _sfvlN::P64;
           P64[Hp - 24] = _sfvlQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfvmj_info" {
     sat_sfvmj_info:
         const sat_sfvmj_entry;
         const 3;
         const 30064771087;
         const SfvsE_srt;
 },
 sat_sfvmk_entry() //  [R1]
         { []
         }
     {offset
       cfvNT: // global
           _sfvmk::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfvNU; else goto cfvNV;
       cfvNV: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfvNX; else goto cfvNW;
       cfvNX: // global
           HpAlloc = 40;
           goto cfvNU;
       cfvNU: // global
           R1 = _sfvmk::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvNW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfvmk::P64;
           _sfvlM::P64 = P64[_sfvmk::P64 + 16];
           _sfvlN::P64 = P64[_sfvmk::P64 + 24];
           _sfvlQ::P64 = P64[_sfvmk::P64 + 32];
           I64[Hp - 32] = sat_sfvmj_info;
           P64[Hp - 16] = _sfvlM::P64;
           P64[Hp - 8] = _sfvlN::P64;
           P64[Hp] = _sfvlQ::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmk_info" {
     sat_sfvmk_info:
         const sat_sfvmk_entry;
         const 3;
         const 30064771087;
         const SfvsE_srt;
 },
 sat_sfvmm_entry() //  [R1]
         { []
         }
     {offset
       cfvNZ: // global
           _sfvmm::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfvO0; else goto cfvO1;
       cfvO1: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfvO3; else goto cfvO2;
       cfvO3: // global
           HpAlloc = 64;
           goto cfvO0;
       cfvO0: // global
           R1 = _sfvmm::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvO2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfvmm::P64;
           _sfvlL::P64 = P64[_sfvmm::P64 + 16];
           _sfvlM::P64 = P64[_sfvmm::P64 + 24];
           _sfvlN::P64 = P64[_sfvmm::P64 + 32];
           _sfvlQ::P64 = P64[_sfvmm::P64 + 40];
           I64[Hp - 56] = sat_sfvmk_info;
           P64[Hp - 40] = _sfvlM::P64;
           P64[Hp - 32] = _sfvlN::P64;
           P64[Hp - 24] = _sfvlQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sfvlL::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmm_info" {
     sat_sfvmm_info:
         const sat_sfvmm_entry;
         const 4;
         const 30064771087;
         const SfvsE_srt;
 },
 sat_sfvmo_entry() //  [R1]
         { []
         }
     {offset
       cfvO5: // global
           _sfvmo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfvO6; else goto cfvO7;
       cfvO7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfvO9; else goto cfvO8;
       cfvO9: // global
           HpAlloc = 72;
           goto cfvO6;
       cfvO6: // global
           R1 = _sfvmo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvO8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfvmo::P64;
           _sfvlL::P64 = P64[_sfvmo::P64 + 16];
           _sfvlM::P64 = P64[_sfvmo::P64 + 24];
           _sfvlN::P64 = P64[_sfvmo::P64 + 32];
           _sfvlQ::P64 = P64[_sfvmo::P64 + 40];
           I64[Hp - 64] = sat_sfvmm_info;
           P64[Hp - 48] = _sfvlL::P64;
           P64[Hp - 40] = _sfvlM::P64;
           P64[Hp - 32] = _sfvlN::P64;
           P64[Hp - 24] = _sfvlQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmo_info" {
     sat_sfvmo_info:
         const sat_sfvmo_entry;
         const 4;
         const 30064771087;
         const SfvsE_srt;
 },
 p_sfvlP_entry() //  [R1, R2]
         { []
         }
     {offset
       cfvOa: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfvOe; else goto cfvOd;
       cfvOe: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvOd: // global
           _sfvlL::P64 = P64[R1 + 7];
           _sfvlM::P64 = P64[R1 + 15];
           _sfvlN::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sfvmo_info;
           P64[Hp - 24] = _sfvlL::P64;
           P64[Hp - 16] = _sfvlM::P64;
           P64[Hp - 8] = _sfvlN::P64;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sfvlP_info" {
     p_sfvlP_info:
         const p_sfvlP_entry;
         const 3;
         const 30064771080;
         const 4294967301;
         const SfvsE_srt;
 },
 sat_sfvmr_entry() //  [R1]
         { []
         }
     {offset
       cfvOo: // global
           _sfvmr::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfvOp; else goto cfvOq;
       cfvOq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfvOs; else goto cfvOr;
       cfvOs: // global
           HpAlloc = 24;
           goto cfvOp;
       cfvOp: // global
           R1 = _sfvmr::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvOr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfvmr::P64;
           _sfvlO::P64 = P64[_sfvmr::P64 + 16];
           _sfvlP::P64 = P64[_sfvmr::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfvlO::P64;
           R2 = Hp - 14;
           R1 = _sfvlP::P64;
           Sp = Sp - 16;
           call p_sfvlP_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvmr_info" {
     sat_sfvmr_info:
         const sat_sfvmr_entry;
         const 2;
         const 30064771090;
         const SfvsE_srt;
 },
 GHC.StaticPtr.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfvOw: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfvOA; else goto cfvOz;
       cfvOA: // global
           HpAlloc = 88;
           R1 = GHC.StaticPtr.$w$cshowsPrec_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cfvOz: // global
           I64[Hp - 80] = p_sfvlP_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           _cfvLK::P64 = Hp - 79;
           if (%MO_S_Lt_W64(R2, 11)) goto cfvOu; else goto cfvOv;
       cfvOu: // global
           Hp = Hp - 56;
           R2 = R6;
           R1 = _cfvLK::P64;
           call p_sfvlP_entry(R2, R1) args: 8, res: 0, upd: 8;
       cfvOv: // global
           I64[Hp - 48] = sat_sfvmr_info;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _cfvLK::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$w$cshowsPrec_info" {
     GHC.StaticPtr.$w$cshowsPrec_info:
         const GHC.StaticPtr.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 21474836480;
         const SfvsE_srt;
         const 69;
         const GHC.StaticPtr.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.205296137 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cfvQd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfvQh; else goto cfvQi;
       cfvQh: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfvQi: // global
           I64[Sp - 24] = block_cfvQa_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufvQq; else goto cfvQb;
       ufvQq: // global
           call _cfvQa(R1) args: 0, res: 0, upd: 0;
       cfvQb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SfvsE_srt+24;
 },
 _cfvQa() //  [R1]
         { []
         }
     {offset
       cfvQa: // global
           I64[Sp] = block_cfvQg_info;
           _sfvmw::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sfvmw::I64;
           if (R1 & 7 != 0) goto ufvQp; else goto cfvQk;
       ufvQp: // global
           call _cfvQg(R1) args: 0, res: 0, upd: 0;
       cfvQk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvQa_info" {
     block_cfvQa_info:
         const _cfvQa;
         const 2;
         const 4294967326;
         const SfvsE_srt+24;
 },
 _cfvQg() //  [R1]
         { []
         }
     {offset
       cfvQg: // global
           R6 = P64[Sp + 16];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvQg_info" {
     block_cfvQg_info:
         const _cfvQg;
         const 66;
         const 4294967326;
         const SfvsE_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.211962722 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo7_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.215183066 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cfvQM: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvQN; else goto cfvQO;
       cfvQN: // global
           R2 = R2;
           R1 = GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvQO: // global
           I64[Sp - 8] = block_cfvQJ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvQS; else goto cfvQK;
       ufvQS: // global
           call _cfvQJ(R1) args: 0, res: 0, upd: 0;
       cfvQK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SfvsE_srt+24;
 },
 _cfvQJ() //  [R1]
         { []
         }
     {offset
       cfvQJ: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvQJ_info" {
     block_cfvQJ_info:
         const _cfvQJ;
         const 0;
         const 4294967326;
         const SfvsE_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.220852205 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo1_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo1_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo1_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfvR9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfvRa; else goto cfvRb;
       cfvRa: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.$fShowStaticPtrInfo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfvRb: // global
           I64[Sp - 16] = block_cfvR6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufvRf; else goto cfvR7;
       ufvRf: // global
           call _cfvR6(R1) args: 0, res: 0, upd: 0;
       cfvR7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo1_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo1_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SfvsE_srt+24;
 },
 _cfvR6() //  [R1]
         { []
         }
     {offset
       cfvR6: // global
           R6 = P64[Sp + 8];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvR6_info" {
     block_cfvR6_info:
         const _cfvR6;
         const 1;
         const 4294967326;
         const SfvsE_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.226225844 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cfvRt: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SfvsE_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.229634638 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure+3;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure+1;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.232044519 UTC

[section ""data" . GHC.StaticPtr.spInfoSrcLoc_closure" {
     GHC.StaticPtr.spInfoSrcLoc_closure:
         const GHC.StaticPtr.spInfoSrcLoc_info;
 },
 GHC.StaticPtr.spInfoSrcLoc_entry() //  [R2]
         { []
         }
     {offset
       cfvRI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvRJ; else goto cfvRK;
       cfvRJ: // global
           R2 = R2;
           R1 = GHC.StaticPtr.spInfoSrcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvRK: // global
           I64[Sp - 8] = block_cfvRF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvRO; else goto cfvRG;
       ufvRO: // global
           call _cfvRF(R1) args: 0, res: 0, upd: 0;
       cfvRG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.spInfoSrcLoc_info" {
     GHC.StaticPtr.spInfoSrcLoc_info:
         const GHC.StaticPtr.spInfoSrcLoc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfvRF() //  [R1]
         { []
         }
     {offset
       cfvRF: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvRF_info" {
     block_cfvRF_info:
         const _cfvRF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.237456904 UTC

[section ""data" . GHC.StaticPtr.spInfoModuleName_closure" {
     GHC.StaticPtr.spInfoModuleName_closure:
         const GHC.StaticPtr.spInfoModuleName_info;
 },
 GHC.StaticPtr.spInfoModuleName_entry() //  [R2]
         { []
         }
     {offset
       cfvS7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvS8; else goto cfvS9;
       cfvS8: // global
           R2 = R2;
           R1 = GHC.StaticPtr.spInfoModuleName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvS9: // global
           I64[Sp - 8] = block_cfvS4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvSd; else goto cfvS5;
       ufvSd: // global
           call _cfvS4(R1) args: 0, res: 0, upd: 0;
       cfvS5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.spInfoModuleName_info" {
     GHC.StaticPtr.spInfoModuleName_info:
         const GHC.StaticPtr.spInfoModuleName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfvS4() //  [R1]
         { []
         }
     {offset
       cfvS4: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvS4_info" {
     block_cfvS4_info:
         const _cfvS4;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.242705113 UTC

[section ""data" . GHC.StaticPtr.spInfoUnitId_closure" {
     GHC.StaticPtr.spInfoUnitId_closure:
         const GHC.StaticPtr.spInfoUnitId_info;
 },
 GHC.StaticPtr.spInfoUnitId_entry() //  [R2]
         { []
         }
     {offset
       cfvSw: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvSx; else goto cfvSy;
       cfvSx: // global
           R2 = R2;
           R1 = GHC.StaticPtr.spInfoUnitId_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvSy: // global
           I64[Sp - 8] = block_cfvSt_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvSC; else goto cfvSu;
       ufvSC: // global
           call _cfvSt(R1) args: 0, res: 0, upd: 0;
       cfvSu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.spInfoUnitId_info" {
     GHC.StaticPtr.spInfoUnitId_info:
         const GHC.StaticPtr.spInfoUnitId_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfvSt() //  [R1]
         { []
         }
     {offset
       cfvSt: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvSt_info" {
     block_cfvSt_info:
         const _cfvSt;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.248582581 UTC

[section ""data" . GHC.StaticPtr.deRefStaticPtr_closure" {
     GHC.StaticPtr.deRefStaticPtr_closure:
         const GHC.StaticPtr.deRefStaticPtr_info;
 },
 GHC.StaticPtr.deRefStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfvSV: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvSW; else goto cfvSX;
       cfvSW: // global
           R2 = R2;
           R1 = GHC.StaticPtr.deRefStaticPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvSX: // global
           I64[Sp - 8] = block_cfvSS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvT1; else goto cfvST;
       ufvT1: // global
           call _cfvSS(R1) args: 0, res: 0, upd: 0;
       cfvST: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.deRefStaticPtr_info" {
     GHC.StaticPtr.deRefStaticPtr_info:
         const GHC.StaticPtr.deRefStaticPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfvSS() //  [R1]
         { []
         }
     {offset
       cfvSS: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvSS_info" {
     block_cfvSS_info:
         const _cfvSS;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.254088714 UTC

[section ""data" . GHC.StaticPtr.staticKey_closure" {
     GHC.StaticPtr.staticKey_closure:
         const GHC.StaticPtr.staticKey_info;
 },
 GHC.StaticPtr.staticKey_entry() //  [R2]
         { []
         }
     {offset
       cfvTi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvTm; else goto cfvTn;
       cfvTm: // global
           R2 = R2;
           R1 = GHC.StaticPtr.staticKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvTn: // global
           I64[Sp - 8] = block_cfvTf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvTr; else goto cfvTg;
       ufvTr: // global
           call _cfvTf(R1) args: 0, res: 0, upd: 0;
       cfvTg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticKey_info" {
     GHC.StaticPtr.staticKey_info:
         const GHC.StaticPtr.staticKey_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfvTf() //  [R1]
         { []
         }
     {offset
       cfvTf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfvTq; else goto cfvTp;
       cfvTq: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfvTp: // global
           _sfvnb::I64 = I64[R1 + 23];
           _sfvnc::I64 = I64[R1 + 31];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _sfvnb::I64;
           I64[Hp] = _sfvnc::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvTf_info" {
     block_cfvTf_info:
         const _cfvTf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.259766033 UTC

[section ""data" . GHC.StaticPtr.staticPtrInfo_closure" {
     GHC.StaticPtr.staticPtrInfo_closure:
         const GHC.StaticPtr.staticPtrInfo_info;
 },
 GHC.StaticPtr.staticPtrInfo_entry() //  [R2]
         { []
         }
     {offset
       cfvTJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvTK; else goto cfvTL;
       cfvTK: // global
           R2 = R2;
           R1 = GHC.StaticPtr.staticPtrInfo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvTL: // global
           I64[Sp - 8] = block_cfvTG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvTP; else goto cfvTH;
       ufvTP: // global
           call _cfvTG(R1) args: 0, res: 0, upd: 0;
       cfvTH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrInfo_info" {
     GHC.StaticPtr.staticPtrInfo_info:
         const GHC.StaticPtr.staticPtrInfo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfvTG() //  [R1]
         { []
         }
     {offset
       cfvTG: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvTG_info" {
     block_cfvTG_info:
         const _cfvTG;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.264463388 UTC

[section ""cstring" . GHC.StaticPtr.$trModule4_bytes" {
     GHC.StaticPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.266379975 UTC

[section ""data" . GHC.StaticPtr.$trModule3_closure" {
     GHC.StaticPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.268073659 UTC

[section ""cstring" . GHC.StaticPtr.$trModule2_bytes" {
     GHC.StaticPtr.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,116,105,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.269799026 UTC

[section ""data" . GHC.StaticPtr.$trModule1_closure" {
     GHC.StaticPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.271520576 UTC

[section ""data" . GHC.StaticPtr.$trModule_closure" {
     GHC.StaticPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.StaticPtr.$trModule3_closure+1;
         const GHC.StaticPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.273277878 UTC

[section ""data" . $krep_rfvlo_closure" {
     $krep_rfvlo_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.275001024 UTC

[section ""data" . $krep1_rfvlp_closure" {
     $krep1_rfvlp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.277368803 UTC

[section ""data" . $krep2_rfvlq_closure" {
     $krep2_rfvlq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.279163881 UTC

[section ""data" . $krep3_rfvlr_closure" {
     $krep3_rfvlr_closure:
         const :_con_info;
         const $krep1_rfvlp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.280824374 UTC

[section ""data" . $krep4_rfvls_closure" {
     $krep4_rfvls_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rfvlr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.283338678 UTC

[section ""data" . $krep5_rfvlt_closure" {
     $krep5_rfvlt_closure:
         const :_con_info;
         const $krep_rfvlo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.285007512 UTC

[section ""data" . $krep6_rfvlu_closure" {
     $krep6_rfvlu_closure:
         const :_con_info;
         const $krep_rfvlo_closure+1;
         const $krep5_rfvlt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.286763961 UTC

[section ""data" . $krep7_rfvlv_closure" {
     $krep7_rfvlv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep6_rfvlu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.288532564 UTC

[section ""data" . GHC.StaticPtr.$tcIsStatic1_closure" {
     GHC.StaticPtr.$tcIsStatic1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep2_rfvlq_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.290296448 UTC

[section ""data" . $krep8_rfvlw_closure" {
     $krep8_rfvlw_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.291951764 UTC

[section ""data" . $krep9_rfvlx_closure" {
     $krep9_rfvlx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.294172407 UTC

[section ""cstring" . GHC.StaticPtr.$tcStaticPtrInfo2_bytes" {
     GHC.StaticPtr.$tcStaticPtrInfo2_bytes:
         I8[] [83,116,97,116,105,99,80,116,114,73,110,102,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.295877088 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtrInfo1_closure" {
     GHC.StaticPtr.$tcStaticPtrInfo1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tcStaticPtrInfo2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.297652503 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtrInfo_closure" {
     GHC.StaticPtr.$tcStaticPtrInfo_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tcStaticPtrInfo1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9809180260958205610;
         const 5820027882667808380;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.299493761 UTC

[section ""data" . $krep10_rfvly_closure" {
     $krep10_rfvly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.StaticPtr.$tcStaticPtrInfo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.301152981 UTC

[section ""data" . $krep11_rfvlz_closure" {
     $krep11_rfvlz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rfvlv_closure+1;
         const $krep10_rfvly_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.303407082 UTC

[section ""data" . $krep12_rfvlA_closure" {
     $krep12_rfvlA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rfvls_closure+1;
         const $krep11_rfvlz_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.305141784 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtrInfo1_closure" {
     GHC.StaticPtr.$tc'StaticPtrInfo1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rfvls_closure+1;
         const $krep12_rfvlA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.306893345 UTC

[section ""cstring" . GHC.StaticPtr.$tc'StaticPtrInfo3_bytes" {
     GHC.StaticPtr.$tc'StaticPtrInfo3_bytes:
         I8[] [39,83,116,97,116,105,99,80,116,114,73,110,102,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.308510675 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtrInfo2_closure" {
     GHC.StaticPtr.$tc'StaticPtrInfo2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tc'StaticPtrInfo3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.310570928 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtrInfo_closure" {
     GHC.StaticPtr.$tc'StaticPtrInfo_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tc'StaticPtrInfo2_closure+1;
         const GHC.StaticPtr.$tc'StaticPtrInfo1_closure+4;
         const 12332739532642204119;
         const 17636067641148941699;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.312305128 UTC

[section ""cstring" . GHC.StaticPtr.$tcStaticPtr2_bytes" {
     GHC.StaticPtr.$tcStaticPtr2_bytes:
         I8[] [83,116,97,116,105,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.314039427 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtr1_closure" {
     GHC.StaticPtr.$tcStaticPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tcStaticPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.315792824 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtr_closure" {
     GHC.StaticPtr.$tcStaticPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tcStaticPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6538784347774135987;
         const 451387415853290179;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.317582297 UTC

[section ""data" . $krep13_rfvlB_closure" {
     $krep13_rfvlB_closure:
         const :_con_info;
         const $krep8_rfvlw_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.319306627 UTC

[section ""data" . $krep14_rfvlC_closure" {
     $krep14_rfvlC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.StaticPtr.$tcStaticPtr_closure+1;
         const $krep13_rfvlB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.321046426 UTC

[section ""data" . $krep15_rfvlD_closure" {
     $krep15_rfvlD_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rfvlw_closure+2;
         const $krep14_rfvlC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.32278365 UTC

[section ""data" . $krep16_rfvlE_closure" {
     $krep16_rfvlE_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rfvly_closure+1;
         const $krep15_rfvlD_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.324458069 UTC

[section ""data" . $krep17_rfvlF_closure" {
     $krep17_rfvlF_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rfvlx_closure+1;
         const $krep16_rfvlE_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.326621613 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtr1_closure" {
     GHC.StaticPtr.$tc'StaticPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rfvlx_closure+1;
         const $krep17_rfvlF_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.328776612 UTC

[section ""cstring" . GHC.StaticPtr.$tc'StaticPtr3_bytes" {
     GHC.StaticPtr.$tc'StaticPtr3_bytes:
         I8[] [39,83,116,97,116,105,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.330442651 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtr2_closure" {
     GHC.StaticPtr.$tc'StaticPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tc'StaticPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.332077091 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtr_closure" {
     GHC.StaticPtr.$tc'StaticPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tc'StaticPtr2_closure+1;
         const GHC.StaticPtr.$tc'StaticPtr1_closure+4;
         const 3211798574336347514;
         const 9816765169815661376;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.333762029 UTC

[section ""cstring" . GHC.StaticPtr.$tcIsStatic3_bytes" {
     GHC.StaticPtr.$tcIsStatic3_bytes:
         I8[] [73,115,83,116,97,116,105,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.335381282 UTC

[section ""data" . GHC.StaticPtr.$tcIsStatic2_closure" {
     GHC.StaticPtr.$tcIsStatic2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tcIsStatic3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.337125671 UTC

[section ""data" . GHC.StaticPtr.$tcIsStatic_closure" {
     GHC.StaticPtr.$tcIsStatic_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tcIsStatic2_closure+1;
         const GHC.StaticPtr.$tcIsStatic1_closure+4;
         const 12653381617957437053;
         const 3253287492145771790;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.342359027 UTC

[section ""data" . GHC.StaticPtr.$wunsafeLookupStaticPtr_closure" {
     GHC.StaticPtr.$wunsafeLookupStaticPtr_closure:
         const GHC.StaticPtr.$wunsafeLookupStaticPtr_info;
 },
 GHC.StaticPtr.$wunsafeLookupStaticPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       cfvUQ: // global
           _sfvnm::I64 = R3;
           _sfvnl::I64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cfvUR; else goto cfvUS;
       cfvUS: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfvUU; else goto cfvUT;
       cfvUU: // global
           HpAlloc = 80;
           goto cfvUR;
       cfvUR: // global
           R3 = _sfvnm::I64;
           R2 = _sfvnl::I64;
           R1 = GHC.StaticPtr.$wunsafeLookupStaticPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfvUT: // global
           I64[Hp - 72] = GHC.Word.W64#_con_info;
           I64[Hp - 64] = _sfvnl::I64;
           I64[Hp - 56] = GHC.Word.W64#_con_info;
           I64[Hp - 48] = _sfvnm::I64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 38;
           I64[Sp - 16] = block_cfvUO_info;
           R3 = 0;
           _cfvUN::P64 = Hp - 14;
           R2 = _cfvUN::P64;
           P64[Sp - 8] = _cfvUN::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$wunsafeLookupStaticPtr_info" {
     GHC.StaticPtr.$wunsafeLookupStaticPtr_info:
         const GHC.StaticPtr.$wunsafeLookupStaticPtr_entry;
         const 0;
         const 14;
         const 12884901900;
 },
 _cfvUO() //  [R1]
         { []
         }
     {offset
       cfvUO: // global
           I64[Sp] = block_cfvV1_info;
           R2 = 8;
           R1 = R1 << 3;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvUO_info" {
     block_cfvUO_info:
         const _cfvUO;
         const 1;
         const 30;
 },
 _cfvV1() //  [R1]
         { []
         }
     {offset
       cfvV1: // global
           P64[Sp - 16] = P64[Sp + 8];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _cfvVr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfvV1_info" {
     block_cfvV1_info:
         const _cfvV1;
         const 1;
         const 30;
 },
 _cfvVr() //  []
         { []
         }
     {offset
       cfvVr: // global
           _sfvnN::P64 = P64[Sp];
           I64[Sp] = block_cfvVu_info;
           R1 = _sfvnN::P64;
           if (R1 & 7 != 0) goto ufvVT; else goto cfvVw;
       ufvVT: // global
           call _cfvVu(R1) args: 0, res: 0, upd: 0;
       cfvVw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfvVu() //  [R1]
         { []
         }
     {offset
       cfvVu: // global
           if (R1 & 7 == 1) goto ufvVQ; else goto cfvVH;
       ufvVQ: // global
           Sp = Sp + 8;
           call _cfvVa() args: 0, res: 0, upd: 0;
       cfvVH: // global
           I64[Sp - 8] = block_cfvVF_info;
           _sfvnS::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sfvnS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvVU; else goto cfvVI;
       ufvVU: // global
           call _cfvVF(R1) args: 0, res: 0, upd: 0;
       cfvVI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvVu_info" {
     block_cfvVu_info:
         const _cfvVu;
         const 195;
         const 30;
 },
 _cfvVa() //  []
         { []
         }
     {offset
       cfvVa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfvVe; else goto cfvVd;
       cfvVe: // global
           HpAlloc = 16;
           I64[Sp] = block_cfvVa_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cfvVd: // global
           _sfvnz::P64 = P64[Sp + 16];
           (_sfvnG::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] hs_spt_lookup(I64[Sp + 8]);
           call MO_Touch(_sfvnz::P64);
           if (_sfvnG::I64 == 0) goto cfvVo; else goto cfvVn;
       cfvVo: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfvVn: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           I64[Hp] = _sfvnG::I64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvVa_info" {
     block_cfvVa_info:
         const _cfvVa;
         const 66;
         const 30;
 },
 _cfvVF() //  [R1]
         { []
         }
     {offset
       cfvVF: // global
           _sfvnO::I64 = I64[Sp + 16];
           _sfvnS::P64 = P64[Sp + 8];
           I64[I64[Sp + 24] + (_sfvnO::I64 << 3)] = I64[R1 + 7];
           P64[Sp + 8] = _sfvnS::P64;
           I64[Sp + 16] = _sfvnO::I64 + 1;
           Sp = Sp + 8;
           call _cfvVr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfvVF_info" {
     block_cfvVF_info:
         const _cfvVF;
         const 388;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.355755726 UTC

[section ""data" . GHC.StaticPtr.unsafeLookupStaticPtr1_closure" {
     GHC.StaticPtr.unsafeLookupStaticPtr1_closure:
         const GHC.StaticPtr.unsafeLookupStaticPtr1_info;
 },
 GHC.StaticPtr.unsafeLookupStaticPtr1_entry() //  [R2]
         { []
         }
     {offset
       cfvWE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfvWF; else goto cfvWG;
       cfvWF: // global
           R2 = R2;
           R1 = GHC.StaticPtr.unsafeLookupStaticPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvWG: // global
           I64[Sp - 8] = block_cfvWB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvWK; else goto cfvWC;
       ufvWK: // global
           call _cfvWB(R1) args: 0, res: 0, upd: 0;
       cfvWC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.unsafeLookupStaticPtr1_info" {
     GHC.StaticPtr.unsafeLookupStaticPtr1_info:
         const GHC.StaticPtr.unsafeLookupStaticPtr1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cfvWB() //  [R1]
         { []
         }
     {offset
       cfvWB: // global
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.StaticPtr.$wunsafeLookupStaticPtr_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvWB_info" {
     block_cfvWB_info:
         const _cfvWB;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.36063048 UTC

[section ""data" . GHC.StaticPtr.unsafeLookupStaticPtr_closure" {
     GHC.StaticPtr.unsafeLookupStaticPtr_closure:
         const GHC.StaticPtr.unsafeLookupStaticPtr_info;
 },
 GHC.StaticPtr.unsafeLookupStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfvWY: // global
           R2 = R2;
           call GHC.StaticPtr.unsafeLookupStaticPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.unsafeLookupStaticPtr_info" {
     GHC.StaticPtr.unsafeLookupStaticPtr_info:
         const GHC.StaticPtr.unsafeLookupStaticPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.36429576 UTC

[section ""cstring" . lvl_rfvlG_bytes" {
     lvl_rfvlG_bytes:
         I8[] [71,72,67,47,83,116,97,116,105,99,80,116,114,46,104,115,58,49,51,49,58,52,49,45,55,57,124,108,97,109,98,100,97]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.366708829 UTC

[section ""data" . lvl1_rfvlH_closure" {
     lvl1_rfvlH_closure:
         const lvl1_rfvlH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rfvlH_entry() //  [R1]
         { []
         }
     {offset
       cfvXc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfvXd; else goto cfvXe;
       cfvXd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvXe: // global
           (_cfvX9::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfvX9::I64 == 0) goto cfvXb; else goto cfvXa;
       cfvXb: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfvXa: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfvX9::I64;
           R2 = lvl_rfvlG_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rfvlH_info" {
     lvl1_rfvlH_info:
         const lvl1_rfvlH_entry;
         const 0;
         const 4294967317;
         const SfvsE_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.374488795 UTC

[section ""data" . GHC.StaticPtr.staticPtrKeys2_closure" {
     GHC.StaticPtr.staticPtrKeys2_closure:
         const GHC.StaticPtr.staticPtrKeys2_info;
         const 0;
 },
 sat_sfvop_entry() //  [R1]
         { []
         }
     {offset
       cfvYe: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfvYi; else goto cfvYj;
       cfvYi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfvYj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfvYb_info;
           _sfvoe::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sfvoe::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufvYn; else goto cfvYc;
       ufvYn: // global
           call _cfvYb(R1) args: 0, res: 0, upd: 0;
       cfvYc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfvop_info" {
     sat_sfvop_info:
         const sat_sfvop_entry;
         const 4294967297;
         const 19;
 },
 _cfvYb() //  [R1]
         { []
         }
     {offset
       cfvYb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfvYm; else goto cfvYl;
       cfvYm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfvYl: // global
           _sfvoo::I64 = I64[R1 + 7];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _sfvoo::I64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfvYb_info" {
     block_cfvYb_info:
         const _cfvYb;
         const 65;
         const 30;
 },
 GHC.StaticPtr.staticPtrKeys2_entry() //  [R2]
         { []
         }
     {offset
       cfvYs: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfvYt; else goto cfvYu;
       cfvYt: // global
           R2 = R2;
           R1 = GHC.StaticPtr.staticPtrKeys2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfvYu: // global
           I64[Sp - 8] = block_cfvXq_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvZd; else goto cfvXr;
       ufvZd: // global
           call _cfvXq(R1) args: 0, res: 0, upd: 0;
       cfvXr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrKeys2_info" {
     GHC.StaticPtr.staticPtrKeys2_info:
         const GHC.StaticPtr.staticPtrKeys2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SfvsE_srt+64;
 },
 _cfvXq() //  [R1]
         { []
         }
     {offset
       cfvXq: // global
           if (R1 & 7 == 1) goto cfvYp; else goto cfvYq;
       cfvYp: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfvYq: // global
           P64[Sp - 24] = P64[R1 + 14];
           I64[Sp - 16] = 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 24;
           call _cfvXA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfvXq_info" {
     block_cfvXq_info:
         const _cfvXq;
         const 0;
         const 12884901918;
         const SfvsE_srt+64;
 },
 _cfvXA() //  []
         { []
         }
     {offset
       cfvXA: // global
           _sfvo5::P64 = P64[Sp + 24];
           _sfvoy::I64 = I64[Sp + 8];
           if (_sfvoy::I64 != 0) goto cfvYT; else goto cfvYX;
       cfvYT: // global
           I64[Sp - 8] = block_cfvXF_info;
           R1 = _sfvo5::P64;
           I64[Sp + 8] = _sfvoy::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvZ6; else goto cfvXG;
       ufvZ6: // global
           call _cfvXF(R1) args: 0, res: 0, upd: 0;
       cfvXG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfvYX: // global
           I64[Sp - 8] = block_cfvXP_info;
           R1 = _sfvo5::P64;
           P64[Sp + 24] = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufvZ7; else goto cfvXQ;
       ufvZ7: // global
           call _cfvXP(R1) args: 0, res: 0, upd: 0;
       cfvXQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfvXF() //  [R1]
         { []
         }
     {offset
       cfvXF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfvYW; else goto cfvYV;
       cfvYW: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfvYV: // global
           _sfvoy::I64 = I64[Sp + 16];
           _sfvoD::I64 = I64[I64[R1 + 7] + (_sfvoy::I64 << 3)];
           I64[Hp - 32] = GHC.Word.W64#_con_info;
           I64[Hp - 24] = _sfvoD::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = _sfvoy::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           Sp = Sp + 8;
           call _cfvXA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfvXF_info" {
     block_cfvXF_info:
         const _cfvXF;
         const 132;
         const 12884901918;
         const SfvsE_srt+64;
 },
 _cfvXP() //  [R1]
         { []
         }
     {offset
       cfvXP: // global
           _sfvoe::I64 = I64[I64[R1 + 7]];
           I64[Sp] = block_cfvXU_info;
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _sfvoe::I64;
           if (R1 & 7 != 0) goto ufvZ9; else goto cfvXV;
       ufvZ9: // global
           call _cfvXU(R1) args: 0, res: 0, upd: 0;
       cfvXV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvXP_info" {
     block_cfvXP_info:
         const _cfvXP;
         const 388;
         const 12884901918;
         const SfvsE_srt+64;
 },
 _cfvXU() //  [R1]
         { []
         }
     {offset
       cfvXU: // global
           if (R1 & 7 == 1) goto ufvZ3; else goto cfvYF;
       ufvZ3: // global
           Sp = Sp + 40;
           call _cfvYQ() args: 0, res: 0, upd: 0;
       cfvYF: // global
           I64[Sp] = block_cfvY0_info;
           _sfvoh::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp + 24] = _sfvoh::P64;
           if (R1 & 7 != 0) goto ufvZa; else goto cfvY1;
       ufvZa: // global
           call _cfvY0(R1) args: 0, res: 0, upd: 0;
       cfvY1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvXU_info" {
     block_cfvXU_info:
         const _cfvXU;
         const 900;
         const 12884901918;
         const SfvsE_srt+64;
 },
 _cfvY0() //  [R1]
         { []
         }
     {offset
       cfvY0: // global
           if (R1 & 7 == 1) goto cfvYJ; else goto ufvZ4;
       cfvYJ: // global
           I64[Sp + 16] = block_cfvY5_info;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.StaticPtr.staticPtrKeys2_entry(R2) args: 8, res: 8, upd: 8;
       ufvZ4: // global
           Sp = Sp + 40;
           call _cfvYQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfvY0_info" {
     block_cfvY0_info:
         const _cfvY0;
         const 644;
         const 12884901918;
         const SfvsE_srt+64;
 },
 _cfvY5() //  [R1]
         { []
         }
     {offset
       cfvY5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfvYM; else goto cfvYL;
       cfvYM: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfvYL: // global
           I64[Hp - 48] = sat_sfvop_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfvY5_info" {
     block_cfvY5_info:
         const _cfvY5;
         const 130;
         const 30;
 },
 _cfvYQ() //  []
         { []
         }
     {offset
       cfvYQ: // global
           R1 = lvl1_rfvlH_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.396411078 UTC

[section ""data" . GHC.StaticPtr.staticPtrKeys1_closure" {
     GHC.StaticPtr.staticPtrKeys1_closure:
         const GHC.StaticPtr.staticPtrKeys1_info;
         const 0;
 },
 GHC.StaticPtr.staticPtrKeys1_entry() //  []
         { []
         }
     {offset
       cfw0R: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfw0S; else goto cfw0T;
       cfw0S: // global
           R1 = GHC.StaticPtr.staticPtrKeys1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cfw0T: // global
           (_sfvoL::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] hs_spt_key_count();
           I64[Sp - 16] = block_cfw0p_info;
           R2 = 8;
           _sfvoM::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sfvoL::I64));
           R1 = _sfvoM::I64 << 3;
           I64[Sp - 8] = _sfvoM::I64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrKeys1_info" {
     GHC.StaticPtr.staticPtrKeys1_info:
         const GHC.StaticPtr.staticPtrKeys1_entry;
         const 0;
         const 21474836494;
         const 4294967299;
         const SfvsE_srt+64;
 },
 _cfw0p() //  [R1]
         { []
         }
     {offset
       cfw0p: // global
           _sfvoU::I64 = R1 + 16;
           (_sfvoY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     ‘signed’]  result hints:  [‘signed’] hs_spt_keys(_sfvoU::I64, I64[Sp + 8]);
           _sfvoZ::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sfvoY::I64));
           if (%MO_S_Gt_W64(_sfvoZ::I64, 0)) goto cfw1d; else goto cfw1g;
       cfw1d: // global
           I64[Sp - 16] = _sfvoZ::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = _sfvoU::I64;
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call _cfw0K() args: 0, res: 0, upd: 0;
       cfw1g: // global
           I64[Sp] = block_cfw1f_info;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 8] = R1;
           call GHC.StaticPtr.staticPtrKeys2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfw0p_info" {
     block_cfw0p_info:
         const _cfw0p;
         const 65;
         const 4294967326;
         const SfvsE_srt+64;
 },
 _cfw0K() //  []
         { []
         }
     {offset
       cfw0K: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfw18; else goto cfw17;
       cfw18: // global
           HpAlloc = 40;
           I64[Sp] = block_cfw0K_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cfw17: // global
           _sfvpf::P64 = P64[Sp + 16];
           _sfvph::I64 = I64[Sp + 8];
           if (_sfvph::I64 != 0) goto cfw1a; else goto cfw1b;
       cfw1a: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 24] + (_sfvph::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sfvpf::P64;
           I64[Sp + 8] = _sfvph::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _cfw0K() args: 0, res: 0, upd: 0;
       cfw1b: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _sfvpf::P64;
           Sp = Sp + 16;
           call _cfw0W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfw0K_info" {
     block_cfw0K_info:
         const _cfw0K;
         const 324;
         const 4294967326;
         const SfvsE_srt+64;
 },
 _cfw0W() //  []
         { []
         }
     {offset
       cfw0W: // global
           Hp = Hp + 40;
           _sfvp2::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cfw13; else goto cfw12;
       cfw13: // global
           HpAlloc = 40;
           I64[Sp] = block_cfw0V_info;
           R1 = _sfvp2::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfw12: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 8]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sfvp2::P64;
           I64[Sp + 8] = block_cfw10_info;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.StaticPtr.staticPtrKeys2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfw0V() //  [R1]
         { []
         }
     {offset
       cfw0V: // global
           P64[Sp] = R1;
           call _cfw0W() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfw0V_info" {
     block_cfw0V_info:
         const _cfw0V;
         const 66;
         const 4294967326;
         const SfvsE_srt+64;
 },
 _cfw10() //  [R1]
         { []
         }
     {offset
       cfw10: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfw10_info" {
     block_cfw10_info:
         const _cfw10;
         const 1;
         const 30;
 },
 _cfw1f() //  [R1]
         { []
         }
     {offset
       cfw1f: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfw1f_info" {
     block_cfw1f_info:
         const _cfw1f;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.409626271 UTC

[section ""data" . GHC.StaticPtr.staticPtrKeys_closure" {
     GHC.StaticPtr.staticPtrKeys_closure:
         const GHC.StaticPtr.staticPtrKeys_info;
         const 0;
 },
 GHC.StaticPtr.staticPtrKeys_entry() //  []
         { []
         }
     {offset
       cfw25: // global
           call GHC.StaticPtr.staticPtrKeys1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrKeys_info" {
     GHC.StaticPtr.staticPtrKeys_info:
         const GHC.StaticPtr.staticPtrKeys_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SfvsE_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.413822197 UTC

[section ""data" . GHC.StaticPtr.StaticPtr_closure" {
     GHC.StaticPtr.StaticPtr_closure:
         const GHC.StaticPtr.StaticPtr_info;
 },
 GHC.StaticPtr.StaticPtr_slow() //  [R1]
         { []
         }
     {offset
       cfw2d: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.StaticPtr.StaticPtr_entry(R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.StaticPtr.StaticPtr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfw2i: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfw2m; else goto cfw2l;
       cfw2m: // global
           HpAlloc = 40;
           R1 = GHC.StaticPtr.StaticPtr_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cfw2l: // global
           I64[Hp - 32] = GHC.StaticPtr.StaticPtr_con_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtr_info" {
     GHC.StaticPtr.StaticPtr_info:
         const GHC.StaticPtr.StaticPtr_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 196;
         const GHC.StaticPtr.StaticPtr_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.418647559 UTC

[section ""data" . GHC.StaticPtr.StaticPtrInfo_closure" {
     GHC.StaticPtr.StaticPtrInfo_closure:
         const GHC.StaticPtr.StaticPtrInfo_info;
 },
 GHC.StaticPtr.StaticPtrInfo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfw2z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfw2D; else goto cfw2C;
       cfw2D: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.StaticPtrInfo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfw2C: // global
           I64[Hp - 24] = GHC.StaticPtr.StaticPtrInfo_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtrInfo_info" {
     GHC.StaticPtr.StaticPtrInfo_info:
         const GHC.StaticPtr.StaticPtrInfo_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.422247277 UTC

[section ""cstring" . ifvLb_str" {
     ifvLb_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,105,99,80,116,114,46,83,116,97,116,105,99,80,116,114]
 },
 GHC.StaticPtr.StaticPtr_con_entry() //  [R1]
         { []
         }
     {offset
       cfw2J: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtr_con_info" {
     GHC.StaticPtr.StaticPtr_con_info:
         const GHC.StaticPtr.StaticPtr_con_entry;
         const 8589934594;
         const 1;
         const ifvLb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.425557515 UTC

[section ""cstring" . ifvLd_str" {
     ifvLd_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,105,99,80,116,114,46,83,116,97,116,105,99,80,116,114,73,110,102,111]
 },
 GHC.StaticPtr.StaticPtrInfo_con_entry() //  [R1]
         { []
         }
     {offset
       cfw2P: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtrInfo_con_info" {
     GHC.StaticPtr.StaticPtrInfo_con_info:
         const GHC.StaticPtr.StaticPtrInfo_con_entry;
         const 3;
         const 1;
         const ifvLd_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.428608501 UTC

[section ""relreadonly" . SfvsE_srt" {
     SfvsE_srt:
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.showLitString_closure;
         const GHC.StaticPtr.$w$cshowsPrec_closure;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure;
         const GHC.StaticPtr.$fShowStaticPtrInfo1_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.StaticPtr.staticPtrKeys2_closure;
         const lvl1_rfvlH_closure;
         const GHC.StaticPtr.staticPtrKeys1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.98456521 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:11:13.986434848 UTC

[section ""data" . GHC.StaticPtr.fromStaticPtr_closure" {
     GHC.StaticPtr.fromStaticPtr_closure:
         const GHC.StaticPtr.fromStaticPtr_info;
 },
 GHC.StaticPtr.fromStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfw6K: // global
           R1 = R2;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.fromStaticPtr_info" {
     GHC.StaticPtr.fromStaticPtr_info:
         const GHC.StaticPtr.fromStaticPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.992992181 UTC

[section ""data" . GHC.StaticPtr.$fIsStaticStaticPtr_closure" {
     GHC.StaticPtr.$fIsStaticStaticPtr_closure:
         const GHC.StaticPtr.$fIsStaticStaticPtr_info;
 },
 GHC.StaticPtr.$fIsStaticStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfw6V: // global
           R2 = R2;
           call GHC.Base.id_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fIsStaticStaticPtr_info" {
     GHC.StaticPtr.$fIsStaticStaticPtr_info:
         const GHC.StaticPtr.$fIsStaticStaticPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.996128602 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo6_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo6_bytes:
         I8[] [83,116,97,116,105,99,80,116,114,73,110,102,111,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.997906393 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo5_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo5_bytes:
         I8[] [115,112,73,110,102,111,85,110,105,116,73,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:13.99958645 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo4_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo4_bytes:
         I8[] [115,112,73,110,102,111,77,111,100,117,108,101,78,97,109,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.001203425 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo3_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo3_bytes:
         I8[] [115,112,73,110,102,111,83,114,99,76,111,99,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.002923207 UTC

[section ""cstring" . GHC.StaticPtr.$fShowStaticPtrInfo2_bytes" {
     GHC.StaticPtr.$fShowStaticPtrInfo2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.015887337 UTC

[section ""data" . GHC.StaticPtr.$w$cshowsPrec_closure" {
     GHC.StaticPtr.$w$cshowsPrec_closure:
         const GHC.StaticPtr.$w$cshowsPrec_info;
         const 0;
 },
 GHC.StaticPtr.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       cfw78: // global
           R6 = P64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2,
                                                  R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sfw3n_entry() //  [R1]
         { []
         }
     {offset
       cfw80: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfw81; else goto cfw82;
       cfw81: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw82: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3n_info" {
     sat_sfw3n_info:
         const sat_sfw3n_entry;
         const 1;
         const 16;
 },
 sat_sfw3k_entry() //  [R1, R2]
         { []
         }
     {offset
       cfw8c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfw8i; else goto cfw8j;
       cfw8i: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfw8j: // global
           I64[Sp - 16] = block_cfw89_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufw8o; else goto cfw8a;
       ufw8o: // global
           call _cfw89(R1) args: 0, res: 0, upd: 0;
       cfw8a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfw3k_info" {
     sat_sfw3k_info:
         const sat_sfw3k_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfw89() //  [R1]
         { []
         }
     {offset
       cfw89: // global
           _sfw3e::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfw8f_info;
           R4 = _sfw3e::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfw89_info" {
     block_cfw89_info:
         const _cfw89;
         const 1;
         const 30;
 },
 _cfw8f() //  [R1, R2]
         { []
         }
     {offset
       cfw8f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfw8n; else goto cfw8m;
       cfw8n: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cfw8m: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfw8f_info" {
     block_cfw8f_info:
         const _cfw8f;
         const 0;
         const 30;
 },
 sat_sfw3d_entry() //  [R1, R2]
         { []
         }
     {offset
       cfw8y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfw8E; else goto cfw8F;
       cfw8E: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfw8F: // global
           I64[Sp - 16] = block_cfw8v_info;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufw8K; else goto cfw8w;
       ufw8K: // global
           call _cfw8v(R1) args: 0, res: 0, upd: 0;
       cfw8w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfw3d_info" {
     sat_sfw3d_info:
         const sat_sfw3d_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cfw8v() //  [R1]
         { []
         }
     {offset
       cfw8v: // global
           _sfw37::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cfw8B_info;
           R4 = _sfw37::P64;
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfw8v_info" {
     block_cfw8v_info:
         const _cfw8v;
         const 1;
         const 30;
 },
 _cfw8B() //  [R1, R2]
         { []
         }
     {offset
       cfw8B: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfw8J; else goto cfw8I;
       cfw8J: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 8;
       cfw8I: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfw8B_info" {
     block_cfw8B_info:
         const _cfw8B;
         const 0;
         const 30;
 },
 sat_sfw3p_entry() //  [R1]
         { []
         }
     {offset
       cfw8M: // global
           _sfw3p::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfw8N; else goto cfw8O;
       cfw8O: // global
           Hp = Hp + 128;
           if (Hp > HpLim) (likely: False) goto cfw8Q; else goto cfw8P;
       cfw8Q: // global
           HpAlloc = 128;
           goto cfw8N;
       cfw8N: // global
           R1 = _sfw3p::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw8P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfw3p::P64;
           _sfw33::P64 = P64[_sfw3p::P64 + 16];
           _sfw35::P64 = P64[_sfw3p::P64 + 24];
           _sfw36::P64 = P64[_sfw3p::P64 + 32];
           I64[Hp - 120] = sat_sfw3n_info;
           P64[Hp - 104] = _sfw33::P64;
           I64[Hp - 96] = :_con_info;
           P64[Hp - 88] = GHC.Show.$fShow(,)2_closure;
           P64[Hp - 80] = Hp - 120;
           I64[Hp - 72] = sat_sfw3k_info;
           P64[Hp - 64] = _sfw36::P64;
           I64[Hp - 56] = :_con_info;
           P64[Hp - 48] = Hp - 71;
           P64[Hp - 40] = GHC.Types.[]_closure+1;
           I64[Hp - 32] = sat_sfw3d_info;
           P64[Hp - 24] = _sfw35::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 54;
           R3 = Hp - 94;
           R2 = Hp - 14;
           Sp = Sp - 16;
           call GHC.Show.$fShow(,)_go1_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3p_info" {
     sat_sfw3p_info:
         const sat_sfw3p_entry;
         const 3;
         const 4294967311;
         const Sfwa4_srt;
 },
 sat_sfw3q_entry() //  [R1]
         { []
         }
     {offset
       cfw8R: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfw8T; else goto cfw8U;
       cfw8T: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw8U: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfw7N_info;
           _sfw33::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sfw33::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufw8Y; else goto cfw7O;
       ufw8Y: // global
           call _cfw7N(R1) args: 0, res: 0, upd: 0;
       cfw7O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3q_info" {
     sat_sfw3q_info:
         const sat_sfw3q_entry;
         const 2;
         const 4294967314;
         const Sfwa4_srt;
 },
 _cfw7N() //  [R1]
         { []
         }
     {offset
       cfw7N: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfw8X; else goto cfw8W;
       cfw8X: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfw8W: // global
           _sfw35::P64 = P64[R1 + 7];
           _sfw36::P64 = P64[R1 + 15];
           I64[Hp - 56] = sat_sfw3p_info;
           P64[Hp - 40] = P64[Sp + 8];
           P64[Hp - 32] = _sfw35::P64;
           P64[Hp - 24] = _sfw36::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfw7N_info" {
     block_cfw7N_info:
         const _cfw7N;
         const 1;
         const 4294967326;
         const Sfwa4_srt;
 },
 sat_sfw3r_entry() //  [R1]
         { []
         }
     {offset
       cfw8Z: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfw93; else goto cfw92;
       cfw93: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw92: // global
           _sfw30::P64 = P64[R1 + 16];
           _sfw33::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_sfw3q_info;
           P64[Hp - 8] = _sfw30::P64;
           P64[Hp] = _sfw33::P64;
           R3 = Hp - 24;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfw3r_info" {
     sat_sfw3r_info:
         const sat_sfw3r_entry;
         const 2;
         const 4294967314;
         const Sfwa4_srt;
 },
 sat_sfw3s_entry() //  [R1]
         { []
         }
     {offset
       cfw94: // global
           _sfw3s::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfw95; else goto cfw96;
       cfw96: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfw98; else goto cfw97;
       cfw98: // global
           HpAlloc = 32;
           goto cfw95;
       cfw95: // global
           R1 = _sfw3s::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw97: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfw3s::P64;
           _sfw30::P64 = P64[_sfw3s::P64 + 16];
           _sfw33::P64 = P64[_sfw3s::P64 + 24];
           I64[Hp - 24] = sat_sfw3r_info;
           P64[Hp - 8] = _sfw30::P64;
           P64[Hp] = _sfw33::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3s_info" {
     sat_sfw3s_info:
         const sat_sfw3s_entry;
         const 2;
         const 12884901906;
         const Sfwa4_srt;
 },
 sat_sfw3u_entry() //  [R1]
         { []
         }
     {offset
       cfw9a: // global
           _sfw3u::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfw9b; else goto cfw9c;
       cfw9c: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfw9e; else goto cfw9d;
       cfw9e: // global
           HpAlloc = 56;
           goto cfw9b;
       cfw9b: // global
           R1 = _sfw3u::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw9d: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfw3u::P64;
           _sfw2Z::P64 = P64[_sfw3u::P64 + 16];
           _sfw30::P64 = P64[_sfw3u::P64 + 24];
           _sfw33::P64 = P64[_sfw3u::P64 + 32];
           I64[Hp - 48] = sat_sfw3s_info;
           P64[Hp - 32] = _sfw30::P64;
           P64[Hp - 24] = _sfw33::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 48;
           R3 = Hp - 14;
           R2 = _sfw2Z::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3u_info" {
     sat_sfw3u_info:
         const sat_sfw3u_entry;
         const 3;
         const 30064771087;
         const Sfwa4_srt;
 },
 sat_sfw3w_entry() //  [R1]
         { []
         }
     {offset
       cfw9g: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfw9k; else goto cfw9j;
       cfw9k: // global
           HpAlloc = 64;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw9j: // global
           _sfw2Z::P64 = P64[R1 + 16];
           _sfw30::P64 = P64[R1 + 24];
           _sfw33::P64 = P64[R1 + 32];
           I64[Hp - 56] = sat_sfw3u_info;
           P64[Hp - 40] = _sfw2Z::P64;
           P64[Hp - 32] = _sfw30::P64;
           P64[Hp - 24] = _sfw33::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sfw3w_info" {
     sat_sfw3w_info:
         const sat_sfw3w_entry;
         const 3;
         const 30064771087;
         const Sfwa4_srt;
 },
 sat_sfw3x_entry() //  [R1]
         { []
         }
     {offset
       cfw9l: // global
           _sfw3x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfw9m; else goto cfw9n;
       cfw9n: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfw9p; else goto cfw9o;
       cfw9p: // global
           HpAlloc = 40;
           goto cfw9m;
       cfw9m: // global
           R1 = _sfw3x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw9o: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfw3x::P64;
           _sfw2Z::P64 = P64[_sfw3x::P64 + 16];
           _sfw30::P64 = P64[_sfw3x::P64 + 24];
           _sfw33::P64 = P64[_sfw3x::P64 + 32];
           I64[Hp - 32] = sat_sfw3w_info;
           P64[Hp - 16] = _sfw2Z::P64;
           P64[Hp - 8] = _sfw30::P64;
           P64[Hp] = _sfw33::P64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3x_info" {
     sat_sfw3x_info:
         const sat_sfw3x_entry;
         const 3;
         const 30064771087;
         const Sfwa4_srt;
 },
 sat_sfw3z_entry() //  [R1]
         { []
         }
     {offset
       cfw9r: // global
           _sfw3z::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfw9s; else goto cfw9t;
       cfw9t: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto cfw9v; else goto cfw9u;
       cfw9v: // global
           HpAlloc = 64;
           goto cfw9s;
       cfw9s: // global
           R1 = _sfw3z::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw9u: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfw3z::P64;
           _sfw2Y::P64 = P64[_sfw3z::P64 + 16];
           _sfw2Z::P64 = P64[_sfw3z::P64 + 24];
           _sfw30::P64 = P64[_sfw3z::P64 + 32];
           _sfw33::P64 = P64[_sfw3z::P64 + 40];
           I64[Hp - 56] = sat_sfw3x_info;
           P64[Hp - 40] = _sfw2Z::P64;
           P64[Hp - 32] = _sfw30::P64;
           P64[Hp - 24] = _sfw33::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 56;
           R3 = Hp - 14;
           R2 = _sfw2Y::P64;
           Sp = Sp - 16;
           call GHC.Show.showLitString_entry(R3,
                                             R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3z_info" {
     sat_sfw3z_info:
         const sat_sfw3z_entry;
         const 4;
         const 30064771087;
         const Sfwa4_srt;
 },
 sat_sfw3B_entry() //  [R1]
         { []
         }
     {offset
       cfw9x: // global
           _sfw3B::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfw9y; else goto cfw9z;
       cfw9z: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cfw9B; else goto cfw9A;
       cfw9B: // global
           HpAlloc = 72;
           goto cfw9y;
       cfw9y: // global
           R1 = _sfw3B::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw9A: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfw3B::P64;
           _sfw2Y::P64 = P64[_sfw3B::P64 + 16];
           _sfw2Z::P64 = P64[_sfw3B::P64 + 24];
           _sfw30::P64 = P64[_sfw3B::P64 + 32];
           _sfw33::P64 = P64[_sfw3B::P64 + 40];
           I64[Hp - 64] = sat_sfw3z_info;
           P64[Hp - 48] = _sfw2Y::P64;
           P64[Hp - 40] = _sfw2Z::P64;
           P64[Hp - 32] = _sfw30::P64;
           P64[Hp - 24] = _sfw33::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)3_closure;
           P64[Hp] = Hp - 64;
           R3 = Hp - 14;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3B_info" {
     sat_sfw3B_info:
         const sat_sfw3B_entry;
         const 4;
         const 30064771087;
         const Sfwa4_srt;
 },
 p_sfw32_entry() //  [R1, R2]
         { []
         }
     {offset
       cfw9C: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cfw9G; else goto cfw9F;
       cfw9G: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfw9F: // global
           _sfw2Y::P64 = P64[R1 + 7];
           _sfw2Z::P64 = P64[R1 + 15];
           _sfw30::P64 = P64[R1 + 23];
           I64[Hp - 40] = sat_sfw3B_info;
           P64[Hp - 24] = _sfw2Y::P64;
           P64[Hp - 16] = _sfw2Z::P64;
           P64[Hp - 8] = _sfw30::P64;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sfw32_info" {
     p_sfw32_info:
         const p_sfw32_entry;
         const 3;
         const 30064771080;
         const 4294967301;
         const Sfwa4_srt;
 },
 sat_sfw3E_entry() //  [R1]
         { []
         }
     {offset
       cfw9Q: // global
           _sfw3E::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cfw9R; else goto cfw9S;
       cfw9S: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfw9U; else goto cfw9T;
       cfw9U: // global
           HpAlloc = 24;
           goto cfw9R;
       cfw9R: // global
           R1 = _sfw3E::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfw9T: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sfw3E::P64;
           _sfw31::P64 = P64[_sfw3E::P64 + 16];
           _sfw32::P64 = P64[_sfw3E::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sfw31::P64;
           R2 = Hp - 14;
           R1 = _sfw32::P64;
           Sp = Sp - 16;
           call p_sfw32_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw3E_info" {
     sat_sfw3E_info:
         const sat_sfw3E_entry;
         const 2;
         const 30064771090;
         const Sfwa4_srt;
 },
 GHC.StaticPtr.$w$cshowsPrec_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cfw9Y: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cfwa2; else goto cfwa1;
       cfwa2: // global
           HpAlloc = 88;
           R1 = GHC.StaticPtr.$w$cshowsPrec_closure;
           I64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cfwa1: // global
           I64[Hp - 80] = p_sfw32_info;
           P64[Hp - 72] = R3;
           P64[Hp - 64] = R4;
           P64[Hp - 56] = R5;
           _cfw7c::P64 = Hp - 79;
           if (%MO_S_Lt_W64(R2, 11)) goto cfw9W; else goto cfw9X;
       cfw9W: // global
           Hp = Hp - 56;
           R2 = R6;
           R1 = _cfw7c::P64;
           call p_sfw32_entry(R2, R1) args: 8, res: 0, upd: 8;
       cfw9X: // global
           I64[Hp - 48] = sat_sfw3E_info;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _cfw7c::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$w$cshowsPrec_info" {
     GHC.StaticPtr.$w$cshowsPrec_info:
         const GHC.StaticPtr.$w$cshowsPrec_entry;
         const 0;
         const 64424509454;
         const 21474836480;
         const Sfwa4_srt;
         const 69;
         const GHC.StaticPtr.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.062569002 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_entry() //  [R2, R3,
                                                            R4]
         { []
         }
     {offset
       cfwcu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cfwcy; else goto cfwcz;
       cfwcy: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwcz: // global
           I64[Sp - 24] = block_cfwcr_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ufwcH; else goto cfwcs;
       ufwcH: // global
           call _cfwcr(R1) args: 0, res: 0, upd: 0;
       cfwcs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const Sfwa4_srt+24;
 },
 _cfwcr() //  [R1]
         { []
         }
     {offset
       cfwcr: // global
           I64[Sp] = block_cfwcx_info;
           _sfw3J::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sfw3J::I64;
           if (R1 & 7 != 0) goto ufwcG; else goto cfwcB;
       ufwcG: // global
           call _cfwcx(R1) args: 0, res: 0, upd: 0;
       cfwcB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwcr_info" {
     block_cfwcr_info:
         const _cfwcr;
         const 2;
         const 4294967326;
         const Sfwa4_srt+24;
 },
 _cfwcx() //  [R1]
         { []
         }
     {offset
       cfwcx: // global
           R6 = P64[Sp + 16];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwcx_info" {
     block_cfwcx_info:
         const _cfwcx;
         const 66;
         const 4294967326;
         const Sfwa4_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.069700158 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo7_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.072524517 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cfwd5: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfwd6; else goto cfwd7;
       cfwd6: // global
           R2 = R2;
           R1 = GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwd7: // global
           I64[Sp - 8] = block_cfwd2_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwdb; else goto cfwd3;
       ufwdb: // global
           call _cfwd2(R1) args: 0, res: 0, upd: 0;
       cfwd3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const Sfwa4_srt+24;
 },
 _cfwd2() //  [R1]
         { []
         }
     {offset
       cfwd2: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwd2_info" {
     block_cfwd2_info:
         const _cfwd2;
         const 0;
         const 4294967326;
         const Sfwa4_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.079909105 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo1_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo1_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo1_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo1_entry() //  [R2, R3]
         { []
         }
     {offset
       cfwdu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwdv; else goto cfwdw;
       cfwdv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.$fShowStaticPtrInfo1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwdw: // global
           I64[Sp - 16] = block_cfwdr_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ufwdA; else goto cfwds;
       ufwdA: // global
           call _cfwdr(R1) args: 0, res: 0, upd: 0;
       cfwds: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo1_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo1_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const Sfwa4_srt+24;
 },
 _cfwdr() //  [R1]
         { []
         }
     {offset
       cfwdr: // global
           R6 = P64[Sp + 8];
           R5 = P64[R1 + 23];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.StaticPtr.$w$cshowsPrec_entry(R6,
                                                  R5,
                                                  R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwdr_info" {
     block_cfwdr_info:
         const _cfwdr;
         const 1;
         const 4294967326;
         const Sfwa4_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.085794964 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_closure:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_info;
         const 0;
 },
 GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cfwdP: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.StaticPtr.$fShowStaticPtrInfo1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_info" {
     GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_info:
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Sfwa4_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.089234337 UTC

[section ""data" . GHC.StaticPtr.$fShowStaticPtrInfo_closure" {
     GHC.StaticPtr.$fShowStaticPtrInfo_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure+3;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure+1;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.091816185 UTC

[section ""data" . GHC.StaticPtr.spInfoSrcLoc_closure" {
     GHC.StaticPtr.spInfoSrcLoc_closure:
         const GHC.StaticPtr.spInfoSrcLoc_info;
 },
 GHC.StaticPtr.spInfoSrcLoc_entry() //  [R2]
         { []
         }
     {offset
       cfwe4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfwe5; else goto cfwe6;
       cfwe5: // global
           R2 = R2;
           R1 = GHC.StaticPtr.spInfoSrcLoc_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwe6: // global
           I64[Sp - 8] = block_cfwe1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwea; else goto cfwe2;
       ufwea: // global
           call _cfwe1(R1) args: 0, res: 0, upd: 0;
       cfwe2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.spInfoSrcLoc_info" {
     GHC.StaticPtr.spInfoSrcLoc_info:
         const GHC.StaticPtr.spInfoSrcLoc_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfwe1() //  [R1]
         { []
         }
     {offset
       cfwe1: // global
           R1 = P64[R1 + 23] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwe1_info" {
     block_cfwe1_info:
         const _cfwe1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.097717445 UTC

[section ""data" . GHC.StaticPtr.spInfoModuleName_closure" {
     GHC.StaticPtr.spInfoModuleName_closure:
         const GHC.StaticPtr.spInfoModuleName_info;
 },
 GHC.StaticPtr.spInfoModuleName_entry() //  [R2]
         { []
         }
     {offset
       cfweu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfwev; else goto cfwew;
       cfwev: // global
           R2 = R2;
           R1 = GHC.StaticPtr.spInfoModuleName_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwew: // global
           I64[Sp - 8] = block_cfwer_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufweA; else goto cfwes;
       ufweA: // global
           call _cfwer(R1) args: 0, res: 0, upd: 0;
       cfwes: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.spInfoModuleName_info" {
     GHC.StaticPtr.spInfoModuleName_info:
         const GHC.StaticPtr.spInfoModuleName_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfwer() //  [R1]
         { []
         }
     {offset
       cfwer: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwer_info" {
     block_cfwer_info:
         const _cfwer;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.103788401 UTC

[section ""data" . GHC.StaticPtr.spInfoUnitId_closure" {
     GHC.StaticPtr.spInfoUnitId_closure:
         const GHC.StaticPtr.spInfoUnitId_info;
 },
 GHC.StaticPtr.spInfoUnitId_entry() //  [R2]
         { []
         }
     {offset
       cfweU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfweV; else goto cfweW;
       cfweV: // global
           R2 = R2;
           R1 = GHC.StaticPtr.spInfoUnitId_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfweW: // global
           I64[Sp - 8] = block_cfweR_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwf0; else goto cfweS;
       ufwf0: // global
           call _cfweR(R1) args: 0, res: 0, upd: 0;
       cfweS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.spInfoUnitId_info" {
     GHC.StaticPtr.spInfoUnitId_info:
         const GHC.StaticPtr.spInfoUnitId_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfweR() //  [R1]
         { []
         }
     {offset
       cfweR: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfweR_info" {
     block_cfweR_info:
         const _cfweR;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.109577692 UTC

[section ""data" . GHC.StaticPtr.deRefStaticPtr_closure" {
     GHC.StaticPtr.deRefStaticPtr_closure:
         const GHC.StaticPtr.deRefStaticPtr_info;
 },
 GHC.StaticPtr.deRefStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfwfk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfwfl; else goto cfwfm;
       cfwfl: // global
           R2 = R2;
           R1 = GHC.StaticPtr.deRefStaticPtr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwfm: // global
           I64[Sp - 8] = block_cfwfh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwfq; else goto cfwfi;
       ufwfq: // global
           call _cfwfh(R1) args: 0, res: 0, upd: 0;
       cfwfi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.deRefStaticPtr_info" {
     GHC.StaticPtr.deRefStaticPtr_info:
         const GHC.StaticPtr.deRefStaticPtr_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfwfh() //  [R1]
         { []
         }
     {offset
       cfwfh: // global
           R1 = P64[R1 + 15];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwfh_info" {
     block_cfwfh_info:
         const _cfwfh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.116586505 UTC

[section ""data" . GHC.StaticPtr.staticKey_closure" {
     GHC.StaticPtr.staticKey_closure:
         const GHC.StaticPtr.staticKey_info;
 },
 GHC.StaticPtr.staticKey_entry() //  [R2]
         { []
         }
     {offset
       cfwfI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfwfM; else goto cfwfN;
       cfwfM: // global
           R2 = R2;
           R1 = GHC.StaticPtr.staticKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwfN: // global
           I64[Sp - 8] = block_cfwfF_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwfR; else goto cfwfG;
       ufwfR: // global
           call _cfwfF(R1) args: 0, res: 0, upd: 0;
       cfwfG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticKey_info" {
     GHC.StaticPtr.staticKey_info:
         const GHC.StaticPtr.staticKey_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfwfF() //  [R1]
         { []
         }
     {offset
       cfwfF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfwfQ; else goto cfwfP;
       cfwfQ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfwfP: // global
           _sfw4o::I64 = I64[R1 + 23];
           _sfw4p::I64 = I64[R1 + 31];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = _sfw4o::I64;
           I64[Hp] = _sfw4p::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwfF_info" {
     block_cfwfF_info:
         const _cfwfF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.122796103 UTC

[section ""data" . GHC.StaticPtr.staticPtrInfo_closure" {
     GHC.StaticPtr.staticPtrInfo_closure:
         const GHC.StaticPtr.staticPtrInfo_info;
 },
 GHC.StaticPtr.staticPtrInfo_entry() //  [R2]
         { []
         }
     {offset
       cfwgb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfwgc; else goto cfwgd;
       cfwgc: // global
           R2 = R2;
           R1 = GHC.StaticPtr.staticPtrInfo_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwgd: // global
           I64[Sp - 8] = block_cfwg8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwgh; else goto cfwg9;
       ufwgh: // global
           call _cfwg8(R1) args: 0, res: 0, upd: 0;
       cfwg9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrInfo_info" {
     GHC.StaticPtr.staticPtrInfo_info:
         const GHC.StaticPtr.staticPtrInfo_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cfwg8() //  [R1]
         { []
         }
     {offset
       cfwg8: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwg8_info" {
     block_cfwg8_info:
         const _cfwg8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.127902693 UTC

[section ""cstring" . GHC.StaticPtr.$trModule4_bytes" {
     GHC.StaticPtr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.129827642 UTC

[section ""data" . GHC.StaticPtr.$trModule3_closure" {
     GHC.StaticPtr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.131635576 UTC

[section ""cstring" . GHC.StaticPtr.$trModule2_bytes" {
     GHC.StaticPtr.$trModule2_bytes:
         I8[] [71,72,67,46,83,116,97,116,105,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.133726157 UTC

[section ""data" . GHC.StaticPtr.$trModule1_closure" {
     GHC.StaticPtr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.135643333 UTC

[section ""data" . GHC.StaticPtr.$trModule_closure" {
     GHC.StaticPtr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.StaticPtr.$trModule3_closure+1;
         const GHC.StaticPtr.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.137604638 UTC

[section ""data" . $krep_rfvlo_closure" {
     $krep_rfvlo_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.139516808 UTC

[section ""data" . $krep1_rfvlp_closure" {
     $krep1_rfvlp_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcChar_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.141288238 UTC

[section ""data" . $krep2_rfvlq_closure" {
     $krep2_rfvlq_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcConstraint_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.143855698 UTC

[section ""data" . $krep3_rfvlr_closure" {
     $krep3_rfvlr_closure:
         const :_con_info;
         const $krep1_rfvlp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.146038591 UTC

[section ""data" . $krep4_rfvls_closure" {
     $krep4_rfvls_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep3_rfvlr_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.147954219 UTC

[section ""data" . $krep5_rfvlt_closure" {
     $krep5_rfvlt_closure:
         const :_con_info;
         const $krep_rfvlo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.149878734 UTC

[section ""data" . $krep6_rfvlu_closure" {
     $krep6_rfvlu_closure:
         const :_con_info;
         const $krep_rfvlo_closure+1;
         const $krep5_rfvlt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.151761713 UTC

[section ""data" . $krep7_rfvlv_closure" {
     $krep7_rfvlv_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc(,)_closure;
         const $krep6_rfvlu_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.15374243 UTC

[section ""data" . GHC.StaticPtr.$tcIsStatic1_closure" {
     GHC.StaticPtr.$tcIsStatic1_closure:
         const GHC.Types.KindRepFun_con_info;
         const GHC.Types.krep$*Arr*_closure;
         const $krep2_rfvlq_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.155557597 UTC

[section ""data" . $krep8_rfvlw_closure" {
     $krep8_rfvlw_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.157769856 UTC

[section ""data" . $krep9_rfvlx_closure" {
     $krep9_rfvlx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcWord#_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.159552579 UTC

[section ""cstring" . GHC.StaticPtr.$tcStaticPtrInfo2_bytes" {
     GHC.StaticPtr.$tcStaticPtrInfo2_bytes:
         I8[] [83,116,97,116,105,99,80,116,114,73,110,102,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.161457581 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtrInfo1_closure" {
     GHC.StaticPtr.$tcStaticPtrInfo1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tcStaticPtrInfo2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.163401916 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtrInfo_closure" {
     GHC.StaticPtr.$tcStaticPtrInfo_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tcStaticPtrInfo1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9809180260958205610;
         const 5820027882667808380;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.165483852 UTC

[section ""data" . $krep10_rfvly_closure" {
     $krep10_rfvly_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.StaticPtr.$tcStaticPtrInfo_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.167399617 UTC

[section ""data" . $krep11_rfvlz_closure" {
     $krep11_rfvlz_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rfvlv_closure+1;
         const $krep10_rfvly_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.1697308 UTC

[section ""data" . $krep12_rfvlA_closure" {
     $krep12_rfvlA_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rfvls_closure+1;
         const $krep11_rfvlz_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.172347203 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtrInfo1_closure" {
     GHC.StaticPtr.$tc'StaticPtrInfo1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rfvls_closure+1;
         const $krep12_rfvlA_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.174300146 UTC

[section ""cstring" . GHC.StaticPtr.$tc'StaticPtrInfo3_bytes" {
     GHC.StaticPtr.$tc'StaticPtrInfo3_bytes:
         I8[] [39,83,116,97,116,105,99,80,116,114,73,110,102,111]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.176054291 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtrInfo2_closure" {
     GHC.StaticPtr.$tc'StaticPtrInfo2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tc'StaticPtrInfo3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.178045326 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtrInfo_closure" {
     GHC.StaticPtr.$tc'StaticPtrInfo_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tc'StaticPtrInfo2_closure+1;
         const GHC.StaticPtr.$tc'StaticPtrInfo1_closure+4;
         const 12332739532642204119;
         const 17636067641148941699;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.180047228 UTC

[section ""cstring" . GHC.StaticPtr.$tcStaticPtr2_bytes" {
     GHC.StaticPtr.$tcStaticPtr2_bytes:
         I8[] [83,116,97,116,105,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.182245699 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtr1_closure" {
     GHC.StaticPtr.$tcStaticPtr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tcStaticPtr2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.184175409 UTC

[section ""data" . GHC.StaticPtr.$tcStaticPtr_closure" {
     GHC.StaticPtr.$tcStaticPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tcStaticPtr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 6538784347774135987;
         const 451387415853290179;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.186184803 UTC

[section ""data" . $krep13_rfvlB_closure" {
     $krep13_rfvlB_closure:
         const :_con_info;
         const $krep8_rfvlw_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.188134084 UTC

[section ""data" . $krep14_rfvlC_closure" {
     $krep14_rfvlC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.StaticPtr.$tcStaticPtr_closure+1;
         const $krep13_rfvlB_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.189980356 UTC

[section ""data" . $krep15_rfvlD_closure" {
     $krep15_rfvlD_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_rfvlw_closure+2;
         const $krep14_rfvlC_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.191908138 UTC

[section ""data" . $krep16_rfvlE_closure" {
     $krep16_rfvlE_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rfvly_closure+1;
         const $krep15_rfvlD_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.19422041 UTC

[section ""data" . $krep17_rfvlF_closure" {
     $krep17_rfvlF_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rfvlx_closure+1;
         const $krep16_rfvlE_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.196062792 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtr1_closure" {
     GHC.StaticPtr.$tc'StaticPtr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rfvlx_closure+1;
         const $krep17_rfvlF_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.19796765 UTC

[section ""cstring" . GHC.StaticPtr.$tc'StaticPtr3_bytes" {
     GHC.StaticPtr.$tc'StaticPtr3_bytes:
         I8[] [39,83,116,97,116,105,99,80,116,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.200484588 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtr2_closure" {
     GHC.StaticPtr.$tc'StaticPtr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tc'StaticPtr3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.202384285 UTC

[section ""data" . GHC.StaticPtr.$tc'StaticPtr_closure" {
     GHC.StaticPtr.$tc'StaticPtr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tc'StaticPtr2_closure+1;
         const GHC.StaticPtr.$tc'StaticPtr1_closure+4;
         const 3211798574336347514;
         const 9816765169815661376;
         const 1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.204361077 UTC

[section ""cstring" . GHC.StaticPtr.$tcIsStatic3_bytes" {
     GHC.StaticPtr.$tcIsStatic3_bytes:
         I8[] [73,115,83,116,97,116,105,99]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.206244204 UTC

[section ""data" . GHC.StaticPtr.$tcIsStatic2_closure" {
     GHC.StaticPtr.$tcIsStatic2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.StaticPtr.$tcIsStatic3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.208182253 UTC

[section ""data" . GHC.StaticPtr.$tcIsStatic_closure" {
     GHC.StaticPtr.$tcIsStatic_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.StaticPtr.$trModule_closure+1;
         const GHC.StaticPtr.$tcIsStatic2_closure+1;
         const GHC.StaticPtr.$tcIsStatic1_closure+4;
         const 12653381617957437053;
         const 3253287492145771790;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.214409542 UTC

[section ""data" . GHC.StaticPtr.$wunsafeLookupStaticPtr_closure" {
     GHC.StaticPtr.$wunsafeLookupStaticPtr_closure:
         const GHC.StaticPtr.$wunsafeLookupStaticPtr_info;
 },
 GHC.StaticPtr.$wunsafeLookupStaticPtr_entry() //  [R2, R3]
         { []
         }
     {offset
       cfwhj: // global
           _sfw4z::I64 = R3;
           _sfw4y::I64 = R2;
           if ((Sp + -40) < SpLim) (likely: False) goto cfwhk; else goto cfwhl;
       cfwhl: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cfwhn; else goto cfwhm;
       cfwhn: // global
           HpAlloc = 80;
           goto cfwhk;
       cfwhk: // global
           R3 = _sfw4z::I64;
           R2 = _sfw4y::I64;
           R1 = GHC.StaticPtr.$wunsafeLookupStaticPtr_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwhm: // global
           I64[Hp - 72] = GHC.Word.W64#_con_info;
           I64[Hp - 64] = _sfw4y::I64;
           I64[Hp - 56] = GHC.Word.W64#_con_info;
           I64[Hp - 48] = _sfw4z::I64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = Hp - 55;
           P64[Hp - 24] = GHC.Types.[]_closure+1;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 71;
           P64[Hp] = Hp - 38;
           I64[Sp - 16] = block_cfwhh_info;
           R3 = 0;
           _cfwhg::P64 = Hp - 14;
           R2 = _cfwhg::P64;
           P64[Sp - 8] = _cfwhg::P64;
           Sp = Sp - 16;
           call GHC.List.$wlenAcc_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.$wunsafeLookupStaticPtr_info" {
     GHC.StaticPtr.$wunsafeLookupStaticPtr_info:
         const GHC.StaticPtr.$wunsafeLookupStaticPtr_entry;
         const 0;
         const 14;
         const 12884901900;
 },
 _cfwhh() //  [R1]
         { []
         }
     {offset
       cfwhh: // global
           I64[Sp] = block_cfwhu_info;
           R2 = 8;
           R1 = R1 << 3;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwhh_info" {
     block_cfwhh_info:
         const _cfwhh;
         const 1;
         const 30;
 },
 _cfwhu() //  [R1]
         { []
         }
     {offset
       cfwhu: // global
           P64[Sp - 16] = P64[Sp + 8];
           I64[Sp - 8] = 0;
           P64[Sp] = R1 + 16;
           P64[Sp + 8] = R1;
           Sp = Sp - 16;
           call _cfwhU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfwhu_info" {
     block_cfwhu_info:
         const _cfwhu;
         const 1;
         const 30;
 },
 _cfwhU() //  []
         { []
         }
     {offset
       cfwhU: // global
           _sfw50::P64 = P64[Sp];
           I64[Sp] = block_cfwhX_info;
           R1 = _sfw50::P64;
           if (R1 & 7 != 0) goto ufwim; else goto cfwhZ;
       ufwim: // global
           call _cfwhX(R1) args: 0, res: 0, upd: 0;
       cfwhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfwhX() //  [R1]
         { []
         }
     {offset
       cfwhX: // global
           if (R1 & 7 == 1) goto ufwij; else goto cfwia;
       ufwij: // global
           Sp = Sp + 8;
           call _cfwhD() args: 0, res: 0, upd: 0;
       cfwia: // global
           I64[Sp - 8] = block_cfwi8_info;
           _sfw55::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sfw55::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwin; else goto cfwib;
       ufwin: // global
           call _cfwi8(R1) args: 0, res: 0, upd: 0;
       cfwib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwhX_info" {
     block_cfwhX_info:
         const _cfwhX;
         const 195;
         const 30;
 },
 _cfwhD() //  []
         { []
         }
     {offset
       cfwhD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cfwhH; else goto cfwhG;
       cfwhH: // global
           HpAlloc = 16;
           I64[Sp] = block_cfwhD_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cfwhG: // global
           _sfw4M::P64 = P64[Sp + 16];
           (_sfw4T::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] hs_spt_lookup(I64[Sp + 8]);
           call MO_Touch(_sfw4M::P64);
           if (_sfw4T::I64 == 0) goto cfwhR; else goto cfwhQ;
       cfwhR: // global
           Hp = Hp - 16;
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfwhQ: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           I64[Hp] = _sfw4T::I64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwhD_info" {
     block_cfwhD_info:
         const _cfwhD;
         const 66;
         const 30;
 },
 _cfwi8() //  [R1]
         { []
         }
     {offset
       cfwi8: // global
           _sfw51::I64 = I64[Sp + 16];
           _sfw55::P64 = P64[Sp + 8];
           I64[I64[Sp + 24] + (_sfw51::I64 << 3)] = I64[R1 + 7];
           P64[Sp + 8] = _sfw55::P64;
           I64[Sp + 16] = _sfw51::I64 + 1;
           Sp = Sp + 8;
           call _cfwhU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfwi8_info" {
     block_cfwi8_info:
         const _cfwi8;
         const 388;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.230192206 UTC

[section ""data" . GHC.StaticPtr.unsafeLookupStaticPtr1_closure" {
     GHC.StaticPtr.unsafeLookupStaticPtr1_closure:
         const GHC.StaticPtr.unsafeLookupStaticPtr1_info;
 },
 GHC.StaticPtr.unsafeLookupStaticPtr1_entry() //  [R2]
         { []
         }
     {offset
       cfwjk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cfwjl; else goto cfwjm;
       cfwjl: // global
           R2 = R2;
           R1 = GHC.StaticPtr.unsafeLookupStaticPtr1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwjm: // global
           I64[Sp - 8] = block_cfwjh_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwjq; else goto cfwji;
       ufwjq: // global
           call _cfwjh(R1) args: 0, res: 0, upd: 0;
       cfwji: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.unsafeLookupStaticPtr1_info" {
     GHC.StaticPtr.unsafeLookupStaticPtr1_info:
         const GHC.StaticPtr.unsafeLookupStaticPtr1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cfwjh() //  [R1]
         { []
         }
     {offset
       cfwjh: // global
           R3 = I64[R1 + 15];
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.StaticPtr.$wunsafeLookupStaticPtr_entry(R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwjh_info" {
     block_cfwjh_info:
         const _cfwjh;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.235831364 UTC

[section ""data" . GHC.StaticPtr.unsafeLookupStaticPtr_closure" {
     GHC.StaticPtr.unsafeLookupStaticPtr_closure:
         const GHC.StaticPtr.unsafeLookupStaticPtr_info;
 },
 GHC.StaticPtr.unsafeLookupStaticPtr_entry() //  [R2]
         { []
         }
     {offset
       cfwjF: // global
           R2 = R2;
           call GHC.StaticPtr.unsafeLookupStaticPtr1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.unsafeLookupStaticPtr_info" {
     GHC.StaticPtr.unsafeLookupStaticPtr_info:
         const GHC.StaticPtr.unsafeLookupStaticPtr_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.240075375 UTC

[section ""cstring" . lvl_rfvlG_bytes" {
     lvl_rfvlG_bytes:
         I8[] [71,72,67,47,83,116,97,116,105,99,80,116,114,46,104,115,58,49,51,49,58,52,49,45,55,57,124,108,97,109,98,100,97]
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.242547631 UTC

[section ""data" . lvl1_rfvlH_closure" {
     lvl1_rfvlH_closure:
         const lvl1_rfvlH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_rfvlH_entry() //  [R1]
         { []
         }
     {offset
       cfwjT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cfwjU; else goto cfwjV;
       cfwjU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwjV: // global
           (_cfwjQ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cfwjQ::I64 == 0) goto cfwjS; else goto cfwjR;
       cfwjS: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cfwjR: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cfwjQ::I64;
           R2 = lvl_rfvlG_bytes;
           Sp = Sp - 16;
           call Control.Exception.Base.patError_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_rfvlH_info" {
     lvl1_rfvlH_info:
         const lvl1_rfvlH_entry;
         const 0;
         const 4294967317;
         const Sfwa4_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.251817546 UTC

[section ""data" . GHC.StaticPtr.staticPtrKeys2_closure" {
     GHC.StaticPtr.staticPtrKeys2_closure:
         const GHC.StaticPtr.staticPtrKeys2_info;
         const 0;
 },
 sat_sfw5C_entry() //  [R1]
         { []
         }
     {offset
       cfwkW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cfwl0; else goto cfwl1;
       cfwl0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cfwl1: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cfwkT_info;
           _sfw5r::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sfw5r::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ufwl5; else goto cfwkU;
       ufwl5: // global
           call _cfwkT(R1) args: 0, res: 0, upd: 0;
       cfwkU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sfw5C_info" {
     sat_sfw5C_info:
         const sat_sfw5C_entry;
         const 4294967297;
         const 19;
 },
 _cfwkT() //  [R1]
         { []
         }
     {offset
       cfwkT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cfwl4; else goto cfwl3;
       cfwl4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cfwl3: // global
           _sfw5B::I64 = I64[R1 + 7];
           I64[Hp - 16] = GHC.Fingerprint.Type.Fingerprint_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _sfw5B::I64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cfwkT_info" {
     block_cfwkT_info:
         const _cfwkT;
         const 65;
         const 30;
 },
 GHC.StaticPtr.staticPtrKeys2_entry() //  [R2]
         { []
         }
     {offset
       cfwla: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfwlb; else goto cfwlc;
       cfwlb: // global
           R2 = R2;
           R1 = GHC.StaticPtr.staticPtrKeys2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cfwlc: // global
           I64[Sp - 8] = block_cfwk8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwlV; else goto cfwk9;
       ufwlV: // global
           call _cfwk8(R1) args: 0, res: 0, upd: 0;
       cfwk9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrKeys2_info" {
     GHC.StaticPtr.staticPtrKeys2_info:
         const GHC.StaticPtr.staticPtrKeys2_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Sfwa4_srt+64;
 },
 _cfwk8() //  [R1]
         { []
         }
     {offset
       cfwk8: // global
           if (R1 & 7 == 1) goto cfwl7; else goto cfwl8;
       cfwl7: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cfwl8: // global
           P64[Sp - 24] = P64[R1 + 14];
           I64[Sp - 16] = 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 24;
           call _cfwki() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfwk8_info" {
     block_cfwk8_info:
         const _cfwk8;
         const 0;
         const 12884901918;
         const Sfwa4_srt+64;
 },
 _cfwki() //  []
         { []
         }
     {offset
       cfwki: // global
           _sfw5i::P64 = P64[Sp + 24];
           _sfw5L::I64 = I64[Sp + 8];
           if (_sfw5L::I64 != 0) goto cfwlB; else goto cfwlF;
       cfwlB: // global
           I64[Sp - 8] = block_cfwkn_info;
           R1 = _sfw5i::P64;
           I64[Sp + 8] = _sfw5L::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwlO; else goto cfwko;
       ufwlO: // global
           call _cfwkn(R1) args: 0, res: 0, upd: 0;
       cfwko: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cfwlF: // global
           I64[Sp - 8] = block_cfwkx_info;
           R1 = _sfw5i::P64;
           P64[Sp + 24] = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ufwlP; else goto cfwky;
       ufwlP: // global
           call _cfwkx(R1) args: 0, res: 0, upd: 0;
       cfwky: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cfwkn() //  [R1]
         { []
         }
     {offset
       cfwkn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfwlE; else goto cfwlD;
       cfwlE: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfwlD: // global
           _sfw5L::I64 = I64[Sp + 16];
           _sfw5Q::I64 = I64[I64[R1 + 7] + (_sfw5L::I64 << 3)];
           I64[Hp - 32] = GHC.Word.W64#_con_info;
           I64[Hp - 24] = _sfw5Q::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 16] = _sfw5L::I64 - 1;
           P64[Sp + 24] = Hp - 14;
           Sp = Sp + 8;
           call _cfwki() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfwkn_info" {
     block_cfwkn_info:
         const _cfwkn;
         const 132;
         const 12884901918;
         const Sfwa4_srt+64;
 },
 _cfwkx() //  [R1]
         { []
         }
     {offset
       cfwkx: // global
           _sfw5r::I64 = I64[I64[R1 + 7]];
           I64[Sp] = block_cfwkC_info;
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _sfw5r::I64;
           if (R1 & 7 != 0) goto ufwlR; else goto cfwkD;
       ufwlR: // global
           call _cfwkC(R1) args: 0, res: 0, upd: 0;
       cfwkD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwkx_info" {
     block_cfwkx_info:
         const _cfwkx;
         const 388;
         const 12884901918;
         const Sfwa4_srt+64;
 },
 _cfwkC() //  [R1]
         { []
         }
     {offset
       cfwkC: // global
           if (R1 & 7 == 1) goto ufwlL; else goto cfwln;
       ufwlL: // global
           Sp = Sp + 40;
           call _cfwly() args: 0, res: 0, upd: 0;
       cfwln: // global
           I64[Sp] = block_cfwkI_info;
           _sfw5u::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp + 24] = _sfw5u::P64;
           if (R1 & 7 != 0) goto ufwlS; else goto cfwkJ;
       ufwlS: // global
           call _cfwkI(R1) args: 0, res: 0, upd: 0;
       cfwkJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwkC_info" {
     block_cfwkC_info:
         const _cfwkC;
         const 900;
         const 12884901918;
         const Sfwa4_srt+64;
 },
 _cfwkI() //  [R1]
         { []
         }
     {offset
       cfwkI: // global
           if (R1 & 7 == 1) goto cfwlr; else goto ufwlM;
       cfwlr: // global
           I64[Sp + 16] = block_cfwkN_info;
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.StaticPtr.staticPtrKeys2_entry(R2) args: 8, res: 8, upd: 8;
       ufwlM: // global
           Sp = Sp + 40;
           call _cfwly() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfwkI_info" {
     block_cfwkI_info:
         const _cfwkI;
         const 644;
         const 12884901918;
         const Sfwa4_srt+64;
 },
 _cfwkN() //  [R1]
         { []
         }
     {offset
       cfwkN: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cfwlu; else goto cfwlt;
       cfwlu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfwlt: // global
           I64[Hp - 48] = sat_sfw5C_info;
           P64[Hp - 32] = P64[Sp + 8];
           I64[Hp - 24] = I64[Sp + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 48;
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwkN_info" {
     block_cfwkN_info:
         const _cfwkN;
         const 130;
         const 30;
 },
 _cfwly() //  []
         { []
         }
     {offset
       cfwly: // global
           R1 = lvl1_rfvlH_closure;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.276720814 UTC

[section ""data" . GHC.StaticPtr.staticPtrKeys1_closure" {
     GHC.StaticPtr.staticPtrKeys1_closure:
         const GHC.StaticPtr.staticPtrKeys1_info;
         const 0;
 },
 GHC.StaticPtr.staticPtrKeys1_entry() //  []
         { []
         }
     {offset
       cfwnP: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cfwnQ; else goto cfwnR;
       cfwnQ: // global
           R1 = GHC.StaticPtr.staticPtrKeys1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cfwnR: // global
           (_sfw5Y::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] hs_spt_key_count();
           I64[Sp - 16] = block_cfwnn_info;
           R2 = 8;
           _sfw5Z::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sfw5Y::I64));
           R1 = _sfw5Z::I64 << 3;
           I64[Sp - 8] = _sfw5Z::I64;
           Sp = Sp - 16;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrKeys1_info" {
     GHC.StaticPtr.staticPtrKeys1_info:
         const GHC.StaticPtr.staticPtrKeys1_entry;
         const 0;
         const 21474836494;
         const 4294967299;
         const Sfwa4_srt+64;
 },
 _cfwnn() //  [R1]
         { []
         }
     {offset
       cfwnn: // global
           _sfw67::I64 = R1 + 16;
           (_sfw6b::I64) = call "ccall" arg hints:  [PtrHint,
                                                     ‘signed’]  result hints:  [‘signed’] hs_spt_keys(_sfw67::I64, I64[Sp + 8]);
           _sfw6c::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sfw6b::I64));
           if (%MO_S_Gt_W64(_sfw6c::I64, 0)) goto cfwob; else goto cfwoe;
       cfwob: // global
           I64[Sp - 16] = _sfw6c::I64 - 1;
           P64[Sp - 8] = GHC.Types.[]_closure+1;
           I64[Sp] = _sfw67::I64;
           P64[Sp + 8] = R1;
           Sp = Sp - 24;
           call _cfwnI() args: 0, res: 0, upd: 0;
       cfwoe: // global
           I64[Sp] = block_cfwod_info;
           R2 = GHC.Types.[]_closure+1;
           P64[Sp + 8] = R1;
           call GHC.StaticPtr.staticPtrKeys2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwnn_info" {
     block_cfwnn_info:
         const _cfwnn;
         const 65;
         const 4294967326;
         const Sfwa4_srt+64;
 },
 _cfwnI() //  []
         { []
         }
     {offset
       cfwnI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfwo6; else goto cfwo5;
       cfwo6: // global
           HpAlloc = 40;
           I64[Sp] = block_cfwnI_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cfwo5: // global
           _sfw6s::P64 = P64[Sp + 16];
           _sfw6u::I64 = I64[Sp + 8];
           if (_sfw6u::I64 != 0) goto cfwo8; else goto cfwo9;
       cfwo8: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 24] + (_sfw6u::I64 << 3)];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sfw6s::P64;
           I64[Sp + 8] = _sfw6u::I64 - 1;
           P64[Sp + 16] = Hp - 14;
           call _cfwnI() args: 0, res: 0, upd: 0;
       cfwo9: // global
           Hp = Hp - 40;
           P64[Sp + 16] = _sfw6s::P64;
           Sp = Sp + 16;
           call _cfwnU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfwnI_info" {
     block_cfwnI_info:
         const _cfwnI;
         const 324;
         const 4294967326;
         const Sfwa4_srt+64;
 },
 _cfwnU() //  []
         { []
         }
     {offset
       cfwnU: // global
           Hp = Hp + 40;
           _sfw6f::P64 = P64[Sp];
           if (Hp > HpLim) (likely: False) goto cfwo1; else goto cfwo0;
       cfwo1: // global
           HpAlloc = 40;
           I64[Sp] = block_cfwnT_info;
           R1 = _sfw6f::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cfwo0: // global
           I64[Hp - 32] = GHC.Ptr.Ptr_con_info;
           I64[Hp - 24] = I64[I64[Sp + 8]];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = _sfw6f::P64;
           I64[Sp + 8] = block_cfwnY_info;
           R2 = Hp - 14;
           Sp = Sp + 8;
           call GHC.StaticPtr.staticPtrKeys2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cfwnT() //  [R1]
         { []
         }
     {offset
       cfwnT: // global
           P64[Sp] = R1;
           call _cfwnU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cfwnT_info" {
     block_cfwnT_info:
         const _cfwnT;
         const 66;
         const 4294967326;
         const Sfwa4_srt+64;
 },
 _cfwnY() //  [R1]
         { []
         }
     {offset
       cfwnY: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwnY_info" {
     block_cfwnY_info:
         const _cfwnY;
         const 1;
         const 30;
 },
 _cfwod() //  [R1]
         { []
         }
     {offset
       cfwod: // global
           call MO_Touch(P64[Sp + 8]);
           R1 = R1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cfwod_info" {
     block_cfwod_info:
         const _cfwod;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.292149649 UTC

[section ""data" . GHC.StaticPtr.staticPtrKeys_closure" {
     GHC.StaticPtr.staticPtrKeys_closure:
         const GHC.StaticPtr.staticPtrKeys_info;
         const 0;
 },
 GHC.StaticPtr.staticPtrKeys_entry() //  []
         { []
         }
     {offset
       cfwpf: // global
           call GHC.StaticPtr.staticPtrKeys1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.staticPtrKeys_info" {
     GHC.StaticPtr.staticPtrKeys_info:
         const GHC.StaticPtr.staticPtrKeys_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Sfwa4_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.296435174 UTC

[section ""data" . GHC.StaticPtr.StaticPtr_closure" {
     GHC.StaticPtr.StaticPtr_closure:
         const GHC.StaticPtr.StaticPtr_info;
 },
 GHC.StaticPtr.StaticPtr_slow() //  [R1]
         { []
         }
     {offset
       cfwpn: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.StaticPtr.StaticPtr_entry(R5,
                                              R4,
                                              R3,
                                              R2,
                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.StaticPtr.StaticPtr_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       cfwps: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cfwpw; else goto cfwpv;
       cfwpw: // global
           HpAlloc = 40;
           R1 = GHC.StaticPtr.StaticPtr_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       cfwpv: // global
           I64[Hp - 32] = GHC.StaticPtr.StaticPtr_con_info;
           P64[Hp - 24] = R4;
           P64[Hp - 16] = R5;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtr_info" {
     GHC.StaticPtr.StaticPtr_info:
         const GHC.StaticPtr.StaticPtr_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 196;
         const GHC.StaticPtr.StaticPtr_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.302143574 UTC

[section ""data" . GHC.StaticPtr.StaticPtrInfo_closure" {
     GHC.StaticPtr.StaticPtrInfo_closure:
         const GHC.StaticPtr.StaticPtrInfo_info;
 },
 GHC.StaticPtr.StaticPtrInfo_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cfwpK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cfwpO; else goto cfwpN;
       cfwpO: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.StaticPtr.StaticPtrInfo_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cfwpN: // global
           I64[Hp - 24] = GHC.StaticPtr.StaticPtrInfo_con_info;
           P64[Hp - 16] = R2;
           P64[Hp - 8] = R3;
           P64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtrInfo_info" {
     GHC.StaticPtr.StaticPtrInfo_info:
         const GHC.StaticPtr.StaticPtrInfo_entry;
         const 0;
         const 14;
         const 12884901911;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.306095601 UTC

[section ""cstring" . ifwpW_str" {
     ifwpW_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,105,99,80,116,114,46,83,116,97,116,105,99,80,116,114]
 },
 GHC.StaticPtr.StaticPtr_con_entry() //  [R1]
         { []
         }
     {offset
       cfwpV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtr_con_info" {
     GHC.StaticPtr.StaticPtr_con_info:
         const GHC.StaticPtr.StaticPtr_con_entry;
         const 8589934594;
         const 1;
         const ifwpW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.309840694 UTC

[section ""cstring" . ifwq3_str" {
     ifwq3_str:
         I8[] [98,97,115,101,58,71,72,67,46,83,116,97,116,105,99,80,116,114,46,83,116,97,116,105,99,80,116,114,73,110,102,111]
 },
 GHC.StaticPtr.StaticPtrInfo_con_entry() //  [R1]
         { []
         }
     {offset
       cfwq2: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.StaticPtr.StaticPtrInfo_con_info" {
     GHC.StaticPtr.StaticPtrInfo_con_info:
         const GHC.StaticPtr.StaticPtrInfo_con_entry;
         const 3;
         const 1;
         const ifwq3_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:11:14.313194302 UTC

[section ""relreadonly" . Sfwa4_srt" {
     Sfwa4_srt:
         const GHC.Show.$fShow(,)_go1_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Show.showLitString_closure;
         const GHC.StaticPtr.$w$cshowsPrec_closure;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshowsPrec_closure;
         const GHC.StaticPtr.$fShowStaticPtrInfo_$cshow_closure;
         const GHC.StaticPtr.$fShowStaticPtrInfo1_closure;
         const Control.Exception.Base.patError_closure;
         const GHC.StaticPtr.staticPtrKeys2_closure;
         const lvl1_rfvlH_closure;
         const GHC.StaticPtr.staticPtrKeys1_closure;
 }]

