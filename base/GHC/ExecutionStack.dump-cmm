
==================== Output Cmm ====================
2018-03-16 16:08:34.662171313 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:34.662712104 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule4_bytes" {
     GHC.ExecutionStack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.663273149 UTC

[section ""data" . GHC.ExecutionStack.$trModule3_closure" {
     GHC.ExecutionStack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.663825127 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule2_bytes" {
     GHC.ExecutionStack.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.664401904 UTC

[section ""data" . GHC.ExecutionStack.$trModule1_closure" {
     GHC.ExecutionStack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.664936002 UTC

[section ""data" . GHC.ExecutionStack.$trModule_closure" {
     GHC.ExecutionStack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.$trModule3_closure+1;
         const GHC.ExecutionStack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.666210654 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace1_closure" {
     GHC.ExecutionStack.getStackTrace1_closure:
         const GHC.ExecutionStack.getStackTrace1_info;
         const 0;
 },
 sat_sdnA7_entry() //  [R1]
         { info_tbl: [(cdnAA,
                       label: sat_sdnA7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnAA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnAB; else goto cdnAC;
       cdnAB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnAC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnAt_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnAJ; else goto cdnAu;
       udnAJ: // global
           call _cdnAt(R1) args: 0, res: 0, upd: 0;
       cdnAu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnAt() //  [R1]
         { info_tbl: [(cdnAt,
                       label: block_cdnAt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnAt: // global
           if (R1 & 7 == 1) goto cdnAx; else goto cdnAy;
       cdnAx: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnAy: // global
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.getStackTrace1_entry() //  []
         { info_tbl: [(cdnAK,
                       label: GHC.ExecutionStack.getStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnAK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnAL; else goto cdnAM;
       cdnAL: // global
           R1 = GHC.ExecutionStack.getStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnAM: // global
           I64[Sp - 8] = block_cdnAn_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnAn() //  [R1]
         { info_tbl: [(cdnAn,
                       label: block_cdnAn_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnAn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnAP; else goto cdnAO;
       cdnAP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnAO: // global
           I64[Hp - 16] = sat_sdnA7_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.667796853 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace_closure" {
     GHC.ExecutionStack.getStackTrace_closure:
         const GHC.ExecutionStack.getStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.getStackTrace_entry() //  []
         { info_tbl: [(cdnAV,
                       label: GHC.ExecutionStack.getStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnAV: // global
           call GHC.ExecutionStack.getStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.669436268 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace1_closure" {
     GHC.ExecutionStack.showStackTrace1_closure:
         const GHC.ExecutionStack.showStackTrace1_info;
         const 0;
 },
 sat_sdnAg_entry() //  [R1]
         { info_tbl: [(cdnBr,
                       label: sat_sdnAg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnBr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnBs; else goto cdnBt;
       cdnBs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnBt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnAh_entry() //  [R1]
         { info_tbl: [(cdnBu,
                       label: sat_sdnAh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnBu: // global
           _sdnAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnBv; else goto cdnBw;
       cdnBw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnBy; else goto cdnBx;
       cdnBy: // global
           HpAlloc = 24;
           goto cdnBv;
       cdnBv: // global
           R1 = _sdnAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnBx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdnAh::P64;
           _sdnAf::P64 = P64[_sdnAh::P64 + 16];
           I64[Hp - 16] = sat_sdnAg_info;
           P64[Hp] = _sdnAf::P64;
           R3 = Hp - 16;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnAi_entry() //  [R1]
         { info_tbl: [(cdnBD,
                       label: sat_sdnAi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnBD: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnBE; else goto cdnBF;
       cdnBE: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnBF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnB8_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnBX; else goto cdnB9;
       udnBX: // global
           call _cdnB8(R1) args: 0, res: 0, upd: 0;
       cdnB9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnB8() //  [R1]
         { info_tbl: [(cdnB8,
                       label: block_cdnB8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnB8: // global
           if (R1 & 7 == 1) goto udnBT; else goto cdnBB;
       udnBT: // global
           Sp = Sp + 8;
           call _cdnBM() args: 0, res: 0, upd: 0;
       cdnBB: // global
           I64[Sp] = block_cdnBe_info;
           R2 = P64[R1 + 6];
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdnBe() //  [R1]
         { info_tbl: [(cdnBe,
                       label: block_cdnBe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnBe: // global
           if (R1 & 7 == 1) goto udnBU; else goto cdnBO;
       udnBU: // global
           Sp = Sp + 8;
           call _cdnBM() args: 0, res: 0, upd: 0;
       cdnBO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnBR; else goto cdnBQ;
       cdnBR: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnBQ: // global
           _sdnAf::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_sdnAh_info;
           P64[Hp - 16] = _sdnAf::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _cdnBM() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnBM: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.showStackTrace1_entry() //  []
         { info_tbl: [(cdnBY,
                       label: GHC.ExecutionStack.showStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnBY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnBZ; else goto cdnC0;
       cdnBZ: // global
           R1 = GHC.ExecutionStack.showStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnC0: // global
           I64[Sp - 8] = block_cdnB2_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnB2() //  [R1]
         { info_tbl: [(cdnB2,
                       label: block_cdnB2_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnB2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnC3; else goto cdnC2;
       cdnC3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnC2: // global
           I64[Hp - 16] = sat_sdnAi_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.671870917 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace_closure" {
     GHC.ExecutionStack.showStackTrace_closure:
         const GHC.ExecutionStack.showStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.showStackTrace_entry() //  []
         { info_tbl: [(cdnC8,
                       label: GHC.ExecutionStack.showStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnC8: // global
           call GHC.ExecutionStack.showStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.6725776 UTC

[section ""relreadonly" . SdnAQ_srt" {
     SdnAQ_srt:
         const GHC.ExecutionStack.Internal.stackFrames_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.ExecutionStack.getStackTrace1_closure;
         const GHC.ExecutionStack.showStackTrace1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.673119833 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:34.673657225 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule4_bytes" {
     GHC.ExecutionStack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.674196573 UTC

[section ""data" . GHC.ExecutionStack.$trModule3_closure" {
     GHC.ExecutionStack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.674794675 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule2_bytes" {
     GHC.ExecutionStack.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.675323387 UTC

[section ""data" . GHC.ExecutionStack.$trModule1_closure" {
     GHC.ExecutionStack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.675867005 UTC

[section ""data" . GHC.ExecutionStack.$trModule_closure" {
     GHC.ExecutionStack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.$trModule3_closure+1;
         const GHC.ExecutionStack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.676902834 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace1_closure" {
     GHC.ExecutionStack.getStackTrace1_closure:
         const GHC.ExecutionStack.getStackTrace1_info;
         const 0;
 },
 sat_sdnA7_entry() //  [R1]
         { info_tbl: [(cdnCs,
                       label: sat_sdnA7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnCs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnCt; else goto cdnCu;
       cdnCt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnCu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnCl_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnCB; else goto cdnCm;
       udnCB: // global
           call _cdnCl(R1) args: 0, res: 0, upd: 0;
       cdnCm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnCl() //  [R1]
         { info_tbl: [(cdnCl,
                       label: block_cdnCl_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnCl: // global
           if (R1 & 7 == 1) goto cdnCp; else goto cdnCq;
       cdnCp: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnCq: // global
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.getStackTrace1_entry() //  []
         { info_tbl: [(cdnCC,
                       label: GHC.ExecutionStack.getStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnCC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnCD; else goto cdnCE;
       cdnCD: // global
           R1 = GHC.ExecutionStack.getStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnCE: // global
           I64[Sp - 8] = block_cdnCf_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnCf() //  [R1]
         { info_tbl: [(cdnCf,
                       label: block_cdnCf_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnCf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnCH; else goto cdnCG;
       cdnCH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnCG: // global
           I64[Hp - 16] = sat_sdnA7_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.67849528 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace_closure" {
     GHC.ExecutionStack.getStackTrace_closure:
         const GHC.ExecutionStack.getStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.getStackTrace_entry() //  []
         { info_tbl: [(cdnCM,
                       label: GHC.ExecutionStack.getStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnCM: // global
           call GHC.ExecutionStack.getStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.680085312 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace1_closure" {
     GHC.ExecutionStack.showStackTrace1_closure:
         const GHC.ExecutionStack.showStackTrace1_info;
         const 0;
 },
 sat_sdnAg_entry() //  [R1]
         { info_tbl: [(cdnDi,
                       label: sat_sdnAg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnDi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnDj; else goto cdnDk;
       cdnDj: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnDk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnAh_entry() //  [R1]
         { info_tbl: [(cdnDl,
                       label: sat_sdnAh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnDl: // global
           _sdnAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnDm; else goto cdnDn;
       cdnDn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnDp; else goto cdnDo;
       cdnDp: // global
           HpAlloc = 24;
           goto cdnDm;
       cdnDm: // global
           R1 = _sdnAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnDo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdnAh::P64;
           _sdnAf::P64 = P64[_sdnAh::P64 + 16];
           I64[Hp - 16] = sat_sdnAg_info;
           P64[Hp] = _sdnAf::P64;
           R3 = Hp - 16;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnAi_entry() //  [R1]
         { info_tbl: [(cdnDu,
                       label: sat_sdnAi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnDu: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnDv; else goto cdnDw;
       cdnDv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnDw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnCZ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnDO; else goto cdnD0;
       udnDO: // global
           call _cdnCZ(R1) args: 0, res: 0, upd: 0;
       cdnD0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnCZ() //  [R1]
         { info_tbl: [(cdnCZ,
                       label: block_cdnCZ_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnCZ: // global
           if (R1 & 7 == 1) goto udnDK; else goto cdnDs;
       udnDK: // global
           Sp = Sp + 8;
           call _cdnDD() args: 0, res: 0, upd: 0;
       cdnDs: // global
           I64[Sp] = block_cdnD5_info;
           R2 = P64[R1 + 6];
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdnD5() //  [R1]
         { info_tbl: [(cdnD5,
                       label: block_cdnD5_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnD5: // global
           if (R1 & 7 == 1) goto udnDL; else goto cdnDF;
       udnDL: // global
           Sp = Sp + 8;
           call _cdnDD() args: 0, res: 0, upd: 0;
       cdnDF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnDI; else goto cdnDH;
       cdnDI: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnDH: // global
           _sdnAf::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_sdnAh_info;
           P64[Hp - 16] = _sdnAf::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _cdnDD() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnDD: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.showStackTrace1_entry() //  []
         { info_tbl: [(cdnDP,
                       label: GHC.ExecutionStack.showStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnDP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnDQ; else goto cdnDR;
       cdnDQ: // global
           R1 = GHC.ExecutionStack.showStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnDR: // global
           I64[Sp - 8] = block_cdnCT_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnCT() //  [R1]
         { info_tbl: [(cdnCT,
                       label: block_cdnCT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnCT: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnDU; else goto cdnDT;
       cdnDU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnDT: // global
           I64[Hp - 16] = sat_sdnAi_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.682524891 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace_closure" {
     GHC.ExecutionStack.showStackTrace_closure:
         const GHC.ExecutionStack.showStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.showStackTrace_entry() //  []
         { info_tbl: [(cdnDZ,
                       label: GHC.ExecutionStack.showStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnDZ: // global
           call GHC.ExecutionStack.showStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.683254824 UTC

[section ""relreadonly" . SdnAQ_srt" {
     SdnAQ_srt:
         const GHC.ExecutionStack.Internal.stackFrames_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.ExecutionStack.getStackTrace1_closure;
         const GHC.ExecutionStack.showStackTrace1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.68407427 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:34.685236784 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule4_bytes" {
     GHC.ExecutionStack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.687050754 UTC

[section ""data" . GHC.ExecutionStack.$trModule3_closure" {
     GHC.ExecutionStack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.688711151 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule2_bytes" {
     GHC.ExecutionStack.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.690462075 UTC

[section ""data" . GHC.ExecutionStack.$trModule1_closure" {
     GHC.ExecutionStack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.692187679 UTC

[section ""data" . GHC.ExecutionStack.$trModule_closure" {
     GHC.ExecutionStack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.$trModule3_closure+1;
         const GHC.ExecutionStack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.69581814 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace1_closure" {
     GHC.ExecutionStack.getStackTrace1_closure:
         const GHC.ExecutionStack.getStackTrace1_info;
         const 0;
 },
 sat_sdnA7_entry() //  [R1]
         { info_tbl: [(cdnEo,
                       label: sat_sdnA7_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnEo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnEp; else goto cdnEq;
       cdnEp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnEq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnEh_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnEx; else goto cdnEi;
       udnEx: // global
           call _cdnEh(R1) args: 0, res: 0, upd: 0;
       cdnEi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnEh() //  [R1]
         { info_tbl: [(cdnEh,
                       label: block_cdnEh_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnEh: // global
           if (R1 & 7 == 1) goto cdnEl; else goto cdnEm;
       cdnEl: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnEm: // global
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.getStackTrace1_entry() //  []
         { info_tbl: [(cdnEy,
                       label: GHC.ExecutionStack.getStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnEy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnEz; else goto cdnEA;
       cdnEz: // global
           R1 = GHC.ExecutionStack.getStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnEA: // global
           I64[Sp - 8] = block_cdnEb_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnEb() //  [R1]
         { info_tbl: [(cdnEb,
                       label: block_cdnEb_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnEb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnED; else goto cdnEC;
       cdnED: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnEC: // global
           I64[Hp - 16] = sat_sdnA7_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.705598408 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace_closure" {
     GHC.ExecutionStack.getStackTrace_closure:
         const GHC.ExecutionStack.getStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.getStackTrace_entry() //  []
         { info_tbl: [(cdnF2,
                       label: GHC.ExecutionStack.getStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnF2: // global
           call GHC.ExecutionStack.getStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.709855904 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace1_closure" {
     GHC.ExecutionStack.showStackTrace1_closure:
         const GHC.ExecutionStack.showStackTrace1_info;
         const 0;
 },
 sat_sdnAg_entry() //  [R1]
         { info_tbl: [(cdnFC,
                       label: sat_sdnAg_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnFC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnFD; else goto cdnFE;
       cdnFD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnFE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnAh_entry() //  [R1]
         { info_tbl: [(cdnFF,
                       label: sat_sdnAh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnFF: // global
           _sdnAh::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnFG; else goto cdnFH;
       cdnFH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnFJ; else goto cdnFI;
       cdnFJ: // global
           HpAlloc = 24;
           goto cdnFG;
       cdnFG: // global
           R1 = _sdnAh::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnFI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdnAh::P64;
           _sdnAf::P64 = P64[_sdnAh::P64 + 16];
           I64[Hp - 16] = sat_sdnAg_info;
           P64[Hp] = _sdnAf::P64;
           R3 = Hp - 16;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnAi_entry() //  [R1]
         { info_tbl: [(cdnFO,
                       label: sat_sdnAi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnFO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnFP; else goto cdnFQ;
       cdnFP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnFQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnFj_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnG8; else goto cdnFk;
       udnG8: // global
           call _cdnFj(R1) args: 0, res: 0, upd: 0;
       cdnFk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnFj() //  [R1]
         { info_tbl: [(cdnFj,
                       label: block_cdnFj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnFj: // global
           if (R1 & 7 == 1) goto udnG4; else goto cdnFM;
       udnG4: // global
           Sp = Sp + 8;
           call _cdnFX() args: 0, res: 0, upd: 0;
       cdnFM: // global
           I64[Sp] = block_cdnFp_info;
           R2 = P64[R1 + 6];
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdnFp() //  [R1]
         { info_tbl: [(cdnFp,
                       label: block_cdnFp_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnFp: // global
           if (R1 & 7 == 1) goto udnG5; else goto cdnFZ;
       udnG5: // global
           Sp = Sp + 8;
           call _cdnFX() args: 0, res: 0, upd: 0;
       cdnFZ: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnG2; else goto cdnG1;
       cdnG2: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnG1: // global
           _sdnAf::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_sdnAh_info;
           P64[Hp - 16] = _sdnAf::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _cdnFX() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnFX: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.showStackTrace1_entry() //  []
         { info_tbl: [(cdnG9,
                       label: GHC.ExecutionStack.showStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnG9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnGa; else goto cdnGb;
       cdnGa: // global
           R1 = GHC.ExecutionStack.showStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnGb: // global
           I64[Sp - 8] = block_cdnFd_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnFd() //  [R1]
         { info_tbl: [(cdnFd,
                       label: block_cdnFd_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnFd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnGe; else goto cdnGd;
       cdnGe: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnGd: // global
           I64[Hp - 16] = sat_sdnAi_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.726191771 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace_closure" {
     GHC.ExecutionStack.showStackTrace_closure:
         const GHC.ExecutionStack.showStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.showStackTrace_entry() //  []
         { info_tbl: [(cdnGU,
                       label: GHC.ExecutionStack.showStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnGU: // global
           call GHC.ExecutionStack.showStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.729512603 UTC

[section ""relreadonly" . SdnAQ_srt" {
     SdnAQ_srt:
         const GHC.ExecutionStack.Internal.stackFrames_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.ExecutionStack.getStackTrace1_closure;
         const GHC.ExecutionStack.showStackTrace1_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.790397152 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:08:34.791540946 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule4_bytes" {
     GHC.ExecutionStack.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.793394635 UTC

[section ""data" . GHC.ExecutionStack.$trModule3_closure" {
     GHC.ExecutionStack.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.79527375 UTC

[section ""cstring" . GHC.ExecutionStack.$trModule2_bytes" {
     GHC.ExecutionStack.$trModule2_bytes:
         I8[] [71,72,67,46,69,120,101,99,117,116,105,111,110,83,116,97,99,107]
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.797230681 UTC

[section ""data" . GHC.ExecutionStack.$trModule1_closure" {
     GHC.ExecutionStack.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.ExecutionStack.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.7993954 UTC

[section ""data" . GHC.ExecutionStack.$trModule_closure" {
     GHC.ExecutionStack.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.ExecutionStack.$trModule3_closure+1;
         const GHC.ExecutionStack.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.802149703 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace1_closure" {
     GHC.ExecutionStack.getStackTrace1_closure:
         const GHC.ExecutionStack.getStackTrace1_info;
         const 0;
 },
 sat_sdnH8_entry() //  [R1]
         { info_tbl: [(cdnHG,
                       label: sat_sdnH8_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnHG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnHH; else goto cdnHI;
       cdnHH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnHI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnHz_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnHP; else goto cdnHA;
       udnHP: // global
           call _cdnHz(R1) args: 0, res: 0, upd: 0;
       cdnHA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnHz() //  [R1]
         { info_tbl: [(cdnHz,
                       label: block_cdnHz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnHz: // global
           if (R1 & 7 == 1) goto cdnHD; else goto cdnHE;
       cdnHD: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cdnHE: // global
           R2 = P64[R1 + 6];
           Sp = Sp + 8;
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.getStackTrace1_entry() //  []
         { info_tbl: [(cdnHQ,
                       label: GHC.ExecutionStack.getStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnHQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnHR; else goto cdnHS;
       cdnHR: // global
           R1 = GHC.ExecutionStack.getStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnHS: // global
           I64[Sp - 8] = block_cdnHt_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnHt() //  [R1]
         { info_tbl: [(cdnHt,
                       label: block_cdnHt_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnHt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnHV; else goto cdnHU;
       cdnHV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnHU: // global
           I64[Hp - 16] = sat_sdnH8_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.814752943 UTC

[section ""data" . GHC.ExecutionStack.getStackTrace_closure" {
     GHC.ExecutionStack.getStackTrace_closure:
         const GHC.ExecutionStack.getStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.getStackTrace_entry() //  []
         { info_tbl: [(cdnIq,
                       label: GHC.ExecutionStack.getStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnIq: // global
           call GHC.ExecutionStack.getStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.821929288 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace1_closure" {
     GHC.ExecutionStack.showStackTrace1_closure:
         const GHC.ExecutionStack.showStackTrace1_info;
         const 0;
 },
 sat_sdnHh_entry() //  [R1]
         { info_tbl: [(cdnJ0,
                       label: sat_sdnHh_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnJ0: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cdnJ1; else goto cdnJ2;
       cdnJ1: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnJ2: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = GHC.Types.[]_closure+1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.ExecutionStack.Internal.showStackFrames_go_entry(R3,
                                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnHi_entry() //  [R1]
         { info_tbl: [(cdnJ3,
                       label: sat_sdnHi_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnJ3: // global
           _sdnHi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cdnJ4; else goto cdnJ5;
       cdnJ5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnJ7; else goto cdnJ6;
       cdnJ7: // global
           HpAlloc = 24;
           goto cdnJ4;
       cdnJ4: // global
           R1 = _sdnHi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnJ6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sdnHi::P64;
           _sdnHg::P64 = P64[_sdnHi::P64 + 16];
           I64[Hp - 16] = sat_sdnHh_info;
           P64[Hp] = _sdnHg::P64;
           R3 = Hp - 16;
           R2 = GHC.ExecutionStack.Internal.showStackFrames1_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 sat_sdnHj_entry() //  [R1]
         { info_tbl: [(cdnJc,
                       label: sat_sdnHj_info
                       rep:HeapRep 1 ptrs { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnJc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cdnJd; else goto cdnJe;
       cdnJd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cdnJe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cdnIH_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto udnJw; else goto cdnII;
       udnJw: // global
           call _cdnIH(R1) args: 0, res: 0, upd: 0;
       cdnII: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 _cdnIH() //  [R1]
         { info_tbl: [(cdnIH,
                       label: block_cdnIH_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnIH: // global
           if (R1 & 7 == 1) goto udnJs; else goto cdnJa;
       udnJs: // global
           Sp = Sp + 8;
           call _cdnJl() args: 0, res: 0, upd: 0;
       cdnJa: // global
           I64[Sp] = block_cdnIN_info;
           R2 = P64[R1 + 6];
           call GHC.ExecutionStack.Internal.stackFrames_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _cdnIN() //  [R1]
         { info_tbl: [(cdnIN,
                       label: block_cdnIN_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnIN: // global
           if (R1 & 7 == 1) goto udnJt; else goto cdnJn;
       udnJt: // global
           Sp = Sp + 8;
           call _cdnJl() args: 0, res: 0, upd: 0;
       cdnJn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cdnJq; else goto cdnJp;
       cdnJq: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cdnJp: // global
           _sdnHg::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_sdnHi_info;
           P64[Hp - 16] = _sdnHg::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _cdnJl() //  []
         { info_tbl: []
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnJl: // global
           R1 = GHC.Base.Nothing_closure+1;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 GHC.ExecutionStack.showStackTrace1_entry() //  []
         { info_tbl: [(cdnJx,
                       label: GHC.ExecutionStack.showStackTrace1_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnJx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cdnJy; else goto cdnJz;
       cdnJy: // global
           R1 = GHC.ExecutionStack.showStackTrace1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cdnJz: // global
           I64[Sp - 8] = block_cdnIB_info;
           Sp = Sp - 8;
           call GHC.ExecutionStack.Internal.collectStackTrace1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _cdnIB() //  [R1]
         { info_tbl: [(cdnIB,
                       label: block_cdnIB_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnIB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cdnJC; else goto cdnJB;
       cdnJC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cdnJB: // global
           I64[Hp - 16] = sat_sdnHj_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.840946149 UTC

[section ""data" . GHC.ExecutionStack.showStackTrace_closure" {
     GHC.ExecutionStack.showStackTrace_closure:
         const GHC.ExecutionStack.showStackTrace_info;
         const 0;
 },
 GHC.ExecutionStack.showStackTrace_entry() //  []
         { info_tbl: [(cdnKu,
                       label: GHC.ExecutionStack.showStackTrace_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 3} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cdnKu: // global
           call GHC.ExecutionStack.showStackTrace1_entry() args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:08:34.844383985 UTC

[section ""relreadonly" . SdnHW_srt" {
     SdnHW_srt:
         const GHC.ExecutionStack.Internal.stackFrames_closure;
         const GHC.ExecutionStack.Internal.collectStackTrace1_closure;
         const GHC.ExecutionStack.getStackTrace1_closure;
         const GHC.ExecutionStack.showStackTrace1_closure;
 }]

