
==================== Tidy Core ====================
2018-03-16 16:04:38.784506207 UTC

Result size of Tidy Core
  = {terms: 1,780, types: 1,689, coercions: 442, joins: 7/28}

-- RHS size: {terms: 11, types: 13, coercions: 9, joins: 0/0}
GHC.Event.EPoll.$WEPoll [InlPrag=INLINE[2]]
  :: EPollFd -> A.Array Event -> EPoll
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (dt_a9w55 [Occ=Once] :: EPollFd)
                 (dt_a9w56 [Occ=Once] :: A.Array Event) ->
                 case dt_a9w55
                      `cast` (GHC.Event.EPoll.N:EPollFd[0] ; Foreign.C.Types.N:CInt[0]
                              :: (EPollFd :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# dt_a9w58 [Occ=Once] ->
                 case dt_a9w56
                      `cast` (GHC.Event.Array.N:Array[0]
                                  <Event>_P ; GHC.IORef.N:IORef[0] <GHC.Event.Array.AC Event>_N
                              :: (A.Array Event :: *)
                                 ~R# (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC Event) :: *))
                 of
                 { GHC.STRef.STRef dt_a9w5e [Occ=Once] ->
                 GHC.Event.EPoll.EPoll dt_a9w58 dt_a9w5e
                 }
                 }}]
GHC.Event.EPoll.$WEPoll
  = \ (dt_a9w55 [Occ=Once] :: EPollFd)
      (dt_a9w56 [Occ=Once] :: A.Array Event) ->
      case dt_a9w55
           `cast` (GHC.Event.EPoll.N:EPollFd[0] ; Foreign.C.Types.N:CInt[0]
                   :: (EPollFd :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# dt_a9w58 [Occ=Once] ->
      case dt_a9w56
           `cast` (GHC.Event.Array.N:Array[0]
                       <Event>_P ; GHC.IORef.N:IORef[0] <GHC.Event.Array.AC Event>_N
                   :: (A.Array Event :: *)
                      ~R# (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC Event) :: *))
      of
      { GHC.STRef.STRef dt_a9w5e [Occ=Once] ->
      GHC.Event.EPoll.EPoll dt_a9w58 dt_a9w5e
      }
      }

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fStorableEvent_$calignment :: Event -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] -> Foreign.Storable.$fStorableBool7}]
GHC.Event.EPoll.$fStorableEvent_$calignment
  = \ _ [Occ=Dead] -> Foreign.Storable.$fStorableBool7

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fStorableEvent7 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$fStorableEvent7 = GHC.Types.I# 12#

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fStorableEvent_$csizeOf :: Event -> Int
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,A>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ _ [Occ=Dead] -> GHC.Event.EPoll.$fStorableEvent7}]
GHC.Event.EPoll.$fStorableEvent_$csizeOf
  = \ _ [Occ=Dead] -> GHC.Event.EPoll.$fStorableEvent7

-- RHS size: {terms: 26, types: 38, coercions: 7, joins: 0/0}
GHC.Event.EPoll.$fStorableEvent2
  :: Ptr Event -> State# RealWorld -> (# State# RealWorld, Event #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_a9w2h [Occ=Once!] :: Ptr Event)
                 (s_i7IAv [Occ=Once] :: State# RealWorld) ->
                 case ptr_a9w2h of { GHC.Ptr.Ptr addr_i9hhZ ->
                 case readWord32OffAddr# @ RealWorld addr_i9hhZ 0# s_i7IAv of
                 { (# ipv_i9hi7 [Occ=Once], ipv1_i9hi8 [Occ=Once] #) ->
                 case readInt32OffAddr#
                        @ RealWorld (plusAddr# addr_i9hhZ 4#) 0# ipv_i9hi7
                 of
                 { (# ipv2_i9h5B [Occ=Once], ipv3_i9h5C [Occ=Once] #) ->
                 (# ipv2_i9h5B,
                    GHC.Event.EPoll.Event
                      ((GHC.Word.W32# ipv1_i9hi8)
                       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                               :: (Word32 :: *) ~R# (EventType :: *)))
                      ((GHC.Int.I32# ipv3_i9h5C)
                       `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                               :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))) #)
                 }
                 }
                 }}]
GHC.Event.EPoll.$fStorableEvent2
  = \ (ptr_a9w2h :: Ptr Event) (s_i7IAv :: State# RealWorld) ->
      case ptr_a9w2h of { GHC.Ptr.Ptr addr_i9hhZ ->
      case readWord32OffAddr# @ RealWorld addr_i9hhZ 0# s_i7IAv of
      { (# ipv_i9hi7, ipv1_i9hi8 #) ->
      case readInt32OffAddr#
             @ RealWorld (plusAddr# addr_i9hhZ 4#) 0# ipv_i9hi7
      of
      { (# ipv2_i9h5B, ipv3_i9h5C #) ->
      (# ipv2_i9h5B,
         GHC.Event.EPoll.Event
           ((GHC.Word.W32# ipv1_i9hi8)
            `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                    :: (Word32 :: *) ~R# (EventType :: *)))
           ((GHC.Int.I32# ipv3_i9h5C)
            `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                    :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))) #)
      }
      }
      }

-- RHS size: {terms: 34, types: 28, coercions: 4, joins: 0/0}
GHC.Event.EPoll.$fStorableEvent1
  :: Ptr Event
     -> Event -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S(S)S(S)),1*U(1*U(U),1*U(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_a9w2n [Occ=Once!] :: Ptr Event)
                 (e_a9w2o [Occ=Once!] :: Event)
                 (s_i7JiH [Occ=Once] :: State# RealWorld) ->
                 case ptr_a9w2n of { GHC.Ptr.Ptr addr_i9hhI ->
                 case e_a9w2o of { Event ds_d9wJ1 [Occ=Once] ds1_d9wJ2 [Occ=Once] ->
                 case ds_d9wJ1
                      `cast` (GHC.Event.EPoll.N:EventType[0]
                              :: (EventType :: *) ~R# (Word32 :: *))
                 of
                 { GHC.Word.W32# x_i9hhQ [Occ=Once] ->
                 case writeWord32OffAddr# @ RealWorld addr_i9hhI 0# x_i9hhQ s_i7JiH
                 of s2_i9hhS
                 { __DEFAULT ->
                 case ds1_d9wJ2
                      `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# x1_i9h5k [Occ=Once] ->
                 case writeInt32OffAddr#
                        @ RealWorld (plusAddr# addr_i9hhI 4#) 0# x1_i9h5k s2_i9hhS
                 of s1_i9h5m
                 { __DEFAULT ->
                 (# s1_i9h5m, GHC.Tuple.() #)
                 }
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.EPoll.$fStorableEvent1
  = \ (ptr_a9w2n :: Ptr Event)
      (e_a9w2o :: Event)
      (s_i7JiH :: State# RealWorld) ->
      case ptr_a9w2n of { GHC.Ptr.Ptr addr_i9hhI ->
      case e_a9w2o of { Event ds_d9wJ1 ds1_d9wJ2 ->
      case ds_d9wJ1
           `cast` (GHC.Event.EPoll.N:EventType[0]
                   :: (EventType :: *) ~R# (Word32 :: *))
      of
      { GHC.Word.W32# x_i9hhQ ->
      case writeWord32OffAddr# @ RealWorld addr_i9hhI 0# x_i9hhQ s_i7JiH
      of s2_i9hhS
      { __DEFAULT ->
      case ds1_d9wJ2
           `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# x1_i9h5k ->
      case writeInt32OffAddr#
             @ RealWorld (plusAddr# addr_i9hhI 4#) 0# x1_i9h5k s2_i9hhS
      of s1_i9h5m
      { __DEFAULT ->
      (# s1_i9h5m, GHC.Tuple.() #)
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 35, types: 44, coercions: 7, joins: 0/1}
GHC.Event.EPoll.$fStorableEvent4
  :: forall b.
     Ptr b -> Int -> State# RealWorld -> (# State# RealWorld, Event #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_a9wBG)
                 (ptr_i9wJP [Occ=Once!] :: Ptr b_a9wBG)
                 (off_i9wJQ [Occ=Once!] :: Int)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_i9wJP of { GHC.Ptr.Ptr addr_i9wJT [Occ=Once] ->
                 case off_i9wJQ of { I# d_i9wJX [Occ=Once] ->
                 let {
                   addr1_i9hhZ :: Addr#
                   [LclId]
                   addr1_i9hhZ = plusAddr# addr_i9wJT d_i9wJX } in
                 case readWord32OffAddr# @ RealWorld addr1_i9hhZ 0# eta_B1 of
                 { (# ipv_i9hi7 [Occ=Once], ipv1_i9hi8 [Occ=Once] #) ->
                 case readInt32OffAddr#
                        @ RealWorld (plusAddr# addr1_i9hhZ 4#) 0# ipv_i9hi7
                 of
                 { (# ipv2_i9h5B [Occ=Once], ipv3_i9h5C [Occ=Once] #) ->
                 (# ipv2_i9h5B,
                    GHC.Event.EPoll.Event
                      ((GHC.Word.W32# ipv1_i9hi8)
                       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                               :: (Word32 :: *) ~R# (EventType :: *)))
                      ((GHC.Int.I32# ipv3_i9h5C)
                       `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                               :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))) #)
                 }
                 }
                 }
                 }}]
GHC.Event.EPoll.$fStorableEvent4
  = \ (@ b_a9wBG)
      (ptr_i9wJP :: Ptr b_a9wBG)
      (off_i9wJQ :: Int)
      (eta_B1 :: State# RealWorld) ->
      case ptr_i9wJP of { GHC.Ptr.Ptr addr_i9wJT ->
      case off_i9wJQ of { I# d_i9wJX ->
      let {
        addr1_i9hhZ [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9hhZ = plusAddr# addr_i9wJT d_i9wJX } in
      case readWord32OffAddr# @ RealWorld addr1_i9hhZ 0# eta_B1 of
      { (# ipv_i9hi7, ipv1_i9hi8 #) ->
      case readInt32OffAddr#
             @ RealWorld (plusAddr# addr1_i9hhZ 4#) 0# ipv_i9hi7
      of
      { (# ipv2_i9h5B, ipv3_i9h5C #) ->
      (# ipv2_i9h5B,
         GHC.Event.EPoll.Event
           ((GHC.Word.W32# ipv1_i9hi8)
            `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                    :: (Word32 :: *) ~R# (EventType :: *)))
           ((GHC.Int.I32# ipv3_i9h5C)
            `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                    :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))) #)
      }
      }
      }
      }

-- RHS size: {terms: 36, types: 42, coercions: 7, joins: 0/1}
GHC.Event.EPoll.$fStorableEvent6
  :: Ptr Event
     -> Int -> State# RealWorld -> (# State# RealWorld, Event #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_i9wJl [Occ=Once!] :: Ptr Event)
                 (off_i9wJm [Occ=Once!] :: Int)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_i9wJl of { GHC.Ptr.Ptr addr_i9wJT [Occ=Once] ->
                 case off_i9wJm of { I# x_i9wJp [Occ=Once] ->
                 let {
                   addr1_i9hhZ :: Addr#
                   [LclId]
                   addr1_i9hhZ = plusAddr# addr_i9wJT (*# x_i9wJp 12#) } in
                 case readWord32OffAddr# @ RealWorld addr1_i9hhZ 0# eta_B1 of
                 { (# ipv_i9hi7 [Occ=Once], ipv1_i9hi8 [Occ=Once] #) ->
                 case readInt32OffAddr#
                        @ RealWorld (plusAddr# addr1_i9hhZ 4#) 0# ipv_i9hi7
                 of
                 { (# ipv2_i9h5B [Occ=Once], ipv3_i9h5C [Occ=Once] #) ->
                 (# ipv2_i9h5B,
                    GHC.Event.EPoll.Event
                      ((GHC.Word.W32# ipv1_i9hi8)
                       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                               :: (Word32 :: *) ~R# (EventType :: *)))
                      ((GHC.Int.I32# ipv3_i9h5C)
                       `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                               :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))) #)
                 }
                 }
                 }
                 }}]
GHC.Event.EPoll.$fStorableEvent6
  = \ (ptr_i9wJl :: Ptr Event)
      (off_i9wJm :: Int)
      (eta_B1 :: State# RealWorld) ->
      case ptr_i9wJl of { GHC.Ptr.Ptr addr_i9wJT ->
      case off_i9wJm of { I# x_i9wJp ->
      let {
        addr1_i9hhZ [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9hhZ = plusAddr# addr_i9wJT (*# x_i9wJp 12#) } in
      case readWord32OffAddr# @ RealWorld addr1_i9hhZ 0# eta_B1 of
      { (# ipv_i9hi7, ipv1_i9hi8 #) ->
      case readInt32OffAddr#
             @ RealWorld (plusAddr# addr1_i9hhZ 4#) 0# ipv_i9hi7
      of
      { (# ipv2_i9h5B, ipv3_i9h5C #) ->
      (# ipv2_i9h5B,
         GHC.Event.EPoll.Event
           ((GHC.Word.W32# ipv1_i9hi8)
            `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                    :: (Word32 :: *) ~R# (EventType :: *)))
           ((GHC.Int.I32# ipv3_i9h5C)
            `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                    :: (GHC.Int.Int32 :: *) ~R# (Fd :: *))) #)
      }
      }
      }
      }

-- RHS size: {terms: 43, types: 34, coercions: 4, joins: 0/1}
GHC.Event.EPoll.$fStorableEvent3
  :: forall b.
     Ptr b
     -> Int -> Event -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S(S)S(S)),1*U(1*U(U),1*U(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (@ b_a9wBR)
                 (ptr_i9wK2 [Occ=Once!] :: Ptr b_a9wBR)
                 (off_i9wK3 [Occ=Once!] :: Int)
                 (eta_B2 [Occ=Once!] :: Event)
                 (eta1_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_i9wK2 of { GHC.Ptr.Ptr addr_i9wK6 [Occ=Once] ->
                 case off_i9wK3 of { I# d_i9wKa [Occ=Once] ->
                 case eta_B2 of { Event ds_d9wJ1 [Occ=Once] ds1_d9wJ2 [Occ=Once] ->
                 case ds_d9wJ1
                      `cast` (GHC.Event.EPoll.N:EventType[0]
                              :: (EventType :: *) ~R# (Word32 :: *))
                 of
                 { GHC.Word.W32# x_i9hhQ [Occ=Once] ->
                 let {
                   addr1_i9hhI :: Addr#
                   [LclId]
                   addr1_i9hhI = plusAddr# addr_i9wK6 d_i9wKa } in
                 case writeWord32OffAddr# @ RealWorld addr1_i9hhI 0# x_i9hhQ eta1_B1
                 of s2_i9hhS
                 { __DEFAULT ->
                 case ds1_d9wJ2
                      `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# x1_i9h5k [Occ=Once] ->
                 case writeInt32OffAddr#
                        @ RealWorld (plusAddr# addr1_i9hhI 4#) 0# x1_i9h5k s2_i9hhS
                 of s1_i9h5m
                 { __DEFAULT ->
                 (# s1_i9h5m, GHC.Tuple.() #)
                 }
                 }
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.EPoll.$fStorableEvent3
  = \ (@ b_a9wBR)
      (ptr_i9wK2 :: Ptr b_a9wBR)
      (off_i9wK3 :: Int)
      (eta_B2 :: Event)
      (eta1_B1 :: State# RealWorld) ->
      case ptr_i9wK2 of { GHC.Ptr.Ptr addr_i9wK6 ->
      case off_i9wK3 of { I# d_i9wKa ->
      case eta_B2 of { Event ds_d9wJ1 ds1_d9wJ2 ->
      case ds_d9wJ1
           `cast` (GHC.Event.EPoll.N:EventType[0]
                   :: (EventType :: *) ~R# (Word32 :: *))
      of
      { GHC.Word.W32# x_i9hhQ ->
      let {
        addr1_i9hhI [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9hhI = plusAddr# addr_i9wK6 d_i9wKa } in
      case writeWord32OffAddr# @ RealWorld addr1_i9hhI 0# x_i9hhQ eta1_B1
      of s2_i9hhS
      { __DEFAULT ->
      case ds1_d9wJ2
           `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# x1_i9h5k ->
      case writeInt32OffAddr#
             @ RealWorld (plusAddr# addr1_i9hhI 4#) 0# x1_i9h5k s2_i9hhS
      of s1_i9h5m
      { __DEFAULT ->
      (# s1_i9h5m, GHC.Tuple.() #)
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 44, types: 32, coercions: 4, joins: 0/1}
GHC.Event.EPoll.$fStorableEvent5
  :: Ptr Event
     -> Int -> Event -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S(S(S)S(S)),1*U(1*U(U),1*U(U))><S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=4,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ptr_i9wJB [Occ=Once!] :: Ptr Event)
                 (off_i9wJC [Occ=Once!] :: Int)
                 (val_i9wJD [Occ=Once!] :: Event)
                 (eta_B1 [Occ=Once] :: State# RealWorld) ->
                 case ptr_i9wJB of { GHC.Ptr.Ptr addr_i9wK6 [Occ=Once] ->
                 case off_i9wJC of { I# x_i9wJG [Occ=Once] ->
                 case val_i9wJD of
                 { Event ds_d9wJ1 [Occ=Once] ds1_d9wJ2 [Occ=Once] ->
                 case ds_d9wJ1
                      `cast` (GHC.Event.EPoll.N:EventType[0]
                              :: (EventType :: *) ~R# (Word32 :: *))
                 of
                 { GHC.Word.W32# x1_i9hhQ [Occ=Once] ->
                 let {
                   addr1_i9hhI :: Addr#
                   [LclId]
                   addr1_i9hhI = plusAddr# addr_i9wK6 (*# x_i9wJG 12#) } in
                 case writeWord32OffAddr# @ RealWorld addr1_i9hhI 0# x1_i9hhQ eta_B1
                 of s2_i9hhS
                 { __DEFAULT ->
                 case ds1_d9wJ2
                      `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                              :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
                 of
                 { GHC.Int.I32# x2_i9h5k [Occ=Once] ->
                 case writeInt32OffAddr#
                        @ RealWorld (plusAddr# addr1_i9hhI 4#) 0# x2_i9h5k s2_i9hhS
                 of s1_i9h5m
                 { __DEFAULT ->
                 (# s1_i9h5m, GHC.Tuple.() #)
                 }
                 }
                 }
                 }
                 }
                 }
                 }}]
GHC.Event.EPoll.$fStorableEvent5
  = \ (ptr_i9wJB :: Ptr Event)
      (off_i9wJC :: Int)
      (val_i9wJD :: Event)
      (eta_B1 :: State# RealWorld) ->
      case ptr_i9wJB of { GHC.Ptr.Ptr addr_i9wK6 ->
      case off_i9wJC of { I# x_i9wJG ->
      case val_i9wJD of { Event ds_d9wJ1 ds1_d9wJ2 ->
      case ds_d9wJ1
           `cast` (GHC.Event.EPoll.N:EventType[0]
                   :: (EventType :: *) ~R# (Word32 :: *))
      of
      { GHC.Word.W32# x1_i9hhQ ->
      let {
        addr1_i9hhI [Dmd=<S,U>] :: Addr#
        [LclId]
        addr1_i9hhI = plusAddr# addr_i9wK6 (*# x_i9wJG 12#) } in
      case writeWord32OffAddr# @ RealWorld addr1_i9hhI 0# x1_i9hhQ eta_B1
      of s2_i9hhS
      { __DEFAULT ->
      case ds1_d9wJ2
           `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                   :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
      of
      { GHC.Int.I32# x2_i9h5k ->
      case writeInt32OffAddr#
             @ RealWorld (plusAddr# addr1_i9hhI 4#) 0# x2_i9h5k s2_i9hhS
      of s1_i9h5m
      { __DEFAULT ->
      (# s1_i9h5m, GHC.Tuple.() #)
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 9, types: 1, coercions: 56, joins: 0/0}
GHC.Event.EPoll.$fStorableEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Storable Event
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Foreign.Storable.C:Storable TYPE: Event
                                   GHC.Event.EPoll.$fStorableEvent_$csizeOf
                                   GHC.Event.EPoll.$fStorableEvent_$calignment
                                   GHC.Event.EPoll.$fStorableEvent6
                                   `cast` (<Ptr Event>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <Event>_R)
                                           :: (Ptr Event
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Event #) :: *)
                                              ~R# (Ptr Event -> Int -> IO Event :: *))
                                   GHC.Event.EPoll.$fStorableEvent5
                                   `cast` (<Ptr Event>_R
                                           ->_R <Int>_R
                                           ->_R <Event>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Event
                                               -> Int
                                               -> Event
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr Event -> Int -> Event -> IO () :: *))
                                   GHC.Event.EPoll.$fStorableEvent4
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <Event>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Event #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> IO Event :: *))
                                   GHC.Event.EPoll.$fStorableEvent3
                                   `cast` (forall (b :: <*>_N).
                                           <Ptr b>_R
                                           ->_R <Int>_R
                                           ->_R <Event>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (forall b.
                                               Ptr b
                                               -> Int
                                               -> Event
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (forall b. Ptr b -> Int -> Event -> IO () :: *))
                                   GHC.Event.EPoll.$fStorableEvent2
                                   `cast` (<Ptr Event>_R ->_R Sym (GHC.Types.N:IO[0] <Event>_R)
                                           :: (Ptr Event
                                               -> State# RealWorld
                                               -> (# State# RealWorld, Event #) :: *)
                                              ~R# (Ptr Event -> IO Event :: *))
                                   GHC.Event.EPoll.$fStorableEvent1
                                   `cast` (<Ptr Event>_R
                                           ->_R <Event>_R
                                           ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                                           :: (Ptr Event
                                               -> Event
                                               -> State# RealWorld
                                               -> (# State# RealWorld, () #) :: *)
                                              ~R# (Ptr Event -> Event -> IO () :: *))]
GHC.Event.EPoll.$fStorableEvent
  = Foreign.Storable.C:Storable
      @ Event
      GHC.Event.EPoll.$fStorableEvent_$csizeOf
      GHC.Event.EPoll.$fStorableEvent_$calignment
      (GHC.Event.EPoll.$fStorableEvent6
       `cast` (<Ptr Event>_R
               ->_R <Int>_R
               ->_R Sym (GHC.Types.N:IO[0] <Event>_R)
               :: (Ptr Event
                   -> Int -> State# RealWorld -> (# State# RealWorld, Event #) :: *)
                  ~R# (Ptr Event -> Int -> IO Event :: *)))
      (GHC.Event.EPoll.$fStorableEvent5
       `cast` (<Ptr Event>_R
               ->_R <Int>_R
               ->_R <Event>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Event
                   -> Int
                   -> Event
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr Event -> Int -> Event -> IO () :: *)))
      (GHC.Event.EPoll.$fStorableEvent4
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R ->_R <Int>_R ->_R Sym (GHC.Types.N:IO[0] <Event>_R)
               :: (forall b.
                   Ptr b
                   -> Int -> State# RealWorld -> (# State# RealWorld, Event #) :: *)
                  ~R# (forall b. Ptr b -> Int -> IO Event :: *)))
      (GHC.Event.EPoll.$fStorableEvent3
       `cast` (forall (b :: <*>_N).
               <Ptr b>_R
               ->_R <Int>_R
               ->_R <Event>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (forall b.
                   Ptr b
                   -> Int
                   -> Event
                   -> State# RealWorld
                   -> (# State# RealWorld, () #) :: *)
                  ~R# (forall b. Ptr b -> Int -> Event -> IO () :: *)))
      (GHC.Event.EPoll.$fStorableEvent2
       `cast` (<Ptr Event>_R ->_R Sym (GHC.Types.N:IO[0] <Event>_R)
               :: (Ptr Event
                   -> State# RealWorld -> (# State# RealWorld, Event #) :: *)
                  ~R# (Ptr Event -> IO Event :: *)))
      (GHC.Event.EPoll.$fStorableEvent1
       `cast` (<Ptr Event>_R
               ->_R <Event>_R
               ->_R Sym (GHC.Types.N:IO[0] <()>_R)
               :: (Ptr Event
                   -> Event -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                  ~R# (Ptr Event -> Event -> IO () :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 14, joins: 0/0}
GHC.Event.EPoll.$fEqEventType [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq EventType
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: EventType
                        GHC.Word.eqWord32
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (EventType -> EventType -> Bool :: *))
                        GHC.Word.neWord32
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Bool>_R
                                :: (Word32 -> Word32 -> Bool :: *)
                                   ~R# (EventType -> EventType -> Bool :: *))]
GHC.Event.EPoll.$fEqEventType
  = GHC.Classes.C:Eq
      @ EventType
      (GHC.Word.eqWord32
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (EventType -> EventType -> Bool :: *)))
      (GHC.Word.neWord32
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Bool>_R
               :: (Word32 -> Word32 -> Bool :: *)
                  ~R# (EventType -> EventType -> Bool :: *)))

-- RHS size: {terms: 24, types: 1, coercions: 134, joins: 0/0}
GHC.Event.EPoll.$fBitsEventType [InlPrag=NOUSERINLINE CONLIKE]
  :: Bits EventType
[GblId[DFunId],
 Caf=NoCafRefs,
 Unf=DFun: \ ->
       Data.Bits.C:Bits TYPE: EventType
                        GHC.Event.EPoll.$fEqEventType
                        GHC.Word.$fBitsWord32_$c.&.
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (EventType -> EventType -> EventType :: *))
                        GHC.Word.$fBitsWord32_$c.|.
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (EventType -> EventType -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cxor
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Word32 -> Word32 :: *)
                                   ~R# (EventType -> EventType -> EventType :: *))
                        GHC.Word.$fBitsWord32_$ccomplement
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cshift
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$crotate
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cminBound
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 :: *) ~R# (EventType :: *))
                        GHC.Word.$fBitsWord32_$cbit
                        `cast` (<Int>_R ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Int -> Word32 :: *) ~R# (Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$csetBit
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cclearBit
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$ccomplementBit
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$ctestBit
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int -> Bool>_R
                                :: (Word32 -> Int -> Bool :: *)
                                   ~R# (EventType -> Int -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cbitSizeMaybe
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Maybe Int>_R
                                :: (Word32 -> Maybe Int :: *) ~R# (EventType -> Maybe Int :: *))
                        GHC.Word.$fBitsWord32_$cfiniteBitSize
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *))
                        GHC.Word.$fBitsWord32_$cisSigned
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Bool>_R
                                :: (Word32 -> Bool :: *) ~R# (EventType -> Bool :: *))
                        GHC.Word.$fBitsWord32_$cshiftL
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftL
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cshiftR
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cunsafeShiftR
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$crotateL
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$crotateR
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                                ->_R <Int>_R
                                ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                                :: (Word32 -> Int -> Word32 :: *)
                                   ~R# (EventType -> Int -> EventType :: *))
                        GHC.Word.$fBitsWord32_$cpopCount
                        `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
                                :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *))]
GHC.Event.EPoll.$fBitsEventType
  = Data.Bits.C:Bits
      @ EventType
      GHC.Event.EPoll.$fEqEventType
      (GHC.Word.$fBitsWord32_$c.&.
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (EventType -> EventType -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$c.|.
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (EventType -> EventType -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cxor
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (EventType -> EventType -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$ccomplement
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cshift
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$crotate
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cminBound
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 :: *) ~R# (EventType :: *)))
      (GHC.Word.$fBitsWord32_$cbit
       `cast` (<Int>_R ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Int -> Word32 :: *) ~R# (Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$csetBit
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cclearBit
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$ccomplementBit
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$ctestBit
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int -> Bool>_R
               :: (Word32 -> Int -> Bool :: *)
                  ~R# (EventType -> Int -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cbitSizeMaybe
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Maybe Int>_R
               :: (Word32 -> Maybe Int :: *) ~R# (EventType -> Maybe Int :: *)))
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *)))
      (GHC.Word.$fBitsWord32_$cisSigned
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Bool>_R
               :: (Word32 -> Bool :: *) ~R# (EventType -> Bool :: *)))
      (GHC.Word.$fBitsWord32_$cshiftL
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftL
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cshiftR
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cunsafeShiftR
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$crotateL
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$crotateR
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R <Int>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Int -> Word32 :: *)
                  ~R# (EventType -> Int -> EventType :: *)))
      (GHC.Word.$fBitsWord32_$cpopCount
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *)))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.EPoll.fromEPollFd1 :: EPollFd -> EPollFd
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (ds_d9wJ8 [Occ=Once] :: EPollFd) -> ds_d9wJ8}]
GHC.Event.EPoll.fromEPollFd1 = \ (ds_d9wJ8 :: EPollFd) -> ds_d9wJ8

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
fromEPollFd :: EPollFd -> CInt
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.EPoll.fromEPollFd1
               `cast` (<EPollFd>_R ->_R GHC.Event.EPoll.N:EPollFd[0]
                       :: (EPollFd -> EPollFd :: *) ~R# (EPollFd -> CInt :: *))}]
fromEPollFd
  = GHC.Event.EPoll.fromEPollFd1
    `cast` (<EPollFd>_R ->_R GHC.Event.EPoll.N:EPollFd[0]
            :: (EPollFd -> EPollFd :: *) ~R# (EPollFd -> CInt :: *))

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
GHC.Event.EPoll.unEventType1 :: EventType -> EventType
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (ds_d9wJ6 [Occ=Once] :: EventType) -> ds_d9wJ6}]
GHC.Event.EPoll.unEventType1
  = \ (ds_d9wJ6 :: EventType) -> ds_d9wJ6

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
unEventType :: EventType -> Word32
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,1*U(U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.EPoll.unEventType1
               `cast` (<EventType>_R ->_R GHC.Event.EPoll.N:EventType[0]
                       :: (EventType -> EventType :: *) ~R# (EventType -> Word32 :: *))}]
unEventType
  = GHC.Event.EPoll.unEventType1
    `cast` (<EventType>_R ->_R GHC.Event.EPoll.N:EventType[0]
            :: (EventType -> EventType :: *) ~R# (EventType -> Word32 :: *))

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
eventFd :: Event -> Fd
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,1*U(U))>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9wJ3 [Occ=Once!] :: Event) ->
                 case ds_d9wJ3 of { Event _ [Occ=Dead] ds2_d9wJ5 [Occ=Once] ->
                 ds2_d9wJ5
                 }}]
eventFd
  = \ (ds_d9wJ3 :: Event) ->
      case ds_d9wJ3 of { Event ds1_d9wJ4 ds2_d9wJ5 -> ds2_d9wJ5 }

-- RHS size: {terms: 5, types: 4, coercions: 0, joins: 0/0}
eventTypes :: Event -> EventType
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(1*U(U),A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9wJ0 [Occ=Once!] :: Event) ->
                 case ds_d9wJ0 of { Event ds1_d9wJ1 [Occ=Once] _ [Occ=Dead] ->
                 ds1_d9wJ1
                 }}]
eventTypes
  = \ (ds_d9wJ0 :: Event) ->
      case ds_d9wJ0 of { Event ds1_d9wJ1 ds2_d9wJ2 -> ds1_d9wJ1 }

-- RHS size: {terms: 6, types: 10, coercions: 8, joins: 0/0}
epollEvents :: EPoll -> A.Array Event
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LS),1*U(A,U)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9wIW [Occ=Once!] :: EPoll) ->
                 case ds_d9wIW of { EPoll _ [Occ=Dead] dt1_d9wLm [Occ=Once] ->
                 (GHC.STRef.STRef
                    @ RealWorld @ (GHC.Event.Array.AC Event) dt1_d9wLm)
                 `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                                       Event>_N ; Sym (GHC.Event.Array.N:Array[0]
                                                                           <Event>_P)
                         :: (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC Event) :: *)
                            ~R# (A.Array Event :: *))
                 }}]
epollEvents
  = \ (ds_d9wIW :: EPoll) ->
      case ds_d9wIW of { EPoll dt_d9wLl dt1_d9wLm ->
      (GHC.STRef.STRef
         @ RealWorld @ (GHC.Event.Array.AC Event) dt1_d9wLm)
      `cast` (Sym (GHC.IORef.N:IORef[0]) <GHC.Event.Array.AC
                                            Event>_N ; Sym (GHC.Event.Array.N:Array[0] <Event>_P)
              :: (GHC.STRef.STRef RealWorld (GHC.Event.Array.AC Event) :: *)
                 ~R# (A.Array Event :: *))
      }

-- RHS size: {terms: 6, types: 7, coercions: 5, joins: 0/0}
epollFd :: EPoll -> EPollFd
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)>m,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ds_d9wIS [Occ=Once!] :: EPoll) ->
                 case ds_d9wIS of { EPoll dt_d9wLj [Occ=Once] _ [Occ=Dead] ->
                 (GHC.Int.I32# dt_d9wLj)
                 `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0])
                         :: (GHC.Int.Int32 :: *) ~R# (EPollFd :: *))
                 }}]
epollFd
  = \ (ds_d9wIS :: EPoll) ->
      case ds_d9wIS of { EPoll dt_d9wLj dt1_d9wLk ->
      (GHC.Int.I32# dt_d9wLj)
      `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0])
              :: (GHC.Int.Int32 :: *) ~R# (EPollFd :: *))
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
available [InlPrag=INLINE (sat-args=0)] :: Bool
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=False,boring_ok=True)
         Tmpl= GHC.Types.True}]
available = GHC.Types.True

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.EPoll.$trModule4 = "base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$trModule3 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$trModule3
  = GHC.Types.TrNameS GHC.Event.EPoll.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.EPoll.$trModule2 = "GHC.Event.EPoll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$trModule1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$trModule1
  = GHC.Types.TrNameS GHC.Event.EPoll.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$trModule :: Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.Event.EPoll.$trModule
  = GHC.Types.Module
      GHC.Event.EPoll.$trModule3 GHC.Event.EPoll.$trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r9xZP :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep_r9xZP
  = GHC.Types.KindRepTyConApp
      Foreign.C.Types.$tcCInt (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r9xZQ :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep1_r9xZQ
  = GHC.Types.KindRepTyConApp
      GHC.Word.$tcWord32 (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r9xZR :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep2_r9xZR
  = GHC.Types.KindRepTyConApp
      System.Posix.Types.$tcFd (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEPollFd2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.EPoll.$tcEPollFd2 = "EPollFd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEPollFd1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tcEPollFd1
  = GHC.Types.TrNameS GHC.Event.EPoll.$tcEPollFd2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEPollFd :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tcEPollFd
  = GHC.Types.TyCon
      11408974392712426853##
      10860743297622841984##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tcEPollFd1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r9xZS :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep3_r9xZS
  = GHC.Types.KindRepTyConApp
      GHC.Event.EPoll.$tcEPollFd (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPollFd1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.EPoll.$tc'EPollFd1
  = GHC.Types.KindRepFun $krep_r9xZP $krep3_r9xZS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPollFd3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.EPoll.$tc'EPollFd3 = "'EPollFd"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPollFd2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tc'EPollFd2
  = GHC.Types.TrNameS GHC.Event.EPoll.$tc'EPollFd3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPollFd :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tc'EPollFd
  = GHC.Types.TyCon
      13859366844265277896##
      3104986725924328114##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tc'EPollFd2
      0#
      GHC.Event.EPoll.$tc'EPollFd1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcControlOp2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.$tcControlOp2 = "ControlOp"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcControlOp1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tcControlOp1
  = GHC.Types.TrNameS GHC.Event.EPoll.$tcControlOp2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcControlOp :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tcControlOp
  = GHC.Types.TyCon
      16670684287779227039##
      7079239768931473179##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tcControlOp1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r9xZT :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep4_r9xZT
  = GHC.Types.KindRepTyConApp
      GHC.Event.EPoll.$tcControlOp (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'ControlOp1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.EPoll.$tc'ControlOp1
  = GHC.Types.KindRepFun $krep_r9xZP $krep4_r9xZT

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'ControlOp3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.$tc'ControlOp3 = "'ControlOp"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'ControlOp2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tc'ControlOp2
  = GHC.Types.TrNameS GHC.Event.EPoll.$tc'ControlOp3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'ControlOp :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tc'ControlOp
  = GHC.Types.TyCon
      17423659744934710370##
      14737300415055323322##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tc'ControlOp2
      0#
      GHC.Event.EPoll.$tc'ControlOp1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEventType2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.$tcEventType2 = "EventType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEventType1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tcEventType1
  = GHC.Types.TrNameS GHC.Event.EPoll.$tcEventType2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEventType :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tcEventType
  = GHC.Types.TyCon
      6882131545153803920##
      11603224301892798833##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tcEventType1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_r9xZU :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep5_r9xZU
  = GHC.Types.KindRepTyConApp
      GHC.Event.EPoll.$tcEventType (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EventType1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.EPoll.$tc'EventType1
  = GHC.Types.KindRepFun $krep1_r9xZQ $krep5_r9xZU

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EventType3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.$tc'EventType3 = "'EventType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EventType2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tc'EventType2
  = GHC.Types.TrNameS GHC.Event.EPoll.$tc'EventType3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EventType :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tc'EventType
  = GHC.Types.TyCon
      6895099112894632230##
      10353865251933672677##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tc'EventType2
      0#
      GHC.Event.EPoll.$tc'EventType1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEvent2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.EPoll.$tcEvent2 = "Event"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEvent1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tcEvent1
  = GHC.Types.TrNameS GHC.Event.EPoll.$tcEvent2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEvent :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tcEvent
  = GHC.Types.TyCon
      9768726503562184735##
      14932995848660065219##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tcEvent1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_r9xZV :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep6_r9xZV
  = GHC.Types.KindRepTyConApp
      GHC.Event.EPoll.$tcEvent (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r9xZW :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep7_r9xZW = GHC.Types.KindRepFun $krep2_r9xZR $krep6_r9xZV

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'Event1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.EPoll.$tc'Event1
  = GHC.Types.KindRepFun $krep5_r9xZU $krep7_r9xZW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'Event3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.EPoll.$tc'Event3 = "'Event"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'Event2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tc'Event2
  = GHC.Types.TrNameS GHC.Event.EPoll.$tc'Event3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'Event :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tc'Event
  = GHC.Types.TyCon
      13898227050457859187##
      12870286929163337655##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tc'Event2
      0#
      GHC.Event.EPoll.$tc'Event1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_r9xZX :: [KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []]
$krep8_r9xZX
  = GHC.Types.: @ KindRep $krep6_r9xZV (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r9xZY :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep9_r9xZY
  = GHC.Types.KindRepTyConApp GHC.Event.Array.$tcArray $krep8_r9xZX

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEPoll2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.EPoll.$tcEPoll2 = "EPoll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEPoll1 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tcEPoll1
  = GHC.Types.TrNameS GHC.Event.EPoll.$tcEPoll2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tcEPoll :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tcEPoll
  = GHC.Types.TyCon
      16362945812962510240##
      15183678187331181316##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tcEPoll1
      0#
      GHC.Types.krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_r9xZZ :: KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []]
$krep10_r9xZZ
  = GHC.Types.KindRepTyConApp
      GHC.Event.EPoll.$tcEPoll (GHC.Types.[] @ KindRep)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r9y00 :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
$krep11_r9y00 = GHC.Types.KindRepFun $krep9_r9xZY $krep10_r9xZZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPoll1 [InlPrag=NOUSERINLINE[~]] :: KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []]
GHC.Event.EPoll.$tc'EPoll1
  = GHC.Types.KindRepFun $krep3_r9xZS $krep11_r9y00

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPoll3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.EPoll.$tc'EPoll3 = "'EPoll"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPoll2 :: TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$tc'EPoll2
  = GHC.Types.TrNameS GHC.Event.EPoll.$tc'EPoll3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$tc'EPoll :: TyCon
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 70}]
GHC.Event.EPoll.$tc'EPoll
  = GHC.Types.TyCon
      11640704659469356468##
      11164042648060985378##
      GHC.Event.EPoll.$trModule
      GHC.Event.EPoll.$tc'EPoll2
      0#
      GHC.Event.EPoll.$tc'EPoll1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.$fShowEPollFd4 = "EPollFd {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.EPoll.$fShowEPollFd3 = "fromEPollFd = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.EPoll.$fShowEPollFd2 = "}"#

-- RHS size: {terms: 49, types: 30, coercions: 6, joins: 0/0}
GHC.Event.EPoll.$w$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int# -> EPollFd -> String -> String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 40 0] 361 30}]
GHC.Event.EPoll.$w$cshowsPrec
  = \ (ww_s9xBp :: Int#) (w_s9xBl :: EPollFd) (w1_s9xBm :: String) ->
      case >=# ww_s9xBp 11# of {
        __DEFAULT ->
          unpackAppendCString#
            GHC.Event.EPoll.$fShowEPollFd4
            (unpackAppendCString#
               GHC.Event.EPoll.$fShowEPollFd3
               (case w_s9xBl
                     `cast` (GHC.Event.EPoll.N:EPollFd[0] ; Foreign.C.Types.N:CInt[0]
                             :: (EPollFd :: *) ~R# (GHC.Int.Int32 :: *))
                of
                { GHC.Int.I32# x#_i9gYS ->
                case GHC.Show.$wshowSignedInt
                       0#
                       x#_i9gYS
                       (unpackAppendCString# GHC.Event.EPoll.$fShowEPollFd2 w1_s9xBm)
                of
                { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
                GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
                }
                }));
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (unpackAppendCString#
               GHC.Event.EPoll.$fShowEPollFd4
               (unpackAppendCString#
                  GHC.Event.EPoll.$fShowEPollFd3
                  (case w_s9xBl
                        `cast` (GHC.Event.EPoll.N:EPollFd[0] ; Foreign.C.Types.N:CInt[0]
                                :: (EPollFd :: *) ~R# (GHC.Int.Int32 :: *))
                   of
                   { GHC.Int.I32# x#_i9gYS ->
                   case GHC.Show.$wshowSignedInt
                          0#
                          x#_i9gYS
                          (unpackAppendCString#
                             GHC.Event.EPoll.$fShowEPollFd2
                             (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_s9xBm))
                   of
                   { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
                   GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
                   }
                   })))
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> EPollFd -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9xBk [Occ=Once!] :: Int)
                 (w1_s9xBl [Occ=Once] :: EPollFd)
                 (w2_s9xBm [Occ=Once] :: String) ->
                 case w_s9xBk of { I# ww1_s9xBp [Occ=Once] ->
                 GHC.Event.EPoll.$w$cshowsPrec ww1_s9xBp w1_s9xBl w2_s9xBm
                 }}]
GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec
  = \ (w_s9xBk :: Int) (w1_s9xBl :: EPollFd) (w2_s9xBm :: String) ->
      case w_s9xBk of { I# ww1_s9xBp ->
      GHC.Event.EPoll.$w$cshowsPrec ww1_s9xBp w1_s9xBl w2_s9xBm
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd5 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.EPoll.$fShowEPollFd5
  = unpackCString# GHC.Event.EPoll.$fShowEPollFd2

-- RHS size: {terms: 17, types: 13, coercions: 3, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd_$cshow :: EPollFd -> String
[GblId,
 Arity=1,
 Str=<L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 130 0}]
GHC.Event.EPoll.$fShowEPollFd_$cshow
  = \ (x_i7Jay :: EPollFd) ->
      unpackAppendCString#
        GHC.Event.EPoll.$fShowEPollFd4
        (unpackAppendCString#
           GHC.Event.EPoll.$fShowEPollFd3
           (case x_i7Jay
                 `cast` (GHC.Event.EPoll.N:EPollFd[0] ; Foreign.C.Types.N:CInt[0]
                         :: (EPollFd :: *) ~R# (GHC.Int.Int32 :: *))
            of
            { GHC.Int.I32# x#_i9gYS ->
            case GHC.Show.$wshowSignedInt
                   0# x#_i9gYS GHC.Event.EPoll.$fShowEPollFd5
            of
            { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
            GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
            }
            }))

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd1 :: EPollFd -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
GHC.Event.EPoll.$fShowEPollFd1
  = \ (w_s9xBl :: EPollFd) (w1_s9xBm :: String) ->
      GHC.Event.EPoll.$w$cshowsPrec 0# w_s9xBl w1_s9xBm

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd_$cshowList
  :: [EPollFd] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [EPollFd])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ EPollFd GHC.Event.EPoll.$fShowEPollFd1 ls_i7JaB s_i7JaC}]
GHC.Event.EPoll.$fShowEPollFd_$cshowList
  = \ (ls_i7JaB :: [EPollFd]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ EPollFd GHC.Event.EPoll.$fShowEPollFd1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEPollFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Show EPollFd
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: EPollFd
                       GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec
                       GHC.Event.EPoll.$fShowEPollFd_$cshow
                       GHC.Event.EPoll.$fShowEPollFd_$cshowList]
GHC.Event.EPoll.$fShowEPollFd
  = GHC.Show.C:Show
      @ EPollFd
      GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec
      GHC.Event.EPoll.$fShowEPollFd_$cshow
      GHC.Event.EPoll.$fShowEPollFd_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.$fShowEvent4 = "EventType {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.EPoll.$fShowEvent3 = "unEventType = "#

-- RHS size: {terms: 49, types: 30, coercions: 2, joins: 0/0}
GHC.Event.EPoll.$w$cshowsPrec2 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> EventType -> String -> String
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 40 0] 341 30}]
GHC.Event.EPoll.$w$cshowsPrec2
  = \ (ww_s9xBy :: Int#)
      (w_s9xBu :: EventType)
      (w1_s9xBv :: String) ->
      case >=# ww_s9xBy 11# of {
        __DEFAULT ->
          unpackAppendCString#
            GHC.Event.EPoll.$fShowEvent4
            (unpackAppendCString#
               GHC.Event.EPoll.$fShowEvent3
               (case w_s9xBu
                     `cast` (GHC.Event.EPoll.N:EventType[0]
                             :: (EventType :: *) ~R# (Word32 :: *))
                of
                { GHC.Word.W32# x#_i9hbW ->
                case GHC.Show.$witos
                       (word2Int# x#_i9hbW)
                       (unpackAppendCString# GHC.Event.EPoll.$fShowEPollFd2 w1_s9xBv)
                of
                { (# ww5_i9hc4, ww6_i9hc5 #) ->
                GHC.Types.: @ Char ww5_i9hc4 ww6_i9hc5
                }
                }));
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (unpackAppendCString#
               GHC.Event.EPoll.$fShowEvent4
               (unpackAppendCString#
                  GHC.Event.EPoll.$fShowEvent3
                  (case w_s9xBu
                        `cast` (GHC.Event.EPoll.N:EventType[0]
                                :: (EventType :: *) ~R# (Word32 :: *))
                   of
                   { GHC.Word.W32# x#_i9hbW ->
                   case GHC.Show.$witos
                          (word2Int# x#_i9hbW)
                          (unpackAppendCString#
                             GHC.Event.EPoll.$fShowEPollFd2
                             (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w1_s9xBv))
                   of
                   { (# ww5_i9hc4, ww6_i9hc5 #) ->
                   GHC.Types.: @ Char ww5_i9hc4 ww6_i9hc5
                   }
                   })))
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEventType_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> EventType -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><L,1*U(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9xBt [Occ=Once!] :: Int)
                 (w1_s9xBu [Occ=Once] :: EventType)
                 (w2_s9xBv [Occ=Once] :: String) ->
                 case w_s9xBt of { I# ww1_s9xBy [Occ=Once] ->
                 GHC.Event.EPoll.$w$cshowsPrec2 ww1_s9xBy w1_s9xBu w2_s9xBv
                 }}]
GHC.Event.EPoll.$fShowEventType_$cshowsPrec
  = \ (w_s9xBt :: Int)
      (w1_s9xBu :: EventType)
      (w2_s9xBv :: String) ->
      case w_s9xBt of { I# ww1_s9xBy ->
      GHC.Event.EPoll.$w$cshowsPrec2 ww1_s9xBy w1_s9xBu w2_s9xBv
      }

-- RHS size: {terms: 18, types: 13, coercions: 1, joins: 0/0}
GHC.Event.EPoll.$fShowEventType_$cshow :: EventType -> String
[GblId,
 Arity=1,
 Str=<L,1*U(U)>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20] 130 0}]
GHC.Event.EPoll.$fShowEventType_$cshow
  = \ (x_i7Jay :: EventType) ->
      unpackAppendCString#
        GHC.Event.EPoll.$fShowEvent4
        (unpackAppendCString#
           GHC.Event.EPoll.$fShowEvent3
           (case x_i7Jay
                 `cast` (GHC.Event.EPoll.N:EventType[0]
                         :: (EventType :: *) ~R# (Word32 :: *))
            of
            { GHC.Word.W32# x#_i9hbW ->
            case GHC.Show.$wshowSignedInt
                   0# (word2Int# x#_i9hbW) GHC.Event.EPoll.$fShowEPollFd5
            of
            { (# ww5_i9hc4, ww6_i9hc5 #) ->
            GHC.Types.: @ Char ww5_i9hc4 ww6_i9hc5
            }
            }))

-- RHS size: {terms: 6, types: 2, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEventType1 :: EventType -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 40 0}]
GHC.Event.EPoll.$fShowEventType1
  = \ (w_s9xBu :: EventType) (w1_s9xBv :: String) ->
      GHC.Event.EPoll.$w$cshowsPrec2 0# w_s9xBu w1_s9xBv

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEventType_$cshowList
  :: [EventType] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [EventType])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ EventType GHC.Event.EPoll.$fShowEventType1 ls_i7JaB s_i7JaC}]
GHC.Event.EPoll.$fShowEventType_$cshowList
  = \ (ls_i7JaB :: [EventType]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ EventType GHC.Event.EPoll.$fShowEventType1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEventType [InlPrag=NOUSERINLINE CONLIKE]
  :: Show EventType
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: EventType
                       GHC.Event.EPoll.$fShowEventType_$cshowsPrec
                       GHC.Event.EPoll.$fShowEventType_$cshow
                       GHC.Event.EPoll.$fShowEventType_$cshowList]
GHC.Event.EPoll.$fShowEventType
  = GHC.Show.C:Show
      @ EventType
      GHC.Event.EPoll.$fShowEventType_$cshowsPrec
      GHC.Event.EPoll.$fShowEventType_$cshow
      GHC.Event.EPoll.$fShowEventType_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent7 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.Event.EPoll.$fShowEvent7 = "Event {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent6 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.EPoll.$fShowEvent6
  = unpackCString# GHC.Event.EPoll.$fShowEvent7

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent5 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 50 0}]
GHC.Event.EPoll.$fShowEvent5 = "eventTypes = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.$fShowEvent2 = "eventFd = "#

-- RHS size: {terms: 64, types: 35, coercions: 6, joins: 0/0}
GHC.Event.EPoll.$w$cshowsPrec1 [InlPrag=NOUSERINLINE[0]]
  :: Int# -> EventType -> Fd -> String -> String
[GblId,
 Arity=4,
 Str=<S,U><L,1*U(U)><L,1*U(U)><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [0 0 40 0] 561 30}]
GHC.Event.EPoll.$w$cshowsPrec1
  = \ (ww_s9xBH :: Int#)
      (ww1_s9xBL :: EventType)
      (ww2_s9xBM :: Fd)
      (w_s9xBE :: String) ->
      case >=# ww_s9xBH 11# of {
        __DEFAULT ->
          ++
            @ Char
            GHC.Event.EPoll.$fShowEvent6
            (unpackAppendCString#
               GHC.Event.EPoll.$fShowEvent5
               (GHC.Event.EPoll.$w$cshowsPrec2
                  0#
                  ww1_s9xBL
                  (++
                     @ Char
                     GHC.Show.showCommaSpace1
                     (unpackAppendCString#
                        GHC.Event.EPoll.$fShowEvent2
                        (case ww2_s9xBM
                              `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                                      :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
                         of
                         { GHC.Int.I32# x#_i9gYS ->
                         case GHC.Show.$wshowSignedInt
                                0#
                                x#_i9gYS
                                (unpackAppendCString# GHC.Event.EPoll.$fShowEPollFd2 w_s9xBE)
                         of
                         { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
                         GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
                         }
                         })))));
        1# ->
          GHC.Types.:
            @ Char
            GHC.Show.$fShow(,)4
            (++
               @ Char
               GHC.Event.EPoll.$fShowEvent6
               (unpackAppendCString#
                  GHC.Event.EPoll.$fShowEvent5
                  (GHC.Event.EPoll.$w$cshowsPrec2
                     0#
                     ww1_s9xBL
                     (++
                        @ Char
                        GHC.Show.showCommaSpace1
                        (unpackAppendCString#
                           GHC.Event.EPoll.$fShowEvent2
                           (case ww2_s9xBM
                                 `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                                         :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
                            of
                            { GHC.Int.I32# x#_i9gYS ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   x#_i9gYS
                                   (unpackAppendCString#
                                      GHC.Event.EPoll.$fShowEPollFd2
                                      (GHC.Types.: @ Char GHC.Show.$fShow(,)2 w_s9xBE))
                            of
                            { (# ww5_i9gZ0, ww6_i9gZ1 #) ->
                            GHC.Types.: @ Char ww5_i9gZ0 ww6_i9gZ1
                            }
                            }))))))
      }

-- RHS size: {terms: 14, types: 8, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent_$cshowsPrec [InlPrag=NOUSERINLINE[0]]
  :: Int -> Event -> GHC.Show.ShowS
[GblId,
 Arity=3,
 Str=<S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=3,unsat_ok=True,boring_ok=False)
         Tmpl= \ (w_s9xBC [Occ=Once!] :: Int)
                 (w1_s9xBD [Occ=Once!] :: Event)
                 (w2_s9xBE [Occ=Once] :: String) ->
                 case w_s9xBC of { I# ww1_s9xBH [Occ=Once] ->
                 case w1_s9xBD of
                 { Event ww3_s9xBL [Occ=Once] ww4_s9xBM [Occ=Once] ->
                 GHC.Event.EPoll.$w$cshowsPrec1
                   ww1_s9xBH ww3_s9xBL ww4_s9xBM w2_s9xBE
                 }
                 }}]
GHC.Event.EPoll.$fShowEvent_$cshowsPrec
  = \ (w_s9xBC :: Int) (w1_s9xBD :: Event) (w2_s9xBE :: String) ->
      case w_s9xBC of { I# ww1_s9xBH ->
      case w1_s9xBD of { Event ww3_s9xBL ww4_s9xBM ->
      GHC.Event.EPoll.$w$cshowsPrec1
        ww1_s9xBH ww3_s9xBL ww4_s9xBM w2_s9xBE
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent8 :: Int
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.Event.EPoll.$fShowEvent8 = GHC.Types.I# 0#

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent_$cshow :: Event -> String
[GblId,
 Arity=1,
 Str=<S,1*U(1*U(U),1*U(U))>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=False)
         Tmpl= \ (x_i7Jay [Occ=Once] :: Event) ->
                 GHC.Event.EPoll.$fShowEvent_$cshowsPrec
                   GHC.Event.EPoll.$fShowEvent8 x_i7Jay (GHC.Types.[] @ Char)}]
GHC.Event.EPoll.$fShowEvent_$cshow
  = \ (x_i7Jay :: Event) ->
      case x_i7Jay of { Event ww1_s9xBL ww2_s9xBM ->
      GHC.Event.EPoll.$w$cshowsPrec1
        0# ww1_s9xBL ww2_s9xBM (GHC.Types.[] @ Char)
      }

-- RHS size: {terms: 10, types: 5, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent1 :: Event -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U(1*U(U),1*U(U))><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [20 0] 60 0}]
GHC.Event.EPoll.$fShowEvent1
  = \ (w_s9xBD :: Event) (w1_s9xBE :: String) ->
      case w_s9xBD of { Event ww1_s9xBL ww2_s9xBM ->
      GHC.Event.EPoll.$w$cshowsPrec1 0# ww1_s9xBL ww2_s9xBM w1_s9xBE
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent_$cshowList :: [Event] -> GHC.Show.ShowS
[GblId,
 Arity=2,
 Str=<S,1*U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=False)
         Tmpl= \ (ls_i7JaB [Occ=Once] :: [Event])
                 (s_i7JaC [Occ=Once] :: String) ->
                 GHC.Show.showList__
                   @ Event GHC.Event.EPoll.$fShowEvent1 ls_i7JaB s_i7JaC}]
GHC.Event.EPoll.$fShowEvent_$cshowList
  = \ (ls_i7JaB :: [Event]) (s_i7JaC :: String) ->
      GHC.Show.showList__
        @ Event GHC.Event.EPoll.$fShowEvent1 ls_i7JaB s_i7JaC

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
GHC.Event.EPoll.$fShowEvent [InlPrag=NOUSERINLINE CONLIKE]
  :: Show Event
[GblId[DFunId],
 Str=m,
 Unf=DFun: \ ->
       GHC.Show.C:Show TYPE: Event
                       GHC.Event.EPoll.$fShowEvent_$cshowsPrec
                       GHC.Event.EPoll.$fShowEvent_$cshow
                       GHC.Event.EPoll.$fShowEvent_$cshowList]
GHC.Event.EPoll.$fShowEvent
  = GHC.Show.C:Show
      @ Event
      GHC.Event.EPoll.$fShowEvent_$cshowsPrec
      GHC.Event.EPoll.$fShowEvent_$cshow
      GHC.Event.EPoll.$fShowEvent_$cshowList

-- RHS size: {terms: 5, types: 1, coercions: 12, joins: 0/0}
GHC.Event.EPoll.$fFiniteBitsEventType [InlPrag=NOUSERINLINE CONLIKE]
  :: FiniteBits EventType
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       Data.Bits.C:FiniteBits TYPE: EventType
                              GHC.Event.EPoll.$fBitsEventType
                              GHC.Word.$fBitsWord32_$cfiniteBitSize
                              `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
                              `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *))
                              GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
                              `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
                                      :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *))]
GHC.Event.EPoll.$fFiniteBitsEventType
  = Data.Bits.C:FiniteBits
      @ EventType
      GHC.Event.EPoll.$fBitsEventType
      (GHC.Word.$fBitsWord32_$cfiniteBitSize
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *)))
      (GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0]) ->_R <Int>_R
               :: (Word32 -> Int :: *) ~R# (EventType -> Int :: *)))

-- RHS size: {terms: 8, types: 1, coercions: 43, joins: 0/0}
GHC.Event.EPoll.$fNumEventType [InlPrag=NOUSERINLINE CONLIKE]
  :: Num EventType
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Num.C:Num TYPE: EventType
                     GHC.Word.$fNumWord32_$c+
                     `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (EventType -> EventType -> EventType :: *))
                     GHC.Word.$fNumWord32_$c-
                     `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (EventType -> EventType -> EventType :: *))
                     GHC.Word.$fNumWord32_$c*
                     `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             :: (Word32 -> Word32 -> Word32 :: *)
                                ~R# (EventType -> EventType -> EventType :: *))
                     GHC.Word.$fNumWord32_$cnegate
                     `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *))
                     GHC.Word.$fNumWord32_$cabs
                     `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *))
                     GHC.Word.$fNumWord32_$csignum
                     `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *))
                     GHC.Word.$fNumWord32_$cfromInteger
                     `cast` (<integer-simple-0.1.1.1:GHC.Integer.Type.Integer>_R
                             ->_R Sym (GHC.Event.EPoll.N:EventType[0])
                             :: (integer-simple-0.1.1.1:GHC.Integer.Type.Integer -> Word32 :: *)
                                ~R# (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                                     -> EventType :: *))]
GHC.Event.EPoll.$fNumEventType
  = GHC.Num.C:Num
      @ EventType
      (GHC.Word.$fNumWord32_$c+
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (EventType -> EventType -> EventType :: *)))
      (GHC.Word.$fNumWord32_$c-
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (EventType -> EventType -> EventType :: *)))
      (GHC.Word.$fNumWord32_$c*
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 -> Word32 :: *)
                  ~R# (EventType -> EventType -> EventType :: *)))
      (GHC.Word.$fNumWord32_$cnegate
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *)))
      (GHC.Word.$fNumWord32_$cabs
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *)))
      (GHC.Word.$fNumWord32_$csignum
       `cast` (Sym (GHC.Event.EPoll.N:EventType[0])
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (Word32 -> Word32 :: *) ~R# (EventType -> EventType :: *)))
      (GHC.Word.$fNumWord32_$cfromInteger
       `cast` (<integer-simple-0.1.1.1:GHC.Integer.Type.Integer>_R
               ->_R Sym (GHC.Event.EPoll.N:EventType[0])
               :: (integer-simple-0.1.1.1:GHC.Integer.Type.Integer -> Word32 :: *)
                  ~R# (integer-simple-0.1.1.1:GHC.Integer.Type.Integer
                       -> EventType :: *)))

-- RHS size: {terms: 3, types: 1, coercions: 26, joins: 0/0}
GHC.Event.EPoll.$fEqEPollFd [InlPrag=NOUSERINLINE CONLIKE]
  :: Eq EPollFd
[GblId[DFunId],
 Caf=NoCafRefs,
 Str=m,
 Unf=DFun: \ ->
       GHC.Classes.C:Eq TYPE: EPollFd
                        GHC.Int.eqInt32
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
                                ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
                                ->_R <Bool>_R
                                :: (GHC.Int.Int32 -> GHC.Int.Int32 -> Bool :: *)
                                   ~R# (EPollFd -> EPollFd -> Bool :: *))
                        GHC.Int.neInt32
                        `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
                                ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
                                ->_R <Bool>_R
                                :: (GHC.Int.Int32 -> GHC.Int.Int32 -> Bool :: *)
                                   ~R# (EPollFd -> EPollFd -> Bool :: *))]
GHC.Event.EPoll.$fEqEPollFd
  = GHC.Classes.C:Eq
      @ EPollFd
      (GHC.Int.eqInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
               ->_R <Bool>_R
               :: (GHC.Int.Int32 -> GHC.Int.Int32 -> Bool :: *)
                  ~R# (EPollFd -> EPollFd -> Bool :: *)))
      (GHC.Int.neInt32
       `cast` ((Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
               ->_R (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (GHC.Event.EPoll.N:EPollFd[0]))
               ->_R <Bool>_R
               :: (GHC.Int.Int32 -> GHC.Int.Int32 -> Bool :: *)
                  ~R# (EPollFd -> EPollFd -> Bool :: *)))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r9y01 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl_r9y01 = "epollControl"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_r9y02 :: [Char]
[GblId]
lvl1_r9y02 = unpackCString# lvl_r9y01

-- RHS size: {terms: 7, types: 4, coercions: 0, joins: 0/0}
GHC.Event.EPoll.new6
  :: State# RealWorld -> Int# -> (# State# RealWorld, CInt #)
[GblId, Arity=2, Str=<B,U><B,U>x, Unf=OtherCon []]
GHC.Event.EPoll.new6
  = \ (ds2_d924s :: State# RealWorld) (ds3_d924r :: Int#) ->
      Foreign.C.Error.$wlvl
        @ CInt lvl1_r9y02 (narrow32Int# ds3_d924r) ds2_d924s

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_r9y03 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl2_r9y03 = "epollWaitNonBlock"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_r9y04 :: [Char]
[GblId]
lvl3_r9y04 = unpackCString# lvl2_r9y03

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_r9y05 :: Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []]
lvl4_r9y05 = "epollWait"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_r9y06 :: [Char]
[GblId]
lvl5_r9y06 = unpackCString# lvl4_r9y05

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.new8 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.new8 = "modifyFdOnce"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.new7 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.EPoll.new7 = unpackCString# GHC.Event.EPoll.new8

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_r9y07 :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl6_r9y07 = GHC.Types.I# 3#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_r9y08 :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl7_r9y08 = GHC.Types.I# 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_r9y09 :: Int
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []]
lvl8_r9y09 = GHC.Types.I# 2#

-- RHS size: {terms: 459, types: 451, coercions: 22, joins: 4/17}
GHC.Event.EPoll.new10
  :: EPoll
     -> Maybe Timeout
     -> (Fd -> E.Event -> IO ())
     -> State# RealWorld
     -> (# State# RealWorld, Int #)
[GblId,
 Arity=4,
 Str=<S(SS),1*U(U,U)><S,1*U><L,C(C1(C1(U(U,A))))><S,U>,
 Unf=OtherCon []]
GHC.Event.EPoll.new10
  = \ (ep_a9w2I :: EPoll)
      (mtimeout_a9w2J :: Maybe Timeout)
      (f_a9w2K :: Fd -> E.Event -> IO ())
      (eta_B1 :: State# RealWorld) ->
      case ep_a9w2I of { EPoll dt_d9wLl dt1_d9wLm ->
      case readMutVar#
             @ RealWorld @ (GHC.Event.Array.AC Event) dt1_d9wLm eta_B1
      of
      { (# ipv_i9xqj, ipv1_i9xqk #) ->
      case ipv1_i9xqk of
      { GHC.Event.Array.AC es_i9xqo dt2_i9xqp dt3_i9xqq ->
      case es_i9xqo of wild2_s9xNz
      { GHC.ForeignPtr.ForeignPtr ds2_s9xNA r_s9xNB ->
      join {
        $w$j1_s9xC0 [InlPrag=NOUSERINLINE[0], Dmd=<L,1*C1(C1(U(U,U)))>]
          :: State# RealWorld -> Int# -> (# State# RealWorld, Int #)
        [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
        $w$j1_s9xC0 (w_s9xBU [OS=OneShot] :: State# RealWorld)
                    (ww_s9xBY [OS=OneShot] :: Int#)
          = case touch#
                   @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents r_s9xNB w_s9xBU
            of s'_i9xqC
            { __DEFAULT ->
            case writeMutVar#
                   @ RealWorld
                   @ (GHC.Event.Array.AC Event)
                   dt1_d9wLm
                   (GHC.Event.Array.AC @ Event wild2_s9xNz ww_s9xBY dt3_i9xqq)
                   s'_i9xqC
            of s2#_i9xqH
            { __DEFAULT ->
            case ># ww_s9xBY 0# of {
              __DEFAULT -> (# s2#_i9xqH, GHC.Types.I# ww_s9xBY #);
              1# ->
                case readMutVar#
                       @ RealWorld @ (GHC.Event.Array.AC Event) dt1_d9wLm s2#_i9xqH
                of
                { (# ipv2_i9wHt, ipv3_i9wHu #) ->
                case ipv3_i9wHu of
                { GHC.Event.Array.AC es1_i9wHE dt4_i9wHF dt5_i9wHG ->
                case es1_i9wHE of { GHC.ForeignPtr.ForeignPtr fo_s9xNE ds5_s9xNF ->
                let {
                  offset_s9wYb [Dmd=<S,U>] :: Int#
                  [LclId]
                  offset_s9wYb = *# dt4_i9wHF 12# } in
                join {
                  exit_s9wYa [Dmd=<L,C(U(U,U))>]
                    :: State# RealWorld -> (# State# RealWorld, Int #)
                  [LclId[JoinId(1)], Arity=1, Str=<S,U>]
                  exit_s9wYa (w1_i9wHT [OS=OneShot] :: State# RealWorld)
                    = case touch#
                             @ 'LiftedRep @ GHC.ForeignPtr.ForeignPtrContents ds5_s9xNF w1_i9wHT
                      of s'1_i9wHU
                      { __DEFAULT ->
                      case readMutVar#
                             @ RealWorld @ (GHC.Event.Array.AC Event) dt1_d9wLm s'1_i9wHU
                      of
                      { (# ipv4_i9wQs, ipv5_i9wQt #) ->
                      case ipv5_i9wQt of
                      { GHC.Event.Array.AC ds7_i9wQx dt6_i9wQy dt7_i9wQz ->
                      case ==# dt7_i9wQz ww_s9xBY of {
                        __DEFAULT -> (# ipv4_i9wQs, GHC.Types.I# ww_s9xBY #);
                        1# ->
                          case readMutVar#
                                 @ RealWorld @ (GHC.Event.Array.AC Event) dt1_d9wLm ipv4_i9wQs
                          of
                          { (# ipv6_i9wZ0, ipv7_i9wZ1 #) ->
                          case ipv7_i9wZ1 of
                          { GHC.Event.Array.AC ds_i9wZ5 dt8_i9wZ6 dt9_i9wZ7 ->
                          case ds_i9wZ5 of { GHC.ForeignPtr.ForeignPtr fo1_s9xNI ds9_s9xNJ ->
                          let {
                            ww1_i9wYW [Dmd=<S,U>] :: Int#
                            [LclId]
                            ww1_i9wYW = *# 2# dt7_i9wQz } in
                          case ># ww1_i9wYW dt9_i9wZ7 of {
                            __DEFAULT -> (# ipv6_i9wZ0, GHC.Types.I# ww_s9xBY #);
                            1# ->
                              let {
                                n1_i9wZi [Dmd=<S,U>] :: Int#
                                [LclId]
                                n1_i9wZi = -# ww1_i9wYW 1# } in
                              let {
                                ipv8_i9wZl [Dmd=<S,U>] :: Int#
                                [LclId]
                                ipv8_i9wZl = orI# n1_i9wZi (uncheckedIShiftRA# n1_i9wZi 1#) } in
                              let {
                                ipv9_i9wZm [Dmd=<S,U>] :: Int#
                                [LclId]
                                ipv9_i9wZm
                                  = orI# ipv8_i9wZl (uncheckedIShiftRA# ipv8_i9wZl 2#) } in
                              let {
                                ipv10_i9wZn [Dmd=<S,U>] :: Int#
                                [LclId]
                                ipv10_i9wZn
                                  = orI# ipv9_i9wZm (uncheckedIShiftRA# ipv9_i9wZm 4#) } in
                              let {
                                ipv11_i9wZo [Dmd=<S,U>] :: Int#
                                [LclId]
                                ipv11_i9wZo
                                  = orI# ipv10_i9wZn (uncheckedIShiftRA# ipv10_i9wZn 8#) } in
                              let {
                                ipv12_i9wZp [Dmd=<S,U>] :: Int#
                                [LclId]
                                ipv12_i9wZp
                                  = orI# ipv11_i9wZo (uncheckedIShiftRA# ipv11_i9wZo 16#) } in
                              let {
                                x_i9wZq [Dmd=<S,U>] :: Int#
                                [LclId]
                                x_i9wZq
                                  = +#
                                      (orI# ipv12_i9wZp (uncheckedIShiftRA# ipv12_i9wZp 32#))
                                      1# } in
                              let {
                                x1_i9wZr [Dmd=<S,U>] :: Int#
                                [LclId]
                                x1_i9wZr = *# x_i9wZq 12# } in
                              case <# x1_i9wZr 0# of {
                                __DEFAULT ->
                                  case newPinnedByteArray# @ RealWorld x1_i9wZr ipv6_i9wZ0 of
                                  { (# ipv13_i9wZw, ipv14_i9wZx #) ->
                                  let {
                                    ipv15_i9wZv :: Addr#
                                    [LclId]
                                    ipv15_i9wZv
                                      = byteArrayContents#
                                          (ipv14_i9wZx
                                           `cast` (UnsafeCo representational (MutableByteArray#
                                                                                RealWorld) ByteArray#
                                                   :: (MutableByteArray# RealWorld :: TYPE
                                                                                        'UnliftedRep)
                                                      ~R# (ByteArray# :: TYPE 'UnliftedRep))) } in
                                  let {
                                    ipv16_i9wZz :: GHC.ForeignPtr.ForeignPtrContents
                                    [LclId, Unf=OtherCon []]
                                    ipv16_i9wZz = GHC.ForeignPtr.PlainPtr ipv14_i9wZx } in
                                  case eqAddr# fo1_s9xNI __NULL of {
                                    __DEFAULT ->
                                      case ># dt9_i9wZ7 0# of {
                                        __DEFAULT ->
                                          case touch#
                                                 @ 'LiftedRep
                                                 @ GHC.ForeignPtr.ForeignPtrContents
                                                 ds9_s9xNJ
                                                 ipv13_i9wZw
                                          of s'2_i9wZC
                                          { __DEFAULT ->
                                          case /=# x_i9wZq dt9_i9wZ7 of {
                                            __DEFAULT -> (# s'2_i9wZC, GHC.Types.I# ww_s9xBY #);
                                            1# ->
                                              case writeMutVar#
                                                     @ RealWorld
                                                     @ (GHC.Event.Array.AC Event)
                                                     dt1_d9wLm
                                                     (GHC.Event.Array.AC
                                                        @ Event
                                                        (GHC.ForeignPtr.ForeignPtr
                                                           @ Event ipv15_i9wZv ipv16_i9wZz)
                                                        dt8_i9wZ6
                                                        x_i9wZq)
                                                     s'2_i9wZC
                                              of s2#1_i9wZE
                                              { __DEFAULT ->
                                              (# s2#1_i9wZE, GHC.Types.I# ww_s9xBY #)
                                              }
                                          }
                                          };
                                        1# ->
                                          case {__pkg_ccall base-4.11.0.0 Addr#
                           -> Addr#
                           -> Word#
                           -> State# RealWorld
                           -> (# State# RealWorld, Addr# #)}_i9wZF
                                                 ipv15_i9wZv
                                                 fo1_s9xNI
                                                 (int2Word# (*# dt9_i9wZ7 12#))
                                                 ipv13_i9wZw
                                          of
                                          { (# ds10_i9wZI, ds11_i9wZJ #) ->
                                          case touch#
                                                 @ 'LiftedRep
                                                 @ GHC.ForeignPtr.ForeignPtrContents
                                                 ipv16_i9wZz
                                                 ds10_i9wZI
                                          of s'2_i9wZL
                                          { __DEFAULT ->
                                          case touch#
                                                 @ 'LiftedRep
                                                 @ GHC.ForeignPtr.ForeignPtrContents
                                                 ds9_s9xNJ
                                                 s'2_i9wZL
                                          of s'3_i9wZM
                                          { __DEFAULT ->
                                          case /=# x_i9wZq dt9_i9wZ7 of {
                                            __DEFAULT -> (# s'3_i9wZM, GHC.Types.I# ww_s9xBY #);
                                            1# ->
                                              case writeMutVar#
                                                     @ RealWorld
                                                     @ (GHC.Event.Array.AC Event)
                                                     dt1_d9wLm
                                                     (GHC.Event.Array.AC
                                                        @ Event
                                                        (GHC.ForeignPtr.ForeignPtr
                                                           @ Event ipv15_i9wZv ipv16_i9wZz)
                                                        dt8_i9wZ6
                                                        x_i9wZq)
                                                     s'3_i9wZM
                                              of s2#1_i9wZO
                                              { __DEFAULT ->
                                              (# s2#1_i9wZO, GHC.Types.I# ww_s9xBY #)
                                              }
                                          }
                                          }
                                          }
                                          }
                                      };
                                    1# ->
                                      case touch#
                                             @ 'LiftedRep
                                             @ GHC.ForeignPtr.ForeignPtrContents
                                             ds9_s9xNJ
                                             ipv13_i9wZw
                                      of s'2_i9wZP
                                      { __DEFAULT ->
                                      case /=# x_i9wZq dt9_i9wZ7 of {
                                        __DEFAULT -> (# s'2_i9wZP, GHC.Types.I# ww_s9xBY #);
                                        1# ->
                                          case writeMutVar#
                                                 @ RealWorld
                                                 @ (GHC.Event.Array.AC Event)
                                                 dt1_d9wLm
                                                 (GHC.Event.Array.AC
                                                    @ Event
                                                    (GHC.ForeignPtr.ForeignPtr
                                                       @ Event ipv15_i9wZv ipv16_i9wZz)
                                                    dt8_i9wZ6
                                                    x_i9wZq)
                                                 s'2_i9wZP
                                          of s2#1_i9wZR
                                          { __DEFAULT ->
                                          (# s2#1_i9wZR, GHC.Types.I# ww_s9xBY #)
                                          }
                                      }
                                      }
                                  }
                                  };
                                1# ->
                                  case GHC.ForeignPtr.mallocPlainForeignPtrBytes2 of wild8_00 { }
                              }
                          }
                          }
                          }
                          }
                      }
                      }
                      }
                      } } in
                joinrec {
                  $wgo_s9wY4 [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                    :: Int# -> State# RealWorld -> (# State# RealWorld, Int #)
                  [LclId[JoinId(2)], Arity=2, Str=<S,U><S,U>, Unf=OtherCon []]
                  $wgo_s9wY4 (ww1_i9wHW :: Int#) (w1_i9wHX :: State# RealWorld)
                    = case >=# ww1_i9wHW offset_s9wYb of {
                        __DEFAULT ->
                          let {
                            ptr_s9wY9 [Dmd=<S,U>] :: Addr#
                            [LclId]
                            ptr_s9wY9 = plusAddr# fo_s9xNE ww1_i9wHW } in
                          case readWord32OffAddr# @ RealWorld ptr_s9wY9 0# w1_i9wHX of
                          { (# ipv4_i9hi7, ipv5_i9hi8 #) ->
                          case readInt32OffAddr#
                                 @ RealWorld (plusAddr# ptr_s9wY9 4#) 0# ipv4_i9hi7
                          of
                          { (# ipv6_i9h5B, ipv7_i9h5C #) ->
                          case ((f_a9w2K
                                   ((GHC.Int.I32# ipv7_i9h5C)
                                    `cast` (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (System.Posix.Types.N:Fd[0])
                                            :: (GHC.Int.Int32 :: *) ~R# (Fd :: *)))
                                   (case and# ipv5_i9hi8 25## of {
                                      __DEFAULT ->
                                        case and# ipv5_i9hi8 28## of {
                                          __DEFAULT ->
                                            lvl6_r9y07
                                            `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                    :: (Int :: *) ~R# (E.Event :: *));
                                          0## ->
                                            lvl7_r9y08
                                            `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                    :: (Int :: *) ~R# (E.Event :: *))
                                        };
                                      0## ->
                                        case and# ipv5_i9hi8 28## of {
                                          __DEFAULT ->
                                            lvl8_r9y09
                                            `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                    :: (Int :: *) ~R# (E.Event :: *));
                                          0## ->
                                            GHC.Event.EPoll.$fShowEvent8
                                            `cast` (Sym (GHC.Event.Internal.N:Event[0])
                                                    :: (Int :: *) ~R# (E.Event :: *))
                                        }
                                    }))
                                `cast` (GHC.Types.N:IO[0] <()>_R
                                        :: (IO () :: *)
                                           ~R# (State# RealWorld
                                                -> (# State# RealWorld, () #) :: *)))
                                 ipv6_i9h5B
                          of
                          { (# ipv8_i9wI6, ipv9_i9wI7 #) ->
                          jump $wgo_s9wY4 (+# ww1_i9wHW 12#) ipv8_i9wI6
                          }
                          }
                          };
                        1# -> jump exit_s9wYa w1_i9wHX
                      }; } in
                jump $wgo_s9wY4 0# ipv2_i9wHt
                }
                }
                }
            }
            }
            } } in
      case mtimeout_a9w2J of {
        Nothing ->
          case {__pkg_ccall base-4.11.0.0 Int#
                           -> Addr#
                           -> Int#
                           -> Int#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d9wKA
                 dt_d9wLl ds2_s9xNA (narrow32Int# dt3_i9xqq) 0# ipv_i9xqj
          of
          { (# ds_d9wKy, ds4_d9wKx #) ->
          case narrow32Int# ds4_d9wKx of wild5_X5q {
            __DEFAULT -> jump $w$j1_s9xC0 ds_d9wKy wild5_X5q;
            -1# ->
              case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                     ds_d9wKy
              of
              { (# ds5_d924s, ds6_d924r #) ->
              case narrow32Int# ds6_d924r of {
                __DEFAULT ->
                  case Foreign.C.Error.throwErrno1 @ CInt lvl3_r9y04 ds5_d924s of
                  { (# ipv2_i7Vb3, ipv3_i7Vb4 #) ->
                  case ipv3_i7Vb4
                       `cast` (Foreign.C.Types.N:CInt[0]
                               :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
                  of
                  { GHC.Int.I32# x#_i7O0N ->
                  jump $w$j1_s9xC0 ipv2_i7Vb3 x#_i7O0N
                  }
                  };
                4# -> jump $w$j1_s9xC0 ds5_d924s 0#
              }
              }
          }
          };
        Just timeout_a9w2P ->
          join {
            $j_s9x4l [Dmd=<C(S),1*C1(U(U,U))>]
              :: Int# -> (# State# RealWorld, Int #)
            [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
            $j_s9x4l (x#_X7O6l [OS=OneShot] :: Int#)
              = case {__pkg_ccall_GC base-4.11.0.0 Int#
                              -> Addr#
                              -> Int#
                              -> Int#
                              -> State# RealWorld
                              -> (# State# RealWorld, Int# #)}_d9wKR
                       dt_d9wLl
                       ds2_s9xNA
                       (narrow32Int# dt3_i9xqq)
                       (narrow32Int# x#_X7O6l)
                       ipv_i9xqj
                of
                { (# ds_d9wKP, ds4_d9wKO #) ->
                case narrow32Int# ds4_d9wKO of wild5_X5t {
                  __DEFAULT -> jump $w$j1_s9xC0 ds_d9wKP wild5_X5t;
                  -1# ->
                    case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                           ds_d9wKP
                    of
                    { (# ds5_d924s, ds6_d924r #) ->
                    case narrow32Int# ds6_d924r of {
                      __DEFAULT ->
                        case Foreign.C.Error.throwErrno1 @ CInt lvl5_r9y06 ds5_d924s of
                        { (# ipv2_i7Vb3, ipv3_i7Vb4 #) ->
                        case ipv3_i7Vb4
                             `cast` (Foreign.C.Types.N:CInt[0]
                                     :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
                        of
                        { GHC.Int.I32# x#1_i7O0N ->
                        jump $w$j1_s9xC0 ipv2_i7Vb3 x#1_i7O0N
                        }
                        };
                      4# -> jump $w$j1_s9xC0 ds5_d924s 0#
                    }
                    }
                }
                } } in
          case timeout_a9w2P of {
            Timeout dt4_d9wLi ->
              jump $j_s9x4l
                (word2Int#
                   (quotWord#
                      (minusWord# (plusWord# dt4_d9wLi 1000000##) 1##) 1000000##));
            Forever -> jump $j_s9x4l -1#
          }
      }
      }
      }
      }
      }

-- RHS size: {terms: 120, types: 118, coercions: 5, joins: 2/3}
GHC.Event.EPoll.new9
  :: EPoll
     -> Fd
     -> E.Event
     -> E.Event
     -> State# RealWorld
     -> (# State# RealWorld, Bool #)
[GblId,
 Arity=5,
 Str=<S(SL),1*U(U,A)><S(S),1*U(U)><S(S),1*U(1*U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 20 20 20 0] 291 0}]
GHC.Event.EPoll.new9
  = \ (ep_a9w2v :: EPoll)
      (fd_a9w2w :: Fd)
      (oevt_a9w2x :: E.Event)
      (nevt_a9w2y :: E.Event)
      (eta_B1 :: State# RealWorld) ->
      case newAlignedPinnedByteArray# @ RealWorld 12# 4# eta_B1 of
      { (# ipv_s8ML2, ipv1_s8ML3 #) ->
      case unsafeFreezeByteArray# @ RealWorld ipv1_s8ML3 ipv_s8ML2 of
      { (# ipv2_s8ML6, ipv3_s8ML7 #) ->
      case nevt_a9w2y
           `cast` (GHC.Event.Internal.N:Event[0]
                   :: (E.Event :: *) ~R# (Int :: *))
      of
      { I# x#_i7Sgh ->
      join {
        $j_s9x7H [Dmd=<C(S),1*C1(U(U,U))>]
          :: Word# -> (# State# RealWorld, Bool #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s9x7H (x_i9hhQ [OS=OneShot] :: Word#)
          = let {
              ptr_s9wXZ [Dmd=<S,U>] :: Addr#
              [LclId]
              ptr_s9wXZ = byteArrayContents# ipv3_s8ML7 } in
            case writeWord32OffAddr#
                   @ RealWorld ptr_s9wXZ 0# x_i9hhQ ipv2_s8ML6
            of s2_i9hhS
            { __DEFAULT ->
            case fd_a9w2w
                 `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                         :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
            of
            { GHC.Int.I32# x1_i9h5k ->
            case writeInt32OffAddr#
                   @ RealWorld (plusAddr# ptr_s9wXZ 4#) 0# x1_i9h5k s2_i9hhS
            of s1_i9h5m
            { __DEFAULT ->
            case ep_a9w2v of { EPoll dt_d9wLj dt1_d9wLk ->
            case oevt_a9w2x
                 `cast` (GHC.Event.Internal.N:Event[0]
                         :: (E.Event :: *) ~R# (Int :: *))
            of
            { I# x2_a22G ->
            join {
              $j1_s9x4U [Dmd=<C(S),1*C1(U(U,U))>]
                :: Int# -> (# State# RealWorld, Bool #)
              [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
              $j1_s9x4U (ds_d9wL0 [OS=OneShot] :: Int#)
                = case {__pkg_ccall base-4.11.0.0 Int#
                           -> Int#
                           -> Int#
                           -> Addr#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d9wL8
                         dt_d9wLj ds_d9wL0 x1_i9h5k ptr_s9wXZ s1_i9h5m
                  of
                  { (# ds1_d9wL6, ds5_d9wL5 #) ->
                  case narrow32Int# ds5_d9wL5 of {
                    __DEFAULT ->
                      case touch# @ 'UnliftedRep @ ByteArray# ipv3_s8ML7 ds1_d9wL6
                      of s4_a8MBC
                      { __DEFAULT ->
                      (# s4_a8MBC, GHC.Types.True #)
                      };
                    -1# ->
                      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                             ds1_d9wL6
                      of
                      { (# ds6_d924s, ds7_d924r #) ->
                      case GHC.Event.EPoll.new6 ds6_d924s ds7_d924r of wild7_00 { }
                      }
                  }
                  } } in
            case x2_a22G of {
              __DEFAULT ->
                case x#_i7Sgh of {
                  __DEFAULT -> jump $j1_s9x4U 3#;
                  0# -> jump $j1_s9x4U 2#
                };
              0# -> jump $j1_s9x4U 1#
            }
            }
            }
            }
            }
            } } in
      case andI# x#_i7Sgh 1# of {
        __DEFAULT ->
          case andI# x#_i7Sgh 2# of {
            __DEFAULT -> jump $j_s9x7H 5##;
            0# -> jump $j_s9x7H 1##
          };
        0# ->
          case andI# x#_i7Sgh 2# of {
            __DEFAULT -> jump $j_s9x7H 4##;
            0# -> jump $j_s9x7H 0##
          }
      }
      }
      }
      }

-- RHS size: {terms: 167, types: 173, coercions: 4, joins: 1/4}
GHC.Event.EPoll.new5
  :: EPoll
     -> Fd
     -> E.Event
     -> State# RealWorld
     -> (# State# RealWorld, Bool #)
[GblId,
 Arity=4,
 Str=<S(SL),1*U(U,A)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=IF_ARGS [20 20 20 0] 371 0}]
GHC.Event.EPoll.new5
  = \ (ep_a9w2B :: EPoll)
      (fd_a9w2C :: Fd)
      (evt_a9w2D :: E.Event)
      (eta_B1 :: State# RealWorld) ->
      case evt_a9w2D
           `cast` (GHC.Event.Internal.N:Event[0]
                   :: (E.Event :: *) ~R# (Int :: *))
      of
      { I# x#_i7Sgh ->
      join {
        $j_s9x85 [Dmd=<C(S),1*C1(U(U,U))>]
          :: Word# -> (# State# RealWorld, Bool #)
        [LclId[JoinId(1)], Arity=1, Str=<S,U>, Unf=OtherCon []]
        $j_s9x85 (x#1_i9hfA [OS=OneShot] :: Word#)
          = case newAlignedPinnedByteArray# @ RealWorld 12# 4# eta_B1 of
            { (# ipv_s8ML2, ipv1_s8ML3 #) ->
            case unsafeFreezeByteArray# @ RealWorld ipv1_s8ML3 ipv_s8ML2 of
            { (# ipv2_s8ML6, ipv3_s8ML7 #) ->
            let {
              ipv4_s9wOv [Dmd=<S,U>] :: Word#
              [LclId]
              ipv4_s9wOv = or# x#1_i9hfA 1073741824## } in
            let {
              ptr_s9wXV [Dmd=<S,U>] :: Addr#
              [LclId]
              ptr_s9wXV = byteArrayContents# ipv3_s8ML7 } in
            case writeWord32OffAddr#
                   @ RealWorld ptr_s9wXV 0# ipv4_s9wOv ipv2_s8ML6
            of s2_i9hhS
            { __DEFAULT ->
            case fd_a9w2C
                 `cast` (System.Posix.Types.N:Fd[0] ; Foreign.C.Types.N:CInt[0]
                         :: (Fd :: *) ~R# (GHC.Int.Int32 :: *))
            of
            { GHC.Int.I32# x_i9h5k ->
            case writeInt32OffAddr#
                   @ RealWorld (plusAddr# ptr_s9wXV 4#) 0# x_i9h5k s2_i9hhS
            of s1_i9h5m
            { __DEFAULT ->
            case ep_a9w2B of { EPoll dt_d9wLj dt1_d9wLk ->
            case {__pkg_ccall base-4.11.0.0 Int#
                           -> Int#
                           -> Int#
                           -> Addr#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d9wL8
                   dt_d9wLj 3# x_i9h5k ptr_s9wXV s1_i9h5m
            of
            { (# ds_d9wL6, ds1_d9wL5 #) ->
            case touch# @ 'UnliftedRep @ ByteArray# ipv3_s8ML7 ds_d9wL6
            of s4_a8MBC
            { __DEFAULT ->
            case narrow32Int# ds1_d9wL5 of {
              __DEFAULT ->
                case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                       s4_a8MBC
                of
                { (# ds5_d924s, ds6_d924r #) ->
                case narrow32Int# ds6_d924r of {
                  __DEFAULT ->
                    Foreign.C.Error.throwErrno1 @ Bool GHC.Event.EPoll.new7 ds5_d924s;
                  2# ->
                    case newAlignedPinnedByteArray# @ RealWorld 12# 4# ds5_d924s of
                    { (# ipv5_X8MSq, ipv6_X8MSs #) ->
                    case unsafeFreezeByteArray# @ RealWorld ipv6_X8MSs ipv5_X8MSq of
                    { (# ipv7_X8MSz, ipv8_X8MSB #) ->
                    let {
                      ptr1_s9wXX [Dmd=<S,U>] :: Addr#
                      [LclId]
                      ptr1_s9wXX = byteArrayContents# ipv8_X8MSB } in
                    case writeWord32OffAddr#
                           @ RealWorld ptr1_s9wXX 0# ipv4_s9wOv ipv7_X8MSz
                    of s3_X9hpq
                    { __DEFAULT ->
                    case writeInt32OffAddr#
                           @ RealWorld (plusAddr# ptr1_s9wXX 4#) 0# x_i9h5k s3_X9hpq
                    of s5_X9hcZ
                    { __DEFAULT ->
                    case {__pkg_ccall base-4.11.0.0 Int#
                           -> Int#
                           -> Int#
                           -> Addr#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d9wL8
                           dt_d9wLj 1# x_i9h5k ptr1_s9wXX s5_X9hcZ
                    of
                    { (# ds9_X9wSU, ds10_X9x0J #) ->
                    case narrow32Int# ds10_X9x0J of {
                      __DEFAULT ->
                        case touch# @ 'UnliftedRep @ ByteArray# ipv8_X8MSB ds9_X9wSU
                        of s6_X8MJz
                        { __DEFAULT ->
                        (# s6_X8MJz, GHC.Types.True #)
                        };
                      -1# ->
                        case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                               ds9_X9wSU
                        of
                        { (# ds11_X92cp, ds12_X92kn #) ->
                        case GHC.Event.EPoll.new6 ds11_X92cp ds12_X92kn of wild10_00 { }
                        }
                    }
                    }
                    }
                    }
                    }
                    }
                }
                };
              0# -> (# s4_a8MBC, GHC.Types.True #)
            }
            }
            }
            }
            }
            }
            }
            }
            } } in
      case andI# x#_i7Sgh 1# of {
        __DEFAULT ->
          case andI# x#_i7Sgh 2# of {
            __DEFAULT -> jump $j_s9x85 5##;
            0# -> jump $j_s9x85 1##
          };
        0# ->
          case andI# x#_i7Sgh 2# of {
            __DEFAULT -> jump $j_s9x85 4##;
            0# -> jump $j_s9x85 0##
          }
      }
      }

-- RHS size: {terms: 13, types: 27, coercions: 0, joins: 0/0}
GHC.Event.EPoll.new4
  :: EPoll -> State# RealWorld -> (# State# RealWorld, () #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(SL),1*U(U,A)><S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=2,unsat_ok=True,boring_ok=True)}]
GHC.Event.EPoll.new4
  = \ (be_a9w2u :: EPoll) (s_X7IEb :: State# RealWorld) ->
      case be_a9w2u of { EPoll dt_d9wLj dt1_d9wLk ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9lPC
             dt_d9wLj s_X7IEb
      of
      { (# ds4_d9lPA, ds5_d9lPz #) ->
      (# ds4_d9lPA, GHC.Tuple.() #)
      }
      }

-- RHS size: {terms: 58, types: 100, coercions: 43, joins: 0/0}
GHC.Event.EPoll.$w$j [InlPrag=NOUSERINLINE[0]]
  :: State# RealWorld -> Int# -> (# State# RealWorld, E.Backend #)
[GblId,
 Arity=2,
 Str=<L,U><L,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0 0] 189 30}]
GHC.Event.EPoll.$w$j
  = \ (w_s9xC5 [OS=OneShot] :: State# RealWorld)
      (ww_s9xC9 [OS=OneShot] :: Int#) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d9lIb
             realWorld#
      of
      { (# ds_d9lIa, ds1_d9lI9 #) ->
      case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d9lI7
             realWorld#
      of
      { (# ds2_d9lI6, ds3_d9lI5 #) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> Int#
                           -> Int#
                           -> State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d9lMN
             ww_s9xC9 (narrow32Int# ds1_d9lI9) ds3_d9lI5 w_s9xC5
      of
      { (# ds4_d9lML, ds5_d9lMK #) ->
      case narrow32Int# ds5_d9lMK of {
        __DEFAULT ->
          case newPinnedByteArray# @ RealWorld 768# ds4_d9lML of
          { (# ipv5_i9x0f, ipv6_i9x0g #) ->
          case newMutVar#
                 @ (GHC.Event.Array.AC Event)
                 @ RealWorld
                 (GHC.Event.Array.AC
                    @ Event
                    (GHC.ForeignPtr.ForeignPtr
                       @ Event
                       (byteArrayContents#
                          (ipv6_i9x0g
                           `cast` (UnsafeCo representational (MutableByteArray#
                                                                RealWorld) ByteArray#
                                   :: (MutableByteArray# RealWorld :: TYPE 'UnliftedRep)
                                      ~R# (ByteArray# :: TYPE 'UnliftedRep))))
                       (GHC.ForeignPtr.PlainPtr ipv6_i9x0g))
                    0#
                    64#)
                 ipv5_i9x0f
          of
          { (# ipv7_i9x0k, ipv8_i9x0l #) ->
          (# ipv7_i9x0k,
             GHC.Event.Internal.Backend
               @ EPoll
               (GHC.Event.EPoll.EPoll ww_s9xC9 ipv8_i9x0l)
               (GHC.Event.EPoll.new10
                `cast` (<EPoll>_R
                        ->_R <Maybe Timeout>_R
                        ->_R <Fd -> E.Event -> IO ()>_R
                        ->_R Sym (GHC.Types.N:IO[0] <Int>_R)
                        :: (EPoll
                            -> Maybe Timeout
                            -> (Fd -> E.Event -> IO ())
                            -> State# RealWorld
                            -> (# State# RealWorld, Int #) :: *)
                           ~R# (EPoll
                                -> Maybe Timeout -> (Fd -> E.Event -> IO ()) -> IO Int :: *)))
               (GHC.Event.EPoll.new9
                `cast` (<EPoll>_R
                        ->_R <Fd>_R
                        ->_R <E.Event>_R
                        ->_R <E.Event>_R
                        ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                        :: (EPoll
                            -> Fd
                            -> E.Event
                            -> E.Event
                            -> State# RealWorld
                            -> (# State# RealWorld, Bool #) :: *)
                           ~R# (EPoll -> Fd -> E.Event -> E.Event -> IO Bool :: *)))
               (GHC.Event.EPoll.new5
                `cast` (<EPoll>_R
                        ->_R <Fd>_R
                        ->_R <E.Event>_R
                        ->_R Sym (GHC.Types.N:IO[0] <Bool>_R)
                        :: (EPoll
                            -> Fd
                            -> E.Event
                            -> State# RealWorld
                            -> (# State# RealWorld, Bool #) :: *)
                           ~R# (EPoll -> Fd -> E.Event -> IO Bool :: *)))
               (GHC.Event.EPoll.new4
                `cast` (<EPoll>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)
                        :: (EPoll -> State# RealWorld -> (# State# RealWorld, () #) :: *)
                           ~R# (EPoll -> IO () :: *))) #)
          }
          };
        -1# ->
          case {__pkg_ccall base-4.11.0.0 State# RealWorld
                           -> (# State# RealWorld, Int# #)}_d924u
                 ds4_d9lML
          of
          { (# ds6_d924s, ds7_d924r #) ->
          case System.Posix.Internals.setCloseOnExec2 ds6_d924s ds7_d924r
          of wild7_00 {
          }
          }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.new3 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 40 0}]
GHC.Event.EPoll.new3 = "epollCreate"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.Event.EPoll.new2 :: [Char]
[GblId,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=False, ConLike=True,
         WorkFree=False, Expandable=True, Guidance=IF_ARGS [] 20 0}]
GHC.Event.EPoll.new2 = unpackCString# GHC.Event.EPoll.new3

-- RHS size: {terms: 25, types: 28, coercions: 1, joins: 0/0}
GHC.Event.EPoll.new1
  :: State# RealWorld -> (# State# RealWorld, E.Backend #)
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [0] 121 0}]
GHC.Event.EPoll.new1
  = \ (s_i7IAv :: State# RealWorld) ->
      case {__pkg_ccall base-4.11.0.0 Int#
                           -> State# RealWorld -> (# State# RealWorld, Int# #)}_d9wLg
             256# s_i7IAv
      of
      { (# ds_d9wLe, ds1_d9wLd #) ->
      case narrow32Int# ds1_d9wLd of wild1_X4v {
        __DEFAULT -> GHC.Event.EPoll.$w$j ds_d9wLe wild1_X4v;
        -1# ->
          case Foreign.C.Error.throwErrno1
                 @ CInt GHC.Event.EPoll.new2 ds_d9wLe
          of
          { (# ipv_X7IGf, ipv1_X7IGh #) ->
          case ipv1_X7IGh
               `cast` (Foreign.C.Types.N:CInt[0]
                       :: (CInt :: *) ~R# (GHC.Int.Int32 :: *))
          of
          { GHC.Int.I32# ww1_s9xC9 ->
          GHC.Event.EPoll.$w$j ipv_X7IGf ww1_s9xC9
          }
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
new :: IO E.Backend
[GblId,
 Arity=1,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Event.EPoll.new1
               `cast` (Sym (GHC.Types.N:IO[0] <E.Backend>_R)
                       :: (State# RealWorld -> (# State# RealWorld, E.Backend #) :: *)
                          ~R# (IO E.Backend :: *))}]
new
  = GHC.Event.EPoll.new1
    `cast` (Sym (GHC.Types.N:IO[0] <E.Backend>_R)
            :: (State# RealWorld -> (# State# RealWorld, E.Backend #) :: *)
               ~R# (IO E.Backend :: *))


