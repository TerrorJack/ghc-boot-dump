
==================== Output Cmm ====================
2018-03-16 15:55:04.36047277 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.361584497 UTC

[section ""data" . GHC.Event.Arr.new1_closure" {
     GHC.Event.Arr.new1_closure:
         const GHC.Event.Arr.new1_info;
 },
 GHC.Event.Arr.new1_entry() //  [R2, R3]
         { info_tbl: [(cqQw,
                       label: GHC.Event.Arr.new1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqQw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqQC; else goto cqQD;
       cqQC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqQD: // global
           I64[Sp - 16] = block_cqQt_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqQI; else goto cqQu;
       uqQI: // global
           call _cqQt(R1) args: 0, res: 0, upd: 0;
       cqQu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqQt() //  [R1]
         { info_tbl: [(cqQt,
                       label: block_cqQt_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqQt: // global
           _sqPW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cqQz_info;
           R2 = _sqPW::P64;
           R1 = I64[R1 + 7];
           Sp = Sp + 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqQz() //  [R1]
         { info_tbl: [(cqQz,
                       label: block_cqQz_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqQz: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqQH; else goto cqQG;
       cqQH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqQG: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.3629439 UTC

[section ""data" . GHC.Event.Arr.new_closure" {
     GHC.Event.Arr.new_closure:
         const GHC.Event.Arr.new_info;
 },
 GHC.Event.Arr.new_entry() //  [R2, R3]
         { info_tbl: [(cqQN,
                       label: GHC.Event.Arr.new_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqQN: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.new1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.363897864 UTC

[section ""data" . GHC.Event.Arr.size_closure" {
     GHC.Event.Arr.size_closure:
         const GHC.Event.Arr.size_info;
 },
 GHC.Event.Arr.size_entry() //  [R2]
         { info_tbl: [(cqQX,
                       label: GHC.Event.Arr.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqQX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cqR4; else goto cqR5;
       cqR4: // global
           R2 = R2;
           R1 = GHC.Event.Arr.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqR5: // global
           I64[Sp - 8] = block_cqQU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uqR9; else goto cqQV;
       uqR9: // global
           call _cqQU(R1) args: 0, res: 0, upd: 0;
       cqQV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqQU() //  [R1]
         { info_tbl: [(cqQU,
                       label: block_cqQU_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqQU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqR8; else goto cqR7;
       cqR8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqR7: // global
           _sqQ8::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sqQ8::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.3653156 UTC

[section ""data" . GHC.Event.Arr.read1_closure" {
     GHC.Event.Arr.read1_closure:
         const GHC.Event.Arr.read1_info;
 },
 GHC.Event.Arr.read1_entry() //  [R2, R3]
         { info_tbl: [(cqRh,
                       label: GHC.Event.Arr.read1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqRh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqRq; else goto cqRr;
       cqRq: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.read1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqRr: // global
           I64[Sp - 16] = block_cqRe_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqRv; else goto cqRf;
       uqRv: // global
           call _cqRe(R1) args: 0, res: 0, upd: 0;
       cqRf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqRe() //  [R1]
         { info_tbl: [(cqRe,
                       label: block_cqRe_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqRe: // global
           I64[Sp] = block_cqRk_info;
           _sqQd::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqQd::P64;
           if (R1 & 7 != 0) goto uqRu; else goto cqRl;
       uqRu: // global
           call _cqRk(R1) args: 0, res: 0, upd: 0;
       cqRl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqRk() //  [R1]
         { info_tbl: [(cqRk,
                       label: block_cqRk_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqRk: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.367085554 UTC

[section ""data" . GHC.Event.Arr.read_closure" {
     GHC.Event.Arr.read_closure:
         const GHC.Event.Arr.read_info;
 },
 GHC.Event.Arr.read_entry() //  [R2, R3]
         { info_tbl: [(cqRA,
                       label: GHC.Event.Arr.read_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqRA: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.read1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.368126445 UTC

[section ""data" . GHC.Event.Arr.write1_closure" {
     GHC.Event.Arr.write1_closure:
         const GHC.Event.Arr.write1_info;
 },
 GHC.Event.Arr.write1_entry() //  [R2, R3, R4]
         { info_tbl: [(cqRK,
                       label: GHC.Event.Arr.write1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqRK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cqRO; else goto cqRP;
       cqRO: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.write1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cqRP: // global
           I64[Sp - 24] = block_cqRH_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uqRX; else goto cqRI;
       uqRX: // global
           call _cqRH(R1) args: 0, res: 0, upd: 0;
       cqRI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqRH() //  [R1]
         { info_tbl: [(cqRH,
                       label: block_cqRH_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqRH: // global
           I64[Sp] = block_cqRN_info;
           _sqQl::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqQl::P64;
           if (R1 & 7 != 0) goto uqRW; else goto cqRR;
       uqRW: // global
           call _cqRN(R1) args: 0, res: 0, upd: 0;
       cqRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqRN() //  [R1]
         { info_tbl: [(cqRN,
                       label: block_cqRN_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqRN: // global
           _sqQi::P64 = P64[Sp + 16];
           _sqQl::P64 = P64[Sp + 8];
           _sqQn::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_sqQl::P64 + 24) + (_sqQn::I64 << 3)] = _sqQi::P64;
           I64[_sqQl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_sqQl::P64 + 24) + ((I64[_sqQl::P64 + 8] << 3) + (_sqQn::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.369620221 UTC

[section ""data" . GHC.Event.Arr.write_closure" {
     GHC.Event.Arr.write_closure:
         const GHC.Event.Arr.write_info;
 },
 GHC.Event.Arr.write_entry() //  [R2, R3, R4]
         { info_tbl: [(cqS2,
                       label: GHC.Event.Arr.write_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqS2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.write1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.370343523 UTC

[section ""cstring" . GHC.Event.Arr.$trModule4_bytes" {
     GHC.Event.Arr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.370925716 UTC

[section ""data" . GHC.Event.Arr.$trModule3_closure" {
     GHC.Event.Arr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.371468086 UTC

[section ""cstring" . GHC.Event.Arr.$trModule2_bytes" {
     GHC.Event.Arr.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.372039561 UTC

[section ""data" . GHC.Event.Arr.$trModule1_closure" {
     GHC.Event.Arr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.372639249 UTC

[section ""data" . GHC.Event.Arr.$trModule_closure" {
     GHC.Event.Arr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Arr.$trModule3_closure+1;
         const GHC.Event.Arr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.373336693 UTC

[section ""data" . $krep_rqPP_closure" {
     $krep_rqPP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.373910607 UTC

[section ""data" . $krep1_rqPQ_closure" {
     $krep1_rqPQ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.37450473 UTC

[section ""data" . $krep2_rqPR_closure" {
     $krep2_rqPR_closure:
         const :_con_info;
         const $krep1_rqPQ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.375094626 UTC

[section ""data" . $krep3_rqPS_closure" {
     $krep3_rqPS_closure:
         const :_con_info;
         const $krep_rqPP_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.375654005 UTC

[section ""data" . $krep4_rqPT_closure" {
     $krep4_rqPT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableArray#_closure;
         const $krep3_rqPS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.376254026 UTC

[section ""cstring" . GHC.Event.Arr.$tcArr2_bytes" {
     GHC.Event.Arr.$tcArr2_bytes:
         I8[] [65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.37685041 UTC

[section ""data" . GHC.Event.Arr.$tcArr1_closure" {
     GHC.Event.Arr.$tcArr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tcArr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.377999286 UTC

[section ""data" . GHC.Event.Arr.$tcArr_closure" {
     GHC.Event.Arr.$tcArr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tcArr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7773062135567581215;
         const 417034436732562294;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.378625752 UTC

[section ""data" . $krep5_rqPU_closure" {
     $krep5_rqPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.379255929 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr1_closure" {
     GHC.Event.Arr.$tc'Arr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rqPT_closure+1;
         const $krep5_rqPU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.379824219 UTC

[section ""cstring" . GHC.Event.Arr.$tc'Arr3_bytes" {
     GHC.Event.Arr.$tc'Arr3_bytes:
         I8[] [39,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.380374164 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr2_closure" {
     GHC.Event.Arr.$tc'Arr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tc'Arr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.38095056 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr_closure" {
     GHC.Event.Arr.$tc'Arr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tc'Arr2_closure+1;
         const GHC.Event.Arr.$tc'Arr1_closure+4;
         const 2259010253002565214;
         const 11584643395998142804;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.381879165 UTC

[section ""data" . GHC.Event.Arr.Arr_closure" {
     GHC.Event.Arr.Arr_closure:
         const GHC.Event.Arr.Arr_info;
 },
 GHC.Event.Arr.Arr_entry() //  [R2]
         { info_tbl: [(cqSa,
                       label: GHC.Event.Arr.Arr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqSe; else goto cqSd;
       cqSe: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Arr.Arr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqSd: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.382782963 UTC

[GHC.Event.Arr.Arr_con_entry() //  [R1]
         { info_tbl: [(cqSf,
                       label: GHC.Event.Arr.Arr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,65,114,114,46,65,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSf: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.383517474 UTC

[section ""relreadonly" . SqSg_srt" { SqSg_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.384051674 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.384911775 UTC

[section ""data" . GHC.Event.Arr.new1_closure" {
     GHC.Event.Arr.new1_closure:
         const GHC.Event.Arr.new1_info;
 },
 GHC.Event.Arr.new1_entry() //  [R2, R3]
         { info_tbl: [(cqSo,
                       label: GHC.Event.Arr.new1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqSu; else goto cqSv;
       cqSu: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqSv: // global
           I64[Sp - 16] = block_cqSl_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqSA; else goto cqSm;
       uqSA: // global
           call _cqSl(R1) args: 0, res: 0, upd: 0;
       cqSm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqSl() //  [R1]
         { info_tbl: [(cqSl,
                       label: block_cqSl_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSl: // global
           _sqPW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cqSr_info;
           R2 = _sqPW::P64;
           R1 = I64[R1 + 7];
           Sp = Sp + 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqSr() //  [R1]
         { info_tbl: [(cqSr,
                       label: block_cqSr_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqSz; else goto cqSy;
       cqSz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqSy: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.386397448 UTC

[section ""data" . GHC.Event.Arr.new_closure" {
     GHC.Event.Arr.new_closure:
         const GHC.Event.Arr.new_info;
 },
 GHC.Event.Arr.new_entry() //  [R2, R3]
         { info_tbl: [(cqSF,
                       label: GHC.Event.Arr.new_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSF: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.new1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.387398596 UTC

[section ""data" . GHC.Event.Arr.size_closure" {
     GHC.Event.Arr.size_closure:
         const GHC.Event.Arr.size_info;
 },
 GHC.Event.Arr.size_entry() //  [R2]
         { info_tbl: [(cqSP,
                       label: GHC.Event.Arr.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cqSW; else goto cqSX;
       cqSW: // global
           R2 = R2;
           R1 = GHC.Event.Arr.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqSX: // global
           I64[Sp - 8] = block_cqSM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uqT1; else goto cqSN;
       uqT1: // global
           call _cqSM(R1) args: 0, res: 0, upd: 0;
       cqSN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqSM() //  [R1]
         { info_tbl: [(cqSM,
                       label: block_cqSM_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqSM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqT0; else goto cqSZ;
       cqT0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqSZ: // global
           _sqQ8::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sqQ8::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.388868957 UTC

[section ""data" . GHC.Event.Arr.read1_closure" {
     GHC.Event.Arr.read1_closure:
         const GHC.Event.Arr.read1_info;
 },
 GHC.Event.Arr.read1_entry() //  [R2, R3]
         { info_tbl: [(cqT9,
                       label: GHC.Event.Arr.read1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqT9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqTi; else goto cqTj;
       cqTi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.read1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqTj: // global
           I64[Sp - 16] = block_cqT6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqTn; else goto cqT7;
       uqTn: // global
           call _cqT6(R1) args: 0, res: 0, upd: 0;
       cqT7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqT6() //  [R1]
         { info_tbl: [(cqT6,
                       label: block_cqT6_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqT6: // global
           I64[Sp] = block_cqTc_info;
           _sqQd::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqQd::P64;
           if (R1 & 7 != 0) goto uqTm; else goto cqTd;
       uqTm: // global
           call _cqTc(R1) args: 0, res: 0, upd: 0;
       cqTd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqTc() //  [R1]
         { info_tbl: [(cqTc,
                       label: block_cqTc_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqTc: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.390737889 UTC

[section ""data" . GHC.Event.Arr.read_closure" {
     GHC.Event.Arr.read_closure:
         const GHC.Event.Arr.read_info;
 },
 GHC.Event.Arr.read_entry() //  [R2, R3]
         { info_tbl: [(cqTs,
                       label: GHC.Event.Arr.read_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqTs: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.read1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.391831397 UTC

[section ""data" . GHC.Event.Arr.write1_closure" {
     GHC.Event.Arr.write1_closure:
         const GHC.Event.Arr.write1_info;
 },
 GHC.Event.Arr.write1_entry() //  [R2, R3, R4]
         { info_tbl: [(cqTC,
                       label: GHC.Event.Arr.write1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqTC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cqTG; else goto cqTH;
       cqTG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.write1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cqTH: // global
           I64[Sp - 24] = block_cqTz_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uqTP; else goto cqTA;
       uqTP: // global
           call _cqTz(R1) args: 0, res: 0, upd: 0;
       cqTA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqTz() //  [R1]
         { info_tbl: [(cqTz,
                       label: block_cqTz_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqTz: // global
           I64[Sp] = block_cqTF_info;
           _sqQl::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqQl::P64;
           if (R1 & 7 != 0) goto uqTO; else goto cqTJ;
       uqTO: // global
           call _cqTF(R1) args: 0, res: 0, upd: 0;
       cqTJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqTF() //  [R1]
         { info_tbl: [(cqTF,
                       label: block_cqTF_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqTF: // global
           _sqQi::P64 = P64[Sp + 16];
           _sqQl::P64 = P64[Sp + 8];
           _sqQn::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_sqQl::P64 + 24) + (_sqQn::I64 << 3)] = _sqQi::P64;
           I64[_sqQl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_sqQl::P64 + 24) + ((I64[_sqQl::P64 + 8] << 3) + (_sqQn::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.393428551 UTC

[section ""data" . GHC.Event.Arr.write_closure" {
     GHC.Event.Arr.write_closure:
         const GHC.Event.Arr.write_info;
 },
 GHC.Event.Arr.write_entry() //  [R2, R3, R4]
         { info_tbl: [(cqTU,
                       label: GHC.Event.Arr.write_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqTU: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.write1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.394178533 UTC

[section ""cstring" . GHC.Event.Arr.$trModule4_bytes" {
     GHC.Event.Arr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.394757472 UTC

[section ""data" . GHC.Event.Arr.$trModule3_closure" {
     GHC.Event.Arr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.395287229 UTC

[section ""cstring" . GHC.Event.Arr.$trModule2_bytes" {
     GHC.Event.Arr.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.395855202 UTC

[section ""data" . GHC.Event.Arr.$trModule1_closure" {
     GHC.Event.Arr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.396407365 UTC

[section ""data" . GHC.Event.Arr.$trModule_closure" {
     GHC.Event.Arr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Arr.$trModule3_closure+1;
         const GHC.Event.Arr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.396994823 UTC

[section ""data" . $krep_rqPP_closure" {
     $krep_rqPP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.397655213 UTC

[section ""data" . $krep1_rqPQ_closure" {
     $krep1_rqPQ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.398238451 UTC

[section ""data" . $krep2_rqPR_closure" {
     $krep2_rqPR_closure:
         const :_con_info;
         const $krep1_rqPQ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.398830486 UTC

[section ""data" . $krep3_rqPS_closure" {
     $krep3_rqPS_closure:
         const :_con_info;
         const $krep_rqPP_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.399451376 UTC

[section ""data" . $krep4_rqPT_closure" {
     $krep4_rqPT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableArray#_closure;
         const $krep3_rqPS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.400049921 UTC

[section ""cstring" . GHC.Event.Arr.$tcArr2_bytes" {
     GHC.Event.Arr.$tcArr2_bytes:
         I8[] [65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.401074103 UTC

[section ""data" . GHC.Event.Arr.$tcArr1_closure" {
     GHC.Event.Arr.$tcArr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tcArr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.401698451 UTC

[section ""data" . GHC.Event.Arr.$tcArr_closure" {
     GHC.Event.Arr.$tcArr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tcArr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7773062135567581215;
         const 417034436732562294;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.40233018 UTC

[section ""data" . $krep5_rqPU_closure" {
     $krep5_rqPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.402916237 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr1_closure" {
     GHC.Event.Arr.$tc'Arr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rqPT_closure+1;
         const $krep5_rqPU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.403476907 UTC

[section ""cstring" . GHC.Event.Arr.$tc'Arr3_bytes" {
     GHC.Event.Arr.$tc'Arr3_bytes:
         I8[] [39,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.403993611 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr2_closure" {
     GHC.Event.Arr.$tc'Arr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tc'Arr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.404584429 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr_closure" {
     GHC.Event.Arr.$tc'Arr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tc'Arr2_closure+1;
         const GHC.Event.Arr.$tc'Arr1_closure+4;
         const 2259010253002565214;
         const 11584643395998142804;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.405711563 UTC

[section ""data" . GHC.Event.Arr.Arr_closure" {
     GHC.Event.Arr.Arr_closure:
         const GHC.Event.Arr.Arr_info;
 },
 GHC.Event.Arr.Arr_entry() //  [R2]
         { info_tbl: [(cqU2,
                       label: GHC.Event.Arr.Arr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqU2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqU6; else goto cqU5;
       cqU6: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Arr.Arr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqU5: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.406652009 UTC

[GHC.Event.Arr.Arr_con_entry() //  [R1]
         { info_tbl: [(cqU7,
                       label: GHC.Event.Arr.Arr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,65,114,114,46,65,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqU7: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.407378964 UTC

[section ""relreadonly" . SqSg_srt" { SqSg_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.408143463 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.409767209 UTC

[section ""data" . GHC.Event.Arr.new1_closure" {
     GHC.Event.Arr.new1_closure:
         const GHC.Event.Arr.new1_info;
 },
 GHC.Event.Arr.new1_entry() //  [R2, R3]
         { info_tbl: [(cqUg,
                       label: GHC.Event.Arr.new1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqUg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqUm; else goto cqUn;
       cqUm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqUn: // global
           I64[Sp - 16] = block_cqUd_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqUs; else goto cqUe;
       uqUs: // global
           call _cqUd(R1) args: 0, res: 0, upd: 0;
       cqUe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqUd() //  [R1]
         { info_tbl: [(cqUd,
                       label: block_cqUd_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqUd: // global
           _sqPW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cqUj_info;
           R2 = _sqPW::P64;
           R1 = I64[R1 + 7];
           Sp = Sp + 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqUj() //  [R1]
         { info_tbl: [(cqUj,
                       label: block_cqUj_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqUj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqUr; else goto cqUq;
       cqUr: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqUq: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.417689254 UTC

[section ""data" . GHC.Event.Arr.new_closure" {
     GHC.Event.Arr.new_closure:
         const GHC.Event.Arr.new_info;
 },
 GHC.Event.Arr.new_entry() //  [R2, R3]
         { info_tbl: [(cqUK,
                       label: GHC.Event.Arr.new_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqUK: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.new1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.421340018 UTC

[section ""data" . GHC.Event.Arr.size_closure" {
     GHC.Event.Arr.size_closure:
         const GHC.Event.Arr.size_info;
 },
 GHC.Event.Arr.size_entry() //  [R2]
         { info_tbl: [(cqUY,
                       label: GHC.Event.Arr.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqUY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cqV5; else goto cqV6;
       cqV5: // global
           R2 = R2;
           R1 = GHC.Event.Arr.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqV6: // global
           I64[Sp - 8] = block_cqUV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uqVa; else goto cqUW;
       uqVa: // global
           call _cqUV(R1) args: 0, res: 0, upd: 0;
       cqUW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqUV() //  [R1]
         { info_tbl: [(cqUV,
                       label: block_cqUV_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqUV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqV9; else goto cqV8;
       cqV9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqV8: // global
           _sqQ8::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sqQ8::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.4277764 UTC

[section ""data" . GHC.Event.Arr.read1_closure" {
     GHC.Event.Arr.read1_closure:
         const GHC.Event.Arr.read1_info;
 },
 GHC.Event.Arr.read1_entry() //  [R2, R3]
         { info_tbl: [(cqVt,
                       label: GHC.Event.Arr.read1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqVt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqVC; else goto cqVD;
       cqVC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.read1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqVD: // global
           I64[Sp - 16] = block_cqVq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqVH; else goto cqVr;
       uqVH: // global
           call _cqVq(R1) args: 0, res: 0, upd: 0;
       cqVr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqVq() //  [R1]
         { info_tbl: [(cqVq,
                       label: block_cqVq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqVq: // global
           I64[Sp] = block_cqVw_info;
           _sqQd::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqQd::P64;
           if (R1 & 7 != 0) goto uqVG; else goto cqVx;
       uqVG: // global
           call _cqVw(R1) args: 0, res: 0, upd: 0;
       cqVx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqVw() //  [R1]
         { info_tbl: [(cqVw,
                       label: block_cqVw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqVw: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.435350702 UTC

[section ""data" . GHC.Event.Arr.read_closure" {
     GHC.Event.Arr.read_closure:
         const GHC.Event.Arr.read_info;
 },
 GHC.Event.Arr.read_entry() //  [R2, R3]
         { info_tbl: [(cqW2,
                       label: GHC.Event.Arr.read_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqW2: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.read1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.438982076 UTC

[section ""data" . GHC.Event.Arr.write1_closure" {
     GHC.Event.Arr.write1_closure:
         const GHC.Event.Arr.write1_info;
 },
 GHC.Event.Arr.write1_entry() //  [R2, R3, R4]
         { info_tbl: [(cqWg,
                       label: GHC.Event.Arr.write1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqWg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cqWk; else goto cqWl;
       cqWk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.write1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cqWl: // global
           I64[Sp - 24] = block_cqWd_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uqWt; else goto cqWe;
       uqWt: // global
           call _cqWd(R1) args: 0, res: 0, upd: 0;
       cqWe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqWd() //  [R1]
         { info_tbl: [(cqWd,
                       label: block_cqWd_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqWd: // global
           I64[Sp] = block_cqWj_info;
           _sqQl::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqQl::P64;
           if (R1 & 7 != 0) goto uqWs; else goto cqWn;
       uqWs: // global
           call _cqWj(R1) args: 0, res: 0, upd: 0;
       cqWn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqWj() //  [R1]
         { info_tbl: [(cqWj,
                       label: block_cqWj_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqWj: // global
           _sqQi::P64 = P64[Sp + 16];
           _sqQl::P64 = P64[Sp + 8];
           _sqQn::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_sqQl::P64 + 24) + (_sqQn::I64 << 3)] = _sqQi::P64;
           I64[_sqQl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_sqQl::P64 + 24) + ((I64[_sqQl::P64 + 8] << 3) + (_sqQn::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.446970373 UTC

[section ""data" . GHC.Event.Arr.write_closure" {
     GHC.Event.Arr.write_closure:
         const GHC.Event.Arr.write_info;
 },
 GHC.Event.Arr.write_entry() //  [R2, R3, R4]
         { info_tbl: [(cqWQ,
                       label: GHC.Event.Arr.write_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqWQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.write1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.450200027 UTC

[section ""cstring" . GHC.Event.Arr.$trModule4_bytes" {
     GHC.Event.Arr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.451856449 UTC

[section ""data" . GHC.Event.Arr.$trModule3_closure" {
     GHC.Event.Arr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.453564097 UTC

[section ""cstring" . GHC.Event.Arr.$trModule2_bytes" {
     GHC.Event.Arr.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.455228737 UTC

[section ""data" . GHC.Event.Arr.$trModule1_closure" {
     GHC.Event.Arr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.457201956 UTC

[section ""data" . GHC.Event.Arr.$trModule_closure" {
     GHC.Event.Arr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Arr.$trModule3_closure+1;
         const GHC.Event.Arr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.458945795 UTC

[section ""data" . $krep_rqPP_closure" {
     $krep_rqPP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.460692274 UTC

[section ""data" . $krep1_rqPQ_closure" {
     $krep1_rqPQ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.462413024 UTC

[section ""data" . $krep2_rqPR_closure" {
     $krep2_rqPR_closure:
         const :_con_info;
         const $krep1_rqPQ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.464151326 UTC

[section ""data" . $krep3_rqPS_closure" {
     $krep3_rqPS_closure:
         const :_con_info;
         const $krep_rqPP_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.466000709 UTC

[section ""data" . $krep4_rqPT_closure" {
     $krep4_rqPT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableArray#_closure;
         const $krep3_rqPS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.468101493 UTC

[section ""cstring" . GHC.Event.Arr.$tcArr2_bytes" {
     GHC.Event.Arr.$tcArr2_bytes:
         I8[] [65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.469784036 UTC

[section ""data" . GHC.Event.Arr.$tcArr1_closure" {
     GHC.Event.Arr.$tcArr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tcArr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.471525909 UTC

[section ""data" . GHC.Event.Arr.$tcArr_closure" {
     GHC.Event.Arr.$tcArr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tcArr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7773062135567581215;
         const 417034436732562294;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.47466127 UTC

[section ""data" . $krep5_rqPU_closure" {
     $krep5_rqPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.476375083 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr1_closure" {
     GHC.Event.Arr.$tc'Arr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rqPT_closure+1;
         const $krep5_rqPU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.478526538 UTC

[section ""cstring" . GHC.Event.Arr.$tc'Arr3_bytes" {
     GHC.Event.Arr.$tc'Arr3_bytes:
         I8[] [39,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.48046575 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr2_closure" {
     GHC.Event.Arr.$tc'Arr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tc'Arr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.482316901 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr_closure" {
     GHC.Event.Arr.$tc'Arr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tc'Arr2_closure+1;
         const GHC.Event.Arr.$tc'Arr1_closure+4;
         const 2259010253002565214;
         const 11584643395998142804;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.484655728 UTC

[section ""data" . GHC.Event.Arr.Arr_closure" {
     GHC.Event.Arr.Arr_closure:
         const GHC.Event.Arr.Arr_info;
 },
 GHC.Event.Arr.Arr_entry() //  [R2]
         { info_tbl: [(cqXk,
                       label: GHC.Event.Arr.Arr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqXk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqXo; else goto cqXn;
       cqXo: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Arr.Arr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqXn: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.488823321 UTC

[GHC.Event.Arr.Arr_con_entry() //  [R1]
         { info_tbl: [(cqXu,
                       label: GHC.Event.Arr.Arr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,65,114,114,46,65,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqXu: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.49313842 UTC

[section ""relreadonly" . SqSg_srt" { SqSg_srt:
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.606098862 UTC

[]


==================== Output Cmm ====================
2018-03-16 15:55:04.60780023 UTC

[section ""data" . GHC.Event.Arr.new1_closure" {
     GHC.Event.Arr.new1_closure:
         const GHC.Event.Arr.new1_info;
 },
 GHC.Event.Arr.new1_entry() //  [R2, R3]
         { info_tbl: [(cqYb,
                       label: GHC.Event.Arr.new1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqYb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqYh; else goto cqYi;
       cqYh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.new1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqYi: // global
           I64[Sp - 16] = block_cqY8_info;
           R1 = R3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqYn; else goto cqY9;
       uqYn: // global
           call _cqY8(R1) args: 0, res: 0, upd: 0;
       cqY9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqY8() //  [R1]
         { info_tbl: [(cqY8,
                       label: block_cqY8_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqY8: // global
           _sqXB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cqYe_info;
           R2 = _sqXB::P64;
           R1 = I64[R1 + 7];
           Sp = Sp + 8;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqYe() //  [R1]
         { info_tbl: [(cqYe,
                       label: block_cqYe_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqYe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqYm; else goto cqYl;
       cqYm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqYl: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.61758167 UTC

[section ""data" . GHC.Event.Arr.new_closure" {
     GHC.Event.Arr.new_closure:
         const GHC.Event.Arr.new_info;
 },
 GHC.Event.Arr.new_entry() //  [R2, R3]
         { info_tbl: [(cqYI,
                       label: GHC.Event.Arr.new_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqYI: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.new1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.621182351 UTC

[section ""data" . GHC.Event.Arr.size_closure" {
     GHC.Event.Arr.size_closure:
         const GHC.Event.Arr.size_info;
 },
 GHC.Event.Arr.size_entry() //  [R2]
         { info_tbl: [(cqYW,
                       label: GHC.Event.Arr.size_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqYW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cqZ3; else goto cqZ4;
       cqZ3: // global
           R2 = R2;
           R1 = GHC.Event.Arr.size_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cqZ4: // global
           I64[Sp - 8] = block_cqYT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uqZ8; else goto cqYU;
       uqZ8: // global
           call _cqYT(R1) args: 0, res: 0, upd: 0;
       cqYU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqYT() //  [R1]
         { info_tbl: [(cqYT,
                       label: block_cqYT_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqYT: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cqZ7; else goto cqZ6;
       cqZ7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cqZ6: // global
           _sqXN::I64 = I64[P64[R1 + 7] + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _sqXN::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.627783201 UTC

[section ""data" . GHC.Event.Arr.read1_closure" {
     GHC.Event.Arr.read1_closure:
         const GHC.Event.Arr.read1_info;
 },
 GHC.Event.Arr.read1_entry() //  [R2, R3]
         { info_tbl: [(cqZt,
                       label: GHC.Event.Arr.read1_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqZt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cqZC; else goto cqZD;
       cqZC: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.read1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cqZD: // global
           I64[Sp - 16] = block_cqZq_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uqZH; else goto cqZr;
       uqZH: // global
           call _cqZq(R1) args: 0, res: 0, upd: 0;
       cqZr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqZq() //  [R1]
         { info_tbl: [(cqZq,
                       label: block_cqZq_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqZq: // global
           I64[Sp] = block_cqZw_info;
           _sqXS::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqXS::P64;
           if (R1 & 7 != 0) goto uqZG; else goto cqZx;
       uqZG: // global
           call _cqZw(R1) args: 0, res: 0, upd: 0;
       cqZx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cqZw() //  [R1]
         { info_tbl: [(cqZw,
                       label: block_cqZw_info
                       rep:StackRep [False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cqZw: // global
           R1 = P64[P64[Sp + 8] + ((I64[R1 + 7] << 3) + 24)];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.636817127 UTC

[section ""data" . GHC.Event.Arr.read_closure" {
     GHC.Event.Arr.read_closure:
         const GHC.Event.Arr.read_info;
 },
 GHC.Event.Arr.read_entry() //  [R2, R3]
         { info_tbl: [(cr04,
                       label: GHC.Event.Arr.read_info
                       rep:HeapRep static { Fun {arity: 3 fun_type: ArgSpec 15} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr04: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.read1_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.64046463 UTC

[section ""data" . GHC.Event.Arr.write1_closure" {
     GHC.Event.Arr.write1_closure:
         const GHC.Event.Arr.write1_info;
 },
 GHC.Event.Arr.write1_entry() //  [R2, R3, R4]
         { info_tbl: [(cr0i,
                       label: GHC.Event.Arr.write1_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr0i: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cr0m; else goto cr0n;
       cr0m: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Arr.write1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cr0n: // global
           I64[Sp - 24] = block_cr0f_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ur0v; else goto cr0g;
       ur0v: // global
           call _cr0f(R1) args: 0, res: 0, upd: 0;
       cr0g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr0f() //  [R1]
         { info_tbl: [(cr0f,
                       label: block_cr0f_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr0f: // global
           I64[Sp] = block_cr0l_info;
           _sqY0::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sqY0::P64;
           if (R1 & 7 != 0) goto ur0u; else goto cr0p;
       ur0u: // global
           call _cr0l(R1) args: 0, res: 0, upd: 0;
       cr0p: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cr0l() //  [R1]
         { info_tbl: [(cr0l,
                       label: block_cr0l_info
                       rep:StackRep [False, False])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr0l: // global
           _sqXX::P64 = P64[Sp + 16];
           _sqY0::P64 = P64[Sp + 8];
           _sqY2::I64 = I64[R1 + 7];
           call MO_WriteBarrier();
           P64[(_sqY0::P64 + 24) + (_sqY2::I64 << 3)] = _sqXX::P64;
           I64[_sqY0::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_sqY0::P64 + 24) + ((I64[_sqY0::P64 + 8] << 3) + (_sqY2::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.648965052 UTC

[section ""data" . GHC.Event.Arr.write_closure" {
     GHC.Event.Arr.write_closure:
         const GHC.Event.Arr.write_info;
 },
 GHC.Event.Arr.write_entry() //  [R2, R3, R4]
         { info_tbl: [(cr0W,
                       label: GHC.Event.Arr.write_info
                       rep:HeapRep static { Fun {arity: 4 fun_type: ArgSpec 23} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr0W: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Arr.write1_entry(R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.652526554 UTC

[section ""cstring" . GHC.Event.Arr.$trModule4_bytes" {
     GHC.Event.Arr.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.654138609 UTC

[section ""data" . GHC.Event.Arr.$trModule3_closure" {
     GHC.Event.Arr.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.655775489 UTC

[section ""cstring" . GHC.Event.Arr.$trModule2_bytes" {
     GHC.Event.Arr.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.657682126 UTC

[section ""data" . GHC.Event.Arr.$trModule1_closure" {
     GHC.Event.Arr.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.659559937 UTC

[section ""data" . GHC.Event.Arr.$trModule_closure" {
     GHC.Event.Arr.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Arr.$trModule3_closure+1;
         const GHC.Event.Arr.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.661270782 UTC

[section ""data" . $krep_rqPP_closure" {
     $krep_rqPP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcRealWorld_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.662988275 UTC

[section ""data" . $krep1_rqPQ_closure" {
     $krep1_rqPQ_closure:
         const GHC.Types.KindRepVar_con_info;
         const 0;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.664575193 UTC

[section ""data" . $krep2_rqPR_closure" {
     $krep2_rqPR_closure:
         const :_con_info;
         const $krep1_rqPQ_closure+2;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.666553261 UTC

[section ""data" . $krep3_rqPS_closure" {
     $krep3_rqPS_closure:
         const :_con_info;
         const $krep_rqPP_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.668177172 UTC

[section ""data" . $krep4_rqPT_closure" {
     $krep4_rqPT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcMutableArray#_closure;
         const $krep3_rqPS_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.66979534 UTC

[section ""cstring" . GHC.Event.Arr.$tcArr2_bytes" {
     GHC.Event.Arr.$tcArr2_bytes:
         I8[] [65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.671426198 UTC

[section ""data" . GHC.Event.Arr.$tcArr1_closure" {
     GHC.Event.Arr.$tcArr1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tcArr2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.673374017 UTC

[section ""data" . GHC.Event.Arr.$tcArr_closure" {
     GHC.Event.Arr.$tcArr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tcArr1_closure+1;
         const GHC.Types.krep$*Arr*_closure;
         const 7773062135567581215;
         const 417034436732562294;
         const 0;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.67508708 UTC

[section ""data" . $krep5_rqPU_closure" {
     $krep5_rqPU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Arr.$tcArr_closure+1;
         const $krep2_rqPR_closure+2;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.676665151 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr1_closure" {
     GHC.Event.Arr.$tc'Arr1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rqPT_closure+1;
         const $krep5_rqPU_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.678425991 UTC

[section ""cstring" . GHC.Event.Arr.$tc'Arr3_bytes" {
     GHC.Event.Arr.$tc'Arr3_bytes:
         I8[] [39,65,114,114]
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.680050908 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr2_closure" {
     GHC.Event.Arr.$tc'Arr2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Arr.$tc'Arr3_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.681993146 UTC

[section ""data" . GHC.Event.Arr.$tc'Arr_closure" {
     GHC.Event.Arr.$tc'Arr_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Arr.$trModule_closure+1;
         const GHC.Event.Arr.$tc'Arr2_closure+1;
         const GHC.Event.Arr.$tc'Arr1_closure+4;
         const 2259010253002565214;
         const 11584643395998142804;
         const 1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.684100955 UTC

[section ""data" . GHC.Event.Arr.Arr_closure" {
     GHC.Event.Arr.Arr_closure:
         const GHC.Event.Arr.Arr_info;
 },
 GHC.Event.Arr.Arr_entry() //  [R2]
         { info_tbl: [(cr1q,
                       label: GHC.Event.Arr.Arr_info
                       rep:HeapRep static { Fun {arity: 1 fun_type: ArgSpec 5} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr1q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cr1u; else goto cr1t;
       cr1u: // global
           HpAlloc = 16;
           R2 = R2;
           R1 = GHC.Event.Arr.Arr_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cr1t: // global
           I64[Hp - 8] = GHC.Event.Arr.Arr_con_info;
           P64[Hp] = R2;
           R1 = Hp - 7;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.687735814 UTC

[GHC.Event.Arr.Arr_con_entry() //  [R1]
         { info_tbl: [(cr1B,
                       label: GHC.Event.Arr.Arr_con_info
                       rep:HeapRep 1 ptrs {
                             Con {tag: 0
                                  descr:[98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,65,114,114,46,65,114,114]} })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       cr1B: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Output Cmm ====================
2018-03-16 15:55:04.691142332 UTC

[section ""relreadonly" . Sr1I_srt" { Sr1I_srt:
 }]

