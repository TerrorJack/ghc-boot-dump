
==================== Raw Cmm ====================
2018-03-16 16:05:19.297543645 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:19.300084799 UTC

[section ""data" . GHC.Event.Poll.$WPollFd_closure" {
     GHC.Event.Poll.$WPollFd_closure:
         const GHC.Event.Poll.$WPollFd_info;
 },
 GHC.Event.Poll.$WPollFd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cakIh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cakIv; else goto cakIw;
       cakIv: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$WPollFd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cakIw: // global
           I64[Sp - 24] = block_cakIe_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uakID; else goto cakIf;
       uakID: // global
           call _cakIe(R1) args: 0, res: 0, upd: 0;
       cakIf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$WPollFd_info" {
     GHC.Event.Poll.$WPollFd_info:
         const GHC.Event.Poll.$WPollFd_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cakIe() //  [R1]
         { []
         }
     {offset
       cakIe: // global
           I64[Sp] = block_cakIk_info;
           _sajBq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sajBq::I64;
           if (R1 & 7 != 0) goto uakIC; else goto cakIl;
       uakIC: // global
           call _cakIk(R1) args: 0, res: 0, upd: 0;
       cakIl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakIe_info" {
     block_cakIe_info:
         const _cakIe;
         const 2;
         const 30;
 },
 _cakIk() //  [R1]
         { []
         }
     {offset
       cakIk: // global
           I64[Sp] = block_cakIp_info;
           _sajBs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sajBs::I64;
           if (R1 & 7 != 0) goto uakIE; else goto cakIq;
       uakIE: // global
           call _cakIp(R1) args: 0, res: 0, upd: 0;
       cakIq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakIk_info" {
     block_cakIk_info:
         const _cakIk;
         const 66;
         const 30;
 },
 _cakIp() //  [R1]
         { []
         }
     {offset
       cakIp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cakIB; else goto cakIA;
       cakIB: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakIA: // global
           _sajBu::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _sajBu::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakIp_info" {
     block_cakIp_info:
         const _cakIp;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.309455669 UTC

[section ""data" . GHC.Event.Poll.$WPoll_closure" {
     GHC.Event.Poll.$WPoll_closure:
         const GHC.Event.Poll.$WPoll_info;
 },
 GHC.Event.Poll.$WPoll_entry() //  [R2, R3]
         { []
         }
     {offset
       cakJ6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cakJf; else goto cakJg;
       cakJf: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$WPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cakJg: // global
           I64[Sp - 16] = block_cakJ3_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uakJm; else goto cakJ4;
       uakJm: // global
           call _cakJ3(R1) args: 0, res: 0, upd: 0;
       cakJ4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$WPoll_info" {
     GHC.Event.Poll.$WPoll_info:
         const GHC.Event.Poll.$WPoll_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cakJ3() //  [R1]
         { []
         }
     {offset
       cakJ3: // global
           I64[Sp] = block_cakJ9_info;
           _sajBy::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sajBy::P64;
           if (R1 & 7 != 0) goto uakJl; else goto cakJa;
       uakJl: // global
           call _cakJ9(R1) args: 0, res: 0, upd: 0;
       cakJa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakJ3_info" {
     block_cakJ3_info:
         const _cakJ3;
         const 1;
         const 30;
 },
 _cakJ9() //  [R1]
         { []
         }
     {offset
       cakJ9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakJk; else goto cakJj;
       cakJk: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakJj: // global
           _sajBA::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.Poll.Poll_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _sajBA::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakJ9_info" {
     block_cakJ9_info:
         const _cakJ9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.316370725 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd_$calignment_closure" {
     GHC.Event.Poll.$fStorablePollFd_$calignment_closure:
         const GHC.Event.Poll.$fStorablePollFd_$calignment_info;
 },
 GHC.Event.Poll.$fStorablePollFd_$calignment_entry() //  []
         { []
         }
     {offset
       cakJG: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd_$calignment_info" {
     GHC.Event.Poll.$fStorablePollFd_$calignment_info:
         const GHC.Event.Poll.$fStorablePollFd_$calignment_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.319452163 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd7_closure" {
     GHC.Event.Poll.$fStorablePollFd7_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.321433056 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd_$csizeOf_closure" {
     GHC.Event.Poll.$fStorablePollFd_$csizeOf_closure:
         const GHC.Event.Poll.$fStorablePollFd_$csizeOf_info;
 },
 GHC.Event.Poll.$fStorablePollFd_$csizeOf_entry() //  []
         { []
         }
     {offset
       cakJT: // global
           R1 = GHC.Event.Poll.$fStorablePollFd7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd_$csizeOf_info" {
     GHC.Event.Poll.$fStorablePollFd_$csizeOf_info:
         const GHC.Event.Poll.$fStorablePollFd_$csizeOf_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.327135804 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd2_closure" {
     GHC.Event.Poll.$fStorablePollFd2_closure:
         const GHC.Event.Poll.$fStorablePollFd2_info;
 },
 GHC.Event.Poll.$fStorablePollFd2_entry() //  [R2]
         { []
         }
     {offset
       cakK8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cakKi; else goto cakKj;
       cakKi: // global
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakKj: // global
           I64[Sp - 8] = block_cakK5_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uakKn; else goto cakK6;
       uakKn: // global
           call _cakK5(R1) args: 0, res: 0, upd: 0;
       cakK6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd2_info" {
     GHC.Event.Poll.$fStorablePollFd2_info:
         const GHC.Event.Poll.$fStorablePollFd2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cakK5() //  [R1]
         { []
         }
     {offset
       cakK5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cakKm; else goto cakKl;
       cakKm: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakKl: // global
           _sajBG::I64 = I64[R1 + 7];
           _sajBJ::I64 = %MO_SS_Conv_W32_W64(I32[_sajBG::I64]);
           _sajBN::I64 = %MO_SS_Conv_W16_W64(I16[_sajBG::I64 + 4]);
           _sajBR::I64 = %MO_SS_Conv_W16_W64(I16[_sajBG::I64 + 6]);
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _sajBJ::I64;
           I64[Hp - 8] = _sajBN::I64;
           I64[Hp] = _sajBR::I64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakK5_info" {
     block_cakK5_info:
         const _cakK5;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.333451016 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd6_closure" {
     GHC.Event.Poll.$fStorablePollFd6_closure:
         const GHC.Event.Poll.$fStorablePollFd6_info;
 },
 GHC.Event.Poll.$fStorablePollFd6_entry() //  [R2, R3]
         { []
         }
     {offset
       cakKF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cakL0; else goto cakL1;
       cakL0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cakL1: // global
           I64[Sp - 16] = block_cakKC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uakL7; else goto cakKD;
       uakL7: // global
           call _cakKC(R1) args: 0, res: 0, upd: 0;
       cakKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd6_info" {
     GHC.Event.Poll.$fStorablePollFd6_info:
         const GHC.Event.Poll.$fStorablePollFd6_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cakKC() //  [R1]
         { []
         }
     {offset
       cakKC: // global
           I64[Sp] = block_cakKI_info;
           _sajBX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sajBX::I64;
           if (R1 & 7 != 0) goto uakL6; else goto cakKJ;
       uakL6: // global
           call _cakKI(R1) args: 0, res: 0, upd: 0;
       cakKJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakKC_info" {
     block_cakKC_info:
         const _cakKC;
         const 1;
         const 30;
 },
 _cakKI() //  [R1]
         { []
         }
     {offset
       cakKI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cakL5; else goto cakL4;
       cakL5: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakL4: // global
           _sajC0::I64 = I64[Sp + 8] + (I64[R1 + 7] << 3);
           _sajC4::I64 = %MO_SS_Conv_W32_W64(I32[_sajC0::I64]);
           _sajC8::I64 = %MO_SS_Conv_W16_W64(I16[_sajC0::I64 + 4]);
           _sajCc::I64 = %MO_SS_Conv_W16_W64(I16[_sajC0::I64 + 6]);
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _sajC4::I64;
           I64[Hp - 8] = _sajC8::I64;
           I64[Hp] = _sajCc::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakKI_info" {
     block_cakKI_info:
         const _cakKI;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.341080515 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd4_closure" {
     GHC.Event.Poll.$fStorablePollFd4_closure:
         const GHC.Event.Poll.$fStorablePollFd4_info;
 },
 GHC.Event.Poll.$fStorablePollFd4_entry() //  [R2, R3]
         { []
         }
     {offset
       cakLv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cakLN; else goto cakLO;
       cakLN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cakLO: // global
           I64[Sp - 16] = block_cakLs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uakLU; else goto cakLt;
       uakLU: // global
           call _cakLs(R1) args: 0, res: 0, upd: 0;
       cakLt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd4_info" {
     GHC.Event.Poll.$fStorablePollFd4_info:
         const GHC.Event.Poll.$fStorablePollFd4_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cakLs() //  [R1]
         { []
         }
     {offset
       cakLs: // global
           I64[Sp] = block_cakLy_info;
           _sajCi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sajCi::I64;
           if (R1 & 7 != 0) goto uakLT; else goto cakLz;
       uakLT: // global
           call _cakLy(R1) args: 0, res: 0, upd: 0;
       cakLz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakLs_info" {
     block_cakLs_info:
         const _cakLs;
         const 1;
         const 30;
 },
 _cakLy() //  [R1]
         { []
         }
     {offset
       cakLy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cakLS; else goto cakLR;
       cakLS: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakLR: // global
           _sajCl::I64 = I64[Sp + 8] + I64[R1 + 7];
           _sajCo::I64 = %MO_SS_Conv_W32_W64(I32[_sajCl::I64]);
           _sajCs::I64 = %MO_SS_Conv_W16_W64(I16[_sajCl::I64 + 4]);
           _sajCw::I64 = %MO_SS_Conv_W16_W64(I16[_sajCl::I64 + 6]);
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _sajCo::I64;
           I64[Hp - 8] = _sajCs::I64;
           I64[Hp] = _sajCw::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakLy_info" {
     block_cakLy_info:
         const _cakLy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.349081852 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd1_closure" {
     GHC.Event.Poll.$fStorablePollFd1_closure:
         const GHC.Event.Poll.$fStorablePollFd1_info;
 },
 GHC.Event.Poll.$fStorablePollFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       cakMi: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cakMm; else goto cakMn;
       cakMm: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cakMn: // global
           I64[Sp - 16] = block_cakMf_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uakMz; else goto cakMg;
       uakMz: // global
           call _cakMf(R1) args: 0, res: 0, upd: 0;
       cakMg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd1_info" {
     GHC.Event.Poll.$fStorablePollFd1_info:
         const GHC.Event.Poll.$fStorablePollFd1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _cakMf() //  [R1]
         { []
         }
     {offset
       cakMf: // global
           I64[Sp] = block_cakMl_info;
           _sajCC::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sajCC::I64;
           if (R1 & 7 != 0) goto uakMy; else goto cakMp;
       uakMy: // global
           call _cakMl(R1) args: 0, res: 0, upd: 0;
       cakMp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakMf_info" {
     block_cakMf_info:
         const _cakMf;
         const 1;
         const 30;
 },
 _cakMl() //  [R1]
         { []
         }
     {offset
       cakMl: // global
           _sajCC::I64 = I64[Sp + 8];
           _sajCF::I64 = I64[R1 + 15];
           _sajCG::I64 = I64[R1 + 23];
           I32[_sajCC::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I16[_sajCC::I64 + 4] = %MO_UU_Conv_W64_W16(_sajCF::I64);
           I16[_sajCC::I64 + 6] = %MO_UU_Conv_W64_W16(_sajCG::I64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakMl_info" {
     block_cakMl_info:
         const _cakMl;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.356954355 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd5_closure" {
     GHC.Event.Poll.$fStorablePollFd5_closure:
         const GHC.Event.Poll.$fStorablePollFd5_info;
 },
 GHC.Event.Poll.$fStorablePollFd5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cakMY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cakN7; else goto cakN8;
       cakN7: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cakN8: // global
           I64[Sp - 24] = block_cakMV_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uakNr; else goto cakMW;
       uakNr: // global
           call _cakMV(R1) args: 0, res: 0, upd: 0;
       cakMW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd5_info" {
     GHC.Event.Poll.$fStorablePollFd5_info:
         const GHC.Event.Poll.$fStorablePollFd5_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cakMV() //  [R1]
         { []
         }
     {offset
       cakMV: // global
           I64[Sp] = block_cakN1_info;
           _sajCR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sajCR::I64;
           if (R1 & 7 != 0) goto uakNq; else goto cakN2;
       uakNq: // global
           call _cakN1(R1) args: 0, res: 0, upd: 0;
       cakN2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakMV_info" {
     block_cakMV_info:
         const _cakMV;
         const 2;
         const 30;
 },
 _cakN1() //  [R1]
         { []
         }
     {offset
       cakN1: // global
           I64[Sp] = block_cakN6_info;
           _sajCT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sajCT::I64;
           if (R1 & 7 != 0) goto uakNs; else goto cakNb;
       uakNs: // global
           call _cakN6(R1) args: 0, res: 0, upd: 0;
       cakNb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakN1_info" {
     block_cakN1_info:
         const _cakN1;
         const 66;
         const 30;
 },
 _cakN6() //  [R1]
         { []
         }
     {offset
       cakN6: // global
           _sajCW::I64 = I64[R1 + 15];
           _sajCX::I64 = I64[R1 + 23];
           _sajCY::I64 = I64[Sp + 8] + (I64[Sp + 16] << 3);
           I32[_sajCY::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I16[_sajCY::I64 + 4] = %MO_UU_Conv_W64_W16(_sajCW::I64);
           I16[_sajCY::I64 + 6] = %MO_UU_Conv_W64_W16(_sajCX::I64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakN6_info" {
     block_cakN6_info:
         const _cakN6;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.367677271 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd3_closure" {
     GHC.Event.Poll.$fStorablePollFd3_closure:
         const GHC.Event.Poll.$fStorablePollFd3_info;
 },
 GHC.Event.Poll.$fStorablePollFd3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cakNX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cakO6; else goto cakO7;
       cakO6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cakO7: // global
           I64[Sp - 24] = block_cakNU_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uakOn; else goto cakNV;
       uakOn: // global
           call _cakNU(R1) args: 0, res: 0, upd: 0;
       cakNV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd3_info" {
     GHC.Event.Poll.$fStorablePollFd3_info:
         const GHC.Event.Poll.$fStorablePollFd3_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _cakNU() //  [R1]
         { []
         }
     {offset
       cakNU: // global
           I64[Sp] = block_cakO0_info;
           _sajDa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sajDa::I64;
           if (R1 & 7 != 0) goto uakOm; else goto cakO1;
       uakOm: // global
           call _cakO0(R1) args: 0, res: 0, upd: 0;
       cakO1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakNU_info" {
     block_cakNU_info:
         const _cakNU;
         const 2;
         const 30;
 },
 _cakO0() //  [R1]
         { []
         }
     {offset
       cakO0: // global
           I64[Sp] = block_cakO5_info;
           _sajDc::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sajDc::I64;
           if (R1 & 7 != 0) goto uakOo; else goto cakOa;
       uakOo: // global
           call _cakO5(R1) args: 0, res: 0, upd: 0;
       cakOa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakO0_info" {
     block_cakO0_info:
         const _cakO0;
         const 66;
         const 30;
 },
 _cakO5() //  [R1]
         { []
         }
     {offset
       cakO5: // global
           _sajDf::I64 = I64[R1 + 15];
           _sajDg::I64 = I64[R1 + 23];
           _sajDh::I64 = I64[Sp + 8] + I64[Sp + 16];
           I32[_sajDh::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I16[_sajDh::I64 + 4] = %MO_UU_Conv_W64_W16(_sajDf::I64);
           I16[_sajDh::I64 + 6] = %MO_UU_Conv_W64_W16(_sajDg::I64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakO5_info" {
     block_cakO5_info:
         const _cakO5;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.375544488 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd_closure" {
     GHC.Event.Poll.$fStorablePollFd_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.Poll.$fStorablePollFd_$csizeOf_closure+1;
         const GHC.Event.Poll.$fStorablePollFd_$calignment_closure+1;
         const GHC.Event.Poll.$fStorablePollFd6_closure+3;
         const GHC.Event.Poll.$fStorablePollFd5_closure+4;
         const GHC.Event.Poll.$fStorablePollFd4_closure+3;
         const GHC.Event.Poll.$fStorablePollFd3_closure+4;
         const GHC.Event.Poll.$fStorablePollFd2_closure+2;
         const GHC.Event.Poll.$fStorablePollFd1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.377781367 UTC

[section ""data" . GHC.Event.Poll.$fStorableEvent_closure" {
     GHC.Event.Poll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt16_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt16_$calignment_closure+1;
         const GHC.Storable.readInt16OffPtr1_closure+3;
         const GHC.Storable.writeInt16OffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt9_closure+3;
         const Foreign.Storable.$fStorableInt7_closure+4;
         const Foreign.Storable.$fStorableInt6_closure+2;
         const Foreign.Storable.$fStorableInt5_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.379603624 UTC

[section ""cstring" . GHC.Event.Poll.$fShowEvent2_bytes" {
     GHC.Event.Poll.$fShowEvent2_bytes:
         I8[] [69,118,101,110,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.384950904 UTC

[section ""data" . GHC.Event.Poll.$w$cshowsPrec_closure" {
     GHC.Event.Poll.$w$cshowsPrec_closure:
         const GHC.Event.Poll.$w$cshowsPrec_info;
 },
 sat_sajDw_entry() //  [R1]
         { []
         }
     {offset
       cakP2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cakP8; else goto cakP9;
       cakP8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakP9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cakOZ_info;
           _sajDp::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sajDp::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uakPe; else goto cakP0;
       uakPe: // global
           call _cakOZ(R1) args: 0, res: 0, upd: 0;
       cakP0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajDw_info" {
     sat_sajDw_info:
         const sat_sajDw_entry;
         const 2;
         const 18;
 },
 _cakOZ() //  [R1]
         { []
         }
     {offset
       cakOZ: // global
           _sajDp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cakP5_info;
           R4 = _sajDp::P64;
           R3 = I64[R1 + 7];
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cakOZ_info" {
     block_cakOZ_info:
         const _cakOZ;
         const 1;
         const 30;
 },
 _cakP5() //  [R1, R2]
         { []
         }
     {offset
       cakP5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakPd; else goto cakPc;
       cakPd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cakPc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cakP5_info" {
     block_cakP5_info:
         const _cakP5;
         const 0;
         const 30;
 },
 sat_sajDD_entry() //  [R1]
         { []
         }
     {offset
       cakPr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cakPy; else goto cakPz;
       cakPy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakPz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cakPo_info;
           _sajDp::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sajDp::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uakPG; else goto cakPp;
       uakPG: // global
           call _cakPo(R1) args: 0, res: 0, upd: 0;
       cakPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajDD_info" {
     sat_sajDD_info:
         const sat_sajDD_entry;
         const 2;
         const 18;
 },
 _cakPo() //  [R1]
         { []
         }
     {offset
       cakPo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakPC; else goto cakPB;
       cakPC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cakPB: // global
           _sajDy::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cakPv_info;
           R4 = Hp - 14;
           R3 = _sajDy::I64;
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cakPo_info" {
     block_cakPo_info:
         const _cakPo;
         const 1;
         const 30;
 },
 _cakPv() //  [R1, R2]
         { []
         }
     {offset
       cakPv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakPF; else goto cakPE;
       cakPF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cakPE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cakPv_info" {
     block_cakPv_info:
         const _cakPv;
         const 0;
         const 30;
 },
 sat_sajDE_entry() //  [R1]
         { []
         }
     {offset
       cakPH: // global
           _sajDE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cakPI; else goto cakPJ;
       cakPJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cakPL; else goto cakPK;
       cakPL: // global
           HpAlloc = 32;
           goto cakPI;
       cakPI: // global
           R1 = _sajDE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakPK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajDE::P64;
           _sajDo::P64 = P64[_sajDE::P64 + 16];
           _sajDp::P64 = P64[_sajDE::P64 + 24];
           I64[Hp - 24] = sat_sajDD_info;
           P64[Hp - 8] = _sajDo::P64;
           P64[Hp] = _sajDp::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.Poll.$fShowEvent2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajDE_info" {
     sat_sajDE_info:
         const sat_sajDE_entry;
         const 2;
         const 18;
 },
 GHC.Event.Poll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cakPP: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cakPT; else goto cakPS;
       cakPT: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cakPS: // global
           if (%MO_S_Lt_W64(R2, 11)) goto cakPN; else goto cakPO;
       cakPN: // global
           I64[Hp - 48] = sat_sajDw_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _cakOV::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _cakOV::P64;
           R2 = GHC.Event.Poll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       cakPO: // global
           I64[Hp - 48] = sat_sajDE_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$w$cshowsPrec_info" {
     GHC.Event.Poll.$w$cshowsPrec_info:
         const GHC.Event.Poll.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.40203337 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.Poll.$fShowEvent_$cshowsPrec_info;
 },
 GHC.Event.Poll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cakQB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cakQC; else goto cakQD;
       cakQC: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cakQD: // global
           I64[Sp - 24] = block_cakQy_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uakQH; else goto cakQz;
       uakQH: // global
           call _cakQy(R1) args: 0, res: 0, upd: 0;
       cakQz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent_$cshowsPrec_info" {
     GHC.Event.Poll.$fShowEvent_$cshowsPrec_info:
         const GHC.Event.Poll.$fShowEvent_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _cakQy() //  [R1]
         { []
         }
     {offset
       cakQy: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakQy_info" {
     block_cakQy_info:
         const _cakQy;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.408133485 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_$cshow_closure" {
     GHC.Event.Poll.$fShowEvent_$cshow_closure:
         const GHC.Event.Poll.$fShowEvent_$cshow_info;
 },
 sat_sajDQ_entry() //  [R1]
         { []
         }
     {offset
       cakR2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cakR8; else goto cakR9;
       cakR8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakR9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cakQZ_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uakRe; else goto cakR0;
       uakRe: // global
           call _cakQZ(R1) args: 0, res: 0, upd: 0;
       cakR0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajDQ_info" {
     sat_sajDQ_info:
         const sat_sajDQ_entry;
         const 1;
         const 16;
 },
 _cakQZ() //  [R1]
         { []
         }
     {offset
       cakQZ: // global
           I64[Sp] = block_cakR5_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 11;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_cakQZ_info" {
     block_cakQZ_info:
         const _cakQZ;
         const 0;
         const 30;
 },
 _cakR5() //  [R1, R2]
         { []
         }
     {offset
       cakR5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakRd; else goto cakRc;
       cakRd: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cakRc: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cakR5_info" {
     block_cakR5_info:
         const _cakR5;
         const 0;
         const 30;
 },
 GHC.Event.Poll.$fShowEvent_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cakRf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakRj; else goto cakRi;
       cakRj: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakRi: // global
           I64[Hp - 16] = sat_sajDQ_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.Poll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent_$cshow_info" {
     GHC.Event.Poll.$fShowEvent_$cshow_info:
         const GHC.Event.Poll.$fShowEvent_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.416641731 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent1_closure" {
     GHC.Event.Poll.$fShowEvent1_closure:
         const GHC.Event.Poll.$fShowEvent1_info;
 },
 GHC.Event.Poll.$fShowEvent1_entry() //  [R2, R3]
         { []
         }
     {offset
       cakRE: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent1_info" {
     GHC.Event.Poll.$fShowEvent1_info:
         const GHC.Event.Poll.$fShowEvent1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.419950889 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_$cshowList_closure" {
     GHC.Event.Poll.$fShowEvent_$cshowList_closure:
         const GHC.Event.Poll.$fShowEvent_$cshowList_info;
 },
 GHC.Event.Poll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cakRP: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Poll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent_$cshowList_info" {
     GHC.Event.Poll.$fShowEvent_$cshowList_info:
         const GHC.Event.Poll.$fShowEvent_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.423084776 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_closure" {
     GHC.Event.Poll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.Poll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.Poll.$fShowEvent_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.424724256 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd6_bytes" {
     GHC.Event.Poll.$fShowPollFd6_bytes:
         I8[] [80,111,108,108,70,100,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.426695055 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd5_bytes" {
     GHC.Event.Poll.$fShowPollFd5_bytes:
         I8[] [112,102,100,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.428338665 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd4_bytes" {
     GHC.Event.Poll.$fShowPollFd4_bytes:
         I8[] [112,102,100,69,118,101,110,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.429888203 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd3_bytes" {
     GHC.Event.Poll.$fShowPollFd3_bytes:
         I8[] [112,102,100,82,101,118,101,110,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.4320055 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd2_bytes" {
     GHC.Event.Poll.$fShowPollFd2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.441052658 UTC

[section ""data" . GHC.Event.Poll.$w$cshowsPrec1_closure" {
     GHC.Event.Poll.$w$cshowsPrec1_closure:
         const GHC.Event.Poll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.Poll.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       cakS3: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_sajE4_entry() //  [R1]
         { []
         }
     {offset
       cakSM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cakSN; else goto cakSO;
       cakSN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakSO: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.Poll.$fShowPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajE4_info" {
     sat_sajE4_info:
         const sat_sajE4_entry;
         const 1;
         const 16;
 },
 sat_sajE5_entry() //  [R1]
         { []
         }
     {offset
       cakSQ: // global
           _sajE5::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cakSR; else goto cakSS;
       cakSS: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cakSU; else goto cakST;
       cakSU: // global
           HpAlloc = 40;
           goto cakSR;
       cakSR: // global
           R1 = _sajE5::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakST: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajE5::P64;
           _sajE1::P64 = P64[_sajE5::P64 + 16];
           _sajDY::I64 = I64[_sajE5::P64 + 24];
           I64[Hp - 32] = sat_sajE4_info;
           P64[Hp - 16] = _sajE1::P64;
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _sajDY::I64;
           R4 = Hp - 32;
           R3 = Hp - 7;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajE5_info" {
     sat_sajE5_info:
         const sat_sajE5_entry;
         const 4294967297;
         const 19;
 },
 sat_sajE6_entry() //  [R1]
         { []
         }
     {offset
       cakSV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cakSZ; else goto cakSY;
       cakSZ: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakSY: // global
           _sajE1::P64 = P64[R1 + 16];
           _sajDY::I64 = I64[R1 + 24];
           I64[Hp - 24] = sat_sajE5_info;
           P64[Hp - 8] = _sajE1::P64;
           I64[Hp] = _sajDY::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Poll.$fShowPollFd3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sajE6_info" {
     sat_sajE6_info:
         const sat_sajE6_entry;
         const 4294967297;
         const 19;
 },
 sat_sajE7_entry() //  [R1]
         { []
         }
     {offset
       cakT0: // global
           _sajE7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cakT1; else goto cakT2;
       cakT2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cakT4; else goto cakT3;
       cakT4: // global
           HpAlloc = 32;
           goto cakT1;
       cakT1: // global
           R1 = _sajE7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakT3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajE7::P64;
           _sajE1::P64 = P64[_sajE7::P64 + 16];
           _sajDY::I64 = I64[_sajE7::P64 + 24];
           I64[Hp - 24] = sat_sajE6_info;
           P64[Hp - 8] = _sajE1::P64;
           I64[Hp] = _sajDY::I64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajE7_info" {
     sat_sajE7_info:
         const sat_sajE7_entry;
         const 4294967297;
         const 4294967315;
         const SajSl_srt;
 },
 sat_sajE8_entry() //  [R1]
         { []
         }
     {offset
       cakT6: // global
           _sajE8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cakT7; else goto cakT8;
       cakT8: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cakTa; else goto cakT9;
       cakTa: // global
           HpAlloc = 48;
           goto cakT7;
       cakT7: // global
           R1 = _sajE8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakT9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajE8::P64;
           _sajE1::P64 = P64[_sajE8::P64 + 16];
           _sajDX::I64 = I64[_sajE8::P64 + 24];
           _sajDY::I64 = I64[_sajE8::P64 + 32];
           I64[Hp - 40] = sat_sajE7_info;
           P64[Hp - 24] = _sajE1::P64;
           I64[Hp - 16] = _sajDY::I64;
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _sajDX::I64;
           R4 = Hp - 40;
           R3 = Hp - 7;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajE8_info" {
     sat_sajE8_info:
         const sat_sajE8_entry;
         const 8589934593;
         const 4294967311;
         const SajSl_srt;
 },
 sat_sajE9_entry() //  [R1]
         { []
         }
     {offset
       cakTb: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cakTf; else goto cakTe;
       cakTf: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakTe: // global
           _sajE1::P64 = P64[R1 + 16];
           _sajDX::I64 = I64[R1 + 24];
           _sajDY::I64 = I64[R1 + 32];
           I64[Hp - 32] = sat_sajE8_info;
           P64[Hp - 16] = _sajE1::P64;
           I64[Hp - 8] = _sajDX::I64;
           I64[Hp] = _sajDY::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Poll.$fShowPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sajE9_info" {
     sat_sajE9_info:
         const sat_sajE9_entry;
         const 8589934593;
         const 4294967311;
         const SajSl_srt;
 },
 sat_sajEa_entry() //  [R1]
         { []
         }
     {offset
       cakTg: // global
           _sajEa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cakTh; else goto cakTi;
       cakTi: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cakTk; else goto cakTj;
       cakTk: // global
           HpAlloc = 40;
           goto cakTh;
       cakTh: // global
           R1 = _sajEa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakTj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajEa::P64;
           _sajE1::P64 = P64[_sajEa::P64 + 16];
           _sajDX::I64 = I64[_sajEa::P64 + 24];
           _sajDY::I64 = I64[_sajEa::P64 + 32];
           I64[Hp - 32] = sat_sajE9_info;
           P64[Hp - 16] = _sajE1::P64;
           I64[Hp - 8] = _sajDX::I64;
           I64[Hp] = _sajDY::I64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajEa_info" {
     sat_sajEa_info:
         const sat_sajEa_entry;
         const 8589934593;
         const 4294967311;
         const SajSl_srt;
 },
 sat_sajEe_entry() //  [R1]
         { []
         }
     {offset
       cakTo: // global
           _sajEe::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto cakTp; else goto cakTq;
       cakTq: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cakTs; else goto cakTr;
       cakTs: // global
           HpAlloc = 40;
           goto cakTp;
       cakTp: // global
           R1 = _sajEe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakTr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajEe::P64;
           _sajE1::P64 = P64[_sajEe::P64 + 16];
           _sajDW::I64 = I64[_sajEe::P64 + 24];
           _sajDX::I64 = I64[_sajEe::P64 + 32];
           _sajDY::I64 = I64[_sajEe::P64 + 40];
           I64[Hp - 32] = sat_sajEa_info;
           P64[Hp - 16] = _sajE1::P64;
           I64[Hp - 8] = _sajDX::I64;
           I64[Hp] = _sajDY::I64;
           I64[Sp - 24] = block_cakTl_info;
           R4 = Hp - 32;
           R3 = _sajDW::I64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajEe_info" {
     sat_sajEe_info:
         const sat_sajEe_entry;
         const 12884901889;
         const 4294967311;
         const SajSl_srt;
 },
 _cakTl() //  [R1, R2]
         { []
         }
     {offset
       cakTl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakTv; else goto cakTu;
       cakTv: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       cakTu: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cakTl_info" {
     block_cakTl_info:
         const _cakTl;
         const 0;
         const 30;
 },
 sat_sajEf_entry() //  [R1]
         { []
         }
     {offset
       cakTw: // global
           _sajEf::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cakTx; else goto cakTy;
       cakTy: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cakTA; else goto cakTz;
       cakTA: // global
           HpAlloc = 48;
           goto cakTx;
       cakTx: // global
           R1 = _sajEf::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakTz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajEf::P64;
           _sajE1::P64 = P64[_sajEf::P64 + 16];
           _sajDW::I64 = I64[_sajEf::P64 + 24];
           _sajDX::I64 = I64[_sajEf::P64 + 32];
           _sajDY::I64 = I64[_sajEf::P64 + 40];
           I64[Hp - 40] = sat_sajEe_info;
           P64[Hp - 24] = _sajE1::P64;
           I64[Hp - 16] = _sajDW::I64;
           I64[Hp - 8] = _sajDX::I64;
           I64[Hp] = _sajDY::I64;
           R3 = Hp - 40;
           R2 = GHC.Event.Poll.$fShowPollFd5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajEf_info" {
     sat_sajEf_info:
         const sat_sajEf_entry;
         const 12884901889;
         const 4294967311;
         const SajSl_srt;
 },
 p_sajE0_entry() //  [R1, R2]
         { []
         }
     {offset
       cakTB: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cakTF; else goto cakTE;
       cakTF: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakTE: // global
           _sajDW::I64 = I64[R1 + 7];
           _sajDX::I64 = I64[R1 + 15];
           _sajDY::I64 = I64[R1 + 23];
           I64[Hp - 40] = sat_sajEf_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = _sajDW::I64;
           I64[Hp - 8] = _sajDX::I64;
           I64[Hp] = _sajDY::I64;
           R3 = Hp - 40;
           R2 = GHC.Event.Poll.$fShowPollFd6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_sajE0_info" {
     p_sajE0_info:
         const p_sajE0_entry;
         const 12884901888;
         const 4294967304;
         const 4294967301;
         const SajSl_srt;
 },
 sat_sajEi_entry() //  [R1]
         { []
         }
     {offset
       cakTP: // global
           _sajEi::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto cakTQ; else goto cakTR;
       cakTR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cakTT; else goto cakTS;
       cakTT: // global
           HpAlloc = 24;
           goto cakTQ;
       cakTQ: // global
           R1 = _sajEi::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakTS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _sajEi::P64;
           _sajDZ::P64 = P64[_sajEi::P64 + 16];
           _sajE0::P64 = P64[_sajEi::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _sajDZ::P64;
           R2 = Hp - 14;
           R1 = _sajE0::P64;
           Sp = Sp - 16;
           call p_sajE0_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajEi_info" {
     sat_sajEi_info:
         const sat_sajEi_entry;
         const 2;
         const 4294967314;
         const SajSl_srt;
 },
 GHC.Event.Poll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cakTX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cakU1; else goto cakU0;
       cakU1: // global
           HpAlloc = 88;
           R1 = GHC.Event.Poll.$w$cshowsPrec1_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       cakU0: // global
           I64[Hp - 80] = p_sajE0_info;
           I64[Hp - 72] = R3;
           I64[Hp - 64] = R4;
           I64[Hp - 56] = R5;
           _cakS7::P64 = Hp - 79;
           if (%MO_S_Lt_W64(R2, 11)) goto cakTV; else goto cakTW;
       cakTV: // global
           Hp = Hp - 56;
           R2 = R6;
           R1 = _cakS7::P64;
           call p_sajE0_entry(R2, R1) args: 8, res: 0, upd: 8;
       cakTW: // global
           I64[Hp - 48] = sat_sajEi_info;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _cakS7::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$w$cshowsPrec1_info" {
     GHC.Event.Poll.$w$cshowsPrec1_info:
         const GHC.Event.Poll.$w$cshowsPrec1_entry;
         const 0;
         const 12884901902;
         const 21474836480;
         const SajSl_srt;
         const 965;
         const GHC.Event.Poll.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.468415626 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure" {
     GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure:
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cakV1: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cakV5; else goto cakV6;
       cakV5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cakV6: // global
           I64[Sp - 24] = block_cakUY_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uakVe; else goto cakUZ;
       uakVe: // global
           call _cakUY(R1) args: 0, res: 0, upd: 0;
       cakUZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd_$cshowsPrec_info" {
     GHC.Event.Poll.$fShowPollFd_$cshowsPrec_info:
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SajSl_srt+8;
 },
 _cakUY() //  [R1]
         { []
         }
     {offset
       cakUY: // global
           I64[Sp] = block_cakV4_info;
           _sajEn::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _sajEn::I64;
           if (R1 & 7 != 0) goto uakVd; else goto cakV8;
       uakVd: // global
           call _cakV4(R1) args: 0, res: 0, upd: 0;
       cakV8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cakUY_info" {
     block_cakUY_info:
         const _cakUY;
         const 2;
         const 4294967326;
         const SajSl_srt+8;
 },
 _cakV4() //  [R1]
         { []
         }
     {offset
       cakV4: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakV4_info" {
     block_cakV4_info:
         const _cakV4;
         const 66;
         const 4294967326;
         const SajSl_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.475710417 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd7_closure" {
     GHC.Event.Poll.$fShowPollFd7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.478286262 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_$cshow_closure" {
     GHC.Event.Poll.$fShowPollFd_$cshow_closure:
         const GHC.Event.Poll.$fShowPollFd_$cshow_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cakVA: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cakVB; else goto cakVC;
       cakVB: // global
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakVC: // global
           I64[Sp - 8] = block_cakVx_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uakVG; else goto cakVy;
       uakVG: // global
           call _cakVx(R1) args: 0, res: 0, upd: 0;
       cakVy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd_$cshow_info" {
     GHC.Event.Poll.$fShowPollFd_$cshow_info:
         const GHC.Event.Poll.$fShowPollFd_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SajSl_srt+8;
 },
 _cakVx() //  [R1]
         { []
         }
     {offset
       cakVx: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakVx_info" {
     block_cakVx_info:
         const _cakVx;
         const 0;
         const 4294967326;
         const SajSl_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.483789837 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd1_closure" {
     GHC.Event.Poll.$fShowPollFd1_closure:
         const GHC.Event.Poll.$fShowPollFd1_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       cakVX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cakVY; else goto cakVZ;
       cakVY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowPollFd1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cakVZ: // global
           I64[Sp - 16] = block_cakVU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uakW3; else goto cakVV;
       uakW3: // global
           call _cakVU(R1) args: 0, res: 0, upd: 0;
       cakVV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd1_info" {
     GHC.Event.Poll.$fShowPollFd1_info:
         const GHC.Event.Poll.$fShowPollFd1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SajSl_srt+8;
 },
 _cakVU() //  [R1]
         { []
         }
     {offset
       cakVU: // global
           R6 = P64[Sp + 8];
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakVU_info" {
     block_cakVU_info:
         const _cakVU;
         const 1;
         const 4294967326;
         const SajSl_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.488863322 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_$cshowList_closure" {
     GHC.Event.Poll.$fShowPollFd_$cshowList_closure:
         const GHC.Event.Poll.$fShowPollFd_$cshowList_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cakWh: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Poll.$fShowPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd_$cshowList_info" {
     GHC.Event.Poll.$fShowPollFd_$cshowList_info:
         const GHC.Event.Poll.$fShowPollFd_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SajSl_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.492207265 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_closure" {
     GHC.Event.Poll.$fShowPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure+3;
         const GHC.Event.Poll.$fShowPollFd_$cshow_closure+1;
         const GHC.Event.Poll.$fShowPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.494026916 UTC

[section ""data" . GHC.Event.Poll.$fEqEvent_closure" {
     GHC.Event.Poll.$fEqEvent_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt16_closure+2;
         const GHC.Int.neInt16_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.496526809 UTC

[section ""data" . GHC.Event.Poll.pfdRevents_closure" {
     GHC.Event.Poll.pfdRevents_closure:
         const GHC.Event.Poll.pfdRevents_info;
 },
 GHC.Event.Poll.pfdRevents_entry() //  [R2]
         { []
         }
     {offset
       cakWx: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cakWB; else goto cakWC;
       cakWB: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pfdRevents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakWC: // global
           I64[Sp - 8] = block_cakWu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uakWG; else goto cakWv;
       uakWG: // global
           call _cakWu(R1) args: 0, res: 0, upd: 0;
       cakWv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pfdRevents_info" {
     GHC.Event.Poll.pfdRevents_info:
         const GHC.Event.Poll.pfdRevents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cakWu() //  [R1]
         { []
         }
     {offset
       cakWu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cakWF; else goto cakWE;
       cakWF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakWE: // global
           _sajEJ::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _sajEJ::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakWu_info" {
     block_cakWu_info:
         const _cakWu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.502484022 UTC

[section ""data" . GHC.Event.Poll.pfdEvents_closure" {
     GHC.Event.Poll.pfdEvents_closure:
         const GHC.Event.Poll.pfdEvents_info;
 },
 GHC.Event.Poll.pfdEvents_entry() //  [R2]
         { []
         }
     {offset
       cakWY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cakX2; else goto cakX3;
       cakX2: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pfdEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakX3: // global
           I64[Sp - 8] = block_cakWV_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uakX7; else goto cakWW;
       uakX7: // global
           call _cakWV(R1) args: 0, res: 0, upd: 0;
       cakWW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pfdEvents_info" {
     GHC.Event.Poll.pfdEvents_info:
         const GHC.Event.Poll.pfdEvents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cakWV() //  [R1]
         { []
         }
     {offset
       cakWV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cakX6; else goto cakX5;
       cakX6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakX5: // global
           _sajEN::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _sajEN::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakWV_info" {
     block_cakWV_info:
         const _cakWV;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.508463567 UTC

[section ""data" . GHC.Event.Poll.pfdFd_closure" {
     GHC.Event.Poll.pfdFd_closure:
         const GHC.Event.Poll.pfdFd_info;
 },
 GHC.Event.Poll.pfdFd_entry() //  [R2]
         { []
         }
     {offset
       cakXp: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cakXt; else goto cakXu;
       cakXt: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pfdFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakXu: // global
           I64[Sp - 8] = block_cakXm_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uakXy; else goto cakXn;
       uakXy: // global
           call _cakXm(R1) args: 0, res: 0, upd: 0;
       cakXn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pfdFd_info" {
     GHC.Event.Poll.pfdFd_info:
         const GHC.Event.Poll.pfdFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cakXm() //  [R1]
         { []
         }
     {offset
       cakXm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cakXx; else goto cakXw;
       cakXx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakXw: // global
           _sajER::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _sajER::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakXm_info" {
     block_cakXm_info:
         const _cakXm;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.514407356 UTC

[section ""data" . GHC.Event.Poll.pollFd_closure" {
     GHC.Event.Poll.pollFd_closure:
         const GHC.Event.Poll.pollFd_info;
 },
 GHC.Event.Poll.pollFd_entry() //  [R2]
         { []
         }
     {offset
       cakXQ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cakXU; else goto cakXV;
       cakXU: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakXV: // global
           I64[Sp - 8] = block_cakXN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uakXZ; else goto cakXO;
       uakXZ: // global
           call _cakXN(R1) args: 0, res: 0, upd: 0;
       cakXO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pollFd_info" {
     GHC.Event.Poll.pollFd_info:
         const GHC.Event.Poll.pollFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cakXN() //  [R1]
         { []
         }
     {offset
       cakXN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cakXY; else goto cakXX;
       cakXY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakXX: // global
           _sajEX::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _sajEX::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakXN_info" {
     block_cakXN_info:
         const _cakXN;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.519906204 UTC

[section ""data" . GHC.Event.Poll.pollChanges_closure" {
     GHC.Event.Poll.pollChanges_closure:
         const GHC.Event.Poll.pollChanges_info;
 },
 GHC.Event.Poll.pollChanges_entry() //  [R2]
         { []
         }
     {offset
       cakYh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cakYl; else goto cakYm;
       cakYl: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pollChanges_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cakYm: // global
           I64[Sp - 8] = block_cakYe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uakYq; else goto cakYf;
       uakYq: // global
           call _cakYe(R1) args: 0, res: 0, upd: 0;
       cakYf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pollChanges_info" {
     GHC.Event.Poll.pollChanges_info:
         const GHC.Event.Poll.pollChanges_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cakYe() //  [R1]
         { []
         }
     {offset
       cakYe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cakYp; else goto cakYo;
       cakYp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cakYo: // global
           _sajF0::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = _sajF0::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cakYe_info" {
     block_cakYe_info:
         const _cakYe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.524981967 UTC

[section ""data" . GHC.Event.Poll.available_closure" {
     GHC.Event.Poll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.526685476 UTC

[section ""cstring" . GHC.Event.Poll.$trModule4_bytes" {
     GHC.Event.Poll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.528335159 UTC

[section ""data" . GHC.Event.Poll.$trModule3_closure" {
     GHC.Event.Poll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.530203745 UTC

[section ""cstring" . GHC.Event.Poll.$trModule2_bytes" {
     GHC.Event.Poll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.531798758 UTC

[section ""data" . GHC.Event.Poll.$trModule1_closure" {
     GHC.Event.Poll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.533503571 UTC

[section ""data" . GHC.Event.Poll.$trModule_closure" {
     GHC.Event.Poll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Poll.$trModule3_closure+1;
         const GHC.Event.Poll.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.535289259 UTC

[section ""data" . $krep_rajAW_closure" {
     $krep_rajAW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCShort_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.536942158 UTC

[section ""data" . $krep1_rajAX_closure" {
     $krep1_rajAX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.539405923 UTC

[section ""cstring" . GHC.Event.Poll.$tcEvent2_bytes" {
     GHC.Event.Poll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.541039865 UTC

[section ""data" . GHC.Event.Poll.$tcEvent1_closure" {
     GHC.Event.Poll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tcEvent2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.542737511 UTC

[section ""data" . GHC.Event.Poll.$tcEvent_closure" {
     GHC.Event.Poll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10782964843686049546;
         const 16589058175633483645;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.544483524 UTC

[section ""data" . $krep2_rajAY_closure" {
     $krep2_rajAY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Poll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.546453705 UTC

[section ""data" . GHC.Event.Poll.$tc'Event1_closure" {
     GHC.Event.Poll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rajAW_closure+1;
         const $krep2_rajAY_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.548137174 UTC

[section ""cstring" . GHC.Event.Poll.$tc'Event3_bytes" {
     GHC.Event.Poll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.54988364 UTC

[section ""data" . GHC.Event.Poll.$tc'Event2_closure" {
     GHC.Event.Poll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tc'Event3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.551564331 UTC

[section ""data" . GHC.Event.Poll.$tc'Event_closure" {
     GHC.Event.Poll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tc'Event2_closure+1;
         const GHC.Event.Poll.$tc'Event1_closure+4;
         const 14301517435728423362;
         const 8190957594797964970;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.553332287 UTC

[section ""cstring" . GHC.Event.Poll.$tcPollFd2_bytes" {
     GHC.Event.Poll.$tcPollFd2_bytes:
         I8[] [80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.554964033 UTC

[section ""data" . GHC.Event.Poll.$tcPollFd1_closure" {
     GHC.Event.Poll.$tcPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tcPollFd2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.55664341 UTC

[section ""data" . GHC.Event.Poll.$tcPollFd_closure" {
     GHC.Event.Poll.$tcPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tcPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16228031948332168786;
         const 6382085973026785723;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.558755675 UTC

[section ""data" . $krep3_rajAZ_closure" {
     $krep3_rajAZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Poll.$tcPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.560502939 UTC

[section ""data" . $krep4_rajB0_closure" {
     $krep4_rajB0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rajAY_closure+1;
         const $krep3_rajAZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.562243504 UTC

[section ""data" . $krep5_rajB1_closure" {
     $krep5_rajB1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rajAY_closure+1;
         const $krep4_rajB0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.564394153 UTC

[section ""data" . GHC.Event.Poll.$tc'PollFd1_closure" {
     GHC.Event.Poll.$tc'PollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rajAX_closure+1;
         const $krep5_rajB1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.56650975 UTC

[section ""cstring" . GHC.Event.Poll.$tc'PollFd3_bytes" {
     GHC.Event.Poll.$tc'PollFd3_bytes:
         I8[] [39,80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.568046676 UTC

[section ""data" . GHC.Event.Poll.$tc'PollFd2_closure" {
     GHC.Event.Poll.$tc'PollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tc'PollFd3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.569769323 UTC

[section ""data" . GHC.Event.Poll.$tc'PollFd_closure" {
     GHC.Event.Poll.$tc'PollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tc'PollFd2_closure+1;
         const GHC.Event.Poll.$tc'PollFd1_closure+4;
         const 13628496348781941345;
         const 13702663238288085101;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.571417289 UTC

[section ""data" . $krep6_rajB2_closure" {
     $krep6_rajB2_closure:
         const :_con_info;
         const $krep3_rajAZ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.57306624 UTC

[section ""data" . $krep7_rajB3_closure" {
     $krep7_rajB3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep6_rajB2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.574774631 UTC

[section ""data" . $krep8_rajB4_closure" {
     $krep8_rajB4_closure:
         const :_con_info;
         const $krep7_rajB3_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.57651229 UTC

[section ""data" . $krep9_rajB5_closure" {
     $krep9_rajB5_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep8_rajB4_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.578510818 UTC

[section ""cstring" . GHC.Event.Poll.$tcPoll2_bytes" {
     GHC.Event.Poll.$tcPoll2_bytes:
         I8[] [80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.580196291 UTC

[section ""data" . GHC.Event.Poll.$tcPoll1_closure" {
     GHC.Event.Poll.$tcPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tcPoll2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.582045526 UTC

[section ""data" . GHC.Event.Poll.$tcPoll_closure" {
     GHC.Event.Poll.$tcPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tcPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13451464419968486054;
         const 9195109480934256969;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.583861401 UTC

[section ""data" . $krep10_rajB6_closure" {
     $krep10_rajB6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Poll.$tcPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.58558911 UTC

[section ""data" . $krep11_rajB7_closure" {
     $krep11_rajB7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rajB3_closure+1;
         const $krep10_rajB6_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.587308704 UTC

[section ""data" . GHC.Event.Poll.$tc'Poll1_closure" {
     GHC.Event.Poll.$tc'Poll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rajB5_closure+1;
         const $krep11_rajB7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.589452062 UTC

[section ""cstring" . GHC.Event.Poll.$tc'Poll3_bytes" {
     GHC.Event.Poll.$tc'Poll3_bytes:
         I8[] [39,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.591123994 UTC

[section ""data" . GHC.Event.Poll.$tc'Poll2_closure" {
     GHC.Event.Poll.$tc'Poll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tc'Poll3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.59278093 UTC

[section ""data" . GHC.Event.Poll.$tc'Poll_closure" {
     GHC.Event.Poll.$tc'Poll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tc'Poll2_closure+1;
         const GHC.Event.Poll.$tc'Poll1_closure+4;
         const 5431567153781643515;
         const 15938353663250731731;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.595312702 UTC

[section ""data" . GHC.Event.Poll.$fBitsEvent_closure" {
     GHC.Event.Poll.$fBitsEvent_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.Poll.$fEqEvent_closure+1;
         const GHC.Int.$fBitsInt16_$c.&._closure+2;
         const GHC.Int.$fBitsInt16_$c.|._closure+2;
         const GHC.Int.$fBitsInt16_$cxor_closure+2;
         const GHC.Int.$fBitsInt16_$ccomplement_closure+1;
         const GHC.Int.$fBitsInt16_$cshift_closure+2;
         const GHC.Int.$fBitsInt16_$crotate_closure+2;
         const GHC.Int.$fBitsInt3_closure;
         const GHC.Int.$fBitsInt16_$cbit_closure+1;
         const GHC.Int.$fBitsInt16_$csetBit_closure+2;
         const GHC.Int.$fBitsInt16_$cclearBit_closure+2;
         const GHC.Int.$fBitsInt16_$ccomplementBit_closure+2;
         const GHC.Int.$fBitsInt16_$ctestBit_closure+2;
         const GHC.Int.$fBitsInt16_$cbitSizeMaybe_closure+1;
         const GHC.Int.$fBitsInt16_$cfiniteBitSize_closure+1;
         const GHC.Int.$fBitsInt16_$cisSigned_closure+1;
         const GHC.Int.$fBitsInt16_$cshiftL_closure+2;
         const GHC.Int.$fBitsInt16_$cunsafeShiftL_closure+2;
         const GHC.Int.$fBitsInt16_$cshiftR_closure+2;
         const GHC.Int.$fBitsInt16_$cunsafeShiftR_closure+2;
         const GHC.Int.$fBitsInt16_$crotateL_closure+2;
         const GHC.Int.$fBitsInt16_$crotateR_closure+2;
         const GHC.Int.$fBitsInt16_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.597348984 UTC

[section ""data" . GHC.Event.Poll.$fFiniteBitsEvent_closure" {
     GHC.Event.Poll.$fFiniteBitsEvent_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.Poll.$fBitsEvent_closure+1;
         const GHC.Int.$fBitsInt16_$cfiniteBitSize_closure+1;
         const GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros_closure+1;
         const GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.599123697 UTC

[section ""data" . GHC.Event.Poll.$fNumEvent_closure" {
     GHC.Event.Poll.$fNumEvent_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Int.$fNumInt16_$c+_closure+2;
         const GHC.Int.$fNumInt16_$c-_closure+2;
         const GHC.Int.$fNumInt16_$c*_closure+2;
         const GHC.Int.$fNumInt16_$cnegate_closure+1;
         const GHC.Int.$fNumInt16_$cabs_closure+1;
         const GHC.Int.$fNumInt16_$csignum_closure+1;
         const GHC.Int.$fNumInt16_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.60076055 UTC

[section ""cstring" . lvl_rajB8_bytes" {
     lvl_rajB8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,80,111,108,108,32,98,97,99,107,101,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.603350124 UTC

[section ""data" . GHC.Event.Poll.new3_closure" {
     GHC.Event.Poll.new3_closure:
         const GHC.Event.Poll.new3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Poll.new3_entry() //  [R1]
         { []
         }
     {offset
       cakZq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cakZr; else goto cakZs;
       cakZr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cakZs: // global
           (_cakZl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cakZl::I64 == 0) goto cakZn; else goto cakZm;
       cakZn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cakZm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cakZl::I64;
           I64[Sp - 24] = block_cakZo_info;
           R2 = lvl_rajB8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new3_info" {
     GHC.Event.Poll.new3_info:
         const GHC.Event.Poll.new3_entry;
         const 0;
         const 4294967317;
         const SajSl_srt+40;
 },
 _cakZo() //  [R1]
         { []
         }
     {offset
       cakZo: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cakZo_info" {
     block_cakZo_info:
         const _cakZo;
         const 0;
         const 4294967326;
         const SajSl_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.611814442 UTC

[section ""data" . $wc_pollLoop_rajB9_closure" {
     $wc_pollLoop_rajB9_closure:
         const $wc_pollLoop_rajB9_info;
 },
 $wc_pollLoop_rajB9_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cakZP: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cakZQ; else goto ual0A;
       cakZQ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wc_pollLoop_rajB9_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ual0A: // global
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cakZH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wc_pollLoop_rajB9_info" {
     $wc_pollLoop_rajB9_info:
         const $wc_pollLoop_rajB9_entry;
         const 0;
         const 14;
         const 17179869200;
 },
 _cakZH() //  []
         { []
         }
     {offset
       cakZH: // global
           _sajF3::I64 = I64[Sp];
           _sajF4::I64 = I64[Sp + 8];
           _sajF5::I64 = I64[Sp + 16];
           if (%MO_S_Gt_W64(_sajF5::I64,
                            2147483647)) goto cakZN; else goto cakZO;
       cakZN: // global
           I64[Sp - 8] = block_cakZX_info;
           Sp = Sp - 8;
           _ual0G::P64 = CurrentTSO;
           I64[I64[_ual0G::P64 + 24] + 16] = Sp;
           _ual0H::I64 = CurrentNursery;
           P64[_ual0H::I64 + 8] = Hp + 8;
           I64[_ual0G::P64 + 104] = I64[_ual0G::P64 + 104] - ((Hp + 8) - I64[_ual0H::I64]);
           (_ual0E::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_sajFb::I64) = call "ccall" arg hints:  [PtrHint, ,
                                                     ‘signed’]  result hints:  [‘signed’] poll(_sajF3::I64, _sajF4::I64, 2147483647);
           (_ual0F::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ual0E::I64);
           BaseReg = _ual0F::I64;
           _ual0I::P64 = CurrentTSO;
           _ual0J::P64 = I64[_ual0I::P64 + 24];
           Sp = I64[_ual0J::P64 + 16];
           SpLim = _ual0J::P64 + 192;
           HpAlloc = 0;
           _ual0K::I64 = CurrentNursery;
           _ual0L::I64 = I64[_ual0K::I64 + 8];
           Hp = _ual0L::I64 - 8;
           _ual0M::I64 = I64[_ual0K::I64];
           HpLim = _ual0M::I64 + ((%MO_SS_Conv_W32_W64(I32[_ual0K::I64 + 48]) << 12) - 1);
           I64[_ual0I::P64 + 104] = I64[_ual0I::P64 + 104] + (_ual0L::I64 - _ual0M::I64);
           R1 = _sajFb::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
       cakZO: // global
           I64[Sp + 16] = block_cal0q_info;
           Sp = Sp + 16;
           _ual0Q::P64 = CurrentTSO;
           I64[I64[_ual0Q::P64 + 24] + 16] = Sp;
           _ual0R::I64 = CurrentNursery;
           P64[_ual0R::I64 + 8] = Hp + 8;
           I64[_ual0Q::P64 + 104] = I64[_ual0Q::P64 + 104] - ((Hp + 8) - I64[_ual0R::I64]);
           (_ual0O::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_sajFj::I64) = call "ccall" arg hints:  [PtrHint, ,
                                                     ‘signed’]  result hints:  [‘signed’] poll(_sajF3::I64, _sajF4::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sajF5::I64)));
           (_ual0P::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ual0O::I64);
           BaseReg = _ual0P::I64;
           _ual0S::P64 = CurrentTSO;
           _ual0T::P64 = I64[_ual0S::P64 + 24];
           Sp = I64[_ual0T::P64 + 16];
           SpLim = _ual0T::P64 + 192;
           HpAlloc = 0;
           _ual0U::I64 = CurrentNursery;
           _ual0V::I64 = I64[_ual0U::I64 + 8];
           Hp = _ual0V::I64 - 8;
           _ual0W::I64 = I64[_ual0U::I64];
           HpLim = _ual0W::I64 + ((%MO_SS_Conv_W32_W64(I32[_ual0U::I64 + 48]) << 12) - 1);
           I64[_ual0S::P64 + 104] = I64[_ual0S::P64 + 104] + (_ual0V::I64 - _ual0W::I64);
           R1 = _sajFj::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cakZX() //  [R1]
         { []
         }
     {offset
       cakZX: // global
           _sajFc::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_sajFc::I64 != 0) goto ual0B; else goto cal0e;
       ual0B: // global
           I64[Sp + 24] = _sajFc::I64;
           Sp = Sp + 24;
           call _cal04() args: 0, res: 0, upd: 0;
       cal0e: // global
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24] - 2147483647;
           Sp = Sp + 8;
           call _cakZH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cakZX_info" {
     block_cakZX_info:
         const _cakZX;
         const 451;
         const 30;
 },
 _cal04() //  []
         { []
         }
     {offset
       cal04: // global
           Hp = Hp + 16;
           _sajFc::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto cal0b; else goto cal0a;
       cal0b: // global
           HpAlloc = 16;
           I64[Sp] = block_cal03_info;
           R1 = _sajFc::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cal0a: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _sajFc::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cal03() //  [R1]
         { []
         }
     {offset
       cal03: // global
           I64[Sp] = R1;
           call _cal04() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cal03_info" {
     block_cal03_info:
         const _cal03;
         const 0;
         const 30;
 },
 _cal0q() //  [R1]
         { []
         }
     {offset
       cal0q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cal0y; else goto cal0x;
       cal0y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cal0x: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cal0q_info" {
     block_cal0q_info:
         const _cal0q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.623566772 UTC

[section ""data" . lvl1_rajBa_closure" {
     lvl1_rajBa_closure:
         const GHC.Int.I32#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.625753023 UTC

[section ""cstring" . lvl2_rajBb_bytes" {
     lvl2_rajBb_bytes:
         I8[] [99,95,112,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.628008732 UTC

[section ""data" . lvl3_rajBc_closure" {
     lvl3_rajBc_closure:
         const lvl3_rajBc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rajBc_entry() //  [R1]
         { []
         }
     {offset
       cal24: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cal25; else goto cal26;
       cal25: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal26: // global
           (_cal21::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cal21::I64 == 0) goto cal23; else goto cal22;
       cal23: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cal22: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cal21::I64;
           R2 = lvl2_rajBb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rajBc_info" {
     lvl3_rajBc_info:
         const lvl3_rajBc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.631694205 UTC

[section ""cstring" . lvl4_rajBd_bytes" {
     lvl4_rajBd_bytes:
         I8[] [114,101,119,111,114,107,70,100,58,32,101,118,101,110,116,32,110,111,116,32,102,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.634079821 UTC

[section ""data" . lvl5_rajBe_closure" {
     lvl5_rajBe_closure:
         const lvl5_rajBe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rajBe_entry() //  [R1]
         { []
         }
     {offset
       cal2n: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cal2o; else goto cal2p;
       cal2o: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal2p: // global
           (_cal2i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cal2i::I64 == 0) goto cal2k; else goto cal2j;
       cal2k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cal2j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cal2i::I64;
           I64[Sp - 24] = block_cal2l_info;
           R2 = lvl4_rajBd_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rajBe_info" {
     lvl5_rajBe_info:
         const lvl5_rajBe_entry;
         const 0;
         const 4294967317;
         const SajSl_srt+40;
 },
 _cal2l() //  [R1]
         { []
         }
     {offset
       cal2l: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cal2l_info" {
     block_cal2l_info:
         const _cal2l;
         const 0;
         const 4294967326;
         const SajSl_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.639316952 UTC

[section ""data" . lvl6_rajBf_closure" {
     lvl6_rajBf_closure:
         const lvl6_rajBf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rajBf_entry() //  [R1]
         { []
         }
     {offset
       cal2J: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cal2K; else goto cal2L;
       cal2K: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal2L: // global
           (_cal2G::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cal2G::I64 == 0) goto cal2I; else goto cal2H;
       cal2I: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cal2H: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cal2G::I64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 16;
           call GHC.Event.Array.loop_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rajBf_info" {
     lvl6_rajBf_info:
         const lvl6_rajBf_entry;
         const 0;
         const 4294967317;
         const SajSl_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.643157886 UTC

[section ""data" . lvl7_rajBg_closure" {
     lvl7_rajBg_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.644800951 UTC

[section ""data" . lvl8_rajBh_closure" {
     lvl8_rajBh_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.646484046 UTC

[section ""data" . lvl9_rajBi_closure" {
     lvl9_rajBi_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.648720464 UTC

[section ""data" . lvl10_rajBj_closure" {
     lvl10_rajBj_closure:
         const lvl10_rajBj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rajBj_entry() //  [R1]
         { []
         }
     {offset
       cal32: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cal33; else goto cal34;
       cal33: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal34: // global
           (_cal2Z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cal2Z::I64 == 0) goto cal31; else goto cal30;
       cal31: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cal30: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cal2Z::I64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 16;
           call GHC.Event.Array.removeAt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_rajBj_info" {
     lvl10_rajBj_info:
         const lvl10_rajBj_entry;
         const 0;
         const 4294967317;
         const SajSl_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.652649962 UTC

[section ""data" . lvl11_rajBk_closure" {
     lvl11_rajBk_closure:
         const lvl11_rajBk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rajBk_entry() //  [R1]
         { []
         }
     {offset
       cal3i: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cal3j; else goto cal3k;
       cal3j: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal3k: // global
           (_cal3f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cal3f::I64 == 0) goto cal3h; else goto cal3g;
       cal3h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cal3g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cal3f::I64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 16;
           call GHC.Event.Array.findIndex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rajBk_info" {
     lvl11_rajBk_info:
         const lvl11_rajBk_entry;
         const 0;
         const 4294967317;
         const SajSl_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.676397943 UTC

[section ""data" . GHC.Event.Poll.new5_closure" {
     GHC.Event.Poll.new5_closure:
         const GHC.Event.Poll.new5_info;
         const 0;
 },
 sat_sajGz_entry() //  [R1]
         { []
         }
     {offset
       cal54: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cal55; else goto cal65;
       cal55: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal65: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _sajGo::I64 = I64[R1 + 16];
           if (_sajGo::I64 & 25 == 0) goto cal5G; else goto cal5f;
       cal5G: // global
           if (_sajGo::I64 & 28 == 0) goto cal61; else goto cal5V;
       cal61: // global
           R1 = GHC.Event.Poll.$fShowPollFd7_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cal5V: // global
           R1 = lvl9_rajBi_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cal5f: // global
           if (_sajGo::I64 & 28 == 0) goto cal5A; else goto cal5u;
       cal5A: // global
           R1 = lvl8_rajBh_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cal5u: // global
           R1 = lvl7_rajBg_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajGz_info" {
     sat_sajGz_info:
         const sat_sajGz_entry;
         const 4294967296;
         const 17;
 },
 i'_sajGD_entry() //  [R1]
         { []
         }
     {offset
       cal6g: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cal6q; else goto cal6r;
       cal6q: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal6r: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cal6d_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ual6v; else goto cal6e;
       ual6v: // global
           call _cal6d(R1) args: 0, res: 0, upd: 0;
       cal6e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . i'_sajGD_info" {
     i'_sajGD_info:
         const i'_sajGD_entry;
         const 1;
         const 16;
 },
 _cal6d() //  [R1]
         { []
         }
     {offset
       cal6d: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cal6u; else goto cal6t;
       cal6u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cal6t: // global
           _sajGH::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7] + 1));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _sajGH::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cal6d_info" {
     block_cal6d_info:
         const _cal6d;
         const 0;
         const 30;
 },
 sat_sajGL_entry() //  [R1]
         { []
         }
     {offset
       cal6D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cal6E; else goto cal6F;
       cal6E: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cal6F: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cal6A_info;
           _sajGg::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sajGg::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ual6K; else goto cal6B;
       ual6K: // global
           call _cal6A(R1) args: 0, res: 0, upd: 0;
       cal6B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajGL_info" {
     sat_sajGL_info:
         const sat_sajGL_entry;
         const 4294967297;
         const 19;
 },
 _cal6A() //  [R1]
         { []
         }
     {offset
       cal6A: // global
           R1 = I64[((I64[R1 + 7] == I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cal6A_info" {
     block_cal6A_info:
         const _cal6A;
         const 65;
         const 30;
 },
 sat_sajGO_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cal6L: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cal6M; else goto cal6N;
       cal6M: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cal6N: // global
           I64[Sp - 32] = block_cal4R_info;
           _sajFp::P64 = P64[R1 + 5];
           _sajGg::I64 = I64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _sajFp::P64;
           I64[Sp - 16] = _sajGg::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ual70; else goto cal4S;
       ual70: // global
           call _cal4R(R1) args: 0, res: 0, upd: 0;
       cal4S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sajGO_info" {
     sat_sajGO_info:
         const sat_sajGO_entry;
         const 4294967297;
         const 12;
         const 12884901903;
 },
 _cal4R() //  [R1]
         { []
         }
     {offset
       cal4R: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cal6Q; else goto cal6P;
       cal6Q: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cal6P: // global
           _sajGo::I64 = I64[R1 + 23];
           if (_sajGo::I64 != 0) goto cal6T; else goto cal6Z;
       cal6T: // global
           _sajGl::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_sajGz_info;
           I64[Hp - 16] = _sajGo::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _sajGl::I64;
           _sajFp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cal67_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = _sajFp::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       cal6Z: // global
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = GHC.Types.True_closure+2;
           _cal6Y::P64 = Hp - 31;
           Hp = Hp - 16;
           R1 = _cal6Y::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cal4R_info" {
     block_cal4R_info:
         const _cal4R;
         const 131;
         const 30;
 },
 _cal67() //  [R1]
         { []
         }
     {offset
       cal67: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cal6W; else goto cal6V;
       cal6W: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cal6V: // global
           I64[Hp - 72] = i'_sajGD_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_sajGL_info;
           _cal69::P64 = Hp - 72;
           P64[Hp - 32] = _cal69::P64;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _cal69::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cal67_info" {
     block_cal67_info:
         const _cal67;
         const 66;
         const 30;
 },
 sat_sajHT_entry() //  [R1, R2]
         { []
         }
     {offset
       cal7s: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cal7t; else goto cal7u;
       cal7t: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cal7u: // global
           I64[Sp - 16] = block_cal7p_info;
           _sajHD::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 8] = _sajHD::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ual7z; else goto cal7q;
       ual7z: // global
           call _cal7p(R1) args: 0, res: 0, upd: 0;
       cal7q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sajHT_info" {
     sat_sajHT_info:
         const sat_sajHT_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _cal7p() //  [R1]
         { []
         }
     {offset
       cal7p: // global
           R1 = I64[((I64[R1 + 7] == I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cal7p_info" {
     block_cal7p_info:
         const _cal7p;
         const 65;
         const 30;
 },
 sat_sajIQ_entry() //  [R1]
         { []
         }
     {offset
       cal7N: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cal7O; else goto cal7P;
       cal7O: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cal7P: // global
           I64[Sp - 24] = block_cal7I_info;
           _sajFz::P64 = P64[R1 + 7];
           _sajFB::P64 = P64[R1 + 15];
           R1 = _sajFB::P64;
           P64[Sp - 16] = _sajFz::P64;
           P64[Sp - 8] = _sajFB::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sajIQ_info" {
     sat_sajIQ_info:
         const sat_sajIQ_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cal7I() //  [R1]
         { []
         }
     {offset
       cal7I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cal7S; else goto cal7R;
       cal7S: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cal7R: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cal7L_info;
           R2 = Hp - 7;
           _sajIN::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sajIN::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal7I_info" {
     block_cal7I_info:
         const _cal7I;
         const 2;
         const 30;
 },
 _cal7L() //  []
         { []
         }
     {offset
       cal7L: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cal7L_info" {
     block_cal7L_info:
         const _cal7L;
         const 1;
         const 30;
 },
 GHC.Event.Poll.new5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cal7U: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cal7V; else goto cal7W;
       cal7V: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cal7W: // global
           I64[Sp - 32] = block_cal3w_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new5_info" {
     GHC.Event.Poll.new5_info:
         const GHC.Event.Poll.new5_entry;
         const 0;
         const 2194728288270;
         const 17179869207;
         const SajSl_srt+72;
 },
 _cal3w() //  [R1]
         { []
         }
     {offset
       cal3w: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cal7Z; else goto cal7Y;
       cal7Z: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cal7Y: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_cal3B_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal3w_info" {
     block_cal3w_info:
         const _cal3w;
         const 3;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal3B() //  [R1]
         { []
         }
     {offset
       cal3B: // global
           I64[Sp] = block_cal3D_info;
           _sajFz::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sajFz::P64;
           if (R1 & 7 != 0) goto ualc0; else goto cal3E;
       ualc0: // global
           call _cal3D(R1) args: 0, res: 0, upd: 0;
       cal3E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal3B_info" {
     block_cal3B_info:
         const _cal3B;
         const 3;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal3D() //  [R1]
         { []
         }
     {offset
       cal3D: // global
           I64[Sp - 16] = block_cal3I_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal3D_info" {
     block_cal3D_info:
         const _cal3D;
         const 3;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal3I() //  [R1]
         { []
         }
     {offset
       cal3I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cal84; else goto cal83;
       cal84: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cal83: // global
           _sajFB::P64 = P64[Sp + 16];
           if (R1 == 0) goto calbl; else goto calb8;
       calbl: // global
           I64[Hp - 16] = sat_sajIQ_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sajFB::P64;
           I64[Sp] = block_calbi_info;
           R1 = Hp - 15;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
       calb8: // global
           Hp = Hp - 24;
           I64[Sp] = block_calb1_info;
           R1 = _sajFB::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal3I_info" {
     block_cal3I_info:
         const _cal3I;
         const 5;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calbi() //  [R1]
         { []
         }
     {offset
       calbi: // global
           I64[Sp] = block_calbk_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ualcq; else goto calbn;
       ualcq: // global
           call _calbk(R1) args: 0, res: 0, upd: 0;
       calbn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calbi_info" {
     block_calbi_info:
         const _calbi;
         const 389;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calbk() //  [R1]
         { []
         }
     {offset
       calbk: // global
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call _sajFG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calbk_info" {
     block_calbk_info:
         const _calbk;
         const 389;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calb1() //  [R1]
         { []
         }
     {offset
       calb1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calbb; else goto calba;
       calbb: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calba: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_calb4_info;
           R2 = Hp - 7;
           _sajIF::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = _sajIF::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calb1_info" {
     block_calb1_info:
         const _calb1;
         const 5;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calb4() //  []
         { []
         }
     {offset
       calb4: // global
           I64[Sp] = block_calb6_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto ualco; else goto calbd;
       ualco: // global
           call _calb6(R1) args: 0, res: 0, upd: 0;
       calbd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calb4_info" {
     block_calb4_info:
         const _calb4;
         const 133;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calb6() //  [R1]
         { []
         }
     {offset
       calb6: // global
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call _sajFG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calb6_info" {
     block_calb6_info:
         const _calb6;
         const 389;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _sajFG() //  []
         { []
         }
     {offset
       sajFG: // global
           _sajFL::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp - 8] = block_cal3P_info;
           R1 = _sajFL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualcs; else goto cal3Q;
       ualcs: // global
           call _cal3P(R1) args: 0, res: 0, upd: 0;
       cal3Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cal3P() //  [R1]
         { []
         }
     {offset
       cal3P: // global
           I64[Sp] = block_cal3U_info;
           _sajFO::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _sajFO::I64;
           if (R1 & 7 != 0) goto ualc1; else goto cal3V;
       ualc1: // global
           call _cal3U(R1) args: 0, res: 0, upd: 0;
       cal3V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal3P_info" {
     block_cal3P_info:
         const _cal3P;
         const 389;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal3U() //  [R1]
         { []
         }
     {offset
       cal3U: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cal89; else goto cal88;
       cal89: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cal88: // global
           _sajFS::P64 = P64[R1 + 7];
           _sajFR::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = I64[Sp + 24] << 3;
           I64[Sp - 8] = 0;
           P64[Sp] = _sajFS::P64;
           I64[Sp + 16] = _sajFR::I64;
           P64[Sp + 24] = Hp - 7;
           Sp = Sp - 16;
           call _cal74() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cal3U_info" {
     block_cal3U_info:
         const _cal3U;
         const 389;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal74() //  []
         { []
         }
     {offset
       cal74: // global
           Hp = Hp + 32;
           _sajHx::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cal9S; else goto cal9R;
       cal9S: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_cal73_info;
           R1 = _sajHx::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cal9R: // global
           _sajFC::P64 = P64[Sp + 24];
           if (%MO_S_Lt_W64(_sajHx::I64,
                            I64[Sp])) goto calaZ; else goto calb0;
       calaZ: // global
           _sajHA::I64 = I64[Sp + 32] + _sajHx::I64;
           _sajHD::I64 = %MO_SS_Conv_W32_W64(I32[_sajHA::I64]);
           _sajHH::I64 = %MO_SS_Conv_W16_W64(I16[_sajHA::I64 + 4]);
           if (I16[_sajHA::I64 + 6] == 0 :: W16) goto calaV; else goto cal9X;
       calaV: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _sajHD::I64;
           I64[Hp - 8] = _sajHH::I64;
           I64[Hp] = 0;
           I64[Sp - 8] = block_calaU_info;
           R4 = Hp - 23;
           R3 = _sajFC::P64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 8;
           call GHC.Event.Array.$wsnoc_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
       cal9X: // global
           I64[Hp - 24] = sat_sajHT_info;
           I64[Hp - 16] = _sajHD::I64;
           _cal7k::P64 = Hp - 23;
           Hp = Hp - 16;
           I64[Sp - 24] = block_cal9T_info;
           R3 = P64[Sp + 40];
           R2 = _cal7k::P64;
           R1 = lvl11_rajBk_closure;
           I64[Sp - 16] = _sajHD::I64;
           I64[Sp - 8] = _sajHH::I64;
           Sp = Sp - 24;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       calb0: // global
           Hp = Hp - 32;
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 32] = block_cal49_info;
           R1 = P64[_sajFC::P64 + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto ualc9; else goto cal4a;
       ualc9: // global
           call _cal49(R1) args: 0, res: 0, upd: 0;
       cal4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cal73() //  [R1]
         { []
         }
     {offset
       cal73: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cal74() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cal73_info" {
     block_cal73_info:
         const _cal73;
         const 1224;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calaU() //  []
         { []
         }
     {offset
       calaU: // global
           I64[Sp + 16] = I64[Sp + 16] + 8;
           Sp = Sp + 8;
           call _cal74() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calaU_info" {
     block_calaU_info:
         const _calaU;
         const 1224;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal9T() //  [R1]
         { []
         }
     {offset
       cal9T: // global
           I64[Sp] = block_cal9V_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ualcg; else goto cal9Z;
       ualcg: // global
           call _cal9V(R1) args: 0, res: 0, upd: 0;
       cal9Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal9T_info" {
     block_cal9T_info:
         const _cal9T;
         const 5066;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal9V() //  [R1]
         { []
         }
     {offset
       cal9V: // global
           if (R1 & 7 == 1) goto cala5; else goto calaa;
       cala5: // global
           R1 = lvl5_rajBe_closure;
           Sp = Sp + 88;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       calaa: // global
           I64[Sp] = block_cala8_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ualch; else goto calab;
       ualch: // global
           call _cala8(R1) args: 0, res: 0, upd: 0;
       calab: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal9V_info" {
     block_cal9V_info:
         const _cal9V;
         const 5066;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cala8() //  [R1]
         { []
         }
     {offset
       cala8: // global
           _sajI1::P64 = P64[R1 + 7];
           _sajI3::I64 = I64[Sp + 16];
           if (_sajI3::I64 != 0) goto calau; else goto calaP;
       calau: // global
           _sajI6::P64 = P64[P64[Sp + 48] + 8];
           I64[Sp - 8] = block_calai_info;
           R1 = _sajI6::P64;
           I64[Sp] = _sajI3::I64;
           P64[Sp + 16] = _sajI1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualci; else goto calaj;
       ualci: // global
           call _calai(R1) args: 0, res: 0, upd: 0;
       calaj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       calaP: // global
           I64[Sp + 16] = block_calaO_info;
           R3 = _sajI1::P64;
           R2 = P64[Sp + 64];
           R1 = lvl10_rajBj_closure;
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cala8_info" {
     block_cala8_info:
         const _cala8;
         const 5066;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calai() //  [R1]
         { []
         }
     {offset
       calai: // global
           I64[Sp - 8] = block_calan_info;
           _sajIa::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _sajIa::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualcj; else goto calao;
       ualcj: // global
           call _calan(R1) args: 0, res: 0, upd: 0;
       calao: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calai_info" {
     block_calai_info:
         const _calai;
         const 9931;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calan() //  [R1]
         { []
         }
     {offset
       calan: // global
           I64[Sp - 8] = block_calas_info;
           _sajId::P64 = P64[R1 + 7];
           _sajIc::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _sajId::P64;
           I64[Sp + 32] = _sajIc::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualck; else goto calax;
       ualck: // global
           call _calas(R1) args: 0, res: 0, upd: 0;
       calax: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calan_info" {
     block_calan_info:
         const _calan;
         const 19916;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calas() //  [R1]
         { []
         }
     {offset
       calas: // global
           _sajIa::I64 = I64[Sp + 16];
           _sajIf::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_sajIf::I64, 0)) goto calaM; else goto calaL;
       calaL: // global
           if (%MO_S_Ge_W64(_sajIf::I64,
                            _sajIa::I64)) goto calaM; else goto calaI;
       calaM: // global
           R3 = _sajIf::I64;
           R2 = _sajIa::I64;
           Sp = Sp + 112;
           call GHC.Event.Array.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
       calaI: // global
           _sajHx::I64 = I64[Sp + 56];
           _sajI3::I64 = I64[Sp + 24];
           _sajId::P64 = P64[Sp + 8];
           _sajIi::I64 = I64[Sp + 40] + (_sajIf::I64 << 3);
           I32[_sajIi::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 32]);
           I16[_sajIi::I64 + 4] = %MO_UU_Conv_W64_W16(_sajI3::I64);
           I16[_sajIi::I64 + 6] = 0 :: W16;
           call MO_Touch(_sajId::P64);
           I64[Sp + 56] = _sajHx::I64 + 8;
           Sp = Sp + 48;
           call _cal74() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calas_info" {
     block_calas_info:
         const _calas;
         const 40845;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _calaO() //  []
         { []
         }
     {offset
       calaO: // global
           I64[Sp + 16] = I64[Sp + 16] + 8;
           Sp = Sp + 8;
           call _cal74() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calaO_info" {
     block_calaO_info:
         const _calaO;
         const 1224;
         const 2160368549918;
         const SajSl_srt+72;
 },
 _cal49() //  [R1]
         { []
         }
     {offset
       cal49: // global
           I64[Sp - 8] = block_cal4e_info;
           _sajG3::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _sajG3::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualc3; else goto cal4f;
       ualc3: // global
           call _cal4e(R1) args: 0, res: 0, upd: 0;
       cal4f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal49_info" {
     block_cal49_info:
         const _cal49;
         const 3;
         const 90194313246;
         const SajSl_srt+88;
 },
 _cal4e() //  [R1]
         { []
         }
     {offset
       cal4e: // global
           I64[Sp - 8] = block_cal4l_info;
           _sajG7::P64 = P64[R1 + 7];
           _sajG6::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _sajG7::P64;
           I64[Sp + 24] = _sajG6::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualc4; else goto cal4m;
       ualc4: // global
           call _cal4l(R1) args: 0, res: 0, upd: 0;
       cal4m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal4e_info" {
     block_cal4e_info:
         const _cal4e;
         const 68;
         const 90194313246;
         const SajSl_srt+88;
 },
 _cal4l() //  [R1]
         { []
         }
     {offset
       cal4l: // global
           if (R1 & 7 == 1) goto cal8W; else goto cal94;
       cal8W: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cal8Z; else goto cal8Y;
       cal8Z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cal8Y: // global
           (_sajH9::I64) = call "ccall" arg hints:  [PtrHint, ,
                                                     ‘signed’]  result hints:  [‘signed’] poll(I64[Sp + 32], I64[Sp + 16], 0);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           _sajHa::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sajH9::I64));
           I64[Hp] = _sajHa::I64;
           I64[Sp + 32] = _sajHa::I64;
           Sp = Sp + 8;
           call _sajG8() args: 0, res: 0, upd: 0;
       cal94: // global
           I64[Sp] = block_cal92_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto ualc5; else goto cal95;
       ualc5: // global
           call _cal92(R1) args: 0, res: 0, upd: 0;
       cal95: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal4l_info" {
     block_cal4l_info:
         const _cal4l;
         const 645;
         const 90194313246;
         const SajSl_srt+88;
 },
 _cal92() //  [R1]
         { []
         }
     {offset
       cal92: // global
           _sajG3::I64 = I64[Sp + 16];
           _sajG6::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cal9t; else goto cal9J;
       cal9t: // global
           I64[Sp] = block_cal9o_info;
           R4 = (I64[R1 + 7] + 999999) / 1000000;
           R3 = _sajG3::I64;
           R2 = _sajG6::I64;
           call $wc_pollLoop_rajB9_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       cal9J: // global
           I64[Sp] = block_cal9F_info;
           R4 = (-1);
           R3 = _sajG3::I64;
           R2 = _sajG6::I64;
           call $wc_pollLoop_rajB9_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal92_info" {
     block_cal92_info:
         const _cal92;
         const 645;
         const 90194313246;
         const SajSl_srt+88;
 },
 _cal9o() //  [R1]
         { []
         }
     {offset
       cal9o: // global
           I64[Sp] = block_cal9q_info;
           _sajHn::P64 = R1;
           R1 = R1;
           P64[Sp + 32] = _sajHn::P64;
           if (R1 & 7 != 0) goto ualcc; else goto cal9v;
       ualcc: // global
           call _cal9q(R1) args: 0, res: 0, upd: 0;
       cal9v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal9o_info" {
     block_cal9o_info:
         const _cal9o;
         const 645;
         const 90194313246;
         const SajSl_srt+88;
 },
 _cal9q() //  [R1]
         { []
         }
     {offset
       cal9q: // global
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp + 8;
           call _sajG8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cal9q_info" {
     block_cal9q_info:
         const _cal9q;
         const 133;
         const 90194313246;
         const SajSl_srt+88;
 },
 _cal9F() //  [R1]
         { []
         }
     {offset
       cal9F: // global
           I64[Sp] = block_cal9H_info;
           _sajHt::P64 = R1;
           R1 = R1;
           P64[Sp + 32] = _sajHt::P64;
           if (R1 & 7 != 0) goto ualce; else goto cal9L;
       ualce: // global
           call _cal9H(R1) args: 0, res: 0, upd: 0;
       cal9L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal9F_info" {
     block_cal9F_info:
         const _cal9F;
         const 645;
         const 90194313246;
         const SajSl_srt+88;
 },
 _cal9H() //  [R1]
         { []
         }
     {offset
       cal9H: // global
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp + 8;
           call _sajG8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cal9H_info" {
     block_cal9H_info:
         const _cal9H;
         const 133;
         const 90194313246;
         const SajSl_srt+88;
 },
 _sajG8() //  []
         { []
         }
     {offset
       sajG8: // global
           _sajGT::I64 = I64[Sp + 24];
           if (_sajGT::I64 != (-1)) goto cal8s; else goto cal8U;
       cal8s: // global
           I64[Sp + 24] = _sajGT::I64;
           goto ualcu;
       cal8U: // global
           (_sajGX::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_sajGX::I64) == 4 :: W32) goto cal8Q; else goto cal8G;
       cal8Q: // global
           I64[Sp + 24] = 0;
           goto ualcu;
       ualcu: // global
           call _cal4H() args: 0, res: 0, upd: 0;
       cal8G: // global
           I64[Sp - 8] = block_cal8C_info;
           R2 = lvl3_rajBc_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cal8C() //  [R1]
         { []
         }
     {offset
       cal8C: // global
           I64[Sp] = block_cal8E_info;
           R1 = R1;
           if (R1 & 7 != 0) goto ualca; else goto cal8J;
       ualca: // global
           call _cal8E(R1) args: 0, res: 0, upd: 0;
       cal8J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cal8C_info" {
     block_cal8C_info:
         const _cal8C;
         const 645;
         const 4294967326;
         const SajSl_srt+120;
 },
 _cal8E() //  [R1]
         { []
         }
     {offset
       cal8E: // global
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp + 8;
           call _cal4H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cal8E_info" {
     block_cal8E_info:
         const _cal8E;
         const 645;
         const 4294967326;
         const SajSl_srt+120;
 },
 _cal4H() //  []
         { []
         }
     {offset
       cal4H: // global
           Hp = Hp + 24;
           _sajGe::I64 = I64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto cal8g; else goto cal8f;
       cal8g: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_cal4G_info;
           R1 = _sajGe::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cal8f: // global
           _cal3Z::P64 = P64[Sp + 16];
           _sajFp::P64 = P64[Sp + 32];
           call MO_Touch(P64[Sp]);
           if (_sajGe::I64 == 0) goto cal8p; else goto cal8l;
       cal8p: // global
           Hp = Hp - 24;
           R1 = GHC.Event.Poll.$fShowPollFd7_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cal8l: // global
           I64[Hp - 16] = sat_sajGO_info;
           P64[Hp - 8] = _sajFp::P64;
           I64[Hp] = _sajGe::I64;
           I64[Sp + 24] = block_cal8h_info;
           R4 = Hp - 13;
           R3 = lvl1_rajBa_closure+1;
           R2 = _cal3Z::P64;
           R1 = lvl6_rajBf_closure;
           I64[Sp + 32] = _sajGe::I64;
           Sp = Sp + 24;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _cal4G() //  [R1]
         { []
         }
     {offset
       cal4G: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _cal4H() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cal4G_info" {
     block_cal4G_info:
         const _cal4G;
         const 645;
         const 4294967326;
         const SajSl_srt+120;
 },
 _cal8h() //  [R1]
         { []
         }
     {offset
       cal8h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cal8o; else goto cal8n;
       cal8o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cal8n: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cal8h_info" {
     block_cal8h_info:
         const _cal8h;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.77252417 UTC

[section ""data" . GHC.Event.Poll.new4_closure" {
     GHC.Event.Poll.new4_closure:
         const GHC.Event.Poll.new4_info;
         const 0;
 },
 sat_sajJz_entry() //  [R1]
         { []
         }
     {offset
       calgE: // global
           if ((Sp + -40) < SpLim) (likely: False) goto calgI; else goto calgJ;
       calgI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calgJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_calgB_info;
           _sajIY::P64 = P64[R1 + 24];
           _sajIZ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _sajIY::P64;
           P64[Sp - 24] = _sajIZ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto ualma; else goto calgC;
       ualma: // global
           call _calgB(R1) args: 0, res: 0, upd: 0;
       calgC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sajJz_info" {
     sat_sajJz_info:
         const sat_sajJz_entry;
         const 3;
         const 15;
 },
 _calgB() //  [R1]
         { []
         }
     {offset
       calgB: // global
           I64[Sp] = block_calgH_info;
           _sajJ9::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _sajJ9::I64;
           if (R1 & 7 != 0) goto ualm9; else goto calgL;
       ualm9: // global
           call _calgH(R1) args: 0, res: 0, upd: 0;
       calgL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_calgB_info" {
     block_calgB_info:
         const _calgB;
         const 2;
         const 30;
 },
 _calgH() //  [R1]
         { []
         }
     {offset
       calgH: // global
           _sajIY::P64 = P64[Sp + 8];
           _sajJb::I64 = I64[R1 + 7];
           if (_sajJb::I64 & 1 == 0) goto calji; else goto calgV;
       calji: // global
           if (_sajJb::I64 & 2 == 0) goto calkB; else goto calju;
       calkB: // global
           I64[Sp + 8] = block_calkA_info;
           R1 = _sajIY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ualme; else goto calkD;
       ualme: // global
           call _calkA(R1) args: 0, res: 0, upd: 0;
       calkD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       calju: // global
           I64[Sp + 8] = block_caljs_info;
           R1 = _sajIY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ualmd; else goto caljw;
       ualmd: // global
           call _caljs(R1) args: 0, res: 0, upd: 0;
       caljw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       calgV: // global
           if (_sajJb::I64 & 2 == 0) goto calie; else goto calh7;
       calie: // global
           I64[Sp + 8] = block_calid_info;
           R1 = _sajIY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ualmc; else goto calig;
       ualmc: // global
           call _calid(R1) args: 0, res: 0, upd: 0;
       calig: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       calh7: // global
           I64[Sp + 8] = block_calh5_info;
           R1 = _sajIY::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto ualmb; else goto calh9;
       ualmb: // global
           call _calh5(R1) args: 0, res: 0, upd: 0;
       calh9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_calgH_info" {
     block_calgH_info:
         const _calgH;
         const 130;
         const 30;
 },
 _calkA() //  [R1]
         { []
         }
     {offset
       calkA: // global
           _sajJv::I64 = I64[R1 + 7];
           if (_sajJv::I64 & 1 == 0) goto calle; else goto calkN;
       calle: // global
           _sajJy::I64 = _sajJv::I64 & 2;
           if (_sajJy::I64 != 0) goto ualm6; else goto ualm5;
       ualm6: // global
           I64[Sp] = _sajJy::I64;
           call _callm() args: 0, res: 0, upd: 0;
       ualm5: // global
           I64[Sp] = _sajJy::I64;
           call _callw() args: 0, res: 0, upd: 0;
       calkN: // global
           _sajJx::I64 = _sajJv::I64 & 2;
           if (_sajJx::I64 != 0) goto ualm2; else goto ualm1;
       ualm2: // global
           I64[Sp] = _sajJx::I64;
           call _calkV() args: 0, res: 0, upd: 0;
       ualm1: // global
           I64[Sp] = _sajJx::I64;
           call _call5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calkA_info" {
     block_calkA_info:
         const _calkA;
         const 65;
         const 30;
 },
 _callm() //  []
         { []
         }
     {offset
       callm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto callt; else goto calls;
       callt: // global
           HpAlloc = 32;
           _sajJy::I64 = I64[Sp];
           I64[Sp] = block_calll_info;
           R1 = _sajJy::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calls: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calll() //  [R1]
         { []
         }
     {offset
       calll: // global
           I64[Sp] = R1;
           call _callm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calll_info" {
     block_calll_info:
         const _calll;
         const 65;
         const 30;
 },
 _callw() //  []
         { []
         }
     {offset
       callw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto callC; else goto callB;
       callC: // global
           HpAlloc = 32;
           _sajJy::I64 = I64[Sp];
           I64[Sp] = block_callv_info;
           R1 = _sajJy::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       callB: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _callv() //  [R1]
         { []
         }
     {offset
       callv: // global
           I64[Sp] = R1;
           call _callw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_callv_info" {
     block_callv_info:
         const _callv;
         const 65;
         const 30;
 },
 _calkV() //  []
         { []
         }
     {offset
       calkV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto call2; else goto call1;
       call2: // global
           HpAlloc = 32;
           _sajJx::I64 = I64[Sp];
           I64[Sp] = block_calkU_info;
           R1 = _sajJx::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       call1: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calkU() //  [R1]
         { []
         }
     {offset
       calkU: // global
           I64[Sp] = R1;
           call _calkV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calkU_info" {
     block_calkU_info:
         const _calkU;
         const 65;
         const 30;
 },
 _call5() //  []
         { []
         }
     {offset
       call5: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto callb; else goto calla;
       callb: // global
           HpAlloc = 32;
           _sajJx::I64 = I64[Sp];
           I64[Sp] = block_call4_info;
           R1 = _sajJx::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calla: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _call4() //  [R1]
         { []
         }
     {offset
       call4: // global
           I64[Sp] = R1;
           call _call5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_call4_info" {
     block_call4_info:
         const _call4;
         const 65;
         const 30;
 },
 _caljs() //  [R1]
         { []
         }
     {offset
       caljs: // global
           _sajJq::I64 = I64[R1 + 7];
           if (_sajJq::I64 & 1 == 0) goto calk7; else goto caljG;
       calk7: // global
           _sajJt::I64 = _sajJq::I64 & 2;
           if (_sajJt::I64 != 0) goto uallY; else goto uallX;
       uallY: // global
           I64[Sp] = _sajJt::I64;
           call _calkf() args: 0, res: 0, upd: 0;
       uallX: // global
           I64[Sp] = _sajJt::I64;
           call _calkp() args: 0, res: 0, upd: 0;
       caljG: // global
           _sajJs::I64 = _sajJq::I64 & 2;
           if (_sajJs::I64 != 0) goto uallU; else goto uallT;
       uallU: // global
           I64[Sp] = _sajJs::I64;
           call _caljO() args: 0, res: 0, upd: 0;
       uallT: // global
           I64[Sp] = _sajJs::I64;
           call _caljY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caljs_info" {
     block_caljs_info:
         const _caljs;
         const 65;
         const 30;
 },
 _calkf() //  []
         { []
         }
     {offset
       calkf: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calkm; else goto calkl;
       calkm: // global
           HpAlloc = 32;
           _sajJt::I64 = I64[Sp];
           I64[Sp] = block_calke_info;
           R1 = _sajJt::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calkl: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calke() //  [R1]
         { []
         }
     {offset
       calke: // global
           I64[Sp] = R1;
           call _calkf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calke_info" {
     block_calke_info:
         const _calke;
         const 65;
         const 30;
 },
 _calkp() //  []
         { []
         }
     {offset
       calkp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calkv; else goto calku;
       calkv: // global
           HpAlloc = 32;
           _sajJt::I64 = I64[Sp];
           I64[Sp] = block_calko_info;
           R1 = _sajJt::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calku: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calko() //  [R1]
         { []
         }
     {offset
       calko: // global
           I64[Sp] = R1;
           call _calkp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calko_info" {
     block_calko_info:
         const _calko;
         const 65;
         const 30;
 },
 _caljO() //  []
         { []
         }
     {offset
       caljO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caljV; else goto caljU;
       caljV: // global
           HpAlloc = 32;
           _sajJs::I64 = I64[Sp];
           I64[Sp] = block_caljN_info;
           R1 = _sajJs::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       caljU: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _caljN() //  [R1]
         { []
         }
     {offset
       caljN: // global
           I64[Sp] = R1;
           call _caljO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caljN_info" {
     block_caljN_info:
         const _caljN;
         const 65;
         const 30;
 },
 _caljY() //  []
         { []
         }
     {offset
       caljY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calk4; else goto calk3;
       calk4: // global
           HpAlloc = 32;
           _sajJs::I64 = I64[Sp];
           I64[Sp] = block_caljX_info;
           R1 = _sajJs::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calk3: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _caljX() //  [R1]
         { []
         }
     {offset
       caljX: // global
           I64[Sp] = R1;
           call _caljY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caljX_info" {
     block_caljX_info:
         const _caljX;
         const 65;
         const 30;
 },
 _calid() //  [R1]
         { []
         }
     {offset
       calid: // global
           _sajJk::I64 = I64[R1 + 7];
           if (_sajJk::I64 & 1 == 0) goto caliR; else goto caliq;
       caliR: // global
           _sajJn::I64 = _sajJk::I64 & 2;
           if (_sajJn::I64 != 0) goto uallQ; else goto uallP;
       uallQ: // global
           I64[Sp] = _sajJn::I64;
           call _caliZ() args: 0, res: 0, upd: 0;
       uallP: // global
           I64[Sp] = _sajJn::I64;
           call _calj9() args: 0, res: 0, upd: 0;
       caliq: // global
           _sajJm::I64 = _sajJk::I64 & 2;
           if (_sajJm::I64 != 0) goto uallM; else goto uallL;
       uallM: // global
           I64[Sp] = _sajJm::I64;
           call _caliy() args: 0, res: 0, upd: 0;
       uallL: // global
           I64[Sp] = _sajJm::I64;
           call _caliI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calid_info" {
     block_calid_info:
         const _calid;
         const 65;
         const 30;
 },
 _caliZ() //  []
         { []
         }
     {offset
       caliZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calj6; else goto calj5;
       calj6: // global
           HpAlloc = 32;
           _sajJn::I64 = I64[Sp];
           I64[Sp] = block_caliY_info;
           R1 = _sajJn::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calj5: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _caliY() //  [R1]
         { []
         }
     {offset
       caliY: // global
           I64[Sp] = R1;
           call _caliZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caliY_info" {
     block_caliY_info:
         const _caliY;
         const 65;
         const 30;
 },
 _calj9() //  []
         { []
         }
     {offset
       calj9: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caljf; else goto calje;
       caljf: // global
           HpAlloc = 32;
           _sajJn::I64 = I64[Sp];
           I64[Sp] = block_calj8_info;
           R1 = _sajJn::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calje: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calj8() //  [R1]
         { []
         }
     {offset
       calj8: // global
           I64[Sp] = R1;
           call _calj9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calj8_info" {
     block_calj8_info:
         const _calj8;
         const 65;
         const 30;
 },
 _caliy() //  []
         { []
         }
     {offset
       caliy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caliF; else goto caliE;
       caliF: // global
           HpAlloc = 32;
           _sajJm::I64 = I64[Sp];
           I64[Sp] = block_calix_info;
           R1 = _sajJm::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       caliE: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calix() //  [R1]
         { []
         }
     {offset
       calix: // global
           I64[Sp] = R1;
           call _caliy() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calix_info" {
     block_calix_info:
         const _calix;
         const 65;
         const 30;
 },
 _caliI() //  []
         { []
         }
     {offset
       caliI: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caliO; else goto caliN;
       caliO: // global
           HpAlloc = 32;
           _sajJm::I64 = I64[Sp];
           I64[Sp] = block_caliH_info;
           R1 = _sajJm::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       caliN: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _caliH() //  [R1]
         { []
         }
     {offset
       caliH: // global
           I64[Sp] = R1;
           call _caliI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caliH_info" {
     block_caliH_info:
         const _caliH;
         const 65;
         const 30;
 },
 _calh5() //  [R1]
         { []
         }
     {offset
       calh5: // global
           _sajJf::I64 = I64[R1 + 7];
           if (_sajJf::I64 & 1 == 0) goto calhK; else goto calhj;
       calhK: // global
           _sajJi::I64 = _sajJf::I64 & 2;
           if (_sajJi::I64 != 0) goto uallI; else goto uallH;
       uallI: // global
           I64[Sp] = _sajJi::I64;
           call _calhS() args: 0, res: 0, upd: 0;
       uallH: // global
           I64[Sp] = _sajJi::I64;
           call _cali2() args: 0, res: 0, upd: 0;
       calhj: // global
           _sajJh::I64 = _sajJf::I64 & 2;
           if (_sajJh::I64 != 0) goto uallE; else goto uallD;
       uallE: // global
           I64[Sp] = _sajJh::I64;
           call _calhr() args: 0, res: 0, upd: 0;
       uallD: // global
           I64[Sp] = _sajJh::I64;
           call _calhB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calh5_info" {
     block_calh5_info:
         const _calh5;
         const 65;
         const 30;
 },
 _calhS() //  []
         { []
         }
     {offset
       calhS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calhZ; else goto calhY;
       calhZ: // global
           HpAlloc = 32;
           _sajJi::I64 = I64[Sp];
           I64[Sp] = block_calhR_info;
           R1 = _sajJi::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calhY: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calhR() //  [R1]
         { []
         }
     {offset
       calhR: // global
           I64[Sp] = R1;
           call _calhS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calhR_info" {
     block_calhR_info:
         const _calhR;
         const 65;
         const 30;
 },
 _cali2() //  []
         { []
         }
     {offset
       cali2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cali8; else goto cali7;
       cali8: // global
           HpAlloc = 32;
           _sajJi::I64 = I64[Sp];
           I64[Sp] = block_cali1_info;
           R1 = _sajJi::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cali7: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _cali1() //  [R1]
         { []
         }
     {offset
       cali1: // global
           I64[Sp] = R1;
           call _cali2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cali1_info" {
     block_cali1_info:
         const _cali1;
         const 65;
         const 30;
 },
 _calhr() //  []
         { []
         }
     {offset
       calhr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calhy; else goto calhx;
       calhy: // global
           HpAlloc = 32;
           _sajJh::I64 = I64[Sp];
           I64[Sp] = block_calhq_info;
           R1 = _sajJh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calhx: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calhq() //  [R1]
         { []
         }
     {offset
       calhq: // global
           I64[Sp] = R1;
           call _calhr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calhq_info" {
     block_calhq_info:
         const _calhq;
         const 65;
         const 30;
 },
 _calhB() //  []
         { []
         }
     {offset
       calhB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calhH; else goto calhG;
       calhH: // global
           HpAlloc = 32;
           _sajJh::I64 = I64[Sp];
           I64[Sp] = block_calhA_info;
           R1 = _sajJh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       calhG: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _calhA() //  [R1]
         { []
         }
     {offset
       calhA: // global
           I64[Sp] = R1;
           call _calhB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calhA_info" {
     block_calhA_info:
         const _calhA;
         const 65;
         const 30;
 },
 sat_sajJD_entry() //  [R1, R2]
         { []
         }
     {offset
       calmL: // global
           if ((Sp + -32) < SpLim) (likely: False) goto calmN; else goto calmO;
       calmN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calmO: // global
           I64[Sp - 32] = block_calgs_info;
           _sajIX::P64 = P64[R1 + 6];
           _sajIY::P64 = P64[R1 + 14];
           _sajIZ::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _sajIX::P64;
           P64[Sp - 16] = _sajIY::P64;
           P64[Sp - 8] = _sajIZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ualmU; else goto calgt;
       ualmU: // global
           call _calgs(R1) args: 0, res: 0, upd: 0;
       calgt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sajJD_info" {
     sat_sajJD_info:
         const sat_sajJD_entry;
         const 3;
         const 4294967304;
         const 8589934597;
         const SajSl_srt+72;
 },
 _calgs() //  [R1]
         { []
         }
     {offset
       calgs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto calmR; else goto calmQ;
       calmR: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calmQ: // global
           _sajJ7::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_sajJz_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_calmM_info;
           R4 = Hp - 32;
           R3 = _sajJ7::P64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp + 24;
           call GHC.Event.Array.$wsnoc_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calgs_info" {
     block_calgs_info:
         const _calgs;
         const 3;
         const 4294967326;
         const SajSl_srt+72;
 },
 _calmM() //  []
         { []
         }
     {offset
       calmM: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calmM_info" {
     block_calmM_info:
         const _calmM;
         const 0;
         const 30;
 },
 GHC.Event.Poll.new4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       calmV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto calmW; else goto calmX;
       calmW: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.new4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calmX: // global
           I64[Sp - 32] = block_calgi_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ualn1; else goto calgj;
       ualn1: // global
           call _calgi(R1) args: 0, res: 0, upd: 0;
       calgj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new4_info" {
     GHC.Event.Poll.new4_info:
         const GHC.Event.Poll.new4_entry;
         const 0;
         const 2203318222862;
         const 21474836504;
         const SajSl_srt+72;
 },
 _calgi() //  [R1]
         { []
         }
     {offset
       calgi: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caln0; else goto calmZ;
       caln0: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calmZ: // global
           _sajJ2::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_sajJD_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R3 = Hp - 22;
           R2 = _sajJ2::P64;
           Sp = Sp + 32;
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calgi_info" {
     block_calgi_info:
         const _calgi;
         const 3;
         const 4294967326;
         const SajSl_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.833048782 UTC

[section ""data" . GHC.Event.Poll.new2_closure" {
     GHC.Event.Poll.new2_closure:
         const GHC.Event.Poll.new2_info;
 },
 GHC.Event.Poll.new2_entry() //  []
         { []
         }
     {offset
       calpV: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new2_info" {
     GHC.Event.Poll.new2_info:
         const GHC.Event.Poll.new2_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.838633458 UTC

[section ""data" . GHC.Event.Poll.new1_closure" {
     GHC.Event.Poll.new1_closure:
         const GHC.Event.Poll.new1_info;
         const 0;
 },
 GHC.Event.Poll.new1_entry() //  []
         { []
         }
     {offset
       calqs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calqt; else goto calqu;
       calqt: // global
           R1 = GHC.Event.Poll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       calqu: // global
           I64[Sp - 8] = block_calq7_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new1_info" {
     GHC.Event.Poll.new1_info:
         const GHC.Event.Poll.new1_entry;
         const 0;
         const 1928440315918;
         const 4294967299;
         const SajSl_srt+96;
 },
 _calq7() //  [R1]
         { []
         }
     {offset
       calq7: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto calqx; else goto calqw;
       calqx: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calqw: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_calqc_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calq7_info" {
     block_calq7_info:
         const _calq7;
         const 0;
         const 1378684502046;
         const SajSl_srt+96;
 },
 _calqc() //  [R1]
         { []
         }
     {offset
       calqc: // global
           I64[Sp - 8] = block_calqe_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calqc_info" {
     block_calqc_info:
         const _calqc;
         const 0;
         const 1378684502046;
         const SajSl_srt+96;
 },
 _calqe() //  [R1]
         { []
         }
     {offset
       calqe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calqB; else goto calqA;
       calqB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calqA: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_calqh_info;
           R2 = Hp - 7;
           _sajJS::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _sajJS::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calqe_info" {
     block_calqe_info:
         const _calqe;
         const 1;
         const 1378684502046;
         const SajSl_srt+96;
 },
 _calqh() //  []
         { []
         }
     {offset
       calqh: // global
           I64[Sp] = block_calqj_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calqh_info" {
     block_calqh_info:
         const _calqh;
         const 1;
         const 1378684502046;
         const SajSl_srt+96;
 },
 _calqj() //  [R1]
         { []
         }
     {offset
       calqj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto calqF; else goto calqE;
       calqF: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calqE: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_calqo_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calqj_info" {
     block_calqj_info:
         const _calqj;
         const 1;
         const 1378684502046;
         const SajSl_srt+96;
 },
 _calqo() //  [R1]
         { []
         }
     {offset
       calqo: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto calqI; else goto calqH;
       calqI: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calqH: // global
           I64[Hp - 64] = GHC.Event.Poll.Poll_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.Poll.new5_closure+4;
           P64[Hp - 16] = GHC.Event.Poll.new4_closure+5;
           P64[Hp - 8] = GHC.Event.Poll.new3_closure;
           P64[Hp] = GHC.Event.Poll.new2_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calqo_info" {
     block_calqo_info:
         const _calqo;
         const 1;
         const 1378684502046;
         const SajSl_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.85176343 UTC

[section ""data" . GHC.Event.Poll.new_closure" {
     GHC.Event.Poll.new_closure:
         const GHC.Event.Poll.new_info;
         const 0;
 },
 GHC.Event.Poll.new_entry() //  []
         { []
         }
     {offset
       calri: // global
           call GHC.Event.Poll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new_info" {
     GHC.Event.Poll.new_info:
         const GHC.Event.Poll.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SajSl_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.855825906 UTC

[section ""data" . GHC.Event.Poll.PollFd_closure" {
     GHC.Event.Poll.PollFd_closure:
         const GHC.Event.Poll.PollFd_info;
 },
 GHC.Event.Poll.PollFd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calru: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calry; else goto calrx;
       calry: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.PollFd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calrx: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.PollFd_info" {
     GHC.Event.Poll.PollFd_info:
         const GHC.Event.Poll.PollFd_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.859895127 UTC

[section ""data" . GHC.Event.Poll.Poll_closure" {
     GHC.Event.Poll.Poll_closure:
         const GHC.Event.Poll.Poll_info;
 },
 GHC.Event.Poll.Poll_entry() //  [R2, R3]
         { []
         }
     {offset
       calrJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calrN; else goto calrM;
       calrN: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.Poll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       calrM: // global
           I64[Hp - 16] = GHC.Event.Poll.Poll_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.Poll_info" {
     GHC.Event.Poll.Poll_info:
         const GHC.Event.Poll.Poll_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.863336768 UTC

[section ""cstring" . iakI7_str" {
     iakI7_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,111,108,108,46,80,111,108,108,70,100]
 },
 GHC.Event.Poll.PollFd_con_entry() //  [R1]
         { []
         }
     {offset
       calrT: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.PollFd_con_info" {
     GHC.Event.Poll.PollFd_con_info:
         const GHC.Event.Poll.PollFd_con_entry;
         const 12884901888;
         const 7;
         const iakI7_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.866375961 UTC

[section ""cstring" . iakI9_str" {
     iakI9_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,111,108,108,46,80,111,108,108]
 },
 GHC.Event.Poll.Poll_con_entry() //  [R1]
         { []
         }
     {offset
       calrZ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.Poll_con_info" {
     GHC.Event.Poll.Poll_con_info:
         const GHC.Event.Poll.Poll_con_entry;
         const 2;
         const 4;
         const iakI9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:19.86942363 UTC

[section ""relreadonly" . SajSl_srt" {
     SajSl_srt:
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.Poll.$w$cshowsPrec1_closure;
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure;
         const GHC.Event.Poll.$fShowPollFd_$cshow_closure;
         const GHC.Event.Poll.$fShowPollFd1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Event.Array.loop_closure;
         const GHC.Event.Array.removeAt_closure;
         const GHC.Event.Array.findIndex_closure;
         const GHC.Event.Array.$wsnoc_closure;
         const GHC.Event.Array.$wlvl_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Poll.new5_closure;
         const lvl3_rajBc_closure;
         const lvl5_rajBe_closure;
         const lvl6_rajBf_closure;
         const lvl10_rajBj_closure;
         const lvl11_rajBk_closure;
         const GHC.Event.Poll.new4_closure;
         const GHC.Event.Poll.new1_closure;
         const GHC.Event.Poll.new3_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.210062258 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:22.212713207 UTC

[section ""data" . GHC.Event.Poll.$WPollFd_closure" {
     GHC.Event.Poll.$WPollFd_closure:
         const GHC.Event.Poll.$WPollFd_info;
 },
 GHC.Event.Poll.$WPollFd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calAY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calBc; else goto calBd;
       calBc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$WPollFd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calBd: // global
           I64[Sp - 24] = block_calAV_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ualBk; else goto calAW;
       ualBk: // global
           call _calAV(R1) args: 0, res: 0, upd: 0;
       calAW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$WPollFd_info" {
     GHC.Event.Poll.$WPollFd_info:
         const GHC.Event.Poll.$WPollFd_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _calAV() //  [R1]
         { []
         }
     {offset
       calAV: // global
           I64[Sp] = block_calB1_info;
           _salsa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _salsa::I64;
           if (R1 & 7 != 0) goto ualBj; else goto calB2;
       ualBj: // global
           call _calB1(R1) args: 0, res: 0, upd: 0;
       calB2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calAV_info" {
     block_calAV_info:
         const _calAV;
         const 2;
         const 30;
 },
 _calB1() //  [R1]
         { []
         }
     {offset
       calB1: // global
           I64[Sp] = block_calB6_info;
           _salsc::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _salsc::I64;
           if (R1 & 7 != 0) goto ualBl; else goto calB7;
       ualBl: // global
           call _calB6(R1) args: 0, res: 0, upd: 0;
       calB7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calB1_info" {
     block_calB1_info:
         const _calB1;
         const 66;
         const 30;
 },
 _calB6() //  [R1]
         { []
         }
     {offset
       calB6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calBi; else goto calBh;
       calBi: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calBh: // global
           _salse::I64 = I64[R1 + 7];
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = I64[Sp + 16];
           I64[Hp] = _salse::I64;
           R1 = Hp - 23;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calB6_info" {
     block_calB6_info:
         const _calB6;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.221991947 UTC

[section ""data" . GHC.Event.Poll.$WPoll_closure" {
     GHC.Event.Poll.$WPoll_closure:
         const GHC.Event.Poll.$WPoll_info;
 },
 GHC.Event.Poll.$WPoll_entry() //  [R2, R3]
         { []
         }
     {offset
       calBR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calC0; else goto calC1;
       calC0: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$WPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       calC1: // global
           I64[Sp - 16] = block_calBO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ualC7; else goto calBP;
       ualC7: // global
           call _calBO(R1) args: 0, res: 0, upd: 0;
       calBP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$WPoll_info" {
     GHC.Event.Poll.$WPoll_info:
         const GHC.Event.Poll.$WPoll_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _calBO() //  [R1]
         { []
         }
     {offset
       calBO: // global
           I64[Sp] = block_calBU_info;
           _salsi::P64 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _salsi::P64;
           if (R1 & 7 != 0) goto ualC6; else goto calBV;
       ualC6: // global
           call _calBU(R1) args: 0, res: 0, upd: 0;
       calBV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calBO_info" {
     block_calBO_info:
         const _calBO;
         const 1;
         const 30;
 },
 _calBU() //  [R1]
         { []
         }
     {offset
       calBU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calC5; else goto calC4;
       calC5: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calC4: // global
           _salsk::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.Poll.Poll_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = _salsk::P64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calBU_info" {
     block_calBU_info:
         const _calBU;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.228585431 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd_$calignment_closure" {
     GHC.Event.Poll.$fStorablePollFd_$calignment_closure:
         const GHC.Event.Poll.$fStorablePollFd_$calignment_info;
 },
 GHC.Event.Poll.$fStorablePollFd_$calignment_entry() //  []
         { []
         }
     {offset
       calCu: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd_$calignment_info" {
     GHC.Event.Poll.$fStorablePollFd_$calignment_info:
         const GHC.Event.Poll.$fStorablePollFd_$calignment_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.23162325 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd7_closure" {
     GHC.Event.Poll.$fStorablePollFd7_closure:
         const GHC.Types.I#_con_info;
         const 8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.233558821 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd_$csizeOf_closure" {
     GHC.Event.Poll.$fStorablePollFd_$csizeOf_closure:
         const GHC.Event.Poll.$fStorablePollFd_$csizeOf_info;
 },
 GHC.Event.Poll.$fStorablePollFd_$csizeOf_entry() //  []
         { []
         }
     {offset
       calCH: // global
           R1 = GHC.Event.Poll.$fStorablePollFd7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd_$csizeOf_info" {
     GHC.Event.Poll.$fStorablePollFd_$csizeOf_info:
         const GHC.Event.Poll.$fStorablePollFd_$csizeOf_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.237943211 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd2_closure" {
     GHC.Event.Poll.$fStorablePollFd2_closure:
         const GHC.Event.Poll.$fStorablePollFd2_info;
 },
 GHC.Event.Poll.$fStorablePollFd2_entry() //  [R2]
         { []
         }
     {offset
       calCW: // global
           if ((Sp + -8) < SpLim) (likely: False) goto calD6; else goto calD7;
       calD6: // global
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calD7: // global
           I64[Sp - 8] = block_calCT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualDb; else goto calCU;
       ualDb: // global
           call _calCT(R1) args: 0, res: 0, upd: 0;
       calCU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd2_info" {
     GHC.Event.Poll.$fStorablePollFd2_info:
         const GHC.Event.Poll.$fStorablePollFd2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _calCT() //  [R1]
         { []
         }
     {offset
       calCT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calDa; else goto calD9;
       calDa: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calD9: // global
           _salsq::I64 = I64[R1 + 7];
           _salst::I64 = %MO_SS_Conv_W32_W64(I32[_salsq::I64]);
           _salsx::I64 = %MO_SS_Conv_W16_W64(I16[_salsq::I64 + 4]);
           _salsB::I64 = %MO_SS_Conv_W16_W64(I16[_salsq::I64 + 6]);
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _salst::I64;
           I64[Hp - 8] = _salsx::I64;
           I64[Hp] = _salsB::I64;
           R1 = Hp - 23;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calCT_info" {
     block_calCT_info:
         const _calCT;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.246811214 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd6_closure" {
     GHC.Event.Poll.$fStorablePollFd6_closure:
         const GHC.Event.Poll.$fStorablePollFd6_info;
 },
 GHC.Event.Poll.$fStorablePollFd6_entry() //  [R2, R3]
         { []
         }
     {offset
       calDv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calDQ; else goto calDR;
       calDQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       calDR: // global
           I64[Sp - 16] = block_calDs_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ualDX; else goto calDt;
       ualDX: // global
           call _calDs(R1) args: 0, res: 0, upd: 0;
       calDt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd6_info" {
     GHC.Event.Poll.$fStorablePollFd6_info:
         const GHC.Event.Poll.$fStorablePollFd6_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _calDs() //  [R1]
         { []
         }
     {offset
       calDs: // global
           I64[Sp] = block_calDy_info;
           _salsH::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _salsH::I64;
           if (R1 & 7 != 0) goto ualDW; else goto calDz;
       ualDW: // global
           call _calDy(R1) args: 0, res: 0, upd: 0;
       calDz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calDs_info" {
     block_calDs_info:
         const _calDs;
         const 1;
         const 30;
 },
 _calDy() //  [R1]
         { []
         }
     {offset
       calDy: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calDV; else goto calDU;
       calDV: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calDU: // global
           _salsK::I64 = I64[Sp + 8] + (I64[R1 + 7] << 3);
           _salsO::I64 = %MO_SS_Conv_W32_W64(I32[_salsK::I64]);
           _salsS::I64 = %MO_SS_Conv_W16_W64(I16[_salsK::I64 + 4]);
           _salsW::I64 = %MO_SS_Conv_W16_W64(I16[_salsK::I64 + 6]);
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _salsO::I64;
           I64[Hp - 8] = _salsS::I64;
           I64[Hp] = _salsW::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calDy_info" {
     block_calDy_info:
         const _calDy;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.254660609 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd4_closure" {
     GHC.Event.Poll.$fStorablePollFd4_closure:
         const GHC.Event.Poll.$fStorablePollFd4_info;
 },
 GHC.Event.Poll.$fStorablePollFd4_entry() //  [R2, R3]
         { []
         }
     {offset
       calEo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calEG; else goto calEH;
       calEG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       calEH: // global
           I64[Sp - 16] = block_calEl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ualEN; else goto calEm;
       ualEN: // global
           call _calEl(R1) args: 0, res: 0, upd: 0;
       calEm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd4_info" {
     GHC.Event.Poll.$fStorablePollFd4_info:
         const GHC.Event.Poll.$fStorablePollFd4_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _calEl() //  [R1]
         { []
         }
     {offset
       calEl: // global
           I64[Sp] = block_calEr_info;
           _salt2::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _salt2::I64;
           if (R1 & 7 != 0) goto ualEM; else goto calEs;
       ualEM: // global
           call _calEr(R1) args: 0, res: 0, upd: 0;
       calEs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calEl_info" {
     block_calEl_info:
         const _calEl;
         const 1;
         const 30;
 },
 _calEr() //  [R1]
         { []
         }
     {offset
       calEr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calEL; else goto calEK;
       calEL: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calEK: // global
           _salt5::I64 = I64[Sp + 8] + I64[R1 + 7];
           _salt8::I64 = %MO_SS_Conv_W32_W64(I32[_salt5::I64]);
           _saltc::I64 = %MO_SS_Conv_W16_W64(I16[_salt5::I64 + 4]);
           _saltg::I64 = %MO_SS_Conv_W16_W64(I16[_salt5::I64 + 6]);
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _salt8::I64;
           I64[Hp - 8] = _saltc::I64;
           I64[Hp] = _saltg::I64;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calEr_info" {
     block_calEr_info:
         const _calEr;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.262526881 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd1_closure" {
     GHC.Event.Poll.$fStorablePollFd1_closure:
         const GHC.Event.Poll.$fStorablePollFd1_info;
 },
 GHC.Event.Poll.$fStorablePollFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       calFe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calFi; else goto calFj;
       calFi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       calFj: // global
           I64[Sp - 16] = block_calFb_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ualFv; else goto calFc;
       ualFv: // global
           call _calFb(R1) args: 0, res: 0, upd: 0;
       calFc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd1_info" {
     GHC.Event.Poll.$fStorablePollFd1_info:
         const GHC.Event.Poll.$fStorablePollFd1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _calFb() //  [R1]
         { []
         }
     {offset
       calFb: // global
           I64[Sp] = block_calFh_info;
           _saltm::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saltm::I64;
           if (R1 & 7 != 0) goto ualFu; else goto calFl;
       ualFu: // global
           call _calFh(R1) args: 0, res: 0, upd: 0;
       calFl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calFb_info" {
     block_calFb_info:
         const _calFb;
         const 1;
         const 30;
 },
 _calFh() //  [R1]
         { []
         }
     {offset
       calFh: // global
           _saltm::I64 = I64[Sp + 8];
           _saltp::I64 = I64[R1 + 15];
           _saltq::I64 = I64[R1 + 23];
           I32[_saltm::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I16[_saltm::I64 + 4] = %MO_UU_Conv_W64_W16(_saltp::I64);
           I16[_saltm::I64 + 6] = %MO_UU_Conv_W64_W16(_saltq::I64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calFh_info" {
     block_calFh_info:
         const _calFh;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.270300295 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd5_closure" {
     GHC.Event.Poll.$fStorablePollFd5_closure:
         const GHC.Event.Poll.$fStorablePollFd5_info;
 },
 GHC.Event.Poll.$fStorablePollFd5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calFX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calG6; else goto calG7;
       calG6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calG7: // global
           I64[Sp - 24] = block_calFU_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ualGq; else goto calFV;
       ualGq: // global
           call _calFU(R1) args: 0, res: 0, upd: 0;
       calFV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd5_info" {
     GHC.Event.Poll.$fStorablePollFd5_info:
         const GHC.Event.Poll.$fStorablePollFd5_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _calFU() //  [R1]
         { []
         }
     {offset
       calFU: // global
           I64[Sp] = block_calG0_info;
           _saltB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saltB::I64;
           if (R1 & 7 != 0) goto ualGp; else goto calG1;
       ualGp: // global
           call _calG0(R1) args: 0, res: 0, upd: 0;
       calG1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calFU_info" {
     block_calFU_info:
         const _calFU;
         const 2;
         const 30;
 },
 _calG0() //  [R1]
         { []
         }
     {offset
       calG0: // global
           I64[Sp] = block_calG5_info;
           _saltD::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saltD::I64;
           if (R1 & 7 != 0) goto ualGr; else goto calGa;
       ualGr: // global
           call _calG5(R1) args: 0, res: 0, upd: 0;
       calGa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calG0_info" {
     block_calG0_info:
         const _calG0;
         const 66;
         const 30;
 },
 _calG5() //  [R1]
         { []
         }
     {offset
       calG5: // global
           _saltG::I64 = I64[R1 + 15];
           _saltH::I64 = I64[R1 + 23];
           _saltI::I64 = I64[Sp + 8] + (I64[Sp + 16] << 3);
           I32[_saltI::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I16[_saltI::I64 + 4] = %MO_UU_Conv_W64_W16(_saltG::I64);
           I16[_saltI::I64 + 6] = %MO_UU_Conv_W64_W16(_saltH::I64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calG5_info" {
     block_calG5_info:
         const _calG5;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.280014091 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd3_closure" {
     GHC.Event.Poll.$fStorablePollFd3_closure:
         const GHC.Event.Poll.$fStorablePollFd3_info;
 },
 GHC.Event.Poll.$fStorablePollFd3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calH0: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calH9; else goto calHa;
       calH9: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fStorablePollFd3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calHa: // global
           I64[Sp - 24] = block_calGX_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ualHq; else goto calGY;
       ualHq: // global
           call _calGX(R1) args: 0, res: 0, upd: 0;
       calGY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fStorablePollFd3_info" {
     GHC.Event.Poll.$fStorablePollFd3_info:
         const GHC.Event.Poll.$fStorablePollFd3_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _calGX() //  [R1]
         { []
         }
     {offset
       calGX: // global
           I64[Sp] = block_calH3_info;
           _saltU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saltU::I64;
           if (R1 & 7 != 0) goto ualHp; else goto calH4;
       ualHp: // global
           call _calH3(R1) args: 0, res: 0, upd: 0;
       calH4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calGX_info" {
     block_calGX_info:
         const _calGX;
         const 2;
         const 30;
 },
 _calH3() //  [R1]
         { []
         }
     {offset
       calH3: // global
           I64[Sp] = block_calH8_info;
           _saltW::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saltW::I64;
           if (R1 & 7 != 0) goto ualHr; else goto calHd;
       ualHr: // global
           call _calH8(R1) args: 0, res: 0, upd: 0;
       calHd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calH3_info" {
     block_calH3_info:
         const _calH3;
         const 66;
         const 30;
 },
 _calH8() //  [R1]
         { []
         }
     {offset
       calH8: // global
           _saltZ::I64 = I64[R1 + 15];
           _salu0::I64 = I64[R1 + 23];
           _salu1::I64 = I64[Sp + 8] + I64[Sp + 16];
           I32[_salu1::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I16[_salu1::I64 + 4] = %MO_UU_Conv_W64_W16(_saltZ::I64);
           I16[_salu1::I64 + 6] = %MO_UU_Conv_W64_W16(_salu0::I64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calH8_info" {
     block_calH8_info:
         const _calH8;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.288682339 UTC

[section ""data" . GHC.Event.Poll.$fStorablePollFd_closure" {
     GHC.Event.Poll.$fStorablePollFd_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.Poll.$fStorablePollFd_$csizeOf_closure+1;
         const GHC.Event.Poll.$fStorablePollFd_$calignment_closure+1;
         const GHC.Event.Poll.$fStorablePollFd6_closure+3;
         const GHC.Event.Poll.$fStorablePollFd5_closure+4;
         const GHC.Event.Poll.$fStorablePollFd4_closure+3;
         const GHC.Event.Poll.$fStorablePollFd3_closure+4;
         const GHC.Event.Poll.$fStorablePollFd2_closure+2;
         const GHC.Event.Poll.$fStorablePollFd1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.290512288 UTC

[section ""data" . GHC.Event.Poll.$fStorableEvent_closure" {
     GHC.Event.Poll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const Foreign.Storable.$fStorableInt16_$calignment_closure+1;
         const Foreign.Storable.$fStorableInt16_$calignment_closure+1;
         const GHC.Storable.readInt16OffPtr1_closure+3;
         const GHC.Storable.writeInt16OffPtr1_closure+4;
         const Foreign.Storable.$fStorableInt9_closure+3;
         const Foreign.Storable.$fStorableInt7_closure+4;
         const Foreign.Storable.$fStorableInt6_closure+2;
         const Foreign.Storable.$fStorableInt5_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.292194236 UTC

[section ""cstring" . GHC.Event.Poll.$fShowEvent2_bytes" {
     GHC.Event.Poll.$fShowEvent2_bytes:
         I8[] [69,118,101,110,116,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.297773785 UTC

[section ""data" . GHC.Event.Poll.$w$cshowsPrec_closure" {
     GHC.Event.Poll.$w$cshowsPrec_closure:
         const GHC.Event.Poll.$w$cshowsPrec_info;
 },
 sat_salug_entry() //  [R1]
         { []
         }
     {offset
       calI9: // global
           if ((Sp + -32) < SpLim) (likely: False) goto calIf; else goto calIg;
       calIf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calIg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_calI6_info;
           _salu9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _salu9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ualIl; else goto calI7;
       ualIl: // global
           call _calI6(R1) args: 0, res: 0, upd: 0;
       calI7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_salug_info" {
     sat_salug_info:
         const sat_salug_entry;
         const 2;
         const 18;
 },
 _calI6() //  [R1]
         { []
         }
     {offset
       calI6: // global
           _salu9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_calIc_info;
           R4 = _salu9::P64;
           R3 = I64[R1 + 7];
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_calI6_info" {
     block_calI6_info:
         const _calI6;
         const 1;
         const 30;
 },
 _calIc() //  [R1, R2]
         { []
         }
     {offset
       calIc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calIk; else goto calIj;
       calIk: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       calIj: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_calIc_info" {
     block_calIc_info:
         const _calIc;
         const 0;
         const 30;
 },
 sat_salun_entry() //  [R1]
         { []
         }
     {offset
       calIy: // global
           if ((Sp + -32) < SpLim) (likely: False) goto calIF; else goto calIG;
       calIF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calIG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_calIv_info;
           _salu9::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _salu9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto ualIN; else goto calIw;
       ualIN: // global
           call _calIv(R1) args: 0, res: 0, upd: 0;
       calIw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_salun_info" {
     sat_salun_info:
         const sat_salun_entry;
         const 2;
         const 18;
 },
 _calIv() //  [R1]
         { []
         }
     {offset
       calIv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calIJ; else goto calII;
       calIJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       calII: // global
           _salui::I64 = I64[R1 + 7];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_calIC_info;
           R4 = Hp - 14;
           R3 = _salui::I64;
           R2 = 11;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_calIv_info" {
     block_calIv_info:
         const _calIv;
         const 1;
         const 30;
 },
 _calIC() //  [R1, R2]
         { []
         }
     {offset
       calIC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calIM; else goto calIL;
       calIM: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       calIL: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_calIC_info" {
     block_calIC_info:
         const _calIC;
         const 0;
         const 30;
 },
 sat_saluo_entry() //  [R1]
         { []
         }
     {offset
       calIO: // global
           _saluo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto calIP; else goto calIQ;
       calIQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calIS; else goto calIR;
       calIS: // global
           HpAlloc = 32;
           goto calIP;
       calIP: // global
           R1 = _saluo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calIR: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saluo::P64;
           _salu8::P64 = P64[_saluo::P64 + 16];
           _salu9::P64 = P64[_saluo::P64 + 24];
           I64[Hp - 24] = sat_salun_info;
           P64[Hp - 8] = _salu8::P64;
           P64[Hp] = _salu9::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.Poll.$fShowEvent2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluo_info" {
     sat_saluo_info:
         const sat_saluo_entry;
         const 2;
         const 18;
 },
 GHC.Event.Poll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calIW: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto calJ0; else goto calIZ;
       calJ0: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calIZ: // global
           if (%MO_S_Lt_W64(R2, 11)) goto calIU; else goto calIV;
       calIU: // global
           I64[Hp - 48] = sat_salug_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _calI2::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _calI2::P64;
           R2 = GHC.Event.Poll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       calIV: // global
           I64[Hp - 48] = sat_saluo_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$w$cshowsPrec_info" {
     GHC.Event.Poll.$w$cshowsPrec_info:
         const GHC.Event.Poll.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.3142414 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.Poll.$fShowEvent_$cshowsPrec_info;
 },
 GHC.Event.Poll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calJY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calJZ; else goto calK0;
       calJZ: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calK0: // global
           I64[Sp - 24] = block_calJV_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ualK4; else goto calJW;
       ualK4: // global
           call _calJV(R1) args: 0, res: 0, upd: 0;
       calJW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent_$cshowsPrec_info" {
     GHC.Event.Poll.$fShowEvent_$cshowsPrec_info:
         const GHC.Event.Poll.$fShowEvent_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _calJV() //  [R1]
         { []
         }
     {offset
       calJV: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calJV_info" {
     block_calJV_info:
         const _calJV;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.32093364 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_$cshow_closure" {
     GHC.Event.Poll.$fShowEvent_$cshow_closure:
         const GHC.Event.Poll.$fShowEvent_$cshow_info;
 },
 sat_saluA_entry() //  [R1]
         { []
         }
     {offset
       calKq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calKw; else goto calKx;
       calKw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calKx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_calKn_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ualKC; else goto calKo;
       ualKC: // global
           call _calKn(R1) args: 0, res: 0, upd: 0;
       calKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluA_info" {
     sat_saluA_info:
         const sat_saluA_entry;
         const 1;
         const 16;
 },
 _calKn() //  [R1]
         { []
         }
     {offset
       calKn: // global
           I64[Sp] = block_calKt_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 7];
           R2 = 11;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_calKn_info" {
     block_calKn_info:
         const _calKn;
         const 0;
         const 30;
 },
 _calKt() //  [R1, R2]
         { []
         }
     {offset
       calKt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calKB; else goto calKA;
       calKB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       calKA: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_calKt_info" {
     block_calKt_info:
         const _calKt;
         const 0;
         const 30;
 },
 GHC.Event.Poll.$fShowEvent_$cshow_entry() //  [R2]
         { []
         }
     {offset
       calKD: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calKH; else goto calKG;
       calKH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calKG: // global
           I64[Hp - 16] = sat_saluA_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.Poll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent_$cshow_info" {
     GHC.Event.Poll.$fShowEvent_$cshow_info:
         const GHC.Event.Poll.$fShowEvent_$cshow_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.329437392 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent1_closure" {
     GHC.Event.Poll.$fShowEvent1_closure:
         const GHC.Event.Poll.$fShowEvent1_info;
 },
 GHC.Event.Poll.$fShowEvent1_entry() //  [R2, R3]
         { []
         }
     {offset
       calL8: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent1_info" {
     GHC.Event.Poll.$fShowEvent1_info:
         const GHC.Event.Poll.$fShowEvent1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.332638049 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_$cshowList_closure" {
     GHC.Event.Poll.$fShowEvent_$cshowList_closure:
         const GHC.Event.Poll.$fShowEvent_$cshowList_info;
 },
 GHC.Event.Poll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       calLj: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Poll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowEvent_$cshowList_info" {
     GHC.Event.Poll.$fShowEvent_$cshowList_info:
         const GHC.Event.Poll.$fShowEvent_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.335919147 UTC

[section ""data" . GHC.Event.Poll.$fShowEvent_closure" {
     GHC.Event.Poll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Poll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.Poll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.Poll.$fShowEvent_$cshowList_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.337604343 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd6_bytes" {
     GHC.Event.Poll.$fShowPollFd6_bytes:
         I8[] [80,111,108,108,70,100,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.339234961 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd5_bytes" {
     GHC.Event.Poll.$fShowPollFd5_bytes:
         I8[] [112,102,100,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.340842032 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd4_bytes" {
     GHC.Event.Poll.$fShowPollFd4_bytes:
         I8[] [112,102,100,69,118,101,110,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.342479603 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd3_bytes" {
     GHC.Event.Poll.$fShowPollFd3_bytes:
         I8[] [112,102,100,82,101,118,101,110,116,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.344158606 UTC

[section ""cstring" . GHC.Event.Poll.$fShowPollFd2_bytes" {
     GHC.Event.Poll.$fShowPollFd2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.353202531 UTC

[section ""data" . GHC.Event.Poll.$w$cshowsPrec1_closure" {
     GHC.Event.Poll.$w$cshowsPrec1_closure:
         const GHC.Event.Poll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.Poll.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       calLx: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saluO_entry() //  [R1]
         { []
         }
     {offset
       calMg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calMh; else goto calMi;
       calMh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMi: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.Poll.$fShowPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluO_info" {
     sat_saluO_info:
         const sat_saluO_entry;
         const 1;
         const 16;
 },
 sat_saluP_entry() //  [R1]
         { []
         }
     {offset
       calMk: // global
           _saluP::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto calMl; else goto calMm;
       calMm: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto calMo; else goto calMn;
       calMo: // global
           HpAlloc = 40;
           goto calMl;
       calMl: // global
           R1 = _saluP::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saluP::P64;
           _saluL::P64 = P64[_saluP::P64 + 16];
           _saluI::I64 = I64[_saluP::P64 + 24];
           I64[Hp - 32] = sat_saluO_info;
           P64[Hp - 16] = _saluL::P64;
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _saluI::I64;
           R4 = Hp - 32;
           R3 = Hp - 7;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluP_info" {
     sat_saluP_info:
         const sat_saluP_entry;
         const 4294967297;
         const 19;
 },
 sat_saluQ_entry() //  [R1]
         { []
         }
     {offset
       calMp: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calMt; else goto calMs;
       calMt: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMs: // global
           _saluL::P64 = P64[R1 + 16];
           _saluI::I64 = I64[R1 + 24];
           I64[Hp - 24] = sat_saluP_info;
           P64[Hp - 8] = _saluL::P64;
           I64[Hp] = _saluI::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Poll.$fShowPollFd3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saluQ_info" {
     sat_saluQ_info:
         const sat_saluQ_entry;
         const 4294967297;
         const 19;
 },
 sat_saluR_entry() //  [R1]
         { []
         }
     {offset
       calMu: // global
           _saluR::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto calMv; else goto calMw;
       calMw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto calMy; else goto calMx;
       calMy: // global
           HpAlloc = 32;
           goto calMv;
       calMv: // global
           R1 = _saluR::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saluR::P64;
           _saluL::P64 = P64[_saluR::P64 + 16];
           _saluI::I64 = I64[_saluR::P64 + 24];
           I64[Hp - 24] = sat_saluQ_info;
           P64[Hp - 8] = _saluL::P64;
           I64[Hp] = _saluI::I64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluR_info" {
     sat_saluR_info:
         const sat_saluR_entry;
         const 4294967297;
         const 4294967315;
         const SalNx_srt;
 },
 sat_saluS_entry() //  [R1]
         { []
         }
     {offset
       calMA: // global
           _saluS::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto calMB; else goto calMC;
       calMC: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto calME; else goto calMD;
       calME: // global
           HpAlloc = 48;
           goto calMB;
       calMB: // global
           R1 = _saluS::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saluS::P64;
           _saluL::P64 = P64[_saluS::P64 + 16];
           _saluH::I64 = I64[_saluS::P64 + 24];
           _saluI::I64 = I64[_saluS::P64 + 32];
           I64[Hp - 40] = sat_saluR_info;
           P64[Hp - 24] = _saluL::P64;
           I64[Hp - 16] = _saluI::I64;
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _saluH::I64;
           R4 = Hp - 40;
           R3 = Hp - 7;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.Poll.$w$cshowsPrec_entry(R4,
                                                   R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluS_info" {
     sat_saluS_info:
         const sat_saluS_entry;
         const 8589934593;
         const 4294967311;
         const SalNx_srt;
 },
 sat_saluT_entry() //  [R1]
         { []
         }
     {offset
       calMF: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto calMJ; else goto calMI;
       calMJ: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMI: // global
           _saluL::P64 = P64[R1 + 16];
           _saluH::I64 = I64[R1 + 24];
           _saluI::I64 = I64[R1 + 32];
           I64[Hp - 32] = sat_saluS_info;
           P64[Hp - 16] = _saluL::P64;
           I64[Hp - 8] = _saluH::I64;
           I64[Hp] = _saluI::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Poll.$fShowPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saluT_info" {
     sat_saluT_info:
         const sat_saluT_entry;
         const 8589934593;
         const 4294967311;
         const SalNx_srt;
 },
 sat_saluU_entry() //  [R1]
         { []
         }
     {offset
       calMK: // global
           _saluU::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto calML; else goto calMM;
       calMM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto calMO; else goto calMN;
       calMO: // global
           HpAlloc = 40;
           goto calML;
       calML: // global
           R1 = _saluU::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saluU::P64;
           _saluL::P64 = P64[_saluU::P64 + 16];
           _saluH::I64 = I64[_saluU::P64 + 24];
           _saluI::I64 = I64[_saluU::P64 + 32];
           I64[Hp - 32] = sat_saluT_info;
           P64[Hp - 16] = _saluL::P64;
           I64[Hp - 8] = _saluH::I64;
           I64[Hp] = _saluI::I64;
           R3 = Hp - 32;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluU_info" {
     sat_saluU_info:
         const sat_saluU_entry;
         const 8589934593;
         const 4294967311;
         const SalNx_srt;
 },
 sat_saluY_entry() //  [R1]
         { []
         }
     {offset
       calMS: // global
           _saluY::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto calMT; else goto calMU;
       calMU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto calMW; else goto calMV;
       calMW: // global
           HpAlloc = 40;
           goto calMT;
       calMT: // global
           R1 = _saluY::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calMV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saluY::P64;
           _saluL::P64 = P64[_saluY::P64 + 16];
           _saluG::I64 = I64[_saluY::P64 + 24];
           _saluH::I64 = I64[_saluY::P64 + 32];
           _saluI::I64 = I64[_saluY::P64 + 40];
           I64[Hp - 32] = sat_saluU_info;
           P64[Hp - 16] = _saluL::P64;
           I64[Hp - 8] = _saluH::I64;
           I64[Hp] = _saluI::I64;
           I64[Sp - 24] = block_calMP_info;
           R4 = Hp - 32;
           R3 = _saluG::I64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluY_info" {
     sat_saluY_info:
         const sat_saluY_entry;
         const 12884901889;
         const 4294967311;
         const SalNx_srt;
 },
 _calMP() //  [R1, R2]
         { []
         }
     {offset
       calMP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calMZ; else goto calMY;
       calMZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       calMY: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_calMP_info" {
     block_calMP_info:
         const _calMP;
         const 0;
         const 30;
 },
 sat_saluZ_entry() //  [R1]
         { []
         }
     {offset
       calN0: // global
           _saluZ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto calN1; else goto calN2;
       calN2: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto calN4; else goto calN3;
       calN4: // global
           HpAlloc = 48;
           goto calN1;
       calN1: // global
           R1 = _saluZ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calN3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saluZ::P64;
           _saluL::P64 = P64[_saluZ::P64 + 16];
           _saluG::I64 = I64[_saluZ::P64 + 24];
           _saluH::I64 = I64[_saluZ::P64 + 32];
           _saluI::I64 = I64[_saluZ::P64 + 40];
           I64[Hp - 40] = sat_saluY_info;
           P64[Hp - 24] = _saluL::P64;
           I64[Hp - 16] = _saluG::I64;
           I64[Hp - 8] = _saluH::I64;
           I64[Hp] = _saluI::I64;
           R3 = Hp - 40;
           R2 = GHC.Event.Poll.$fShowPollFd5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saluZ_info" {
     sat_saluZ_info:
         const sat_saluZ_entry;
         const 12884901889;
         const 4294967311;
         const SalNx_srt;
 },
 p_saluK_entry() //  [R1, R2]
         { []
         }
     {offset
       calN5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto calN9; else goto calN8;
       calN9: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calN8: // global
           _saluG::I64 = I64[R1 + 7];
           _saluH::I64 = I64[R1 + 15];
           _saluI::I64 = I64[R1 + 23];
           I64[Hp - 40] = sat_saluZ_info;
           P64[Hp - 24] = R2;
           I64[Hp - 16] = _saluG::I64;
           I64[Hp - 8] = _saluH::I64;
           I64[Hp] = _saluI::I64;
           R3 = Hp - 40;
           R2 = GHC.Event.Poll.$fShowPollFd6_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_saluK_info" {
     p_saluK_info:
         const p_saluK_entry;
         const 12884901888;
         const 4294967304;
         const 4294967301;
         const SalNx_srt;
 },
 sat_salv2_entry() //  [R1]
         { []
         }
     {offset
       calNj: // global
           _salv2::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto calNk; else goto calNl;
       calNl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto calNn; else goto calNm;
       calNn: // global
           HpAlloc = 24;
           goto calNk;
       calNk: // global
           R1 = _salv2::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calNm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _salv2::P64;
           _saluJ::P64 = P64[_salv2::P64 + 16];
           _saluK::P64 = P64[_salv2::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _saluJ::P64;
           R2 = Hp - 14;
           R1 = _saluK::P64;
           Sp = Sp - 16;
           call p_saluK_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_salv2_info" {
     sat_salv2_info:
         const sat_salv2_entry;
         const 2;
         const 4294967314;
         const SalNx_srt;
 },
 GHC.Event.Poll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       calNr: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto calNv; else goto calNu;
       calNv: // global
           HpAlloc = 88;
           R1 = GHC.Event.Poll.$w$cshowsPrec1_closure;
           I64[Sp - 40] = R2;
           I64[Sp - 32] = R3;
           I64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 48, res: 0, upd: 8;
       calNu: // global
           I64[Hp - 80] = p_saluK_info;
           I64[Hp - 72] = R3;
           I64[Hp - 64] = R4;
           I64[Hp - 56] = R5;
           _calLB::P64 = Hp - 79;
           if (%MO_S_Lt_W64(R2, 11)) goto calNp; else goto calNq;
       calNp: // global
           Hp = Hp - 56;
           R2 = R6;
           R1 = _calLB::P64;
           call p_saluK_entry(R2, R1) args: 8, res: 0, upd: 8;
       calNq: // global
           I64[Hp - 48] = sat_salv2_info;
           P64[Hp - 32] = R6;
           P64[Hp - 24] = _calLB::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$w$cshowsPrec1_info" {
     GHC.Event.Poll.$w$cshowsPrec1_info:
         const GHC.Event.Poll.$w$cshowsPrec1_entry;
         const 0;
         const 12884901902;
         const 21474836480;
         const SalNx_srt;
         const 965;
         const GHC.Event.Poll.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.381927099 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure" {
     GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure:
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calOX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calP1; else goto calP2;
       calP1: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       calP2: // global
           I64[Sp - 24] = block_calOU_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto ualPa; else goto calOV;
       ualPa: // global
           call _calOU(R1) args: 0, res: 0, upd: 0;
       calOV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd_$cshowsPrec_info" {
     GHC.Event.Poll.$fShowPollFd_$cshowsPrec_info:
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SalNx_srt+8;
 },
 _calOU() //  [R1]
         { []
         }
     {offset
       calOU: // global
           I64[Sp] = block_calP0_info;
           _salv7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _salv7::I64;
           if (R1 & 7 != 0) goto ualP9; else goto calP4;
       ualP9: // global
           call _calP0(R1) args: 0, res: 0, upd: 0;
       calP4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calOU_info" {
     block_calOU_info:
         const _calOU;
         const 2;
         const 4294967326;
         const SalNx_srt+8;
 },
 _calP0() //  [R1]
         { []
         }
     {offset
       calP0: // global
           R6 = P64[Sp + 16];
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calP0_info" {
     block_calP0_info:
         const _calP0;
         const 66;
         const 4294967326;
         const SalNx_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.388426949 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd7_closure" {
     GHC.Event.Poll.$fShowPollFd7_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.390887235 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_$cshow_closure" {
     GHC.Event.Poll.$fShowPollFd_$cshow_closure:
         const GHC.Event.Poll.$fShowPollFd_$cshow_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd_$cshow_entry() //  [R2]
         { []
         }
     {offset
       calPy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto calPz; else goto calPA;
       calPz: // global
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calPA: // global
           I64[Sp - 8] = block_calPv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualPE; else goto calPw;
       ualPE: // global
           call _calPv(R1) args: 0, res: 0, upd: 0;
       calPw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd_$cshow_info" {
     GHC.Event.Poll.$fShowPollFd_$cshow_info:
         const GHC.Event.Poll.$fShowPollFd_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SalNx_srt+8;
 },
 _calPv() //  [R1]
         { []
         }
     {offset
       calPv: // global
           R6 = GHC.Types.[]_closure+1;
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calPv_info" {
     block_calPv_info:
         const _calPv;
         const 0;
         const 4294967326;
         const SalNx_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.39736098 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd1_closure" {
     GHC.Event.Poll.$fShowPollFd1_closure:
         const GHC.Event.Poll.$fShowPollFd1_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       calPX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calPY; else goto calPZ;
       calPY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.$fShowPollFd1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       calPZ: // global
           I64[Sp - 16] = block_calPU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto ualQ3; else goto calPV;
       ualQ3: // global
           call _calPU(R1) args: 0, res: 0, upd: 0;
       calPV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd1_info" {
     GHC.Event.Poll.$fShowPollFd1_info:
         const GHC.Event.Poll.$fShowPollFd1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SalNx_srt+8;
 },
 _calPU() //  [R1]
         { []
         }
     {offset
       calPU: // global
           R6 = P64[Sp + 8];
           R5 = I64[R1 + 23];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.Poll.$w$cshowsPrec1_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calPU_info" {
     block_calPU_info:
         const _calPU;
         const 1;
         const 4294967326;
         const SalNx_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.402341935 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_$cshowList_closure" {
     GHC.Event.Poll.$fShowPollFd_$cshowList_closure:
         const GHC.Event.Poll.$fShowPollFd_$cshowList_info;
         const 0;
 },
 GHC.Event.Poll.$fShowPollFd_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       calQi: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Poll.$fShowPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.$fShowPollFd_$cshowList_info" {
     GHC.Event.Poll.$fShowPollFd_$cshowList_info:
         const GHC.Event.Poll.$fShowPollFd_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SalNx_srt+32;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.405809357 UTC

[section ""data" . GHC.Event.Poll.$fShowPollFd_closure" {
     GHC.Event.Poll.$fShowPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure+3;
         const GHC.Event.Poll.$fShowPollFd_$cshow_closure+1;
         const GHC.Event.Poll.$fShowPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.407547101 UTC

[section ""data" . GHC.Event.Poll.$fEqEvent_closure" {
     GHC.Event.Poll.$fEqEvent_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt16_closure+2;
         const GHC.Int.neInt16_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.410083938 UTC

[section ""data" . GHC.Event.Poll.pfdRevents_closure" {
     GHC.Event.Poll.pfdRevents_closure:
         const GHC.Event.Poll.pfdRevents_info;
 },
 GHC.Event.Poll.pfdRevents_entry() //  [R2]
         { []
         }
     {offset
       calQy: // global
           if ((Sp + -8) < SpLim) (likely: False) goto calQC; else goto calQD;
       calQC: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pfdRevents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calQD: // global
           I64[Sp - 8] = block_calQv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualQH; else goto calQw;
       ualQH: // global
           call _calQv(R1) args: 0, res: 0, upd: 0;
       calQw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pfdRevents_info" {
     GHC.Event.Poll.pfdRevents_info:
         const GHC.Event.Poll.pfdRevents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _calQv() //  [R1]
         { []
         }
     {offset
       calQv: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calQG; else goto calQF;
       calQG: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calQF: // global
           _salvt::I64 = I64[R1 + 23];
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _salvt::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calQv_info" {
     block_calQv_info:
         const _calQv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.416007162 UTC

[section ""data" . GHC.Event.Poll.pfdEvents_closure" {
     GHC.Event.Poll.pfdEvents_closure:
         const GHC.Event.Poll.pfdEvents_info;
 },
 GHC.Event.Poll.pfdEvents_entry() //  [R2]
         { []
         }
     {offset
       calR1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto calR5; else goto calR6;
       calR5: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pfdEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calR6: // global
           I64[Sp - 8] = block_calQY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualRa; else goto calQZ;
       ualRa: // global
           call _calQY(R1) args: 0, res: 0, upd: 0;
       calQZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pfdEvents_info" {
     GHC.Event.Poll.pfdEvents_info:
         const GHC.Event.Poll.pfdEvents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _calQY() //  [R1]
         { []
         }
     {offset
       calQY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calR9; else goto calR8;
       calR9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calR8: // global
           _salvx::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I16#_con_info;
           I64[Hp] = _salvx::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calQY_info" {
     block_calQY_info:
         const _calQY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.421934314 UTC

[section ""data" . GHC.Event.Poll.pfdFd_closure" {
     GHC.Event.Poll.pfdFd_closure:
         const GHC.Event.Poll.pfdFd_info;
 },
 GHC.Event.Poll.pfdFd_entry() //  [R2]
         { []
         }
     {offset
       calRu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto calRy; else goto calRz;
       calRy: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pfdFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calRz: // global
           I64[Sp - 8] = block_calRr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualRD; else goto calRs;
       ualRD: // global
           call _calRr(R1) args: 0, res: 0, upd: 0;
       calRs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pfdFd_info" {
     GHC.Event.Poll.pfdFd_info:
         const GHC.Event.Poll.pfdFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _calRr() //  [R1]
         { []
         }
     {offset
       calRr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calRC; else goto calRB;
       calRC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calRB: // global
           _salvB::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _salvB::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calRr_info" {
     block_calRr_info:
         const _calRr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.427681707 UTC

[section ""data" . GHC.Event.Poll.pollFd_closure" {
     GHC.Event.Poll.pollFd_closure:
         const GHC.Event.Poll.pollFd_info;
 },
 GHC.Event.Poll.pollFd_entry() //  [R2]
         { []
         }
     {offset
       calRX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto calS1; else goto calS2;
       calS1: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calS2: // global
           I64[Sp - 8] = block_calRU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualS6; else goto calRV;
       ualS6: // global
           call _calRU(R1) args: 0, res: 0, upd: 0;
       calRV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pollFd_info" {
     GHC.Event.Poll.pollFd_info:
         const GHC.Event.Poll.pollFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _calRU() //  [R1]
         { []
         }
     {offset
       calRU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calS5; else goto calS4;
       calS5: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calS4: // global
           _salvH::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _salvH::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calRU_info" {
     block_calRU_info:
         const _calRU;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.433683924 UTC

[section ""data" . GHC.Event.Poll.pollChanges_closure" {
     GHC.Event.Poll.pollChanges_closure:
         const GHC.Event.Poll.pollChanges_info;
 },
 GHC.Event.Poll.pollChanges_entry() //  [R2]
         { []
         }
     {offset
       calSq: // global
           if ((Sp + -8) < SpLim) (likely: False) goto calSu; else goto calSv;
       calSu: // global
           R2 = R2;
           R1 = GHC.Event.Poll.pollChanges_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       calSv: // global
           I64[Sp - 8] = block_calSn_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto ualSz; else goto calSo;
       ualSz: // global
           call _calSn(R1) args: 0, res: 0, upd: 0;
       calSo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.pollChanges_info" {
     GHC.Event.Poll.pollChanges_info:
         const GHC.Event.Poll.pollChanges_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _calSn() //  [R1]
         { []
         }
     {offset
       calSn: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calSy; else goto calSx;
       calSy: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       calSx: // global
           _salvK::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = _salvK::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calSn_info" {
     block_calSn_info:
         const _calSn;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.43872905 UTC

[section ""data" . GHC.Event.Poll.available_closure" {
     GHC.Event.Poll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.440347054 UTC

[section ""cstring" . GHC.Event.Poll.$trModule4_bytes" {
     GHC.Event.Poll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.442021518 UTC

[section ""data" . GHC.Event.Poll.$trModule3_closure" {
     GHC.Event.Poll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.443608987 UTC

[section ""cstring" . GHC.Event.Poll.$trModule2_bytes" {
     GHC.Event.Poll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.445162135 UTC

[section ""data" . GHC.Event.Poll.$trModule1_closure" {
     GHC.Event.Poll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.447194214 UTC

[section ""data" . GHC.Event.Poll.$trModule_closure" {
     GHC.Event.Poll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Poll.$trModule3_closure+1;
         const GHC.Event.Poll.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.448971602 UTC

[section ""data" . $krep_rajAW_closure" {
     $krep_rajAW_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCShort_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.451028486 UTC

[section ""data" . $krep1_rajAX_closure" {
     $krep1_rajAX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.452650881 UTC

[section ""cstring" . GHC.Event.Poll.$tcEvent2_bytes" {
     GHC.Event.Poll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.454326927 UTC

[section ""data" . GHC.Event.Poll.$tcEvent1_closure" {
     GHC.Event.Poll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tcEvent2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.456421822 UTC

[section ""data" . GHC.Event.Poll.$tcEvent_closure" {
     GHC.Event.Poll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10782964843686049546;
         const 16589058175633483645;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.458364417 UTC

[section ""data" . $krep2_rajAY_closure" {
     $krep2_rajAY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Poll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.459973712 UTC

[section ""data" . GHC.Event.Poll.$tc'Event1_closure" {
     GHC.Event.Poll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rajAW_closure+1;
         const $krep2_rajAY_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.461615943 UTC

[section ""cstring" . GHC.Event.Poll.$tc'Event3_bytes" {
     GHC.Event.Poll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.463271821 UTC

[section ""data" . GHC.Event.Poll.$tc'Event2_closure" {
     GHC.Event.Poll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tc'Event3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.465021787 UTC

[section ""data" . GHC.Event.Poll.$tc'Event_closure" {
     GHC.Event.Poll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tc'Event2_closure+1;
         const GHC.Event.Poll.$tc'Event1_closure+4;
         const 14301517435728423362;
         const 8190957594797964970;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.466784719 UTC

[section ""cstring" . GHC.Event.Poll.$tcPollFd2_bytes" {
     GHC.Event.Poll.$tcPollFd2_bytes:
         I8[] [80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.468339068 UTC

[section ""data" . GHC.Event.Poll.$tcPollFd1_closure" {
     GHC.Event.Poll.$tcPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tcPollFd2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.470299545 UTC

[section ""data" . GHC.Event.Poll.$tcPollFd_closure" {
     GHC.Event.Poll.$tcPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tcPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16228031948332168786;
         const 6382085973026785723;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.472084436 UTC

[section ""data" . $krep3_rajAZ_closure" {
     $krep3_rajAZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Poll.$tcPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.473765891 UTC

[section ""data" . $krep4_rajB0_closure" {
     $krep4_rajB0_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rajAY_closure+1;
         const $krep3_rajAZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.475426781 UTC

[section ""data" . $krep5_rajB1_closure" {
     $krep5_rajB1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rajAY_closure+1;
         const $krep4_rajB0_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.477051036 UTC

[section ""data" . GHC.Event.Poll.$tc'PollFd1_closure" {
     GHC.Event.Poll.$tc'PollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rajAX_closure+1;
         const $krep5_rajB1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.478680742 UTC

[section ""cstring" . GHC.Event.Poll.$tc'PollFd3_bytes" {
     GHC.Event.Poll.$tc'PollFd3_bytes:
         I8[] [39,80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.480764929 UTC

[section ""data" . GHC.Event.Poll.$tc'PollFd2_closure" {
     GHC.Event.Poll.$tc'PollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tc'PollFd3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.482985275 UTC

[section ""data" . GHC.Event.Poll.$tc'PollFd_closure" {
     GHC.Event.Poll.$tc'PollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tc'PollFd2_closure+1;
         const GHC.Event.Poll.$tc'PollFd1_closure+4;
         const 13628496348781941345;
         const 13702663238288085101;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.48473328 UTC

[section ""data" . $krep6_rajB2_closure" {
     $krep6_rajB2_closure:
         const :_con_info;
         const $krep3_rajAZ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.486388466 UTC

[section ""data" . $krep7_rajB3_closure" {
     $krep7_rajB3_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep6_rajB2_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.48796278 UTC

[section ""data" . $krep8_rajB4_closure" {
     $krep8_rajB4_closure:
         const :_con_info;
         const $krep7_rajB3_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.490039432 UTC

[section ""data" . $krep9_rajB5_closure" {
     $krep9_rajB5_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep8_rajB4_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.491581397 UTC

[section ""cstring" . GHC.Event.Poll.$tcPoll2_bytes" {
     GHC.Event.Poll.$tcPoll2_bytes:
         I8[] [80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.493138289 UTC

[section ""data" . GHC.Event.Poll.$tcPoll1_closure" {
     GHC.Event.Poll.$tcPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tcPoll2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.494762971 UTC

[section ""data" . GHC.Event.Poll.$tcPoll_closure" {
     GHC.Event.Poll.$tcPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tcPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 13451464419968486054;
         const 9195109480934256969;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.496498881 UTC

[section ""data" . $krep10_rajB6_closure" {
     $krep10_rajB6_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Poll.$tcPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.498386666 UTC

[section ""data" . $krep11_rajB7_closure" {
     $krep11_rajB7_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep7_rajB3_closure+1;
         const $krep10_rajB6_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.499954461 UTC

[section ""data" . GHC.Event.Poll.$tc'Poll1_closure" {
     GHC.Event.Poll.$tc'Poll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_rajB5_closure+1;
         const $krep11_rajB7_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.501520077 UTC

[section ""cstring" . GHC.Event.Poll.$tc'Poll3_bytes" {
     GHC.Event.Poll.$tc'Poll3_bytes:
         I8[] [39,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.503138662 UTC

[section ""data" . GHC.Event.Poll.$tc'Poll2_closure" {
     GHC.Event.Poll.$tc'Poll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Poll.$tc'Poll3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.504792487 UTC

[section ""data" . GHC.Event.Poll.$tc'Poll_closure" {
     GHC.Event.Poll.$tc'Poll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Poll.$trModule_closure+1;
         const GHC.Event.Poll.$tc'Poll2_closure+1;
         const GHC.Event.Poll.$tc'Poll1_closure+4;
         const 5431567153781643515;
         const 15938353663250731731;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.507223478 UTC

[section ""data" . GHC.Event.Poll.$fBitsEvent_closure" {
     GHC.Event.Poll.$fBitsEvent_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.Poll.$fEqEvent_closure+1;
         const GHC.Int.$fBitsInt16_$c.&._closure+2;
         const GHC.Int.$fBitsInt16_$c.|._closure+2;
         const GHC.Int.$fBitsInt16_$cxor_closure+2;
         const GHC.Int.$fBitsInt16_$ccomplement_closure+1;
         const GHC.Int.$fBitsInt16_$cshift_closure+2;
         const GHC.Int.$fBitsInt16_$crotate_closure+2;
         const GHC.Int.$fBitsInt3_closure;
         const GHC.Int.$fBitsInt16_$cbit_closure+1;
         const GHC.Int.$fBitsInt16_$csetBit_closure+2;
         const GHC.Int.$fBitsInt16_$cclearBit_closure+2;
         const GHC.Int.$fBitsInt16_$ccomplementBit_closure+2;
         const GHC.Int.$fBitsInt16_$ctestBit_closure+2;
         const GHC.Int.$fBitsInt16_$cbitSizeMaybe_closure+1;
         const GHC.Int.$fBitsInt16_$cfiniteBitSize_closure+1;
         const GHC.Int.$fBitsInt16_$cisSigned_closure+1;
         const GHC.Int.$fBitsInt16_$cshiftL_closure+2;
         const GHC.Int.$fBitsInt16_$cunsafeShiftL_closure+2;
         const GHC.Int.$fBitsInt16_$cshiftR_closure+2;
         const GHC.Int.$fBitsInt16_$cunsafeShiftR_closure+2;
         const GHC.Int.$fBitsInt16_$crotateL_closure+2;
         const GHC.Int.$fBitsInt16_$crotateR_closure+2;
         const GHC.Int.$fBitsInt16_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.509172892 UTC

[section ""data" . GHC.Event.Poll.$fFiniteBitsEvent_closure" {
     GHC.Event.Poll.$fFiniteBitsEvent_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.Poll.$fBitsEvent_closure+1;
         const GHC.Int.$fBitsInt16_$cfiniteBitSize_closure+1;
         const GHC.Int.$fFiniteBitsInt16_$ccountLeadingZeros_closure+1;
         const GHC.Int.$fFiniteBitsInt16_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.510916064 UTC

[section ""data" . GHC.Event.Poll.$fNumEvent_closure" {
     GHC.Event.Poll.$fNumEvent_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Int.$fNumInt16_$c+_closure+2;
         const GHC.Int.$fNumInt16_$c-_closure+2;
         const GHC.Int.$fNumInt16_$c*_closure+2;
         const GHC.Int.$fNumInt16_$cnegate_closure+1;
         const GHC.Int.$fNumInt16_$cabs_closure+1;
         const GHC.Int.$fNumInt16_$csignum_closure+1;
         const GHC.Int.$fNumInt16_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.51258494 UTC

[section ""cstring" . lvl_rajB8_bytes" {
     lvl_rajB8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,105,110,32,80,111,108,108,32,98,97,99,107,101,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.515433333 UTC

[section ""data" . GHC.Event.Poll.new3_closure" {
     GHC.Event.Poll.new3_closure:
         const GHC.Event.Poll.new3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Poll.new3_entry() //  [R1]
         { []
         }
     {offset
       calTB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calTC; else goto calTD;
       calTC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calTD: // global
           (_calTw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_calTw::I64 == 0) goto calTy; else goto calTx;
       calTy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       calTx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _calTw::I64;
           I64[Sp - 24] = block_calTz_info;
           R2 = lvl_rajB8_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new3_info" {
     GHC.Event.Poll.new3_info:
         const GHC.Event.Poll.new3_entry;
         const 0;
         const 4294967317;
         const SalNx_srt+40;
 },
 _calTz() //  [R1]
         { []
         }
     {offset
       calTz: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_calTz_info" {
     block_calTz_info:
         const _calTz;
         const 0;
         const 4294967326;
         const SalNx_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.523289192 UTC

[section ""data" . $wc_pollLoop_rajB9_closure" {
     $wc_pollLoop_rajB9_closure:
         const $wc_pollLoop_rajB9_info;
 },
 $wc_pollLoop_rajB9_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       calU2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto calU3; else goto ualUN;
       calU3: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = $wc_pollLoop_rajB9_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       ualUN: // global
           I64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           I64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _calTU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . $wc_pollLoop_rajB9_info" {
     $wc_pollLoop_rajB9_info:
         const $wc_pollLoop_rajB9_entry;
         const 0;
         const 14;
         const 17179869200;
 },
 _calTU() //  []
         { []
         }
     {offset
       calTU: // global
           _salvN::I64 = I64[Sp];
           _salvO::I64 = I64[Sp + 8];
           _salvP::I64 = I64[Sp + 16];
           if (%MO_S_Gt_W64(_salvP::I64,
                            2147483647)) goto calU0; else goto calU1;
       calU0: // global
           I64[Sp - 8] = block_calUa_info;
           Sp = Sp - 8;
           _ualUT::P64 = CurrentTSO;
           I64[I64[_ualUT::P64 + 24] + 16] = Sp;
           _ualUU::I64 = CurrentNursery;
           P64[_ualUU::I64 + 8] = Hp + 8;
           I64[_ualUT::P64 + 104] = I64[_ualUT::P64 + 104] - ((Hp + 8) - I64[_ualUU::I64]);
           (_ualUR::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_salvV::I64) = call "ccall" arg hints:  [PtrHint, ,
                                                     ‘signed’]  result hints:  [‘signed’] poll(_salvN::I64, _salvO::I64, 2147483647);
           (_ualUS::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ualUR::I64);
           BaseReg = _ualUS::I64;
           _ualUV::P64 = CurrentTSO;
           _ualUW::P64 = I64[_ualUV::P64 + 24];
           Sp = I64[_ualUW::P64 + 16];
           SpLim = _ualUW::P64 + 192;
           HpAlloc = 0;
           _ualUX::I64 = CurrentNursery;
           _ualUY::I64 = I64[_ualUX::I64 + 8];
           Hp = _ualUY::I64 - 8;
           _ualUZ::I64 = I64[_ualUX::I64];
           HpLim = _ualUZ::I64 + ((%MO_SS_Conv_W32_W64(I32[_ualUX::I64 + 48]) << 12) - 1);
           I64[_ualUV::P64 + 104] = I64[_ualUV::P64 + 104] + (_ualUY::I64 - _ualUZ::I64);
           R1 = _salvV::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
       calU1: // global
           I64[Sp + 16] = block_calUD_info;
           Sp = Sp + 16;
           _ualV3::P64 = CurrentTSO;
           I64[I64[_ualV3::P64 + 24] + 16] = Sp;
           _ualV4::I64 = CurrentNursery;
           P64[_ualV4::I64 + 8] = Hp + 8;
           I64[_ualV3::P64 + 104] = I64[_ualV3::P64 + 104] - ((Hp + 8) - I64[_ualV4::I64]);
           (_ualV1::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_salw3::I64) = call "ccall" arg hints:  [PtrHint, ,
                                                     ‘signed’]  result hints:  [‘signed’] poll(_salvN::I64, _salvO::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_salvP::I64)));
           (_ualV2::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_ualV1::I64);
           BaseReg = _ualV2::I64;
           _ualV5::P64 = CurrentTSO;
           _ualV6::P64 = I64[_ualV5::P64 + 24];
           Sp = I64[_ualV6::P64 + 16];
           SpLim = _ualV6::P64 + 192;
           HpAlloc = 0;
           _ualV7::I64 = CurrentNursery;
           _ualV8::I64 = I64[_ualV7::I64 + 8];
           Hp = _ualV8::I64 - 8;
           _ualV9::I64 = I64[_ualV7::I64];
           HpLim = _ualV9::I64 + ((%MO_SS_Conv_W32_W64(I32[_ualV7::I64 + 48]) << 12) - 1);
           I64[_ualV5::P64 + 104] = I64[_ualV5::P64 + 104] + (_ualV8::I64 - _ualV9::I64);
           R1 = _salw3::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _calUa() //  [R1]
         { []
         }
     {offset
       calUa: // global
           _salvW::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_salvW::I64 != 0) goto ualUO; else goto calUr;
       ualUO: // global
           I64[Sp + 24] = _salvW::I64;
           Sp = Sp + 24;
           call _calUh() args: 0, res: 0, upd: 0;
       calUr: // global
           I64[Sp + 8] = I64[Sp + 8];
           I64[Sp + 16] = I64[Sp + 16];
           I64[Sp + 24] = I64[Sp + 24] - 2147483647;
           Sp = Sp + 8;
           call _calTU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calUa_info" {
     block_calUa_info:
         const _calUa;
         const 451;
         const 30;
 },
 _calUh() //  []
         { []
         }
     {offset
       calUh: // global
           Hp = Hp + 16;
           _salvW::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto calUo; else goto calUn;
       calUo: // global
           HpAlloc = 16;
           I64[Sp] = block_calUg_info;
           R1 = _salvW::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       calUn: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _salvW::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _calUg() //  [R1]
         { []
         }
     {offset
       calUg: // global
           I64[Sp] = R1;
           call _calUh() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calUg_info" {
     block_calUg_info:
         const _calUg;
         const 0;
         const 30;
 },
 _calUD() //  [R1]
         { []
         }
     {offset
       calUD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto calUL; else goto calUK;
       calUL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       calUK: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calUD_info" {
     block_calUD_info:
         const _calUD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.535196538 UTC

[section ""data" . lvl1_rajBa_closure" {
     lvl1_rajBa_closure:
         const GHC.Int.I32#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.536863088 UTC

[section ""cstring" . lvl2_rajBb_bytes" {
     lvl2_rajBb_bytes:
         I8[] [99,95,112,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.539447388 UTC

[section ""data" . lvl3_rajBc_closure" {
     lvl3_rajBc_closure:
         const lvl3_rajBc_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_rajBc_entry() //  [R1]
         { []
         }
     {offset
       calWm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calWn; else goto calWo;
       calWn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calWo: // global
           (_calWj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_calWj::I64 == 0) goto calWl; else goto calWk;
       calWl: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       calWk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _calWj::I64;
           R2 = lvl2_rajBb_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_rajBc_info" {
     lvl3_rajBc_info:
         const lvl3_rajBc_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.543448599 UTC

[section ""cstring" . lvl4_rajBd_bytes" {
     lvl4_rajBd_bytes:
         I8[] [114,101,119,111,114,107,70,100,58,32,101,118,101,110,116,32,110,111,116,32,102,111,117,110,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.54611938 UTC

[section ""data" . lvl5_rajBe_closure" {
     lvl5_rajBe_closure:
         const lvl5_rajBe_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_rajBe_entry() //  [R1]
         { []
         }
     {offset
       calWG: // global
           if ((Sp + -24) < SpLim) (likely: False) goto calWH; else goto calWI;
       calWH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calWI: // global
           (_calWB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_calWB::I64 == 0) goto calWD; else goto calWC;
       calWD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       calWC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _calWB::I64;
           I64[Sp - 24] = block_calWE_info;
           R2 = lvl4_rajBd_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_rajBe_info" {
     lvl5_rajBe_info:
         const lvl5_rajBe_entry;
         const 0;
         const 4294967317;
         const SalNx_srt+40;
 },
 _calWE() //  [R1]
         { []
         }
     {offset
       calWE: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_calWE_info" {
     block_calWE_info:
         const _calWE;
         const 0;
         const 4294967326;
         const SalNx_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.551473837 UTC

[section ""data" . lvl6_rajBf_closure" {
     lvl6_rajBf_closure:
         const lvl6_rajBf_info;
         const 0;
         const 0;
         const 0;
 },
 lvl6_rajBf_entry() //  [R1]
         { []
         }
     {offset
       calX4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calX5; else goto calX6;
       calX5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calX6: // global
           (_calX1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_calX1::I64 == 0) goto calX3; else goto calX2;
       calX3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       calX2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _calX1::I64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 16;
           call GHC.Event.Array.loop_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl6_rajBf_info" {
     lvl6_rajBf_info:
         const lvl6_rajBf_entry;
         const 0;
         const 4294967317;
         const SalNx_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.554977313 UTC

[section ""data" . lvl7_rajBg_closure" {
     lvl7_rajBg_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.556582005 UTC

[section ""data" . lvl8_rajBh_closure" {
     lvl8_rajBh_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.558530841 UTC

[section ""data" . lvl9_rajBi_closure" {
     lvl9_rajBi_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.560778394 UTC

[section ""data" . lvl10_rajBj_closure" {
     lvl10_rajBj_closure:
         const lvl10_rajBj_info;
         const 0;
         const 0;
         const 0;
 },
 lvl10_rajBj_entry() //  [R1]
         { []
         }
     {offset
       calXo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calXp; else goto calXq;
       calXp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calXq: // global
           (_calXl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_calXl::I64 == 0) goto calXn; else goto calXm;
       calXn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       calXm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _calXl::I64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 16;
           call GHC.Event.Array.removeAt_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl10_rajBj_info" {
     lvl10_rajBj_info:
         const lvl10_rajBj_entry;
         const 0;
         const 4294967317;
         const SalNx_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.564815534 UTC

[section ""data" . lvl11_rajBk_closure" {
     lvl11_rajBk_closure:
         const lvl11_rajBk_info;
         const 0;
         const 0;
         const 0;
 },
 lvl11_rajBk_entry() //  [R1]
         { []
         }
     {offset
       calXF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calXG; else goto calXH;
       calXG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       calXH: // global
           (_calXC::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_calXC::I64 == 0) goto calXE; else goto calXD;
       calXE: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       calXD: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _calXC::I64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 16;
           call GHC.Event.Array.findIndex_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl11_rajBk_info" {
     lvl11_rajBk_info:
         const lvl11_rajBk_entry;
         const 0;
         const 4294967317;
         const SalNx_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.587797797 UTC

[section ""data" . GHC.Event.Poll.new5_closure" {
     GHC.Event.Poll.new5_closure:
         const GHC.Event.Poll.new5_info;
         const 0;
 },
 sat_salxj_entry() //  [R1]
         { []
         }
     {offset
       calZs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto calZt; else goto cam0t;
       calZt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cam0t: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _salx8::I64 = I64[R1 + 16];
           if (_salx8::I64 & 25 == 0) goto cam04; else goto calZD;
       cam04: // global
           if (_salx8::I64 & 28 == 0) goto cam0p; else goto cam0j;
       cam0p: // global
           R1 = GHC.Event.Poll.$fShowPollFd7_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cam0j: // global
           R1 = lvl9_rajBi_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       calZD: // global
           if (_salx8::I64 & 28 == 0) goto calZY; else goto calZS;
       calZY: // global
           R1 = lvl8_rajBh_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       calZS: // global
           R1 = lvl7_rajBg_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_salxj_info" {
     sat_salxj_info:
         const sat_salxj_entry;
         const 4294967296;
         const 17;
 },
 i'_salxn_entry() //  [R1]
         { []
         }
     {offset
       cam0E: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cam0O; else goto cam0P;
       cam0O: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cam0P: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cam0B_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uam0T; else goto cam0C;
       uam0T: // global
           call _cam0B(R1) args: 0, res: 0, upd: 0;
       cam0C: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . i'_salxn_info" {
     i'_salxn_info:
         const i'_salxn_entry;
         const 1;
         const 16;
 },
 _cam0B() //  [R1]
         { []
         }
     {offset
       cam0B: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cam0S; else goto cam0R;
       cam0S: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cam0R: // global
           _salxr::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 7] + 1));
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _salxr::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cam0B_info" {
     block_cam0B_info:
         const _cam0B;
         const 0;
         const 30;
 },
 sat_salxv_entry() //  [R1]
         { []
         }
     {offset
       cam11: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cam12; else goto cam13;
       cam12: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cam13: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cam0Y_info;
           _salx0::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _salx0::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uam18; else goto cam0Z;
       uam18: // global
           call _cam0Y(R1) args: 0, res: 0, upd: 0;
       cam0Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_salxv_info" {
     sat_salxv_info:
         const sat_salxv_entry;
         const 4294967297;
         const 19;
 },
 _cam0Y() //  [R1]
         { []
         }
     {offset
       cam0Y: // global
           R1 = I64[((I64[R1 + 7] == I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cam0Y_info" {
     block_cam0Y_info:
         const _cam0Y;
         const 65;
         const 30;
 },
 sat_salxy_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cam19: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cam1a; else goto cam1b;
       cam1a: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cam1b: // global
           I64[Sp - 32] = block_calZf_info;
           _salw9::P64 = P64[R1 + 5];
           _salx0::I64 = I64[R1 + 13];
           R1 = R3;
           P64[Sp - 24] = _salw9::P64;
           I64[Sp - 16] = _salx0::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uam1o; else goto calZg;
       uam1o: // global
           call _calZf(R1) args: 0, res: 0, upd: 0;
       calZg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_salxy_info" {
     sat_salxy_info:
         const sat_salxy_entry;
         const 4294967297;
         const 12;
         const 12884901903;
 },
 _calZf() //  [R1]
         { []
         }
     {offset
       calZf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cam1e; else goto cam1d;
       cam1e: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam1d: // global
           _salx8::I64 = I64[R1 + 23];
           if (_salx8::I64 != 0) goto cam1h; else goto cam1n;
       cam1h: // global
           _salx5::I64 = I64[R1 + 7];
           I64[Hp - 32] = sat_salxj_info;
           I64[Hp - 16] = _salx8::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _salx5::I64;
           _salw9::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cam0v_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = _salw9::P64;
           Sp = Sp + 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       cam1n: // global
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = GHC.Types.True_closure+2;
           _cam1m::P64 = Hp - 31;
           Hp = Hp - 16;
           R1 = _cam1m::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_calZf_info" {
     block_calZf_info:
         const _calZf;
         const 131;
         const 30;
 },
 _cam0v() //  [R1]
         { []
         }
     {offset
       cam0v: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cam1k; else goto cam1j;
       cam1k: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam1j: // global
           I64[Hp - 72] = i'_salxn_info;
           P64[Hp - 56] = P64[Sp + 16];
           I64[Hp - 48] = sat_salxv_info;
           _cam0x::P64 = Hp - 72;
           P64[Hp - 32] = _cam0x::P64;
           I64[Hp - 24] = I64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = _cam0x::P64;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cam0v_info" {
     block_cam0v_info:
         const _cam0v;
         const 66;
         const 30;
 },
 sat_salyD_entry() //  [R1, R2]
         { []
         }
     {offset
       cam1Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cam1R; else goto cam1S;
       cam1R: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cam1S: // global
           I64[Sp - 16] = block_cam1N_info;
           _salyn::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 8] = _salyn::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uam1X; else goto cam1O;
       uam1X: // global
           call _cam1N(R1) args: 0, res: 0, upd: 0;
       cam1O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_salyD_info" {
     sat_salyD_info:
         const sat_salyD_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _cam1N() //  [R1]
         { []
         }
     {offset
       cam1N: // global
           R1 = I64[((I64[R1 + 7] == I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cam1N_info" {
     block_cam1N_info:
         const _cam1N;
         const 65;
         const 30;
 },
 sat_salzA_entry() //  [R1]
         { []
         }
     {offset
       cam2b: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cam2c; else goto cam2d;
       cam2c: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cam2d: // global
           I64[Sp - 24] = block_cam26_info;
           _salwj::P64 = P64[R1 + 7];
           _salwl::P64 = P64[R1 + 15];
           R1 = _salwl::P64;
           P64[Sp - 16] = _salwj::P64;
           P64[Sp - 8] = _salwl::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_salzA_info" {
     sat_salzA_info:
         const sat_salzA_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _cam26() //  [R1]
         { []
         }
     {offset
       cam26: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cam2g; else goto cam2f;
       cam2g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam2f: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cam29_info;
           R2 = Hp - 7;
           _salzx::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _salzx::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam26_info" {
     block_cam26_info:
         const _cam26;
         const 2;
         const 30;
 },
 _cam29() //  []
         { []
         }
     {offset
       cam29: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cam29_info" {
     block_cam29_info:
         const _cam29;
         const 1;
         const 30;
 },
 GHC.Event.Poll.new5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cam2i: // global
           if ((Sp + -112) < SpLim) (likely: False) goto cam2j; else goto cam2k;
       cam2j: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cam2k: // global
           I64[Sp - 32] = block_calXU_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new5_info" {
     GHC.Event.Poll.new5_info:
         const GHC.Event.Poll.new5_entry;
         const 0;
         const 2194728288270;
         const 17179869207;
         const SalNx_srt+72;
 },
 _calXU() //  [R1]
         { []
         }
     {offset
       calXU: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cam2n; else goto cam2m;
       cam2n: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam2m: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_calXZ_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calXU_info" {
     block_calXU_info:
         const _calXU;
         const 3;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _calXZ() //  [R1]
         { []
         }
     {offset
       calXZ: // global
           I64[Sp] = block_calY1_info;
           _salwj::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _salwj::P64;
           if (R1 & 7 != 0) goto uam6o; else goto calY2;
       uam6o: // global
           call _calY1(R1) args: 0, res: 0, upd: 0;
       calY2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calXZ_info" {
     block_calXZ_info:
         const _calXZ;
         const 3;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _calY1() //  [R1]
         { []
         }
     {offset
       calY1: // global
           I64[Sp - 16] = block_calY6_info;
           P64[Sp - 8] = P64[R1 + 15];
           P64[Sp] = P64[R1 + 7];
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calY1_info" {
     block_calY1_info:
         const _calY1;
         const 3;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _calY6() //  [R1]
         { []
         }
     {offset
       calY6: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cam2s; else goto cam2r;
       cam2s: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cam2r: // global
           _salwl::P64 = P64[Sp + 16];
           if (R1 == 0) goto cam5J; else goto cam5w;
       cam5J: // global
           I64[Hp - 16] = sat_salzA_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _salwl::P64;
           I64[Sp] = block_cam5G_info;
           R1 = Hp - 15;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
       cam5w: // global
           Hp = Hp - 24;
           I64[Sp] = block_cam5p_info;
           R1 = _salwl::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calY6_info" {
     block_calY6_info:
         const _calY6;
         const 5;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam5G() //  [R1]
         { []
         }
     {offset
       cam5G: // global
           I64[Sp] = block_cam5I_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uam6O; else goto cam5L;
       uam6O: // global
           call _cam5I(R1) args: 0, res: 0, upd: 0;
       cam5L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam5G_info" {
     block_cam5G_info:
         const _cam5G;
         const 389;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam5I() //  [R1]
         { []
         }
     {offset
       cam5I: // global
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call _salwq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam5I_info" {
     block_cam5I_info:
         const _cam5I;
         const 389;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam5p() //  [R1]
         { []
         }
     {offset
       cam5p: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cam5z; else goto cam5y;
       cam5z: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam5y: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp] = block_cam5s_info;
           R2 = Hp - 7;
           _salzp::P64 = R1;
           R1 = P64[Sp + 16];
           P64[Sp + 24] = _salzp::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam5p_info" {
     block_cam5p_info:
         const _cam5p;
         const 5;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam5s() //  []
         { []
         }
     {offset
       cam5s: // global
           I64[Sp] = block_cam5u_info;
           R1 = P64[Sp + 24];
           if (R1 & 7 != 0) goto uam6M; else goto cam5B;
       uam6M: // global
           call _cam5u(R1) args: 0, res: 0, upd: 0;
       cam5B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam5s_info" {
     block_cam5s_info:
         const _cam5s;
         const 133;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam5u() //  [R1]
         { []
         }
     {offset
       cam5u: // global
           P64[Sp + 24] = P64[R1 + 7];
           Sp = Sp + 8;
           call _salwq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam5u_info" {
     block_cam5u_info:
         const _cam5u;
         const 389;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _salwq() //  []
         { []
         }
     {offset
       salwq: // global
           _salwv::P64 = P64[P64[Sp + 16] + 8];
           I64[Sp - 8] = block_calYd_info;
           R1 = _salwv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uam6Q; else goto calYe;
       uam6Q: // global
           call _calYd(R1) args: 0, res: 0, upd: 0;
       calYe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _calYd() //  [R1]
         { []
         }
     {offset
       calYd: // global
           I64[Sp] = block_calYi_info;
           _salwy::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _salwy::I64;
           if (R1 & 7 != 0) goto uam6p; else goto calYj;
       uam6p: // global
           call _calYi(R1) args: 0, res: 0, upd: 0;
       calYj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calYd_info" {
     block_calYd_info:
         const _calYd;
         const 389;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _calYi() //  [R1]
         { []
         }
     {offset
       calYi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cam2x; else goto cam2w;
       cam2x: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam2w: // global
           _salwC::P64 = P64[R1 + 7];
           _salwB::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 16] = I64[Sp + 24] << 3;
           I64[Sp - 8] = 0;
           P64[Sp] = _salwC::P64;
           I64[Sp + 16] = _salwB::I64;
           P64[Sp + 24] = Hp - 7;
           Sp = Sp - 16;
           call _cam1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calYi_info" {
     block_calYi_info:
         const _calYi;
         const 389;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam1s() //  []
         { []
         }
     {offset
       cam1s: // global
           Hp = Hp + 32;
           _salyh::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto cam4g; else goto cam4f;
       cam4g: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_cam1r_info;
           R1 = _salyh::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cam4f: // global
           _salwm::P64 = P64[Sp + 24];
           if (%MO_S_Lt_W64(_salyh::I64,
                            I64[Sp])) goto cam5n; else goto cam5o;
       cam5n: // global
           _salyk::I64 = I64[Sp + 32] + _salyh::I64;
           _salyn::I64 = %MO_SS_Conv_W32_W64(I32[_salyk::I64]);
           _salyr::I64 = %MO_SS_Conv_W16_W64(I16[_salyk::I64 + 4]);
           if (I16[_salyk::I64 + 6] == 0 :: W16) goto cam5j; else goto cam4l;
       cam5j: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = _salyn::I64;
           I64[Hp - 8] = _salyr::I64;
           I64[Hp] = 0;
           I64[Sp - 8] = block_cam5i_info;
           R4 = Hp - 23;
           R3 = _salwm::P64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp - 8;
           call GHC.Event.Array.$wsnoc_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
       cam4l: // global
           I64[Hp - 24] = sat_salyD_info;
           I64[Hp - 16] = _salyn::I64;
           _cam1I::P64 = Hp - 23;
           Hp = Hp - 16;
           I64[Sp - 24] = block_cam4h_info;
           R3 = P64[Sp + 40];
           R2 = _cam1I::P64;
           R1 = lvl11_rajBk_closure;
           I64[Sp - 16] = _salyn::I64;
           I64[Sp - 8] = _salyr::I64;
           Sp = Sp - 24;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       cam5o: // global
           Hp = Hp - 32;
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 32] = block_calYx_info;
           R1 = P64[_salwm::P64 + 8];
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto uam6x; else goto calYy;
       uam6x: // global
           call _calYx(R1) args: 0, res: 0, upd: 0;
       calYy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cam1r() //  [R1]
         { []
         }
     {offset
       cam1r: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _cam1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam1r_info" {
     block_cam1r_info:
         const _cam1r;
         const 1224;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam5i() //  []
         { []
         }
     {offset
       cam5i: // global
           I64[Sp + 16] = I64[Sp + 16] + 8;
           Sp = Sp + 8;
           call _cam1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam5i_info" {
     block_cam5i_info:
         const _cam5i;
         const 1224;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam4h() //  [R1]
         { []
         }
     {offset
       cam4h: // global
           I64[Sp] = block_cam4j_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uam6E; else goto cam4n;
       uam6E: // global
           call _cam4j(R1) args: 0, res: 0, upd: 0;
       cam4n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam4h_info" {
     block_cam4h_info:
         const _cam4h;
         const 5066;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam4j() //  [R1]
         { []
         }
     {offset
       cam4j: // global
           if (R1 & 7 == 1) goto cam4t; else goto cam4y;
       cam4t: // global
           R1 = lvl5_rajBe_closure;
           Sp = Sp + 88;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       cam4y: // global
           I64[Sp] = block_cam4w_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uam6F; else goto cam4z;
       uam6F: // global
           call _cam4w(R1) args: 0, res: 0, upd: 0;
       cam4z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam4j_info" {
     block_cam4j_info:
         const _cam4j;
         const 5066;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam4w() //  [R1]
         { []
         }
     {offset
       cam4w: // global
           _salyL::P64 = P64[R1 + 7];
           _salyN::I64 = I64[Sp + 16];
           if (_salyN::I64 != 0) goto cam4S; else goto cam5d;
       cam4S: // global
           _salyQ::P64 = P64[P64[Sp + 48] + 8];
           I64[Sp - 8] = block_cam4G_info;
           R1 = _salyQ::P64;
           I64[Sp] = _salyN::I64;
           P64[Sp + 16] = _salyL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uam6G; else goto cam4H;
       uam6G: // global
           call _cam4G(R1) args: 0, res: 0, upd: 0;
       cam4H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cam5d: // global
           I64[Sp + 16] = block_cam5c_info;
           R3 = _salyL::P64;
           R2 = P64[Sp + 64];
           R1 = lvl10_rajBj_closure;
           Sp = Sp + 16;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam4w_info" {
     block_cam4w_info:
         const _cam4w;
         const 5066;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam4G() //  [R1]
         { []
         }
     {offset
       cam4G: // global
           I64[Sp - 8] = block_cam4L_info;
           _salyU::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _salyU::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uam6H; else goto cam4M;
       uam6H: // global
           call _cam4L(R1) args: 0, res: 0, upd: 0;
       cam4M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam4G_info" {
     block_cam4G_info:
         const _cam4G;
         const 9931;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam4L() //  [R1]
         { []
         }
     {offset
       cam4L: // global
           I64[Sp - 8] = block_cam4Q_info;
           _salyX::P64 = P64[R1 + 7];
           _salyW::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp] = _salyX::P64;
           I64[Sp + 32] = _salyW::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uam6I; else goto cam4V;
       uam6I: // global
           call _cam4Q(R1) args: 0, res: 0, upd: 0;
       cam4V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam4L_info" {
     block_cam4L_info:
         const _cam4L;
         const 19916;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam4Q() //  [R1]
         { []
         }
     {offset
       cam4Q: // global
           _salyU::I64 = I64[Sp + 16];
           _salyZ::I64 = I64[R1 + 7];
           if (%MO_S_Lt_W64(_salyZ::I64, 0)) goto cam5a; else goto cam59;
       cam59: // global
           if (%MO_S_Ge_W64(_salyZ::I64,
                            _salyU::I64)) goto cam5a; else goto cam56;
       cam5a: // global
           R3 = _salyZ::I64;
           R2 = _salyU::I64;
           Sp = Sp + 112;
           call GHC.Event.Array.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
       cam56: // global
           _salyh::I64 = I64[Sp + 56];
           _salyN::I64 = I64[Sp + 24];
           _salyX::P64 = P64[Sp + 8];
           _salz2::I64 = I64[Sp + 40] + (_salyZ::I64 << 3);
           I32[_salz2::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 32]);
           I16[_salz2::I64 + 4] = %MO_UU_Conv_W64_W16(_salyN::I64);
           I16[_salz2::I64 + 6] = 0 :: W16;
           call MO_Touch(_salyX::P64);
           I64[Sp + 56] = _salyh::I64 + 8;
           Sp = Sp + 48;
           call _cam1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam4Q_info" {
     block_cam4Q_info:
         const _cam4Q;
         const 40845;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _cam5c() //  []
         { []
         }
     {offset
       cam5c: // global
           I64[Sp + 16] = I64[Sp + 16] + 8;
           Sp = Sp + 8;
           call _cam1s() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam5c_info" {
     block_cam5c_info:
         const _cam5c;
         const 1224;
         const 2160368549918;
         const SalNx_srt+72;
 },
 _calYx() //  [R1]
         { []
         }
     {offset
       calYx: // global
           I64[Sp - 8] = block_calYC_info;
           _salwN::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp] = _salwN::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uam6r; else goto calYD;
       uam6r: // global
           call _calYC(R1) args: 0, res: 0, upd: 0;
       calYD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calYx_info" {
     block_calYx_info:
         const _calYx;
         const 3;
         const 90194313246;
         const SalNx_srt+88;
 },
 _calYC() //  [R1]
         { []
         }
     {offset
       calYC: // global
           I64[Sp - 8] = block_calYJ_info;
           _salwR::P64 = P64[R1 + 7];
           _salwQ::I64 = I64[R1 + 15];
           R1 = P64[Sp + 24];
           P64[Sp] = _salwR::P64;
           I64[Sp + 24] = _salwQ::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uam6s; else goto calYK;
       uam6s: // global
           call _calYJ(R1) args: 0, res: 0, upd: 0;
       calYK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calYC_info" {
     block_calYC_info:
         const _calYC;
         const 68;
         const 90194313246;
         const SalNx_srt+88;
 },
 _calYJ() //  [R1]
         { []
         }
     {offset
       calYJ: // global
           if (R1 & 7 == 1) goto cam3k; else goto cam3s;
       cam3k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cam3n; else goto cam3m;
       cam3n: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam3m: // global
           (_salxT::I64) = call "ccall" arg hints:  [PtrHint, ,
                                                     ‘signed’]  result hints:  [‘signed’] poll(I64[Sp + 32], I64[Sp + 16], 0);
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           _salxU::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_salxT::I64));
           I64[Hp] = _salxU::I64;
           I64[Sp + 32] = _salxU::I64;
           Sp = Sp + 8;
           call _salwS() args: 0, res: 0, upd: 0;
       cam3s: // global
           I64[Sp] = block_cam3q_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uam6t; else goto cam3t;
       uam6t: // global
           call _cam3q(R1) args: 0, res: 0, upd: 0;
       cam3t: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_calYJ_info" {
     block_calYJ_info:
         const _calYJ;
         const 645;
         const 90194313246;
         const SalNx_srt+88;
 },
 _cam3q() //  [R1]
         { []
         }
     {offset
       cam3q: // global
           _salwN::I64 = I64[Sp + 16];
           _salwQ::I64 = I64[Sp + 32];
           if (R1 & 7 == 1) goto cam3R; else goto cam47;
       cam3R: // global
           I64[Sp] = block_cam3M_info;
           R4 = (I64[R1 + 7] + 999999) / 1000000;
           R3 = _salwN::I64;
           R2 = _salwQ::I64;
           call $wc_pollLoop_rajB9_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
       cam47: // global
           I64[Sp] = block_cam43_info;
           R4 = (-1);
           R3 = _salwN::I64;
           R2 = _salwQ::I64;
           call $wc_pollLoop_rajB9_entry(R4, R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam3q_info" {
     block_cam3q_info:
         const _cam3q;
         const 645;
         const 90194313246;
         const SalNx_srt+88;
 },
 _cam3M() //  [R1]
         { []
         }
     {offset
       cam3M: // global
           I64[Sp] = block_cam3O_info;
           _saly7::P64 = R1;
           R1 = R1;
           P64[Sp + 32] = _saly7::P64;
           if (R1 & 7 != 0) goto uam6A; else goto cam3T;
       uam6A: // global
           call _cam3O(R1) args: 0, res: 0, upd: 0;
       cam3T: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam3M_info" {
     block_cam3M_info:
         const _cam3M;
         const 645;
         const 90194313246;
         const SalNx_srt+88;
 },
 _cam3O() //  [R1]
         { []
         }
     {offset
       cam3O: // global
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp + 8;
           call _salwS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam3O_info" {
     block_cam3O_info:
         const _cam3O;
         const 133;
         const 90194313246;
         const SalNx_srt+88;
 },
 _cam43() //  [R1]
         { []
         }
     {offset
       cam43: // global
           I64[Sp] = block_cam45_info;
           _salyd::P64 = R1;
           R1 = R1;
           P64[Sp + 32] = _salyd::P64;
           if (R1 & 7 != 0) goto uam6C; else goto cam49;
       uam6C: // global
           call _cam45(R1) args: 0, res: 0, upd: 0;
       cam49: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam43_info" {
     block_cam43_info:
         const _cam43;
         const 645;
         const 90194313246;
         const SalNx_srt+88;
 },
 _cam45() //  [R1]
         { []
         }
     {offset
       cam45: // global
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp + 8;
           call _salwS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam45_info" {
     block_cam45_info:
         const _cam45;
         const 133;
         const 90194313246;
         const SalNx_srt+88;
 },
 _salwS() //  []
         { []
         }
     {offset
       salwS: // global
           _salxD::I64 = I64[Sp + 24];
           if (_salxD::I64 != (-1)) goto cam2Q; else goto cam3i;
       cam2Q: // global
           I64[Sp + 24] = _salxD::I64;
           goto uam6S;
       cam3i: // global
           (_salxH::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_salxH::I64) == 4 :: W32) goto cam3e; else goto cam34;
       cam3e: // global
           I64[Sp + 24] = 0;
           goto uam6S;
       uam6S: // global
           call _calZ5() args: 0, res: 0, upd: 0;
       cam34: // global
           I64[Sp - 8] = block_cam30_info;
           R2 = lvl3_rajBc_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cam30() //  [R1]
         { []
         }
     {offset
       cam30: // global
           I64[Sp] = block_cam32_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uam6y; else goto cam37;
       uam6y: // global
           call _cam32(R1) args: 0, res: 0, upd: 0;
       cam37: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cam30_info" {
     block_cam30_info:
         const _cam30;
         const 645;
         const 4294967326;
         const SalNx_srt+120;
 },
 _cam32() //  [R1]
         { []
         }
     {offset
       cam32: // global
           I64[Sp + 32] = I64[R1 + 7];
           Sp = Sp + 8;
           call _calZ5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cam32_info" {
     block_cam32_info:
         const _cam32;
         const 645;
         const 4294967326;
         const SalNx_srt+120;
 },
 _calZ5() //  []
         { []
         }
     {offset
       calZ5: // global
           Hp = Hp + 24;
           _salwY::I64 = I64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto cam2E; else goto cam2D;
       cam2E: // global
           HpAlloc = 24;
           I64[Sp - 8] = block_calZ4_info;
           R1 = _salwY::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cam2D: // global
           _calYn::P64 = P64[Sp + 16];
           _salw9::P64 = P64[Sp + 32];
           call MO_Touch(P64[Sp]);
           if (_salwY::I64 == 0) goto cam2N; else goto cam2J;
       cam2N: // global
           Hp = Hp - 24;
           R1 = GHC.Event.Poll.$fShowPollFd7_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cam2J: // global
           I64[Hp - 16] = sat_salxy_info;
           P64[Hp - 8] = _salw9::P64;
           I64[Hp] = _salwY::I64;
           I64[Sp + 24] = block_cam2F_info;
           R4 = Hp - 13;
           R3 = lvl1_rajBa_closure+1;
           R2 = _calYn::P64;
           R1 = lvl6_rajBf_closure;
           I64[Sp + 32] = _salwY::I64;
           Sp = Sp + 24;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _calZ4() //  [R1]
         { []
         }
     {offset
       calZ4: // global
           I64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _calZ5() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_calZ4_info" {
     block_calZ4_info:
         const _calZ4;
         const 645;
         const 4294967326;
         const SalNx_srt+120;
 },
 _cam2F() //  [R1]
         { []
         }
     {offset
       cam2F: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cam2M; else goto cam2L;
       cam2M: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cam2L: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cam2F_info" {
     block_cam2F_info:
         const _cam2F;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.687014525 UTC

[section ""data" . GHC.Event.Poll.new4_closure" {
     GHC.Event.Poll.new4_closure:
         const GHC.Event.Poll.new4_info;
         const 0;
 },
 sat_salAj_entry() //  [R1]
         { []
         }
     {offset
       camc6: // global
           if ((Sp + -40) < SpLim) (likely: False) goto camca; else goto camcb;
       camca: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       camcb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 40] = block_camc3_info;
           _salzI::P64 = P64[R1 + 24];
           _salzJ::P64 = P64[R1 + 32];
           R1 = P64[R1 + 16];
           P64[Sp - 32] = _salzI::P64;
           P64[Sp - 24] = _salzJ::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uamhC; else goto camc4;
       uamhC: // global
           call _camc3(R1) args: 0, res: 0, upd: 0;
       camc4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_salAj_info" {
     sat_salAj_info:
         const sat_salAj_entry;
         const 3;
         const 15;
 },
 _camc3() //  [R1]
         { []
         }
     {offset
       camc3: // global
           I64[Sp] = block_camc9_info;
           _salzT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _salzT::I64;
           if (R1 & 7 != 0) goto uamhB; else goto camcd;
       uamhB: // global
           call _camc9(R1) args: 0, res: 0, upd: 0;
       camcd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_camc3_info" {
     block_camc3_info:
         const _camc3;
         const 2;
         const 30;
 },
 _camc9() //  [R1]
         { []
         }
     {offset
       camc9: // global
           _salzI::P64 = P64[Sp + 8];
           _salzV::I64 = I64[R1 + 7];
           if (_salzV::I64 & 1 == 0) goto cameK; else goto camcn;
       cameK: // global
           if (_salzV::I64 & 2 == 0) goto camg3; else goto cameW;
       camg3: // global
           I64[Sp + 8] = block_camg2_info;
           R1 = _salzI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uamhG; else goto camg5;
       uamhG: // global
           call _camg2(R1) args: 0, res: 0, upd: 0;
       camg5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cameW: // global
           I64[Sp + 8] = block_cameU_info;
           R1 = _salzI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uamhF; else goto cameY;
       uamhF: // global
           call _cameU(R1) args: 0, res: 0, upd: 0;
       cameY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       camcn: // global
           if (_salzV::I64 & 2 == 0) goto camdG; else goto camcz;
       camdG: // global
           I64[Sp + 8] = block_camdF_info;
           R1 = _salzI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uamhE; else goto camdI;
       uamhE: // global
           call _camdF(R1) args: 0, res: 0, upd: 0;
       camdI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       camcz: // global
           I64[Sp + 8] = block_camcx_info;
           R1 = _salzI::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uamhD; else goto camcB;
       uamhD: // global
           call _camcx(R1) args: 0, res: 0, upd: 0;
       camcB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_camc9_info" {
     block_camc9_info:
         const _camc9;
         const 130;
         const 30;
 },
 _camg2() //  [R1]
         { []
         }
     {offset
       camg2: // global
           _salAf::I64 = I64[R1 + 7];
           if (_salAf::I64 & 1 == 0) goto camgG; else goto camgf;
       camgG: // global
           _salAi::I64 = _salAf::I64 & 2;
           if (_salAi::I64 != 0) goto uamhy; else goto uamhx;
       uamhy: // global
           I64[Sp] = _salAi::I64;
           call _camgO() args: 0, res: 0, upd: 0;
       uamhx: // global
           I64[Sp] = _salAi::I64;
           call _camgY() args: 0, res: 0, upd: 0;
       camgf: // global
           _salAh::I64 = _salAf::I64 & 2;
           if (_salAh::I64 != 0) goto uamhu; else goto uamht;
       uamhu: // global
           I64[Sp] = _salAh::I64;
           call _camgn() args: 0, res: 0, upd: 0;
       uamht: // global
           I64[Sp] = _salAh::I64;
           call _camgx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camg2_info" {
     block_camg2_info:
         const _camg2;
         const 65;
         const 30;
 },
 _camgO() //  []
         { []
         }
     {offset
       camgO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camgV; else goto camgU;
       camgV: // global
           HpAlloc = 32;
           _salAi::I64 = I64[Sp];
           I64[Sp] = block_camgN_info;
           R1 = _salAi::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camgU: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camgN() //  [R1]
         { []
         }
     {offset
       camgN: // global
           I64[Sp] = R1;
           call _camgO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camgN_info" {
     block_camgN_info:
         const _camgN;
         const 65;
         const 30;
 },
 _camgY() //  []
         { []
         }
     {offset
       camgY: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camh4; else goto camh3;
       camh4: // global
           HpAlloc = 32;
           _salAi::I64 = I64[Sp];
           I64[Sp] = block_camgX_info;
           R1 = _salAi::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camh3: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camgX() //  [R1]
         { []
         }
     {offset
       camgX: // global
           I64[Sp] = R1;
           call _camgY() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camgX_info" {
     block_camgX_info:
         const _camgX;
         const 65;
         const 30;
 },
 _camgn() //  []
         { []
         }
     {offset
       camgn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camgu; else goto camgt;
       camgu: // global
           HpAlloc = 32;
           _salAh::I64 = I64[Sp];
           I64[Sp] = block_camgm_info;
           R1 = _salAh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camgt: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camgm() //  [R1]
         { []
         }
     {offset
       camgm: // global
           I64[Sp] = R1;
           call _camgn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camgm_info" {
     block_camgm_info:
         const _camgm;
         const 65;
         const 30;
 },
 _camgx() //  []
         { []
         }
     {offset
       camgx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camgD; else goto camgC;
       camgD: // global
           HpAlloc = 32;
           _salAh::I64 = I64[Sp];
           I64[Sp] = block_camgw_info;
           R1 = _salAh::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camgC: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 0;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camgw() //  [R1]
         { []
         }
     {offset
       camgw: // global
           I64[Sp] = R1;
           call _camgx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camgw_info" {
     block_camgw_info:
         const _camgw;
         const 65;
         const 30;
 },
 _cameU() //  [R1]
         { []
         }
     {offset
       cameU: // global
           _salAa::I64 = I64[R1 + 7];
           if (_salAa::I64 & 1 == 0) goto camfz; else goto camf8;
       camfz: // global
           _salAd::I64 = _salAa::I64 & 2;
           if (_salAd::I64 != 0) goto uamhq; else goto uamhp;
       uamhq: // global
           I64[Sp] = _salAd::I64;
           call _camfH() args: 0, res: 0, upd: 0;
       uamhp: // global
           I64[Sp] = _salAd::I64;
           call _camfR() args: 0, res: 0, upd: 0;
       camf8: // global
           _salAc::I64 = _salAa::I64 & 2;
           if (_salAc::I64 != 0) goto uamhm; else goto uamhl;
       uamhm: // global
           I64[Sp] = _salAc::I64;
           call _camfg() args: 0, res: 0, upd: 0;
       uamhl: // global
           I64[Sp] = _salAc::I64;
           call _camfq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cameU_info" {
     block_cameU_info:
         const _cameU;
         const 65;
         const 30;
 },
 _camfH() //  []
         { []
         }
     {offset
       camfH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camfO; else goto camfN;
       camfO: // global
           HpAlloc = 32;
           _salAd::I64 = I64[Sp];
           I64[Sp] = block_camfG_info;
           R1 = _salAd::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camfN: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camfG() //  [R1]
         { []
         }
     {offset
       camfG: // global
           I64[Sp] = R1;
           call _camfH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camfG_info" {
     block_camfG_info:
         const _camfG;
         const 65;
         const 30;
 },
 _camfR() //  []
         { []
         }
     {offset
       camfR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camfX; else goto camfW;
       camfX: // global
           HpAlloc = 32;
           _salAd::I64 = I64[Sp];
           I64[Sp] = block_camfQ_info;
           R1 = _salAd::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camfW: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camfQ() //  [R1]
         { []
         }
     {offset
       camfQ: // global
           I64[Sp] = R1;
           call _camfR() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camfQ_info" {
     block_camfQ_info:
         const _camfQ;
         const 65;
         const 30;
 },
 _camfg() //  []
         { []
         }
     {offset
       camfg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camfn; else goto camfm;
       camfn: // global
           HpAlloc = 32;
           _salAc::I64 = I64[Sp];
           I64[Sp] = block_camff_info;
           R1 = _salAc::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camfm: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camff() //  [R1]
         { []
         }
     {offset
       camff: // global
           I64[Sp] = R1;
           call _camfg() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camff_info" {
     block_camff_info:
         const _camff;
         const 65;
         const 30;
 },
 _camfq() //  []
         { []
         }
     {offset
       camfq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camfw; else goto camfv;
       camfw: // global
           HpAlloc = 32;
           _salAc::I64 = I64[Sp];
           I64[Sp] = block_camfp_info;
           R1 = _salAc::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camfv: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 4;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camfp() //  [R1]
         { []
         }
     {offset
       camfp: // global
           I64[Sp] = R1;
           call _camfq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camfp_info" {
     block_camfp_info:
         const _camfp;
         const 65;
         const 30;
 },
 _camdF() //  [R1]
         { []
         }
     {offset
       camdF: // global
           _salA4::I64 = I64[R1 + 7];
           if (_salA4::I64 & 1 == 0) goto camej; else goto camdS;
       camej: // global
           _salA7::I64 = _salA4::I64 & 2;
           if (_salA7::I64 != 0) goto uamhi; else goto uamhh;
       uamhi: // global
           I64[Sp] = _salA7::I64;
           call _camer() args: 0, res: 0, upd: 0;
       uamhh: // global
           I64[Sp] = _salA7::I64;
           call _cameB() args: 0, res: 0, upd: 0;
       camdS: // global
           _salA6::I64 = _salA4::I64 & 2;
           if (_salA6::I64 != 0) goto uamhe; else goto uamhd;
       uamhe: // global
           I64[Sp] = _salA6::I64;
           call _came0() args: 0, res: 0, upd: 0;
       uamhd: // global
           I64[Sp] = _salA6::I64;
           call _camea() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camdF_info" {
     block_camdF_info:
         const _camdF;
         const 65;
         const 30;
 },
 _camer() //  []
         { []
         }
     {offset
       camer: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camey; else goto camex;
       camey: // global
           HpAlloc = 32;
           _salA7::I64 = I64[Sp];
           I64[Sp] = block_cameq_info;
           R1 = _salA7::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camex: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _cameq() //  [R1]
         { []
         }
     {offset
       cameq: // global
           I64[Sp] = R1;
           call _camer() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cameq_info" {
     block_cameq_info:
         const _cameq;
         const 65;
         const 30;
 },
 _cameB() //  []
         { []
         }
     {offset
       cameB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cameH; else goto cameG;
       cameH: // global
           HpAlloc = 32;
           _salA7::I64 = I64[Sp];
           I64[Sp] = block_cameA_info;
           R1 = _salA7::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       cameG: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _cameA() //  [R1]
         { []
         }
     {offset
       cameA: // global
           I64[Sp] = R1;
           call _cameB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cameA_info" {
     block_cameA_info:
         const _cameA;
         const 65;
         const 30;
 },
 _came0() //  []
         { []
         }
     {offset
       came0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto came7; else goto came6;
       came7: // global
           HpAlloc = 32;
           _salA6::I64 = I64[Sp];
           I64[Sp] = block_camdZ_info;
           R1 = _salA6::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       came6: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camdZ() //  [R1]
         { []
         }
     {offset
       camdZ: // global
           I64[Sp] = R1;
           call _came0() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camdZ_info" {
     block_camdZ_info:
         const _camdZ;
         const 65;
         const 30;
 },
 _camea() //  []
         { []
         }
     {offset
       camea: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cameg; else goto camef;
       cameg: // global
           HpAlloc = 32;
           _salA6::I64 = I64[Sp];
           I64[Sp] = block_came9_info;
           R1 = _salA6::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camef: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 1;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _came9() //  [R1]
         { []
         }
     {offset
       came9: // global
           I64[Sp] = R1;
           call _camea() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_came9_info" {
     block_came9_info:
         const _came9;
         const 65;
         const 30;
 },
 _camcx() //  [R1]
         { []
         }
     {offset
       camcx: // global
           _salzZ::I64 = I64[R1 + 7];
           if (_salzZ::I64 & 1 == 0) goto camdc; else goto camcL;
       camdc: // global
           _salA2::I64 = _salzZ::I64 & 2;
           if (_salA2::I64 != 0) goto uamha; else goto uamh9;
       uamha: // global
           I64[Sp] = _salA2::I64;
           call _camdk() args: 0, res: 0, upd: 0;
       uamh9: // global
           I64[Sp] = _salA2::I64;
           call _camdu() args: 0, res: 0, upd: 0;
       camcL: // global
           _salA1::I64 = _salzZ::I64 & 2;
           if (_salA1::I64 != 0) goto uamh6; else goto uamh5;
       uamh6: // global
           I64[Sp] = _salA1::I64;
           call _camcT() args: 0, res: 0, upd: 0;
       uamh5: // global
           I64[Sp] = _salA1::I64;
           call _camd3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camcx_info" {
     block_camcx_info:
         const _camcx;
         const 65;
         const 30;
 },
 _camdk() //  []
         { []
         }
     {offset
       camdk: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camdr; else goto camdq;
       camdr: // global
           HpAlloc = 32;
           _salA2::I64 = I64[Sp];
           I64[Sp] = block_camdj_info;
           R1 = _salA2::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camdq: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 4;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camdj() //  [R1]
         { []
         }
     {offset
       camdj: // global
           I64[Sp] = R1;
           call _camdk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camdj_info" {
     block_camdj_info:
         const _camdj;
         const 65;
         const 30;
 },
 _camdu() //  []
         { []
         }
     {offset
       camdu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camdA; else goto camdz;
       camdA: // global
           HpAlloc = 32;
           _salA2::I64 = I64[Sp];
           I64[Sp] = block_camdt_info;
           R1 = _salA2::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camdz: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 0;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camdt() //  [R1]
         { []
         }
     {offset
       camdt: // global
           I64[Sp] = R1;
           call _camdu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camdt_info" {
     block_camdt_info:
         const _camdt;
         const 65;
         const 30;
 },
 _camcT() //  []
         { []
         }
     {offset
       camcT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camd0; else goto camcZ;
       camd0: // global
           HpAlloc = 32;
           _salA1::I64 = I64[Sp];
           I64[Sp] = block_camcS_info;
           R1 = _salA1::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camcZ: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 5;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camcS() //  [R1]
         { []
         }
     {offset
       camcS: // global
           I64[Sp] = R1;
           call _camcT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camcS_info" {
     block_camcS_info:
         const _camcS;
         const 65;
         const 30;
 },
 _camd3() //  []
         { []
         }
     {offset
       camd3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camd9; else goto camd8;
       camd9: // global
           HpAlloc = 32;
           _salA1::I64 = I64[Sp];
           I64[Sp] = block_camd2_info;
           R1 = _salA1::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       camd8: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = I64[Sp + 8];
           I64[Hp - 8] = 5;
           I64[Hp] = 1;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 _camd2() //  [R1]
         { []
         }
     {offset
       camd2: // global
           I64[Sp] = R1;
           call _camd3() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_camd2_info" {
     block_camd2_info:
         const _camd2;
         const 65;
         const 30;
 },
 sat_salAn_entry() //  [R1, R2]
         { []
         }
     {offset
       camid: // global
           if ((Sp + -32) < SpLim) (likely: False) goto camif; else goto camig;
       camif: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       camig: // global
           I64[Sp - 32] = block_cambU_info;
           _salzH::P64 = P64[R1 + 6];
           _salzI::P64 = P64[R1 + 14];
           _salzJ::P64 = P64[R1 + 22];
           R1 = R2;
           P64[Sp - 24] = _salzH::P64;
           P64[Sp - 16] = _salzI::P64;
           P64[Sp - 8] = _salzJ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uamim; else goto cambV;
       uamim: // global
           call _cambU(R1) args: 0, res: 0, upd: 0;
       cambV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_salAn_info" {
     sat_salAn_info:
         const sat_salAn_entry;
         const 3;
         const 4294967304;
         const 8589934597;
         const SalNx_srt+72;
 },
 _cambU() //  [R1]
         { []
         }
     {offset
       cambU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto camij; else goto camii;
       camij: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       camii: // global
           _salzR::P64 = P64[R1 + 7];
           I64[Hp - 32] = sat_salAj_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           I64[Sp + 24] = block_camie_info;
           R4 = Hp - 32;
           R3 = _salzR::P64;
           R2 = GHC.Event.Poll.$fStorablePollFd_closure+1;
           Sp = Sp + 24;
           call GHC.Event.Array.$wsnoc_entry(R4,
                                             R3,
                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cambU_info" {
     block_cambU_info:
         const _cambU;
         const 3;
         const 4294967326;
         const SalNx_srt+72;
 },
 _camie() //  []
         { []
         }
     {offset
       camie: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_camie_info" {
     block_camie_info:
         const _camie;
         const 0;
         const 30;
 },
 GHC.Event.Poll.new4_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       camin: // global
           if ((Sp + -32) < SpLim) (likely: False) goto camio; else goto camip;
       camio: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.new4_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       camip: // global
           I64[Sp - 32] = block_cambK_info;
           R1 = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uamit; else goto cambL;
       uamit: // global
           call _cambK(R1) args: 0, res: 0, upd: 0;
       cambL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new4_info" {
     GHC.Event.Poll.new4_info:
         const GHC.Event.Poll.new4_entry;
         const 0;
         const 2203318222862;
         const 21474836504;
         const SalNx_srt+72;
 },
 _cambK() //  [R1]
         { []
         }
     {offset
       cambK: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camis; else goto camir;
       camis: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       camir: // global
           _salzM::P64 = P64[R1 + 7];
           I64[Hp - 24] = sat_salAn_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = P64[Sp + 16];
           P64[Hp] = P64[Sp + 24];
           R3 = Hp - 22;
           R2 = _salzM::P64;
           Sp = Sp + 32;
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cambK_info" {
     block_cambK_info:
         const _cambK;
         const 3;
         const 4294967326;
         const SalNx_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.748981602 UTC

[section ""data" . GHC.Event.Poll.new2_closure" {
     GHC.Event.Poll.new2_closure:
         const GHC.Event.Poll.new2_info;
 },
 GHC.Event.Poll.new2_entry() //  []
         { []
         }
     {offset
       camm6: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new2_info" {
     GHC.Event.Poll.new2_info:
         const GHC.Event.Poll.new2_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.755099444 UTC

[section ""data" . GHC.Event.Poll.new1_closure" {
     GHC.Event.Poll.new1_closure:
         const GHC.Event.Poll.new1_info;
         const 0;
 },
 GHC.Event.Poll.new1_entry() //  []
         { []
         }
     {offset
       cammE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cammF; else goto cammG;
       cammF: // global
           R1 = GHC.Event.Poll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cammG: // global
           I64[Sp - 8] = block_cammj_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new1_info" {
     GHC.Event.Poll.new1_info:
         const GHC.Event.Poll.new1_entry;
         const 0;
         const 1928440315918;
         const 4294967299;
         const SalNx_srt+96;
 },
 _cammj() //  [R1]
         { []
         }
     {offset
       cammj: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cammJ; else goto cammI;
       cammJ: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cammI: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_cammo_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cammj_info" {
     block_cammj_info:
         const _cammj;
         const 0;
         const 1378684502046;
         const SalNx_srt+96;
 },
 _cammo() //  [R1]
         { []
         }
     {offset
       cammo: // global
           I64[Sp - 8] = block_cammq_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cammo_info" {
     block_cammo_info:
         const _cammo;
         const 0;
         const 1378684502046;
         const SalNx_srt+96;
 },
 _cammq() //  [R1]
         { []
         }
     {offset
       cammq: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cammN; else goto cammM;
       cammN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cammM: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_cammt_info;
           R2 = Hp - 7;
           _salAC::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _salAC::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cammq_info" {
     block_cammq_info:
         const _cammq;
         const 1;
         const 1378684502046;
         const SalNx_srt+96;
 },
 _cammt() //  []
         { []
         }
     {offset
       cammt: // global
           I64[Sp] = block_cammv_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cammt_info" {
     block_cammt_info:
         const _cammt;
         const 1;
         const 1378684502046;
         const SalNx_srt+96;
 },
 _cammv() //  [R1]
         { []
         }
     {offset
       cammv: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cammR; else goto cammQ;
       cammR: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cammQ: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainForeignPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 63;
           I64[Hp - 32] = 0;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 0;
           I64[Sp] = block_cammA_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cammv_info" {
     block_cammv_info:
         const _cammv;
         const 1;
         const 1378684502046;
         const SalNx_srt+96;
 },
 _cammA() //  [R1]
         { []
         }
     {offset
       cammA: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cammU; else goto cammT;
       cammU: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cammT: // global
           I64[Hp - 64] = GHC.Event.Poll.Poll_con_info;
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = R1;
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.Poll.new5_closure+4;
           P64[Hp - 16] = GHC.Event.Poll.new4_closure+5;
           P64[Hp - 8] = GHC.Event.Poll.new3_closure;
           P64[Hp] = GHC.Event.Poll.new2_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cammA_info" {
     block_cammA_info:
         const _cammA;
         const 1;
         const 1378684502046;
         const SalNx_srt+96;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.773130512 UTC

[section ""data" . GHC.Event.Poll.new_closure" {
     GHC.Event.Poll.new_closure:
         const GHC.Event.Poll.new_info;
         const 0;
 },
 GHC.Event.Poll.new_entry() //  []
         { []
         }
     {offset
       camnP: // global
           call GHC.Event.Poll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.new_info" {
     GHC.Event.Poll.new_info:
         const GHC.Event.Poll.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SalNx_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.777181701 UTC

[section ""data" . GHC.Event.Poll.PollFd_closure" {
     GHC.Event.Poll.PollFd_closure:
         const GHC.Event.Poll.PollFd_info;
 },
 GHC.Event.Poll.PollFd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       camo1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto camo5; else goto camo4;
       camo5: // global
           HpAlloc = 32;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.PollFd_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       camo4: // global
           I64[Hp - 24] = GHC.Event.Poll.PollFd_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 23;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.PollFd_info" {
     GHC.Event.Poll.PollFd_info:
         const GHC.Event.Poll.PollFd_entry;
         const 0;
         const 14;
         const 12884901904;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.782141972 UTC

[section ""data" . GHC.Event.Poll.Poll_closure" {
     GHC.Event.Poll.Poll_closure:
         const GHC.Event.Poll.Poll_info;
 },
 GHC.Event.Poll.Poll_entry() //  [R2, R3]
         { []
         }
     {offset
       camoh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto camol; else goto camok;
       camol: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Poll.Poll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       camok: // global
           I64[Hp - 16] = GHC.Event.Poll.Poll_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.Poll_info" {
     GHC.Event.Poll.Poll_info:
         const GHC.Event.Poll.Poll_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.786372456 UTC

[section ""cstring" . iamot_str" {
     iamot_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,111,108,108,46,80,111,108,108,70,100]
 },
 GHC.Event.Poll.PollFd_con_entry() //  [R1]
         { []
         }
     {offset
       camos: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.PollFd_con_info" {
     GHC.Event.Poll.PollFd_con_info:
         const GHC.Event.Poll.PollFd_con_entry;
         const 12884901888;
         const 7;
         const iamot_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.790491977 UTC

[section ""cstring" . iamoA_str" {
     iamoA_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,80,111,108,108,46,80,111,108,108]
 },
 GHC.Event.Poll.Poll_con_entry() //  [R1]
         { []
         }
     {offset
       camoz: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Poll.Poll_con_info" {
     GHC.Event.Poll.Poll_con_info:
         const GHC.Event.Poll.Poll_con_entry;
         const 2;
         const 4;
         const iamoA_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:22.79499767 UTC

[section ""relreadonly" . SalNx_srt" {
     SalNx_srt:
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.Poll.$w$cshowsPrec1_closure;
         const GHC.Event.Poll.$fShowPollFd_$cshowsPrec_closure;
         const GHC.Event.Poll.$fShowPollFd_$cshow_closure;
         const GHC.Event.Poll.$fShowPollFd1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const GHC.Event.Array.loop_closure;
         const GHC.Event.Array.removeAt_closure;
         const GHC.Event.Array.findIndex_closure;
         const GHC.Event.Array.$wsnoc_closure;
         const GHC.Event.Array.$wlvl_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Poll.new5_closure;
         const lvl3_rajBc_closure;
         const lvl5_rajBe_closure;
         const lvl6_rajBf_closure;
         const lvl10_rajBj_closure;
         const lvl11_rajBk_closure;
         const GHC.Event.Poll.new4_closure;
         const GHC.Event.Poll.new1_closure;
         const GHC.Event.Poll.new3_closure;
 }]

