
==================== Output Cmm ====================
2018-03-16 16:04:29.082279146 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:29.082741963 UTC

[section ""cstring" . lvl_r9ldZ_bytes" {
     lvl_r9ldZ_bytes:
         I8[] [75,81,117,101,117,101,32,98,97,99,107,32,101,110,100,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,116,104,105,115,32,112,108,97,116,102,111,114,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.083579352 UTC

[section ""data" . GHC.Event.KQueue.new_closure" {
     GHC.Event.KQueue.new_closure:
         const GHC.Event.KQueue.new_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.KQueue.new_entry() //  [R1]
         { info_tbl: [(c9lea,
                       label: GHC.Event.KQueue.new_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9lea: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9leb; else goto c9lec;
       c9leb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9lec: // global
           (_c9le5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9le5::I64 == 0) goto c9le7; else goto c9le6;
       c9le7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9le6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9le5::I64;
           I64[Sp - 24] = block_c9le8_info;
           R2 = lvl_r9ldZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9le8() //  [R1]
         { info_tbl: [(c9le8,
                       label: block_c9le8_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9le8: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.084569819 UTC

[section ""data" . GHC.Event.KQueue.available_closure" {
     GHC.Event.KQueue.available_closure:
         const GHC.Types.False_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.085120933 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule4_bytes" {
     GHC.Event.KQueue.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.085711232 UTC

[section ""data" . GHC.Event.KQueue.$trModule3_closure" {
     GHC.Event.KQueue.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.086198502 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule2_bytes" {
     GHC.Event.KQueue.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,75,81,117,101,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.086765676 UTC

[section ""data" . GHC.Event.KQueue.$trModule1_closure" {
     GHC.Event.KQueue.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.087338603 UTC

[section ""data" . GHC.Event.KQueue.$trModule_closure" {
     GHC.Event.KQueue.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.KQueue.$trModule3_closure+1;
         const GHC.Event.KQueue.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.087854366 UTC

[section ""relreadonly" . S9leg_srt" {
     S9leg_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.088410806 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:29.088917842 UTC

[section ""cstring" . lvl_r9ldZ_bytes" {
     lvl_r9ldZ_bytes:
         I8[] [75,81,117,101,117,101,32,98,97,99,107,32,101,110,100,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,116,104,105,115,32,112,108,97,116,102,111,114,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.089735216 UTC

[section ""data" . GHC.Event.KQueue.new_closure" {
     GHC.Event.KQueue.new_closure:
         const GHC.Event.KQueue.new_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.KQueue.new_entry() //  [R1]
         { info_tbl: [(c9lep,
                       label: GHC.Event.KQueue.new_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9lep: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9leq; else goto c9ler;
       c9leq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ler: // global
           (_c9lek::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9lek::I64 == 0) goto c9lem; else goto c9lel;
       c9lem: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9lel: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9lek::I64;
           I64[Sp - 24] = block_c9len_info;
           R2 = lvl_r9ldZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9len() //  [R1]
         { info_tbl: [(c9len,
                       label: block_c9len_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9len: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.090734186 UTC

[section ""data" . GHC.Event.KQueue.available_closure" {
     GHC.Event.KQueue.available_closure:
         const GHC.Types.False_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.091236744 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule4_bytes" {
     GHC.Event.KQueue.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.091770205 UTC

[section ""data" . GHC.Event.KQueue.$trModule3_closure" {
     GHC.Event.KQueue.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.092282686 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule2_bytes" {
     GHC.Event.KQueue.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,75,81,117,101,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.092827161 UTC

[section ""data" . GHC.Event.KQueue.$trModule1_closure" {
     GHC.Event.KQueue.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.093561489 UTC

[section ""data" . GHC.Event.KQueue.$trModule_closure" {
     GHC.Event.KQueue.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.KQueue.$trModule3_closure+1;
         const GHC.Event.KQueue.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.094126786 UTC

[section ""relreadonly" . S9leg_srt" {
     S9leg_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.094866132 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:29.095984588 UTC

[section ""cstring" . lvl_r9ldZ_bytes" {
     lvl_r9ldZ_bytes:
         I8[] [75,81,117,101,117,101,32,98,97,99,107,32,101,110,100,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,116,104,105,115,32,112,108,97,116,102,111,114,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.098023491 UTC

[section ""data" . GHC.Event.KQueue.new_closure" {
     GHC.Event.KQueue.new_closure:
         const GHC.Event.KQueue.new_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.KQueue.new_entry() //  [R1]
         { info_tbl: [(c9leE,
                       label: GHC.Event.KQueue.new_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9leE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9leF; else goto c9leG;
       c9leF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9leG: // global
           (_c9lez::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9lez::I64 == 0) goto c9leB; else goto c9leA;
       c9leB: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9leA: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9lez::I64;
           I64[Sp - 24] = block_c9leC_info;
           R2 = lvl_r9ldZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9leC() //  [R1]
         { info_tbl: [(c9leC,
                       label: block_c9leC_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9leC: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.103513471 UTC

[section ""data" . GHC.Event.KQueue.available_closure" {
     GHC.Event.KQueue.available_closure:
         const GHC.Types.False_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.105703458 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule4_bytes" {
     GHC.Event.KQueue.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.107429487 UTC

[section ""data" . GHC.Event.KQueue.$trModule3_closure" {
     GHC.Event.KQueue.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.109792254 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule2_bytes" {
     GHC.Event.KQueue.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,75,81,117,101,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.111383803 UTC

[section ""data" . GHC.Event.KQueue.$trModule1_closure" {
     GHC.Event.KQueue.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.113068305 UTC

[section ""data" . GHC.Event.KQueue.$trModule_closure" {
     GHC.Event.KQueue.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.KQueue.$trModule3_closure+1;
         const GHC.Event.KQueue.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.114806212 UTC

[section ""relreadonly" . S9leg_srt" {
     S9leg_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.135562199 UTC

[]


==================== Output Cmm ====================
2018-03-16 16:04:29.136626414 UTC

[section ""cstring" . lvl_r9ldZ_bytes" {
     lvl_r9ldZ_bytes:
         I8[] [75,81,117,101,117,101,32,98,97,99,107,32,101,110,100,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,102,111,114,32,116,104,105,115,32,112,108,97,116,102,111,114,109]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.13888974 UTC

[section ""data" . GHC.Event.KQueue.new_closure" {
     GHC.Event.KQueue.new_closure:
         const GHC.Event.KQueue.new_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.KQueue.new_entry() //  [R1]
         { info_tbl: [(c9lfb,
                       label: GHC.Event.KQueue.new_info
                       rep:HeapRep static { Thunk })]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9lfb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9lfc; else goto c9lfd;
       c9lfc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9lfd: // global
           (_c9lf6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9lf6::I64 == 0) goto c9lf8; else goto c9lf7;
       c9lf8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9lf7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9lf6::I64;
           I64[Sp - 24] = block_c9lf9_info;
           R2 = lvl_r9ldZ_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 _c9lf9() //  [R1]
         { info_tbl: [(c9lf9,
                       label: block_c9lf9_info
                       rep:StackRep [])]
           stack_info: arg_space: 0 updfr_space: Nothing
         }
     {offset
       c9lf9: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.14569251 UTC

[section ""data" . GHC.Event.KQueue.available_closure" {
     GHC.Event.KQueue.available_closure:
         const GHC.Types.False_con_info;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.148804866 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule4_bytes" {
     GHC.Event.KQueue.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.15134992 UTC

[section ""data" . GHC.Event.KQueue.$trModule3_closure" {
     GHC.Event.KQueue.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule4_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.153634293 UTC

[section ""cstring" . GHC.Event.KQueue.$trModule2_bytes" {
     GHC.Event.KQueue.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,75,81,117,101,117,101]
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.155788763 UTC

[section ""data" . GHC.Event.KQueue.$trModule1_closure" {
     GHC.Event.KQueue.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.KQueue.$trModule2_bytes;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.158215566 UTC

[section ""data" . GHC.Event.KQueue.$trModule_closure" {
     GHC.Event.KQueue.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.KQueue.$trModule3_closure+1;
         const GHC.Event.KQueue.$trModule1_closure+1;
         const 3;
 }]


==================== Output Cmm ====================
2018-03-16 16:04:29.160595865 UTC

[section ""relreadonly" . S9lfh_srt" {
     S9lfh_srt:
         const GHC.Err.errorWithoutStackTrace_closure;
 }]

