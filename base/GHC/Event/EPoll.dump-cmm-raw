
==================== Raw Cmm ====================
2018-03-16 16:04:39.559335351 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:39.561657287 UTC

[section ""data" . GHC.Event.EPoll.$WEPoll_closure" {
     GHC.Event.EPoll.$WEPoll_closure:
         const GHC.Event.EPoll.$WEPoll_info;
 },
 GHC.Event.EPoll.$WEPoll_entry() //  [R2, R3]
         { []
         }
     {offset
       c9z9B: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9z9K; else goto c9z9L;
       c9z9K: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$WEPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9z9L: // global
           I64[Sp - 16] = block_c9z9y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9z9R; else goto c9z9z;
       u9z9R: // global
           call _c9z9y(R1) args: 0, res: 0, upd: 0;
       c9z9z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$WEPoll_info" {
     GHC.Event.EPoll.$WEPoll_info:
         const GHC.Event.EPoll.$WEPoll_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9z9y() //  [R1]
         { []
         }
     {offset
       c9z9y: // global
           I64[Sp] = block_c9z9E_info;
           _s9y0e::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0e::I64;
           if (R1 & 7 != 0) goto u9z9Q; else goto c9z9F;
       u9z9Q: // global
           call _c9z9E(R1) args: 0, res: 0, upd: 0;
       c9z9F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9z9y_info" {
     block_c9z9y_info:
         const _c9z9y;
         const 1;
         const 30;
 },
 _c9z9E() //  [R1]
         { []
         }
     {offset
       c9z9E: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9z9P; else goto c9z9O;
       c9z9P: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9z9O: // global
           _s9y0g::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = _s9y0g::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9z9E_info" {
     block_c9z9E_info:
         const _c9z9E;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.568637075 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$calignment_closure" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_closure:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$calignment_entry() //  []
         { []
         }
     {offset
       c9zab: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent_$calignment_info" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_info:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.571716538 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent7_closure" {
     GHC.Event.EPoll.$fStorableEvent7_closure:
         const GHC.Types.I#_con_info;
         const 12;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.573650524 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry() //  []
         { []
         }
     {offset
       c9zao: // global
           R1 = GHC.Event.EPoll.$fStorableEvent7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_info" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_info:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.577701929 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent2_closure" {
     GHC.Event.EPoll.$fStorableEvent2_closure:
         const GHC.Event.EPoll.$fStorableEvent2_info;
 },
 GHC.Event.EPoll.$fStorableEvent2_entry() //  [R2]
         { []
         }
     {offset
       c9zaD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zaM; else goto c9zaN;
       c9zaM: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zaN: // global
           I64[Sp - 8] = block_c9zaA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zaR; else goto c9zaB;
       u9zaR: // global
           call _c9zaA(R1) args: 0, res: 0, upd: 0;
       c9zaB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent2_info" {
     GHC.Event.EPoll.$fStorableEvent2_info:
         const GHC.Event.EPoll.$fStorableEvent2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9zaA() //  [R1]
         { []
         }
     {offset
       c9zaA: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zaQ; else goto c9zaP;
       c9zaQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zaP: // global
           _s9y0m::I64 = I64[R1 + 7];
           _s9y0p::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0m::I64]);
           _s9y0t::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0m::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y0t::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0p::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zaA_info" {
     block_c9zaA_info:
         const _c9zaA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.586101701 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent1_closure" {
     GHC.Event.EPoll.$fStorableEvent1_closure:
         const GHC.Event.EPoll.$fStorableEvent1_info;
 },
 GHC.Event.EPoll.$fStorableEvent1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zbb: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zbp; else goto c9zbq;
       c9zbp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zbq: // global
           I64[Sp - 16] = block_c9zb8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zbB; else goto c9zb9;
       u9zbB: // global
           call _c9zb8(R1) args: 0, res: 0, upd: 0;
       c9zb9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent1_info" {
     GHC.Event.EPoll.$fStorableEvent1_info:
         const GHC.Event.EPoll.$fStorableEvent1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9zb8() //  [R1]
         { []
         }
     {offset
       c9zb8: // global
           I64[Sp] = block_c9zbe_info;
           _s9y0B::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0B::I64;
           if (R1 & 7 != 0) goto u9zbA; else goto c9zbf;
       u9zbA: // global
           call _c9zbe(R1) args: 0, res: 0, upd: 0;
       c9zbf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zb8_info" {
     block_c9zb8_info:
         const _c9zb8;
         const 1;
         const 30;
 },
 _c9zbe() //  [R1]
         { []
         }
     {offset
       c9zbe: // global
           I64[Sp - 8] = block_c9zbj_info;
           _s9y0E::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y0E::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zbC; else goto c9zbk;
       u9zbC: // global
           call _c9zbj(R1) args: 0, res: 0, upd: 0;
       c9zbk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zbe_info" {
     block_c9zbe_info:
         const _c9zbe;
         const 65;
         const 30;
 },
 _c9zbj() //  [R1]
         { []
         }
     {offset
       c9zbj: // global
           _s9y0E::P64 = P64[Sp + 8];
           I32[I64[Sp + 16]] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 8] = block_c9zbo_info;
           R1 = _s9y0E::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9zbD; else goto c9zbu;
       u9zbD: // global
           call _c9zbo(R1) args: 0, res: 0, upd: 0;
       c9zbu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zbj_info" {
     block_c9zbj_info:
         const _c9zbj;
         const 130;
         const 30;
 },
 _c9zbo() //  [R1]
         { []
         }
     {offset
       c9zbo: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zbo_info" {
     block_c9zbo_info:
         const _c9zbo;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.596853418 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent4_closure" {
     GHC.Event.EPoll.$fStorableEvent4_closure:
         const GHC.Event.EPoll.$fStorableEvent4_info;
 },
 GHC.Event.EPoll.$fStorableEvent4_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zcb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zcs; else goto c9zct;
       c9zcs: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zct: // global
           I64[Sp - 16] = block_c9zc8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zcz; else goto c9zc9;
       u9zcz: // global
           call _c9zc8(R1) args: 0, res: 0, upd: 0;
       c9zc9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent4_info" {
     GHC.Event.EPoll.$fStorableEvent4_info:
         const GHC.Event.EPoll.$fStorableEvent4_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9zc8() //  [R1]
         { []
         }
     {offset
       c9zc8: // global
           I64[Sp] = block_c9zce_info;
           _s9y0Q::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y0Q::I64;
           if (R1 & 7 != 0) goto u9zcy; else goto c9zcf;
       u9zcy: // global
           call _c9zce(R1) args: 0, res: 0, upd: 0;
       c9zcf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zc8_info" {
     block_c9zc8_info:
         const _c9zc8;
         const 1;
         const 30;
 },
 _c9zce() //  [R1]
         { []
         }
     {offset
       c9zce: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zcx; else goto c9zcw;
       c9zcx: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zcw: // global
           _s9y0T::I64 = I64[Sp + 8] + I64[R1 + 7];
           _s9y0W::I64 = %MO_UU_Conv_W32_W64(I32[_s9y0T::I64]);
           _s9y10::I64 = %MO_SS_Conv_W32_W64(I32[_s9y0T::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y10::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y0W::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zce_info" {
     block_c9zce_info:
         const _c9zce;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.605360455 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent6_closure" {
     GHC.Event.EPoll.$fStorableEvent6_closure:
         const GHC.Event.EPoll.$fStorableEvent6_info;
 },
 GHC.Event.EPoll.$fStorableEvent6_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zcZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zdj; else goto c9zdk;
       c9zdj: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zdk: // global
           I64[Sp - 16] = block_c9zcW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zdq; else goto c9zcX;
       u9zdq: // global
           call _c9zcW(R1) args: 0, res: 0, upd: 0;
       c9zcX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent6_info" {
     GHC.Event.EPoll.$fStorableEvent6_info:
         const GHC.Event.EPoll.$fStorableEvent6_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9zcW() //  [R1]
         { []
         }
     {offset
       c9zcW: // global
           I64[Sp] = block_c9zd2_info;
           _s9y18::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y18::I64;
           if (R1 & 7 != 0) goto u9zdp; else goto c9zd3;
       u9zdp: // global
           call _c9zd2(R1) args: 0, res: 0, upd: 0;
       c9zd3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zcW_info" {
     block_c9zcW_info:
         const _c9zcW;
         const 1;
         const 30;
 },
 _c9zd2() //  [R1]
         { []
         }
     {offset
       c9zd2: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zdo; else goto c9zdn;
       c9zdo: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zdn: // global
           _s9y1b::I64 = I64[Sp + 8] + I64[R1 + 7] * 12;
           _s9y1f::I64 = %MO_UU_Conv_W32_W64(I32[_s9y1b::I64]);
           _s9y1j::I64 = %MO_SS_Conv_W32_W64(I32[_s9y1b::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9y1j::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9y1f::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zd2_info" {
     block_c9zd2_info:
         const _c9zd2;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.614225974 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent3_closure" {
     GHC.Event.EPoll.$fStorableEvent3_closure:
         const GHC.Event.EPoll.$fStorableEvent3_info;
 },
 GHC.Event.EPoll.$fStorableEvent3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zdR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zed; else goto c9zee;
       c9zed: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zee: // global
           I64[Sp - 24] = block_c9zdO_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zeq; else goto c9zdP;
       u9zeq: // global
           call _c9zdO(R1) args: 0, res: 0, upd: 0;
       c9zdP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent3_info" {
     GHC.Event.EPoll.$fStorableEvent3_info:
         const GHC.Event.EPoll.$fStorableEvent3_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9zdO() //  [R1]
         { []
         }
     {offset
       c9zdO: // global
           I64[Sp] = block_c9zdU_info;
           _s9y1s::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1s::I64;
           if (R1 & 7 != 0) goto u9zep; else goto c9zdV;
       u9zep: // global
           call _c9zdU(R1) args: 0, res: 0, upd: 0;
       c9zdV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zdO_info" {
     block_c9zdO_info:
         const _c9zdO;
         const 2;
         const 30;
 },
 _c9zdU() //  [R1]
         { []
         }
     {offset
       c9zdU: // global
           I64[Sp] = block_c9zdZ_info;
           _s9y1u::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1u::I64;
           if (R1 & 7 != 0) goto u9zer; else goto c9ze0;
       u9zer: // global
           call _c9zdZ(R1) args: 0, res: 0, upd: 0;
       c9ze0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zdU_info" {
     block_c9zdU_info:
         const _c9zdU;
         const 66;
         const 30;
 },
 _c9zdZ() //  [R1]
         { []
         }
     {offset
       c9zdZ: // global
           I64[Sp - 8] = block_c9ze4_info;
           _s9y1x::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1x::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zes; else goto c9ze5;
       u9zes: // global
           call _c9ze4(R1) args: 0, res: 0, upd: 0;
       c9ze5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zdZ_info" {
     block_c9zdZ_info:
         const _c9zdZ;
         const 194;
         const 30;
 },
 _c9ze4() //  [R1]
         { []
         }
     {offset
       c9ze4: // global
           _s9y1x::P64 = P64[Sp + 8];
           _s9y1A::I64 = I64[Sp + 16] + I64[Sp + 24];
           I32[_s9y1A::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9zec_info;
           R1 = _s9y1x::P64;
           I64[Sp + 24] = _s9y1A::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zet; else goto c9zej;
       u9zet: // global
           call _c9zec(R1) args: 0, res: 0, upd: 0;
       c9zej: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ze4_info" {
     block_c9ze4_info:
         const _c9ze4;
         const 387;
         const 30;
 },
 _c9zec() //  [R1]
         { []
         }
     {offset
       c9zec: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zec_info" {
     block_c9zec_info:
         const _c9zec;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.628094494 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent5_closure" {
     GHC.Event.EPoll.$fStorableEvent5_closure:
         const GHC.Event.EPoll.$fStorableEvent5_info;
 },
 GHC.Event.EPoll.$fStorableEvent5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zf5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zfu; else goto c9zfv;
       c9zfu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zfv: // global
           I64[Sp - 24] = block_c9zf2_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zfH; else goto c9zf3;
       u9zfH: // global
           call _c9zf2(R1) args: 0, res: 0, upd: 0;
       c9zf3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent5_info" {
     GHC.Event.EPoll.$fStorableEvent5_info:
         const GHC.Event.EPoll.$fStorableEvent5_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9zf2() //  [R1]
         { []
         }
     {offset
       c9zf2: // global
           I64[Sp] = block_c9zf8_info;
           _s9y1L::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y1L::I64;
           if (R1 & 7 != 0) goto u9zfG; else goto c9zf9;
       u9zfG: // global
           call _c9zf8(R1) args: 0, res: 0, upd: 0;
       c9zf9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zf2_info" {
     block_c9zf2_info:
         const _c9zf2;
         const 2;
         const 30;
 },
 _c9zf8() //  [R1]
         { []
         }
     {offset
       c9zf8: // global
           I64[Sp] = block_c9zfd_info;
           _s9y1N::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9y1N::I64;
           if (R1 & 7 != 0) goto u9zfI; else goto c9zfe;
       u9zfI: // global
           call _c9zfd(R1) args: 0, res: 0, upd: 0;
       c9zfe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zf8_info" {
     block_c9zf8_info:
         const _c9zf8;
         const 66;
         const 30;
 },
 _c9zfd() //  [R1]
         { []
         }
     {offset
       c9zfd: // global
           I64[Sp - 8] = block_c9zfi_info;
           _s9y1Q::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9y1Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zfJ; else goto c9zfj;
       u9zfJ: // global
           call _c9zfi(R1) args: 0, res: 0, upd: 0;
       c9zfj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zfd_info" {
     block_c9zfd_info:
         const _c9zfd;
         const 194;
         const 30;
 },
 _c9zfi() //  [R1]
         { []
         }
     {offset
       c9zfi: // global
           _s9y1Q::P64 = P64[Sp + 8];
           _s9y1T::I64 = I64[Sp + 16] + I64[Sp + 24] * 12;
           I32[_s9y1T::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9zft_info;
           R1 = _s9y1Q::P64;
           I64[Sp + 24] = _s9y1T::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zfK; else goto c9zfA;
       u9zfK: // global
           call _c9zft(R1) args: 0, res: 0, upd: 0;
       c9zfA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zfi_info" {
     block_c9zfi_info:
         const _c9zfi;
         const 387;
         const 30;
 },
 _c9zft() //  [R1]
         { []
         }
     {offset
       c9zft: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zft_info" {
     block_c9zft_info:
         const _c9zft;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.64068483 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_closure" {
     GHC.Event.EPoll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure+1;
         const GHC.Event.EPoll.$fStorableEvent_$calignment_closure+1;
         const GHC.Event.EPoll.$fStorableEvent6_closure+3;
         const GHC.Event.EPoll.$fStorableEvent5_closure+4;
         const GHC.Event.EPoll.$fStorableEvent4_closure+3;
         const GHC.Event.EPoll.$fStorableEvent3_closure+4;
         const GHC.Event.EPoll.$fStorableEvent2_closure+2;
         const GHC.Event.EPoll.$fStorableEvent1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.64254863 UTC

[section ""data" . GHC.Event.EPoll.$fEqEventType_closure" {
     GHC.Event.EPoll.$fEqEventType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Word.eqWord32_closure+2;
         const GHC.Word.neWord32_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.644508697 UTC

[section ""data" . GHC.Event.EPoll.$fBitsEventType_closure" {
     GHC.Event.EPoll.$fBitsEventType_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.EPoll.$fEqEventType_closure+1;
         const GHC.Word.$fBitsWord32_$c.&._closure+2;
         const GHC.Word.$fBitsWord32_$c.|._closure+2;
         const GHC.Word.$fBitsWord32_$cxor_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplement_closure+1;
         const GHC.Word.$fBitsWord32_$cshift_closure+2;
         const GHC.Word.$fBitsWord32_$crotate_closure+2;
         const GHC.Word.$fBitsWord32_$cminBound_closure;
         const GHC.Word.$fBitsWord32_$cbit_closure+1;
         const GHC.Word.$fBitsWord32_$csetBit_closure+2;
         const GHC.Word.$fBitsWord32_$cclearBit_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplementBit_closure+2;
         const GHC.Word.$fBitsWord32_$ctestBit_closure+2;
         const GHC.Word.$fBitsWord32_$cbitSizeMaybe_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fBitsWord32_$cisSigned_closure+1;
         const GHC.Word.$fBitsWord32_$cshiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cshiftR_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftR_closure+2;
         const GHC.Word.$fBitsWord32_$crotateL_closure+2;
         const GHC.Word.$fBitsWord32_$crotateR_closure+2;
         const GHC.Word.$fBitsWord32_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.647534196 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd1_closure" {
     GHC.Event.EPoll.fromEPollFd1_closure:
         const GHC.Event.EPoll.fromEPollFd1_info;
 },
 GHC.Event.EPoll.fromEPollFd1_entry() //  [R2]
         { []
         }
     {offset
       c9zgo: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.fromEPollFd1_info" {
     GHC.Event.EPoll.fromEPollFd1_info:
         const GHC.Event.EPoll.fromEPollFd1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.650995362 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd_closure" {
     GHC.Event.EPoll.fromEPollFd_closure:
         const GHC.Event.EPoll.fromEPollFd_info;
 },
 GHC.Event.EPoll.fromEPollFd_entry() //  [R2]
         { []
         }
     {offset
       c9zgB: // global
           R2 = R2;
           call GHC.Event.EPoll.fromEPollFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.fromEPollFd_info" {
     GHC.Event.EPoll.fromEPollFd_info:
         const GHC.Event.EPoll.fromEPollFd_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.654392826 UTC

[section ""data" . GHC.Event.EPoll.unEventType1_closure" {
     GHC.Event.EPoll.unEventType1_closure:
         const GHC.Event.EPoll.unEventType1_info;
 },
 GHC.Event.EPoll.unEventType1_entry() //  [R2]
         { []
         }
     {offset
       c9zgM: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.unEventType1_info" {
     GHC.Event.EPoll.unEventType1_info:
         const GHC.Event.EPoll.unEventType1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.658540054 UTC

[section ""data" . GHC.Event.EPoll.unEventType_closure" {
     GHC.Event.EPoll.unEventType_closure:
         const GHC.Event.EPoll.unEventType_info;
 },
 GHC.Event.EPoll.unEventType_entry() //  [R2]
         { []
         }
     {offset
       c9zgZ: // global
           R2 = R2;
           call GHC.Event.EPoll.unEventType1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.unEventType_info" {
     GHC.Event.EPoll.unEventType_info:
         const GHC.Event.EPoll.unEventType_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.662321615 UTC

[section ""data" . GHC.Event.EPoll.eventFd_closure" {
     GHC.Event.EPoll.eventFd_closure:
         const GHC.Event.EPoll.eventFd_info;
 },
 GHC.Event.EPoll.eventFd_entry() //  [R2]
         { []
         }
     {offset
       c9zhd: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zhe; else goto c9zhf;
       c9zhe: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zhf: // global
           I64[Sp - 8] = block_c9zha_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zhj; else goto c9zhb;
       u9zhj: // global
           call _c9zha(R1) args: 0, res: 0, upd: 0;
       c9zhb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.eventFd_info" {
     GHC.Event.EPoll.eventFd_info:
         const GHC.Event.EPoll.eventFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9zha() //  [R1]
         { []
         }
     {offset
       c9zha: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zha_info" {
     block_c9zha_info:
         const _c9zha;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.668267946 UTC

[section ""data" . GHC.Event.EPoll.eventTypes_closure" {
     GHC.Event.EPoll.eventTypes_closure:
         const GHC.Event.EPoll.eventTypes_info;
 },
 GHC.Event.EPoll.eventTypes_entry() //  [R2]
         { []
         }
     {offset
       c9zhC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zhD; else goto c9zhE;
       c9zhD: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventTypes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zhE: // global
           I64[Sp - 8] = block_c9zhz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zhI; else goto c9zhA;
       u9zhI: // global
           call _c9zhz(R1) args: 0, res: 0, upd: 0;
       c9zhA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.eventTypes_info" {
     GHC.Event.EPoll.eventTypes_info:
         const GHC.Event.EPoll.eventTypes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9zhz() //  [R1]
         { []
         }
     {offset
       c9zhz: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zhz_info" {
     block_c9zhz_info:
         const _c9zhz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.673640971 UTC

[section ""data" . GHC.Event.EPoll.epollEvents_closure" {
     GHC.Event.EPoll.epollEvents_closure:
         const GHC.Event.EPoll.epollEvents_info;
 },
 GHC.Event.EPoll.epollEvents_entry() //  [R2]
         { []
         }
     {offset
       c9zi1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zi5; else goto c9zi6;
       c9zi5: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zi6: // global
           I64[Sp - 8] = block_c9zhY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zia; else goto c9zhZ;
       u9zia: // global
           call _c9zhY(R1) args: 0, res: 0, upd: 0;
       c9zhZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.epollEvents_info" {
     GHC.Event.EPoll.epollEvents_info:
         const GHC.Event.EPoll.epollEvents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9zhY() //  [R1]
         { []
         }
     {offset
       c9zhY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9zi9; else goto c9zi8;
       c9zi9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zi8: // global
           _s9y2d::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s9y2d::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zhY_info" {
     block_c9zhY_info:
         const _c9zhY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.679327127 UTC

[section ""data" . GHC.Event.EPoll.epollFd_closure" {
     GHC.Event.EPoll.epollFd_closure:
         const GHC.Event.EPoll.epollFd_info;
 },
 GHC.Event.EPoll.epollFd_entry() //  [R2]
         { []
         }
     {offset
       c9zis: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9ziw; else goto c9zix;
       c9ziw: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zix: // global
           I64[Sp - 8] = block_c9zip_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ziB; else goto c9ziq;
       u9ziB: // global
           call _c9zip(R1) args: 0, res: 0, upd: 0;
       c9ziq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.epollFd_info" {
     GHC.Event.EPoll.epollFd_info:
         const GHC.Event.EPoll.epollFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9zip() //  [R1]
         { []
         }
     {offset
       c9zip: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9ziA; else goto c9ziz;
       c9ziA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ziz: // global
           _s9y2g::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y2g::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zip_info" {
     block_c9zip_info:
         const _c9zip;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.68411371 UTC

[section ""data" . GHC.Event.EPoll.available_closure" {
     GHC.Event.EPoll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.68638513 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule4_bytes" {
     GHC.Event.EPoll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.688018654 UTC

[section ""data" . GHC.Event.EPoll.$trModule3_closure" {
     GHC.Event.EPoll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.689805637 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule2_bytes" {
     GHC.Event.EPoll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,69,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.691969647 UTC

[section ""data" . GHC.Event.EPoll.$trModule1_closure" {
     GHC.Event.EPoll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.693628676 UTC

[section ""data" . GHC.Event.EPoll.$trModule_closure" {
     GHC.Event.EPoll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.EPoll.$trModule3_closure+1;
         const GHC.Event.EPoll.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.695386686 UTC

[section ""data" . $krep_r9xZP_closure" {
     $krep_r9xZP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.69706761 UTC

[section ""data" . $krep1_r9xZQ_closure" {
     $krep1_r9xZQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.698828044 UTC

[section ""data" . $krep2_r9xZR_closure" {
     $krep2_r9xZR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.700476235 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPollFd2_bytes" {
     GHC.Event.EPoll.$tcEPollFd2_bytes:
         I8[] [69,80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.70216042 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd1_closure" {
     GHC.Event.EPoll.$tcEPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPollFd2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.703862471 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd_closure" {
     GHC.Event.EPoll.$tcEPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11408974392712426853;
         const 10860743297622841984;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.705670956 UTC

[section ""data" . $krep3_r9xZS_closure" {
     $krep3_r9xZS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.707363567 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd1_closure" {
     GHC.Event.EPoll.$tc'EPollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep3_r9xZS_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.709117015 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPollFd3_bytes" {
     GHC.Event.EPoll.$tc'EPollFd3_bytes:
         I8[] [39,69,80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.71080554 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd2_closure" {
     GHC.Event.EPoll.$tc'EPollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPollFd3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.71250796 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd_closure" {
     GHC.Event.EPoll.$tc'EPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd2_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd1_closure+4;
         const 13859366844265277896;
         const 3104986725924328114;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.71510271 UTC

[section ""cstring" . GHC.Event.EPoll.$tcControlOp2_bytes" {
     GHC.Event.EPoll.$tcControlOp2_bytes:
         I8[] [67,111,110,116,114,111,108,79,112]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.717351328 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp1_closure" {
     GHC.Event.EPoll.$tcControlOp1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcControlOp2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.719054433 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp_closure" {
     GHC.Event.EPoll.$tcControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcControlOp1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16670684287779227039;
         const 7079239768931473179;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.720881891 UTC

[section ""data" . $krep4_r9xZT_closure" {
     $krep4_r9xZT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcControlOp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.722715478 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp1_closure" {
     GHC.Event.EPoll.$tc'ControlOp1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep4_r9xZT_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.724467414 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'ControlOp3_bytes" {
     GHC.Event.EPoll.$tc'ControlOp3_bytes:
         I8[] [39,67,111,110,116,114,111,108,79,112]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.726697342 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp2_closure" {
     GHC.Event.EPoll.$tc'ControlOp2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'ControlOp3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.728423836 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp_closure" {
     GHC.Event.EPoll.$tc'ControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp2_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp1_closure+4;
         const 17423659744934710370;
         const 14737300415055323322;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.730168786 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEventType2_bytes" {
     GHC.Event.EPoll.$tcEventType2_bytes:
         I8[] [69,118,101,110,116,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.731838894 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType1_closure" {
     GHC.Event.EPoll.$tcEventType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEventType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.733560961 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType_closure" {
     GHC.Event.EPoll.$tcEventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEventType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6882131545153803920;
         const 11603224301892798833;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.735406829 UTC

[section ""data" . $krep5_r9xZU_closure" {
     $krep5_r9xZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEventType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.737188306 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType1_closure" {
     GHC.Event.EPoll.$tc'EventType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r9xZQ_closure+1;
         const $krep5_r9xZU_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.739292837 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EventType3_bytes" {
     GHC.Event.EPoll.$tc'EventType3_bytes:
         I8[] [39,69,118,101,110,116,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.740888639 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType2_closure" {
     GHC.Event.EPoll.$tc'EventType2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EventType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.74313591 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType_closure" {
     GHC.Event.EPoll.$tc'EventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EventType2_closure+1;
         const GHC.Event.EPoll.$tc'EventType1_closure+4;
         const 6895099112894632230;
         const 10353865251933672677;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.744834088 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEvent2_bytes" {
     GHC.Event.EPoll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.74649657 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent1_closure" {
     GHC.Event.EPoll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEvent2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.748243455 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent_closure" {
     GHC.Event.EPoll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9768726503562184735;
         const 14932995848660065219;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.750028655 UTC

[section ""data" . $krep6_r9xZV_closure" {
     $krep6_r9xZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.751678865 UTC

[section ""data" . $krep7_r9xZW_closure" {
     $krep7_r9xZW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9xZR_closure+1;
         const $krep6_r9xZV_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.753708522 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event1_closure" {
     GHC.Event.EPoll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r9xZU_closure+1;
         const $krep7_r9xZW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.755330426 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'Event3_bytes" {
     GHC.Event.EPoll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.757017637 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event2_closure" {
     GHC.Event.EPoll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'Event3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.758772998 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event_closure" {
     GHC.Event.EPoll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'Event2_closure+1;
         const GHC.Event.EPoll.$tc'Event1_closure+4;
         const 13898227050457859187;
         const 12870286929163337655;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.760477766 UTC

[section ""data" . $krep8_r9xZX_closure" {
     $krep8_r9xZX_closure:
         const :_con_info;
         const $krep6_r9xZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.762187679 UTC

[section ""data" . $krep9_r9xZY_closure" {
     $krep9_r9xZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep8_r9xZX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.763939873 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPoll2_bytes" {
     GHC.Event.EPoll.$tcEPoll2_bytes:
         I8[] [69,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.76561489 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll1_closure" {
     GHC.Event.EPoll.$tcEPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPoll2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.767903582 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll_closure" {
     GHC.Event.EPoll.$tcEPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16362945812962510240;
         const 15183678187331181316;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.770169867 UTC

[section ""data" . $krep10_r9xZZ_closure" {
     $krep10_r9xZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.771828243 UTC

[section ""data" . $krep11_r9y00_closure" {
     $krep11_r9y00_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9xZY_closure+1;
         const $krep10_r9xZZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.773524336 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll1_closure" {
     GHC.Event.EPoll.$tc'EPoll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9xZS_closure+1;
         const $krep11_r9y00_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.775211691 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPoll3_bytes" {
     GHC.Event.EPoll.$tc'EPoll3_bytes:
         I8[] [39,69,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.776850636 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll2_closure" {
     GHC.Event.EPoll.$tc'EPoll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPoll3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.778611255 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll_closure" {
     GHC.Event.EPoll.$tc'EPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPoll2_closure+1;
         const GHC.Event.EPoll.$tc'EPoll1_closure+4;
         const 11640704659469356468;
         const 11164042648060985378;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.780418925 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd4_bytes" {
     GHC.Event.EPoll.$fShowEPollFd4_bytes:
         I8[] [69,80,111,108,108,70,100,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.78256057 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd3_bytes" {
     GHC.Event.EPoll.$fShowEPollFd3_bytes:
         I8[] [102,114,111,109,69,80,111,108,108,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.784144548 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd2_bytes" {
     GHC.Event.EPoll.$fShowEPollFd2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.79146667 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec_closure" {
     GHC.Event.EPoll.$w$cshowsPrec_closure:
         const GHC.Event.EPoll.$w$cshowsPrec_info;
 },
 sat_s9y2o_entry() //  [R1]
         { []
         }
     {offset
       c9zk4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zk5; else goto c9zk6;
       c9zk5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zk6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2o_info" {
     sat_s9y2o_info:
         const sat_s9y2o_entry;
         const 1;
         const 16;
 },
 sat_s9y2s_entry() //  [R1]
         { []
         }
     {offset
       c9zk7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zkb; else goto c9zkc;
       c9zkb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zjV_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zkj; else goto c9zjW;
       u9zkj: // global
           call _c9zjV(R1) args: 0, res: 0, upd: 0;
       c9zjW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2s_info" {
     sat_s9y2s_info:
         const sat_s9y2s_entry;
         const 2;
         const 18;
 },
 _c9zjV() //  [R1]
         { []
         }
     {offset
       c9zjV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zkf; else goto c9zke;
       c9zkf: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zke: // global
           _s9y2n::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2o_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zk8_info;
           R4 = Hp - 16;
           R3 = _s9y2n::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zjV_info" {
     block_c9zjV_info:
         const _c9zjV;
         const 1;
         const 30;
 },
 _c9zk8() //  [R1, R2]
         { []
         }
     {offset
       c9zk8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zki; else goto c9zkh;
       c9zki: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zkh: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zk8_info" {
     block_c9zk8_info:
         const _c9zk8;
         const 0;
         const 30;
 },
 sat_s9y2t_entry() //  [R1]
         { []
         }
     {offset
       c9zkk: // global
           _s9y2t::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zkl; else goto c9zkm;
       c9zkm: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zko; else goto c9zkn;
       c9zko: // global
           HpAlloc = 32;
           goto c9zkl;
       c9zkl: // global
           R1 = _s9y2t::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2t::P64;
           _s9y2j::P64 = P64[_s9y2t::P64 + 16];
           _s9y2k::P64 = P64[_s9y2t::P64 + 24];
           I64[Hp - 24] = sat_s9y2s_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2t_info" {
     sat_s9y2t_info:
         const sat_s9y2t_entry;
         const 2;
         const 18;
 },
 sat_s9y2x_entry() //  [R1]
         { []
         }
     {offset
       c9zkM: // global
           _s9y2x::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zkN; else goto c9zkO;
       c9zkO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zkQ; else goto c9zkP;
       c9zkQ: // global
           HpAlloc = 24;
           goto c9zkN;
       c9zkN: // global
           R1 = _s9y2x::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2x::P64;
           _s9y2k::P64 = P64[_s9y2x::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2x_info" {
     sat_s9y2x_info:
         const sat_s9y2x_entry;
         const 1;
         const 16;
 },
 sat_s9y2B_entry() //  [R1]
         { []
         }
     {offset
       c9zkR: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zkV; else goto c9zkW;
       c9zkV: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zkW: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zkC_info;
           _s9y2k::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2k::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zl3; else goto c9zkD;
       u9zl3: // global
           call _c9zkC(R1) args: 0, res: 0, upd: 0;
       c9zkD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2B_info" {
     sat_s9y2B_info:
         const sat_s9y2B_entry;
         const 2;
         const 18;
 },
 _c9zkC() //  [R1]
         { []
         }
     {offset
       c9zkC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zkZ; else goto c9zkY;
       c9zkZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zkY: // global
           _s9y2v::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y2x_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zkS_info;
           R4 = Hp - 16;
           R3 = _s9y2v::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zkC_info" {
     block_c9zkC_info:
         const _c9zkC;
         const 1;
         const 30;
 },
 _c9zkS() //  [R1, R2]
         { []
         }
     {offset
       c9zkS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zl2; else goto c9zl1;
       c9zl2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zl1: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zkS_info" {
     block_c9zkS_info:
         const _c9zkS;
         const 0;
         const 30;
 },
 sat_s9y2C_entry() //  [R1]
         { []
         }
     {offset
       c9zl4: // global
           _s9y2C::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zl5; else goto c9zl6;
       c9zl6: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zl8; else goto c9zl7;
       c9zl8: // global
           HpAlloc = 32;
           goto c9zl5;
       c9zl5: // global
           R1 = _s9y2C::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zl7: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2C::P64;
           _s9y2j::P64 = P64[_s9y2C::P64 + 16];
           _s9y2k::P64 = P64[_s9y2C::P64 + 24];
           I64[Hp - 24] = sat_s9y2B_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2C_info" {
     sat_s9y2C_info:
         const sat_s9y2C_entry;
         const 2;
         const 18;
 },
 sat_s9y2D_entry() //  [R1]
         { []
         }
     {offset
       c9zl9: // global
           _s9y2D::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zla; else goto c9zlb;
       c9zlb: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zld; else goto c9zlc;
       c9zld: // global
           HpAlloc = 32;
           goto c9zla;
       c9zla: // global
           R1 = _s9y2D::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zlc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2D::P64;
           _s9y2j::P64 = P64[_s9y2D::P64 + 16];
           _s9y2k::P64 = P64[_s9y2D::P64 + 24];
           I64[Hp - 24] = sat_s9y2C_info;
           P64[Hp - 8] = _s9y2j::P64;
           P64[Hp] = _s9y2k::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2D_info" {
     sat_s9y2D_info:
         const sat_s9y2D_entry;
         const 2;
         const 18;
 },
 GHC.Event.EPoll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zlh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zll; else goto c9zlk;
       c9zll: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zlk: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9zlf; else goto c9zlg;
       c9zlf: // global
           I64[Hp - 48] = sat_s9y2t_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9zjN::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9zjN::P64;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9zlg: // global
           I64[Hp - 48] = sat_s9y2D_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$cshowsPrec_info" {
     GHC.Event.EPoll.$w$cshowsPrec_info:
         const GHC.Event.EPoll.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.815434352 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zmk: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zml; else goto c9zmm;
       c9zml: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zmm: // global
           I64[Sp - 24] = block_c9zmh_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zmq; else goto c9zmi;
       u9zmq: // global
           call _c9zmh(R1) args: 0, res: 0, upd: 0;
       c9zmi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c9zmh() //  [R1]
         { []
         }
     {offset
       c9zmh: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zmh_info" {
     block_c9zmh_info:
         const _c9zmh;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.820649348 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd5_closure" {
     GHC.Event.EPoll.$fShowEPollFd5_closure:
         const GHC.Event.EPoll.$fShowEPollFd5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEPollFd5_entry() //  [R1]
         { []
         }
     {offset
       c9zmG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zmH; else goto c9zmI;
       c9zmH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zmI: // global
           (_c9zmD::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zmD::I64 == 0) goto c9zmF; else goto c9zmE;
       c9zmF: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zmE: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zmD::I64;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd5_info" {
     GHC.Event.EPoll.$fShowEPollFd5_info:
         const GHC.Event.EPoll.$fShowEPollFd5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.826244469 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshow_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_info;
         const 0;
 },
 sat_s9y2P_entry() //  [R1]
         { []
         }
     {offset
       c9zn5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9znb; else goto c9znc;
       c9znb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9znc: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9zn2_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9znh; else goto c9zn3;
       u9znh: // global
           call _c9zn2(R1) args: 0, res: 0, upd: 0;
       c9zn3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2P_info" {
     sat_s9y2P_info:
         const sat_s9y2P_entry;
         const 1;
         const 4294967312;
         const S9yi5_srt;
 },
 _c9zn2() //  [R1]
         { []
         }
     {offset
       c9zn2: // global
           I64[Sp] = block_c9zn8_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zn2_info" {
     block_c9zn2_info:
         const _c9zn2;
         const 0;
         const 4294967326;
         const S9yi5_srt;
 },
 _c9zn8() //  [R1, R2]
         { []
         }
     {offset
       c9zn8: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zng; else goto c9znf;
       c9zng: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9znf: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zn8_info" {
     block_c9zn8_info:
         const _c9zn8;
         const 0;
         const 30;
 },
 sat_s9y2Q_entry() //  [R1]
         { []
         }
     {offset
       c9zni: // global
           _s9y2Q::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9znj; else goto c9znk;
       c9znk: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9znm; else goto c9znl;
       c9znm: // global
           HpAlloc = 24;
           goto c9znj;
       c9znj: // global
           R1 = _s9y2Q::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9znl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y2Q::P64;
           _s9y2J::P64 = P64[_s9y2Q::P64 + 16];
           I64[Hp - 16] = sat_s9y2P_info;
           P64[Hp] = _s9y2J::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y2Q_info" {
     sat_s9y2Q_info:
         const sat_s9y2Q_entry;
         const 1;
         const 4294967312;
         const S9yi5_srt;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9znn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9znr; else goto c9znq;
       c9znr: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9znq: // global
           I64[Hp - 16] = sat_s9y2Q_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd_$cshow_info" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_info:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9yi5_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.836158932 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd1_closure" {
     GHC.Event.EPoll.$fShowEPollFd1_closure:
         const GHC.Event.EPoll.$fShowEPollFd1_info;
 },
 GHC.Event.EPoll.$fShowEPollFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9znQ: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd1_info" {
     GHC.Event.EPoll.$fShowEPollFd1_info:
         const GHC.Event.EPoll.$fShowEPollFd1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.839949329 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zo1: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_info" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_info:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.843505561 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_closure" {
     GHC.Event.EPoll.$fShowEPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.845165891 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent4_bytes" {
     GHC.Event.EPoll.$fShowEvent4_bytes:
         I8[] [69,118,101,110,116,84,121,112,101,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.846874205 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent3_bytes" {
     GHC.Event.EPoll.$fShowEvent3_bytes:
         I8[] [117,110,69,118,101,110,116,84,121,112,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.853994911 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec2_closure" {
     GHC.Event.EPoll.$w$cshowsPrec2_closure:
         const GHC.Event.EPoll.$w$cshowsPrec2_info;
 },
 sat_s9y32_entry() //  [R1]
         { []
         }
     {offset
       c9zoz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zoA; else goto c9zoB;
       c9zoA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zoB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y32_info" {
     sat_s9y32_info:
         const sat_s9y32_entry;
         const 1;
         const 16;
 },
 sat_s9y36_entry() //  [R1]
         { []
         }
     {offset
       c9zoC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zoJ; else goto c9zoK;
       c9zoJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zoK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zoq_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zoR; else goto c9zor;
       u9zoR: // global
           call _c9zoq(R1) args: 0, res: 0, upd: 0;
       c9zor: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y36_info" {
     sat_s9y36_info:
         const sat_s9y36_entry;
         const 2;
         const 18;
 },
 _c9zoq() //  [R1]
         { []
         }
     {offset
       c9zoq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zoN; else goto c9zoM;
       c9zoN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zoM: // global
           _s9y30::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y32_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zoG_info;
           R3 = Hp - 16;
           R2 = _s9y30::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zoq_info" {
     block_c9zoq_info:
         const _c9zoq;
         const 1;
         const 30;
 },
 _c9zoG() //  [R1, R2]
         { []
         }
     {offset
       c9zoG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zoQ; else goto c9zoP;
       c9zoQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zoP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zoG_info" {
     block_c9zoG_info:
         const _c9zoG;
         const 0;
         const 30;
 },
 sat_s9y37_entry() //  [R1]
         { []
         }
     {offset
       c9zoS: // global
           _s9y37::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zoT; else goto c9zoU;
       c9zoU: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zoW; else goto c9zoV;
       c9zoW: // global
           HpAlloc = 32;
           goto c9zoT;
       c9zoT: // global
           R1 = _s9y37::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zoV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y37::P64;
           _s9y2W::P64 = P64[_s9y37::P64 + 16];
           _s9y2X::P64 = P64[_s9y37::P64 + 24];
           I64[Hp - 24] = sat_s9y36_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y37_info" {
     sat_s9y37_info:
         const sat_s9y37_entry;
         const 2;
         const 18;
 },
 sat_s9y3c_entry() //  [R1]
         { []
         }
     {offset
       c9zpk: // global
           _s9y3c::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zpl; else goto c9zpm;
       c9zpm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zpo; else goto c9zpn;
       c9zpo: // global
           HpAlloc = 24;
           goto c9zpl;
       c9zpl: // global
           R1 = _s9y3c::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3c::P64;
           _s9y2X::P64 = P64[_s9y3c::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3c_info" {
     sat_s9y3c_info:
         const sat_s9y3c_entry;
         const 1;
         const 16;
 },
 sat_s9y3g_entry() //  [R1]
         { []
         }
     {offset
       c9zpp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zpw; else goto c9zpx;
       c9zpw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zpa_info;
           _s9y2X::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y2X::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zpE; else goto c9zpb;
       u9zpE: // global
           call _c9zpa(R1) args: 0, res: 0, upd: 0;
       c9zpb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3g_info" {
     sat_s9y3g_info:
         const sat_s9y3g_entry;
         const 2;
         const 18;
 },
 _c9zpa() //  [R1]
         { []
         }
     {offset
       c9zpa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zpA; else goto c9zpz;
       c9zpA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zpz: // global
           _s9y39::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3c_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zpt_info;
           R3 = Hp - 16;
           R2 = _s9y39::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zpa_info" {
     block_c9zpa_info:
         const _c9zpa;
         const 1;
         const 30;
 },
 _c9zpt() //  [R1, R2]
         { []
         }
     {offset
       c9zpt: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zpD; else goto c9zpC;
       c9zpD: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zpC: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zpt_info" {
     block_c9zpt_info:
         const _c9zpt;
         const 0;
         const 30;
 },
 sat_s9y3h_entry() //  [R1]
         { []
         }
     {offset
       c9zpF: // global
           _s9y3h::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zpG; else goto c9zpH;
       c9zpH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zpJ; else goto c9zpI;
       c9zpJ: // global
           HpAlloc = 32;
           goto c9zpG;
       c9zpG: // global
           R1 = _s9y3h::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3h::P64;
           _s9y2W::P64 = P64[_s9y3h::P64 + 16];
           _s9y2X::P64 = P64[_s9y3h::P64 + 24];
           I64[Hp - 24] = sat_s9y3g_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3h_info" {
     sat_s9y3h_info:
         const sat_s9y3h_entry;
         const 2;
         const 18;
 },
 sat_s9y3i_entry() //  [R1]
         { []
         }
     {offset
       c9zpK: // global
           _s9y3i::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zpL; else goto c9zpM;
       c9zpM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zpO; else goto c9zpN;
       c9zpO: // global
           HpAlloc = 32;
           goto c9zpL;
       c9zpL: // global
           R1 = _s9y3i::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zpN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3i::P64;
           _s9y2W::P64 = P64[_s9y3i::P64 + 16];
           _s9y2X::P64 = P64[_s9y3i::P64 + 24];
           I64[Hp - 24] = sat_s9y3h_info;
           P64[Hp - 8] = _s9y2W::P64;
           P64[Hp] = _s9y2X::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3i_info" {
     sat_s9y3i_info:
         const sat_s9y3i_entry;
         const 2;
         const 18;
 },
 GHC.Event.EPoll.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zpS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9zpW; else goto c9zpV;
       c9zpW: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zpV: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9zpQ; else goto c9zpR;
       c9zpQ: // global
           I64[Hp - 48] = sat_s9y37_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9zoi::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9zoi::P64;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9zpR: // global
           I64[Hp - 48] = sat_s9y3i_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$cshowsPrec2_info" {
     GHC.Event.EPoll.$w$cshowsPrec2_info:
         const GHC.Event.EPoll.$w$cshowsPrec2_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.877478867 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c9zqV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zqW; else goto c9zqX;
       c9zqW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zqX: // global
           I64[Sp - 24] = block_c9zqS_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zr1; else goto c9zqT;
       u9zr1: // global
           call _c9zqS(R1) args: 0, res: 0, upd: 0;
       c9zqT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c9zqS() //  [R1]
         { []
         }
     {offset
       c9zqS: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zqS_info" {
     block_c9zqS_info:
         const _c9zqS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.884589668 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshow_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshow_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshow_info;
         const 0;
 },
 sat_s9y3v_entry() //  [R1]
         { []
         }
     {offset
       c9zrq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zrz; else goto c9zrA;
       c9zrz: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zrA: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9zrn_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zrF; else goto c9zro;
       u9zrF: // global
           call _c9zrn(R1) args: 0, res: 0, upd: 0;
       c9zro: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3v_info" {
     sat_s9y3v_info:
         const sat_s9y3v_entry;
         const 1;
         const 4294967312;
         const S9yi5_srt;
 },
 _c9zrn() //  [R1]
         { []
         }
     {offset
       c9zrn: // global
           I64[Sp] = block_c9zrw_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zrn_info" {
     block_c9zrn_info:
         const _c9zrn;
         const 0;
         const 4294967326;
         const S9yi5_srt;
 },
 _c9zrw() //  [R1, R2]
         { []
         }
     {offset
       c9zrw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zrE; else goto c9zrD;
       c9zrE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zrD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zrw_info" {
     block_c9zrw_info:
         const _c9zrw;
         const 0;
         const 30;
 },
 sat_s9y3w_entry() //  [R1]
         { []
         }
     {offset
       c9zrG: // global
           _s9y3w::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zrH; else goto c9zrI;
       c9zrI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zrK; else goto c9zrJ;
       c9zrK: // global
           HpAlloc = 24;
           goto c9zrH;
       c9zrH: // global
           R1 = _s9y3w::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zrJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3w::P64;
           _s9y3o::P64 = P64[_s9y3w::P64 + 16];
           I64[Hp - 16] = sat_s9y3v_info;
           P64[Hp] = _s9y3o::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3w_info" {
     sat_s9y3w_info:
         const sat_s9y3w_entry;
         const 1;
         const 4294967312;
         const S9yi5_srt;
 },
 GHC.Event.EPoll.$fShowEventType_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9zrL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zrP; else goto c9zrO;
       c9zrP: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zrO: // global
           I64[Hp - 16] = sat_s9y3w_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType_$cshow_info" {
     GHC.Event.EPoll.$fShowEventType_$cshow_info:
         const GHC.Event.EPoll.$fShowEventType_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9yi5_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.894455526 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType1_closure" {
     GHC.Event.EPoll.$fShowEventType1_closure:
         const GHC.Event.EPoll.$fShowEventType1_info;
 },
 GHC.Event.EPoll.$fShowEventType1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zse: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType1_info" {
     GHC.Event.EPoll.$fShowEventType1_info:
         const GHC.Event.EPoll.$fShowEventType1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.89780246 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zsp: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEventType1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType_$cshowList_info" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_info:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.900809302 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_closure" {
     GHC.Event.EPoll.$fShowEventType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEventType_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.902982646 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent7_bytes" {
     GHC.Event.EPoll.$fShowEvent7_bytes:
         I8[] [69,118,101,110,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.905135503 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent6_closure" {
     GHC.Event.EPoll.$fShowEvent6_closure:
         const GHC.Event.EPoll.$fShowEvent6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent6_entry() //  [R1]
         { []
         }
     {offset
       c9zsE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zsF; else goto c9zsG;
       c9zsF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zsG: // global
           (_c9zsB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zsB::I64 == 0) goto c9zsD; else goto c9zsC;
       c9zsD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zsC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zsB::I64;
           R2 = GHC.Event.EPoll.$fShowEvent7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent6_info" {
     GHC.Event.EPoll.$fShowEvent6_info:
         const GHC.Event.EPoll.$fShowEvent6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.908565651 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent5_bytes" {
     GHC.Event.EPoll.$fShowEvent5_bytes:
         I8[] [101,118,101,110,116,84,121,112,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.91070081 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent2_bytes" {
     GHC.Event.EPoll.$fShowEvent2_bytes:
         I8[] [101,118,101,110,116,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.921154724 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec1_closure" {
     GHC.Event.EPoll.$w$cshowsPrec1_closure:
         const GHC.Event.EPoll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       c9zsR: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9y3I_entry() //  [R1]
         { []
         }
     {offset
       c9ztr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zts; else goto c9ztt;
       c9zts: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3I_info" {
     sat_s9y3I_info:
         const sat_s9y3I_entry;
         const 1;
         const 16;
 },
 sat_s9y3M_entry() //  [R1]
         { []
         }
     {offset
       c9ztu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zty; else goto c9ztz;
       c9zty: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zti_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9ztG; else goto c9ztj;
       u9ztG: // global
           call _c9zti(R1) args: 0, res: 0, upd: 0;
       c9ztj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3M_info" {
     sat_s9y3M_info:
         const sat_s9y3M_entry;
         const 2;
         const 18;
 },
 _c9zti() //  [R1]
         { []
         }
     {offset
       c9zti: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ztC; else goto c9ztB;
       c9ztC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9ztB: // global
           _s9y3H::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3I_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9ztv_info;
           R4 = Hp - 16;
           R3 = _s9y3H::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zti_info" {
     block_c9zti_info:
         const _c9zti;
         const 1;
         const 30;
 },
 _c9ztv() //  [R1, R2]
         { []
         }
     {offset
       c9ztv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ztF; else goto c9ztE;
       c9ztF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ztE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9ztv_info" {
     block_c9ztv_info:
         const _c9ztv;
         const 0;
         const 30;
 },
 sat_s9y3N_entry() //  [R1]
         { []
         }
     {offset
       c9ztH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ztL; else goto c9ztK;
       c9ztL: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztK: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3M_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9y3N_info" {
     sat_s9y3N_info:
         const sat_s9y3N_entry;
         const 2;
         const 18;
 },
 sat_s9y3O_entry() //  [R1]
         { []
         }
     {offset
       c9ztM: // global
           _s9y3O::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ztN; else goto c9ztO;
       c9ztO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ztQ; else goto c9ztP;
       c9ztQ: // global
           HpAlloc = 32;
           goto c9ztN;
       c9ztN: // global
           R1 = _s9y3O::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3O::P64;
           _s9y3D::P64 = P64[_s9y3O::P64 + 16];
           _s9y3E::P64 = P64[_s9y3O::P64 + 24];
           I64[Hp - 24] = sat_s9y3N_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3O_info" {
     sat_s9y3O_info:
         const sat_s9y3O_entry;
         const 2;
         const 4294967314;
         const S9yi5_srt+24;
 },
 sat_s9y3P_entry() //  [R1]
         { []
         }
     {offset
       c9ztR: // global
           _s9y3P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ztS; else goto c9ztT;
       c9ztT: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9ztV; else goto c9ztU;
       c9ztV: // global
           HpAlloc = 32;
           goto c9ztS;
       c9ztS: // global
           R1 = _s9y3P::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztU: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3P::P64;
           _s9y3C::P64 = P64[_s9y3P::P64 + 16];
           _s9y3D::P64 = P64[_s9y3P::P64 + 24];
           _s9y3E::P64 = P64[_s9y3P::P64 + 32];
           I64[Hp - 24] = sat_s9y3O_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3P_info" {
     sat_s9y3P_info:
         const sat_s9y3P_entry;
         const 3;
         const 4294967311;
         const S9yi5_srt+24;
 },
 sat_s9y3Q_entry() //  [R1]
         { []
         }
     {offset
       c9ztW: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9zu0; else goto c9ztZ;
       c9zu0: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ztZ: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y3P_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9y3Q_info" {
     sat_s9y3Q_info:
         const sat_s9y3Q_entry;
         const 3;
         const 4294967311;
         const S9yi5_srt+24;
 },
 sat_s9y3U_entry() //  [R1]
         { []
         }
     {offset
       c9zuA: // global
           _s9y3U::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zuB; else goto c9zuC;
       c9zuC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zuE; else goto c9zuD;
       c9zuE: // global
           HpAlloc = 24;
           goto c9zuB;
       c9zuB: // global
           R1 = _s9y3U::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zuD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y3U::P64;
           _s9y3E::P64 = P64[_s9y3U::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3U_info" {
     sat_s9y3U_info:
         const sat_s9y3U_entry;
         const 1;
         const 16;
 },
 sat_s9y3Y_entry() //  [R1]
         { []
         }
     {offset
       c9zuF: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9zuJ; else goto c9zuK;
       c9zuJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zuK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9zuq_info;
           _s9y3E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9y3E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9zuR; else goto c9zur;
       u9zuR: // global
           call _c9zuq(R1) args: 0, res: 0, upd: 0;
       c9zur: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y3Y_info" {
     sat_s9y3Y_info:
         const sat_s9y3Y_entry;
         const 2;
         const 18;
 },
 _c9zuq() //  [R1]
         { []
         }
     {offset
       c9zuq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zuN; else goto c9zuM;
       c9zuN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9zuM: // global
           _s9y3S::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9y3U_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9zuG_info;
           R4 = Hp - 16;
           R3 = _s9y3S::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zuq_info" {
     block_c9zuq_info:
         const _c9zuq;
         const 1;
         const 30;
 },
 _c9zuG() //  [R1, R2]
         { []
         }
     {offset
       c9zuG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zuQ; else goto c9zuP;
       c9zuQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9zuP: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9zuG_info" {
     block_c9zuG_info:
         const _c9zuG;
         const 0;
         const 30;
 },
 sat_s9y3Z_entry() //  [R1]
         { []
         }
     {offset
       c9zuS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zuW; else goto c9zuV;
       c9zuW: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zuV: // global
           _s9y3D::P64 = P64[R1 + 16];
           _s9y3E::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9y3Y_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9y3Z_info" {
     sat_s9y3Z_info:
         const sat_s9y3Z_entry;
         const 2;
         const 18;
 },
 sat_s9y40_entry() //  [R1]
         { []
         }
     {offset
       c9zuX: // global
           _s9y40::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zuY; else goto c9zuZ;
       c9zuZ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zv1; else goto c9zv0;
       c9zv1: // global
           HpAlloc = 32;
           goto c9zuY;
       c9zuY: // global
           R1 = _s9y40::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zv0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y40::P64;
           _s9y3D::P64 = P64[_s9y40::P64 + 16];
           _s9y3E::P64 = P64[_s9y40::P64 + 24];
           I64[Hp - 24] = sat_s9y3Z_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y40_info" {
     sat_s9y40_info:
         const sat_s9y40_entry;
         const 2;
         const 4294967314;
         const S9yi5_srt+24;
 },
 sat_s9y41_entry() //  [R1]
         { []
         }
     {offset
       c9zv2: // global
           _s9y41::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zv3; else goto c9zv4;
       c9zv4: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9zv6; else goto c9zv5;
       c9zv6: // global
           HpAlloc = 32;
           goto c9zv3;
       c9zv3: // global
           R1 = _s9y41::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zv5: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y41::P64;
           _s9y3C::P64 = P64[_s9y41::P64 + 16];
           _s9y3D::P64 = P64[_s9y41::P64 + 24];
           _s9y3E::P64 = P64[_s9y41::P64 + 32];
           I64[Hp - 24] = sat_s9y40_info;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R4 = Hp - 24;
           R3 = _s9y3C::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y41_info" {
     sat_s9y41_info:
         const sat_s9y41_entry;
         const 3;
         const 4294967311;
         const S9yi5_srt+24;
 },
 sat_s9y42_entry() //  [R1]
         { []
         }
     {offset
       c9zv7: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9zvb; else goto c9zva;
       c9zvb: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zva: // global
           _s9y3C::P64 = P64[R1 + 16];
           _s9y3D::P64 = P64[R1 + 24];
           _s9y3E::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9y41_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9y42_info" {
     sat_s9y42_info:
         const sat_s9y42_entry;
         const 3;
         const 4294967311;
         const S9yi5_srt+24;
 },
 sat_s9y43_entry() //  [R1]
         { []
         }
     {offset
       c9zvc: // global
           _s9y43::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9zvd; else goto c9zve;
       c9zve: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9zvg; else goto c9zvf;
       c9zvg: // global
           HpAlloc = 40;
           goto c9zvd;
       c9zvd: // global
           R1 = _s9y43::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zvf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9y43::P64;
           _s9y3C::P64 = P64[_s9y43::P64 + 16];
           _s9y3D::P64 = P64[_s9y43::P64 + 24];
           _s9y3E::P64 = P64[_s9y43::P64 + 32];
           I64[Hp - 32] = sat_s9y42_info;
           P64[Hp - 16] = _s9y3C::P64;
           P64[Hp - 8] = _s9y3D::P64;
           P64[Hp] = _s9y3E::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y43_info" {
     sat_s9y43_info:
         const sat_s9y43_entry;
         const 3;
         const 12884901903;
         const S9yi5_srt+24;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9zvk: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9zvo; else goto c9zvn;
       c9zvo: // global
           HpAlloc = 64;
           R1 = GHC.Event.EPoll.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c9zvn: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9zvi; else goto c9zvj;
       c9zvi: // global
           I64[Hp - 56] = sat_s9y3Q_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           _c9zsY::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _c9zsY::P64;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9zvj: // global
           I64[Hp - 56] = sat_s9y43_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$cshowsPrec1_info" {
     GHC.Event.EPoll.$w$cshowsPrec1_info:
         const GHC.Event.EPoll.$w$cshowsPrec1_entry;
         const 0;
         const 30064771086;
         const 17179869184;
         const S9yi5_srt+24;
         const 68;
         const GHC.Event.EPoll.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.955947066 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zwJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9zwN; else goto c9zwO;
       c9zwN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zwO: // global
           I64[Sp - 24] = block_c9zwG_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zwW; else goto c9zwH;
       u9zwW: // global
           call _c9zwG(R1) args: 0, res: 0, upd: 0;
       c9zwH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S9yi5_srt+40;
 },
 _c9zwG() //  [R1]
         { []
         }
     {offset
       c9zwG: // global
           I64[Sp] = block_c9zwM_info;
           _s9y48::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9y48::I64;
           if (R1 & 7 != 0) goto u9zwV; else goto c9zwQ;
       u9zwV: // global
           call _c9zwM(R1) args: 0, res: 0, upd: 0;
       c9zwQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zwG_info" {
     block_c9zwG_info:
         const _c9zwG;
         const 2;
         const 4294967326;
         const S9yi5_srt+40;
 },
 _c9zwM() //  [R1]
         { []
         }
     {offset
       c9zwM: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zwM_info" {
     block_c9zwM_info:
         const _c9zwM;
         const 66;
         const 4294967326;
         const S9yi5_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.962427789 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent8_closure" {
     GHC.Event.EPoll.$fShowEvent8_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.964819609 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshow_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshow_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshow_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9zxi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zxj; else goto c9zxk;
       c9zxj: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zxk: // global
           I64[Sp - 8] = block_c9zxf_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zxo; else goto c9zxg;
       u9zxo: // global
           call _c9zxf(R1) args: 0, res: 0, upd: 0;
       c9zxg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent_$cshow_info" {
     GHC.Event.EPoll.$fShowEvent_$cshow_info:
         const GHC.Event.EPoll.$fShowEvent_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9yi5_srt+40;
 },
 _c9zxf() //  [R1]
         { []
         }
     {offset
       c9zxf: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zxf_info" {
     block_c9zxf_info:
         const _c9zxf;
         const 0;
         const 4294967326;
         const S9yi5_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.970321231 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent1_closure" {
     GHC.Event.EPoll.$fShowEvent1_closure:
         const GHC.Event.EPoll.$fShowEvent1_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zxF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zxG; else goto c9zxH;
       c9zxG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zxH: // global
           I64[Sp - 16] = block_c9zxC_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zxL; else goto c9zxD;
       u9zxL: // global
           call _c9zxC(R1) args: 0, res: 0, upd: 0;
       c9zxD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent1_info" {
     GHC.Event.EPoll.$fShowEvent1_info:
         const GHC.Event.EPoll.$fShowEvent1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S9yi5_srt+40;
 },
 _c9zxC() //  [R1]
         { []
         }
     {offset
       c9zxC: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zxC_info" {
     block_c9zxC_info:
         const _c9zxC;
         const 1;
         const 4294967326;
         const S9yi5_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.975369183 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zxZ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent_$cshowList_info" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_info:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9yi5_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.978760301 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_closure" {
     GHC.Event.EPoll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEvent_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.980465288 UTC

[section ""data" . GHC.Event.EPoll.$fFiniteBitsEventType_closure" {
     GHC.Event.EPoll.$fFiniteBitsEventType_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.EPoll.$fBitsEventType_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.982237 UTC

[section ""data" . GHC.Event.EPoll.$fNumEventType_closure" {
     GHC.Event.EPoll.$fNumEventType_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Word.$fNumWord32_$c+_closure+2;
         const GHC.Word.$fNumWord32_$c-_closure+2;
         const GHC.Word.$fNumWord32_$c*_closure+2;
         const GHC.Word.$fNumWord32_$cnegate_closure+1;
         const GHC.Word.$fNumWord32_$cabs_closure+1;
         const GHC.Word.$fNumWord32_$csignum_closure+1;
         const GHC.Word.$fNumWord32_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.98394787 UTC

[section ""data" . GHC.Event.EPoll.$fEqEPollFd_closure" {
     GHC.Event.EPoll.$fEqEPollFd_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt32_closure+2;
         const GHC.Int.neInt32_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.986128447 UTC

[section ""cstring" . lvl_r9y01_bytes" {
     lvl_r9y01_bytes:
         I8[] [101,112,111,108,108,67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.988322167 UTC

[section ""data" . lvl1_r9y02_closure" {
     lvl1_r9y02_closure:
         const lvl1_r9y02_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9y02_entry() //  [R1]
         { []
         }
     {offset
       c9zyh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zyi; else goto c9zyj;
       c9zyi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zyj: // global
           (_c9zye::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zye::I64 == 0) goto c9zyg; else goto c9zyf;
       c9zyg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zyf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zye::I64;
           R2 = lvl_r9y01_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r9y02_info" {
     lvl1_r9y02_info:
         const lvl1_r9y02_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.992586106 UTC

[section ""data" . GHC.Event.EPoll.new6_closure" {
     GHC.Event.EPoll.new6_closure:
         const GHC.Event.EPoll.new6_info;
         const 0;
 },
 GHC.Event.EPoll.new6_entry() //  [R2]
         { []
         }
     {offset
       c9zyx: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_r9y02_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new6_info" {
     GHC.Event.EPoll.new6_info:
         const GHC.Event.EPoll.new6_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const S9yi5_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.995497068 UTC

[section ""cstring" . lvl2_r9y03_bytes" {
     lvl2_r9y03_bytes:
         I8[] [101,112,111,108,108,87,97,105,116,78,111,110,66,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:39.997573115 UTC

[section ""data" . lvl3_r9y04_closure" {
     lvl3_r9y04_closure:
         const lvl3_r9y04_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9y04_entry() //  [R1]
         { []
         }
     {offset
       c9zyL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zyM; else goto c9zyN;
       c9zyM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zyN: // global
           (_c9zyI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zyI::I64 == 0) goto c9zyK; else goto c9zyJ;
       c9zyK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zyJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zyI::I64;
           R2 = lvl2_r9y03_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r9y04_info" {
     lvl3_r9y04_info:
         const lvl3_r9y04_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.000684386 UTC

[section ""cstring" . lvl4_r9y05_bytes" {
     lvl4_r9y05_bytes:
         I8[] [101,112,111,108,108,87,97,105,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.003002899 UTC

[section ""data" . lvl5_r9y06_closure" {
     lvl5_r9y06_closure:
         const lvl5_r9y06_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r9y06_entry() //  [R1]
         { []
         }
     {offset
       c9zz2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zz3; else goto c9zz4;
       c9zz3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zz4: // global
           (_c9zyZ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zyZ::I64 == 0) goto c9zz1; else goto c9zz0;
       c9zz1: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zz0: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zyZ::I64;
           R2 = lvl4_r9y05_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r9y06_info" {
     lvl5_r9y06_info:
         const lvl5_r9y06_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.006198059 UTC

[section ""cstring" . GHC.Event.EPoll.new8_bytes" {
     GHC.Event.EPoll.new8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.008224388 UTC

[section ""data" . GHC.Event.EPoll.new7_closure" {
     GHC.Event.EPoll.new7_closure:
         const GHC.Event.EPoll.new7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new7_entry() //  [R1]
         { []
         }
     {offset
       c9zzj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zzk; else goto c9zzl;
       c9zzk: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zzl: // global
           (_c9zzg::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zzg::I64 == 0) goto c9zzi; else goto c9zzh;
       c9zzi: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zzh: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zzg::I64;
           R2 = GHC.Event.EPoll.new8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new7_info" {
     GHC.Event.EPoll.new7_info:
         const GHC.Event.EPoll.new7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.011505865 UTC

[section ""data" . lvl6_r9y07_closure" {
     lvl6_r9y07_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.013802771 UTC

[section ""data" . lvl7_r9y08_closure" {
     lvl7_r9y08_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.015388153 UTC

[section ""data" . lvl8_r9y09_closure" {
     lvl8_r9y09_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.030461128 UTC

[section ""data" . GHC.Event.EPoll.new10_closure" {
     GHC.Event.EPoll.new10_closure:
         const GHC.Event.EPoll.new10_info;
         const 0;
 },
 sat_s9y6v_entry() //  [R1]
         { []
         }
     {offset
       c9zAF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zAG; else goto c9zBl;
       c9zAG: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zBl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9y6m::I64 = I64[R1 + 16];
           if (_s9y6m::I64 & 25 == 0) goto c9zAE; else goto c9zAD;
       c9zAE: // global
           if (_s9y6m::I64 & 28 == 0) goto c9zBh; else goto c9zBb;
       c9zBh: // global
           R1 = GHC.Event.EPoll.$fShowEvent8_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9zBb: // global
           R1 = lvl8_r9y09_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9zAD: // global
           if (_s9y6m::I64 & 28 == 0) goto c9zAX; else goto c9zAR;
       c9zAX: // global
           R1 = lvl7_r9y08_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9zAR: // global
           R1 = lvl6_r9y07_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9y6v_info" {
     sat_s9y6v_info:
         const sat_s9y6v_entry;
         const 4294967296;
         const 17;
 },
 GHC.Event.EPoll.new10_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zBm: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9zBn; else goto c9zBo;
       c9zBn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new10_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zBo: // global
           I64[Sp - 24] = block_c9zzA_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zHq; else goto c9zzB;
       u9zHq: // global
           call _c9zzA(R1) args: 0, res: 0, upd: 0;
       c9zzB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new10_info" {
     GHC.Event.EPoll.new10_info:
         const GHC.Event.EPoll.new10_entry;
         const 0;
         const 133143986190;
         const 17179869207;
         const S9yi5_srt+88;
 },
 _c9zzA() //  [R1]
         { []
         }
     {offset
       c9zzA: // global
           I64[Sp - 16] = block_c9zzF_info;
           _s9y4w::P64 = P64[R1 + 7];
           _s9y4v::I64 = I64[R1 + 15];
           R1 = P64[_s9y4w::P64 + 8];
           P64[Sp - 8] = _s9y4w::P64;
           I64[Sp] = _s9y4v::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zHh; else goto c9zzG;
       u9zHh: // global
           call _c9zzF(R1) args: 0, res: 0, upd: 0;
       c9zzG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zzA_info" {
     block_c9zzA_info:
         const _c9zzA;
         const 2;
         const 115964117022;
         const S9yi5_srt+88;
 },
 _c9zzF() //  [R1]
         { []
         }
     {offset
       c9zzF: // global
           I64[Sp - 8] = block_c9zzK_info;
           _s9y4D::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y4D::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zHi; else goto c9zzL;
       u9zHi: // global
           call _c9zzK(R1) args: 0, res: 0, upd: 0;
       c9zzL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zzF_info" {
     block_c9zzF_info:
         const _c9zzF;
         const 132;
         const 115964117022;
         const S9yi5_srt+88;
 },
 _c9zzK() //  [R1]
         { []
         }
     {offset
       c9zzK: // global
           I64[Sp - 16] = block_c9zBr_info;
           _s9y4E::P64 = R1;
           _s9y4G::P64 = P64[R1 + 7];
           _s9y4F::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s9y4G::P64;
           I64[Sp] = _s9y4F::I64;
           P64[Sp + 32] = _s9y4E::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9zHj; else goto c9zEC;
       u9zHj: // global
           call _c9zBr(R1) args: 0, res: 0, upd: 0;
       c9zEC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zzK_info" {
     block_c9zzK_info:
         const _c9zzK;
         const 325;
         const 115964117022;
         const S9yi5_srt+88;
 },
 _c9zBr() //  [R1]
         { []
         }
     {offset
       c9zBr: // global
           if (R1 & 7 == 1) goto c9zFu; else goto c9zGx;
       c9zFu: // global
           (_s9y6F::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(I64[Sp + 40], I64[Sp + 16], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 0);
           _s9y6G::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6F::I64));
           if (_s9y6G::I64 != (-1)) goto c9zEU; else goto c9zF0;
       c9zEU: // global
           I64[Sp + 40] = _s9y6G::I64;
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
       c9zF0: // global
           (_s9y6K::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y6K::I64) == 4 :: W32) goto u9zH0; else goto c9zFf;
       u9zH0: // global
           Sp = Sp + 8;
           call _c9zGt() args: 0, res: 0, upd: 0;
       c9zFf: // global
           I64[Sp] = block_c9zFb_info;
           R2 = lvl3_r9y04_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       c9zGx: // global
           I64[Sp] = block_c9zFz_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u9zHr; else goto c9zGy;
       u9zHr: // global
           call _c9zFz(R1) args: 0, res: 0, upd: 0;
       c9zGy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zBr_info" {
     block_c9zBr_info:
         const _c9zBr;
         const 1415;
         const 115964117022;
         const S9yi5_srt+88;
 },
 _c9zFb() //  [R1]
         { []
         }
     {offset
       c9zFb: // global
           I64[Sp] = block_c9zFd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9zHx; else goto c9zFi;
       u9zHx: // global
           call _c9zFd(R1) args: 0, res: 0, upd: 0;
       c9zFi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zFb_info" {
     block_c9zFb_info:
         const _c9zFb;
         const 1415;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zFd() //  [R1]
         { []
         }
     {offset
       c9zFd: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9zFd_info" {
     block_c9zFd_info:
         const _c9zFd;
         const 1415;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zFz() //  [R1]
         { []
         }
     {offset
       c9zFz: // global
           _s9y4v::I64 = I64[Sp + 40];
           _s9y4D::I64 = I64[Sp + 24];
           _s9y4F::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c9zGE; else goto c9zGI;
       c9zGE: // global
           _s9y6T::I64 = (I64[R1 + 7] + 999999) / 1000000;
           goto s9y6S;
       c9zGI: // global
           _s9y6T::I64 = (-1);
           goto s9y6S;
       s9y6S: // global
           I64[Sp] = block_c9zFQ_info;
           _u9zH9::P64 = CurrentTSO;
           I64[I64[_u9zH9::P64 + 24] + 16] = Sp;
           _u9zHa::I64 = CurrentNursery;
           P64[_u9zHa::I64 + 8] = Hp + 8;
           I64[_u9zH9::P64 + 104] = I64[_u9zH9::P64 + 104] - ((Hp + 8) - I64[_u9zHa::I64]);
           (_u9zH7::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_s9y6Z::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(_s9y4v::I64, _s9y4F::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y4D::I64)), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y6T::I64)));
           (_u9zH8::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9zH7::I64);
           BaseReg = _u9zH8::I64;
           _u9zHb::P64 = CurrentTSO;
           _u9zHc::P64 = I64[_u9zHb::P64 + 24];
           Sp = I64[_u9zHc::P64 + 16];
           SpLim = _u9zHc::P64 + 192;
           HpAlloc = 0;
           _u9zHd::I64 = CurrentNursery;
           _u9zHe::I64 = I64[_u9zHd::I64 + 8];
           Hp = _u9zHe::I64 - 8;
           _u9zHf::I64 = I64[_u9zHd::I64];
           HpLim = _u9zHf::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9zHd::I64 + 48]) << 12) - 1);
           I64[_u9zHb::P64 + 104] = I64[_u9zHb::P64 + 104] + (_u9zHe::I64 - _u9zHf::I64);
           R1 = _s9y6Z::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zFz_info" {
     block_c9zFz_info:
         const _c9zFz;
         const 1415;
         const 81604378654;
         const S9yi5_srt+88;
 },
 _c9zFQ() //  [R1]
         { []
         }
     {offset
       c9zFQ: // global
           _s9y70::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_s9y70::I64 != (-1)) goto c9zFY; else goto c9zG4;
       c9zFY: // global
           I64[Sp + 40] = _s9y70::I64;
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
       c9zG4: // global
           (_s9y74::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y74::I64) == 4 :: W32) goto u9zGX; else goto c9zGj;
       u9zGX: // global
           Sp = Sp + 8;
           call _c9zGt() args: 0, res: 0, upd: 0;
       c9zGj: // global
           I64[Sp] = block_c9zGf_info;
           R2 = lvl5_r9y06_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zFQ_info" {
     block_c9zFQ_info:
         const _c9zFQ;
         const 1415;
         const 81604378654;
         const S9yi5_srt+88;
 },
 _c9zGt() //  []
         { []
         }
     {offset
       c9zGt: // global
           I64[Sp + 32] = 0;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 _c9zGf() //  [R1]
         { []
         }
     {offset
       c9zGf: // global
           I64[Sp] = block_c9zGh_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9zHB; else goto c9zGm;
       u9zHB: // global
           call _c9zGh(R1) args: 0, res: 0, upd: 0;
       c9zGm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zGf_info" {
     block_c9zGf_info:
         const _c9zGf;
         const 1415;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zGh() //  [R1]
         { []
         }
     {offset
       c9zGh: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9zGh_info" {
     block_c9zGh_info:
         const _c9zGh;
         const 1415;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zzS() //  []
         { []
         }
     {offset
       c9zzS: // global
           Hp = Hp + 48;
           _s9y4J::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c9zBv; else goto c9zBu;
       c9zBv: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_c9zzR_info;
           R1 = _s9y4J::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9zBu: // global
           _s9y4w::P64 = P64[Sp + 24];
           _s9y4D::I64 = I64[Sp + 16];
           _s9y4E::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = _s9y4E::P64;
           I64[Hp - 24] = _s9y4J::I64;
           I64[Hp - 16] = _s9y4D::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           if (%MO_S_Le_W64(_s9y4J::I64, 0)) goto c9zBy; else goto c9zBz;
       c9zBy: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zBz: // global
           _s9y4R::P64 = P64[_s9y4w::P64 + 8];
           Hp = Hp - 16;
           I64[Sp + 16] = block_c9zA3_info;
           R1 = _s9y4R::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zHl; else goto c9zA4;
       u9zHl: // global
           call _c9zA3(R1) args: 0, res: 0, upd: 0;
       c9zA4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zzR() //  [R1]
         { []
         }
     {offset
       c9zzR: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c9zzS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9zzR_info" {
     block_c9zzR_info:
         const _c9zzR;
         const 1415;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zA3() //  [R1]
         { []
         }
     {offset
       c9zA3: // global
           I64[Sp] = block_c9zA8_info;
           _s9y4U::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _s9y4U::I64;
           if (R1 & 7 != 0) goto u9zHm; else goto c9zA9;
       u9zHm: // global
           call _c9zA8(R1) args: 0, res: 0, upd: 0;
       c9zA9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zA3_info" {
     block_c9zA3_info:
         const _c9zA3;
         const 388;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zA8() //  [R1]
         { []
         }
     {offset
       c9zA8: // global
           I64[Sp - 16] = I64[Sp + 24] * 12;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 16;
           call _c9zAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9zA8_info" {
     block_c9zA8_info:
         const _c9zA8;
         const 388;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zAl() //  []
         { []
         }
     {offset
       c9zAl: // global
           Hp = Hp + 40;
           _s9y6g::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c9zEu; else goto c9zEt;
       c9zEu: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c9zAk_info;
           R1 = _s9y6g::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9zEt: // global
           if (%MO_S_Lt_W64(_s9y6g::I64,
                            I64[Sp])) goto c9zEy; else goto c9zEB;
       c9zEy: // global
           _s9y6j::I64 = I64[Sp + 40] + _s9y6g::I64;
           _s9y6m::I64 = %MO_UU_Conv_W32_W64(I32[_s9y6j::I64]);
           _s9y6q::I64 = %MO_SS_Conv_W32_W64(I32[_s9y6j::I64 + 4]);
           I64[Hp - 32] = sat_s9y6v_info;
           I64[Hp - 16] = _s9y6m::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9y6q::I64;
           I64[Sp - 8] = block_c9zEw_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 48];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       c9zEB: // global
           Hp = Hp - 40;
           _s9y4w::P64 = P64[Sp + 24];
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 16] = block_c9zBG_info;
           R1 = P64[_s9y4w::P64 + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9zHp; else goto c9zBI;
       u9zHp: // global
           call _c9zBG(R1) args: 0, res: 0, upd: 0;
       c9zBI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9zAk() //  [R1]
         { []
         }
     {offset
       c9zAk: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c9zAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9zAk_info" {
     block_c9zAk_info:
         const _c9zAk;
         const 3271;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zEw() //  []
         { []
         }
     {offset
       c9zEw: // global
           I64[Sp + 16] = I64[Sp + 16] + 12;
           Sp = Sp + 8;
           call _c9zAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9zEw_info" {
     block_c9zEw_info:
         const _c9zEw;
         const 3271;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zBG() //  [R1]
         { []
         }
     {offset
       c9zBG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9zBO; else goto c9zBN;
       c9zBO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zBN: // global
           _s9y4J::I64 = I64[Sp + 16];
           _s9y59::I64 = I64[R1 + 23];
           if (_s9y59::I64 == _s9y4J::I64) goto c9zC2; else goto c9zBU;
       c9zC2: // global
           Hp = Hp - 16;
           _s9y5e::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c9zBW_info;
           R1 = _s9y5e::P64;
           I64[Sp + 32] = _s9y59::I64;
           if (R1 & 7 != 0) goto u9zHu; else goto c9zBX;
       u9zHu: // global
           call _c9zBW(R1) args: 0, res: 0, upd: 0;
       c9zBX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9zBU: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zBG_info" {
     block_c9zBG_info:
         const _c9zBG;
         const 900;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zBW() //  [R1]
         { []
         }
     {offset
       c9zBW: // global
           I64[Sp - 8] = block_c9zC1_info;
           _s9y5h::I64 = I64[R1 + 15];
           _s9y5i::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9y5i::I64;
           I64[Sp + 24] = _s9y5h::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zHv; else goto c9zC4;
       u9zHv: // global
           call _c9zC1(R1) args: 0, res: 0, upd: 0;
       c9zC4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zBW_info" {
     block_c9zBW_info:
         const _c9zBW;
         const 900;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zC1() //  [R1]
         { []
         }
     {offset
       c9zC1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9zCa; else goto c9zC9;
       c9zCa: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zC9: // global
           _s9y5m::I64 = I64[Sp + 40] << 1;
           if (%MO_S_Le_W64(_s9y5m::I64,
                            I64[Sp + 8])) goto c9zCj; else goto c9zEr;
       c9zCj: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zEr: // global
           _s9y5p::I64 = _s9y5m::I64 - 1;
           _s9y5q::I64 = _s9y5p::I64 | %MO_S_Shr_W64(_s9y5p::I64, 1);
           _s9y5s::I64 = _s9y5q::I64 | %MO_S_Shr_W64(_s9y5q::I64, 2);
           _s9y5u::I64 = _s9y5s::I64 | %MO_S_Shr_W64(_s9y5s::I64, 4);
           _s9y5w::I64 = _s9y5u::I64 | %MO_S_Shr_W64(_s9y5u::I64, 8);
           _s9y5y::I64 = _s9y5w::I64 | %MO_S_Shr_W64(_s9y5w::I64, 16);
           _s9y5A::I64 = _s9y5y::I64 | %MO_S_Shr_W64(_s9y5y::I64, 32) + 1;
           _s9y5D::I64 = _s9y5A::I64 * 12;
           if (%MO_S_Ge_W64(_s9y5D::I64, 0)) goto c9zD9; else goto c9zEq;
       c9zD9: // global
           _s9y5l::P64 = P64[R1 + 7];
           _s9y5k::I64 = I64[R1 + 15];
           Hp = Hp - 16;
           I64[Sp - 16] = block_c9zD7_info;
           R1 = _s9y5D::I64;
           I64[Sp - 8] = _s9y5A::I64;
           P64[Sp] = _s9y5l::P64;
           I64[Sp + 40] = _s9y5k::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c9zEq: // global
           Hp = Hp - 16;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zC1_info" {
     block_c9zC1_info:
         const _c9zC1;
         const 1861;
         const 4294967326;
         const S9yi5_srt+88;
 },
 _c9zD7() //  [R1]
         { []
         }
     {offset
       c9zD7: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c9zDd; else goto c9zDc;
       c9zDd: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zDc: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 72] = R1;
           _s9y4w::P64 = P64[Sp + 32];
           _s9y4J::I64 = I64[Sp + 40];
           _s9y5h::I64 = I64[Sp + 48];
           _s9y5i::I64 = I64[Sp + 24];
           _s9y5k::I64 = I64[Sp + 56];
           _s9y5l::P64 = P64[Sp + 16];
           _s9y5A::I64 = I64[Sp + 8];
           _s9y5I::I64 = R1 + 16;
           _c9zDh::P64 = Hp - 77;
           if (_s9y5k::I64 == 0) goto c9zEp; else goto c9zE8;
       c9zEp: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9zEg; else goto c9zEo;
       c9zEg: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9zEe::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9zEe::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zEo: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9zDh::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zE8: // global
           if (%MO_S_Le_W64(_s9y5i::I64, 0)) goto c9zDE; else goto c9zE6;
       c9zDE: // global
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9zDu; else goto c9zDC;
       c9zDu: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9zDs::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9zDs::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zDC: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9zDh::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zE6: // global
           (_s9y5Y::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s9y5I::I64, _s9y5k::I64, _s9y5i::I64 * 12);
           call MO_Touch(_c9zDh::P64);
           call MO_Touch(_s9y5l::P64);
           if (_s9y5A::I64 == _s9y5i::I64) goto c9zDX; else goto c9zE5;
       c9zDX: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9y4J::I64;
           _c9zDV::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9zDV::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zE5: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9zDh::P64;
           I64[Hp - 48] = _s9y5I::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9y5h::I64;
           I64[Hp - 16] = _s9y5A::I64;
           call MO_WriteBarrier();
           P64[_s9y4w::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9y4w::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9y4J::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zD7_info" {
     block_c9zD7_info:
         const _c9zD7;
         const 7495;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.076231588 UTC

[section ""data" . GHC.Event.EPoll.new9_closure" {
     GHC.Event.EPoll.new9_closure:
         const GHC.Event.EPoll.new9_info;
         const 0;
 },
 GHC.Event.EPoll.new9_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9zKn: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9zKo; else goto c9zKp;
       c9zKo: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zKp: // global
           I64[Sp - 40] = block_c9zKi_info;
           _s9y7h::P64 = R2;
           R2 = 4;
           R1 = 12;
           P64[Sp - 32] = _s9y7h::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new9_info" {
     GHC.Event.EPoll.new9_info:
         const GHC.Event.EPoll.new9_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S9yi5_srt+128;
 },
 _c9zKi() //  [R1]
         { []
         }
     {offset
       c9zKi: // global
           I64[Sp] = block_c9zKk_info;
           _s9y7r::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s9y7r::P64;
           if (R1 & 7 != 0) goto u9zMi; else goto c9zKl;
       u9zMi: // global
           call _c9zKk(R1) args: 0, res: 0, upd: 0;
       c9zKl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zKi_info" {
     block_c9zKi_info:
         const _c9zKi;
         const 4;
         const 4294967326;
         const S9yi5_srt+128;
 },
 _c9zKk() //  [R1]
         { []
         }
     {offset
       c9zKk: // global
           _s9y7i::P64 = P64[Sp + 16];
           _s9y7r::P64 = P64[Sp + 32];
           _s9y7t::I64 = I64[R1 + 7];
           if (_s9y7t::I64 & 1 == 0) goto c9zLX; else goto c9zLC;
       c9zLX: // global
           if (_s9y7t::I64 & 2 == 0) goto c9zMc; else goto c9zM6;
       c9zMc: // global
           _s9y7v::I64 = 0;
           goto s9y7u;
       c9zM6: // global
           _s9y7v::I64 = 4;
           goto s9y7u;
       c9zLC: // global
           if (_s9y7t::I64 & 2 == 0) goto c9zLR; else goto c9zLL;
       c9zLR: // global
           _s9y7v::I64 = 1;
           goto s9y7u;
       c9zLL: // global
           _s9y7v::I64 = 5;
           goto s9y7u;
       s9y7u: // global
           _s9y7w::I64 = _s9y7r::P64 + 16;
           I32[_s9y7w::I64] = %MO_UU_Conv_W64_W32(_s9y7v::I64);
           I64[Sp - 8] = block_c9zKC_info;
           R1 = _s9y7i::P64;
           I64[Sp] = _s9y7w::I64;
           I64[Sp + 16] = _s9y7t::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zMj; else goto c9zKD;
       u9zMj: // global
           call _c9zKC(R1) args: 0, res: 0, upd: 0;
       c9zKD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zKk_info" {
     block_c9zKk_info:
         const _c9zKk;
         const 4;
         const 4294967326;
         const S9yi5_srt+128;
 },
 _c9zKC() //  [R1]
         { []
         }
     {offset
       c9zKC: // global
           _s9y7h::P64 = P64[Sp + 16];
           _s9y7z::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y7z::I64);
           I64[Sp] = block_c9zKK_info;
           R1 = _s9y7h::P64;
           I64[Sp + 16] = _s9y7z::I64;
           if (R1 & 7 != 0) goto u9zMk; else goto c9zKL;
       u9zMk: // global
           call _c9zKK(R1) args: 0, res: 0, upd: 0;
       c9zKL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zKC_info" {
     block_c9zKC_info:
         const _c9zKC;
         const 325;
         const 4294967326;
         const S9yi5_srt+128;
 },
 _c9zKK() //  [R1]
         { []
         }
     {offset
       c9zKK: // global
           I64[Sp] = block_c9zKP_info;
           _s9y7D::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s9y7D::I64;
           if (R1 & 7 != 0) goto u9zMl; else goto c9zKT;
       u9zMl: // global
           call _c9zKP(R1) args: 0, res: 0, upd: 0;
       c9zKT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zKK_info" {
     block_c9zKK_info:
         const _c9zKK;
         const 453;
         const 4294967326;
         const S9yi5_srt+128;
 },
 _c9zKP() //  [R1]
         { []
         }
     {offset
       c9zKP: // global
           _s9y7r::P64 = P64[Sp + 40];
           _s9y7w::I64 = I64[Sp + 8];
           _s9y7z::I64 = I64[Sp + 16];
           _s9y7D::I64 = I64[Sp + 32];
           if (I64[R1 + 7] == 0) goto c9zLw; else goto c9zLv;
       c9zLw: // global
           _s9y7I::I64 = 1;
           goto s9y7H;
       c9zLv: // global
           if (I64[Sp + 24] == 0) goto c9zLt; else goto c9zLs;
       c9zLt: // global
           _s9y7I::I64 = 2;
           goto s9y7H;
       c9zLs: // global
           _s9y7I::I64 = 3;
           goto s9y7H;
       s9y7H: // global
           (_s9y7M::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y7D::I64, _s9y7I::I64, _s9y7z::I64, _s9y7w::I64);
           if (%MO_SS_Conv_W64_W32(_s9y7M::I64) == (-1) :: W32) goto c9zLk; else goto c9zLe;
       c9zLk: // global
           (_s9y7S::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y7S::I64;
           Sp = Sp + 48;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9zLe: // global
           call MO_Touch(_s9y7r::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zKP_info" {
     block_c9zKP_info:
         const _c9zKP;
         const 965;
         const 4294967326;
         const S9yi5_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.09162752 UTC

[section ""data" . GHC.Event.EPoll.new5_closure" {
     GHC.Event.EPoll.new5_closure:
         const GHC.Event.EPoll.new5_info;
         const 0;
 },
 GHC.Event.EPoll.new5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9zMW: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9zMX; else goto c9zMY;
       c9zMX: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zMY: // global
           I64[Sp - 24] = block_c9zMT_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9zPl; else goto c9zMU;
       u9zPl: // global
           call _c9zMT(R1) args: 0, res: 0, upd: 0;
       c9zMU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new5_info" {
     GHC.Event.EPoll.new5_info:
         const GHC.Event.EPoll.new5_entry;
         const 0;
         const 897648164878;
         const 17179869207;
         const S9yi5_srt+96;
 },
 _c9zMT() //  [R1]
         { []
         }
     {offset
       c9zMT: // global
           _s9y84::I64 = I64[R1 + 7];
           if (_s9y84::I64 & 1 == 0) goto c9zP0; else goto c9zOF;
       c9zP0: // global
           if (_s9y84::I64 & 2 == 0) goto c9zPf; else goto c9zP9;
       c9zPf: // global
           _s9y86::I64 = 0;
           goto s9y85;
       c9zP9: // global
           _s9y86::I64 = 4;
           goto s9y85;
       c9zOF: // global
           if (_s9y84::I64 & 2 == 0) goto c9zOU; else goto c9zOO;
       c9zOU: // global
           _s9y86::I64 = 1;
           goto s9y85;
       c9zOO: // global
           _s9y86::I64 = 5;
           goto s9y85;
       s9y85: // global
           I64[Sp - 8] = block_c9zN7_info;
           R2 = 4;
           R1 = 12;
           I64[Sp] = _s9y86::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zMT_info" {
     block_c9zMT_info:
         const _c9zMT;
         const 2;
         const 622770257950;
         const S9yi5_srt+96;
 },
 _c9zN7() //  [R1]
         { []
         }
     {offset
       c9zN7: // global
           _s9y80::P64 = P64[Sp + 24];
           _s9y8d::I64 = I64[Sp + 8] | 1073741824;
           _s9y8e::I64 = R1 + 16;
           I32[_s9y8e::I64] = %MO_UU_Conv_W64_W32(_s9y8d::I64);
           I64[Sp - 8] = block_c9zNf_info;
           _s9y8c::P64 = R1;
           R1 = _s9y80::P64;
           I64[Sp] = _s9y8e::I64;
           I64[Sp + 8] = _s9y8d::I64;
           P64[Sp + 24] = _s9y8c::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zPm; else goto c9zNg;
       u9zPm: // global
           call _c9zNf(R1) args: 0, res: 0, upd: 0;
       c9zNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zN7_info" {
     block_c9zN7_info:
         const _c9zN7;
         const 67;
         const 622770257950;
         const S9yi5_srt+96;
 },
 _c9zNf() //  [R1]
         { []
         }
     {offset
       c9zNf: // global
           _s9y7Z::P64 = P64[Sp + 24];
           _s9y8h::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           I64[Sp] = block_c9zNn_info;
           R1 = _s9y7Z::P64;
           I64[Sp + 24] = _s9y8h::I64;
           if (R1 & 7 != 0) goto u9zPn; else goto c9zNr;
       u9zPn: // global
           call _c9zNn(R1) args: 0, res: 0, upd: 0;
       c9zNr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zNf_info" {
     block_c9zNf_info:
         const _c9zNf;
         const 196;
         const 622770257950;
         const S9yi5_srt+96;
 },
 _c9zNn() //  [R1]
         { []
         }
     {offset
       c9zNn: // global
           _s9y8c::P64 = P64[Sp + 32];
           _s9y8l::I64 = I64[R1 + 15];
           (_s9y8q::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 3, I64[Sp + 24], I64[Sp + 8]);
           call MO_Touch(_s9y8c::P64);
           if (%MO_SS_Conv_W64_W32(_s9y8q::I64) == 0 :: W32) goto c9zOw; else goto c9zNH;
       c9zOw: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9zNH: // global
           (_s9y8w::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9y8w::I64) == 2 :: W32) goto c9zO0; else goto c9zNR;
       c9zO0: // global
           I64[Sp + 8] = block_c9zNZ_info;
           R2 = 4;
           R1 = 12;
           I64[Sp + 32] = _s9y8l::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c9zNR: // global
           R2 = GHC.Event.EPoll.new7_closure;
           Sp = Sp + 40;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zNn_info" {
     block_c9zNn_info:
         const _c9zNn;
         const 452;
         const 622770257950;
         const S9yi5_srt+96;
 },
 _c9zNZ() //  [R1]
         { []
         }
     {offset
       c9zNZ: // global
           _s9y8h::I64 = I64[Sp + 16];
           _s9y8l::I64 = I64[Sp + 24];
           _s9y8E::I64 = R1 + 16;
           I32[_s9y8E::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           I32[_s9y8E::I64 + 4] = %MO_UU_Conv_W64_W32(_s9y8h::I64);
           (_s9y8L::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9y8l::I64, 1, _s9y8h::I64, _s9y8E::I64);
           if (%MO_SS_Conv_W64_W32(_s9y8L::I64) == (-1) :: W32) goto c9zOq; else goto c9zOk;
       c9zOq: // global
           (_s9y8R::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y8R::I64;
           Sp = Sp + 32;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9zOk: // global
           call MO_Touch(R1);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zNZ_info" {
     block_c9zNZ_info:
         const _c9zNZ;
         const 451;
         const 4294967326;
         const S9yi5_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.104568301 UTC

[section ""data" . GHC.Event.EPoll.new4_closure" {
     GHC.Event.EPoll.new4_closure:
         const GHC.Event.EPoll.new4_info;
 },
 GHC.Event.EPoll.new4_entry() //  [R2]
         { []
         }
     {offset
       c9zPZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zQ0; else goto c9zQ1;
       c9zQ0: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.new4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zQ1: // global
           I64[Sp - 8] = block_c9zPW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9zQ7; else goto c9zPX;
       u9zQ7: // global
           call _c9zPW(R1) args: 0, res: 0, upd: 0;
       c9zPX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new4_info" {
     GHC.Event.EPoll.new4_info:
         const GHC.Event.EPoll.new4_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9zPW() //  [R1]
         { []
         }
     {offset
       c9zPW: // global
           (_s9y94::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(I64[R1 + 15]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zPW_info" {
     block_c9zPW_info:
         const _c9zPW;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.111421976 UTC

[section ""data" . GHC.Event.EPoll.$w$j_closure" {
     GHC.Event.EPoll.$w$j_closure:
         const GHC.Event.EPoll.$w$j_info;
         const 0;
 },
 GHC.Event.EPoll.$w$j_entry() //  [R2]
         { []
         }
     {offset
       c9zQq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zQr; else goto c9zQs;
       c9zQr: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$j_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9zQs: // global
           (_s9y9a::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_s9y9e::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_s9y9j::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(R2, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9a::I64)), _s9y9e::I64);
           if (%MO_SS_Conv_W64_W32(_s9y9j::I64) == (-1) :: W32) goto c9zR1; else goto c9zQR;
       c9zR1: // global
           (_s9y9A::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9y9A::I64;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       c9zQR: // global
           I64[Sp - 16] = block_c9zQE_info;
           R1 = 768;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$j_info" {
     GHC.Event.EPoll.$w$j_info:
         const GHC.Event.EPoll.$w$j_entry;
         const 0;
         const 1859720839182;
         const 8589934596;
         const S9yi5_srt+104;
 },
 _c9zQE() //  [R1]
         { []
         }
     {offset
       c9zQE: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9zQV; else goto c9zQU;
       c9zQV: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zQU: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 64;
           I64[Sp] = block_c9zQM_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zQE_info" {
     block_c9zQE_info:
         const _c9zQE;
         const 65;
         const 210453397534;
         const S9yi5_srt+104;
 },
 _c9zQM() //  [R1]
         { []
         }
     {offset
       c9zQM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9zQY; else goto c9zQX;
       c9zQY: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9zQX: // global
           I64[Hp - 64] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.EPoll.new10_closure+4;
           P64[Hp - 16] = GHC.Event.EPoll.new9_closure+5;
           P64[Hp - 8] = GHC.Event.EPoll.new5_closure+4;
           P64[Hp] = GHC.Event.EPoll.new4_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zQM_info" {
     block_c9zQM_info:
         const _c9zQM;
         const 65;
         const 210453397534;
         const S9yi5_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.118427655 UTC

[section ""cstring" . GHC.Event.EPoll.new3_bytes" {
     GHC.Event.EPoll.new3_bytes:
         I8[] [101,112,111,108,108,67,114,101,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.120599051 UTC

[section ""data" . GHC.Event.EPoll.new2_closure" {
     GHC.Event.EPoll.new2_closure:
         const GHC.Event.EPoll.new2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new2_entry() //  [R1]
         { []
         }
     {offset
       c9zRw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9zRx; else goto c9zRy;
       c9zRx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9zRy: // global
           (_c9zRt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9zRt::I64 == 0) goto c9zRv; else goto c9zRu;
       c9zRv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9zRu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9zRt::I64;
           R2 = GHC.Event.EPoll.new3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new2_info" {
     GHC.Event.EPoll.new2_info:
         const GHC.Event.EPoll.new2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.125445402 UTC

[section ""data" . GHC.Event.EPoll.new1_closure" {
     GHC.Event.EPoll.new1_closure:
         const GHC.Event.EPoll.new1_info;
         const 0;
 },
 GHC.Event.EPoll.new1_entry() //  []
         { []
         }
     {offset
       c9zRR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9zRS; else goto c9zRT;
       c9zRS: // global
           R1 = GHC.Event.EPoll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9zRT: // global
           (_s9y9G::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] epoll_create(256);
           _s9y9H::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9y9G::I64));
           if (_s9y9H::I64 != (-1)) goto c9zRP; else goto c9zRQ;
       c9zRP: // global
           R2 = _s9y9H::I64;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
       c9zRQ: // global
           I64[Sp - 8] = block_c9zS3_info;
           R2 = GHC.Event.EPoll.new2_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new1_info" {
     GHC.Event.EPoll.new1_info:
         const GHC.Event.EPoll.new1_entry;
         const 0;
         const 15397457756174;
         const 4294967299;
         const S9yi5_srt+96;
 },
 _c9zS3() //  [R1]
         { []
         }
     {offset
       c9zS3: // global
           I64[Sp] = block_c9zS5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9zSd; else goto c9zS8;
       u9zSd: // global
           call _c9zS5(R1) args: 0, res: 0, upd: 0;
       c9zS8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zS3_info" {
     block_c9zS3_info:
         const _c9zS3;
         const 0;
         const 4294967326;
         const S9yi5_srt+168;
 },
 _c9zS5() //  [R1]
         { []
         }
     {offset
       c9zS5: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9zS5_info" {
     block_c9zS5_info:
         const _c9zS5;
         const 0;
         const 4294967326;
         const S9yi5_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.131576589 UTC

[section ""data" . GHC.Event.EPoll.new_closure" {
     GHC.Event.EPoll.new_closure:
         const GHC.Event.EPoll.new_info;
         const 0;
 },
 GHC.Event.EPoll.new_entry() //  []
         { []
         }
     {offset
       c9zSu: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new_info" {
     GHC.Event.EPoll.new_info:
         const GHC.Event.EPoll.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const S9yi5_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.135550603 UTC

[section ""data" . GHC.Event.EPoll.Event_closure" {
     GHC.Event.EPoll.Event_closure:
         const GHC.Event.EPoll.Event_info;
 },
 GHC.Event.EPoll.Event_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zSG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zSK; else goto c9zSJ;
       c9zSK: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.Event_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zSJ: // global
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.Event_info" {
     GHC.Event.EPoll.Event_info:
         const GHC.Event.EPoll.Event_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.139216455 UTC

[section ""data" . GHC.Event.EPoll.EPoll_closure" {
     GHC.Event.EPoll.EPoll_closure:
         const GHC.Event.EPoll.EPoll_info;
 },
 GHC.Event.EPoll.EPoll_entry() //  [R2, R3]
         { []
         }
     {offset
       c9zSV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9zSZ; else goto c9zSY;
       c9zSZ: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.EPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9zSY: // global
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.EPoll_info" {
     GHC.Event.EPoll.EPoll_info:
         const GHC.Event.EPoll.EPoll_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.143167776 UTC

[section ""cstring" . i9z9r_str" {
     i9z9r_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,118,101,110,116]
 },
 GHC.Event.EPoll.Event_con_entry() //  [R1]
         { []
         }
     {offset
       c9zT5: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.Event_con_info" {
     GHC.Event.EPoll.Event_con_info:
         const GHC.Event.EPoll.Event_con_entry;
         const 2;
         const 4;
         const i9z9r_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.146117014 UTC

[section ""cstring" . i9z9t_str" {
     i9z9t_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,80,111,108,108]
 },
 GHC.Event.EPoll.EPoll_con_entry() //  [R1]
         { []
         }
     {offset
       c9zTb: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.EPoll_con_info" {
     GHC.Event.EPoll.EPoll_con_info:
         const GHC.Event.EPoll.EPoll_con_entry;
         const 4294967297;
         const 5;
         const i9z9t_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:40.14920858 UTC

[section ""relreadonly" . S9yi5_srt" {
     S9yi5_srt:
         const GHC.Event.EPoll.$fShowEPollFd5_closure;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.EPoll.$fShowEvent6_closure;
         const GHC.Event.EPoll.$w$cshowsPrec1_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure;
         const GHC.Event.EPoll.$fShowEvent1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_r9y02_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.EPoll.new10_closure;
         const lvl3_r9y04_closure;
         const lvl5_r9y06_closure;
         const GHC.Event.EPoll.new6_closure;
         const GHC.Event.EPoll.new9_closure;
         const GHC.Event.EPoll.new5_closure;
         const GHC.Event.EPoll.new7_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const GHC.Event.EPoll.$w$j_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.EPoll.new2_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.337822034 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:04:42.340284948 UTC

[section ""data" . GHC.Event.EPoll.$WEPoll_closure" {
     GHC.Event.EPoll.$WEPoll_closure:
         const GHC.Event.EPoll.$WEPoll_info;
 },
 GHC.Event.EPoll.$WEPoll_entry() //  [R2, R3]
         { []
         }
     {offset
       c9A31: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9A3a; else goto c9A3b;
       c9A3a: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$WEPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A3b: // global
           I64[Sp - 16] = block_c9A2Y_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A3h; else goto c9A2Z;
       u9A3h: // global
           call _c9A2Y(R1) args: 0, res: 0, upd: 0;
       c9A2Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$WEPoll_info" {
     GHC.Event.EPoll.$WEPoll_info:
         const GHC.Event.EPoll.$WEPoll_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _c9A2Y() //  [R1]
         { []
         }
     {offset
       c9A2Y: // global
           I64[Sp] = block_c9A34_info;
           _s9zTl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zTl::I64;
           if (R1 & 7 != 0) goto u9A3g; else goto c9A35;
       u9A3g: // global
           call _c9A34(R1) args: 0, res: 0, upd: 0;
       c9A35: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A2Y_info" {
     block_c9A2Y_info:
         const _c9A2Y;
         const 1;
         const 30;
 },
 _c9A34() //  [R1]
         { []
         }
     {offset
       c9A34: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9A3f; else goto c9A3e;
       c9A3f: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A3e: // global
           _s9zTn::P64 = P64[R1 + 7];
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = _s9zTn::P64;
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A34_info" {
     block_c9A34_info:
         const _c9A34;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.347201253 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$calignment_closure" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_closure:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$calignment_entry() //  []
         { []
         }
     {offset
       c9A3E: // global
           R1 = Foreign.Storable.$fStorableBool7_closure;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent_$calignment_info" {
     GHC.Event.EPoll.$fStorableEvent_$calignment_info:
         const GHC.Event.EPoll.$fStorableEvent_$calignment_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.350346215 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent7_closure" {
     GHC.Event.EPoll.$fStorableEvent7_closure:
         const GHC.Types.I#_con_info;
         const 12;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.352329105 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_info;
 },
 GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry() //  []
         { []
         }
     {offset
       c9A3R: // global
           R1 = GHC.Event.EPoll.$fStorableEvent7_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent_$csizeOf_info" {
     GHC.Event.EPoll.$fStorableEvent_$csizeOf_info:
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.356558412 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent2_closure" {
     GHC.Event.EPoll.$fStorableEvent2_closure:
         const GHC.Event.EPoll.$fStorableEvent2_info;
 },
 GHC.Event.EPoll.$fStorableEvent2_entry() //  [R2]
         { []
         }
     {offset
       c9A46: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9A4f; else goto c9A4g;
       c9A4f: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9A4g: // global
           I64[Sp - 8] = block_c9A43_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A4k; else goto c9A44;
       u9A4k: // global
           call _c9A43(R1) args: 0, res: 0, upd: 0;
       c9A44: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent2_info" {
     GHC.Event.EPoll.$fStorableEvent2_info:
         const GHC.Event.EPoll.$fStorableEvent2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9A43() //  [R1]
         { []
         }
     {offset
       c9A43: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9A4j; else goto c9A4i;
       c9A4j: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A4i: // global
           _s9zTt::I64 = I64[R1 + 7];
           _s9zTw::I64 = %MO_UU_Conv_W32_W64(I32[_s9zTt::I64]);
           _s9zTA::I64 = %MO_SS_Conv_W32_W64(I32[_s9zTt::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9zTA::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9zTw::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A43_info" {
     block_c9A43_info:
         const _c9A43;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.363491477 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent1_closure" {
     GHC.Event.EPoll.$fStorableEvent1_closure:
         const GHC.Event.EPoll.$fStorableEvent1_info;
 },
 GHC.Event.EPoll.$fStorableEvent1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9A4I: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9A4W; else goto c9A4X;
       c9A4W: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A4X: // global
           I64[Sp - 16] = block_c9A4F_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A58; else goto c9A4G;
       u9A58: // global
           call _c9A4F(R1) args: 0, res: 0, upd: 0;
       c9A4G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent1_info" {
     GHC.Event.EPoll.$fStorableEvent1_info:
         const GHC.Event.EPoll.$fStorableEvent1_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9A4F() //  [R1]
         { []
         }
     {offset
       c9A4F: // global
           I64[Sp] = block_c9A4L_info;
           _s9zTI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zTI::I64;
           if (R1 & 7 != 0) goto u9A57; else goto c9A4M;
       u9A57: // global
           call _c9A4L(R1) args: 0, res: 0, upd: 0;
       c9A4M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A4F_info" {
     block_c9A4F_info:
         const _c9A4F;
         const 1;
         const 30;
 },
 _c9A4L() //  [R1]
         { []
         }
     {offset
       c9A4L: // global
           I64[Sp - 8] = block_c9A4Q_info;
           _s9zTL::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9zTL::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A59; else goto c9A4R;
       u9A59: // global
           call _c9A4Q(R1) args: 0, res: 0, upd: 0;
       c9A4R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A4L_info" {
     block_c9A4L_info:
         const _c9A4L;
         const 65;
         const 30;
 },
 _c9A4Q() //  [R1]
         { []
         }
     {offset
       c9A4Q: // global
           _s9zTL::P64 = P64[Sp + 8];
           I32[I64[Sp + 16]] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 8] = block_c9A4V_info;
           R1 = _s9zTL::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto u9A5a; else goto c9A51;
       u9A5a: // global
           call _c9A4V(R1) args: 0, res: 0, upd: 0;
       c9A51: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A4Q_info" {
     block_c9A4Q_info:
         const _c9A4Q;
         const 130;
         const 30;
 },
 _c9A4V() //  [R1]
         { []
         }
     {offset
       c9A4V: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A4V_info" {
     block_c9A4V_info:
         const _c9A4V;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.37557985 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent4_closure" {
     GHC.Event.EPoll.$fStorableEvent4_closure:
         const GHC.Event.EPoll.$fStorableEvent4_info;
 },
 GHC.Event.EPoll.$fStorableEvent4_entry() //  [R2, R3]
         { []
         }
     {offset
       c9A5N: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9A64; else goto c9A65;
       c9A64: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent4_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A65: // global
           I64[Sp - 16] = block_c9A5K_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A6b; else goto c9A5L;
       u9A6b: // global
           call _c9A5K(R1) args: 0, res: 0, upd: 0;
       c9A5L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent4_info" {
     GHC.Event.EPoll.$fStorableEvent4_info:
         const GHC.Event.EPoll.$fStorableEvent4_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9A5K() //  [R1]
         { []
         }
     {offset
       c9A5K: // global
           I64[Sp] = block_c9A5Q_info;
           _s9zTX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zTX::I64;
           if (R1 & 7 != 0) goto u9A6a; else goto c9A5R;
       u9A6a: // global
           call _c9A5Q(R1) args: 0, res: 0, upd: 0;
       c9A5R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A5K_info" {
     block_c9A5K_info:
         const _c9A5K;
         const 1;
         const 30;
 },
 _c9A5Q() //  [R1]
         { []
         }
     {offset
       c9A5Q: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9A69; else goto c9A68;
       c9A69: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A68: // global
           _s9zU0::I64 = I64[Sp + 8] + I64[R1 + 7];
           _s9zU3::I64 = %MO_UU_Conv_W32_W64(I32[_s9zU0::I64]);
           _s9zU7::I64 = %MO_SS_Conv_W32_W64(I32[_s9zU0::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9zU7::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9zU3::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A5Q_info" {
     block_c9A5Q_info:
         const _c9A5Q;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.383744128 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent6_closure" {
     GHC.Event.EPoll.$fStorableEvent6_closure:
         const GHC.Event.EPoll.$fStorableEvent6_info;
 },
 GHC.Event.EPoll.$fStorableEvent6_entry() //  [R2, R3]
         { []
         }
     {offset
       c9A6G: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9A70; else goto c9A71;
       c9A70: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent6_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A71: // global
           I64[Sp - 16] = block_c9A6D_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9A77; else goto c9A6E;
       u9A77: // global
           call _c9A6D(R1) args: 0, res: 0, upd: 0;
       c9A6E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent6_info" {
     GHC.Event.EPoll.$fStorableEvent6_info:
         const GHC.Event.EPoll.$fStorableEvent6_entry;
         const 0;
         const 14;
         const 12884901903;
 },
 _c9A6D() //  [R1]
         { []
         }
     {offset
       c9A6D: // global
           I64[Sp] = block_c9A6J_info;
           _s9zUf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zUf::I64;
           if (R1 & 7 != 0) goto u9A76; else goto c9A6K;
       u9A76: // global
           call _c9A6J(R1) args: 0, res: 0, upd: 0;
       c9A6K: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A6D_info" {
     block_c9A6D_info:
         const _c9A6D;
         const 1;
         const 30;
 },
 _c9A6J() //  [R1]
         { []
         }
     {offset
       c9A6J: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9A75; else goto c9A74;
       c9A75: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9A74: // global
           _s9zUi::I64 = I64[Sp + 8] + I64[R1 + 7] * 12;
           _s9zUm::I64 = %MO_UU_Conv_W32_W64(I32[_s9zUi::I64]);
           _s9zUq::I64 = %MO_SS_Conv_W32_W64(I32[_s9zUi::I64 + 4]);
           I64[Hp - 48] = GHC.Int.I32#_con_info;
           I64[Hp - 40] = _s9zUq::I64;
           I64[Hp - 32] = GHC.Word.W32#_con_info;
           I64[Hp - 24] = _s9zUm::I64;
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 47;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A6J_info" {
     block_c9A6J_info:
         const _c9A6J;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.392823319 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent3_closure" {
     GHC.Event.EPoll.$fStorableEvent3_closure:
         const GHC.Event.EPoll.$fStorableEvent3_info;
 },
 GHC.Event.EPoll.$fStorableEvent3_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9A7D: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9A7Z; else goto c9A80;
       c9A7Z: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent3_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A80: // global
           I64[Sp - 24] = block_c9A7A_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9A8c; else goto c9A7B;
       u9A8c: // global
           call _c9A7A(R1) args: 0, res: 0, upd: 0;
       c9A7B: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent3_info" {
     GHC.Event.EPoll.$fStorableEvent3_info:
         const GHC.Event.EPoll.$fStorableEvent3_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9A7A() //  [R1]
         { []
         }
     {offset
       c9A7A: // global
           I64[Sp] = block_c9A7G_info;
           _s9zUz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zUz::I64;
           if (R1 & 7 != 0) goto u9A8b; else goto c9A7H;
       u9A8b: // global
           call _c9A7G(R1) args: 0, res: 0, upd: 0;
       c9A7H: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A7A_info" {
     block_c9A7A_info:
         const _c9A7A;
         const 2;
         const 30;
 },
 _c9A7G() //  [R1]
         { []
         }
     {offset
       c9A7G: // global
           I64[Sp] = block_c9A7L_info;
           _s9zUB::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9zUB::I64;
           if (R1 & 7 != 0) goto u9A8d; else goto c9A7M;
       u9A8d: // global
           call _c9A7L(R1) args: 0, res: 0, upd: 0;
       c9A7M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A7G_info" {
     block_c9A7G_info:
         const _c9A7G;
         const 66;
         const 30;
 },
 _c9A7L() //  [R1]
         { []
         }
     {offset
       c9A7L: // global
           I64[Sp - 8] = block_c9A7Q_info;
           _s9zUE::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9zUE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A8e; else goto c9A7R;
       u9A8e: // global
           call _c9A7Q(R1) args: 0, res: 0, upd: 0;
       c9A7R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A7L_info" {
     block_c9A7L_info:
         const _c9A7L;
         const 194;
         const 30;
 },
 _c9A7Q() //  [R1]
         { []
         }
     {offset
       c9A7Q: // global
           _s9zUE::P64 = P64[Sp + 8];
           _s9zUH::I64 = I64[Sp + 16] + I64[Sp + 24];
           I32[_s9zUH::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9A7Y_info;
           R1 = _s9zUE::P64;
           I64[Sp + 24] = _s9zUH::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9A8f; else goto c9A85;
       u9A8f: // global
           call _c9A7Y(R1) args: 0, res: 0, upd: 0;
       c9A85: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A7Q_info" {
     block_c9A7Q_info:
         const _c9A7Q;
         const 387;
         const 30;
 },
 _c9A7Y() //  [R1]
         { []
         }
     {offset
       c9A7Y: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A7Y_info" {
     block_c9A7Y_info:
         const _c9A7Y;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.406721482 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent5_closure" {
     GHC.Event.EPoll.$fStorableEvent5_closure:
         const GHC.Event.EPoll.$fStorableEvent5_info;
 },
 GHC.Event.EPoll.$fStorableEvent5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9A8X: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9A9m; else goto c9A9n;
       c9A9m: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fStorableEvent5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9A9n: // global
           I64[Sp - 24] = block_c9A8U_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9A9z; else goto c9A8V;
       u9A9z: // global
           call _c9A8U(R1) args: 0, res: 0, upd: 0;
       c9A8V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fStorableEvent5_info" {
     GHC.Event.EPoll.$fStorableEvent5_info:
         const GHC.Event.EPoll.$fStorableEvent5_entry;
         const 0;
         const 14;
         const 17179869207;
 },
 _c9A8U() //  [R1]
         { []
         }
     {offset
       c9A8U: // global
           I64[Sp] = block_c9A90_info;
           _s9zUS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zUS::I64;
           if (R1 & 7 != 0) goto u9A9y; else goto c9A91;
       u9A9y: // global
           call _c9A90(R1) args: 0, res: 0, upd: 0;
       c9A91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A8U_info" {
     block_c9A8U_info:
         const _c9A8U;
         const 2;
         const 30;
 },
 _c9A90() //  [R1]
         { []
         }
     {offset
       c9A90: // global
           I64[Sp] = block_c9A95_info;
           _s9zUU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _s9zUU::I64;
           if (R1 & 7 != 0) goto u9A9A; else goto c9A96;
       u9A9A: // global
           call _c9A95(R1) args: 0, res: 0, upd: 0;
       c9A96: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A90_info" {
     block_c9A90_info:
         const _c9A90;
         const 66;
         const 30;
 },
 _c9A95() //  [R1]
         { []
         }
     {offset
       c9A95: // global
           I64[Sp - 8] = block_c9A9a_info;
           _s9zUX::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _s9zUX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9A9B; else goto c9A9b;
       u9A9B: // global
           call _c9A9a(R1) args: 0, res: 0, upd: 0;
       c9A9b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A95_info" {
     block_c9A95_info:
         const _c9A95;
         const 194;
         const 30;
 },
 _c9A9a() //  [R1]
         { []
         }
     {offset
       c9A9a: // global
           _s9zUX::P64 = P64[Sp + 8];
           _s9zV0::I64 = I64[Sp + 16] + I64[Sp + 24] * 12;
           I32[_s9zV0::I64] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           I64[Sp + 16] = block_c9A9l_info;
           R1 = _s9zUX::P64;
           I64[Sp + 24] = _s9zV0::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9A9C; else goto c9A9s;
       u9A9C: // global
           call _c9A9l(R1) args: 0, res: 0, upd: 0;
       c9A9s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A9a_info" {
     block_c9A9a_info:
         const _c9A9a;
         const 387;
         const 30;
 },
 _c9A9l() //  [R1]
         { []
         }
     {offset
       c9A9l: // global
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(I64[R1 + 7]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9A9l_info" {
     block_c9A9l_info:
         const _c9A9l;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.41774704 UTC

[section ""data" . GHC.Event.EPoll.$fStorableEvent_closure" {
     GHC.Event.EPoll.$fStorableEvent_closure:
         const Foreign.Storable.C:Storable_con_info;
         const GHC.Event.EPoll.$fStorableEvent_$csizeOf_closure+1;
         const GHC.Event.EPoll.$fStorableEvent_$calignment_closure+1;
         const GHC.Event.EPoll.$fStorableEvent6_closure+3;
         const GHC.Event.EPoll.$fStorableEvent5_closure+4;
         const GHC.Event.EPoll.$fStorableEvent4_closure+3;
         const GHC.Event.EPoll.$fStorableEvent3_closure+4;
         const GHC.Event.EPoll.$fStorableEvent2_closure+2;
         const GHC.Event.EPoll.$fStorableEvent1_closure+3;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.419569889 UTC

[section ""data" . GHC.Event.EPoll.$fEqEventType_closure" {
     GHC.Event.EPoll.$fEqEventType_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Word.eqWord32_closure+2;
         const GHC.Word.neWord32_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.421888313 UTC

[section ""data" . GHC.Event.EPoll.$fBitsEventType_closure" {
     GHC.Event.EPoll.$fBitsEventType_closure:
         const Data.Bits.C:Bits_con_info;
         const GHC.Event.EPoll.$fEqEventType_closure+1;
         const GHC.Word.$fBitsWord32_$c.&._closure+2;
         const GHC.Word.$fBitsWord32_$c.|._closure+2;
         const GHC.Word.$fBitsWord32_$cxor_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplement_closure+1;
         const GHC.Word.$fBitsWord32_$cshift_closure+2;
         const GHC.Word.$fBitsWord32_$crotate_closure+2;
         const GHC.Word.$fBitsWord32_$cminBound_closure;
         const GHC.Word.$fBitsWord32_$cbit_closure+1;
         const GHC.Word.$fBitsWord32_$csetBit_closure+2;
         const GHC.Word.$fBitsWord32_$cclearBit_closure+2;
         const GHC.Word.$fBitsWord32_$ccomplementBit_closure+2;
         const GHC.Word.$fBitsWord32_$ctestBit_closure+2;
         const GHC.Word.$fBitsWord32_$cbitSizeMaybe_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fBitsWord32_$cisSigned_closure+1;
         const GHC.Word.$fBitsWord32_$cshiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftL_closure+2;
         const GHC.Word.$fBitsWord32_$cshiftR_closure+2;
         const GHC.Word.$fBitsWord32_$cunsafeShiftR_closure+2;
         const GHC.Word.$fBitsWord32_$crotateL_closure+2;
         const GHC.Word.$fBitsWord32_$crotateR_closure+2;
         const GHC.Word.$fBitsWord32_$cpopCount_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.424329237 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd1_closure" {
     GHC.Event.EPoll.fromEPollFd1_closure:
         const GHC.Event.EPoll.fromEPollFd1_info;
 },
 GHC.Event.EPoll.fromEPollFd1_entry() //  [R2]
         { []
         }
     {offset
       c9Aam: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.fromEPollFd1_info" {
     GHC.Event.EPoll.fromEPollFd1_info:
         const GHC.Event.EPoll.fromEPollFd1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.427739474 UTC

[section ""data" . GHC.Event.EPoll.fromEPollFd_closure" {
     GHC.Event.EPoll.fromEPollFd_closure:
         const GHC.Event.EPoll.fromEPollFd_info;
 },
 GHC.Event.EPoll.fromEPollFd_entry() //  [R2]
         { []
         }
     {offset
       c9Aaz: // global
           R2 = R2;
           call GHC.Event.EPoll.fromEPollFd1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.fromEPollFd_info" {
     GHC.Event.EPoll.fromEPollFd_info:
         const GHC.Event.EPoll.fromEPollFd_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.43099776 UTC

[section ""data" . GHC.Event.EPoll.unEventType1_closure" {
     GHC.Event.EPoll.unEventType1_closure:
         const GHC.Event.EPoll.unEventType1_info;
 },
 GHC.Event.EPoll.unEventType1_entry() //  [R2]
         { []
         }
     {offset
       c9AaK: // global
           R1 = R2 & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.unEventType1_info" {
     GHC.Event.EPoll.unEventType1_info:
         const GHC.Event.EPoll.unEventType1_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.434896413 UTC

[section ""data" . GHC.Event.EPoll.unEventType_closure" {
     GHC.Event.EPoll.unEventType_closure:
         const GHC.Event.EPoll.unEventType_info;
 },
 GHC.Event.EPoll.unEventType_entry() //  [R2]
         { []
         }
     {offset
       c9AaX: // global
           R2 = R2;
           call GHC.Event.EPoll.unEventType1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.unEventType_info" {
     GHC.Event.EPoll.unEventType_info:
         const GHC.Event.EPoll.unEventType_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.439019336 UTC

[section ""data" . GHC.Event.EPoll.eventFd_closure" {
     GHC.Event.EPoll.eventFd_closure:
         const GHC.Event.EPoll.eventFd_info;
 },
 GHC.Event.EPoll.eventFd_entry() //  [R2]
         { []
         }
     {offset
       c9Abb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Abc; else goto c9Abd;
       c9Abc: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Abd: // global
           I64[Sp - 8] = block_c9Ab8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Abh; else goto c9Ab9;
       u9Abh: // global
           call _c9Ab8(R1) args: 0, res: 0, upd: 0;
       c9Ab9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.eventFd_info" {
     GHC.Event.EPoll.eventFd_info:
         const GHC.Event.EPoll.eventFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9Ab8() //  [R1]
         { []
         }
     {offset
       c9Ab8: // global
           R1 = P64[R1 + 15] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Ab8_info" {
     block_c9Ab8_info:
         const _c9Ab8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.444379102 UTC

[section ""data" . GHC.Event.EPoll.eventTypes_closure" {
     GHC.Event.EPoll.eventTypes_closure:
         const GHC.Event.EPoll.eventTypes_info;
 },
 GHC.Event.EPoll.eventTypes_entry() //  [R2]
         { []
         }
     {offset
       c9AbB: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9AbC; else goto c9AbD;
       c9AbC: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.eventTypes_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AbD: // global
           I64[Sp - 8] = block_c9Aby_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AbH; else goto c9Abz;
       u9AbH: // global
           call _c9Aby(R1) args: 0, res: 0, upd: 0;
       c9Abz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.eventTypes_info" {
     GHC.Event.EPoll.eventTypes_info:
         const GHC.Event.EPoll.eventTypes_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9Aby() //  [R1]
         { []
         }
     {offset
       c9Aby: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Aby_info" {
     block_c9Aby_info:
         const _c9Aby;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.45033494 UTC

[section ""data" . GHC.Event.EPoll.epollEvents_closure" {
     GHC.Event.EPoll.epollEvents_closure:
         const GHC.Event.EPoll.epollEvents_info;
 },
 GHC.Event.EPoll.epollEvents_entry() //  [R2]
         { []
         }
     {offset
       c9Ac1: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Ac5; else goto c9Ac6;
       c9Ac5: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Ac6: // global
           I64[Sp - 8] = block_c9AbY_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9Aca; else goto c9AbZ;
       u9Aca: // global
           call _c9AbY(R1) args: 0, res: 0, upd: 0;
       c9AbZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.epollEvents_info" {
     GHC.Event.EPoll.epollEvents_info:
         const GHC.Event.EPoll.epollEvents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9AbY() //  [R1]
         { []
         }
     {offset
       c9AbY: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9Ac9; else goto c9Ac8;
       c9Ac9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Ac8: // global
           _s9zVk::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _s9zVk::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AbY_info" {
     block_c9AbY_info:
         const _c9AbY;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.456115987 UTC

[section ""data" . GHC.Event.EPoll.epollFd_closure" {
     GHC.Event.EPoll.epollFd_closure:
         const GHC.Event.EPoll.epollFd_info;
 },
 GHC.Event.EPoll.epollFd_entry() //  [R2]
         { []
         }
     {offset
       c9Acu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9Acy; else goto c9Acz;
       c9Acy: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.epollFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9Acz: // global
           I64[Sp - 8] = block_c9Acr_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AcD; else goto c9Acs;
       u9AcD: // global
           call _c9Acr(R1) args: 0, res: 0, upd: 0;
       c9Acs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.epollFd_info" {
     GHC.Event.EPoll.epollFd_info:
         const GHC.Event.EPoll.epollFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _c9Acr() //  [R1]
         { []
         }
     {offset
       c9Acr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9AcC; else goto c9AcB;
       c9AcC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AcB: // global
           _s9zVn::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9zVn::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Acr_info" {
     block_c9Acr_info:
         const _c9Acr;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.461458996 UTC

[section ""data" . GHC.Event.EPoll.available_closure" {
     GHC.Event.EPoll.available_closure:
         const GHC.Types.True_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.463198197 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule4_bytes" {
     GHC.Event.EPoll.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.464987843 UTC

[section ""data" . GHC.Event.EPoll.$trModule3_closure" {
     GHC.Event.EPoll.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.466771146 UTC

[section ""cstring" . GHC.Event.EPoll.$trModule2_bytes" {
     GHC.Event.EPoll.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,69,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.468957287 UTC

[section ""data" . GHC.Event.EPoll.$trModule1_closure" {
     GHC.Event.EPoll.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.471004093 UTC

[section ""data" . GHC.Event.EPoll.$trModule_closure" {
     GHC.Event.EPoll.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.EPoll.$trModule3_closure+1;
         const GHC.Event.EPoll.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.472777734 UTC

[section ""data" . $krep_r9xZP_closure" {
     $krep_r9xZP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const Foreign.C.Types.$tcCInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.474467385 UTC

[section ""data" . $krep1_r9xZQ_closure" {
     $krep1_r9xZQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Word.$tcWord32_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.476228951 UTC

[section ""data" . $krep2_r9xZR_closure" {
     $krep2_r9xZR_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.477983294 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPollFd2_bytes" {
     GHC.Event.EPoll.$tcEPollFd2_bytes:
         I8[] [69,80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.479677157 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd1_closure" {
     GHC.Event.EPoll.$tcEPollFd1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPollFd2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.481470991 UTC

[section ""data" . GHC.Event.EPoll.$tcEPollFd_closure" {
     GHC.Event.EPoll.$tcEPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPollFd1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11408974392712426853;
         const 10860743297622841984;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.483314066 UTC

[section ""data" . $krep3_r9xZS_closure" {
     $krep3_r9xZS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPollFd_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.485006941 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd1_closure" {
     GHC.Event.EPoll.$tc'EPollFd1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep3_r9xZS_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.486736908 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPollFd3_bytes" {
     GHC.Event.EPoll.$tc'EPollFd3_bytes:
         I8[] [39,69,80,111,108,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.488357491 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd2_closure" {
     GHC.Event.EPoll.$tc'EPollFd2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPollFd3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.490468301 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPollFd_closure" {
     GHC.Event.EPoll.$tc'EPollFd_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd2_closure+1;
         const GHC.Event.EPoll.$tc'EPollFd1_closure+4;
         const 13859366844265277896;
         const 3104986725924328114;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.492251472 UTC

[section ""cstring" . GHC.Event.EPoll.$tcControlOp2_bytes" {
     GHC.Event.EPoll.$tcControlOp2_bytes:
         I8[] [67,111,110,116,114,111,108,79,112]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.494406258 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp1_closure" {
     GHC.Event.EPoll.$tcControlOp1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcControlOp2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.496210402 UTC

[section ""data" . GHC.Event.EPoll.$tcControlOp_closure" {
     GHC.Event.EPoll.$tcControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcControlOp1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16670684287779227039;
         const 7079239768931473179;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.497973484 UTC

[section ""data" . $krep4_r9xZT_closure" {
     $krep4_r9xZT_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcControlOp_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.499621105 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp1_closure" {
     GHC.Event.EPoll.$tc'ControlOp1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_r9xZP_closure+1;
         const $krep4_r9xZT_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.501260635 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'ControlOp3_bytes" {
     GHC.Event.EPoll.$tc'ControlOp3_bytes:
         I8[] [39,67,111,110,116,114,111,108,79,112]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.502930085 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp2_closure" {
     GHC.Event.EPoll.$tc'ControlOp2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'ControlOp3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.504612717 UTC

[section ""data" . GHC.Event.EPoll.$tc'ControlOp_closure" {
     GHC.Event.EPoll.$tc'ControlOp_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp2_closure+1;
         const GHC.Event.EPoll.$tc'ControlOp1_closure+4;
         const 17423659744934710370;
         const 14737300415055323322;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.506386564 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEventType2_bytes" {
     GHC.Event.EPoll.$tcEventType2_bytes:
         I8[] [69,118,101,110,116,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.508101567 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType1_closure" {
     GHC.Event.EPoll.$tcEventType1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEventType2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.51056692 UTC

[section ""data" . GHC.Event.EPoll.$tcEventType_closure" {
     GHC.Event.EPoll.$tcEventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEventType1_closure+1;
         const GHC.Types.krep$*_closure;
         const 6882131545153803920;
         const 11603224301892798833;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.512391993 UTC

[section ""data" . $krep5_r9xZU_closure" {
     $krep5_r9xZU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEventType_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.514064906 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType1_closure" {
     GHC.Event.EPoll.$tc'EventType1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_r9xZQ_closure+1;
         const $krep5_r9xZU_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.515729018 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EventType3_bytes" {
     GHC.Event.EPoll.$tc'EventType3_bytes:
         I8[] [39,69,118,101,110,116,84,121,112,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.517420613 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType2_closure" {
     GHC.Event.EPoll.$tc'EventType2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EventType3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.519226853 UTC

[section ""data" . GHC.Event.EPoll.$tc'EventType_closure" {
     GHC.Event.EPoll.$tc'EventType_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EventType2_closure+1;
         const GHC.Event.EPoll.$tc'EventType1_closure+4;
         const 6895099112894632230;
         const 10353865251933672677;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.522095536 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEvent2_bytes" {
     GHC.Event.EPoll.$tcEvent2_bytes:
         I8[] [69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.523788772 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent1_closure" {
     GHC.Event.EPoll.$tcEvent1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEvent2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.525572435 UTC

[section ""data" . GHC.Event.EPoll.$tcEvent_closure" {
     GHC.Event.EPoll.$tcEvent_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEvent1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9768726503562184735;
         const 14932995848660065219;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.527402225 UTC

[section ""data" . $krep6_r9xZV_closure" {
     $krep6_r9xZV_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEvent_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.529129756 UTC

[section ""data" . $krep7_r9xZW_closure" {
     $krep7_r9xZW_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_r9xZR_closure+1;
         const $krep6_r9xZV_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.530873136 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event1_closure" {
     GHC.Event.EPoll.$tc'Event1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_r9xZU_closure+1;
         const $krep7_r9xZW_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.532580494 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'Event3_bytes" {
     GHC.Event.EPoll.$tc'Event3_bytes:
         I8[] [39,69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.534650761 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event2_closure" {
     GHC.Event.EPoll.$tc'Event2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'Event3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.536410048 UTC

[section ""data" . GHC.Event.EPoll.$tc'Event_closure" {
     GHC.Event.EPoll.$tc'Event_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'Event2_closure+1;
         const GHC.Event.EPoll.$tc'Event1_closure+4;
         const 13898227050457859187;
         const 12870286929163337655;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.538225953 UTC

[section ""data" . $krep8_r9xZX_closure" {
     $krep8_r9xZX_closure:
         const :_con_info;
         const $krep6_r9xZV_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.539910752 UTC

[section ""data" . $krep9_r9xZY_closure" {
     $krep9_r9xZY_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Array.$tcArray_closure;
         const $krep8_r9xZX_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.541594423 UTC

[section ""cstring" . GHC.Event.EPoll.$tcEPoll2_bytes" {
     GHC.Event.EPoll.$tcEPoll2_bytes:
         I8[] [69,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.543400736 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll1_closure" {
     GHC.Event.EPoll.$tcEPoll1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tcEPoll2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.54578036 UTC

[section ""data" . GHC.Event.EPoll.$tcEPoll_closure" {
     GHC.Event.EPoll.$tcEPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tcEPoll1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16362945812962510240;
         const 15183678187331181316;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.548179443 UTC

[section ""data" . $krep10_r9xZZ_closure" {
     $krep10_r9xZZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.EPoll.$tcEPoll_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.550029088 UTC

[section ""data" . $krep11_r9y00_closure" {
     $krep11_r9y00_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep9_r9xZY_closure+1;
         const $krep10_r9xZZ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.551745776 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll1_closure" {
     GHC.Event.EPoll.$tc'EPoll1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_r9xZS_closure+1;
         const $krep11_r9y00_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.553481896 UTC

[section ""cstring" . GHC.Event.EPoll.$tc'EPoll3_bytes" {
     GHC.Event.EPoll.$tc'EPoll3_bytes:
         I8[] [39,69,80,111,108,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.555179534 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll2_closure" {
     GHC.Event.EPoll.$tc'EPoll2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.EPoll.$tc'EPoll3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.556959622 UTC

[section ""data" . GHC.Event.EPoll.$tc'EPoll_closure" {
     GHC.Event.EPoll.$tc'EPoll_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.EPoll.$trModule_closure+1;
         const GHC.Event.EPoll.$tc'EPoll2_closure+1;
         const GHC.Event.EPoll.$tc'EPoll1_closure+4;
         const 11640704659469356468;
         const 11164042648060985378;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.558793334 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd4_bytes" {
     GHC.Event.EPoll.$fShowEPollFd4_bytes:
         I8[] [69,80,111,108,108,70,100,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.560471204 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd3_bytes" {
     GHC.Event.EPoll.$fShowEPollFd3_bytes:
         I8[] [102,114,111,109,69,80,111,108,108,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.562529149 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEPollFd2_bytes" {
     GHC.Event.EPoll.$fShowEPollFd2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.569987888 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec_closure" {
     GHC.Event.EPoll.$w$cshowsPrec_closure:
         const GHC.Event.EPoll.$w$cshowsPrec_info;
 },
 sat_s9zVv_entry() //  [R1]
         { []
         }
     {offset
       c9Ae8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ae9; else goto c9Aea;
       c9Ae9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aea: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVv_info" {
     sat_s9zVv_info:
         const sat_s9zVv_entry;
         const 1;
         const 16;
 },
 sat_s9zVz_entry() //  [R1]
         { []
         }
     {offset
       c9Aeb: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Aef; else goto c9Aeg;
       c9Aef: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aeg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9AdZ_info;
           _s9zVr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zVr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Aen; else goto c9Ae0;
       u9Aen: // global
           call _c9AdZ(R1) args: 0, res: 0, upd: 0;
       c9Ae0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVz_info" {
     sat_s9zVz_info:
         const sat_s9zVz_entry;
         const 2;
         const 18;
 },
 _c9AdZ() //  [R1]
         { []
         }
     {offset
       c9AdZ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Aej; else goto c9Aei;
       c9Aej: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Aei: // global
           _s9zVu::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zVv_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9Aec_info;
           R4 = Hp - 16;
           R3 = _s9zVu::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9AdZ_info" {
     block_c9AdZ_info:
         const _c9AdZ;
         const 1;
         const 30;
 },
 _c9Aec() //  [R1, R2]
         { []
         }
     {offset
       c9Aec: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Aem; else goto c9Ael;
       c9Aem: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Ael: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Aec_info" {
     block_c9Aec_info:
         const _c9Aec;
         const 0;
         const 30;
 },
 sat_s9zVA_entry() //  [R1]
         { []
         }
     {offset
       c9Aeo: // global
           _s9zVA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aep; else goto c9Aeq;
       c9Aeq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aes; else goto c9Aer;
       c9Aes: // global
           HpAlloc = 32;
           goto c9Aep;
       c9Aep: // global
           R1 = _s9zVA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aer: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVA::P64;
           _s9zVq::P64 = P64[_s9zVA::P64 + 16];
           _s9zVr::P64 = P64[_s9zVA::P64 + 24];
           I64[Hp - 24] = sat_s9zVz_info;
           P64[Hp - 8] = _s9zVq::P64;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVA_info" {
     sat_s9zVA_info:
         const sat_s9zVA_entry;
         const 2;
         const 18;
 },
 sat_s9zVE_entry() //  [R1]
         { []
         }
     {offset
       c9AeQ: // global
           _s9zVE::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AeR; else goto c9AeS;
       c9AeS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AeU; else goto c9AeT;
       c9AeU: // global
           HpAlloc = 24;
           goto c9AeR;
       c9AeR: // global
           R1 = _s9zVE::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AeT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVE::P64;
           _s9zVr::P64 = P64[_s9zVE::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVE_info" {
     sat_s9zVE_info:
         const sat_s9zVE_entry;
         const 1;
         const 16;
 },
 sat_s9zVI_entry() //  [R1]
         { []
         }
     {offset
       c9AeV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9AeZ; else goto c9Af0;
       c9AeZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Af0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9AeG_info;
           _s9zVr::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zVr::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Af7; else goto c9AeH;
       u9Af7: // global
           call _c9AeG(R1) args: 0, res: 0, upd: 0;
       c9AeH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVI_info" {
     sat_s9zVI_info:
         const sat_s9zVI_entry;
         const 2;
         const 18;
 },
 _c9AeG() //  [R1]
         { []
         }
     {offset
       c9AeG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Af3; else goto c9Af2;
       c9Af3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Af2: // global
           _s9zVC::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zVE_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9AeW_info;
           R4 = Hp - 16;
           R3 = _s9zVC::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9AeG_info" {
     block_c9AeG_info:
         const _c9AeG;
         const 1;
         const 30;
 },
 _c9AeW() //  [R1, R2]
         { []
         }
     {offset
       c9AeW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Af6; else goto c9Af5;
       c9Af6: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Af5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9AeW_info" {
     block_c9AeW_info:
         const _c9AeW;
         const 0;
         const 30;
 },
 sat_s9zVJ_entry() //  [R1]
         { []
         }
     {offset
       c9Af8: // global
           _s9zVJ::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Af9; else goto c9Afa;
       c9Afa: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Afc; else goto c9Afb;
       c9Afc: // global
           HpAlloc = 32;
           goto c9Af9;
       c9Af9: // global
           R1 = _s9zVJ::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Afb: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVJ::P64;
           _s9zVq::P64 = P64[_s9zVJ::P64 + 16];
           _s9zVr::P64 = P64[_s9zVJ::P64 + 24];
           I64[Hp - 24] = sat_s9zVI_info;
           P64[Hp - 8] = _s9zVq::P64;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVJ_info" {
     sat_s9zVJ_info:
         const sat_s9zVJ_entry;
         const 2;
         const 18;
 },
 sat_s9zVK_entry() //  [R1]
         { []
         }
     {offset
       c9Afd: // global
           _s9zVK::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Afe; else goto c9Aff;
       c9Aff: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Afh; else goto c9Afg;
       c9Afh: // global
           HpAlloc = 32;
           goto c9Afe;
       c9Afe: // global
           R1 = _s9zVK::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Afg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVK::P64;
           _s9zVq::P64 = P64[_s9zVK::P64 + 16];
           _s9zVr::P64 = P64[_s9zVK::P64 + 24];
           I64[Hp - 24] = sat_s9zVJ_info;
           P64[Hp - 8] = _s9zVq::P64;
           P64[Hp] = _s9zVr::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVK_info" {
     sat_s9zVK_info:
         const sat_s9zVK_entry;
         const 2;
         const 18;
 },
 GHC.Event.EPoll.$w$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9Afl: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Afp; else goto c9Afo;
       c9Afp: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Afo: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9Afj; else goto c9Afk;
       c9Afj: // global
           I64[Hp - 48] = sat_s9zVA_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9AdR::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9AdR::P64;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9Afk: // global
           I64[Hp - 48] = sat_s9zVK_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$cshowsPrec_info" {
     GHC.Event.EPoll.$w$cshowsPrec_info:
         const GHC.Event.EPoll.$w$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.595257234 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9AgM: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AgN; else goto c9AgO;
       c9AgN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AgO: // global
           I64[Sp - 24] = block_c9AgJ_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AgS; else goto c9AgK;
       u9AgS: // global
           call _c9AgJ(R1) args: 0, res: 0, upd: 0;
       c9AgK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_info:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c9AgJ() //  [R1]
         { []
         }
     {offset
       c9AgJ: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AgJ_info" {
     block_c9AgJ_info:
         const _c9AgJ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.600476633 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd5_closure" {
     GHC.Event.EPoll.$fShowEPollFd5_closure:
         const GHC.Event.EPoll.$fShowEPollFd5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEPollFd5_entry() //  [R1]
         { []
         }
     {offset
       c9Ah9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aha; else goto c9Ahb;
       c9Aha: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ahb: // global
           (_c9Ah6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Ah6::I64 == 0) goto c9Ah8; else goto c9Ah7;
       c9Ah8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Ah7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Ah6::I64;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd5_info" {
     GHC.Event.EPoll.$fShowEPollFd5_info:
         const GHC.Event.EPoll.$fShowEPollFd5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.606280227 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshow_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_info;
         const 0;
 },
 sat_s9zVW_entry() //  [R1]
         { []
         }
     {offset
       c9Ahz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AhF; else goto c9AhG;
       c9AhF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AhG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Ahw_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AhL; else goto c9Ahx;
       u9AhL: // global
           call _c9Ahw(R1) args: 0, res: 0, upd: 0;
       c9Ahx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVW_info" {
     sat_s9zVW_info:
         const sat_s9zVW_entry;
         const 1;
         const 4294967312;
         const S9AhW_srt;
 },
 _c9Ahw() //  [R1]
         { []
         }
     {offset
       c9Ahw: // global
           I64[Sp] = block_c9AhC_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Ahw_info" {
     block_c9Ahw_info:
         const _c9Ahw;
         const 0;
         const 4294967326;
         const S9AhW_srt;
 },
 _c9AhC() //  [R1, R2]
         { []
         }
     {offset
       c9AhC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AhK; else goto c9AhJ;
       c9AhK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9AhJ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9AhC_info" {
     block_c9AhC_info:
         const _c9AhC;
         const 0;
         const 30;
 },
 sat_s9zVX_entry() //  [R1]
         { []
         }
     {offset
       c9AhM: // global
           _s9zVX::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AhN; else goto c9AhO;
       c9AhO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AhQ; else goto c9AhP;
       c9AhQ: // global
           HpAlloc = 24;
           goto c9AhN;
       c9AhN: // global
           R1 = _s9zVX::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AhP: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zVX::P64;
           _s9zVQ::P64 = P64[_s9zVX::P64 + 16];
           I64[Hp - 16] = sat_s9zVW_info;
           P64[Hp] = _s9zVQ::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zVX_info" {
     sat_s9zVX_info:
         const sat_s9zVX_entry;
         const 1;
         const 4294967312;
         const S9AhW_srt;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9AhR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AhV; else goto c9AhU;
       c9AhV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AhU: // global
           I64[Hp - 16] = sat_s9zVX_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEPollFd4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd_$cshow_info" {
     GHC.Event.EPoll.$fShowEPollFd_$cshow_info:
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const S9AhW_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.61683772 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd1_closure" {
     GHC.Event.EPoll.$fShowEPollFd1_closure:
         const GHC.Event.EPoll.$fShowEPollFd1_info;
 },
 GHC.Event.EPoll.$fShowEPollFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Ais: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec_entry(R4,
                                                    R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd1_info" {
     GHC.Event.EPoll.$fShowEPollFd1_info:
         const GHC.Event.EPoll.$fShowEPollFd1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.620889071 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9AiD: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEPollFd1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEPollFd_$cshowList_info" {
     GHC.Event.EPoll.$fShowEPollFd_$cshowList_info:
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.624348761 UTC

[section ""data" . GHC.Event.EPoll.$fShowEPollFd_closure" {
     GHC.Event.EPoll.$fShowEPollFd_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEPollFd_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.626147373 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent4_bytes" {
     GHC.Event.EPoll.$fShowEvent4_bytes:
         I8[] [69,118,101,110,116,84,121,112,101,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.627818048 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent3_bytes" {
     GHC.Event.EPoll.$fShowEvent3_bytes:
         I8[] [117,110,69,118,101,110,116,84,121,112,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.634985695 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec2_closure" {
     GHC.Event.EPoll.$w$cshowsPrec2_closure:
         const GHC.Event.EPoll.$w$cshowsPrec2_info;
 },
 sat_s9zW9_entry() //  [R1]
         { []
         }
     {offset
       c9Ajb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ajc; else goto c9Ajd;
       c9Ajc: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ajd: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zW9_info" {
     sat_s9zW9_info:
         const sat_s9zW9_entry;
         const 1;
         const 16;
 },
 sat_s9zWd_entry() //  [R1]
         { []
         }
     {offset
       c9Aje: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Ajl; else goto c9Ajm;
       c9Ajl: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ajm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Aj2_info;
           _s9zW4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zW4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Ajt; else goto c9Aj3;
       u9Ajt: // global
           call _c9Aj2(R1) args: 0, res: 0, upd: 0;
       c9Aj3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWd_info" {
     sat_s9zWd_info:
         const sat_s9zWd_entry;
         const 2;
         const 18;
 },
 _c9Aj2() //  [R1]
         { []
         }
     {offset
       c9Aj2: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ajp; else goto c9Ajo;
       c9Ajp: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Ajo: // global
           _s9zW7::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zW9_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9Aji_info;
           R3 = Hp - 16;
           R2 = _s9zW7::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Aj2_info" {
     block_c9Aj2_info:
         const _c9Aj2;
         const 1;
         const 30;
 },
 _c9Aji() //  [R1, R2]
         { []
         }
     {offset
       c9Aji: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ajs; else goto c9Ajr;
       c9Ajs: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Ajr: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Aji_info" {
     block_c9Aji_info:
         const _c9Aji;
         const 0;
         const 30;
 },
 sat_s9zWe_entry() //  [R1]
         { []
         }
     {offset
       c9Aju: // global
           _s9zWe::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ajv; else goto c9Ajw;
       c9Ajw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Ajy; else goto c9Ajx;
       c9Ajy: // global
           HpAlloc = 32;
           goto c9Ajv;
       c9Ajv: // global
           R1 = _s9zWe::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ajx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWe::P64;
           _s9zW3::P64 = P64[_s9zWe::P64 + 16];
           _s9zW4::P64 = P64[_s9zWe::P64 + 24];
           I64[Hp - 24] = sat_s9zWd_info;
           P64[Hp - 8] = _s9zW3::P64;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWe_info" {
     sat_s9zWe_info:
         const sat_s9zWe_entry;
         const 2;
         const 18;
 },
 sat_s9zWj_entry() //  [R1]
         { []
         }
     {offset
       c9AjW: // global
           _s9zWj::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AjX; else goto c9AjY;
       c9AjY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Ak0; else goto c9AjZ;
       c9Ak0: // global
           HpAlloc = 24;
           goto c9AjX;
       c9AjX: // global
           R1 = _s9zWj::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AjZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWj::P64;
           _s9zW4::P64 = P64[_s9zWj::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWj_info" {
     sat_s9zWj_info:
         const sat_s9zWj_entry;
         const 1;
         const 16;
 },
 sat_s9zWn_entry() //  [R1]
         { []
         }
     {offset
       c9Ak1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9Ak8; else goto c9Ak9;
       c9Ak8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ak9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9AjM_info;
           _s9zW4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zW4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Akg; else goto c9AjN;
       u9Akg: // global
           call _c9AjM(R1) args: 0, res: 0, upd: 0;
       c9AjN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWn_info" {
     sat_s9zWn_info:
         const sat_s9zWn_entry;
         const 2;
         const 18;
 },
 _c9AjM() //  [R1]
         { []
         }
     {offset
       c9AjM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Akc; else goto c9Akb;
       c9Akc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9Akb: // global
           _s9zWg::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zWj_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9Ak5_info;
           R3 = Hp - 16;
           R2 = _s9zWg::I64;
           Sp = Sp + 8;
           call GHC.Show.$witos_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9AjM_info" {
     block_c9AjM_info:
         const _c9AjM;
         const 1;
         const 30;
 },
 _c9Ak5() //  [R1, R2]
         { []
         }
     {offset
       c9Ak5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9Akf; else goto c9Ake;
       c9Akf: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9Ake: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Ak5_info" {
     block_c9Ak5_info:
         const _c9Ak5;
         const 0;
         const 30;
 },
 sat_s9zWo_entry() //  [R1]
         { []
         }
     {offset
       c9Akh: // global
           _s9zWo::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aki; else goto c9Akj;
       c9Akj: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Akl; else goto c9Akk;
       c9Akl: // global
           HpAlloc = 32;
           goto c9Aki;
       c9Aki: // global
           R1 = _s9zWo::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Akk: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWo::P64;
           _s9zW3::P64 = P64[_s9zWo::P64 + 16];
           _s9zW4::P64 = P64[_s9zWo::P64 + 24];
           I64[Hp - 24] = sat_s9zWn_info;
           P64[Hp - 8] = _s9zW3::P64;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWo_info" {
     sat_s9zWo_info:
         const sat_s9zWo_entry;
         const 2;
         const 18;
 },
 sat_s9zWp_entry() //  [R1]
         { []
         }
     {offset
       c9Akm: // global
           _s9zWp::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Akn; else goto c9Ako;
       c9Ako: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Akq; else goto c9Akp;
       c9Akq: // global
           HpAlloc = 32;
           goto c9Akn;
       c9Akn: // global
           R1 = _s9zWp::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Akp: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWp::P64;
           _s9zW3::P64 = P64[_s9zWp::P64 + 16];
           _s9zW4::P64 = P64[_s9zWp::P64 + 24];
           I64[Hp - 24] = sat_s9zWo_info;
           P64[Hp - 8] = _s9zW3::P64;
           P64[Hp] = _s9zW4::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWp_info" {
     sat_s9zWp_info:
         const sat_s9zWp_entry;
         const 2;
         const 18;
 },
 GHC.Event.EPoll.$w$cshowsPrec2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9Aku: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto c9Aky; else goto c9Akx;
       c9Aky: // global
           HpAlloc = 56;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$cshowsPrec2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Akx: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9Aks; else goto c9Akt;
       c9Aks: // global
           I64[Hp - 48] = sat_s9zWe_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           _c9AiU::P64 = Hp - 48;
           Hp = Hp - 24;
           R3 = _c9AiU::P64;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
       c9Akt: // global
           I64[Hp - 48] = sat_s9zWp_info;
           P64[Hp - 32] = R3;
           P64[Hp - 24] = R4;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$cshowsPrec2_info" {
     GHC.Event.EPoll.$w$cshowsPrec2_info:
         const GHC.Event.EPoll.$w$cshowsPrec2_entry;
         const 0;
         const 14;
         const 12884901907;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.660124437 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry() //  [R2, R3,
                                                          R4]
         { []
         }
     {offset
       c9AlV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AlW; else goto c9AlX;
       c9AlW: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AlX: // global
           I64[Sp - 24] = block_c9AlS_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9Am1; else goto c9AlT;
       u9Am1: // global
           call _c9AlS(R1) args: 0, res: 0, upd: 0;
       c9AlT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info" {
     GHC.Event.EPoll.$fShowEventType_$cshowsPrec_info:
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _c9AlS() //  [R1]
         { []
         }
     {offset
       c9AlS: // global
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[R1 + 7];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AlS_info" {
     block_c9AlS_info:
         const _c9AlS;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.667973384 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshow_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshow_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshow_info;
         const 0;
 },
 sat_s9zWC_entry() //  [R1]
         { []
         }
     {offset
       c9Amr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9AmA; else goto c9AmB;
       c9AmA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AmB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_c9Amo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AmG; else goto c9Amp;
       u9AmG: // global
           call _c9Amo(R1) args: 0, res: 0, upd: 0;
       c9Amp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWC_info" {
     sat_s9zWC_info:
         const sat_s9zWC_entry;
         const 1;
         const 4294967312;
         const S9AhW_srt;
 },
 _c9Amo() //  [R1]
         { []
         }
     {offset
       c9Amo: // global
           I64[Sp] = block_c9Amx_info;
           R4 = GHC.Event.EPoll.$fShowEPollFd5_closure;
           R3 = I64[R1 + 7];
           R2 = 0;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Amo_info" {
     block_c9Amo_info:
         const _c9Amo;
         const 0;
         const 4294967326;
         const S9AhW_srt;
 },
 _c9Amx() //  [R1, R2]
         { []
         }
     {offset
       c9Amx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AmF; else goto c9AmE;
       c9AmF: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9AmE: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Amx_info" {
     block_c9Amx_info:
         const _c9Amx;
         const 0;
         const 30;
 },
 sat_s9zWD_entry() //  [R1]
         { []
         }
     {offset
       c9AmH: // global
           _s9zWD::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AmI; else goto c9AmJ;
       c9AmJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AmL; else goto c9AmK;
       c9AmL: // global
           HpAlloc = 24;
           goto c9AmI;
       c9AmI: // global
           R1 = _s9zWD::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AmK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWD::P64;
           _s9zWv::P64 = P64[_s9zWD::P64 + 16];
           I64[Hp - 16] = sat_s9zWC_info;
           P64[Hp] = _s9zWv::P64;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWD_info" {
     sat_s9zWD_info:
         const sat_s9zWD_entry;
         const 1;
         const 4294967312;
         const S9AhW_srt;
 },
 GHC.Event.EPoll.$fShowEventType_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9AmM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AmQ; else goto c9AmP;
       c9AmQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEventType_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AmP: // global
           I64[Hp - 16] = sat_s9zWD_info;
           P64[Hp] = R2;
           R3 = Hp - 16;
           R2 = GHC.Event.EPoll.$fShowEvent4_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType_$cshow_info" {
     GHC.Event.EPoll.$fShowEventType_$cshow_info:
         const GHC.Event.EPoll.$fShowEventType_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9AhW_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.678343626 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType1_closure" {
     GHC.Event.EPoll.$fShowEventType1_closure:
         const GHC.Event.EPoll.$fShowEventType1_info;
 },
 GHC.Event.EPoll.$fShowEventType1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Anm: // global
           R4 = R3;
           R3 = R2;
           R2 = 0;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType1_info" {
     GHC.Event.EPoll.$fShowEventType1_info:
         const GHC.Event.EPoll.$fShowEventType1_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.681724163 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_info;
 },
 GHC.Event.EPoll.$fShowEventType_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Anx: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEventType1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEventType_$cshowList_info" {
     GHC.Event.EPoll.$fShowEventType_$cshowList_info:
         const GHC.Event.EPoll.$fShowEventType_$cshowList_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.684938844 UTC

[section ""data" . GHC.Event.EPoll.$fShowEventType_closure" {
     GHC.Event.EPoll.$fShowEventType_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEventType_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEventType_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.686736713 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent7_bytes" {
     GHC.Event.EPoll.$fShowEvent7_bytes:
         I8[] [69,118,101,110,116,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.689029507 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent6_closure" {
     GHC.Event.EPoll.$fShowEvent6_closure:
         const GHC.Event.EPoll.$fShowEvent6_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent6_entry() //  [R1]
         { []
         }
     {offset
       c9AnM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AnN; else goto c9AnO;
       c9AnN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AnO: // global
           (_c9AnJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AnJ::I64 == 0) goto c9AnL; else goto c9AnK;
       c9AnL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AnK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AnJ::I64;
           R2 = GHC.Event.EPoll.$fShowEvent7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent6_info" {
     GHC.Event.EPoll.$fShowEvent6_info:
         const GHC.Event.EPoll.$fShowEvent6_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.692697315 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent5_bytes" {
     GHC.Event.EPoll.$fShowEvent5_bytes:
         I8[] [101,118,101,110,116,84,121,112,101,115,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.695206264 UTC

[section ""cstring" . GHC.Event.EPoll.$fShowEvent2_bytes" {
     GHC.Event.EPoll.$fShowEvent2_bytes:
         I8[] [101,118,101,110,116,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.705447789 UTC

[section ""data" . GHC.Event.EPoll.$w$cshowsPrec1_closure" {
     GHC.Event.EPoll.$w$cshowsPrec1_closure:
         const GHC.Event.EPoll.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_slow() //  [R1]
         { []
         }
     {offset
       c9Ao0: // global
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_s9zWP_entry() //  [R1]
         { []
         }
     {offset
       c9AoA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AoB; else goto c9AoC;
       c9AoB: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWP_info" {
     sat_s9zWP_info:
         const sat_s9zWP_entry;
         const 1;
         const 16;
 },
 sat_s9zWT_entry() //  [R1]
         { []
         }
     {offset
       c9AoD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9AoH; else goto c9AoI;
       c9AoH: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Aor_info;
           _s9zWL::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zWL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9AoP; else goto c9Aos;
       u9AoP: // global
           call _c9Aor(R1) args: 0, res: 0, upd: 0;
       c9Aos: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWT_info" {
     sat_s9zWT_info:
         const sat_s9zWT_entry;
         const 2;
         const 18;
 },
 _c9Aor() //  [R1]
         { []
         }
     {offset
       c9Aor: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AoL; else goto c9AoK;
       c9AoL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9AoK: // global
           _s9zWO::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zWP_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9AoE_info;
           R4 = Hp - 16;
           R3 = _s9zWO::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Aor_info" {
     block_c9Aor_info:
         const _c9Aor;
         const 1;
         const 30;
 },
 _c9AoE() //  [R1, R2]
         { []
         }
     {offset
       c9AoE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9AoO; else goto c9AoN;
       c9AoO: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9AoN: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9AoE_info" {
     block_c9AoE_info:
         const _c9AoE;
         const 0;
         const 30;
 },
 sat_s9zWU_entry() //  [R1]
         { []
         }
     {offset
       c9AoQ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9AoU; else goto c9AoT;
       c9AoU: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoT: // global
           _s9zWK::P64 = P64[R1 + 16];
           _s9zWL::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9zWT_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9zWU_info" {
     sat_s9zWU_info:
         const sat_s9zWU_entry;
         const 2;
         const 18;
 },
 sat_s9zWV_entry() //  [R1]
         { []
         }
     {offset
       c9AoV: // global
           _s9zWV::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9AoW; else goto c9AoX;
       c9AoX: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9AoZ; else goto c9AoY;
       c9AoZ: // global
           HpAlloc = 32;
           goto c9AoW;
       c9AoW: // global
           R1 = _s9zWV::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AoY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWV::P64;
           _s9zWK::P64 = P64[_s9zWV::P64 + 16];
           _s9zWL::P64 = P64[_s9zWV::P64 + 24];
           I64[Hp - 24] = sat_s9zWU_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWV_info" {
     sat_s9zWV_info:
         const sat_s9zWV_entry;
         const 2;
         const 4294967314;
         const S9AhW_srt+24;
 },
 sat_s9zWW_entry() //  [R1]
         { []
         }
     {offset
       c9Ap0: // global
           _s9zWW::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Ap1; else goto c9Ap2;
       c9Ap2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Ap4; else goto c9Ap3;
       c9Ap4: // global
           HpAlloc = 32;
           goto c9Ap1;
       c9Ap1: // global
           R1 = _s9zWW::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ap3: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zWW::P64;
           _s9zWJ::P64 = P64[_s9zWW::P64 + 16];
           _s9zWK::P64 = P64[_s9zWW::P64 + 24];
           _s9zWL::P64 = P64[_s9zWW::P64 + 32];
           I64[Hp - 24] = sat_s9zWV_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R4 = Hp - 24;
           R3 = _s9zWJ::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zWW_info" {
     sat_s9zWW_info:
         const sat_s9zWW_entry;
         const 3;
         const 4294967311;
         const S9AhW_srt+24;
 },
 sat_s9zWX_entry() //  [R1]
         { []
         }
     {offset
       c9Ap5: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Ap9; else goto c9Ap8;
       c9Ap9: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ap8: // global
           _s9zWJ::P64 = P64[R1 + 16];
           _s9zWK::P64 = P64[R1 + 24];
           _s9zWL::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9zWW_info;
           P64[Hp - 16] = _s9zWJ::P64;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9zWX_info" {
     sat_s9zWX_info:
         const sat_s9zWX_entry;
         const 3;
         const 4294967311;
         const S9AhW_srt+24;
 },
 sat_s9zX1_entry() //  [R1]
         { []
         }
     {offset
       c9ApJ: // global
           _s9zX1::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9ApK; else goto c9ApL;
       c9ApL: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ApN; else goto c9ApM;
       c9ApN: // global
           HpAlloc = 24;
           goto c9ApK;
       c9ApK: // global
           R1 = _s9zX1::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ApM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zX1::P64;
           _s9zWL::P64 = P64[_s9zX1::P64 + 16];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 14;
           R2 = GHC.Event.EPoll.$fShowEPollFd2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zX1_info" {
     sat_s9zX1_info:
         const sat_s9zX1_entry;
         const 1;
         const 16;
 },
 sat_s9zX5_entry() //  [R1]
         { []
         }
     {offset
       c9ApO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto c9ApS; else goto c9ApT;
       c9ApS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9ApT: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_c9Apz_info;
           _s9zWL::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _s9zWL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto u9Aq0; else goto c9ApA;
       u9Aq0: // global
           call _c9Apz(R1) args: 0, res: 0, upd: 0;
       c9ApA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zX5_info" {
     sat_s9zX5_info:
         const sat_s9zX5_entry;
         const 2;
         const 18;
 },
 _c9Apz() //  [R1]
         { []
         }
     {offset
       c9Apz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ApW; else goto c9ApV;
       c9ApW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       c9ApV: // global
           _s9zWZ::I64 = I64[R1 + 7];
           I64[Hp - 16] = sat_s9zX1_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_c9ApP_info;
           R4 = Hp - 16;
           R3 = _s9zWZ::I64;
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_c9Apz_info" {
     block_c9Apz_info:
         const _c9Apz;
         const 1;
         const 30;
 },
 _c9ApP() //  [R1, R2]
         { []
         }
     {offset
       c9ApP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9ApZ; else goto c9ApY;
       c9ApZ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       c9ApY: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_c9ApP_info" {
     block_c9ApP_info:
         const _c9ApP;
         const 0;
         const 30;
 },
 sat_s9zX6_entry() //  [R1]
         { []
         }
     {offset
       c9Aq1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aq5; else goto c9Aq4;
       c9Aq5: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aq4: // global
           _s9zWK::P64 = P64[R1 + 16];
           _s9zWL::P64 = P64[R1 + 24];
           I64[Hp - 24] = sat_s9zX5_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Event.EPoll.$fShowEvent2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9zX6_info" {
     sat_s9zX6_info:
         const sat_s9zX6_entry;
         const 2;
         const 18;
 },
 sat_s9zX7_entry() //  [R1]
         { []
         }
     {offset
       c9Aq6: // global
           _s9zX7::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aq7; else goto c9Aq8;
       c9Aq8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aqa; else goto c9Aq9;
       c9Aqa: // global
           HpAlloc = 32;
           goto c9Aq7;
       c9Aq7: // global
           R1 = _s9zX7::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aq9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zX7::P64;
           _s9zWK::P64 = P64[_s9zX7::P64 + 16];
           _s9zWL::P64 = P64[_s9zX7::P64 + 24];
           I64[Hp - 24] = sat_s9zX6_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zX7_info" {
     sat_s9zX7_info:
         const sat_s9zX7_entry;
         const 2;
         const 4294967314;
         const S9AhW_srt+24;
 },
 sat_s9zX8_entry() //  [R1]
         { []
         }
     {offset
       c9Aqb: // global
           _s9zX8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aqc; else goto c9Aqd;
       c9Aqd: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto c9Aqf; else goto c9Aqe;
       c9Aqf: // global
           HpAlloc = 32;
           goto c9Aqc;
       c9Aqc: // global
           R1 = _s9zX8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aqe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zX8::P64;
           _s9zWJ::P64 = P64[_s9zX8::P64 + 16];
           _s9zWK::P64 = P64[_s9zX8::P64 + 24];
           _s9zWL::P64 = P64[_s9zX8::P64 + 32];
           I64[Hp - 24] = sat_s9zX7_info;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R4 = Hp - 24;
           R3 = _s9zWJ::P64;
           R2 = 0;
           Sp = Sp - 16;
           call GHC.Event.EPoll.$w$cshowsPrec2_entry(R4,
                                                     R3,
                                                     R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zX8_info" {
     sat_s9zX8_info:
         const sat_s9zX8_entry;
         const 3;
         const 4294967311;
         const S9AhW_srt+24;
 },
 sat_s9zX9_entry() //  [R1]
         { []
         }
     {offset
       c9Aqg: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Aqk; else goto c9Aqj;
       c9Aqk: // global
           HpAlloc = 40;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aqj: // global
           _s9zWJ::P64 = P64[R1 + 16];
           _s9zWK::P64 = P64[R1 + 24];
           _s9zWL::P64 = P64[R1 + 32];
           I64[Hp - 32] = sat_s9zX8_info;
           P64[Hp - 16] = _s9zWJ::P64;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_s9zX9_info" {
     sat_s9zX9_info:
         const sat_s9zX9_entry;
         const 3;
         const 4294967311;
         const S9AhW_srt+24;
 },
 sat_s9zXa_entry() //  [R1]
         { []
         }
     {offset
       c9Aql: // global
           _s9zXa::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aqm; else goto c9Aqn;
       c9Aqn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto c9Aqp; else goto c9Aqo;
       c9Aqp: // global
           HpAlloc = 40;
           goto c9Aqm;
       c9Aqm: // global
           R1 = _s9zXa::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Aqo: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _s9zXa::P64;
           _s9zWJ::P64 = P64[_s9zXa::P64 + 16];
           _s9zWK::P64 = P64[_s9zXa::P64 + 24];
           _s9zWL::P64 = P64[_s9zXa::P64 + 32];
           I64[Hp - 32] = sat_s9zX9_info;
           P64[Hp - 16] = _s9zWJ::P64;
           P64[Hp - 8] = _s9zWK::P64;
           P64[Hp] = _s9zWL::P64;
           R3 = Hp - 32;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zXa_info" {
     sat_s9zXa_info:
         const sat_s9zXa_entry;
         const 3;
         const 12884901903;
         const S9AhW_srt+24;
 },
 GHC.Event.EPoll.$w$cshowsPrec1_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9Aqt: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto c9Aqx; else goto c9Aqw;
       c9Aqx: // global
           HpAlloc = 64;
           R1 = GHC.Event.EPoll.$w$cshowsPrec1_closure;
           I64[Sp - 32] = R2;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       c9Aqw: // global
           if (%MO_S_Lt_W64(R2, 11)) goto c9Aqr; else goto c9Aqs;
       c9Aqr: // global
           I64[Hp - 56] = sat_s9zWX_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           _c9Ao7::P64 = Hp - 56;
           Hp = Hp - 24;
           R3 = _c9Ao7::P64;
           R2 = GHC.Event.EPoll.$fShowEvent6_closure;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       c9Aqs: // global
           I64[Hp - 56] = sat_s9zXa_info;
           P64[Hp - 40] = R3;
           P64[Hp - 32] = R4;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 56;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$cshowsPrec1_info" {
     GHC.Event.EPoll.$w$cshowsPrec1_info:
         const GHC.Event.EPoll.$w$cshowsPrec1_entry;
         const 0;
         const 30064771086;
         const 17179869184;
         const S9AhW_srt+24;
         const 68;
         const GHC.Event.EPoll.$w$cshowsPrec1_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.742643224 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9Aso: // global
           if ((Sp + -24) < SpLim) (likely: False) goto c9Ass; else goto c9Ast;
       c9Ass: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Ast: // global
           I64[Sp - 24] = block_c9Asl_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9AsB; else goto c9Asm;
       u9AsB: // global
           call _c9Asl(R1) args: 0, res: 0, upd: 0;
       c9Asm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info" {
     GHC.Event.EPoll.$fShowEvent_$cshowsPrec_info:
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const S9AhW_srt+40;
 },
 _c9Asl() //  [R1]
         { []
         }
     {offset
       c9Asl: // global
           I64[Sp] = block_c9Asr_info;
           _s9zXf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _s9zXf::I64;
           if (R1 & 7 != 0) goto u9AsA; else goto c9Asv;
       u9AsA: // global
           call _c9Asr(R1) args: 0, res: 0, upd: 0;
       c9Asv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Asl_info" {
     block_c9Asl_info:
         const _c9Asl;
         const 2;
         const 4294967326;
         const S9AhW_srt+40;
 },
 _c9Asr() //  [R1]
         { []
         }
     {offset
       c9Asr: // global
           R5 = P64[Sp + 16];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Asr_info" {
     block_c9Asr_info:
         const _c9Asr;
         const 66;
         const 4294967326;
         const S9AhW_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.749388524 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent8_closure" {
     GHC.Event.EPoll.$fShowEvent8_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.751744017 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshow_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshow_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshow_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshow_entry() //  [R2]
         { []
         }
     {offset
       c9AsZ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9At0; else goto c9At1;
       c9At0: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9At1: // global
           I64[Sp - 8] = block_c9AsW_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9At5; else goto c9AsX;
       u9At5: // global
           call _c9AsW(R1) args: 0, res: 0, upd: 0;
       c9AsX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent_$cshow_info" {
     GHC.Event.EPoll.$fShowEvent_$cshow_info:
         const GHC.Event.EPoll.$fShowEvent_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const S9AhW_srt+40;
 },
 _c9AsW() //  [R1]
         { []
         }
     {offset
       c9AsW: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AsW_info" {
     block_c9AsW_info:
         const _c9AsW;
         const 0;
         const 4294967326;
         const S9AhW_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.757632434 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent1_closure" {
     GHC.Event.EPoll.$fShowEvent1_closure:
         const GHC.Event.EPoll.$fShowEvent1_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent1_entry() //  [R2, R3]
         { []
         }
     {offset
       c9Ato: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Atp; else goto c9Atq;
       c9Atp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.$fShowEvent1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Atq: // global
           I64[Sp - 16] = block_c9Atl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9Atu; else goto c9Atm;
       u9Atu: // global
           call _c9Atl(R1) args: 0, res: 0, upd: 0;
       c9Atm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent1_info" {
     GHC.Event.EPoll.$fShowEvent1_info:
         const GHC.Event.EPoll.$fShowEvent1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const S9AhW_srt+40;
 },
 _c9Atl() //  [R1]
         { []
         }
     {offset
       c9Atl: // global
           R5 = P64[Sp + 8];
           R4 = P64[R1 + 15];
           R3 = P64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.EPoll.$w$cshowsPrec1_entry(R5,
                                                     R4,
                                                     R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Atl_info" {
     block_c9Atl_info:
         const _c9Atl;
         const 1;
         const 4294967326;
         const S9AhW_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.762629442 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_$cshowList_closure" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_closure:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_info;
         const 0;
 },
 GHC.Event.EPoll.$fShowEvent_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       c9AtJ: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.EPoll.$fShowEvent1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$fShowEvent_$cshowList_info" {
     GHC.Event.EPoll.$fShowEvent_$cshowList_info:
         const GHC.Event.EPoll.$fShowEvent_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const S9AhW_srt+64;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.765936484 UTC

[section ""data" . GHC.Event.EPoll.$fShowEvent_closure" {
     GHC.Event.EPoll.$fShowEvent_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure+3;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure+1;
         const GHC.Event.EPoll.$fShowEvent_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.767624144 UTC

[section ""data" . GHC.Event.EPoll.$fFiniteBitsEventType_closure" {
     GHC.Event.EPoll.$fFiniteBitsEventType_closure:
         const Data.Bits.C:FiniteBits_con_info;
         const GHC.Event.EPoll.$fBitsEventType_closure+1;
         const GHC.Word.$fBitsWord32_$cfiniteBitSize_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountLeadingZeros_closure+1;
         const GHC.Word.$fFiniteBitsWord32_$ccountTrailingZeros_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.769510884 UTC

[section ""data" . GHC.Event.EPoll.$fNumEventType_closure" {
     GHC.Event.EPoll.$fNumEventType_closure:
         const GHC.Num.C:Num_con_info;
         const GHC.Word.$fNumWord32_$c+_closure+2;
         const GHC.Word.$fNumWord32_$c-_closure+2;
         const GHC.Word.$fNumWord32_$c*_closure+2;
         const GHC.Word.$fNumWord32_$cnegate_closure+1;
         const GHC.Word.$fNumWord32_$cabs_closure+1;
         const GHC.Word.$fNumWord32_$csignum_closure+1;
         const GHC.Word.$fNumWord32_$cfromInteger_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.771846943 UTC

[section ""data" . GHC.Event.EPoll.$fEqEPollFd_closure" {
     GHC.Event.EPoll.$fEqEPollFd_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Int.eqInt32_closure+2;
         const GHC.Int.neInt32_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.774088197 UTC

[section ""cstring" . lvl_r9y01_bytes" {
     lvl_r9y01_bytes:
         I8[] [101,112,111,108,108,67,111,110,116,114,111,108]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.776350146 UTC

[section ""data" . lvl1_r9y02_closure" {
     lvl1_r9y02_closure:
         const lvl1_r9y02_info;
         const 0;
         const 0;
         const 0;
 },
 lvl1_r9y02_entry() //  [R1]
         { []
         }
     {offset
       c9Au1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Au2; else goto c9Au3;
       c9Au2: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Au3: // global
           (_c9AtY::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AtY::I64 == 0) goto c9Au0; else goto c9AtZ;
       c9Au0: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AtZ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AtY::I64;
           R2 = lvl_r9y01_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl1_r9y02_info" {
     lvl1_r9y02_info:
         const lvl1_r9y02_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.78032628 UTC

[section ""data" . GHC.Event.EPoll.new6_closure" {
     GHC.Event.EPoll.new6_closure:
         const GHC.Event.EPoll.new6_info;
         const 0;
 },
 GHC.Event.EPoll.new6_entry() //  [R2]
         { []
         }
     {offset
       c9Aui: // global
           R3 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R2));
           R2 = lvl1_r9y02_closure;
           call Foreign.C.Error.$wlvl_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new6_info" {
     GHC.Event.EPoll.new6_info:
         const GHC.Event.EPoll.new6_entry;
         const 0;
         const 12884901902;
         const 8589934596;
         const S9AhW_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.7833854 UTC

[section ""cstring" . lvl2_r9y03_bytes" {
     lvl2_r9y03_bytes:
         I8[] [101,112,111,108,108,87,97,105,116,78,111,110,66,108,111,99,107]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.785553659 UTC

[section ""data" . lvl3_r9y04_closure" {
     lvl3_r9y04_closure:
         const lvl3_r9y04_info;
         const 0;
         const 0;
         const 0;
 },
 lvl3_r9y04_entry() //  [R1]
         { []
         }
     {offset
       c9Auw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Aux; else goto c9Auy;
       c9Aux: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Auy: // global
           (_c9Aut::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Aut::I64 == 0) goto c9Auv; else goto c9Auu;
       c9Auv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Auu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Aut::I64;
           R2 = lvl2_r9y03_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl3_r9y04_info" {
     lvl3_r9y04_info:
         const lvl3_r9y04_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.789003288 UTC

[section ""cstring" . lvl4_r9y05_bytes" {
     lvl4_r9y05_bytes:
         I8[] [101,112,111,108,108,87,97,105,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.791666749 UTC

[section ""data" . lvl5_r9y06_closure" {
     lvl5_r9y06_closure:
         const lvl5_r9y06_info;
         const 0;
         const 0;
         const 0;
 },
 lvl5_r9y06_entry() //  [R1]
         { []
         }
     {offset
       c9AuO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AuP; else goto c9AuQ;
       c9AuP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AuQ: // global
           (_c9AuL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AuL::I64 == 0) goto c9AuN; else goto c9AuM;
       c9AuN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AuM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AuL::I64;
           R2 = lvl4_r9y05_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl5_r9y06_info" {
     lvl5_r9y06_info:
         const lvl5_r9y06_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.795016452 UTC

[section ""cstring" . GHC.Event.EPoll.new8_bytes" {
     GHC.Event.EPoll.new8_bytes:
         I8[] [109,111,100,105,102,121,70,100,79,110,99,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.797275111 UTC

[section ""data" . GHC.Event.EPoll.new7_closure" {
     GHC.Event.EPoll.new7_closure:
         const GHC.Event.EPoll.new7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new7_entry() //  [R1]
         { []
         }
     {offset
       c9Av6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Av7; else goto c9Av8;
       c9Av7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Av8: // global
           (_c9Av3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9Av3::I64 == 0) goto c9Av5; else goto c9Av4;
       c9Av5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9Av4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9Av3::I64;
           R2 = GHC.Event.EPoll.new8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new7_info" {
     GHC.Event.EPoll.new7_info:
         const GHC.Event.EPoll.new7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.800809984 UTC

[section ""data" . lvl6_r9y07_closure" {
     lvl6_r9y07_closure:
         const GHC.Types.I#_con_info;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.802970925 UTC

[section ""data" . lvl7_r9y08_closure" {
     lvl7_r9y08_closure:
         const GHC.Types.I#_con_info;
         const 1;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.804527194 UTC

[section ""data" . lvl8_r9y09_closure" {
     lvl8_r9y09_closure:
         const GHC.Types.I#_con_info;
         const 2;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.819785616 UTC

[section ""data" . GHC.Event.EPoll.new10_closure" {
     GHC.Event.EPoll.new10_closure:
         const GHC.Event.EPoll.new10_info;
         const 0;
 },
 sat_s9zZC_entry() //  [R1]
         { []
         }
     {offset
       c9Awt: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9Awu; else goto c9Ax9;
       c9Awu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9Ax9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           _s9zZt::I64 = I64[R1 + 16];
           if (_s9zZt::I64 & 25 == 0) goto c9Aws; else goto c9Awr;
       c9Aws: // global
           if (_s9zZt::I64 & 28 == 0) goto c9Ax5; else goto c9AwZ;
       c9Ax5: // global
           R1 = GHC.Event.EPoll.$fShowEvent8_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9AwZ: // global
           R1 = lvl8_r9y09_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9Awr: // global
           if (_s9zZt::I64 & 28 == 0) goto c9AwL; else goto c9AwF;
       c9AwL: // global
           R1 = lvl7_r9y08_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       c9AwF: // global
           R1 = lvl6_r9y07_closure+1;
           Sp = Sp - 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_s9zZC_info" {
     sat_s9zZC_info:
         const sat_s9zZC_entry;
         const 4294967296;
         const 17;
 },
 GHC.Event.EPoll.new10_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9Axa: // global
           if ((Sp + -64) < SpLim) (likely: False) goto c9Axb; else goto c9Axc;
       c9Axb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new10_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9Axc: // global
           I64[Sp - 24] = block_c9Avo_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9ADe; else goto c9Avp;
       u9ADe: // global
           call _c9Avo(R1) args: 0, res: 0, upd: 0;
       c9Avp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new10_info" {
     GHC.Event.EPoll.new10_info:
         const GHC.Event.EPoll.new10_entry;
         const 0;
         const 133143986190;
         const 17179869207;
         const S9AhW_srt+88;
 },
 _c9Avo() //  [R1]
         { []
         }
     {offset
       c9Avo: // global
           I64[Sp - 16] = block_c9Avt_info;
           _s9zXD::P64 = P64[R1 + 7];
           _s9zXC::I64 = I64[R1 + 15];
           R1 = P64[_s9zXD::P64 + 8];
           P64[Sp - 8] = _s9zXD::P64;
           I64[Sp] = _s9zXC::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9AD5; else goto c9Avu;
       u9AD5: // global
           call _c9Avt(R1) args: 0, res: 0, upd: 0;
       c9Avu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Avo_info" {
     block_c9Avo_info:
         const _c9Avo;
         const 2;
         const 115964117022;
         const S9AhW_srt+88;
 },
 _c9Avt() //  [R1]
         { []
         }
     {offset
       c9Avt: // global
           I64[Sp - 8] = block_c9Avy_info;
           _s9zXK::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9zXK::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AD6; else goto c9Avz;
       u9AD6: // global
           call _c9Avy(R1) args: 0, res: 0, upd: 0;
       c9Avz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Avt_info" {
     block_c9Avt_info:
         const _c9Avt;
         const 132;
         const 115964117022;
         const S9AhW_srt+88;
 },
 _c9Avy() //  [R1]
         { []
         }
     {offset
       c9Avy: // global
           I64[Sp - 16] = block_c9Axf_info;
           _s9zXL::P64 = R1;
           _s9zXN::P64 = P64[R1 + 7];
           _s9zXM::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           P64[Sp - 8] = _s9zXN::P64;
           I64[Sp] = _s9zXM::I64;
           P64[Sp + 32] = _s9zXL::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto u9AD7; else goto c9AAq;
       u9AD7: // global
           call _c9Axf(R1) args: 0, res: 0, upd: 0;
       c9AAq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Avy_info" {
     block_c9Avy_info:
         const _c9Avy;
         const 325;
         const 115964117022;
         const S9AhW_srt+88;
 },
 _c9Axf() //  [R1]
         { []
         }
     {offset
       c9Axf: // global
           if (R1 & 7 == 1) goto c9ABi; else goto c9ACl;
       c9ABi: // global
           (_s9zZM::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(I64[Sp + 40], I64[Sp + 16], %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 0);
           _s9zZN::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9zZM::I64));
           if (_s9zZN::I64 != (-1)) goto c9AAI; else goto c9AAO;
       c9AAI: // global
           I64[Sp + 40] = _s9zZN::I64;
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
       c9AAO: // global
           (_s9zZR::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9zZR::I64) == 4 :: W32) goto u9ACO; else goto c9AB3;
       u9ACO: // global
           Sp = Sp + 8;
           call _c9ACh() args: 0, res: 0, upd: 0;
       c9AB3: // global
           I64[Sp] = block_c9AAZ_info;
           R2 = lvl3_r9y04_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       c9ACl: // global
           I64[Sp] = block_c9ABn_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto u9ADf; else goto c9ACm;
       u9ADf: // global
           call _c9ABn(R1) args: 0, res: 0, upd: 0;
       c9ACm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Axf_info" {
     block_c9Axf_info:
         const _c9Axf;
         const 1415;
         const 115964117022;
         const S9AhW_srt+88;
 },
 _c9AAZ() //  [R1]
         { []
         }
     {offset
       c9AAZ: // global
           I64[Sp] = block_c9AB1_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9ADl; else goto c9AB6;
       u9ADl: // global
           call _c9AB1(R1) args: 0, res: 0, upd: 0;
       c9AB6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AAZ_info" {
     block_c9AAZ_info:
         const _c9AAZ;
         const 1415;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AB1() //  [R1]
         { []
         }
     {offset
       c9AB1: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9AB1_info" {
     block_c9AB1_info:
         const _c9AB1;
         const 1415;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9ABn() //  [R1]
         { []
         }
     {offset
       c9ABn: // global
           _s9zXC::I64 = I64[Sp + 40];
           _s9zXK::I64 = I64[Sp + 24];
           _s9zXM::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto c9ACs; else goto c9ACw;
       c9ACs: // global
           _s9A00::I64 = (I64[R1 + 7] + 999999) / 1000000;
           goto s9zZZ;
       c9ACw: // global
           _s9A00::I64 = (-1);
           goto s9zZZ;
       s9zZZ: // global
           I64[Sp] = block_c9ABE_info;
           _u9ACX::P64 = CurrentTSO;
           I64[I64[_u9ACX::P64 + 24] + 16] = Sp;
           _u9ACY::I64 = CurrentNursery;
           P64[_u9ACY::I64 + 8] = Hp + 8;
           I64[_u9ACX::P64 + 104] = I64[_u9ACX::P64 + 104] - ((Hp + 8) - I64[_u9ACY::I64]);
           (_u9ACV::I64) = call "ccall" arg hints:  [PtrHint,]  result hints:  [PtrHint] suspendThread(BaseReg, 0);
           (_s9A06::I64) = call "ccall" arg hints:  [‘signed’, PtrHint,
                                                     ‘signed’,
                                                     ‘signed’]  result hints:  [‘signed’] epoll_wait(_s9zXC::I64, _s9zXM::I64, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9zXK::I64)), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9A00::I64)));
           (_u9ACW::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] resumeThread(_u9ACV::I64);
           BaseReg = _u9ACW::I64;
           _u9ACZ::P64 = CurrentTSO;
           _u9AD0::P64 = I64[_u9ACZ::P64 + 24];
           Sp = I64[_u9AD0::P64 + 16];
           SpLim = _u9AD0::P64 + 192;
           HpAlloc = 0;
           _u9AD1::I64 = CurrentNursery;
           _u9AD2::I64 = I64[_u9AD1::I64 + 8];
           Hp = _u9AD2::I64 - 8;
           _u9AD3::I64 = I64[_u9AD1::I64];
           HpLim = _u9AD3::I64 + ((%MO_SS_Conv_W32_W64(I32[_u9AD1::I64 + 48]) << 12) - 1);
           I64[_u9ACZ::P64 + 104] = I64[_u9ACZ::P64 + 104] + (_u9AD2::I64 - _u9AD3::I64);
           R1 = _s9A06::I64;
           call (I64[I64[Sp]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ABn_info" {
     block_c9ABn_info:
         const _c9ABn;
         const 1415;
         const 81604378654;
         const S9AhW_srt+88;
 },
 _c9ABE() //  [R1]
         { []
         }
     {offset
       c9ABE: // global
           _s9A07::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(R1));
           if (_s9A07::I64 != (-1)) goto c9ABM; else goto c9ABS;
       c9ABM: // global
           I64[Sp + 40] = _s9A07::I64;
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
       c9ABS: // global
           (_s9A0b::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9A0b::I64) == 4 :: W32) goto u9ACL; else goto c9AC7;
       u9ACL: // global
           Sp = Sp + 8;
           call _c9ACh() args: 0, res: 0, upd: 0;
       c9AC7: // global
           I64[Sp] = block_c9AC3_info;
           R2 = lvl5_r9y06_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ABE_info" {
     block_c9ABE_info:
         const _c9ABE;
         const 1415;
         const 81604378654;
         const S9AhW_srt+88;
 },
 _c9ACh() //  []
         { []
         }
     {offset
       c9ACh: // global
           I64[Sp + 32] = 0;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 _c9AC3() //  [R1]
         { []
         }
     {offset
       c9AC3: // global
           I64[Sp] = block_c9AC5_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9ADp; else goto c9ACa;
       u9ADp: // global
           call _c9AC5(R1) args: 0, res: 0, upd: 0;
       c9ACa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AC3_info" {
     block_c9AC3_info:
         const _c9AC3;
         const 1415;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AC5() //  [R1]
         { []
         }
     {offset
       c9AC5: // global
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9AC5_info" {
     block_c9AC5_info:
         const _c9AC5;
         const 1415;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AvG() //  []
         { []
         }
     {offset
       c9AvG: // global
           Hp = Hp + 48;
           _s9zXQ::I64 = I64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto c9Axj; else goto c9Axi;
       c9Axj: // global
           HpAlloc = 48;
           I64[Sp - 8] = block_c9AvF_info;
           R1 = _s9zXQ::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9Axi: // global
           _s9zXD::P64 = P64[Sp + 24];
           _s9zXK::I64 = I64[Sp + 16];
           _s9zXL::P64 = P64[Sp + 40];
           call MO_Touch(P64[Sp]);
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = _s9zXL::P64;
           I64[Hp - 24] = _s9zXQ::I64;
           I64[Hp - 16] = _s9zXK::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           if (%MO_S_Le_W64(_s9zXQ::I64, 0)) goto c9Axm; else goto c9Axn;
       c9Axm: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Axn: // global
           _s9zXY::P64 = P64[_s9zXD::P64 + 8];
           Hp = Hp - 16;
           I64[Sp + 16] = block_c9AvR_info;
           R1 = _s9zXY::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9AD9; else goto c9AvS;
       u9AD9: // global
           call _c9AvR(R1) args: 0, res: 0, upd: 0;
       c9AvS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9AvF() //  [R1]
         { []
         }
     {offset
       c9AvF: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _c9AvG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9AvF_info" {
     block_c9AvF_info:
         const _c9AvF;
         const 1415;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AvR() //  [R1]
         { []
         }
     {offset
       c9AvR: // global
           I64[Sp] = block_c9AvW_info;
           _s9zY1::I64 = I64[R1 + 15];
           R1 = P64[R1 + 7];
           I64[Sp + 24] = _s9zY1::I64;
           if (R1 & 7 != 0) goto u9ADa; else goto c9AvX;
       u9ADa: // global
           call _c9AvW(R1) args: 0, res: 0, upd: 0;
       c9AvX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AvR_info" {
     block_c9AvR_info:
         const _c9AvR;
         const 388;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AvW() //  [R1]
         { []
         }
     {offset
       c9AvW: // global
           I64[Sp - 16] = I64[Sp + 24] * 12;
           I64[Sp - 8] = 0;
           P64[Sp] = P64[R1 + 7];
           I64[Sp + 24] = I64[R1 + 15];
           Sp = Sp - 16;
           call _c9Aw9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9AvW_info" {
     block_c9AvW_info:
         const _c9AvW;
         const 388;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9Aw9() //  []
         { []
         }
     {offset
       c9Aw9: // global
           Hp = Hp + 40;
           _s9zZn::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto c9AAi; else goto c9AAh;
       c9AAi: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_c9Aw8_info;
           R1 = _s9zZn::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       c9AAh: // global
           if (%MO_S_Lt_W64(_s9zZn::I64,
                            I64[Sp])) goto c9AAm; else goto c9AAp;
       c9AAm: // global
           _s9zZq::I64 = I64[Sp + 40] + _s9zZn::I64;
           _s9zZt::I64 = %MO_UU_Conv_W32_W64(I32[_s9zZq::I64]);
           _s9zZx::I64 = %MO_SS_Conv_W32_W64(I32[_s9zZq::I64 + 4]);
           I64[Hp - 32] = sat_s9zZC_info;
           I64[Hp - 16] = _s9zZt::I64;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _s9zZx::I64;
           I64[Sp - 8] = block_c9AAk_info;
           R3 = Hp - 32;
           R2 = Hp - 7;
           R1 = P64[Sp + 48];
           Sp = Sp - 8;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       c9AAp: // global
           Hp = Hp - 40;
           _s9zXD::P64 = P64[Sp + 24];
           call MO_Touch(P64[Sp + 16]);
           I64[Sp + 16] = block_c9Axu_info;
           R1 = P64[_s9zXD::P64 + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto u9ADd; else goto c9Axw;
       u9ADd: // global
           call _c9Axu(R1) args: 0, res: 0, upd: 0;
       c9Axw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _c9Aw8() //  [R1]
         { []
         }
     {offset
       c9Aw8: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _c9Aw9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9Aw8_info" {
     block_c9Aw8_info:
         const _c9Aw8;
         const 3271;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AAk() //  []
         { []
         }
     {offset
       c9AAk: // global
           I64[Sp + 16] = I64[Sp + 16] + 12;
           Sp = Sp + 8;
           call _c9Aw9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_c9AAk_info" {
     block_c9AAk_info:
         const _c9AAk;
         const 3271;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9Axu() //  [R1]
         { []
         }
     {offset
       c9Axu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9AxC; else goto c9AxB;
       c9AxC: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AxB: // global
           _s9zXQ::I64 = I64[Sp + 16];
           _s9zYg::I64 = I64[R1 + 23];
           if (_s9zYg::I64 == _s9zXQ::I64) goto c9AxQ; else goto c9AxI;
       c9AxQ: // global
           Hp = Hp - 16;
           _s9zYl::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp] = block_c9AxK_info;
           R1 = _s9zYl::P64;
           I64[Sp + 32] = _s9zYg::I64;
           if (R1 & 7 != 0) goto u9ADi; else goto c9AxL;
       u9ADi: // global
           call _c9AxK(R1) args: 0, res: 0, upd: 0;
       c9AxL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       c9AxI: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9Axu_info" {
     block_c9Axu_info:
         const _c9Axu;
         const 900;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AxK() //  [R1]
         { []
         }
     {offset
       c9AxK: // global
           I64[Sp - 8] = block_c9AxP_info;
           _s9zYo::I64 = I64[R1 + 15];
           _s9zYp::I64 = I64[R1 + 23];
           R1 = P64[R1 + 7];
           I64[Sp] = _s9zYp::I64;
           I64[Sp + 24] = _s9zYo::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ADj; else goto c9AxS;
       u9ADj: // global
           call _c9AxP(R1) args: 0, res: 0, upd: 0;
       c9AxS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AxK_info" {
     block_c9AxK_info:
         const _c9AxK;
         const 900;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AxP() //  [R1]
         { []
         }
     {offset
       c9AxP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto c9AxY; else goto c9AxX;
       c9AxY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AxX: // global
           _s9zYt::I64 = I64[Sp + 40] << 1;
           if (%MO_S_Le_W64(_s9zYt::I64,
                            I64[Sp + 8])) goto c9Ay7; else goto c9AAf;
       c9Ay7: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 7;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AAf: // global
           _s9zYw::I64 = _s9zYt::I64 - 1;
           _s9zYx::I64 = _s9zYw::I64 | %MO_S_Shr_W64(_s9zYw::I64, 1);
           _s9zYz::I64 = _s9zYx::I64 | %MO_S_Shr_W64(_s9zYx::I64, 2);
           _s9zYB::I64 = _s9zYz::I64 | %MO_S_Shr_W64(_s9zYz::I64, 4);
           _s9zYD::I64 = _s9zYB::I64 | %MO_S_Shr_W64(_s9zYB::I64, 8);
           _s9zYF::I64 = _s9zYD::I64 | %MO_S_Shr_W64(_s9zYD::I64, 16);
           _s9zYH::I64 = _s9zYF::I64 | %MO_S_Shr_W64(_s9zYF::I64, 32) + 1;
           _s9zYK::I64 = _s9zYH::I64 * 12;
           if (%MO_S_Ge_W64(_s9zYK::I64, 0)) goto c9AyX; else goto c9AAe;
       c9AyX: // global
           _s9zYs::P64 = P64[R1 + 7];
           _s9zYr::I64 = I64[R1 + 15];
           Hp = Hp - 16;
           I64[Sp - 16] = block_c9AyV_info;
           R1 = _s9zYK::I64;
           I64[Sp - 8] = _s9zYH::I64;
           P64[Sp] = _s9zYs::P64;
           I64[Sp + 40] = _s9zYr::I64;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
       c9AAe: // global
           Hp = Hp - 16;
           R1 = GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AxP_info" {
     block_c9AxP_info:
         const _c9AxP;
         const 1861;
         const 4294967326;
         const S9AhW_srt+88;
 },
 _c9AyV() //  [R1]
         { []
         }
     {offset
       c9AyV: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto c9Az1; else goto c9Az0;
       c9Az1: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9Az0: // global
           I64[Hp - 80] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 72] = R1;
           _s9zXD::P64 = P64[Sp + 32];
           _s9zXQ::I64 = I64[Sp + 40];
           _s9zYo::I64 = I64[Sp + 48];
           _s9zYp::I64 = I64[Sp + 24];
           _s9zYr::I64 = I64[Sp + 56];
           _s9zYs::P64 = P64[Sp + 16];
           _s9zYH::I64 = I64[Sp + 8];
           _s9zYP::I64 = R1 + 16;
           _c9Az5::P64 = Hp - 77;
           if (_s9zYr::I64 == 0) goto c9AAd; else goto c9AzW;
       c9AAd: // global
           call MO_Touch(_s9zYs::P64);
           if (_s9zYH::I64 == _s9zYp::I64) goto c9AA4; else goto c9AAc;
       c9AA4: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9zXQ::I64;
           _c9AA2::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9AA2::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AAc: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9Az5::P64;
           I64[Hp - 48] = _s9zYP::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9zYo::I64;
           I64[Hp - 16] = _s9zYH::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AzW: // global
           if (%MO_S_Le_W64(_s9zYp::I64, 0)) goto c9Azs; else goto c9AzU;
       c9Azs: // global
           call MO_Touch(_s9zYs::P64);
           if (_s9zYH::I64 == _s9zYp::I64) goto c9Azi; else goto c9Azq;
       c9Azi: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9zXQ::I64;
           _c9Azg::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9Azg::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9Azq: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9Az5::P64;
           I64[Hp - 48] = _s9zYP::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9zYo::I64;
           I64[Hp - 16] = _s9zYH::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AzU: // global
           (_s9zZ5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint,]  result hints:  [PtrHint] memcpy(_s9zYP::I64, _s9zYr::I64, _s9zYp::I64 * 12);
           call MO_Touch(_c9Az5::P64);
           call MO_Touch(_s9zYs::P64);
           if (_s9zYH::I64 == _s9zYp::I64) goto c9AzL; else goto c9AzT;
       c9AzL: // global
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _s9zXQ::I64;
           _c9AzJ::P64 = Hp - 63;
           Hp = Hp - 56;
           R1 = _c9AzJ::P64;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AzT: // global
           I64[Hp - 64] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 56] = _c9Az5::P64;
           I64[Hp - 48] = _s9zYP::I64;
           I64[Hp - 40] = GHC.Event.Array.AC_con_info;
           P64[Hp - 32] = Hp - 63;
           I64[Hp - 24] = _s9zYo::I64;
           I64[Hp - 16] = _s9zYH::I64;
           call MO_WriteBarrier();
           P64[_s9zXD::P64 + 8] = Hp - 39;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _s9zXD::P64);
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _s9zXQ::I64;
           R1 = Hp - 7;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AyV_info" {
     block_c9AyV_info:
         const _c9AyV;
         const 7495;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.868917904 UTC

[section ""data" . GHC.Event.EPoll.new9_closure" {
     GHC.Event.EPoll.new9_closure:
         const GHC.Event.EPoll.new9_info;
         const 0;
 },
 GHC.Event.EPoll.new9_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       c9AGO: // global
           if ((Sp + -48) < SpLim) (likely: False) goto c9AGP; else goto c9AGQ;
       c9AGP: // global
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new9_closure;
           call (stg_gc_fun)(R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AGQ: // global
           I64[Sp - 40] = block_c9AGJ_info;
           _s9A0o::P64 = R2;
           R2 = 4;
           R1 = 12;
           P64[Sp - 32] = _s9A0o::P64;
           P64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 40;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new9_info" {
     GHC.Event.EPoll.new9_info:
         const GHC.Event.EPoll.new9_entry;
         const 0;
         const 12884901902;
         const 21474836504;
         const S9AhW_srt+128;
 },
 _c9AGJ() //  [R1]
         { []
         }
     {offset
       c9AGJ: // global
           I64[Sp] = block_c9AGL_info;
           _s9A0y::P64 = R1;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _s9A0y::P64;
           if (R1 & 7 != 0) goto u9AIJ; else goto c9AGM;
       u9AIJ: // global
           call _c9AGL(R1) args: 0, res: 0, upd: 0;
       c9AGM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AGJ_info" {
     block_c9AGJ_info:
         const _c9AGJ;
         const 4;
         const 4294967326;
         const S9AhW_srt+128;
 },
 _c9AGL() //  [R1]
         { []
         }
     {offset
       c9AGL: // global
           _s9A0p::P64 = P64[Sp + 16];
           _s9A0y::P64 = P64[Sp + 32];
           _s9A0A::I64 = I64[R1 + 7];
           if (_s9A0A::I64 & 1 == 0) goto c9AIo; else goto c9AI3;
       c9AIo: // global
           if (_s9A0A::I64 & 2 == 0) goto c9AID; else goto c9AIx;
       c9AID: // global
           _s9A0C::I64 = 0;
           goto s9A0B;
       c9AIx: // global
           _s9A0C::I64 = 4;
           goto s9A0B;
       c9AI3: // global
           if (_s9A0A::I64 & 2 == 0) goto c9AIi; else goto c9AIc;
       c9AIi: // global
           _s9A0C::I64 = 1;
           goto s9A0B;
       c9AIc: // global
           _s9A0C::I64 = 5;
           goto s9A0B;
       s9A0B: // global
           _s9A0D::I64 = _s9A0y::P64 + 16;
           I32[_s9A0D::I64] = %MO_UU_Conv_W64_W32(_s9A0C::I64);
           I64[Sp - 8] = block_c9AH3_info;
           R1 = _s9A0p::P64;
           I64[Sp] = _s9A0D::I64;
           I64[Sp + 16] = _s9A0A::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AIK; else goto c9AH4;
       u9AIK: // global
           call _c9AH3(R1) args: 0, res: 0, upd: 0;
       c9AH4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AGL_info" {
     block_c9AGL_info:
         const _c9AGL;
         const 4;
         const 4294967326;
         const S9AhW_srt+128;
 },
 _c9AH3() //  [R1]
         { []
         }
     {offset
       c9AH3: // global
           _s9A0o::P64 = P64[Sp + 16];
           _s9A0G::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9A0G::I64);
           I64[Sp] = block_c9AHb_info;
           R1 = _s9A0o::P64;
           I64[Sp + 16] = _s9A0G::I64;
           if (R1 & 7 != 0) goto u9AIL; else goto c9AHc;
       u9AIL: // global
           call _c9AHb(R1) args: 0, res: 0, upd: 0;
       c9AHc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AH3_info" {
     block_c9AH3_info:
         const _c9AH3;
         const 325;
         const 4294967326;
         const S9AhW_srt+128;
 },
 _c9AHb() //  [R1]
         { []
         }
     {offset
       c9AHb: // global
           I64[Sp] = block_c9AHg_info;
           _s9A0K::I64 = I64[R1 + 15];
           R1 = P64[Sp + 32];
           I64[Sp + 32] = _s9A0K::I64;
           if (R1 & 7 != 0) goto u9AIM; else goto c9AHk;
       u9AIM: // global
           call _c9AHg(R1) args: 0, res: 0, upd: 0;
       c9AHk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AHb_info" {
     block_c9AHb_info:
         const _c9AHb;
         const 453;
         const 4294967326;
         const S9AhW_srt+128;
 },
 _c9AHg() //  [R1]
         { []
         }
     {offset
       c9AHg: // global
           _s9A0y::P64 = P64[Sp + 40];
           _s9A0D::I64 = I64[Sp + 8];
           _s9A0G::I64 = I64[Sp + 16];
           _s9A0K::I64 = I64[Sp + 32];
           if (I64[R1 + 7] == 0) goto c9AHX; else goto c9AHW;
       c9AHX: // global
           _s9A0P::I64 = 1;
           goto s9A0O;
       c9AHW: // global
           if (I64[Sp + 24] == 0) goto c9AHU; else goto c9AHT;
       c9AHU: // global
           _s9A0P::I64 = 2;
           goto s9A0O;
       c9AHT: // global
           _s9A0P::I64 = 3;
           goto s9A0O;
       s9A0O: // global
           (_s9A0T::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9A0K::I64, _s9A0P::I64, _s9A0G::I64, _s9A0D::I64);
           if (%MO_SS_Conv_W64_W32(_s9A0T::I64) == (-1) :: W32) goto c9AHL; else goto c9AHF;
       c9AHL: // global
           (_s9A0Z::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9A0Z::I64;
           Sp = Sp + 48;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9AHF: // global
           call MO_Touch(_s9A0y::P64);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AHg_info" {
     block_c9AHg_info:
         const _c9AHg;
         const 965;
         const 4294967326;
         const S9AhW_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.885223476 UTC

[section ""data" . GHC.Event.EPoll.new5_closure" {
     GHC.Event.EPoll.new5_closure:
         const GHC.Event.EPoll.new5_info;
         const 0;
 },
 GHC.Event.EPoll.new5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       c9AJt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto c9AJu; else goto c9AJv;
       c9AJu: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.new5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       c9AJv: // global
           I64[Sp - 24] = block_c9AJq_info;
           R1 = R4;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto u9ALS; else goto c9AJr;
       u9ALS: // global
           call _c9AJq(R1) args: 0, res: 0, upd: 0;
       c9AJr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new5_info" {
     GHC.Event.EPoll.new5_info:
         const GHC.Event.EPoll.new5_entry;
         const 0;
         const 897648164878;
         const 17179869207;
         const S9AhW_srt+96;
 },
 _c9AJq() //  [R1]
         { []
         }
     {offset
       c9AJq: // global
           _s9A1b::I64 = I64[R1 + 7];
           if (_s9A1b::I64 & 1 == 0) goto c9ALx; else goto c9ALc;
       c9ALx: // global
           if (_s9A1b::I64 & 2 == 0) goto c9ALM; else goto c9ALG;
       c9ALM: // global
           _s9A1d::I64 = 0;
           goto s9A1c;
       c9ALG: // global
           _s9A1d::I64 = 4;
           goto s9A1c;
       c9ALc: // global
           if (_s9A1b::I64 & 2 == 0) goto c9ALr; else goto c9ALl;
       c9ALr: // global
           _s9A1d::I64 = 1;
           goto s9A1c;
       c9ALl: // global
           _s9A1d::I64 = 5;
           goto s9A1c;
       s9A1c: // global
           I64[Sp - 8] = block_c9AJE_info;
           R2 = 4;
           R1 = 12;
           I64[Sp] = _s9A1d::I64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AJq_info" {
     block_c9AJq_info:
         const _c9AJq;
         const 2;
         const 622770257950;
         const S9AhW_srt+96;
 },
 _c9AJE() //  [R1]
         { []
         }
     {offset
       c9AJE: // global
           _s9A17::P64 = P64[Sp + 24];
           _s9A1k::I64 = I64[Sp + 8] | 1073741824;
           _s9A1l::I64 = R1 + 16;
           I32[_s9A1l::I64] = %MO_UU_Conv_W64_W32(_s9A1k::I64);
           I64[Sp - 8] = block_c9AJM_info;
           _s9A1j::P64 = R1;
           R1 = _s9A17::P64;
           I64[Sp] = _s9A1l::I64;
           I64[Sp + 8] = _s9A1k::I64;
           P64[Sp + 24] = _s9A1j::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9ALT; else goto c9AJN;
       u9ALT: // global
           call _c9AJM(R1) args: 0, res: 0, upd: 0;
       c9AJN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AJE_info" {
     block_c9AJE_info:
         const _c9AJE;
         const 67;
         const 622770257950;
         const S9AhW_srt+96;
 },
 _c9AJM() //  [R1]
         { []
         }
     {offset
       c9AJM: // global
           _s9A16::P64 = P64[Sp + 24];
           _s9A1o::I64 = I64[R1 + 7];
           I32[I64[Sp + 8] + 4] = %MO_UU_Conv_W64_W32(_s9A1o::I64);
           I64[Sp] = block_c9AJU_info;
           R1 = _s9A16::P64;
           I64[Sp + 24] = _s9A1o::I64;
           if (R1 & 7 != 0) goto u9ALU; else goto c9AJY;
       u9ALU: // global
           call _c9AJU(R1) args: 0, res: 0, upd: 0;
       c9AJY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AJM_info" {
     block_c9AJM_info:
         const _c9AJM;
         const 196;
         const 622770257950;
         const S9AhW_srt+96;
 },
 _c9AJU() //  [R1]
         { []
         }
     {offset
       c9AJU: // global
           _s9A1j::P64 = P64[Sp + 32];
           _s9A1s::I64 = I64[R1 + 15];
           (_s9A1x::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9A1s::I64, 3, I64[Sp + 24], I64[Sp + 8]);
           call MO_Touch(_s9A1j::P64);
           if (%MO_SS_Conv_W64_W32(_s9A1x::I64) == 0 :: W32) goto c9AL3; else goto c9AKe;
       c9AL3: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       c9AKe: // global
           (_s9A1D::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           if (%MO_SS_Conv_W64_W32(_s9A1D::I64) == 2 :: W32) goto c9AKx; else goto c9AKo;
       c9AKx: // global
           I64[Sp + 8] = block_c9AKw_info;
           R2 = 4;
           R1 = 12;
           I64[Sp + 32] = _s9A1s::I64;
           Sp = Sp + 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
       c9AKo: // global
           R2 = GHC.Event.EPoll.new7_closure;
           Sp = Sp + 40;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AJU_info" {
     block_c9AJU_info:
         const _c9AJU;
         const 452;
         const 622770257950;
         const S9AhW_srt+96;
 },
 _c9AKw() //  [R1]
         { []
         }
     {offset
       c9AKw: // global
           _s9A1o::I64 = I64[Sp + 16];
           _s9A1s::I64 = I64[Sp + 24];
           _s9A1L::I64 = R1 + 16;
           I32[_s9A1L::I64] = %MO_UU_Conv_W64_W32(I64[Sp + 8]);
           I32[_s9A1L::I64 + 4] = %MO_UU_Conv_W64_W32(_s9A1o::I64);
           (_s9A1S::I64) = call "ccall" arg hints:  [‘signed’, ‘signed’,
                                                     ‘signed’,
                                                     PtrHint]  result hints:  [‘signed’] epoll_ctl(_s9A1s::I64, 1, _s9A1o::I64, _s9A1L::I64);
           if (%MO_SS_Conv_W64_W32(_s9A1S::I64) == (-1) :: W32) goto c9AKX; else goto c9AKR;
       c9AKX: // global
           (_s9A1Y::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9A1Y::I64;
           Sp = Sp + 32;
           call GHC.Event.EPoll.new6_entry(R2) args: 8, res: 0, upd: 8;
       c9AKR: // global
           call MO_Touch(R1);
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AKw_info" {
     block_c9AKw_info:
         const _c9AKw;
         const 451;
         const 4294967326;
         const S9AhW_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.899488795 UTC

[section ""data" . GHC.Event.EPoll.new4_closure" {
     GHC.Event.EPoll.new4_closure:
         const GHC.Event.EPoll.new4_info;
 },
 GHC.Event.EPoll.new4_entry() //  [R2]
         { []
         }
     {offset
       c9AMD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9AME; else goto c9AMF;
       c9AME: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.new4_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AMF: // global
           I64[Sp - 8] = block_c9AMA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto u9AML; else goto c9AMB;
       u9AML: // global
           call _c9AMA(R1) args: 0, res: 0, upd: 0;
       c9AMB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new4_info" {
     GHC.Event.EPoll.new4_info:
         const GHC.Event.EPoll.new4_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _c9AMA() //  [R1]
         { []
         }
     {offset
       c9AMA: // global
           (_s9A2b::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(I64[R1 + 15]);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AMA_info" {
     block_c9AMA_info:
         const _c9AMA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.906247633 UTC

[section ""data" . GHC.Event.EPoll.$w$j_closure" {
     GHC.Event.EPoll.$w$j_closure:
         const GHC.Event.EPoll.$w$j_info;
         const 0;
 },
 GHC.Event.EPoll.$w$j_entry() //  [R2]
         { []
         }
     {offset
       c9AN6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AN7; else goto c9AN8;
       c9AN7: // global
           R2 = R2;
           R1 = GHC.Event.EPoll.$w$j_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       c9AN8: // global
           (_s9A2h::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_f_setfd();
           (_s9A2l::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_fd_cloexec();
           (_s9A2q::I64) = call "capi" arg hints:  [‘signed’, ‘signed’,
                                                    ‘signed’]  result hints:  [‘signed’] ghczuwrapperZC16ZCbaseZCSystemziPosixziInternalsZCfcntl(R2, %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9A2h::I64)), _s9A2l::I64);
           if (%MO_SS_Conv_W64_W32(_s9A2q::I64) == (-1) :: W32) goto c9ANH; else goto c9ANx;
       c9ANH: // global
           (_s9A2H::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           R2 = _s9A2H::I64;
           call System.Posix.Internals.setCloseOnExec2_entry(R2) args: 8, res: 0, upd: 8;
       c9ANx: // global
           I64[Sp - 16] = block_c9ANk_info;
           R1 = 768;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newPinnedByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.$w$j_info" {
     GHC.Event.EPoll.$w$j_info:
         const GHC.Event.EPoll.$w$j_entry;
         const 0;
         const 1859720839182;
         const 8589934596;
         const S9AhW_srt+104;
 },
 _c9ANk() //  [R1]
         { []
         }
     {offset
       c9ANk: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9ANB; else goto c9ANA;
       c9ANB: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9ANA: // global
           I64[Hp - 64] = GHC.ForeignPtr.PlainPtr_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 40] = Hp - 61;
           P64[Hp - 32] = R1 + 16;
           I64[Hp - 24] = GHC.Event.Array.AC_con_info;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = 0;
           I64[Hp] = 64;
           I64[Sp] = block_c9ANs_info;
           R1 = Hp - 23;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ANk_info" {
     block_c9ANk_info:
         const _c9ANk;
         const 65;
         const 210453397534;
         const S9AhW_srt+104;
 },
 _c9ANs() //  [R1]
         { []
         }
     {offset
       c9ANs: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto c9ANE; else goto c9AND;
       c9ANE: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       c9AND: // global
           I64[Hp - 64] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 8];
           I64[Hp - 40] = GHC.Event.Internal.Backend_con_info;
           P64[Hp - 32] = Hp - 63;
           P64[Hp - 24] = GHC.Event.EPoll.new10_closure+4;
           P64[Hp - 16] = GHC.Event.EPoll.new9_closure+5;
           P64[Hp - 8] = GHC.Event.EPoll.new5_closure+4;
           P64[Hp] = GHC.Event.EPoll.new4_closure+2;
           R1 = Hp - 39;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9ANs_info" {
     block_c9ANs_info:
         const _c9ANs;
         const 65;
         const 210453397534;
         const S9AhW_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.913906409 UTC

[section ""cstring" . GHC.Event.EPoll.new3_bytes" {
     GHC.Event.EPoll.new3_bytes:
         I8[] [101,112,111,108,108,67,114,101,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.91618723 UTC

[section ""data" . GHC.Event.EPoll.new2_closure" {
     GHC.Event.EPoll.new2_closure:
         const GHC.Event.EPoll.new2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.EPoll.new2_entry() //  [R1]
         { []
         }
     {offset
       c9AOn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto c9AOo; else goto c9AOp;
       c9AOo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       c9AOp: // global
           (_c9AOk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_c9AOk::I64 == 0) goto c9AOm; else goto c9AOl;
       c9AOm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       c9AOl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _c9AOk::I64;
           R2 = GHC.Event.EPoll.new3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new2_info" {
     GHC.Event.EPoll.new2_info:
         const GHC.Event.EPoll.new2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.920840342 UTC

[section ""data" . GHC.Event.EPoll.new1_closure" {
     GHC.Event.EPoll.new1_closure:
         const GHC.Event.EPoll.new1_info;
         const 0;
 },
 GHC.Event.EPoll.new1_entry() //  []
         { []
         }
     {offset
       c9AOJ: // global
           if ((Sp + -8) < SpLim) (likely: False) goto c9AOK; else goto c9AOL;
       c9AOK: // global
           R1 = GHC.Event.EPoll.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       c9AOL: // global
           (_s9A2N::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] epoll_create(256);
           _s9A2O::I64 = %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_s9A2N::I64));
           if (_s9A2O::I64 != (-1)) goto c9AOH; else goto c9AOI;
       c9AOH: // global
           R2 = _s9A2O::I64;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
       c9AOI: // global
           I64[Sp - 8] = block_c9AOV_info;
           R2 = GHC.Event.EPoll.new2_closure;
           Sp = Sp - 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new1_info" {
     GHC.Event.EPoll.new1_info:
         const GHC.Event.EPoll.new1_entry;
         const 0;
         const 15397457756174;
         const 4294967299;
         const S9AhW_srt+96;
 },
 _c9AOV() //  [R1]
         { []
         }
     {offset
       c9AOV: // global
           I64[Sp] = block_c9AOX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto u9AP5; else goto c9AP0;
       u9AP5: // global
           call _c9AOX(R1) args: 0, res: 0, upd: 0;
       c9AP0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AOV_info" {
     block_c9AOV_info:
         const _c9AOV;
         const 0;
         const 4294967326;
         const S9AhW_srt+168;
 },
 _c9AOX() //  [R1]
         { []
         }
     {offset
       c9AOX: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.EPoll.$w$j_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_c9AOX_info" {
     block_c9AOX_info:
         const _c9AOX;
         const 0;
         const 4294967326;
         const S9AhW_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.927898794 UTC

[section ""data" . GHC.Event.EPoll.new_closure" {
     GHC.Event.EPoll.new_closure:
         const GHC.Event.EPoll.new_info;
         const 0;
 },
 GHC.Event.EPoll.new_entry() //  []
         { []
         }
     {offset
       c9APo: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.new_info" {
     GHC.Event.EPoll.new_info:
         const GHC.Event.EPoll.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const S9AhW_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.93172254 UTC

[section ""data" . GHC.Event.EPoll.Event_closure" {
     GHC.Event.EPoll.Event_closure:
         const GHC.Event.EPoll.Event_info;
 },
 GHC.Event.EPoll.Event_entry() //  [R2, R3]
         { []
         }
     {offset
       c9APA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9APE; else goto c9APD;
       c9APE: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.Event_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9APD: // global
           I64[Hp - 16] = GHC.Event.EPoll.Event_con_info;
           P64[Hp - 8] = R2;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.Event_info" {
     GHC.Event.EPoll.Event_info:
         const GHC.Event.EPoll.Event_entry;
         const 0;
         const 14;
         const 8589934607;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.935491103 UTC

[section ""data" . GHC.Event.EPoll.EPoll_closure" {
     GHC.Event.EPoll.EPoll_closure:
         const GHC.Event.EPoll.EPoll_info;
 },
 GHC.Event.EPoll.EPoll_entry() //  [R2, R3]
         { []
         }
     {offset
       c9APQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto c9APU; else goto c9APT;
       c9APU: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.EPoll.EPoll_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       c9APT: // global
           I64[Hp - 16] = GHC.Event.EPoll.EPoll_con_info;
           P64[Hp - 8] = R3;
           I64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.EPoll_info" {
     GHC.Event.EPoll.EPoll_info:
         const GHC.Event.EPoll.EPoll_entry;
         const 0;
         const 14;
         const 8589934605;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.93898592 UTC

[section ""cstring" . i9AQ2_str" {
     i9AQ2_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,118,101,110,116]
 },
 GHC.Event.EPoll.Event_con_entry() //  [R1]
         { []
         }
     {offset
       c9AQ1: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.Event_con_info" {
     GHC.Event.EPoll.Event_con_info:
         const GHC.Event.EPoll.Event_con_entry;
         const 2;
         const 4;
         const i9AQ2_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.942454408 UTC

[section ""cstring" . i9AQ9_str" {
     i9AQ9_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,69,80,111,108,108,46,69,80,111,108,108]
 },
 GHC.Event.EPoll.EPoll_con_entry() //  [R1]
         { []
         }
     {offset
       c9AQ8: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.EPoll.EPoll_con_info" {
     GHC.Event.EPoll.EPoll_con_info:
         const GHC.Event.EPoll.EPoll_con_entry;
         const 4294967297;
         const 5;
         const i9AQ9_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:04:42.945638151 UTC

[section ""relreadonly" . S9AhW_srt" {
     S9AhW_srt:
         const GHC.Event.EPoll.$fShowEPollFd5_closure;
         const GHC.Event.EPoll.$fShowEPollFd_$cshow_closure;
         const GHC.Event.EPoll.$fShowEventType_$cshow_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.EPoll.$fShowEvent6_closure;
         const GHC.Event.EPoll.$w$cshowsPrec1_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshowsPrec_closure;
         const GHC.Event.EPoll.$fShowEvent_$cshow_closure;
         const GHC.Event.EPoll.$fShowEvent1_closure;
         const Foreign.C.Error.$wlvl_closure;
         const lvl1_r9y02_closure;
         const GHC.ForeignPtr.mallocPlainForeignPtrBytes2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.EPoll.new10_closure;
         const lvl3_r9y04_closure;
         const lvl5_r9y06_closure;
         const GHC.Event.EPoll.new6_closure;
         const GHC.Event.EPoll.new9_closure;
         const GHC.Event.EPoll.new5_closure;
         const GHC.Event.EPoll.new7_closure;
         const System.Posix.Internals.setCloseOnExec2_closure;
         const GHC.Event.EPoll.$w$j_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.EPoll.new2_closure;
 }]

