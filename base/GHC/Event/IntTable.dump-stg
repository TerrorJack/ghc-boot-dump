
==================== Pre unarise: ====================
2018-03-16 16:02:59.842047552 UTC

GHC.Event.IntTable.$WBucket [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Int
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7SZp dt_s7SZq dt_s7SZr]
        case dt_s7SZp of {
          GHC.Types.I# dt_s7SZt [Occ=Once] ->
              GHC.Event.IntTable.Bucket [dt_s7SZt dt_s7SZq dt_s7SZr];
        };

GHC.Event.IntTable.$WIT [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
     -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
     -> GHC.Event.IntTable.IT a
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s7SZu dt_s7SZv]
        case dt_s7SZu of {
          GHC.Event.Arr.Arr dt_s7SZx [Occ=Once] ->
              case dt_s7SZv of {
                GHC.ForeignPtr.ForeignPtr dt_s7SZz [Occ=Once]
                                          dt_s7SZA [Occ=Once] ->
                    GHC.Event.IntTable.IT [dt_s7SZx dt_s7SZz dt_s7SZA];
              };
        };

lvl_r7SZ3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketNext"#;

GHC.Event.IntTable.bucketNext1
  :: forall a. GHC.Event.IntTable.Bucket a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl_r7SZ3;

GHC.Event.IntTable.bucketNext
  :: forall a.
     GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7SZB]
        case ds_s7SZB of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketNext1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    _ [Occ=Dead]
                                    ds2_s7SZF [Occ=Once] ->
              ds2_s7SZF;
        };

lvl1_r7SZ4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketValue"#;

GHC.Event.IntTable.bucketValue1 :: forall a. a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl1_r7SZ4;

GHC.Event.IntTable.bucketValue
  :: forall a. GHC.Event.IntTable.Bucket a -> a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7SZG]
        case ds_s7SZG of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketValue1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    ds1_s7SZJ [Occ=Once]
                                    _ [Occ=Dead] ->
              ds1_s7SZJ;
        };

lvl2_r7SZ5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketKey"#;

GHC.Event.IntTable.bucketKey1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl2_r7SZ5;

GHC.Event.IntTable.bucketKey
  :: forall a. GHC.Event.IntTable.Bucket a -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7SZL]
        case ds_s7SZL of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketKey1;
          GHC.Event.IntTable.Bucket dt_s7SZN [Occ=Once]
                                    _ [Occ=Dead]
                                    _ [Occ=Dead] ->
              GHC.Types.I# [dt_s7SZN];
        };

GHC.Event.IntTable.tabSize
  :: forall a.
     GHC.Event.IntTable.IT a -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7SZQ]
        case ds_s7SZQ of {
          GHC.Event.IntTable.IT _ [Occ=Dead]
                                dt1_s7SZT [Occ=Once]
                                dt2_s7SZU [Occ=Once] ->
              GHC.ForeignPtr.ForeignPtr [dt1_s7SZT dt2_s7SZU];
        };

GHC.Event.IntTable.tabArr
  :: forall a.
     GHC.Event.IntTable.IT a
     -> GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7SZV]
        case ds_s7SZV of {
          GHC.Event.IntTable.IT dt_s7SZX [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              GHC.Event.Arr.Arr [dt_s7SZX];
        };

GHC.Event.IntTable.$wnew [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7T00 w_s7T01]
        case newArray# [ww_s7T00 GHC.Event.IntTable.Empty w_s7T01] of {
          (#,#) ipv_s7T03 [Occ=Once] ipv1_s7T04 [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers ipv_s7T03] of {
                (#,#) ipv2_s7T06 [Occ=Once] ipv3_s7T07 [Occ=OnceL] ->
                    case newAlignedPinnedByteArray# [8# 8# ipv2_s7T06] of {
                      (#,#) ipv4_s7T09 [Occ=Once] ipv5_s7T0a ->
                          case byteArrayContents# [ipv5_s7T0a] of ipv6_s7T0b [Dmd=<S,U>] {
                            __DEFAULT ->
                                case writeIntOffAddr# [ipv6_s7T0b 0# 0# ipv4_s7T09] of s2_s7T0c {
                                  __DEFAULT ->
                                      let {
                                        ipv7_s7T0d :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId, Unf=OtherCon []] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7T0a ipv3_s7T07];
                                      } in 
                                        case touch# [ipv7_s7T0d s2_s7T0c] of s'_s7T0e {
                                          __DEFAULT ->
                                              let {
                                                sat_s7T0f [Occ=Once]
                                                  :: GHC.Event.IntTable.IT a_s7SLw
                                                [LclId] =
                                                    CCCS GHC.Event.IntTable.IT! [ipv1_s7T04
                                                                                 ipv6_s7T0b
                                                                                 ipv7_s7T0d];
                                              } in 
                                                case newMutVar# [sat_s7T0f s'_s7T0e] of {
                                                  (#,#) ipv8_s7T0h [Occ=Once]
                                                        ipv9_s7T0i [Occ=Once] ->
                                                      let {
                                                        sat_s7T0j [Occ=Once]
                                                          :: GHC.Event.IntTable.IntTable a_s7SLw
                                                        [LclId] =
                                                            CCCS GHC.STRef.STRef! [ipv9_s7T0i];
                                                      } in  (#,#) [ipv8_s7T0h sat_s7T0j];
                                                };
                                        };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.new1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T0k w1_s7T0l]
        case w_s7T0k of {
          GHC.Types.I# ww1_s7T0n [Occ=Once] ->
              GHC.Event.IntTable.$wnew ww1_s7T0n w1_s7T0l;
        };

GHC.Event.IntTable.new
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.Event.IntTable.IntTable a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Event.IntTable.new1 eta_B2 eta_B1;

GHC.Event.IntTable.$wupdateWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T0o ww_s7T0p ww1_s7T0q w1_s7T0r]
        case readMutVar# [ww1_s7T0q w1_s7T0r] of {
          (#,#) ipv_s7T0t [Occ=Once] ipv1_s7T0u [Occ=Once!] ->
              case ipv1_s7T0u of {
                GHC.Event.IntTable.IT dt_s7T0w dt1_s7T0x dt2_s7T0y [Occ=Once] ->
                    case sizeofMutableArray# [dt_s7T0w] of sat_s7T0A {
                      __DEFAULT ->
                          case -# [sat_s7T0A 1#] of sat_s7T0B {
                            __DEFAULT ->
                                case andI# [ww_s7T0p sat_s7T0B] of n#_s7T0z [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7T0w n#_s7T0z ipv_s7T0t] of {
                                        (#,#) ipv2_s7T0D [Occ=Once*] ipv3_s7T0E [Occ=Once] ->
                                            let {
                                              $wgo_s7T0F [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                                :: GHC.Event.IntTable.Bucket a_s7SLJ
                                                   -> (# GHC.Types.Bool, GHC.Base.Maybe a_s7SLJ,
                                                         GHC.Event.IntTable.Bucket a_s7SLJ #)
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [w_s7T0o
                                                            ww_s7T0p
                                                            $wgo_s7T0F] \r [w2_s7T0G]
                                                      case w2_s7T0G of {
                                                        GHC.Event.IntTable.Empty ->
                                                            (#,,#) [GHC.Types.False
                                                                    GHC.Base.Nothing
                                                                    GHC.Event.IntTable.Empty];
                                                        GHC.Event.IntTable.Bucket dt3_s7T0I
                                                                                  ds_s7T0J
                                                                                  ds3_s7T0K [Occ=Once*] ->
                                                            case ==# [dt3_s7T0I ww_s7T0p] of {
                                                              __DEFAULT ->
                                                                  case $wgo_s7T0F ds3_s7T0K of {
                                                                    (#,,#) ww3_s7T0N [Occ=Once]
                                                                           ww4_s7T0O [Occ=Once]
                                                                           ww5_s7T0P [Occ=Once] ->
                                                                        let {
                                                                          sat_s7T0Q [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7T0I
                                                                                                               ds_s7T0J
                                                                                                               ww5_s7T0P];
                                                                        } in 
                                                                          (#,,#) [ww3_s7T0N
                                                                                  ww4_s7T0O
                                                                                  sat_s7T0Q];
                                                                  };
                                                              1# ->
                                                                  case w_s7T0o ds_s7T0J of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_s7T0S [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7T0J];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7T0S
                                                                                  ds3_s7T0K];
                                                                    GHC.Base.Just val_s7T0T [Occ=Once] ->
                                                                        let {
                                                                          sat_s7T0V [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7T0I
                                                                                                               val_s7T0T
                                                                                                               ds3_s7T0K]; } in
                                                                        let {
                                                                          sat_s7T0U [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7T0J];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.False
                                                                                  sat_s7T0U
                                                                                  sat_s7T0V];
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case $wgo_s7T0F ipv3_s7T0E of {
                                                (#,,#) ww3_s7T0X [Occ=Once!]
                                                       ww4_s7T0Y [Occ=Once!]
                                                       ww5_s7T0Z [Occ=Once] ->
                                                    case ww4_s7T0Y of wild1_s7T10 {
                                                      GHC.Base.Nothing ->
                                                          (#,#) [ipv2_s7T0D GHC.Base.Nothing];
                                                      GHC.Base.Just _ [Occ=Dead] ->
                                                          case
                                                              writeArray# [dt_s7T0w
                                                                           n#_s7T0z
                                                                           ww5_s7T0Z
                                                                           ipv2_s7T0D]
                                                          of
                                                          s1#_s7T12
                                                          { __DEFAULT ->
                                                                case ww3_s7T0X of {
                                                                  GHC.Types.False ->
                                                                      (#,#) [s1#_s7T12 wild1_s7T10];
                                                                  GHC.Types.True ->
                                                                      case
                                                                          readIntOffAddr# [dt1_s7T0x
                                                                                           0#
                                                                                           s1#_s7T12]
                                                                      of
                                                                      { (#,#) ipv5_s7T15 [Occ=Once]
                                                                              ipv6_s7T16 [Occ=Once] ->
                                                                            case
                                                                                -# [ipv6_s7T16 1#]
                                                                            of
                                                                            sat_s7T17
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      writeIntOffAddr# [dt1_s7T0x
                                                                                                        0#
                                                                                                        sat_s7T17
                                                                                                        ipv5_s7T15]
                                                                                  of
                                                                                  s2_s7T18
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            touch# [dt2_s7T0y
                                                                                                    s2_s7T18]
                                                                                        of
                                                                                        s'_s7T19
                                                                                        { __DEFAULT ->
                                                                                              (#,#) [s'_s7T19
                                                                                                     wild1_s7T10];
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.delete3 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T1a w1_s7T1b w2_s7T1c w3_s7T1d]
        case w1_s7T1b of {
          GHC.Types.I# ww1_s7T1f [Occ=Once] ->
              case w2_s7T1c of {
                GHC.STRef.STRef ww3_s7T1h [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        w_s7T1a ww1_s7T1f ww3_s7T1h w3_s7T1d;
              };
        };

GHC.Event.IntTable.updateWith
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.delete3 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.delete2 :: forall a. a -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s7T1i] GHC.Base.Nothing [];

GHC.Event.IntTable.delete1
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [k_s7T1j t_s7T1k eta_s7T1l]
        case k_s7T1j of {
          GHC.Types.I# ww1_s7T1n [Occ=Once] ->
              case t_s7T1k of {
                GHC.STRef.STRef ww3_s7T1p [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        GHC.Event.IntTable.delete2 ww1_s7T1n ww3_s7T1p eta_s7T1l;
              };
        };

GHC.Event.IntTable.delete
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.delete1 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$wgrow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7T1q ww1_s7T1r ww2_s7T1s w_s7T1t]
        case sizeofMutableArray# [ww_s7T1q] of sat_s7T1u {
          __DEFAULT ->
              case uncheckedIShiftL# [sat_s7T1u 1#] of sat_s7T1v {
                __DEFAULT ->
                    case newArray# [sat_s7T1v GHC.Event.IntTable.Empty w_s7T1t] of {
                      (#,#) ipv_s7T1x [Occ=Once] ipv1_s7T1y ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers ipv_s7T1x] of {
                            (#,#) ipv2_s7T1A [Occ=Once] ipv3_s7T1B [Occ=OnceL] ->
                                case newAlignedPinnedByteArray# [8# 8# ipv2_s7T1A] of {
                                  (#,#) ipv4_s7T1D [Occ=Once] ipv5_s7T1E ->
                                      case
                                          byteArrayContents# [ipv5_s7T1E]
                                      of
                                      ipv6_s7T1F [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                writeIntOffAddr# [ipv6_s7T1F 0# 0# ipv4_s7T1D]
                                            of
                                            s2_s7T1G
                                            { __DEFAULT ->
                                                  let {
                                                    ipv7_s7T1H :: GHC.ForeignPtr.ForeignPtrContents
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7T1E
                                                                                        ipv3_s7T1B];
                                                  } in 
                                                    case touch# [ipv7_s7T1H s2_s7T1G] of s'_s7T1I {
                                                      __DEFAULT ->
                                                          let-no-escape {
                                                            exit_s7T1J [Occ=OnceL!T[1],
                                                                        Dmd=<C(S),C(U(U,U))>]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       () #)
                                                            [LclId[JoinId(1)],
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ww1_s7T1r
                                                                          ww2_s7T1s
                                                                          ipv1_s7T1y
                                                                          ipv6_s7T1F
                                                                          ipv7_s7T1H] \r [w1_s7T1K]
                                                                    case
                                                                        writeIntOffAddr# [ipv6_s7T1F
                                                                                          0#
                                                                                          ww2_s7T1s
                                                                                          w1_s7T1K]
                                                                    of
                                                                    s1_s7T1L
                                                                    { __DEFAULT ->
                                                                          case
                                                                              touch# [ipv7_s7T1H
                                                                                      s1_s7T1L]
                                                                          of
                                                                          s'1_s7T1M
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s7T1N [Occ=Once]
                                                                                    :: GHC.Event.IntTable.IT
                                                                                         a_s7SMk
                                                                                  [LclId] =
                                                                                      CCCS GHC.Event.IntTable.IT! [ipv1_s7T1y
                                                                                                                   ipv6_s7T1F
                                                                                                                   ipv7_s7T1H];
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [ww1_s7T1r
                                                                                                    sat_s7T1N
                                                                                                    s'1_s7T1M]
                                                                                  of
                                                                                  s2#_s7T1O
                                                                                  { __DEFAULT ->
                                                                                        (#,#) [s2#_s7T1O
                                                                                               GHC.Tuple.()];
                                                                                  };
                                                                          };
                                                                    };
                                                          } in 
                                                            let-no-escape {
                                                              $wcopySlot_s7T1P [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreakerT[3]]
                                                                :: GHC.Prim.Int#
                                                                   -> GHC.Prim.Int#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId[JoinId(3)],
                                                               Arity=3,
                                                               Str=<S,U><L,U><S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [ww_s7T1q
                                                                            ww2_s7T1s
                                                                            ipv1_s7T1y
                                                                            exit_s7T1J
                                                                            $wcopySlot_s7T1P] \r [ww3_s7T1Q
                                                                                                  ww4_s7T1R
                                                                                                  w1_s7T1S]
                                                                      case
                                                                          ==# [ww3_s7T1Q ww2_s7T1s]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readArray# [ww_s7T1q
                                                                                            ww4_s7T1R
                                                                                            w1_s7T1S]
                                                                            of
                                                                            { (#,#) ipv8_s7T1V [Occ=Once]
                                                                                    ipv9_s7T1W [Occ=Once] ->
                                                                                  let-no-escape {
                                                                                    exit1_s7T1X [Occ=OnceL!T[2],
                                                                                                 Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                      :: GHC.Prim.Int#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               () #)
                                                                                    [LclId[JoinId(2)],
                                                                                     Arity=2,
                                                                                     Str=<S,U><S,U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [$wcopySlot_s7T1P
                                                                                                  ww4_s7T1R] \r [ww5_s7T1Y
                                                                                                                 w2_s7T1Z]
                                                                                            case
                                                                                                +# [ww4_s7T1R
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s7T20
                                                                                            { __DEFAULT ->
                                                                                                  $wcopySlot_s7T1P
                                                                                                      ww5_s7T1Y
                                                                                                      sat_s7T20
                                                                                                      w2_s7T1Z;
                                                                                            };
                                                                                  } in 
                                                                                    let-no-escape {
                                                                                      $wcopyBucket_s7T21 [InlPrag=NOUSERINLINE[0],
                                                                                                          Occ=LoopBreakerT[3]]
                                                                                        :: GHC.Prim.Int#
                                                                                           -> GHC.Event.IntTable.Bucket
                                                                                                a_s7SMk
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 () #)
                                                                                      [LclId[JoinId(3)],
                                                                                       Arity=3,
                                                                                       Str=<S,U><S,1*U><S,U>,
                                                                                       Unf=OtherCon []] =
                                                                                          sat-only [ipv1_s7T1y
                                                                                                    exit1_s7T1X
                                                                                                    $wcopyBucket_s7T21] \r [ww5_s7T22
                                                                                                                            w2_s7T23
                                                                                                                            w3_s7T24]
                                                                                              case
                                                                                                  w2_s7T23
                                                                                              of
                                                                                              { GHC.Event.IntTable.Empty ->
                                                                                                    exit1_s7T1X
                                                                                                        ww5_s7T22
                                                                                                        w3_s7T24;
                                                                                                GHC.Event.IntTable.Bucket ipv10_s7T26
                                                                                                                          ipv11_s7T27 [Occ=Once]
                                                                                                                          ipv12_s7T28 [Occ=Once] ->
                                                                                                    case
                                                                                                        sizeofMutableArray# [ipv1_s7T1y]
                                                                                                    of
                                                                                                    sat_s7T2a
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              -# [sat_s7T2a
                                                                                                                  1#]
                                                                                                          of
                                                                                                          sat_s7T2b
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    andI# [ipv10_s7T26
                                                                                                                           sat_s7T2b]
                                                                                                                of
                                                                                                                idx_s7T29 [Dmd=<S,U>]
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readArray# [ipv1_s7T1y
                                                                                                                                      idx_s7T29
                                                                                                                                      w3_s7T24]
                                                                                                                      of
                                                                                                                      { (#,#) ipv13_s7T2d [Occ=Once]
                                                                                                                              ipv14_s7T2e [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_s7T2f [Occ=Once]
                                                                                                                                :: GHC.Event.IntTable.Bucket
                                                                                                                                     a_s7SMk
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Event.IntTable.Bucket! [ipv10_s7T26
                                                                                                                                                                   ipv11_s7T27
                                                                                                                                                                   ipv14_s7T2e];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  writeArray# [ipv1_s7T1y
                                                                                                                                               idx_s7T29
                                                                                                                                               sat_s7T2f
                                                                                                                                               ipv13_s7T2d]
                                                                                                                              of
                                                                                                                              s1#_s7T2g
                                                                                                                              { __DEFAULT ->
                                                                                                                                    case
                                                                                                                                        +# [ww5_s7T22
                                                                                                                                            1#]
                                                                                                                                    of
                                                                                                                                    sat_s7T2h
                                                                                                                                    { __DEFAULT ->
                                                                                                                                          $wcopyBucket_s7T21
                                                                                                                                              sat_s7T2h
                                                                                                                                              ipv12_s7T28
                                                                                                                                              s1#_s7T2g;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      $wcopyBucket_s7T21
                                                                                          ww3_s7T1Q
                                                                                          ipv9_s7T1W
                                                                                          ipv8_s7T1V;
                                                                            };
                                                                        1# -> exit_s7T1J w1_s7T1S;
                                                                      };
                                                            } in  $wcopySlot_s7T1P 0# 0# s'_s7T1I;
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

poly_<>_r7SZ6
  :: forall a.
     GHC.Event.IntTable.Bucket a
     -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s7T2i bs_s7T2j]
        case ds_s7T2i of {
          GHC.Event.IntTable.Empty -> bs_s7T2j;
          GHC.Event.IntTable.Bucket dt_s7T2l [Occ=Once]
                                    ds1_s7T2m [Occ=Once]
                                    ds2_s7T2n [Occ=Once] ->
              let {
                sat_s7T2o [Occ=Once] :: GHC.Event.IntTable.Bucket a_a7S4Y
                [LclId] =
                    [bs_s7T2j ds2_s7T2n] \u [] poly_<>_r7SZ6 ds2_s7T2n bs_s7T2j;
              } in  GHC.Event.IntTable.Bucket [dt_s7T2l ds1_s7T2m sat_s7T2o];
        };

GHC.Event.IntTable.$winsertWith [InlPrag=INLINABLE[0],
                                 Occ=LoopBreaker]
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T2p ww_s7T2q w1_s7T2r ww1_s7T2s w2_s7T2t]
        let {
          sat_s7T2v [Occ=Once] :: GHC.Event.IntTable.IntTable a_X7SOt
          [LclId] =
              CCCS GHC.STRef.STRef! [ww1_s7T2s]; } in
        let {
          sat_s7T2u [Occ=Once] :: GHC.Types.Int
          [LclId] =
              CCCS GHC.Types.I#! [ww_s7T2q];
        } in 
          insertWith1_r7SZ8 w_s7T2p sat_s7T2u w1_s7T2r sat_s7T2v w2_s7T2t;
$winsertWith1_r7SZ7
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T2w ww_s7T2x w1_s7T2y ww1_s7T2z w2_s7T2A]
        case readMutVar# [ww1_s7T2z w2_s7T2A] of {
          (#,#) ipv_s7T2C [Occ=Once] ipv1_s7T2D [Occ=Once!] ->
              case ipv1_s7T2D of {
                GHC.Event.IntTable.IT dt_s7T2F dt1_s7T2G dt2_s7T2H [Occ=Once*] ->
                    case sizeofMutableArray# [dt_s7T2F] of sat_s7T2J {
                      __DEFAULT ->
                          case -# [sat_s7T2J 1#] of sat_s7T2K {
                            __DEFAULT ->
                                case andI# [ww_s7T2x sat_s7T2K] of n#_s7T2I [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7T2F n#_s7T2I ipv_s7T2C] of {
                                        (#,#) ipv2_s7T2M [Occ=Once] ipv3_s7T2N [Occ=Once] ->
                                            let-no-escape {
                                              exit_s7T2O [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                                :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe a_s7SMZ #)
                                              [LclId[JoinId(2)],
                                               Arity=2,
                                               Str=<L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [w_s7T2w
                                                            ww_s7T2x
                                                            w1_s7T2y
                                                            ww1_s7T2z
                                                            dt_s7T2F
                                                            dt1_s7T2G
                                                            dt2_s7T2H
                                                            n#_s7T2I] \r [seen_s7T2P eta_s7T2Q]
                                                      case
                                                          readIntOffAddr# [dt1_s7T2G 0# eta_s7T2Q]
                                                      of
                                                      { (#,#) ipv4_s7T2S [Occ=Once*] ipv5_s7T2T ->
                                                            case
                                                                sizeofMutableArray# [dt_s7T2F]
                                                            of
                                                            sat_s7T2W
                                                            { __DEFAULT ->
                                                                  case
                                                                      uncheckedIShiftRA# [sat_s7T2W
                                                                                          2#]
                                                                  of
                                                                  sat_s7T2X
                                                                  { __DEFAULT ->
                                                                        case
                                                                            sizeofMutableArray# [dt_s7T2F]
                                                                        of
                                                                        sat_s7T2V
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  -# [sat_s7T2V
                                                                                      sat_s7T2X]
                                                                              of
                                                                              sat_s7T2Y
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        +# [ipv5_s7T2T
                                                                                            1#]
                                                                                    of
                                                                                    sat_s7T2U
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              >=# [sat_s7T2U
                                                                                                   sat_s7T2Y]
                                                                                          of
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    w1_s7T2y
                                                                                                of
                                                                                                v_s7T30
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        sat_s7T31 [Occ=Once]
                                                                                                          :: GHC.Event.IntTable.Bucket
                                                                                                               a_s7SMZ
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Event.IntTable.Bucket! [ww_s7T2x
                                                                                                                                             v_s7T30
                                                                                                                                             seen_s7T2P];
                                                                                                      } in 
                                                                                                        case
                                                                                                            writeArray# [dt_s7T2F
                                                                                                                         n#_s7T2I
                                                                                                                         sat_s7T31
                                                                                                                         ipv4_s7T2S]
                                                                                                        of
                                                                                                        s1#_s7T32
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  +# [ipv5_s7T2T
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s7T33
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        writeIntOffAddr# [dt1_s7T2G
                                                                                                                                          0#
                                                                                                                                          sat_s7T33
                                                                                                                                          s1#_s7T32]
                                                                                                                    of
                                                                                                                    s2_s7T34
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              touch# [dt2_s7T2H
                                                                                                                                      s2_s7T34]
                                                                                                                          of
                                                                                                                          s'_s7T35
                                                                                                                          { __DEFAULT ->
                                                                                                                                (#,#) [s'_s7T35
                                                                                                                                       GHC.Base.Nothing];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                };
                                                                                            1# ->
                                                                                                case
                                                                                                    GHC.Event.IntTable.$wgrow
                                                                                                        dt_s7T2F
                                                                                                        ww1_s7T2z
                                                                                                        ipv5_s7T2T
                                                                                                        ipv4_s7T2S
                                                                                                of
                                                                                                { (#,#) ipv6_s7T37 [Occ=Once]
                                                                                                        _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          GHC.Event.IntTable.$winsertWith
                                                                                                              w_s7T2w
                                                                                                              ww_s7T2x
                                                                                                              w1_s7T2y
                                                                                                              ww1_s7T2z
                                                                                                              ipv6_s7T37
                                                                                                      of
                                                                                                      { (#,#) ipv8_s7T3a [Occ=Once]
                                                                                                              ipv9_s7T3b [Occ=Once] ->
                                                                                                            case
                                                                                                                touch# [dt2_s7T2H
                                                                                                                        ipv8_s7T3a]
                                                                                                            of
                                                                                                            s'_s7T3c
                                                                                                            { __DEFAULT ->
                                                                                                                  (#,#) [s'_s7T3c
                                                                                                                         ipv9_s7T3b];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              let-no-escape {
                                                exit1_s7T3d [Occ=OnceL!T[4],
                                                             Dmd=<L,C(C1(C1(C1(U(U,U)))))>]
                                                  :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> a_s7SMZ
                                                     -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Base.Maybe a_s7SMZ #)
                                                [LclId[JoinId(4)],
                                                 Arity=4,
                                                 Str=<S,1*U><S,U><L,U><L,1*U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [w_s7T2w
                                                              ww_s7T2x
                                                              w1_s7T2y
                                                              dt_s7T2F
                                                              n#_s7T2I] \r [seen_s7T3e
                                                                            eta_s7T3f
                                                                            ds_s7T3g
                                                                            ds3_s7T3h]
                                                        case
                                                            poly_<>_r7SZ6 seen_s7T3e ds3_s7T3h
                                                        of
                                                        next_s7T3i
                                                        { __DEFAULT ->
                                                              case
                                                                  w_s7T2w w1_s7T2y ds_s7T3g
                                                              of
                                                              v'_s7T3j
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s7T3k [Occ=Once]
                                                                        :: GHC.Event.IntTable.Bucket
                                                                             a_s7SMZ
                                                                      [LclId] =
                                                                          CCCS GHC.Event.IntTable.Bucket! [ww_s7T2x
                                                                                                           v'_s7T3j
                                                                                                           next_s7T3i];
                                                                    } in 
                                                                      case
                                                                          writeArray# [dt_s7T2F
                                                                                       n#_s7T2I
                                                                                       sat_s7T3k
                                                                                       eta_s7T3f]
                                                                      of
                                                                      s1#_s7T3l
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s7T3m [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     a_s7SMZ
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ds_s7T3g];
                                                                            } in 
                                                                              (#,#) [s1#_s7T3l
                                                                                     sat_s7T3m];
                                                                      };
                                                              };
                                                        };
                                              } in 
                                                let-no-escape {
                                                  go_s7T3n [Occ=LoopBreakerT[3]]
                                                    :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Base.Maybe a_s7SMZ #)
                                                  [LclId[JoinId(3)],
                                                   Arity=3,
                                                   Str=<L,U><S,1*U><S,U>,
                                                   Unf=OtherCon []] =
                                                      sat-only [ww_s7T2x
                                                                exit_s7T2O
                                                                exit1_s7T3d
                                                                go_s7T3n] \r [seen_s7T3o
                                                                              bkt_s7T3p
                                                                              eta_s7T3q]
                                                          case bkt_s7T3p of {
                                                            GHC.Event.IntTable.Empty ->
                                                                exit_s7T2O seen_s7T3o eta_s7T3q;
                                                            GHC.Event.IntTable.Bucket dt3_s7T3s
                                                                                      ds_s7T3t [Occ=Once*]
                                                                                      ds3_s7T3u [Occ=Once*] ->
                                                                case ==# [dt3_s7T3s ww_s7T2x] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s7T3w [Occ=Once]
                                                                          :: GHC.Event.IntTable.Bucket
                                                                               a_s7SMZ
                                                                        [LclId] =
                                                                            CCCS GHC.Event.IntTable.Bucket! [dt3_s7T3s
                                                                                                             ds_s7T3t
                                                                                                             seen_s7T3o];
                                                                      } in 
                                                                        go_s7T3n
                                                                            sat_s7T3w
                                                                            ds3_s7T3u
                                                                            eta_s7T3q;
                                                                  1# ->
                                                                      exit1_s7T3d
                                                                          seen_s7T3o
                                                                          eta_s7T3q
                                                                          ds_s7T3t
                                                                          ds3_s7T3u;
                                                                };
                                                          };
                                                } in 
                                                  go_s7T3n
                                                      GHC.Event.IntTable.Empty
                                                      ipv3_s7T2N
                                                      ipv2_s7T2M;
                                      };
                                };
                          };
                    };
              };
        };
insertWith1_r7SZ8
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T3x w1_s7T3y w2_s7T3z w3_s7T3A w4_s7T3B]
        case w1_s7T3y of {
          GHC.Types.I# ww1_s7T3D [Occ=Once] ->
              case w3_s7T3A of {
                GHC.STRef.STRef ww3_s7T3F [Occ=Once] ->
                    $winsertWith1_r7SZ7 w_s7T3x ww1_s7T3D w2_s7T3z ww3_s7T3F w4_s7T3B;
              };
        };

insertWith2_r7SZ9
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_s7T3G w1_s7T3H w2_s7T3I w3_s7T3J w4_s7T3K]
        case w1_s7T3H of {
          GHC.Types.I# ww1_s7T3M [Occ=Once] ->
              case w3_s7T3J of {
                GHC.STRef.STRef ww3_s7T3O [Occ=Once] ->
                    GHC.Event.IntTable.$winsertWith
                        w_s7T3G ww1_s7T3M w2_s7T3I ww3_s7T3O w4_s7T3K;
              };
        };

GHC.Event.IntTable.insertWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        insertWith2_r7SZ9 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$wreset [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Base.Maybe a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7T3P w_s7T3Q ww1_s7T3R w1_s7T3S]
        case w_s7T3Q of {
          GHC.Base.Nothing ->
              case readMutVar# [ww1_s7T3R w1_s7T3S] of {
                (#,#) ipv_s7T3V [Occ=Once] ipv1_s7T3W [Occ=Once!] ->
                    case ipv1_s7T3W of {
                      GHC.Event.IntTable.IT dt_s7T3Y dt1_s7T3Z dt2_s7T40 [Occ=Once] ->
                          case sizeofMutableArray# [dt_s7T3Y] of sat_s7T42 {
                            __DEFAULT ->
                                case -# [sat_s7T42 1#] of sat_s7T43 {
                                  __DEFAULT ->
                                      case andI# [ww_s7T3P sat_s7T43] of n#_s7T41 [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case readArray# [dt_s7T3Y n#_s7T41 ipv_s7T3V] of {
                                              (#,#) ipv2_s7T45 [Occ=Once*] ipv3_s7T46 [Occ=Once] ->
                                                  let {
                                                    $wgo_s7T47 [InlPrag=NOUSERINLINE[0],
                                                                Occ=LoopBreaker]
                                                      :: GHC.Event.IntTable.Bucket a_s7SNj
                                                         -> (# GHC.Types.Bool,
                                                               GHC.Base.Maybe a_s7SNj,
                                                               GHC.Event.IntTable.Bucket a_s7SNj #)
                                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                        sat-only [ww_s7T3P $wgo_s7T47] \r [w2_s7T48]
                                                            case w2_s7T48 of {
                                                              GHC.Event.IntTable.Empty ->
                                                                  (#,,#) [GHC.Types.False
                                                                          GHC.Base.Nothing
                                                                          GHC.Event.IntTable.Empty];
                                                              GHC.Event.IntTable.Bucket dt3_s7T4a
                                                                                        ds_s7T4b [Occ=Once*]
                                                                                        ds3_s7T4c [Occ=Once*] ->
                                                                  case ==# [dt3_s7T4a ww_s7T3P] of {
                                                                    __DEFAULT ->
                                                                        case
                                                                            $wgo_s7T47 ds3_s7T4c
                                                                        of
                                                                        { (#,,#) ww3_s7T4f [Occ=Once]
                                                                                 ww4_s7T4g [Occ=Once]
                                                                                 ww5_s7T4h [Occ=Once] ->
                                                                              let {
                                                                                sat_s7T4i [Occ=Once]
                                                                                  :: GHC.Event.IntTable.Bucket
                                                                                       a_s7SNj
                                                                                [LclId] =
                                                                                    CCCS GHC.Event.IntTable.Bucket! [dt3_s7T4a
                                                                                                                     ds_s7T4b
                                                                                                                     ww5_s7T4h];
                                                                              } in 
                                                                                (#,,#) [ww3_s7T4f
                                                                                        ww4_s7T4g
                                                                                        sat_s7T4i];
                                                                        };
                                                                    1# ->
                                                                        let {
                                                                          sat_s7T4j [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SNj
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7T4b];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7T4j
                                                                                  ds3_s7T4c];
                                                                  };
                                                            };
                                                  } in 
                                                    case $wgo_s7T47 ipv3_s7T46 of {
                                                      (#,,#) ww3_s7T4l [Occ=Once!]
                                                             ww4_s7T4m [Occ=Once!]
                                                             ww5_s7T4n [Occ=Once] ->
                                                          case ww4_s7T4m of {
                                                            GHC.Base.Nothing ->
                                                                (#,#) [ipv2_s7T45 GHC.Tuple.()];
                                                            GHC.Base.Just _ [Occ=Dead] ->
                                                                case
                                                                    writeArray# [dt_s7T3Y
                                                                                 n#_s7T41
                                                                                 ww5_s7T4n
                                                                                 ipv2_s7T45]
                                                                of
                                                                s1#_s7T4q
                                                                { __DEFAULT ->
                                                                      case ww3_s7T4l of {
                                                                        GHC.Types.False ->
                                                                            (#,#) [s1#_s7T4q
                                                                                   GHC.Tuple.()];
                                                                        GHC.Types.True ->
                                                                            case
                                                                                readIntOffAddr# [dt1_s7T3Z
                                                                                                 0#
                                                                                                 s1#_s7T4q]
                                                                            of
                                                                            { (#,#) ipv5_s7T4t [Occ=Once]
                                                                                    ipv6_s7T4u [Occ=Once] ->
                                                                                  case
                                                                                      -# [ipv6_s7T4u
                                                                                          1#]
                                                                                  of
                                                                                  sat_s7T4v
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            writeIntOffAddr# [dt1_s7T3Z
                                                                                                              0#
                                                                                                              sat_s7T4v
                                                                                                              ipv5_s7T4t]
                                                                                        of
                                                                                        s2_s7T4w
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  touch# [dt2_s7T40
                                                                                                          s2_s7T4w]
                                                                                              of
                                                                                              s'_s7T4x
                                                                                              { __DEFAULT ->
                                                                                                    (#,#) [s'_s7T4x
                                                                                                           GHC.Tuple.()];
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Base.Just v_s7T4y [Occ=Once] ->
              case
                  GHC.Event.IntTable.$winsertWith
                      GHC.Base.const ww_s7T3P v_s7T4y ww1_s7T3R w1_s7T3S
              of
              { (#,#) ipv_s7T4A [Occ=Once] _ [Occ=Dead] ->
                    (#,#) [ipv_s7T4A GHC.Tuple.()];
              };
        };

GHC.Event.IntTable.reset1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T4C w1_s7T4D w2_s7T4E w3_s7T4F]
        case w_s7T4C of {
          GHC.Types.I# ww1_s7T4H [Occ=Once] ->
              case w2_s7T4E of {
                GHC.STRef.STRef ww3_s7T4J [Occ=Once] ->
                    GHC.Event.IntTable.$wreset ww1_s7T4H w1_s7T4D ww3_s7T4J w3_s7T4F;
              };
        };

GHC.Event.IntTable.reset
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.reset1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$wlookup [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7T4K ww1_s7T4L w_s7T4M]
        case readMutVar# [ww1_s7T4L w_s7T4M] of {
          (#,#) ipv_s7T4O [Occ=Once] ipv1_s7T4P [Occ=Once!] ->
              case ipv1_s7T4P of {
                GHC.Event.IntTable.IT dt_s7T4R _ [Occ=Dead] _ [Occ=Dead] ->
                    case sizeofMutableArray# [dt_s7T4R] of sat_s7T4U {
                      __DEFAULT ->
                          case -# [sat_s7T4U 1#] of sat_s7T4V {
                            __DEFAULT ->
                                case andI# [ww_s7T4K sat_s7T4V] of sat_s7T4W {
                                  __DEFAULT ->
                                      case readArray# [dt_s7T4R sat_s7T4W ipv_s7T4O] of {
                                        (#,#) ipv2_s7T4Y [Occ=Once] ipv3_s7T4Z [Occ=Once] ->
                                            let {
                                              go_s7T50 [Occ=LoopBreaker]
                                                :: forall a1.
                                                   GHC.Event.IntTable.Bucket a1 -> GHC.Base.Maybe a1
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [ww_s7T4K go_s7T50] \r [ds_s7T51]
                                                      case ds_s7T51 of {
                                                        GHC.Event.IntTable.Empty ->
                                                            GHC.Base.Nothing [];
                                                        GHC.Event.IntTable.Bucket dt3_s7T53 [Occ=Once]
                                                                                  ds3_s7T54 [Occ=Once]
                                                                                  ds4_s7T55 [Occ=Once] ->
                                                            case ==# [dt3_s7T53 ww_s7T4K] of {
                                                              __DEFAULT -> go_s7T50 ds4_s7T55;
                                                              1# -> GHC.Base.Just [ds3_s7T54];
                                                            };
                                                      };
                                            } in 
                                              case go_s7T50 ipv3_s7T4Z of vx_s7T57 {
                                                __DEFAULT -> (#,#) [ipv2_s7T4Y vx_s7T57];
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.lookup1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T58 w1_s7T59 w2_s7T5a]
        case w_s7T58 of {
          GHC.Types.I# ww1_s7T5c [Occ=Once] ->
              case w1_s7T59 of {
                GHC.STRef.STRef ww3_s7T5e [Occ=Once] ->
                    GHC.Event.IntTable.$wlookup ww1_s7T5c ww3_s7T5e w2_s7T5a;
              };
        };

GHC.Event.IntTable.lookup
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.lookup1 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Event.IntTable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule4];

GHC.Event.IntTable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Event.IntTable"#;

GHC.Event.IntTable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule2];

GHC.Event.IntTable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Event.IntTable.$trModule3
                                     GHC.Event.IntTable.$trModule1];

$krep_r7SZa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r7SZb :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7SZa GHC.Types.[]];

$krep2_r7SZc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep1_r7SZb];

$krep3_r7SZd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

GHC.Event.IntTable.$tcBucket2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Bucket"#;

GHC.Event.IntTable.$tcBucket1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcBucket2];

GHC.Event.IntTable.$tcBucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17735724201551259799##
                                    1580619789810252778##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcBucket1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r7SZe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7SZd GHC.Types.[]];

GHC.Event.IntTable.$tc'Empty1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcBucket
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'Empty3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Empty"#;

GHC.Event.IntTable.$tc'Empty2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Empty3];

GHC.Event.IntTable.$tc'Empty :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14716594083905147916##
                                    6006296133869125928##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Empty2
                                    1#
                                    GHC.Event.IntTable.$tc'Empty1];

$krep5_r7SZf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Event.IntTable.$tc'Empty1
                                         GHC.Event.IntTable.$tc'Empty1];

$krep6_r7SZg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r7SZd $krep5_r7SZf];

GHC.Event.IntTable.$tc'Bucket1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r7SZa $krep6_r7SZg];

GHC.Event.IntTable.$tc'Bucket3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Bucket"#;

GHC.Event.IntTable.$tc'Bucket2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Bucket3];

GHC.Event.IntTable.$tc'Bucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13477734220520722226##
                                    15099239145624852322##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Bucket2
                                    1#
                                    GHC.Event.IntTable.$tc'Bucket1];

$krep7_r7SZh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Event.IntTable.$tc'Empty1 GHC.Types.[]];

$krep8_r7SZi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.Arr.$tcArr
                                              $krep7_r7SZh];

GHC.Event.IntTable.$tcIT2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IT"#;

GHC.Event.IntTable.$tcIT1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIT2];

GHC.Event.IntTable.$tcIT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1485413372890074222##
                                    7871673693356487434##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIT1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep9_r7SZj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIT
                                              $krep4_r7SZe];

$krep10_r7SZk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r7SZc $krep9_r7SZj];

GHC.Event.IntTable.$tc'IT1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7SZi $krep10_r7SZk];

GHC.Event.IntTable.$tc'IT3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IT"#;

GHC.Event.IntTable.$tc'IT2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IT3];

GHC.Event.IntTable.$tc'IT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2061931487051656996##
                                    1303251193055522557##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IT2
                                    1#
                                    GHC.Event.IntTable.$tc'IT1];

$krep11_r7SZl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r7SZj GHC.Types.[]];

$krep12_r7SZm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7SZl];

GHC.Event.IntTable.$tcIntTable2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntTable"#;

GHC.Event.IntTable.$tcIntTable1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIntTable2];

GHC.Event.IntTable.$tcIntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12646307913912198429##
                                    5258607314097228638##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIntTable1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_r7SZn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIntTable
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'IntTable1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7SZm $krep13_r7SZn];

GHC.Event.IntTable.$tc'IntTable3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntTable"#;

GHC.Event.IntTable.$tc'IntTable2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IntTable3];

GHC.Event.IntTable.$tc'IntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17952658267866828845##
                                    12036984593740445577##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IntTable2
                                    1#
                                    GHC.Event.IntTable.$tc'IntTable1];

GHC.Event.IntTable.Empty :: forall a. GHC.Event.IntTable.Bucket a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Event.IntTable.Empty! [];

GHC.Event.IntTable.Bucket
  :: forall a.
     GHC.Prim.Int#
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.Bucket [eta_B3 eta_B2 eta_B1];

GHC.Event.IntTable.IT
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Event.IntTable.IT a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.IT [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:02:59.867325741 UTC

GHC.Event.IntTable.$WBucket [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Int
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7SZp dt_s7SZq dt_s7SZr]
        case dt_s7SZp of {
          GHC.Types.I# dt_s7SZt [Occ=Once] ->
              GHC.Event.IntTable.Bucket [dt_s7SZt dt_s7SZq dt_s7SZr];
        };

GHC.Event.IntTable.$WIT [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
     -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
     -> GHC.Event.IntTable.IT a
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s7SZu dt_s7SZv]
        case dt_s7SZu of {
          GHC.Event.Arr.Arr dt_s7SZx [Occ=Once] ->
              case dt_s7SZv of {
                GHC.ForeignPtr.ForeignPtr dt_s7SZz [Occ=Once]
                                          dt_s7SZA [Occ=Once] ->
                    GHC.Event.IntTable.IT [dt_s7SZx dt_s7SZz dt_s7SZA];
              };
        };

lvl_r7SZ3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketNext"#;

GHC.Event.IntTable.bucketNext1
  :: forall a. GHC.Event.IntTable.Bucket a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl_r7SZ3;

GHC.Event.IntTable.bucketNext
  :: forall a.
     GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7SZB]
        case ds_s7SZB of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketNext1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    _ [Occ=Dead]
                                    ds2_s7SZF [Occ=Once] ->
              ds2_s7SZF;
        };

lvl1_r7SZ4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketValue"#;

GHC.Event.IntTable.bucketValue1 :: forall a. a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl1_r7SZ4;

GHC.Event.IntTable.bucketValue
  :: forall a. GHC.Event.IntTable.Bucket a -> a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7SZG]
        case ds_s7SZG of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketValue1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    ds1_s7SZJ [Occ=Once]
                                    _ [Occ=Dead] ->
              ds1_s7SZJ;
        };

lvl2_r7SZ5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketKey"#;

GHC.Event.IntTable.bucketKey1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl2_r7SZ5;

GHC.Event.IntTable.bucketKey
  :: forall a. GHC.Event.IntTable.Bucket a -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7SZL]
        case ds_s7SZL of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketKey1;
          GHC.Event.IntTable.Bucket dt_s7SZN [Occ=Once]
                                    _ [Occ=Dead]
                                    _ [Occ=Dead] ->
              GHC.Types.I# [dt_s7SZN];
        };

GHC.Event.IntTable.tabSize
  :: forall a.
     GHC.Event.IntTable.IT a -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7SZQ]
        case ds_s7SZQ of {
          GHC.Event.IntTable.IT _ [Occ=Dead]
                                dt1_s7SZT [Occ=Once]
                                dt2_s7SZU [Occ=Once] ->
              GHC.ForeignPtr.ForeignPtr [dt1_s7SZT dt2_s7SZU];
        };

GHC.Event.IntTable.tabArr
  :: forall a.
     GHC.Event.IntTable.IT a
     -> GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7SZV]
        case ds_s7SZV of {
          GHC.Event.IntTable.IT dt_s7SZX [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              GHC.Event.Arr.Arr [dt_s7SZX];
        };

GHC.Event.IntTable.$wnew [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7T00 void_0E]
        case
            newArray# [ww_s7T00 GHC.Event.IntTable.Empty GHC.Prim.void#]
        of
        { Unit# ipv1_s7T04 [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv3_s7T07 [Occ=OnceL] ->
                    case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                      Unit# ipv5_s7T0a ->
                          case byteArrayContents# [ipv5_s7T0a] of ipv6_s7T0b [Dmd=<S,U>] {
                            __DEFAULT ->
                                case
                                    writeIntOffAddr# [ipv6_s7T0b 0# 0# GHC.Prim.void#]
                                of
                                s2_s7T0c
                                { (##) ->
                                      let {
                                        ipv7_s7T0d :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId, Unf=OtherCon []] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7T0a ipv3_s7T07];
                                      } in 
                                        case touch# [ipv7_s7T0d GHC.Prim.void#] of s'_s7T0e {
                                          (##) ->
                                              let {
                                                sat_s7T0f [Occ=Once]
                                                  :: GHC.Event.IntTable.IT a_s7SLw
                                                [LclId] =
                                                    CCCS GHC.Event.IntTable.IT! [ipv1_s7T04
                                                                                 ipv6_s7T0b
                                                                                 ipv7_s7T0d];
                                              } in 
                                                case newMutVar# [sat_s7T0f GHC.Prim.void#] of {
                                                  Unit# ipv9_s7T0i [Occ=Once] ->
                                                      let {
                                                        sat_s7T0j [Occ=Once]
                                                          :: GHC.Event.IntTable.IntTable a_s7SLw
                                                        [LclId] =
                                                            CCCS GHC.STRef.STRef! [ipv9_s7T0i];
                                                      } in  Unit# [sat_s7T0j];
                                                };
                                        };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.new1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T0k void_0E]
        case w_s7T0k of {
          GHC.Types.I# ww1_s7T0n [Occ=Once] ->
              GHC.Event.IntTable.$wnew ww1_s7T0n GHC.Prim.void#;
        };

GHC.Event.IntTable.new
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.Event.IntTable.IntTable a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Event.IntTable.new1 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wupdateWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T0o ww_s7T0p ww1_s7T0q void_0E]
        case readMutVar# [ww1_s7T0q GHC.Prim.void#] of {
          Unit# ipv1_s7T0u [Occ=Once!] ->
              case ipv1_s7T0u of {
                GHC.Event.IntTable.IT dt_s7T0w dt1_s7T0x dt2_s7T0y [Occ=Once] ->
                    case sizeofMutableArray# [dt_s7T0w] of sat_s7T0A {
                      __DEFAULT ->
                          case -# [sat_s7T0A 1#] of sat_s7T0B {
                            __DEFAULT ->
                                case andI# [ww_s7T0p sat_s7T0B] of n#_s7T0z [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7T0w n#_s7T0z GHC.Prim.void#] of {
                                        Unit# ipv3_s7T0E [Occ=Once] ->
                                            let {
                                              $wgo_s7T0F [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                                :: GHC.Event.IntTable.Bucket a_s7SLJ
                                                   -> (# GHC.Types.Bool, GHC.Base.Maybe a_s7SLJ,
                                                         GHC.Event.IntTable.Bucket a_s7SLJ #)
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [w_s7T0o
                                                            ww_s7T0p
                                                            $wgo_s7T0F] \r [w2_s7T0G]
                                                      case w2_s7T0G of {
                                                        GHC.Event.IntTable.Empty ->
                                                            (#,,#) [GHC.Types.False
                                                                    GHC.Base.Nothing
                                                                    GHC.Event.IntTable.Empty];
                                                        GHC.Event.IntTable.Bucket dt3_s7T0I
                                                                                  ds_s7T0J
                                                                                  ds3_s7T0K [Occ=Once*] ->
                                                            case ==# [dt3_s7T0I ww_s7T0p] of {
                                                              __DEFAULT ->
                                                                  case $wgo_s7T0F ds3_s7T0K of {
                                                                    (#,,#) ww3_s7T0N [Occ=Once]
                                                                           ww4_s7T0O [Occ=Once]
                                                                           ww5_s7T0P [Occ=Once] ->
                                                                        let {
                                                                          sat_s7T0Q [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7T0I
                                                                                                               ds_s7T0J
                                                                                                               ww5_s7T0P];
                                                                        } in 
                                                                          (#,,#) [ww3_s7T0N
                                                                                  ww4_s7T0O
                                                                                  sat_s7T0Q];
                                                                  };
                                                              1# ->
                                                                  case w_s7T0o ds_s7T0J of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_s7T0S [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7T0J];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7T0S
                                                                                  ds3_s7T0K];
                                                                    GHC.Base.Just val_s7T0T [Occ=Once] ->
                                                                        let {
                                                                          sat_s7T0V [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7T0I
                                                                                                               val_s7T0T
                                                                                                               ds3_s7T0K]; } in
                                                                        let {
                                                                          sat_s7T0U [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7T0J];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.False
                                                                                  sat_s7T0U
                                                                                  sat_s7T0V];
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case $wgo_s7T0F ipv3_s7T0E of {
                                                (#,,#) ww3_s7T0X [Occ=Once!]
                                                       ww4_s7T0Y [Occ=Once!]
                                                       ww5_s7T0Z [Occ=Once] ->
                                                    case ww4_s7T0Y of wild1_s7T10 {
                                                      GHC.Base.Nothing -> Unit# [GHC.Base.Nothing];
                                                      GHC.Base.Just _ [Occ=Dead] ->
                                                          case
                                                              writeArray# [dt_s7T0w
                                                                           n#_s7T0z
                                                                           ww5_s7T0Z
                                                                           GHC.Prim.void#]
                                                          of
                                                          s1#_s7T12
                                                          { (##) ->
                                                                case ww3_s7T0X of {
                                                                  GHC.Types.False ->
                                                                      Unit# [wild1_s7T10];
                                                                  GHC.Types.True ->
                                                                      case
                                                                          readIntOffAddr# [dt1_s7T0x
                                                                                           0#
                                                                                           GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv6_s7T16 [Occ=Once] ->
                                                                            case
                                                                                -# [ipv6_s7T16 1#]
                                                                            of
                                                                            sat_s7T17
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      writeIntOffAddr# [dt1_s7T0x
                                                                                                        0#
                                                                                                        sat_s7T17
                                                                                                        GHC.Prim.void#]
                                                                                  of
                                                                                  s2_s7T18
                                                                                  { (##) ->
                                                                                        case
                                                                                            touch# [dt2_s7T0y
                                                                                                    GHC.Prim.void#]
                                                                                        of
                                                                                        s'_s7T19
                                                                                        { (##) ->
                                                                                              Unit# [wild1_s7T10];
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.delete3 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T1a w1_s7T1b w2_s7T1c void_0E]
        case w1_s7T1b of {
          GHC.Types.I# ww1_s7T1f [Occ=Once] ->
              case w2_s7T1c of {
                GHC.STRef.STRef ww3_s7T1h [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        w_s7T1a ww1_s7T1f ww3_s7T1h GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.updateWith
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.delete3 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.delete2 :: forall a. a -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s7T1i] GHC.Base.Nothing [];

GHC.Event.IntTable.delete1
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [k_s7T1j t_s7T1k void_0E]
        case k_s7T1j of {
          GHC.Types.I# ww1_s7T1n [Occ=Once] ->
              case t_s7T1k of {
                GHC.STRef.STRef ww3_s7T1p [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        GHC.Event.IntTable.delete2 ww1_s7T1n ww3_s7T1p GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.delete
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.delete1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wgrow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7T1q ww1_s7T1r ww2_s7T1s void_0E]
        case sizeofMutableArray# [ww_s7T1q] of sat_s7T1u {
          __DEFAULT ->
              case uncheckedIShiftL# [sat_s7T1u 1#] of sat_s7T1v {
                __DEFAULT ->
                    case
                        newArray# [sat_s7T1v GHC.Event.IntTable.Empty GHC.Prim.void#]
                    of
                    { Unit# ipv1_s7T1y ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                            Unit# ipv3_s7T1B [Occ=OnceL] ->
                                case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                                  Unit# ipv5_s7T1E ->
                                      case
                                          byteArrayContents# [ipv5_s7T1E]
                                      of
                                      ipv6_s7T1F [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                writeIntOffAddr# [ipv6_s7T1F 0# 0# GHC.Prim.void#]
                                            of
                                            s2_s7T1G
                                            { (##) ->
                                                  let {
                                                    ipv7_s7T1H :: GHC.ForeignPtr.ForeignPtrContents
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7T1E
                                                                                        ipv3_s7T1B];
                                                  } in 
                                                    case
                                                        touch# [ipv7_s7T1H GHC.Prim.void#]
                                                    of
                                                    s'_s7T1I
                                                    { (##) ->
                                                          let-no-escape {
                                                            exit_s7T1J [Occ=OnceL!T[1],
                                                                        Dmd=<C(S),C(U(U,U))>]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       () #)
                                                            [LclId[JoinId(1)],
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ww1_s7T1r
                                                                          ww2_s7T1s
                                                                          ipv1_s7T1y
                                                                          ipv6_s7T1F
                                                                          ipv7_s7T1H] \r [void_0E]
                                                                    case
                                                                        writeIntOffAddr# [ipv6_s7T1F
                                                                                          0#
                                                                                          ww2_s7T1s
                                                                                          GHC.Prim.void#]
                                                                    of
                                                                    s1_s7T1L
                                                                    { (##) ->
                                                                          case
                                                                              touch# [ipv7_s7T1H
                                                                                      GHC.Prim.void#]
                                                                          of
                                                                          s'1_s7T1M
                                                                          { (##) ->
                                                                                let {
                                                                                  sat_s7T1N [Occ=Once]
                                                                                    :: GHC.Event.IntTable.IT
                                                                                         a_s7SMk
                                                                                  [LclId] =
                                                                                      CCCS GHC.Event.IntTable.IT! [ipv1_s7T1y
                                                                                                                   ipv6_s7T1F
                                                                                                                   ipv7_s7T1H];
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [ww1_s7T1r
                                                                                                    sat_s7T1N
                                                                                                    GHC.Prim.void#]
                                                                                  of
                                                                                  s2#_s7T1O
                                                                                  { (##) ->
                                                                                        Unit# [GHC.Tuple.()];
                                                                                  };
                                                                          };
                                                                    };
                                                          } in 
                                                            let-no-escape {
                                                              $wcopySlot_s7T1P [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreakerT[3]]
                                                                :: GHC.Prim.Int#
                                                                   -> GHC.Prim.Int#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId[JoinId(3)],
                                                               Arity=3,
                                                               Str=<S,U><L,U><S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [ww_s7T1q
                                                                            ww2_s7T1s
                                                                            ipv1_s7T1y
                                                                            exit_s7T1J
                                                                            $wcopySlot_s7T1P] \r [ww3_s7T1Q
                                                                                                  ww4_s7T1R
                                                                                                  void_0E]
                                                                      case
                                                                          ==# [ww3_s7T1Q ww2_s7T1s]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readArray# [ww_s7T1q
                                                                                            ww4_s7T1R
                                                                                            GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv9_s7T1W [Occ=Once] ->
                                                                                  let-no-escape {
                                                                                    exit1_s7T1X [Occ=OnceL!T[2],
                                                                                                 Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                      :: GHC.Prim.Int#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               () #)
                                                                                    [LclId[JoinId(2)],
                                                                                     Arity=2,
                                                                                     Str=<S,U><S,U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [$wcopySlot_s7T1P
                                                                                                  ww4_s7T1R] \r [ww5_s7T1Y
                                                                                                                 void_0E]
                                                                                            case
                                                                                                +# [ww4_s7T1R
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s7T20
                                                                                            { __DEFAULT ->
                                                                                                  $wcopySlot_s7T1P
                                                                                                      ww5_s7T1Y
                                                                                                      sat_s7T20
                                                                                                      GHC.Prim.void#;
                                                                                            };
                                                                                  } in 
                                                                                    let-no-escape {
                                                                                      $wcopyBucket_s7T21 [InlPrag=NOUSERINLINE[0],
                                                                                                          Occ=LoopBreakerT[3]]
                                                                                        :: GHC.Prim.Int#
                                                                                           -> GHC.Event.IntTable.Bucket
                                                                                                a_s7SMk
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 () #)
                                                                                      [LclId[JoinId(3)],
                                                                                       Arity=3,
                                                                                       Str=<S,U><S,1*U><S,U>,
                                                                                       Unf=OtherCon []] =
                                                                                          sat-only [ipv1_s7T1y
                                                                                                    exit1_s7T1X
                                                                                                    $wcopyBucket_s7T21] \r [ww5_s7T22
                                                                                                                            w2_s7T23
                                                                                                                            void_0E]
                                                                                              case
                                                                                                  w2_s7T23
                                                                                              of
                                                                                              { GHC.Event.IntTable.Empty ->
                                                                                                    exit1_s7T1X
                                                                                                        ww5_s7T22
                                                                                                        GHC.Prim.void#;
                                                                                                GHC.Event.IntTable.Bucket ipv10_s7T26
                                                                                                                          ipv11_s7T27 [Occ=Once]
                                                                                                                          ipv12_s7T28 [Occ=Once] ->
                                                                                                    case
                                                                                                        sizeofMutableArray# [ipv1_s7T1y]
                                                                                                    of
                                                                                                    sat_s7T2a
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              -# [sat_s7T2a
                                                                                                                  1#]
                                                                                                          of
                                                                                                          sat_s7T2b
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    andI# [ipv10_s7T26
                                                                                                                           sat_s7T2b]
                                                                                                                of
                                                                                                                idx_s7T29 [Dmd=<S,U>]
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readArray# [ipv1_s7T1y
                                                                                                                                      idx_s7T29
                                                                                                                                      GHC.Prim.void#]
                                                                                                                      of
                                                                                                                      { Unit# ipv14_s7T2e [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_s7T2f [Occ=Once]
                                                                                                                                :: GHC.Event.IntTable.Bucket
                                                                                                                                     a_s7SMk
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Event.IntTable.Bucket! [ipv10_s7T26
                                                                                                                                                                   ipv11_s7T27
                                                                                                                                                                   ipv14_s7T2e];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  writeArray# [ipv1_s7T1y
                                                                                                                                               idx_s7T29
                                                                                                                                               sat_s7T2f
                                                                                                                                               GHC.Prim.void#]
                                                                                                                              of
                                                                                                                              s1#_s7T2g
                                                                                                                              { (##) ->
                                                                                                                                    case
                                                                                                                                        +# [ww5_s7T22
                                                                                                                                            1#]
                                                                                                                                    of
                                                                                                                                    sat_s7T2h
                                                                                                                                    { __DEFAULT ->
                                                                                                                                          $wcopyBucket_s7T21
                                                                                                                                              sat_s7T2h
                                                                                                                                              ipv12_s7T28
                                                                                                                                              GHC.Prim.void#;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      $wcopyBucket_s7T21
                                                                                          ww3_s7T1Q
                                                                                          ipv9_s7T1W
                                                                                          GHC.Prim.void#;
                                                                            };
                                                                        1# ->
                                                                            exit_s7T1J
                                                                                GHC.Prim.void#;
                                                                      };
                                                            } in 
                                                              $wcopySlot_s7T1P 0# 0# GHC.Prim.void#;
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

poly_<>_r7SZ6
  :: forall a.
     GHC.Event.IntTable.Bucket a
     -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s7T2i bs_s7T2j]
        case ds_s7T2i of {
          GHC.Event.IntTable.Empty -> bs_s7T2j;
          GHC.Event.IntTable.Bucket dt_s7T2l [Occ=Once]
                                    ds1_s7T2m [Occ=Once]
                                    ds2_s7T2n [Occ=Once] ->
              let {
                sat_s7T2o [Occ=Once] :: GHC.Event.IntTable.Bucket a_a7S4Y
                [LclId] =
                    [bs_s7T2j ds2_s7T2n] \u [] poly_<>_r7SZ6 ds2_s7T2n bs_s7T2j;
              } in  GHC.Event.IntTable.Bucket [dt_s7T2l ds1_s7T2m sat_s7T2o];
        };

GHC.Event.IntTable.$winsertWith [InlPrag=INLINABLE[0],
                                 Occ=LoopBreaker]
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T2p ww_s7T2q w1_s7T2r ww1_s7T2s void_0E]
        let {
          sat_s7T2v [Occ=Once] :: GHC.Event.IntTable.IntTable a_X7SOt
          [LclId] =
              CCCS GHC.STRef.STRef! [ww1_s7T2s]; } in
        let {
          sat_s7T2u [Occ=Once] :: GHC.Types.Int
          [LclId] =
              CCCS GHC.Types.I#! [ww_s7T2q];
        } in 
          insertWith1_r7SZ8
              w_s7T2p sat_s7T2u w1_s7T2r sat_s7T2v GHC.Prim.void#;
$winsertWith1_r7SZ7
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T2w ww_s7T2x w1_s7T2y ww1_s7T2z void_0E]
        case readMutVar# [ww1_s7T2z GHC.Prim.void#] of {
          Unit# ipv1_s7T2D [Occ=Once!] ->
              case ipv1_s7T2D of {
                GHC.Event.IntTable.IT dt_s7T2F dt1_s7T2G dt2_s7T2H [Occ=Once*] ->
                    case sizeofMutableArray# [dt_s7T2F] of sat_s7T2J {
                      __DEFAULT ->
                          case -# [sat_s7T2J 1#] of sat_s7T2K {
                            __DEFAULT ->
                                case andI# [ww_s7T2x sat_s7T2K] of n#_s7T2I [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7T2F n#_s7T2I GHC.Prim.void#] of {
                                        Unit# ipv3_s7T2N [Occ=Once] ->
                                            let-no-escape {
                                              exit_s7T2O [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                                :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe a_s7SMZ #)
                                              [LclId[JoinId(2)],
                                               Arity=2,
                                               Str=<L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [w_s7T2w
                                                            ww_s7T2x
                                                            w1_s7T2y
                                                            ww1_s7T2z
                                                            dt_s7T2F
                                                            dt1_s7T2G
                                                            dt2_s7T2H
                                                            n#_s7T2I] \r [seen_s7T2P void_0E]
                                                      case
                                                          readIntOffAddr# [dt1_s7T2G
                                                                           0#
                                                                           GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv5_s7T2T ->
                                                            case
                                                                sizeofMutableArray# [dt_s7T2F]
                                                            of
                                                            sat_s7T2W
                                                            { __DEFAULT ->
                                                                  case
                                                                      uncheckedIShiftRA# [sat_s7T2W
                                                                                          2#]
                                                                  of
                                                                  sat_s7T2X
                                                                  { __DEFAULT ->
                                                                        case
                                                                            sizeofMutableArray# [dt_s7T2F]
                                                                        of
                                                                        sat_s7T2V
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  -# [sat_s7T2V
                                                                                      sat_s7T2X]
                                                                              of
                                                                              sat_s7T2Y
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        +# [ipv5_s7T2T
                                                                                            1#]
                                                                                    of
                                                                                    sat_s7T2U
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              >=# [sat_s7T2U
                                                                                                   sat_s7T2Y]
                                                                                          of
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    w1_s7T2y
                                                                                                of
                                                                                                v_s7T30
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        sat_s7T31 [Occ=Once]
                                                                                                          :: GHC.Event.IntTable.Bucket
                                                                                                               a_s7SMZ
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Event.IntTable.Bucket! [ww_s7T2x
                                                                                                                                             v_s7T30
                                                                                                                                             seen_s7T2P];
                                                                                                      } in 
                                                                                                        case
                                                                                                            writeArray# [dt_s7T2F
                                                                                                                         n#_s7T2I
                                                                                                                         sat_s7T31
                                                                                                                         GHC.Prim.void#]
                                                                                                        of
                                                                                                        s1#_s7T32
                                                                                                        { (##) ->
                                                                                                              case
                                                                                                                  +# [ipv5_s7T2T
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s7T33
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        writeIntOffAddr# [dt1_s7T2G
                                                                                                                                          0#
                                                                                                                                          sat_s7T33
                                                                                                                                          GHC.Prim.void#]
                                                                                                                    of
                                                                                                                    s2_s7T34
                                                                                                                    { (##) ->
                                                                                                                          case
                                                                                                                              touch# [dt2_s7T2H
                                                                                                                                      GHC.Prim.void#]
                                                                                                                          of
                                                                                                                          s'_s7T35
                                                                                                                          { (##) ->
                                                                                                                                Unit# [GHC.Base.Nothing];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                };
                                                                                            1# ->
                                                                                                case
                                                                                                    GHC.Event.IntTable.$wgrow
                                                                                                        dt_s7T2F
                                                                                                        ww1_s7T2z
                                                                                                        ipv5_s7T2T
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          GHC.Event.IntTable.$winsertWith
                                                                                                              w_s7T2w
                                                                                                              ww_s7T2x
                                                                                                              w1_s7T2y
                                                                                                              ww1_s7T2z
                                                                                                              GHC.Prim.void#
                                                                                                      of
                                                                                                      { Unit# ipv9_s7T3b [Occ=Once] ->
                                                                                                            case
                                                                                                                touch# [dt2_s7T2H
                                                                                                                        GHC.Prim.void#]
                                                                                                            of
                                                                                                            s'_s7T3c
                                                                                                            { (##) ->
                                                                                                                  Unit# [ipv9_s7T3b];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              let-no-escape {
                                                exit1_s7T3d [Occ=OnceL!T[4],
                                                             Dmd=<L,C(C1(C1(C1(U(U,U)))))>]
                                                  :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> a_s7SMZ
                                                     -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Base.Maybe a_s7SMZ #)
                                                [LclId[JoinId(4)],
                                                 Arity=4,
                                                 Str=<S,1*U><S,U><L,U><L,1*U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [w_s7T2w
                                                              ww_s7T2x
                                                              w1_s7T2y
                                                              dt_s7T2F
                                                              n#_s7T2I] \r [seen_s7T3e
                                                                            void_0E
                                                                            ds_s7T3g
                                                                            ds3_s7T3h]
                                                        case
                                                            poly_<>_r7SZ6 seen_s7T3e ds3_s7T3h
                                                        of
                                                        next_s7T3i
                                                        { __DEFAULT ->
                                                              case
                                                                  w_s7T2w w1_s7T2y ds_s7T3g
                                                              of
                                                              v'_s7T3j
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s7T3k [Occ=Once]
                                                                        :: GHC.Event.IntTable.Bucket
                                                                             a_s7SMZ
                                                                      [LclId] =
                                                                          CCCS GHC.Event.IntTable.Bucket! [ww_s7T2x
                                                                                                           v'_s7T3j
                                                                                                           next_s7T3i];
                                                                    } in 
                                                                      case
                                                                          writeArray# [dt_s7T2F
                                                                                       n#_s7T2I
                                                                                       sat_s7T3k
                                                                                       GHC.Prim.void#]
                                                                      of
                                                                      s1#_s7T3l
                                                                      { (##) ->
                                                                            let {
                                                                              sat_s7T3m [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     a_s7SMZ
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ds_s7T3g];
                                                                            } in  Unit# [sat_s7T3m];
                                                                      };
                                                              };
                                                        };
                                              } in 
                                                let-no-escape {
                                                  go_s7T3n [Occ=LoopBreakerT[3]]
                                                    :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Base.Maybe a_s7SMZ #)
                                                  [LclId[JoinId(3)],
                                                   Arity=3,
                                                   Str=<L,U><S,1*U><S,U>,
                                                   Unf=OtherCon []] =
                                                      sat-only [ww_s7T2x
                                                                exit_s7T2O
                                                                exit1_s7T3d
                                                                go_s7T3n] \r [seen_s7T3o
                                                                              bkt_s7T3p
                                                                              void_0E]
                                                          case bkt_s7T3p of {
                                                            GHC.Event.IntTable.Empty ->
                                                                exit_s7T2O
                                                                    seen_s7T3o GHC.Prim.void#;
                                                            GHC.Event.IntTable.Bucket dt3_s7T3s
                                                                                      ds_s7T3t [Occ=Once*]
                                                                                      ds3_s7T3u [Occ=Once*] ->
                                                                case ==# [dt3_s7T3s ww_s7T2x] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s7T3w [Occ=Once]
                                                                          :: GHC.Event.IntTable.Bucket
                                                                               a_s7SMZ
                                                                        [LclId] =
                                                                            CCCS GHC.Event.IntTable.Bucket! [dt3_s7T3s
                                                                                                             ds_s7T3t
                                                                                                             seen_s7T3o];
                                                                      } in 
                                                                        go_s7T3n
                                                                            sat_s7T3w
                                                                            ds3_s7T3u
                                                                            GHC.Prim.void#;
                                                                  1# ->
                                                                      exit1_s7T3d
                                                                          seen_s7T3o
                                                                          GHC.Prim.void#
                                                                          ds_s7T3t
                                                                          ds3_s7T3u;
                                                                };
                                                          };
                                                } in 
                                                  go_s7T3n
                                                      GHC.Event.IntTable.Empty
                                                      ipv3_s7T2N
                                                      GHC.Prim.void#;
                                      };
                                };
                          };
                    };
              };
        };
insertWith1_r7SZ8
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T3x w1_s7T3y w2_s7T3z w3_s7T3A void_0E]
        case w1_s7T3y of {
          GHC.Types.I# ww1_s7T3D [Occ=Once] ->
              case w3_s7T3A of {
                GHC.STRef.STRef ww3_s7T3F [Occ=Once] ->
                    $winsertWith1_r7SZ7
                        w_s7T3x ww1_s7T3D w2_s7T3z ww3_s7T3F GHC.Prim.void#;
              };
        };

insertWith2_r7SZ9
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_s7T3G w1_s7T3H w2_s7T3I w3_s7T3J void_0E]
        case w1_s7T3H of {
          GHC.Types.I# ww1_s7T3M [Occ=Once] ->
              case w3_s7T3J of {
                GHC.STRef.STRef ww3_s7T3O [Occ=Once] ->
                    GHC.Event.IntTable.$winsertWith
                        w_s7T3G ww1_s7T3M w2_s7T3I ww3_s7T3O GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.insertWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        insertWith2_r7SZ9 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wreset [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Base.Maybe a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7T3P w_s7T3Q ww1_s7T3R void_0E]
        case w_s7T3Q of {
          GHC.Base.Nothing ->
              case readMutVar# [ww1_s7T3R GHC.Prim.void#] of {
                Unit# ipv1_s7T3W [Occ=Once!] ->
                    case ipv1_s7T3W of {
                      GHC.Event.IntTable.IT dt_s7T3Y dt1_s7T3Z dt2_s7T40 [Occ=Once] ->
                          case sizeofMutableArray# [dt_s7T3Y] of sat_s7T42 {
                            __DEFAULT ->
                                case -# [sat_s7T42 1#] of sat_s7T43 {
                                  __DEFAULT ->
                                      case andI# [ww_s7T3P sat_s7T43] of n#_s7T41 [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case readArray# [dt_s7T3Y n#_s7T41 GHC.Prim.void#] of {
                                              Unit# ipv3_s7T46 [Occ=Once] ->
                                                  let {
                                                    $wgo_s7T47 [InlPrag=NOUSERINLINE[0],
                                                                Occ=LoopBreaker]
                                                      :: GHC.Event.IntTable.Bucket a_s7SNj
                                                         -> (# GHC.Types.Bool,
                                                               GHC.Base.Maybe a_s7SNj,
                                                               GHC.Event.IntTable.Bucket a_s7SNj #)
                                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                        sat-only [ww_s7T3P $wgo_s7T47] \r [w2_s7T48]
                                                            case w2_s7T48 of {
                                                              GHC.Event.IntTable.Empty ->
                                                                  (#,,#) [GHC.Types.False
                                                                          GHC.Base.Nothing
                                                                          GHC.Event.IntTable.Empty];
                                                              GHC.Event.IntTable.Bucket dt3_s7T4a
                                                                                        ds_s7T4b [Occ=Once*]
                                                                                        ds3_s7T4c [Occ=Once*] ->
                                                                  case ==# [dt3_s7T4a ww_s7T3P] of {
                                                                    __DEFAULT ->
                                                                        case
                                                                            $wgo_s7T47 ds3_s7T4c
                                                                        of
                                                                        { (#,,#) ww3_s7T4f [Occ=Once]
                                                                                 ww4_s7T4g [Occ=Once]
                                                                                 ww5_s7T4h [Occ=Once] ->
                                                                              let {
                                                                                sat_s7T4i [Occ=Once]
                                                                                  :: GHC.Event.IntTable.Bucket
                                                                                       a_s7SNj
                                                                                [LclId] =
                                                                                    CCCS GHC.Event.IntTable.Bucket! [dt3_s7T4a
                                                                                                                     ds_s7T4b
                                                                                                                     ww5_s7T4h];
                                                                              } in 
                                                                                (#,,#) [ww3_s7T4f
                                                                                        ww4_s7T4g
                                                                                        sat_s7T4i];
                                                                        };
                                                                    1# ->
                                                                        let {
                                                                          sat_s7T4j [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SNj
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7T4b];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7T4j
                                                                                  ds3_s7T4c];
                                                                  };
                                                            };
                                                  } in 
                                                    case $wgo_s7T47 ipv3_s7T46 of {
                                                      (#,,#) ww3_s7T4l [Occ=Once!]
                                                             ww4_s7T4m [Occ=Once!]
                                                             ww5_s7T4n [Occ=Once] ->
                                                          case ww4_s7T4m of {
                                                            GHC.Base.Nothing ->
                                                                Unit# [GHC.Tuple.()];
                                                            GHC.Base.Just _ [Occ=Dead] ->
                                                                case
                                                                    writeArray# [dt_s7T3Y
                                                                                 n#_s7T41
                                                                                 ww5_s7T4n
                                                                                 GHC.Prim.void#]
                                                                of
                                                                s1#_s7T4q
                                                                { (##) ->
                                                                      case ww3_s7T4l of {
                                                                        GHC.Types.False ->
                                                                            Unit# [GHC.Tuple.()];
                                                                        GHC.Types.True ->
                                                                            case
                                                                                readIntOffAddr# [dt1_s7T3Z
                                                                                                 0#
                                                                                                 GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv6_s7T4u [Occ=Once] ->
                                                                                  case
                                                                                      -# [ipv6_s7T4u
                                                                                          1#]
                                                                                  of
                                                                                  sat_s7T4v
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            writeIntOffAddr# [dt1_s7T3Z
                                                                                                              0#
                                                                                                              sat_s7T4v
                                                                                                              GHC.Prim.void#]
                                                                                        of
                                                                                        s2_s7T4w
                                                                                        { (##) ->
                                                                                              case
                                                                                                  touch# [dt2_s7T40
                                                                                                          GHC.Prim.void#]
                                                                                              of
                                                                                              s'_s7T4x
                                                                                              { (##) ->
                                                                                                    Unit# [GHC.Tuple.()];
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Base.Just v_s7T4y [Occ=Once] ->
              case
                  GHC.Event.IntTable.$winsertWith
                      GHC.Base.const ww_s7T3P v_s7T4y ww1_s7T3R GHC.Prim.void#
              of
              { Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Event.IntTable.reset1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T4C w1_s7T4D w2_s7T4E void_0E]
        case w_s7T4C of {
          GHC.Types.I# ww1_s7T4H [Occ=Once] ->
              case w2_s7T4E of {
                GHC.STRef.STRef ww3_s7T4J [Occ=Once] ->
                    GHC.Event.IntTable.$wreset
                        ww1_s7T4H w1_s7T4D ww3_s7T4J GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.reset
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.reset1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wlookup [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7T4K ww1_s7T4L void_0E]
        case readMutVar# [ww1_s7T4L GHC.Prim.void#] of {
          Unit# ipv1_s7T4P [Occ=Once!] ->
              case ipv1_s7T4P of {
                GHC.Event.IntTable.IT dt_s7T4R _ [Occ=Dead] _ [Occ=Dead] ->
                    case sizeofMutableArray# [dt_s7T4R] of sat_s7T4U {
                      __DEFAULT ->
                          case -# [sat_s7T4U 1#] of sat_s7T4V {
                            __DEFAULT ->
                                case andI# [ww_s7T4K sat_s7T4V] of sat_s7T4W {
                                  __DEFAULT ->
                                      case readArray# [dt_s7T4R sat_s7T4W GHC.Prim.void#] of {
                                        Unit# ipv3_s7T4Z [Occ=Once] ->
                                            let {
                                              go_s7T50 [Occ=LoopBreaker]
                                                :: forall a1.
                                                   GHC.Event.IntTable.Bucket a1 -> GHC.Base.Maybe a1
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [ww_s7T4K go_s7T50] \r [ds_s7T51]
                                                      case ds_s7T51 of {
                                                        GHC.Event.IntTable.Empty ->
                                                            GHC.Base.Nothing [];
                                                        GHC.Event.IntTable.Bucket dt3_s7T53 [Occ=Once]
                                                                                  ds3_s7T54 [Occ=Once]
                                                                                  ds4_s7T55 [Occ=Once] ->
                                                            case ==# [dt3_s7T53 ww_s7T4K] of {
                                                              __DEFAULT -> go_s7T50 ds4_s7T55;
                                                              1# -> GHC.Base.Just [ds3_s7T54];
                                                            };
                                                      };
                                            } in 
                                              case go_s7T50 ipv3_s7T4Z of vx_s7T57 {
                                                __DEFAULT -> Unit# [vx_s7T57];
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.lookup1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7T58 w1_s7T59 void_0E]
        case w_s7T58 of {
          GHC.Types.I# ww1_s7T5c [Occ=Once] ->
              case w1_s7T59 of {
                GHC.STRef.STRef ww3_s7T5e [Occ=Once] ->
                    GHC.Event.IntTable.$wlookup ww1_s7T5c ww3_s7T5e GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.lookup
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.lookup1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Event.IntTable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule4];

GHC.Event.IntTable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Event.IntTable"#;

GHC.Event.IntTable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule2];

GHC.Event.IntTable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Event.IntTable.$trModule3
                                     GHC.Event.IntTable.$trModule1];

$krep_r7SZa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r7SZb :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7SZa GHC.Types.[]];

$krep2_r7SZc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep1_r7SZb];

$krep3_r7SZd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

GHC.Event.IntTable.$tcBucket2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Bucket"#;

GHC.Event.IntTable.$tcBucket1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcBucket2];

GHC.Event.IntTable.$tcBucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17735724201551259799##
                                    1580619789810252778##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcBucket1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r7SZe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7SZd GHC.Types.[]];

GHC.Event.IntTable.$tc'Empty1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcBucket
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'Empty3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Empty"#;

GHC.Event.IntTable.$tc'Empty2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Empty3];

GHC.Event.IntTable.$tc'Empty :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14716594083905147916##
                                    6006296133869125928##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Empty2
                                    1#
                                    GHC.Event.IntTable.$tc'Empty1];

$krep5_r7SZf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Event.IntTable.$tc'Empty1
                                         GHC.Event.IntTable.$tc'Empty1];

$krep6_r7SZg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r7SZd $krep5_r7SZf];

GHC.Event.IntTable.$tc'Bucket1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r7SZa $krep6_r7SZg];

GHC.Event.IntTable.$tc'Bucket3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Bucket"#;

GHC.Event.IntTable.$tc'Bucket2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Bucket3];

GHC.Event.IntTable.$tc'Bucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13477734220520722226##
                                    15099239145624852322##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Bucket2
                                    1#
                                    GHC.Event.IntTable.$tc'Bucket1];

$krep7_r7SZh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Event.IntTable.$tc'Empty1 GHC.Types.[]];

$krep8_r7SZi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.Arr.$tcArr
                                              $krep7_r7SZh];

GHC.Event.IntTable.$tcIT2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IT"#;

GHC.Event.IntTable.$tcIT1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIT2];

GHC.Event.IntTable.$tcIT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1485413372890074222##
                                    7871673693356487434##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIT1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep9_r7SZj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIT
                                              $krep4_r7SZe];

$krep10_r7SZk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r7SZc $krep9_r7SZj];

GHC.Event.IntTable.$tc'IT1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7SZi $krep10_r7SZk];

GHC.Event.IntTable.$tc'IT3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IT"#;

GHC.Event.IntTable.$tc'IT2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IT3];

GHC.Event.IntTable.$tc'IT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2061931487051656996##
                                    1303251193055522557##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IT2
                                    1#
                                    GHC.Event.IntTable.$tc'IT1];

$krep11_r7SZl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r7SZj GHC.Types.[]];

$krep12_r7SZm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7SZl];

GHC.Event.IntTable.$tcIntTable2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntTable"#;

GHC.Event.IntTable.$tcIntTable1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIntTable2];

GHC.Event.IntTable.$tcIntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12646307913912198429##
                                    5258607314097228638##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIntTable1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_r7SZn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIntTable
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'IntTable1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7SZm $krep13_r7SZn];

GHC.Event.IntTable.$tc'IntTable3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntTable"#;

GHC.Event.IntTable.$tc'IntTable2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IntTable3];

GHC.Event.IntTable.$tc'IntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17952658267866828845##
                                    12036984593740445577##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IntTable2
                                    1#
                                    GHC.Event.IntTable.$tc'IntTable1];

GHC.Event.IntTable.Empty :: forall a. GHC.Event.IntTable.Bucket a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Event.IntTable.Empty! [];

GHC.Event.IntTable.Bucket
  :: forall a.
     GHC.Prim.Int#
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.Bucket [eta_B3 eta_B2 eta_B1];

GHC.Event.IntTable.IT
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Event.IntTable.IT a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.IT [eta_B3 eta_B2 eta_B1];


==================== Pre unarise: ====================
2018-03-16 16:03:01.521193258 UTC

GHC.Event.IntTable.$WBucket [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Int
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7U0e dt_s7U0f dt_s7U0g]
        case dt_s7U0e of {
          GHC.Types.I# dt_s7U0i [Occ=Once] ->
              GHC.Event.IntTable.Bucket [dt_s7U0i dt_s7U0f dt_s7U0g];
        };

GHC.Event.IntTable.$WIT [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
     -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
     -> GHC.Event.IntTable.IT a
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s7U0j dt_s7U0k]
        case dt_s7U0j of {
          GHC.Event.Arr.Arr dt_s7U0m [Occ=Once] ->
              case dt_s7U0k of {
                GHC.ForeignPtr.ForeignPtr dt_s7U0o [Occ=Once]
                                          dt_s7U0p [Occ=Once] ->
                    GHC.Event.IntTable.IT [dt_s7U0m dt_s7U0o dt_s7U0p];
              };
        };

lvl_r7SZ3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketNext"#;

GHC.Event.IntTable.bucketNext1
  :: forall a. GHC.Event.IntTable.Bucket a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl_r7SZ3;

GHC.Event.IntTable.bucketNext
  :: forall a.
     GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7U0q]
        case ds_s7U0q of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketNext1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    _ [Occ=Dead]
                                    ds2_s7U0u [Occ=Once] ->
              ds2_s7U0u;
        };

lvl1_r7SZ4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketValue"#;

GHC.Event.IntTable.bucketValue1 :: forall a. a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl1_r7SZ4;

GHC.Event.IntTable.bucketValue
  :: forall a. GHC.Event.IntTable.Bucket a -> a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7U0v]
        case ds_s7U0v of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketValue1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    ds1_s7U0y [Occ=Once]
                                    _ [Occ=Dead] ->
              ds1_s7U0y;
        };

lvl2_r7SZ5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketKey"#;

GHC.Event.IntTable.bucketKey1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl2_r7SZ5;

GHC.Event.IntTable.bucketKey
  :: forall a. GHC.Event.IntTable.Bucket a -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7U0A]
        case ds_s7U0A of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketKey1;
          GHC.Event.IntTable.Bucket dt_s7U0C [Occ=Once]
                                    _ [Occ=Dead]
                                    _ [Occ=Dead] ->
              GHC.Types.I# [dt_s7U0C];
        };

GHC.Event.IntTable.tabSize
  :: forall a.
     GHC.Event.IntTable.IT a -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7U0F]
        case ds_s7U0F of {
          GHC.Event.IntTable.IT _ [Occ=Dead]
                                dt1_s7U0I [Occ=Once]
                                dt2_s7U0J [Occ=Once] ->
              GHC.ForeignPtr.ForeignPtr [dt1_s7U0I dt2_s7U0J];
        };

GHC.Event.IntTable.tabArr
  :: forall a.
     GHC.Event.IntTable.IT a
     -> GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7U0K]
        case ds_s7U0K of {
          GHC.Event.IntTable.IT dt_s7U0M [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              GHC.Event.Arr.Arr [dt_s7U0M];
        };

GHC.Event.IntTable.$wnew [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7U0P w_s7U0Q]
        case newArray# [ww_s7U0P GHC.Event.IntTable.Empty w_s7U0Q] of {
          (#,#) ipv_s7U0S [Occ=Once] ipv1_s7U0T [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers ipv_s7U0S] of {
                (#,#) ipv2_s7U0V [Occ=Once] ipv3_s7U0W [Occ=OnceL] ->
                    case newAlignedPinnedByteArray# [8# 8# ipv2_s7U0V] of {
                      (#,#) ipv4_s7U0Y [Occ=Once] ipv5_s7U0Z ->
                          case byteArrayContents# [ipv5_s7U0Z] of ipv6_s7U10 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case writeIntOffAddr# [ipv6_s7U10 0# 0# ipv4_s7U0Y] of s2_s7U11 {
                                  __DEFAULT ->
                                      let {
                                        ipv7_s7U12 :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId, Unf=OtherCon []] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7U0Z ipv3_s7U0W];
                                      } in 
                                        case touch# [ipv7_s7U12 s2_s7U11] of s'_s7U13 {
                                          __DEFAULT ->
                                              let {
                                                sat_s7U14 [Occ=Once]
                                                  :: GHC.Event.IntTable.IT a_s7SLw
                                                [LclId] =
                                                    CCCS GHC.Event.IntTable.IT! [ipv1_s7U0T
                                                                                 ipv6_s7U10
                                                                                 ipv7_s7U12];
                                              } in 
                                                case newMutVar# [sat_s7U14 s'_s7U13] of {
                                                  (#,#) ipv8_s7U16 [Occ=Once]
                                                        ipv9_s7U17 [Occ=Once] ->
                                                      let {
                                                        sat_s7U18 [Occ=Once]
                                                          :: GHC.Event.IntTable.IntTable a_s7SLw
                                                        [LclId] =
                                                            CCCS GHC.STRef.STRef! [ipv9_s7U17];
                                                      } in  (#,#) [ipv8_s7U16 sat_s7U18];
                                                };
                                        };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.new1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U19 w1_s7U1a]
        case w_s7U19 of {
          GHC.Types.I# ww1_s7U1c [Occ=Once] ->
              GHC.Event.IntTable.$wnew ww1_s7U1c w1_s7U1a;
        };

GHC.Event.IntTable.new
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.Event.IntTable.IntTable a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Event.IntTable.new1 eta_B2 eta_B1;

GHC.Event.IntTable.$wupdateWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U1d ww_s7U1e ww1_s7U1f w1_s7U1g]
        case readMutVar# [ww1_s7U1f w1_s7U1g] of {
          (#,#) ipv_s7U1i [Occ=Once] ipv1_s7U1j [Occ=Once!] ->
              case ipv1_s7U1j of {
                GHC.Event.IntTable.IT dt_s7U1l dt1_s7U1m dt2_s7U1n [Occ=Once] ->
                    case sizeofMutableArray# [dt_s7U1l] of sat_s7U1p {
                      __DEFAULT ->
                          case -# [sat_s7U1p 1#] of sat_s7U1q {
                            __DEFAULT ->
                                case andI# [ww_s7U1e sat_s7U1q] of n#_s7U1o [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7U1l n#_s7U1o ipv_s7U1i] of {
                                        (#,#) ipv2_s7U1s [Occ=Once*] ipv3_s7U1t [Occ=Once] ->
                                            let {
                                              $wgo_s7U1u [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                                :: GHC.Event.IntTable.Bucket a_s7SLJ
                                                   -> (# GHC.Types.Bool, GHC.Base.Maybe a_s7SLJ,
                                                         GHC.Event.IntTable.Bucket a_s7SLJ #)
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [w_s7U1d
                                                            ww_s7U1e
                                                            $wgo_s7U1u] \r [w2_s7U1v]
                                                      case w2_s7U1v of {
                                                        GHC.Event.IntTable.Empty ->
                                                            (#,,#) [GHC.Types.False
                                                                    GHC.Base.Nothing
                                                                    GHC.Event.IntTable.Empty];
                                                        GHC.Event.IntTable.Bucket dt3_s7U1x
                                                                                  ds_s7U1y
                                                                                  ds3_s7U1z [Occ=Once*] ->
                                                            case ==# [dt3_s7U1x ww_s7U1e] of {
                                                              __DEFAULT ->
                                                                  case $wgo_s7U1u ds3_s7U1z of {
                                                                    (#,,#) ww3_s7U1C [Occ=Once]
                                                                           ww4_s7U1D [Occ=Once]
                                                                           ww5_s7U1E [Occ=Once] ->
                                                                        let {
                                                                          sat_s7U1F [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7U1x
                                                                                                               ds_s7U1y
                                                                                                               ww5_s7U1E];
                                                                        } in 
                                                                          (#,,#) [ww3_s7U1C
                                                                                  ww4_s7U1D
                                                                                  sat_s7U1F];
                                                                  };
                                                              1# ->
                                                                  case w_s7U1d ds_s7U1y of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_s7U1H [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7U1y];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7U1H
                                                                                  ds3_s7U1z];
                                                                    GHC.Base.Just val_s7U1I [Occ=Once] ->
                                                                        let {
                                                                          sat_s7U1K [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7U1x
                                                                                                               val_s7U1I
                                                                                                               ds3_s7U1z]; } in
                                                                        let {
                                                                          sat_s7U1J [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7U1y];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.False
                                                                                  sat_s7U1J
                                                                                  sat_s7U1K];
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case $wgo_s7U1u ipv3_s7U1t of {
                                                (#,,#) ww3_s7U1M [Occ=Once!]
                                                       ww4_s7U1N [Occ=Once!]
                                                       ww5_s7U1O [Occ=Once] ->
                                                    case ww4_s7U1N of wild1_s7U1P {
                                                      GHC.Base.Nothing ->
                                                          (#,#) [ipv2_s7U1s GHC.Base.Nothing];
                                                      GHC.Base.Just _ [Occ=Dead] ->
                                                          case
                                                              writeArray# [dt_s7U1l
                                                                           n#_s7U1o
                                                                           ww5_s7U1O
                                                                           ipv2_s7U1s]
                                                          of
                                                          s1#_s7U1R
                                                          { __DEFAULT ->
                                                                case ww3_s7U1M of {
                                                                  GHC.Types.False ->
                                                                      (#,#) [s1#_s7U1R wild1_s7U1P];
                                                                  GHC.Types.True ->
                                                                      case
                                                                          readIntOffAddr# [dt1_s7U1m
                                                                                           0#
                                                                                           s1#_s7U1R]
                                                                      of
                                                                      { (#,#) ipv5_s7U1U [Occ=Once]
                                                                              ipv6_s7U1V [Occ=Once] ->
                                                                            case
                                                                                -# [ipv6_s7U1V 1#]
                                                                            of
                                                                            sat_s7U1W
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      writeIntOffAddr# [dt1_s7U1m
                                                                                                        0#
                                                                                                        sat_s7U1W
                                                                                                        ipv5_s7U1U]
                                                                                  of
                                                                                  s2_s7U1X
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            touch# [dt2_s7U1n
                                                                                                    s2_s7U1X]
                                                                                        of
                                                                                        s'_s7U1Y
                                                                                        { __DEFAULT ->
                                                                                              (#,#) [s'_s7U1Y
                                                                                                     wild1_s7U1P];
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.delete3 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U1Z w1_s7U20 w2_s7U21 w3_s7U22]
        case w1_s7U20 of {
          GHC.Types.I# ww1_s7U24 [Occ=Once] ->
              case w2_s7U21 of {
                GHC.STRef.STRef ww3_s7U26 [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        w_s7U1Z ww1_s7U24 ww3_s7U26 w3_s7U22;
              };
        };

GHC.Event.IntTable.updateWith
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.delete3 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.delete2 :: forall a. a -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s7U27] GHC.Base.Nothing [];

GHC.Event.IntTable.delete1
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [k_s7U28 t_s7U29 eta_s7U2a]
        case k_s7U28 of {
          GHC.Types.I# ww1_s7U2c [Occ=Once] ->
              case t_s7U29 of {
                GHC.STRef.STRef ww3_s7U2e [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        GHC.Event.IntTable.delete2 ww1_s7U2c ww3_s7U2e eta_s7U2a;
              };
        };

GHC.Event.IntTable.delete
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.delete1 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$wgrow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7U2f ww1_s7U2g ww2_s7U2h w_s7U2i]
        case sizeofMutableArray# [ww_s7U2f] of sat_s7U2j {
          __DEFAULT ->
              case uncheckedIShiftL# [sat_s7U2j 1#] of sat_s7U2k {
                __DEFAULT ->
                    case newArray# [sat_s7U2k GHC.Event.IntTable.Empty w_s7U2i] of {
                      (#,#) ipv_s7U2m [Occ=Once] ipv1_s7U2n ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers ipv_s7U2m] of {
                            (#,#) ipv2_s7U2p [Occ=Once] ipv3_s7U2q [Occ=OnceL] ->
                                case newAlignedPinnedByteArray# [8# 8# ipv2_s7U2p] of {
                                  (#,#) ipv4_s7U2s [Occ=Once] ipv5_s7U2t ->
                                      case
                                          byteArrayContents# [ipv5_s7U2t]
                                      of
                                      ipv6_s7U2u [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                writeIntOffAddr# [ipv6_s7U2u 0# 0# ipv4_s7U2s]
                                            of
                                            s2_s7U2v
                                            { __DEFAULT ->
                                                  let {
                                                    ipv7_s7U2w :: GHC.ForeignPtr.ForeignPtrContents
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7U2t
                                                                                        ipv3_s7U2q];
                                                  } in 
                                                    case touch# [ipv7_s7U2w s2_s7U2v] of s'_s7U2x {
                                                      __DEFAULT ->
                                                          let-no-escape {
                                                            exit_s7U2y [Occ=OnceL!T[1],
                                                                        Dmd=<C(S),C(U(U,U))>]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       () #)
                                                            [LclId[JoinId(1)],
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ww1_s7U2g
                                                                          ww2_s7U2h
                                                                          ipv1_s7U2n
                                                                          ipv6_s7U2u
                                                                          ipv7_s7U2w] \r [w1_s7U2z]
                                                                    case
                                                                        writeIntOffAddr# [ipv6_s7U2u
                                                                                          0#
                                                                                          ww2_s7U2h
                                                                                          w1_s7U2z]
                                                                    of
                                                                    s1_s7U2A
                                                                    { __DEFAULT ->
                                                                          case
                                                                              touch# [ipv7_s7U2w
                                                                                      s1_s7U2A]
                                                                          of
                                                                          s'1_s7U2B
                                                                          { __DEFAULT ->
                                                                                let {
                                                                                  sat_s7U2C [Occ=Once]
                                                                                    :: GHC.Event.IntTable.IT
                                                                                         a_s7SMk
                                                                                  [LclId] =
                                                                                      CCCS GHC.Event.IntTable.IT! [ipv1_s7U2n
                                                                                                                   ipv6_s7U2u
                                                                                                                   ipv7_s7U2w];
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [ww1_s7U2g
                                                                                                    sat_s7U2C
                                                                                                    s'1_s7U2B]
                                                                                  of
                                                                                  s2#_s7U2D
                                                                                  { __DEFAULT ->
                                                                                        (#,#) [s2#_s7U2D
                                                                                               GHC.Tuple.()];
                                                                                  };
                                                                          };
                                                                    };
                                                          } in 
                                                            let-no-escape {
                                                              $wcopySlot_s7U2E [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreakerT[3]]
                                                                :: GHC.Prim.Int#
                                                                   -> GHC.Prim.Int#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId[JoinId(3)],
                                                               Arity=3,
                                                               Str=<S,U><L,U><S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [ww_s7U2f
                                                                            ww2_s7U2h
                                                                            ipv1_s7U2n
                                                                            exit_s7U2y
                                                                            $wcopySlot_s7U2E] \r [ww3_s7U2F
                                                                                                  ww4_s7U2G
                                                                                                  w1_s7U2H]
                                                                      case
                                                                          ==# [ww3_s7U2F ww2_s7U2h]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readArray# [ww_s7U2f
                                                                                            ww4_s7U2G
                                                                                            w1_s7U2H]
                                                                            of
                                                                            { (#,#) ipv8_s7U2K [Occ=Once]
                                                                                    ipv9_s7U2L [Occ=Once] ->
                                                                                  let-no-escape {
                                                                                    exit1_s7U2M [Occ=OnceL!T[2],
                                                                                                 Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                      :: GHC.Prim.Int#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               () #)
                                                                                    [LclId[JoinId(2)],
                                                                                     Arity=2,
                                                                                     Str=<S,U><S,U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [$wcopySlot_s7U2E
                                                                                                  ww4_s7U2G] \r [ww5_s7U2N
                                                                                                                 w2_s7U2O]
                                                                                            case
                                                                                                +# [ww4_s7U2G
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s7U2P
                                                                                            { __DEFAULT ->
                                                                                                  $wcopySlot_s7U2E
                                                                                                      ww5_s7U2N
                                                                                                      sat_s7U2P
                                                                                                      w2_s7U2O;
                                                                                            };
                                                                                  } in 
                                                                                    let-no-escape {
                                                                                      $wcopyBucket_s7U2Q [InlPrag=NOUSERINLINE[0],
                                                                                                          Occ=LoopBreakerT[3]]
                                                                                        :: GHC.Prim.Int#
                                                                                           -> GHC.Event.IntTable.Bucket
                                                                                                a_s7SMk
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 () #)
                                                                                      [LclId[JoinId(3)],
                                                                                       Arity=3,
                                                                                       Str=<S,U><S,1*U><S,U>,
                                                                                       Unf=OtherCon []] =
                                                                                          sat-only [ipv1_s7U2n
                                                                                                    exit1_s7U2M
                                                                                                    $wcopyBucket_s7U2Q] \r [ww5_s7U2R
                                                                                                                            w2_s7U2S
                                                                                                                            w3_s7U2T]
                                                                                              case
                                                                                                  w2_s7U2S
                                                                                              of
                                                                                              { GHC.Event.IntTable.Empty ->
                                                                                                    exit1_s7U2M
                                                                                                        ww5_s7U2R
                                                                                                        w3_s7U2T;
                                                                                                GHC.Event.IntTable.Bucket ipv10_s7U2V
                                                                                                                          ipv11_s7U2W [Occ=Once]
                                                                                                                          ipv12_s7U2X [Occ=Once] ->
                                                                                                    case
                                                                                                        sizeofMutableArray# [ipv1_s7U2n]
                                                                                                    of
                                                                                                    sat_s7U2Z
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              -# [sat_s7U2Z
                                                                                                                  1#]
                                                                                                          of
                                                                                                          sat_s7U30
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    andI# [ipv10_s7U2V
                                                                                                                           sat_s7U30]
                                                                                                                of
                                                                                                                idx_s7U2Y [Dmd=<S,U>]
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readArray# [ipv1_s7U2n
                                                                                                                                      idx_s7U2Y
                                                                                                                                      w3_s7U2T]
                                                                                                                      of
                                                                                                                      { (#,#) ipv13_s7U32 [Occ=Once]
                                                                                                                              ipv14_s7U33 [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_s7U34 [Occ=Once]
                                                                                                                                :: GHC.Event.IntTable.Bucket
                                                                                                                                     a_s7SMk
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Event.IntTable.Bucket! [ipv10_s7U2V
                                                                                                                                                                   ipv11_s7U2W
                                                                                                                                                                   ipv14_s7U33];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  writeArray# [ipv1_s7U2n
                                                                                                                                               idx_s7U2Y
                                                                                                                                               sat_s7U34
                                                                                                                                               ipv13_s7U32]
                                                                                                                              of
                                                                                                                              s1#_s7U35
                                                                                                                              { __DEFAULT ->
                                                                                                                                    case
                                                                                                                                        +# [ww5_s7U2R
                                                                                                                                            1#]
                                                                                                                                    of
                                                                                                                                    sat_s7U36
                                                                                                                                    { __DEFAULT ->
                                                                                                                                          $wcopyBucket_s7U2Q
                                                                                                                                              sat_s7U36
                                                                                                                                              ipv12_s7U2X
                                                                                                                                              s1#_s7U35;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      $wcopyBucket_s7U2Q
                                                                                          ww3_s7U2F
                                                                                          ipv9_s7U2L
                                                                                          ipv8_s7U2K;
                                                                            };
                                                                        1# -> exit_s7U2y w1_s7U2H;
                                                                      };
                                                            } in  $wcopySlot_s7U2E 0# 0# s'_s7U2x;
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

poly_<>_r7SZ6
  :: forall a.
     GHC.Event.IntTable.Bucket a
     -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s7U37 bs_s7U38]
        case ds_s7U37 of {
          GHC.Event.IntTable.Empty -> bs_s7U38;
          GHC.Event.IntTable.Bucket dt_s7U3a [Occ=Once]
                                    ds1_s7U3b [Occ=Once]
                                    ds2_s7U3c [Occ=Once] ->
              let {
                sat_s7U3d [Occ=Once] :: GHC.Event.IntTable.Bucket a_a7S4Y
                [LclId] =
                    [bs_s7U38 ds2_s7U3c] \u [] poly_<>_r7SZ6 ds2_s7U3c bs_s7U38;
              } in  GHC.Event.IntTable.Bucket [dt_s7U3a ds1_s7U3b sat_s7U3d];
        };

GHC.Event.IntTable.$winsertWith [InlPrag=INLINABLE[0],
                                 Occ=LoopBreaker]
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U3e ww_s7U3f w1_s7U3g ww1_s7U3h w2_s7U3i]
        let {
          sat_s7U3k [Occ=Once] :: GHC.Event.IntTable.IntTable a_X7SOt
          [LclId] =
              CCCS GHC.STRef.STRef! [ww1_s7U3h]; } in
        let {
          sat_s7U3j [Occ=Once] :: GHC.Types.Int
          [LclId] =
              CCCS GHC.Types.I#! [ww_s7U3f];
        } in 
          insertWith1_r7SZ8 w_s7U3e sat_s7U3j w1_s7U3g sat_s7U3k w2_s7U3i;
$winsertWith1_r7SZ7
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U3l ww_s7U3m w1_s7U3n ww1_s7U3o w2_s7U3p]
        case readMutVar# [ww1_s7U3o w2_s7U3p] of {
          (#,#) ipv_s7U3r [Occ=Once] ipv1_s7U3s [Occ=Once!] ->
              case ipv1_s7U3s of {
                GHC.Event.IntTable.IT dt_s7U3u dt1_s7U3v dt2_s7U3w [Occ=Once*] ->
                    case sizeofMutableArray# [dt_s7U3u] of sat_s7U3y {
                      __DEFAULT ->
                          case -# [sat_s7U3y 1#] of sat_s7U3z {
                            __DEFAULT ->
                                case andI# [ww_s7U3m sat_s7U3z] of n#_s7U3x [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7U3u n#_s7U3x ipv_s7U3r] of {
                                        (#,#) ipv2_s7U3B [Occ=Once] ipv3_s7U3C [Occ=Once] ->
                                            let-no-escape {
                                              exit_s7U3D [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                                :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe a_s7SMZ #)
                                              [LclId[JoinId(2)],
                                               Arity=2,
                                               Str=<L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [w_s7U3l
                                                            ww_s7U3m
                                                            w1_s7U3n
                                                            ww1_s7U3o
                                                            dt_s7U3u
                                                            dt1_s7U3v
                                                            dt2_s7U3w
                                                            n#_s7U3x] \r [seen_s7U3E eta_s7U3F]
                                                      case
                                                          readIntOffAddr# [dt1_s7U3v 0# eta_s7U3F]
                                                      of
                                                      { (#,#) ipv4_s7U3H [Occ=Once*] ipv5_s7U3I ->
                                                            case
                                                                sizeofMutableArray# [dt_s7U3u]
                                                            of
                                                            sat_s7U3L
                                                            { __DEFAULT ->
                                                                  case
                                                                      uncheckedIShiftRA# [sat_s7U3L
                                                                                          2#]
                                                                  of
                                                                  sat_s7U3M
                                                                  { __DEFAULT ->
                                                                        case
                                                                            sizeofMutableArray# [dt_s7U3u]
                                                                        of
                                                                        sat_s7U3K
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  -# [sat_s7U3K
                                                                                      sat_s7U3M]
                                                                              of
                                                                              sat_s7U3N
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        +# [ipv5_s7U3I
                                                                                            1#]
                                                                                    of
                                                                                    sat_s7U3J
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              >=# [sat_s7U3J
                                                                                                   sat_s7U3N]
                                                                                          of
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    w1_s7U3n
                                                                                                of
                                                                                                v_s7U3P
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        sat_s7U3Q [Occ=Once]
                                                                                                          :: GHC.Event.IntTable.Bucket
                                                                                                               a_s7SMZ
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Event.IntTable.Bucket! [ww_s7U3m
                                                                                                                                             v_s7U3P
                                                                                                                                             seen_s7U3E];
                                                                                                      } in 
                                                                                                        case
                                                                                                            writeArray# [dt_s7U3u
                                                                                                                         n#_s7U3x
                                                                                                                         sat_s7U3Q
                                                                                                                         ipv4_s7U3H]
                                                                                                        of
                                                                                                        s1#_s7U3R
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  +# [ipv5_s7U3I
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s7U3S
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        writeIntOffAddr# [dt1_s7U3v
                                                                                                                                          0#
                                                                                                                                          sat_s7U3S
                                                                                                                                          s1#_s7U3R]
                                                                                                                    of
                                                                                                                    s2_s7U3T
                                                                                                                    { __DEFAULT ->
                                                                                                                          case
                                                                                                                              touch# [dt2_s7U3w
                                                                                                                                      s2_s7U3T]
                                                                                                                          of
                                                                                                                          s'_s7U3U
                                                                                                                          { __DEFAULT ->
                                                                                                                                (#,#) [s'_s7U3U
                                                                                                                                       GHC.Base.Nothing];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                };
                                                                                            1# ->
                                                                                                case
                                                                                                    GHC.Event.IntTable.$wgrow
                                                                                                        dt_s7U3u
                                                                                                        ww1_s7U3o
                                                                                                        ipv5_s7U3I
                                                                                                        ipv4_s7U3H
                                                                                                of
                                                                                                { (#,#) ipv6_s7U3W [Occ=Once]
                                                                                                        _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          GHC.Event.IntTable.$winsertWith
                                                                                                              w_s7U3l
                                                                                                              ww_s7U3m
                                                                                                              w1_s7U3n
                                                                                                              ww1_s7U3o
                                                                                                              ipv6_s7U3W
                                                                                                      of
                                                                                                      { (#,#) ipv8_s7U3Z [Occ=Once]
                                                                                                              ipv9_s7U40 [Occ=Once] ->
                                                                                                            case
                                                                                                                touch# [dt2_s7U3w
                                                                                                                        ipv8_s7U3Z]
                                                                                                            of
                                                                                                            s'_s7U41
                                                                                                            { __DEFAULT ->
                                                                                                                  (#,#) [s'_s7U41
                                                                                                                         ipv9_s7U40];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              let-no-escape {
                                                exit1_s7U42 [Occ=OnceL!T[4],
                                                             Dmd=<L,C(C1(C1(C1(U(U,U)))))>]
                                                  :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> a_s7SMZ
                                                     -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Base.Maybe a_s7SMZ #)
                                                [LclId[JoinId(4)],
                                                 Arity=4,
                                                 Str=<S,1*U><S,U><L,U><L,1*U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [w_s7U3l
                                                              ww_s7U3m
                                                              w1_s7U3n
                                                              dt_s7U3u
                                                              n#_s7U3x] \r [seen_s7U43
                                                                            eta_s7U44
                                                                            ds_s7U45
                                                                            ds3_s7U46]
                                                        case
                                                            poly_<>_r7SZ6 seen_s7U43 ds3_s7U46
                                                        of
                                                        next_s7U47
                                                        { __DEFAULT ->
                                                              case
                                                                  w_s7U3l w1_s7U3n ds_s7U45
                                                              of
                                                              v'_s7U48
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s7U49 [Occ=Once]
                                                                        :: GHC.Event.IntTable.Bucket
                                                                             a_s7SMZ
                                                                      [LclId] =
                                                                          CCCS GHC.Event.IntTable.Bucket! [ww_s7U3m
                                                                                                           v'_s7U48
                                                                                                           next_s7U47];
                                                                    } in 
                                                                      case
                                                                          writeArray# [dt_s7U3u
                                                                                       n#_s7U3x
                                                                                       sat_s7U49
                                                                                       eta_s7U44]
                                                                      of
                                                                      s1#_s7U4a
                                                                      { __DEFAULT ->
                                                                            let {
                                                                              sat_s7U4b [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     a_s7SMZ
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ds_s7U45];
                                                                            } in 
                                                                              (#,#) [s1#_s7U4a
                                                                                     sat_s7U4b];
                                                                      };
                                                              };
                                                        };
                                              } in 
                                                let-no-escape {
                                                  go_s7U4c [Occ=LoopBreakerT[3]]
                                                    :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Base.Maybe a_s7SMZ #)
                                                  [LclId[JoinId(3)],
                                                   Arity=3,
                                                   Str=<L,U><S,1*U><S,U>,
                                                   Unf=OtherCon []] =
                                                      sat-only [ww_s7U3m
                                                                exit_s7U3D
                                                                exit1_s7U42
                                                                go_s7U4c] \r [seen_s7U4d
                                                                              bkt_s7U4e
                                                                              eta_s7U4f]
                                                          case bkt_s7U4e of {
                                                            GHC.Event.IntTable.Empty ->
                                                                exit_s7U3D seen_s7U4d eta_s7U4f;
                                                            GHC.Event.IntTable.Bucket dt3_s7U4h
                                                                                      ds_s7U4i [Occ=Once*]
                                                                                      ds3_s7U4j [Occ=Once*] ->
                                                                case ==# [dt3_s7U4h ww_s7U3m] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s7U4l [Occ=Once]
                                                                          :: GHC.Event.IntTable.Bucket
                                                                               a_s7SMZ
                                                                        [LclId] =
                                                                            CCCS GHC.Event.IntTable.Bucket! [dt3_s7U4h
                                                                                                             ds_s7U4i
                                                                                                             seen_s7U4d];
                                                                      } in 
                                                                        go_s7U4c
                                                                            sat_s7U4l
                                                                            ds3_s7U4j
                                                                            eta_s7U4f;
                                                                  1# ->
                                                                      exit1_s7U42
                                                                          seen_s7U4d
                                                                          eta_s7U4f
                                                                          ds_s7U4i
                                                                          ds3_s7U4j;
                                                                };
                                                          };
                                                } in 
                                                  go_s7U4c
                                                      GHC.Event.IntTable.Empty
                                                      ipv3_s7U3C
                                                      ipv2_s7U3B;
                                      };
                                };
                          };
                    };
              };
        };
insertWith1_r7SZ8
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U4m w1_s7U4n w2_s7U4o w3_s7U4p w4_s7U4q]
        case w1_s7U4n of {
          GHC.Types.I# ww1_s7U4s [Occ=Once] ->
              case w3_s7U4p of {
                GHC.STRef.STRef ww3_s7U4u [Occ=Once] ->
                    $winsertWith1_r7SZ7 w_s7U4m ww1_s7U4s w2_s7U4o ww3_s7U4u w4_s7U4q;
              };
        };

insertWith2_r7SZ9
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_s7U4v w1_s7U4w w2_s7U4x w3_s7U4y w4_s7U4z]
        case w1_s7U4w of {
          GHC.Types.I# ww1_s7U4B [Occ=Once] ->
              case w3_s7U4y of {
                GHC.STRef.STRef ww3_s7U4D [Occ=Once] ->
                    GHC.Event.IntTable.$winsertWith
                        w_s7U4v ww1_s7U4B w2_s7U4x ww3_s7U4D w4_s7U4z;
              };
        };

GHC.Event.IntTable.insertWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        insertWith2_r7SZ9 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$wreset [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Base.Maybe a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7U4E w_s7U4F ww1_s7U4G w1_s7U4H]
        case w_s7U4F of {
          GHC.Base.Nothing ->
              case readMutVar# [ww1_s7U4G w1_s7U4H] of {
                (#,#) ipv_s7U4K [Occ=Once] ipv1_s7U4L [Occ=Once!] ->
                    case ipv1_s7U4L of {
                      GHC.Event.IntTable.IT dt_s7U4N dt1_s7U4O dt2_s7U4P [Occ=Once] ->
                          case sizeofMutableArray# [dt_s7U4N] of sat_s7U4R {
                            __DEFAULT ->
                                case -# [sat_s7U4R 1#] of sat_s7U4S {
                                  __DEFAULT ->
                                      case andI# [ww_s7U4E sat_s7U4S] of n#_s7U4Q [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case readArray# [dt_s7U4N n#_s7U4Q ipv_s7U4K] of {
                                              (#,#) ipv2_s7U4U [Occ=Once*] ipv3_s7U4V [Occ=Once] ->
                                                  let {
                                                    $wgo_s7U4W [InlPrag=NOUSERINLINE[0],
                                                                Occ=LoopBreaker]
                                                      :: GHC.Event.IntTable.Bucket a_s7SNj
                                                         -> (# GHC.Types.Bool,
                                                               GHC.Base.Maybe a_s7SNj,
                                                               GHC.Event.IntTable.Bucket a_s7SNj #)
                                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                        sat-only [ww_s7U4E $wgo_s7U4W] \r [w2_s7U4X]
                                                            case w2_s7U4X of {
                                                              GHC.Event.IntTable.Empty ->
                                                                  (#,,#) [GHC.Types.False
                                                                          GHC.Base.Nothing
                                                                          GHC.Event.IntTable.Empty];
                                                              GHC.Event.IntTable.Bucket dt3_s7U4Z
                                                                                        ds_s7U50 [Occ=Once*]
                                                                                        ds3_s7U51 [Occ=Once*] ->
                                                                  case ==# [dt3_s7U4Z ww_s7U4E] of {
                                                                    __DEFAULT ->
                                                                        case
                                                                            $wgo_s7U4W ds3_s7U51
                                                                        of
                                                                        { (#,,#) ww3_s7U54 [Occ=Once]
                                                                                 ww4_s7U55 [Occ=Once]
                                                                                 ww5_s7U56 [Occ=Once] ->
                                                                              let {
                                                                                sat_s7U57 [Occ=Once]
                                                                                  :: GHC.Event.IntTable.Bucket
                                                                                       a_s7SNj
                                                                                [LclId] =
                                                                                    CCCS GHC.Event.IntTable.Bucket! [dt3_s7U4Z
                                                                                                                     ds_s7U50
                                                                                                                     ww5_s7U56];
                                                                              } in 
                                                                                (#,,#) [ww3_s7U54
                                                                                        ww4_s7U55
                                                                                        sat_s7U57];
                                                                        };
                                                                    1# ->
                                                                        let {
                                                                          sat_s7U58 [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SNj
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7U50];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7U58
                                                                                  ds3_s7U51];
                                                                  };
                                                            };
                                                  } in 
                                                    case $wgo_s7U4W ipv3_s7U4V of {
                                                      (#,,#) ww3_s7U5a [Occ=Once!]
                                                             ww4_s7U5b [Occ=Once!]
                                                             ww5_s7U5c [Occ=Once] ->
                                                          case ww4_s7U5b of {
                                                            GHC.Base.Nothing ->
                                                                (#,#) [ipv2_s7U4U GHC.Tuple.()];
                                                            GHC.Base.Just _ [Occ=Dead] ->
                                                                case
                                                                    writeArray# [dt_s7U4N
                                                                                 n#_s7U4Q
                                                                                 ww5_s7U5c
                                                                                 ipv2_s7U4U]
                                                                of
                                                                s1#_s7U5f
                                                                { __DEFAULT ->
                                                                      case ww3_s7U5a of {
                                                                        GHC.Types.False ->
                                                                            (#,#) [s1#_s7U5f
                                                                                   GHC.Tuple.()];
                                                                        GHC.Types.True ->
                                                                            case
                                                                                readIntOffAddr# [dt1_s7U4O
                                                                                                 0#
                                                                                                 s1#_s7U5f]
                                                                            of
                                                                            { (#,#) ipv5_s7U5i [Occ=Once]
                                                                                    ipv6_s7U5j [Occ=Once] ->
                                                                                  case
                                                                                      -# [ipv6_s7U5j
                                                                                          1#]
                                                                                  of
                                                                                  sat_s7U5k
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            writeIntOffAddr# [dt1_s7U4O
                                                                                                              0#
                                                                                                              sat_s7U5k
                                                                                                              ipv5_s7U5i]
                                                                                        of
                                                                                        s2_s7U5l
                                                                                        { __DEFAULT ->
                                                                                              case
                                                                                                  touch# [dt2_s7U4P
                                                                                                          s2_s7U5l]
                                                                                              of
                                                                                              s'_s7U5m
                                                                                              { __DEFAULT ->
                                                                                                    (#,#) [s'_s7U5m
                                                                                                           GHC.Tuple.()];
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Base.Just v_s7U5n [Occ=Once] ->
              case
                  GHC.Event.IntTable.$winsertWith
                      GHC.Base.const ww_s7U4E v_s7U5n ww1_s7U4G w1_s7U4H
              of
              { (#,#) ipv_s7U5p [Occ=Once] _ [Occ=Dead] ->
                    (#,#) [ipv_s7U5p GHC.Tuple.()];
              };
        };

GHC.Event.IntTable.reset1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U5r w1_s7U5s w2_s7U5t w3_s7U5u]
        case w_s7U5r of {
          GHC.Types.I# ww1_s7U5w [Occ=Once] ->
              case w2_s7U5t of {
                GHC.STRef.STRef ww3_s7U5y [Occ=Once] ->
                    GHC.Event.IntTable.$wreset ww1_s7U5w w1_s7U5s ww3_s7U5y w3_s7U5u;
              };
        };

GHC.Event.IntTable.reset
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.reset1 eta_B4 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$wlookup [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7U5z ww1_s7U5A w_s7U5B]
        case readMutVar# [ww1_s7U5A w_s7U5B] of {
          (#,#) ipv_s7U5D [Occ=Once] ipv1_s7U5E [Occ=Once!] ->
              case ipv1_s7U5E of {
                GHC.Event.IntTable.IT dt_s7U5G _ [Occ=Dead] _ [Occ=Dead] ->
                    case sizeofMutableArray# [dt_s7U5G] of sat_s7U5J {
                      __DEFAULT ->
                          case -# [sat_s7U5J 1#] of sat_s7U5K {
                            __DEFAULT ->
                                case andI# [ww_s7U5z sat_s7U5K] of sat_s7U5L {
                                  __DEFAULT ->
                                      case readArray# [dt_s7U5G sat_s7U5L ipv_s7U5D] of {
                                        (#,#) ipv2_s7U5N [Occ=Once] ipv3_s7U5O [Occ=Once] ->
                                            let {
                                              go_s7U5P [Occ=LoopBreaker]
                                                :: forall a1.
                                                   GHC.Event.IntTable.Bucket a1 -> GHC.Base.Maybe a1
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [ww_s7U5z go_s7U5P] \r [ds_s7U5Q]
                                                      case ds_s7U5Q of {
                                                        GHC.Event.IntTable.Empty ->
                                                            GHC.Base.Nothing [];
                                                        GHC.Event.IntTable.Bucket dt3_s7U5S [Occ=Once]
                                                                                  ds3_s7U5T [Occ=Once]
                                                                                  ds4_s7U5U [Occ=Once] ->
                                                            case ==# [dt3_s7U5S ww_s7U5z] of {
                                                              __DEFAULT -> go_s7U5P ds4_s7U5U;
                                                              1# -> GHC.Base.Just [ds3_s7U5T];
                                                            };
                                                      };
                                            } in 
                                              case go_s7U5P ipv3_s7U5O of vx_s7U5W {
                                                __DEFAULT -> (#,#) [ipv2_s7U5N vx_s7U5W];
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.lookup1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U5X w1_s7U5Y w2_s7U5Z]
        case w_s7U5X of {
          GHC.Types.I# ww1_s7U61 [Occ=Once] ->
              case w1_s7U5Y of {
                GHC.STRef.STRef ww3_s7U63 [Occ=Once] ->
                    GHC.Event.IntTable.$wlookup ww1_s7U61 ww3_s7U63 w2_s7U5Z;
              };
        };

GHC.Event.IntTable.lookup
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.lookup1 eta_B3 eta_B2 eta_B1;

GHC.Event.IntTable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Event.IntTable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule4];

GHC.Event.IntTable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Event.IntTable"#;

GHC.Event.IntTable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule2];

GHC.Event.IntTable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Event.IntTable.$trModule3
                                     GHC.Event.IntTable.$trModule1];

$krep_r7SZa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r7SZb :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7SZa GHC.Types.[]];

$krep2_r7SZc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep1_r7SZb];

$krep3_r7SZd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

GHC.Event.IntTable.$tcBucket2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Bucket"#;

GHC.Event.IntTable.$tcBucket1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcBucket2];

GHC.Event.IntTable.$tcBucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17735724201551259799##
                                    1580619789810252778##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcBucket1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r7SZe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7SZd GHC.Types.[]];

GHC.Event.IntTable.$tc'Empty1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcBucket
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'Empty3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Empty"#;

GHC.Event.IntTable.$tc'Empty2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Empty3];

GHC.Event.IntTable.$tc'Empty :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14716594083905147916##
                                    6006296133869125928##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Empty2
                                    1#
                                    GHC.Event.IntTable.$tc'Empty1];

$krep5_r7SZf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Event.IntTable.$tc'Empty1
                                         GHC.Event.IntTable.$tc'Empty1];

$krep6_r7SZg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r7SZd $krep5_r7SZf];

GHC.Event.IntTable.$tc'Bucket1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r7SZa $krep6_r7SZg];

GHC.Event.IntTable.$tc'Bucket3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Bucket"#;

GHC.Event.IntTable.$tc'Bucket2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Bucket3];

GHC.Event.IntTable.$tc'Bucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13477734220520722226##
                                    15099239145624852322##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Bucket2
                                    1#
                                    GHC.Event.IntTable.$tc'Bucket1];

$krep7_r7SZh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Event.IntTable.$tc'Empty1 GHC.Types.[]];

$krep8_r7SZi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.Arr.$tcArr
                                              $krep7_r7SZh];

GHC.Event.IntTable.$tcIT2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IT"#;

GHC.Event.IntTable.$tcIT1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIT2];

GHC.Event.IntTable.$tcIT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1485413372890074222##
                                    7871673693356487434##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIT1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep9_r7SZj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIT
                                              $krep4_r7SZe];

$krep10_r7SZk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r7SZc $krep9_r7SZj];

GHC.Event.IntTable.$tc'IT1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7SZi $krep10_r7SZk];

GHC.Event.IntTable.$tc'IT3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IT"#;

GHC.Event.IntTable.$tc'IT2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IT3];

GHC.Event.IntTable.$tc'IT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2061931487051656996##
                                    1303251193055522557##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IT2
                                    1#
                                    GHC.Event.IntTable.$tc'IT1];

$krep11_r7SZl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r7SZj GHC.Types.[]];

$krep12_r7SZm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7SZl];

GHC.Event.IntTable.$tcIntTable2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntTable"#;

GHC.Event.IntTable.$tcIntTable1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIntTable2];

GHC.Event.IntTable.$tcIntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12646307913912198429##
                                    5258607314097228638##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIntTable1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_r7SZn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIntTable
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'IntTable1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7SZm $krep13_r7SZn];

GHC.Event.IntTable.$tc'IntTable3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntTable"#;

GHC.Event.IntTable.$tc'IntTable2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IntTable3];

GHC.Event.IntTable.$tc'IntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17952658267866828845##
                                    12036984593740445577##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IntTable2
                                    1#
                                    GHC.Event.IntTable.$tc'IntTable1];

GHC.Event.IntTable.Empty :: forall a. GHC.Event.IntTable.Bucket a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Event.IntTable.Empty! [];

GHC.Event.IntTable.Bucket
  :: forall a.
     GHC.Prim.Int#
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.Bucket [eta_B3 eta_B2 eta_B1];

GHC.Event.IntTable.IT
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Event.IntTable.IT a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.IT [eta_B3 eta_B2 eta_B1];


==================== STG syntax: ====================
2018-03-16 16:03:01.558340664 UTC

GHC.Event.IntTable.$WBucket [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Types.Int
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataConWrapper],
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7U0e dt_s7U0f dt_s7U0g]
        case dt_s7U0e of {
          GHC.Types.I# dt_s7U0i [Occ=Once] ->
              GHC.Event.IntTable.Bucket [dt_s7U0i dt_s7U0f dt_s7U0g];
        };

GHC.Event.IntTable.$WIT [InlPrag=INLINE[2]]
  :: forall a.
     GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
     -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
     -> GHC.Event.IntTable.IT a
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,U>m,
 Unf=OtherCon []] =
    [] \r [dt_s7U0j dt_s7U0k]
        case dt_s7U0j of {
          GHC.Event.Arr.Arr dt_s7U0m [Occ=Once] ->
              case dt_s7U0k of {
                GHC.ForeignPtr.ForeignPtr dt_s7U0o [Occ=Once]
                                          dt_s7U0p [Occ=Once] ->
                    GHC.Event.IntTable.IT [dt_s7U0m dt_s7U0o dt_s7U0p];
              };
        };

lvl_r7SZ3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketNext"#;

GHC.Event.IntTable.bucketNext1
  :: forall a. GHC.Event.IntTable.Bucket a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl_r7SZ3;

GHC.Event.IntTable.bucketNext
  :: forall a.
     GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7U0q]
        case ds_s7U0q of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketNext1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    _ [Occ=Dead]
                                    ds2_s7U0u [Occ=Once] ->
              ds2_s7U0u;
        };

lvl1_r7SZ4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketValue"#;

GHC.Event.IntTable.bucketValue1 :: forall a. a
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl1_r7SZ4;

GHC.Event.IntTable.bucketValue
  :: forall a. GHC.Event.IntTable.Bucket a -> a
[GblId[[RecSel]], Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7U0v]
        case ds_s7U0v of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketValue1;
          GHC.Event.IntTable.Bucket _ [Occ=Dead]
                                    ds1_s7U0y [Occ=Once]
                                    _ [Occ=Dead] ->
              ds1_s7U0y;
        };

lvl2_r7SZ5 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "bucketKey"#;

GHC.Event.IntTable.bucketKey1 :: GHC.Types.Int
[GblId, Str=x] =
    [] \u [] Control.Exception.Base.recSelError lvl2_r7SZ5;

GHC.Event.IntTable.bucketKey
  :: forall a. GHC.Event.IntTable.Bucket a -> GHC.Types.Int
[GblId[[RecSel]], Arity=1, Str=<S,1*U>m, Unf=OtherCon []] =
    [] \r [ds_s7U0A]
        case ds_s7U0A of {
          GHC.Event.IntTable.Empty -> GHC.Event.IntTable.bucketKey1;
          GHC.Event.IntTable.Bucket dt_s7U0C [Occ=Once]
                                    _ [Occ=Dead]
                                    _ [Occ=Dead] ->
              GHC.Types.I# [dt_s7U0C];
        };

GHC.Event.IntTable.tabSize
  :: forall a.
     GHC.Event.IntTable.IT a -> GHC.ForeignPtr.ForeignPtr GHC.Types.Int
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(LSL),1*U(A,U,U)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7U0F]
        case ds_s7U0F of {
          GHC.Event.IntTable.IT _ [Occ=Dead]
                                dt1_s7U0I [Occ=Once]
                                dt2_s7U0J [Occ=Once] ->
              GHC.ForeignPtr.ForeignPtr [dt1_s7U0I dt2_s7U0J];
        };

GHC.Event.IntTable.tabArr
  :: forall a.
     GHC.Event.IntTable.IT a
     -> GHC.Event.Arr.Arr (GHC.Event.IntTable.Bucket a)
[GblId[[RecSel]],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S(SLL),1*U(U,A,A)>m,
 Unf=OtherCon []] =
    [] \r [ds_s7U0K]
        case ds_s7U0K of {
          GHC.Event.IntTable.IT dt_s7U0M [Occ=Once]
                                _ [Occ=Dead]
                                _ [Occ=Dead] ->
              GHC.Event.Arr.Arr [dt_s7U0M];
        };

GHC.Event.IntTable.$wnew [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ww_s7U0P void_0E]
        case
            newArray# [ww_s7U0P GHC.Event.IntTable.Empty GHC.Prim.void#]
        of
        { Unit# ipv1_s7U0T [Occ=Once] ->
              case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                Unit# ipv3_s7U0W [Occ=OnceL] ->
                    case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                      Unit# ipv5_s7U0Z ->
                          case byteArrayContents# [ipv5_s7U0Z] of ipv6_s7U10 [Dmd=<S,U>] {
                            __DEFAULT ->
                                case
                                    writeIntOffAddr# [ipv6_s7U10 0# 0# GHC.Prim.void#]
                                of
                                s2_s7U11
                                { (##) ->
                                      let {
                                        ipv7_s7U12 :: GHC.ForeignPtr.ForeignPtrContents
                                        [LclId, Unf=OtherCon []] =
                                            CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7U0Z ipv3_s7U0W];
                                      } in 
                                        case touch# [ipv7_s7U12 GHC.Prim.void#] of s'_s7U13 {
                                          (##) ->
                                              let {
                                                sat_s7U14 [Occ=Once]
                                                  :: GHC.Event.IntTable.IT a_s7SLw
                                                [LclId] =
                                                    CCCS GHC.Event.IntTable.IT! [ipv1_s7U0T
                                                                                 ipv6_s7U10
                                                                                 ipv7_s7U12];
                                              } in 
                                                case newMutVar# [sat_s7U14 GHC.Prim.void#] of {
                                                  Unit# ipv9_s7U17 [Occ=Once] ->
                                                      let {
                                                        sat_s7U18 [Occ=Once]
                                                          :: GHC.Event.IntTable.IntTable a_s7SLw
                                                        [LclId] =
                                                            CCCS GHC.STRef.STRef! [ipv9_s7U17];
                                                      } in  Unit# [sat_s7U18];
                                                };
                                        };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.new1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
           GHC.Event.IntTable.IntTable a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U19 void_0E]
        case w_s7U19 of {
          GHC.Types.I# ww1_s7U1c [Occ=Once] ->
              GHC.Event.IntTable.$wnew ww1_s7U1c GHC.Prim.void#;
        };

GHC.Event.IntTable.new
  :: forall a.
     GHC.Types.Int -> GHC.Types.IO (GHC.Event.IntTable.IntTable a)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        GHC.Event.IntTable.new1 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wupdateWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U1d ww_s7U1e ww1_s7U1f void_0E]
        case readMutVar# [ww1_s7U1f GHC.Prim.void#] of {
          Unit# ipv1_s7U1j [Occ=Once!] ->
              case ipv1_s7U1j of {
                GHC.Event.IntTable.IT dt_s7U1l dt1_s7U1m dt2_s7U1n [Occ=Once] ->
                    case sizeofMutableArray# [dt_s7U1l] of sat_s7U1p {
                      __DEFAULT ->
                          case -# [sat_s7U1p 1#] of sat_s7U1q {
                            __DEFAULT ->
                                case andI# [ww_s7U1e sat_s7U1q] of n#_s7U1o [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7U1l n#_s7U1o GHC.Prim.void#] of {
                                        Unit# ipv3_s7U1t [Occ=Once] ->
                                            let {
                                              $wgo_s7U1u [InlPrag=NOUSERINLINE[0], Occ=LoopBreaker]
                                                :: GHC.Event.IntTable.Bucket a_s7SLJ
                                                   -> (# GHC.Types.Bool, GHC.Base.Maybe a_s7SLJ,
                                                         GHC.Event.IntTable.Bucket a_s7SLJ #)
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [w_s7U1d
                                                            ww_s7U1e
                                                            $wgo_s7U1u] \r [w2_s7U1v]
                                                      case w2_s7U1v of {
                                                        GHC.Event.IntTable.Empty ->
                                                            (#,,#) [GHC.Types.False
                                                                    GHC.Base.Nothing
                                                                    GHC.Event.IntTable.Empty];
                                                        GHC.Event.IntTable.Bucket dt3_s7U1x
                                                                                  ds_s7U1y
                                                                                  ds3_s7U1z [Occ=Once*] ->
                                                            case ==# [dt3_s7U1x ww_s7U1e] of {
                                                              __DEFAULT ->
                                                                  case $wgo_s7U1u ds3_s7U1z of {
                                                                    (#,,#) ww3_s7U1C [Occ=Once]
                                                                           ww4_s7U1D [Occ=Once]
                                                                           ww5_s7U1E [Occ=Once] ->
                                                                        let {
                                                                          sat_s7U1F [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7U1x
                                                                                                               ds_s7U1y
                                                                                                               ww5_s7U1E];
                                                                        } in 
                                                                          (#,,#) [ww3_s7U1C
                                                                                  ww4_s7U1D
                                                                                  sat_s7U1F];
                                                                  };
                                                              1# ->
                                                                  case w_s7U1d ds_s7U1y of {
                                                                    GHC.Base.Nothing ->
                                                                        let {
                                                                          sat_s7U1H [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7U1y];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7U1H
                                                                                  ds3_s7U1z];
                                                                    GHC.Base.Just val_s7U1I [Occ=Once] ->
                                                                        let {
                                                                          sat_s7U1K [Occ=Once]
                                                                            :: GHC.Event.IntTable.Bucket
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Event.IntTable.Bucket! [dt3_s7U1x
                                                                                                               val_s7U1I
                                                                                                               ds3_s7U1z]; } in
                                                                        let {
                                                                          sat_s7U1J [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SLJ
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7U1y];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.False
                                                                                  sat_s7U1J
                                                                                  sat_s7U1K];
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              case $wgo_s7U1u ipv3_s7U1t of {
                                                (#,,#) ww3_s7U1M [Occ=Once!]
                                                       ww4_s7U1N [Occ=Once!]
                                                       ww5_s7U1O [Occ=Once] ->
                                                    case ww4_s7U1N of wild1_s7U1P {
                                                      GHC.Base.Nothing -> Unit# [GHC.Base.Nothing];
                                                      GHC.Base.Just _ [Occ=Dead] ->
                                                          case
                                                              writeArray# [dt_s7U1l
                                                                           n#_s7U1o
                                                                           ww5_s7U1O
                                                                           GHC.Prim.void#]
                                                          of
                                                          s1#_s7U1R
                                                          { (##) ->
                                                                case ww3_s7U1M of {
                                                                  GHC.Types.False ->
                                                                      Unit# [wild1_s7U1P];
                                                                  GHC.Types.True ->
                                                                      case
                                                                          readIntOffAddr# [dt1_s7U1m
                                                                                           0#
                                                                                           GHC.Prim.void#]
                                                                      of
                                                                      { Unit# ipv6_s7U1V [Occ=Once] ->
                                                                            case
                                                                                -# [ipv6_s7U1V 1#]
                                                                            of
                                                                            sat_s7U1W
                                                                            { __DEFAULT ->
                                                                                  case
                                                                                      writeIntOffAddr# [dt1_s7U1m
                                                                                                        0#
                                                                                                        sat_s7U1W
                                                                                                        GHC.Prim.void#]
                                                                                  of
                                                                                  s2_s7U1X
                                                                                  { (##) ->
                                                                                        case
                                                                                            touch# [dt2_s7U1n
                                                                                                    GHC.Prim.void#]
                                                                                        of
                                                                                        s'_s7U1Y
                                                                                        { (##) ->
                                                                                              Unit# [wild1_s7U1P];
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.delete3 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U1Z w1_s7U20 w2_s7U21 void_0E]
        case w1_s7U20 of {
          GHC.Types.I# ww1_s7U24 [Occ=Once] ->
              case w2_s7U21 of {
                GHC.STRef.STRef ww3_s7U26 [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        w_s7U1Z ww1_s7U24 ww3_s7U26 GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.updateWith
  :: forall a.
     (a -> GHC.Base.Maybe a)
     -> GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,C(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.delete3 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.delete2 :: forall a. a -> GHC.Base.Maybe a
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,A>, Unf=OtherCon []] =
    [] \r [ds_s7U27] GHC.Base.Nothing [];

GHC.Event.IntTable.delete1
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [k_s7U28 t_s7U29 void_0E]
        case k_s7U28 of {
          GHC.Types.I# ww1_s7U2c [Occ=Once] ->
              case t_s7U29 of {
                GHC.STRef.STRef ww3_s7U2e [Occ=Once] ->
                    GHC.Event.IntTable.$wupdateWith
                        GHC.Event.IntTable.delete2 ww1_s7U2c ww3_s7U2e GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.delete
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.delete1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wgrow [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.Int#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7U2f ww1_s7U2g ww2_s7U2h void_0E]
        case sizeofMutableArray# [ww_s7U2f] of sat_s7U2j {
          __DEFAULT ->
              case uncheckedIShiftL# [sat_s7U2j 1#] of sat_s7U2k {
                __DEFAULT ->
                    case
                        newArray# [sat_s7U2k GHC.Event.IntTable.Empty GHC.Prim.void#]
                    of
                    { Unit# ipv1_s7U2n ->
                          case newMutVar# [GHC.ForeignPtr.NoFinalizers GHC.Prim.void#] of {
                            Unit# ipv3_s7U2q [Occ=OnceL] ->
                                case newAlignedPinnedByteArray# [8# 8# GHC.Prim.void#] of {
                                  Unit# ipv5_s7U2t ->
                                      case
                                          byteArrayContents# [ipv5_s7U2t]
                                      of
                                      ipv6_s7U2u [Dmd=<S,U>]
                                      { __DEFAULT ->
                                            case
                                                writeIntOffAddr# [ipv6_s7U2u 0# 0# GHC.Prim.void#]
                                            of
                                            s2_s7U2v
                                            { (##) ->
                                                  let {
                                                    ipv7_s7U2w :: GHC.ForeignPtr.ForeignPtrContents
                                                    [LclId, Unf=OtherCon []] =
                                                        CCCS GHC.ForeignPtr.MallocPtr! [ipv5_s7U2t
                                                                                        ipv3_s7U2q];
                                                  } in 
                                                    case
                                                        touch# [ipv7_s7U2w GHC.Prim.void#]
                                                    of
                                                    s'_s7U2x
                                                    { (##) ->
                                                          let-no-escape {
                                                            exit_s7U2y [Occ=OnceL!T[1],
                                                                        Dmd=<C(S),C(U(U,U))>]
                                                              :: GHC.Prim.State# GHC.Prim.RealWorld
                                                                 -> (# GHC.Prim.State#
                                                                         GHC.Prim.RealWorld,
                                                                       () #)
                                                            [LclId[JoinId(1)],
                                                             Arity=1,
                                                             Str=<S,U>,
                                                             Unf=OtherCon []] =
                                                                sat-only [ww1_s7U2g
                                                                          ww2_s7U2h
                                                                          ipv1_s7U2n
                                                                          ipv6_s7U2u
                                                                          ipv7_s7U2w] \r [void_0E]
                                                                    case
                                                                        writeIntOffAddr# [ipv6_s7U2u
                                                                                          0#
                                                                                          ww2_s7U2h
                                                                                          GHC.Prim.void#]
                                                                    of
                                                                    s1_s7U2A
                                                                    { (##) ->
                                                                          case
                                                                              touch# [ipv7_s7U2w
                                                                                      GHC.Prim.void#]
                                                                          of
                                                                          s'1_s7U2B
                                                                          { (##) ->
                                                                                let {
                                                                                  sat_s7U2C [Occ=Once]
                                                                                    :: GHC.Event.IntTable.IT
                                                                                         a_s7SMk
                                                                                  [LclId] =
                                                                                      CCCS GHC.Event.IntTable.IT! [ipv1_s7U2n
                                                                                                                   ipv6_s7U2u
                                                                                                                   ipv7_s7U2w];
                                                                                } in 
                                                                                  case
                                                                                      writeMutVar# [ww1_s7U2g
                                                                                                    sat_s7U2C
                                                                                                    GHC.Prim.void#]
                                                                                  of
                                                                                  s2#_s7U2D
                                                                                  { (##) ->
                                                                                        Unit# [GHC.Tuple.()];
                                                                                  };
                                                                          };
                                                                    };
                                                          } in 
                                                            let-no-escape {
                                                              $wcopySlot_s7U2E [InlPrag=NOUSERINLINE[0],
                                                                                Occ=LoopBreakerT[3]]
                                                                :: GHC.Prim.Int#
                                                                   -> GHC.Prim.Int#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         () #)
                                                              [LclId[JoinId(3)],
                                                               Arity=3,
                                                               Str=<S,U><L,U><S,U>,
                                                               Unf=OtherCon []] =
                                                                  sat-only [ww_s7U2f
                                                                            ww2_s7U2h
                                                                            ipv1_s7U2n
                                                                            exit_s7U2y
                                                                            $wcopySlot_s7U2E] \r [ww3_s7U2F
                                                                                                  ww4_s7U2G
                                                                                                  void_0E]
                                                                      case
                                                                          ==# [ww3_s7U2F ww2_s7U2h]
                                                                      of
                                                                      { __DEFAULT ->
                                                                            case
                                                                                readArray# [ww_s7U2f
                                                                                            ww4_s7U2G
                                                                                            GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv9_s7U2L [Occ=Once] ->
                                                                                  let-no-escape {
                                                                                    exit1_s7U2M [Occ=OnceL!T[2],
                                                                                                 Dmd=<C(C(S)),C(C1(U(U,U)))>]
                                                                                      :: GHC.Prim.Int#
                                                                                         -> GHC.Prim.State#
                                                                                              GHC.Prim.RealWorld
                                                                                         -> (# GHC.Prim.State#
                                                                                                 GHC.Prim.RealWorld,
                                                                                               () #)
                                                                                    [LclId[JoinId(2)],
                                                                                     Arity=2,
                                                                                     Str=<S,U><S,U>,
                                                                                     Unf=OtherCon []] =
                                                                                        sat-only [$wcopySlot_s7U2E
                                                                                                  ww4_s7U2G] \r [ww5_s7U2N
                                                                                                                 void_0E]
                                                                                            case
                                                                                                +# [ww4_s7U2G
                                                                                                    1#]
                                                                                            of
                                                                                            sat_s7U2P
                                                                                            { __DEFAULT ->
                                                                                                  $wcopySlot_s7U2E
                                                                                                      ww5_s7U2N
                                                                                                      sat_s7U2P
                                                                                                      GHC.Prim.void#;
                                                                                            };
                                                                                  } in 
                                                                                    let-no-escape {
                                                                                      $wcopyBucket_s7U2Q [InlPrag=NOUSERINLINE[0],
                                                                                                          Occ=LoopBreakerT[3]]
                                                                                        :: GHC.Prim.Int#
                                                                                           -> GHC.Event.IntTable.Bucket
                                                                                                a_s7SMk
                                                                                           -> GHC.Prim.State#
                                                                                                GHC.Prim.RealWorld
                                                                                           -> (# GHC.Prim.State#
                                                                                                   GHC.Prim.RealWorld,
                                                                                                 () #)
                                                                                      [LclId[JoinId(3)],
                                                                                       Arity=3,
                                                                                       Str=<S,U><S,1*U><S,U>,
                                                                                       Unf=OtherCon []] =
                                                                                          sat-only [ipv1_s7U2n
                                                                                                    exit1_s7U2M
                                                                                                    $wcopyBucket_s7U2Q] \r [ww5_s7U2R
                                                                                                                            w2_s7U2S
                                                                                                                            void_0E]
                                                                                              case
                                                                                                  w2_s7U2S
                                                                                              of
                                                                                              { GHC.Event.IntTable.Empty ->
                                                                                                    exit1_s7U2M
                                                                                                        ww5_s7U2R
                                                                                                        GHC.Prim.void#;
                                                                                                GHC.Event.IntTable.Bucket ipv10_s7U2V
                                                                                                                          ipv11_s7U2W [Occ=Once]
                                                                                                                          ipv12_s7U2X [Occ=Once] ->
                                                                                                    case
                                                                                                        sizeofMutableArray# [ipv1_s7U2n]
                                                                                                    of
                                                                                                    sat_s7U2Z
                                                                                                    { __DEFAULT ->
                                                                                                          case
                                                                                                              -# [sat_s7U2Z
                                                                                                                  1#]
                                                                                                          of
                                                                                                          sat_s7U30
                                                                                                          { __DEFAULT ->
                                                                                                                case
                                                                                                                    andI# [ipv10_s7U2V
                                                                                                                           sat_s7U30]
                                                                                                                of
                                                                                                                idx_s7U2Y [Dmd=<S,U>]
                                                                                                                { __DEFAULT ->
                                                                                                                      case
                                                                                                                          readArray# [ipv1_s7U2n
                                                                                                                                      idx_s7U2Y
                                                                                                                                      GHC.Prim.void#]
                                                                                                                      of
                                                                                                                      { Unit# ipv14_s7U33 [Occ=Once] ->
                                                                                                                            let {
                                                                                                                              sat_s7U34 [Occ=Once]
                                                                                                                                :: GHC.Event.IntTable.Bucket
                                                                                                                                     a_s7SMk
                                                                                                                              [LclId] =
                                                                                                                                  CCCS GHC.Event.IntTable.Bucket! [ipv10_s7U2V
                                                                                                                                                                   ipv11_s7U2W
                                                                                                                                                                   ipv14_s7U33];
                                                                                                                            } in 
                                                                                                                              case
                                                                                                                                  writeArray# [ipv1_s7U2n
                                                                                                                                               idx_s7U2Y
                                                                                                                                               sat_s7U34
                                                                                                                                               GHC.Prim.void#]
                                                                                                                              of
                                                                                                                              s1#_s7U35
                                                                                                                              { (##) ->
                                                                                                                                    case
                                                                                                                                        +# [ww5_s7U2R
                                                                                                                                            1#]
                                                                                                                                    of
                                                                                                                                    sat_s7U36
                                                                                                                                    { __DEFAULT ->
                                                                                                                                          $wcopyBucket_s7U2Q
                                                                                                                                              sat_s7U36
                                                                                                                                              ipv12_s7U2X
                                                                                                                                              GHC.Prim.void#;
                                                                                                                                    };
                                                                                                                              };
                                                                                                                      };
                                                                                                                };
                                                                                                          };
                                                                                                    };
                                                                                              };
                                                                                    } in 
                                                                                      $wcopyBucket_s7U2Q
                                                                                          ww3_s7U2F
                                                                                          ipv9_s7U2L
                                                                                          GHC.Prim.void#;
                                                                            };
                                                                        1# ->
                                                                            exit_s7U2y
                                                                                GHC.Prim.void#;
                                                                      };
                                                            } in 
                                                              $wcopySlot_s7U2E 0# 0# GHC.Prim.void#;
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

poly_<>_r7SZ6
  :: forall a.
     GHC.Event.IntTable.Bucket a
     -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,1*U>,
 Unf=OtherCon []] =
    sat-only [] \r [ds_s7U37 bs_s7U38]
        case ds_s7U37 of {
          GHC.Event.IntTable.Empty -> bs_s7U38;
          GHC.Event.IntTable.Bucket dt_s7U3a [Occ=Once]
                                    ds1_s7U3b [Occ=Once]
                                    ds2_s7U3c [Occ=Once] ->
              let {
                sat_s7U3d [Occ=Once] :: GHC.Event.IntTable.Bucket a_a7S4Y
                [LclId] =
                    [bs_s7U38 ds2_s7U3c] \u [] poly_<>_r7SZ6 ds2_s7U3c bs_s7U38;
              } in  GHC.Event.IntTable.Bucket [dt_s7U3a ds1_s7U3b sat_s7U3d];
        };

GHC.Event.IntTable.$winsertWith [InlPrag=INLINABLE[0],
                                 Occ=LoopBreaker]
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U3e ww_s7U3f w1_s7U3g ww1_s7U3h void_0E]
        let {
          sat_s7U3k [Occ=Once] :: GHC.Event.IntTable.IntTable a_X7SOt
          [LclId] =
              CCCS GHC.STRef.STRef! [ww1_s7U3h]; } in
        let {
          sat_s7U3j [Occ=Once] :: GHC.Types.Int
          [LclId] =
              CCCS GHC.Types.I#! [ww_s7U3f];
        } in 
          insertWith1_r7SZ8
              w_s7U3e sat_s7U3j w1_s7U3g sat_s7U3k GHC.Prim.void#;
$winsertWith1_r7SZ7
  :: forall a.
     (a -> a -> a)
     -> GHC.Prim.Int#
     -> a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S,U><L,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U3l ww_s7U3m w1_s7U3n ww1_s7U3o void_0E]
        case readMutVar# [ww1_s7U3o GHC.Prim.void#] of {
          Unit# ipv1_s7U3s [Occ=Once!] ->
              case ipv1_s7U3s of {
                GHC.Event.IntTable.IT dt_s7U3u dt1_s7U3v dt2_s7U3w [Occ=Once*] ->
                    case sizeofMutableArray# [dt_s7U3u] of sat_s7U3y {
                      __DEFAULT ->
                          case -# [sat_s7U3y 1#] of sat_s7U3z {
                            __DEFAULT ->
                                case andI# [ww_s7U3m sat_s7U3z] of n#_s7U3x [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case readArray# [dt_s7U3u n#_s7U3x GHC.Prim.void#] of {
                                        Unit# ipv3_s7U3C [Occ=Once] ->
                                            let-no-escape {
                                              exit_s7U3D [Occ=OnceL!T[2], Dmd=<L,C(C1(U(U,U)))>]
                                                :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Base.Maybe a_s7SMZ #)
                                              [LclId[JoinId(2)],
                                               Arity=2,
                                               Str=<L,U><S,U>,
                                               Unf=OtherCon []] =
                                                  sat-only [w_s7U3l
                                                            ww_s7U3m
                                                            w1_s7U3n
                                                            ww1_s7U3o
                                                            dt_s7U3u
                                                            dt1_s7U3v
                                                            dt2_s7U3w
                                                            n#_s7U3x] \r [seen_s7U3E void_0E]
                                                      case
                                                          readIntOffAddr# [dt1_s7U3v
                                                                           0#
                                                                           GHC.Prim.void#]
                                                      of
                                                      { Unit# ipv5_s7U3I ->
                                                            case
                                                                sizeofMutableArray# [dt_s7U3u]
                                                            of
                                                            sat_s7U3L
                                                            { __DEFAULT ->
                                                                  case
                                                                      uncheckedIShiftRA# [sat_s7U3L
                                                                                          2#]
                                                                  of
                                                                  sat_s7U3M
                                                                  { __DEFAULT ->
                                                                        case
                                                                            sizeofMutableArray# [dt_s7U3u]
                                                                        of
                                                                        sat_s7U3K
                                                                        { __DEFAULT ->
                                                                              case
                                                                                  -# [sat_s7U3K
                                                                                      sat_s7U3M]
                                                                              of
                                                                              sat_s7U3N
                                                                              { __DEFAULT ->
                                                                                    case
                                                                                        +# [ipv5_s7U3I
                                                                                            1#]
                                                                                    of
                                                                                    sat_s7U3J
                                                                                    { __DEFAULT ->
                                                                                          case
                                                                                              >=# [sat_s7U3J
                                                                                                   sat_s7U3N]
                                                                                          of
                                                                                          { __DEFAULT ->
                                                                                                case
                                                                                                    w1_s7U3n
                                                                                                of
                                                                                                v_s7U3P
                                                                                                { __DEFAULT ->
                                                                                                      let {
                                                                                                        sat_s7U3Q [Occ=Once]
                                                                                                          :: GHC.Event.IntTable.Bucket
                                                                                                               a_s7SMZ
                                                                                                        [LclId] =
                                                                                                            CCCS GHC.Event.IntTable.Bucket! [ww_s7U3m
                                                                                                                                             v_s7U3P
                                                                                                                                             seen_s7U3E];
                                                                                                      } in 
                                                                                                        case
                                                                                                            writeArray# [dt_s7U3u
                                                                                                                         n#_s7U3x
                                                                                                                         sat_s7U3Q
                                                                                                                         GHC.Prim.void#]
                                                                                                        of
                                                                                                        s1#_s7U3R
                                                                                                        { (##) ->
                                                                                                              case
                                                                                                                  +# [ipv5_s7U3I
                                                                                                                      1#]
                                                                                                              of
                                                                                                              sat_s7U3S
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        writeIntOffAddr# [dt1_s7U3v
                                                                                                                                          0#
                                                                                                                                          sat_s7U3S
                                                                                                                                          GHC.Prim.void#]
                                                                                                                    of
                                                                                                                    s2_s7U3T
                                                                                                                    { (##) ->
                                                                                                                          case
                                                                                                                              touch# [dt2_s7U3w
                                                                                                                                      GHC.Prim.void#]
                                                                                                                          of
                                                                                                                          s'_s7U3U
                                                                                                                          { (##) ->
                                                                                                                                Unit# [GHC.Base.Nothing];
                                                                                                                          };
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                };
                                                                                            1# ->
                                                                                                case
                                                                                                    GHC.Event.IntTable.$wgrow
                                                                                                        dt_s7U3u
                                                                                                        ww1_s7U3o
                                                                                                        ipv5_s7U3I
                                                                                                        GHC.Prim.void#
                                                                                                of
                                                                                                { Unit# _ [Occ=Dead] ->
                                                                                                      case
                                                                                                          GHC.Event.IntTable.$winsertWith
                                                                                                              w_s7U3l
                                                                                                              ww_s7U3m
                                                                                                              w1_s7U3n
                                                                                                              ww1_s7U3o
                                                                                                              GHC.Prim.void#
                                                                                                      of
                                                                                                      { Unit# ipv9_s7U40 [Occ=Once] ->
                                                                                                            case
                                                                                                                touch# [dt2_s7U3w
                                                                                                                        GHC.Prim.void#]
                                                                                                            of
                                                                                                            s'_s7U41
                                                                                                            { (##) ->
                                                                                                                  Unit# [ipv9_s7U40];
                                                                                                            };
                                                                                                      };
                                                                                                };
                                                                                          };
                                                                                    };
                                                                              };
                                                                        };
                                                                  };
                                                            };
                                                      };
                                            } in 
                                              let-no-escape {
                                                exit1_s7U42 [Occ=OnceL!T[4],
                                                             Dmd=<L,C(C1(C1(C1(U(U,U)))))>]
                                                  :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> a_s7SMZ
                                                     -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Base.Maybe a_s7SMZ #)
                                                [LclId[JoinId(4)],
                                                 Arity=4,
                                                 Str=<S,1*U><S,U><L,U><L,1*U>,
                                                 Unf=OtherCon []] =
                                                    sat-only [w_s7U3l
                                                              ww_s7U3m
                                                              w1_s7U3n
                                                              dt_s7U3u
                                                              n#_s7U3x] \r [seen_s7U43
                                                                            void_0E
                                                                            ds_s7U45
                                                                            ds3_s7U46]
                                                        case
                                                            poly_<>_r7SZ6 seen_s7U43 ds3_s7U46
                                                        of
                                                        next_s7U47
                                                        { __DEFAULT ->
                                                              case
                                                                  w_s7U3l w1_s7U3n ds_s7U45
                                                              of
                                                              v'_s7U48
                                                              { __DEFAULT ->
                                                                    let {
                                                                      sat_s7U49 [Occ=Once]
                                                                        :: GHC.Event.IntTable.Bucket
                                                                             a_s7SMZ
                                                                      [LclId] =
                                                                          CCCS GHC.Event.IntTable.Bucket! [ww_s7U3m
                                                                                                           v'_s7U48
                                                                                                           next_s7U47];
                                                                    } in 
                                                                      case
                                                                          writeArray# [dt_s7U3u
                                                                                       n#_s7U3x
                                                                                       sat_s7U49
                                                                                       GHC.Prim.void#]
                                                                      of
                                                                      s1#_s7U4a
                                                                      { (##) ->
                                                                            let {
                                                                              sat_s7U4b [Occ=Once]
                                                                                :: GHC.Base.Maybe
                                                                                     a_s7SMZ
                                                                              [LclId] =
                                                                                  CCCS GHC.Base.Just! [ds_s7U45];
                                                                            } in  Unit# [sat_s7U4b];
                                                                      };
                                                              };
                                                        };
                                              } in 
                                                let-no-escape {
                                                  go_s7U4c [Occ=LoopBreakerT[3]]
                                                    :: GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Event.IntTable.Bucket a_s7SMZ
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Base.Maybe a_s7SMZ #)
                                                  [LclId[JoinId(3)],
                                                   Arity=3,
                                                   Str=<L,U><S,1*U><S,U>,
                                                   Unf=OtherCon []] =
                                                      sat-only [ww_s7U3m
                                                                exit_s7U3D
                                                                exit1_s7U42
                                                                go_s7U4c] \r [seen_s7U4d
                                                                              bkt_s7U4e
                                                                              void_0E]
                                                          case bkt_s7U4e of {
                                                            GHC.Event.IntTable.Empty ->
                                                                exit_s7U3D
                                                                    seen_s7U4d GHC.Prim.void#;
                                                            GHC.Event.IntTable.Bucket dt3_s7U4h
                                                                                      ds_s7U4i [Occ=Once*]
                                                                                      ds3_s7U4j [Occ=Once*] ->
                                                                case ==# [dt3_s7U4h ww_s7U3m] of {
                                                                  __DEFAULT ->
                                                                      let {
                                                                        sat_s7U4l [Occ=Once]
                                                                          :: GHC.Event.IntTable.Bucket
                                                                               a_s7SMZ
                                                                        [LclId] =
                                                                            CCCS GHC.Event.IntTable.Bucket! [dt3_s7U4h
                                                                                                             ds_s7U4i
                                                                                                             seen_s7U4d];
                                                                      } in 
                                                                        go_s7U4c
                                                                            sat_s7U4l
                                                                            ds3_s7U4j
                                                                            GHC.Prim.void#;
                                                                  1# ->
                                                                      exit1_s7U42
                                                                          seen_s7U4d
                                                                          GHC.Prim.void#
                                                                          ds_s7U4i
                                                                          ds3_s7U4j;
                                                                };
                                                          };
                                                } in 
                                                  go_s7U4c
                                                      GHC.Event.IntTable.Empty
                                                      ipv3_s7U3C
                                                      GHC.Prim.void#;
                                      };
                                };
                          };
                    };
              };
        };
insertWith1_r7SZ8
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U4m w1_s7U4n w2_s7U4o w3_s7U4p void_0E]
        case w1_s7U4n of {
          GHC.Types.I# ww1_s7U4s [Occ=Once] ->
              case w3_s7U4p of {
                GHC.STRef.STRef ww3_s7U4u [Occ=Once] ->
                    $winsertWith1_r7SZ7
                        w_s7U4m ww1_s7U4s w2_s7U4o ww3_s7U4u GHC.Prim.void#;
              };
        };

insertWith2_r7SZ9
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    sat-only [] \r [w_s7U4v w1_s7U4w w2_s7U4x w3_s7U4y void_0E]
        case w1_s7U4w of {
          GHC.Types.I# ww1_s7U4B [Occ=Once] ->
              case w3_s7U4y of {
                GHC.STRef.STRef ww3_s7U4D [Occ=Once] ->
                    GHC.Event.IntTable.$winsertWith
                        w_s7U4v ww1_s7U4B w2_s7U4x ww3_s7U4D GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.insertWith [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     (a -> a -> a)
     -> GHC.Types.Int
     -> a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,C(C1(U))><S(S),1*U(U)><L,U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        insertWith2_r7SZ9 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wreset [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Base.Maybe a
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7U4E w_s7U4F ww1_s7U4G void_0E]
        case w_s7U4F of {
          GHC.Base.Nothing ->
              case readMutVar# [ww1_s7U4G GHC.Prim.void#] of {
                Unit# ipv1_s7U4L [Occ=Once!] ->
                    case ipv1_s7U4L of {
                      GHC.Event.IntTable.IT dt_s7U4N dt1_s7U4O dt2_s7U4P [Occ=Once] ->
                          case sizeofMutableArray# [dt_s7U4N] of sat_s7U4R {
                            __DEFAULT ->
                                case -# [sat_s7U4R 1#] of sat_s7U4S {
                                  __DEFAULT ->
                                      case andI# [ww_s7U4E sat_s7U4S] of n#_s7U4Q [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case readArray# [dt_s7U4N n#_s7U4Q GHC.Prim.void#] of {
                                              Unit# ipv3_s7U4V [Occ=Once] ->
                                                  let {
                                                    $wgo_s7U4W [InlPrag=NOUSERINLINE[0],
                                                                Occ=LoopBreaker]
                                                      :: GHC.Event.IntTable.Bucket a_s7SNj
                                                         -> (# GHC.Types.Bool,
                                                               GHC.Base.Maybe a_s7SNj,
                                                               GHC.Event.IntTable.Bucket a_s7SNj #)
                                                    [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                        sat-only [ww_s7U4E $wgo_s7U4W] \r [w2_s7U4X]
                                                            case w2_s7U4X of {
                                                              GHC.Event.IntTable.Empty ->
                                                                  (#,,#) [GHC.Types.False
                                                                          GHC.Base.Nothing
                                                                          GHC.Event.IntTable.Empty];
                                                              GHC.Event.IntTable.Bucket dt3_s7U4Z
                                                                                        ds_s7U50 [Occ=Once*]
                                                                                        ds3_s7U51 [Occ=Once*] ->
                                                                  case ==# [dt3_s7U4Z ww_s7U4E] of {
                                                                    __DEFAULT ->
                                                                        case
                                                                            $wgo_s7U4W ds3_s7U51
                                                                        of
                                                                        { (#,,#) ww3_s7U54 [Occ=Once]
                                                                                 ww4_s7U55 [Occ=Once]
                                                                                 ww5_s7U56 [Occ=Once] ->
                                                                              let {
                                                                                sat_s7U57 [Occ=Once]
                                                                                  :: GHC.Event.IntTable.Bucket
                                                                                       a_s7SNj
                                                                                [LclId] =
                                                                                    CCCS GHC.Event.IntTable.Bucket! [dt3_s7U4Z
                                                                                                                     ds_s7U50
                                                                                                                     ww5_s7U56];
                                                                              } in 
                                                                                (#,,#) [ww3_s7U54
                                                                                        ww4_s7U55
                                                                                        sat_s7U57];
                                                                        };
                                                                    1# ->
                                                                        let {
                                                                          sat_s7U58 [Occ=Once]
                                                                            :: GHC.Base.Maybe
                                                                                 a_s7SNj
                                                                          [LclId] =
                                                                              CCCS GHC.Base.Just! [ds_s7U50];
                                                                        } in 
                                                                          (#,,#) [GHC.Types.True
                                                                                  sat_s7U58
                                                                                  ds3_s7U51];
                                                                  };
                                                            };
                                                  } in 
                                                    case $wgo_s7U4W ipv3_s7U4V of {
                                                      (#,,#) ww3_s7U5a [Occ=Once!]
                                                             ww4_s7U5b [Occ=Once!]
                                                             ww5_s7U5c [Occ=Once] ->
                                                          case ww4_s7U5b of {
                                                            GHC.Base.Nothing ->
                                                                Unit# [GHC.Tuple.()];
                                                            GHC.Base.Just _ [Occ=Dead] ->
                                                                case
                                                                    writeArray# [dt_s7U4N
                                                                                 n#_s7U4Q
                                                                                 ww5_s7U5c
                                                                                 GHC.Prim.void#]
                                                                of
                                                                s1#_s7U5f
                                                                { (##) ->
                                                                      case ww3_s7U5a of {
                                                                        GHC.Types.False ->
                                                                            Unit# [GHC.Tuple.()];
                                                                        GHC.Types.True ->
                                                                            case
                                                                                readIntOffAddr# [dt1_s7U4O
                                                                                                 0#
                                                                                                 GHC.Prim.void#]
                                                                            of
                                                                            { Unit# ipv6_s7U5j [Occ=Once] ->
                                                                                  case
                                                                                      -# [ipv6_s7U5j
                                                                                          1#]
                                                                                  of
                                                                                  sat_s7U5k
                                                                                  { __DEFAULT ->
                                                                                        case
                                                                                            writeIntOffAddr# [dt1_s7U4O
                                                                                                              0#
                                                                                                              sat_s7U5k
                                                                                                              GHC.Prim.void#]
                                                                                        of
                                                                                        s2_s7U5l
                                                                                        { (##) ->
                                                                                              case
                                                                                                  touch# [dt2_s7U4P
                                                                                                          GHC.Prim.void#]
                                                                                              of
                                                                                              s'_s7U5m
                                                                                              { (##) ->
                                                                                                    Unit# [GHC.Tuple.()];
                                                                                              };
                                                                                        };
                                                                                  };
                                                                            };
                                                                      };
                                                                };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Base.Just v_s7U5n [Occ=Once] ->
              case
                  GHC.Event.IntTable.$winsertWith
                      GHC.Base.const ww_s7U4E v_s7U5n ww1_s7U4G GHC.Prim.void#
              of
              { Unit# _ [Occ=Dead] -> Unit# [GHC.Tuple.()];
              };
        };

GHC.Event.IntTable.reset1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U5r w1_s7U5s w2_s7U5t void_0E]
        case w_s7U5r of {
          GHC.Types.I# ww1_s7U5w [Occ=Once] ->
              case w2_s7U5t of {
                GHC.STRef.STRef ww3_s7U5y [Occ=Once] ->
                    GHC.Event.IntTable.$wreset
                        ww1_s7U5w w1_s7U5s ww3_s7U5y GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.reset
  :: forall a.
     GHC.Types.Int
     -> GHC.Base.Maybe a
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Types.IO ()
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S,1*U><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.reset1 eta_B4 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$wlookup [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Prim.Int#
     -> GHC.Prim.MutVar# GHC.Prim.RealWorld (GHC.Event.IntTable.IT a)
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,U><S,U>,
 Unf=OtherCon []] =
    [] \r [ww_s7U5z ww1_s7U5A void_0E]
        case readMutVar# [ww1_s7U5A GHC.Prim.void#] of {
          Unit# ipv1_s7U5E [Occ=Once!] ->
              case ipv1_s7U5E of {
                GHC.Event.IntTable.IT dt_s7U5G _ [Occ=Dead] _ [Occ=Dead] ->
                    case sizeofMutableArray# [dt_s7U5G] of sat_s7U5J {
                      __DEFAULT ->
                          case -# [sat_s7U5J 1#] of sat_s7U5K {
                            __DEFAULT ->
                                case andI# [ww_s7U5z sat_s7U5K] of sat_s7U5L {
                                  __DEFAULT ->
                                      case readArray# [dt_s7U5G sat_s7U5L GHC.Prim.void#] of {
                                        Unit# ipv3_s7U5O [Occ=Once] ->
                                            let {
                                              go_s7U5P [Occ=LoopBreaker]
                                                :: forall a1.
                                                   GHC.Event.IntTable.Bucket a1 -> GHC.Base.Maybe a1
                                              [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                                                  sat-only [ww_s7U5z go_s7U5P] \r [ds_s7U5Q]
                                                      case ds_s7U5Q of {
                                                        GHC.Event.IntTable.Empty ->
                                                            GHC.Base.Nothing [];
                                                        GHC.Event.IntTable.Bucket dt3_s7U5S [Occ=Once]
                                                                                  ds3_s7U5T [Occ=Once]
                                                                                  ds4_s7U5U [Occ=Once] ->
                                                            case ==# [dt3_s7U5S ww_s7U5z] of {
                                                              __DEFAULT -> go_s7U5P ds4_s7U5U;
                                                              1# -> GHC.Base.Just [ds3_s7U5T];
                                                            };
                                                      };
                                            } in 
                                              case go_s7U5P ipv3_s7U5O of vx_s7U5W {
                                                __DEFAULT -> Unit# [vx_s7U5W];
                                              };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Event.IntTable.lookup1 [InlPrag=NOUSERINLINE[0]]
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [w_s7U5X w1_s7U5Y void_0E]
        case w_s7U5X of {
          GHC.Types.I# ww1_s7U61 [Occ=Once] ->
              case w1_s7U5Y of {
                GHC.STRef.STRef ww3_s7U63 [Occ=Once] ->
                    GHC.Event.IntTable.$wlookup ww1_s7U61 ww3_s7U63 GHC.Prim.void#;
              };
        };

GHC.Event.IntTable.lookup
  :: forall a.
     GHC.Types.Int
     -> GHC.Event.IntTable.IntTable a -> GHC.Types.IO (GHC.Base.Maybe a)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S(S),1*U(U)><S(S),1*U(U)><S,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        GHC.Event.IntTable.lookup1 eta_B3 eta_B2 GHC.Prim.void#;

GHC.Event.IntTable.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "base"#;

GHC.Event.IntTable.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule4];

GHC.Event.IntTable.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Event.IntTable"#;

GHC.Event.IntTable.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$trModule2];

GHC.Event.IntTable.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Event.IntTable.$trModule3
                                     GHC.Event.IntTable.$trModule1];

$krep_r7SZa :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcInt
                                              GHC.Types.[]];

$krep1_r7SZb :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r7SZa GHC.Types.[]];

$krep2_r7SZc :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.ForeignPtr.$tcForeignPtr
                                              $krep1_r7SZb];

$krep3_r7SZd :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

GHC.Event.IntTable.$tcBucket2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Bucket"#;

GHC.Event.IntTable.$tcBucket1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcBucket2];

GHC.Event.IntTable.$tcBucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17735724201551259799##
                                    1580619789810252778##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcBucket1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep4_r7SZe :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep3_r7SZd GHC.Types.[]];

GHC.Event.IntTable.$tc'Empty1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcBucket
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'Empty3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Empty"#;

GHC.Event.IntTable.$tc'Empty2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Empty3];

GHC.Event.IntTable.$tc'Empty :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [14716594083905147916##
                                    6006296133869125928##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Empty2
                                    1#
                                    GHC.Event.IntTable.$tc'Empty1];

$krep5_r7SZf :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Event.IntTable.$tc'Empty1
                                         GHC.Event.IntTable.$tc'Empty1];

$krep6_r7SZg :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep3_r7SZd $krep5_r7SZf];

GHC.Event.IntTable.$tc'Bucket1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r7SZa $krep6_r7SZg];

GHC.Event.IntTable.$tc'Bucket3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Bucket"#;

GHC.Event.IntTable.$tc'Bucket2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'Bucket3];

GHC.Event.IntTable.$tc'Bucket :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13477734220520722226##
                                    15099239145624852322##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'Bucket2
                                    1#
                                    GHC.Event.IntTable.$tc'Bucket1];

$krep7_r7SZh :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [GHC.Event.IntTable.$tc'Empty1 GHC.Types.[]];

$krep8_r7SZi :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.Arr.$tcArr
                                              $krep7_r7SZh];

GHC.Event.IntTable.$tcIT2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IT"#;

GHC.Event.IntTable.$tcIT1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIT2];

GHC.Event.IntTable.$tcIT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [1485413372890074222##
                                    7871673693356487434##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIT1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep9_r7SZj :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIT
                                              $krep4_r7SZe];

$krep10_r7SZk :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep2_r7SZc $krep9_r7SZj];

GHC.Event.IntTable.$tc'IT1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep8_r7SZi $krep10_r7SZk];

GHC.Event.IntTable.$tc'IT3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IT"#;

GHC.Event.IntTable.$tc'IT2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IT3];

GHC.Event.IntTable.$tc'IT :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [2061931487051656996##
                                    1303251193055522557##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IT2
                                    1#
                                    GHC.Event.IntTable.$tc'IT1];

$krep11_r7SZl :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep9_r7SZj GHC.Types.[]];

$krep12_r7SZm :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.IORef.$tcIORef
                                              $krep11_r7SZl];

GHC.Event.IntTable.$tcIntTable2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "IntTable"#;

GHC.Event.IntTable.$tcIntTable1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tcIntTable2];

GHC.Event.IntTable.$tcIntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12646307913912198429##
                                    5258607314097228638##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tcIntTable1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep13_r7SZn :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Event.IntTable.$tcIntTable
                                              $krep4_r7SZe];

GHC.Event.IntTable.$tc'IntTable1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep12_r7SZm $krep13_r7SZn];

GHC.Event.IntTable.$tc'IntTable3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'IntTable"#;

GHC.Event.IntTable.$tc'IntTable2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Event.IntTable.$tc'IntTable3];

GHC.Event.IntTable.$tc'IntTable :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [17952658267866828845##
                                    12036984593740445577##
                                    GHC.Event.IntTable.$trModule
                                    GHC.Event.IntTable.$tc'IntTable2
                                    1#
                                    GHC.Event.IntTable.$tc'IntTable1];

GHC.Event.IntTable.Empty :: forall a. GHC.Event.IntTable.Bucket a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Event.IntTable.Empty! [];

GHC.Event.IntTable.Bucket
  :: forall a.
     GHC.Prim.Int#
     -> a -> GHC.Event.IntTable.Bucket a -> GHC.Event.IntTable.Bucket a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.Bucket [eta_B3 eta_B2 eta_B1];

GHC.Event.IntTable.IT
  :: forall a.
     GHC.Prim.MutableArray#
       GHC.Prim.RealWorld (GHC.Event.IntTable.Bucket a)
     -> GHC.Prim.Addr#
     -> GHC.ForeignPtr.ForeignPtrContents
     -> GHC.Event.IntTable.IT a
[GblId[DataCon],
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>m,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        GHC.Event.IntTable.IT [eta_B3 eta_B2 eta_B1];

