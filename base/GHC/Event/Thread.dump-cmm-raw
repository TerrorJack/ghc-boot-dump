
==================== Raw Cmm ====================
2018-03-16 16:05:43.849040436 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:43.850266193 UTC

[section ""data" . lvl1_raLJo_closure" {
     lvl1_raLJo_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.852873067 UTC

[section ""data" . lvl2_raLJp_closure" {
     lvl2_raLJp_closure:
         const lvl2_raLJp_info;
 },
 lvl2_raLJp_entry() //  []
         { []
         }
     {offset
       caONP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caONQ; else goto caONR;
       caONQ: // global
           R1 = lvl2_raLJp_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caONR: // global
           I64[Sp - 8] = block_caONK_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_raLJp_info" {
     lvl2_raLJp_info:
         const lvl2_raLJp_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caONK() //  []
         { []
         }
     {offset
       caONK: // global
           I64[Sp] = block_caONM_info;
           R1 = lvl1_raLJo_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caONK_info" {
     block_caONK_info:
         const _caONK;
         const 0;
         const 30;
 },
 _caONM() //  [R1]
         { []
         }
     {offset
       caONM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caONV; else goto caONU;
       caONV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caONU: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caONM_info" {
     block_caONM_info:
         const _caONM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.859889139 UTC

[section ""data" . GHC.Event.Thread.numEnabledEventManagers_closure" {
     GHC.Event.Thread.numEnabledEventManagers_closure:
         const GHC.Event.Thread.numEnabledEventManagers_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.numEnabledEventManagers_entry() //  [R1]
         { []
         }
     {offset
       caOOg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caOOh; else goto caOOi;
       caOOh: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOOi: // global
           (_caOOb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caOOb::I64 == 0) goto caOOd; else goto caOOc;
       caOOd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caOOc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caOOb::I64;
           I64[Sp - 24] = block_caOOe_info;
           Sp = Sp - 24;
           call lvl2_raLJp_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.numEnabledEventManagers_info" {
     GHC.Event.Thread.numEnabledEventManagers_info:
         const GHC.Event.Thread.numEnabledEventManagers_entry;
         const 0;
         const 21;
 },
 _caOOe() //  [R1]
         { []
         }
     {offset
       caOOe: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caOOe_info" {
     block_caOOe_info:
         const _caOOe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.865166036 UTC

[section ""cstring" . GHC.Event.Thread.$trModule4_bytes" {
     GHC.Event.Thread.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.867014722 UTC

[section ""data" . GHC.Event.Thread.$trModule3_closure" {
     GHC.Event.Thread.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Thread.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.868919663 UTC

[section ""cstring" . GHC.Event.Thread.$trModule2_bytes" {
     GHC.Event.Thread.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,84,104,114,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.873122677 UTC

[section ""data" . GHC.Event.Thread.$trModule1_closure" {
     GHC.Event.Thread.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Thread.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.87524742 UTC

[section ""data" . GHC.Event.Thread.$trModule_closure" {
     GHC.Event.Thread.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Thread.$trModule3_closure+1;
         const GHC.Event.Thread.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.87690748 UTC

[section ""cstring" . GHC.Event.Thread.blockedOnBadFD3_bytes" {
     GHC.Event.Thread.blockedOnBadFD3_bytes:
         I8[] [97,119,97,105,116,69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.879277901 UTC

[section ""data" . GHC.Event.Thread.blockedOnBadFD2_closure" {
     GHC.Event.Thread.blockedOnBadFD2_closure:
         const GHC.Event.Thread.blockedOnBadFD2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.blockedOnBadFD2_entry() //  [R1]
         { []
         }
     {offset
       caOOI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOOJ; else goto caOOK;
       caOOJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOOK: // global
           (_caOOF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caOOF::I64 == 0) goto caOOH; else goto caOOG;
       caOOH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caOOG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caOOF::I64;
           R2 = GHC.Event.Thread.blockedOnBadFD3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.blockedOnBadFD2_info" {
     GHC.Event.Thread.blockedOnBadFD2_info:
         const GHC.Event.Thread.blockedOnBadFD2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.883541859 UTC

[section ""data" . GHC.Event.Thread.blockedOnBadFD1_closure" {
     GHC.Event.Thread.blockedOnBadFD1_closure:
         const GHC.Event.Thread.blockedOnBadFD1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.blockedOnBadFD1_entry() //  [R1]
         { []
         }
     {offset
       caOOY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOOZ; else goto caOP0;
       caOOZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOP0: // global
           (_caOOV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caOOV::I64 == 0) goto caOOX; else goto caOOW;
       caOOX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caOOW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caOOV::I64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = 9;
           R2 = GHC.Event.Thread.blockedOnBadFD2_closure;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.blockedOnBadFD1_info" {
     GHC.Event.Thread.blockedOnBadFD1_info:
         const GHC.Event.Thread.blockedOnBadFD1_entry;
         const 0;
         const 12884901909;
         const SaMem_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.88770319 UTC

[section ""data" . GHC.Event.Thread.blockedOnBadFD_closure" {
     GHC.Event.Thread.blockedOnBadFD_closure:
         const GHC.Event.Thread.blockedOnBadFD_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.blockedOnBadFD_entry() //  [R1]
         { []
         }
     {offset
       caOPe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOPf; else goto caOPg;
       caOPf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOPg: // global
           (_caOPb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caOPb::I64 == 0) goto caOPd; else goto caOPc;
       caOPd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caOPc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caOPb::I64;
           R2 = GHC.Event.Thread.blockedOnBadFD1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.blockedOnBadFD_info" {
     GHC.Event.Thread.blockedOnBadFD_info:
         const GHC.Event.Thread.blockedOnBadFD_entry;
         const 0;
         const 12884901909;
         const SaMem_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.891457498 UTC

[section ""cstring" . GHC.Event.Thread.ensureIOManagerIsRunning7_bytes" {
     GHC.Event.Thread.ensureIOManagerIsRunning7_bytes:
         I8[] [73,79,77,97,110,97,103,101,114,32,111,110,32,99,97,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.900130482 UTC

[section ""data" . restartPollLoop_raLJq_closure" {
     restartPollLoop_raLJq_closure:
         const restartPollLoop_raLJq_info;
         const 0;
 },
 sat_saLKx_entry() //  [R1]
         { []
         }
     {offset
       caOPU: // global
           R2 = P64[R1 + 7];
           call GHC.Event.Manager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLKx_info" {
     sat_saLKx_info:
         const sat_saLKx_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SaMem_srt+32;
 },
 sat_saLKy_entry() //  [R1]
         { []
         }
     {offset
       caOPX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caOQ1; else goto caOQ0;
       caOQ1: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caOQ0: // global
           _saLKb::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_saLKx_info;
           P64[Hp] = _saLKb::P64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLKy_info" {
     sat_saLKy_info:
         const sat_saLKy_entry;
         const 1;
         const 12884901897;
         const 4294967299;
         const SaMem_srt+32;
 },
 sat_saLKM_entry() //  [R1, R2]
         { []
         }
     {offset
       caOQc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOQg; else goto caOQh;
       caOQg: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caOQh: // global
           I64[Sp - 16] = block_caOQ9_info;
           _saLKB::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saLKB::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaOQl; else goto caOQa;
       uaOQl: // global
           call _caOQ9(R1) args: 0, res: 0, upd: 0;
       caOQa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLKM_info" {
     sat_saLKM_info:
         const sat_saLKM_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caOQ9() //  [R1]
         { []
         }
     {offset
       caOQ9: // global
           _saLKB::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caOQf_info;
           R2 = I64[R1 + 7];
           R1 = _saLKB::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOQ9_info" {
     block_caOQ9_info:
         const _caOQ9;
         const 1;
         const 30;
 },
 _caOQf() //  []
         { []
         }
     {offset
       caOQf: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caOQf_info" {
     block_caOQf_info:
         const _caOQf;
         const 0;
         const 30;
 },
 sat_saLKF_entry() //  [R1]
         { []
         }
     {offset
       caOQx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caOQy; else goto caOQz;
       caOQy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOQz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caOQu_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saLKF_info" {
     sat_saLKF_info:
         const sat_saLKF_entry;
         const 4294967296;
         const 17;
 },
 _caOQu() //  [R1, R2]
         { []
         }
     {offset
       caOQu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caOQC; else goto caOQB;
       caOQC: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caOQB: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caOQu_info" {
     block_caOQu_info:
         const _caOQu;
         const 0;
         const 30;
 },
 sat_saLKG_entry() //  [R1]
         { []
         }
     {offset
       caOQD: // global
           _saLKG::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caOQE; else goto caOQF;
       caOQF: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caOQH; else goto caOQG;
       caOQH: // global
           HpAlloc = 24;
           goto caOQE;
       caOQE: // global
           R1 = _saLKG::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOQG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saLKG::P64;
           _saLKv::I64 = I64[_saLKG::P64 + 16];
           I64[Hp - 16] = sat_saLKF_info;
           I64[Hp] = _saLKv::I64;
           R3 = Hp - 16;
           R2 = GHC.Event.Thread.ensureIOManagerIsRunning7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saLKG_info" {
     sat_saLKG_info:
         const sat_saLKG_entry;
         const 4294967296;
         const 17;
 },
 restartPollLoop_raLJq_entry() //  [R2, R3]
         { []
         }
     {offset
       caOQI: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caOQJ; else goto caOQK;
       caOQJ: // global
           R3 = R3;
           R2 = R2;
           R1 = restartPollLoop_raLJq_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caOQK: // global
           I64[Sp - 16] = block_caOPt_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaOSd; else goto caOPu;
       uaOSd: // global
           call _caOPt(R1) args: 0, res: 0, upd: 0;
       caOPu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . restartPollLoop_raLJq_info" {
     restartPollLoop_raLJq_info:
         const restartPollLoop_raLJq_entry;
         const 0;
         const 270582939662;
         const 12884901903;
         const SaMem_srt+32;
 },
 _caOPt() //  [R1]
         { []
         }
     {offset
       caOPt: // global
           I64[Sp - 24] = block_caOPy_info;
           R2 = GHC.Event.Manager.release2_closure+1;
           _saLKb::P64 = R1;
           _saLKn::P64 = P64[R1 + 63];
           _saLKl::I64 = I64[R1 + 103];
           R1 = P64[R1 + 39];
           I64[Sp - 16] = _saLKl::I64;
           P64[Sp - 8] = _saLKn::P64;
           P64[Sp] = _saLKb::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOPt_info" {
     block_caOPt_info:
         const _caOPt;
         const 1;
         const 133143986206;
         const SaMem_srt+32;
 },
 _caOPy() //  [R1]
         { []
         }
     {offset
       caOPy: // global
           I64[Sp] = block_caOQL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaOSc; else goto caOR1;
       uaOSc: // global
           call _caOQL(R1) args: 0, res: 0, upd: 0;
       caOR1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOPy_info" {
     block_caOPy_info:
         const _caOPy;
         const 68;
         const 133143986206;
         const SaMem_srt+32;
 },
 _caOQL() //  [R1]
         { []
         }
     {offset
       caOQL: // global
           if (R1 & 7 == 2) goto caOS4; else goto uaOS7;
       caOS4: // global
           _saLKn::P64 = P64[Sp + 16];
           (_saLKW::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), 1);
           if (%MO_SS_Conv_W64_W32(_saLKW::I64) == 0 :: W32) goto uaOS8; else goto caORq;
       uaOS8: // global
           Sp = Sp + 24;
           goto uaOSg;
       caORq: // global
           (_saLL1::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_caORo_info;
           R1 = P64[_saLKn::P64 + 8];
           I64[Sp + 16] = _saLL1::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaOSe; else goto caORs;
       uaOSe: // global
           call _caORo(R1) args: 0, res: 0, upd: 0;
       caORs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uaOS7: // global
           Sp = Sp + 24;
           goto uaOSg;
       uaOSg: // global
           call _saLKs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caOQL_info" {
     block_caOQL_info:
         const _caOQL;
         const 68;
         const 133143986206;
         const SaMem_srt+32;
 },
 _caORo() //  [R1]
         { []
         }
     {offset
       caORo: // global
           if (R1 & 7 == 1) goto caORz; else goto caORX;
       caORz: // global
           I64[Sp + 8] = block_caORw_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caORX: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uaOS9; else goto caORN;
       uaOS9: // global
           Sp = Sp + 16;
           call _saLKs() args: 0, res: 0, upd: 0;
       caORN: // global
           I64[Sp + 8] = block_caORL_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caORo_info" {
     block_caORo_info:
         const _caORo;
         const 67;
         const 133143986206;
         const SaMem_srt+32;
 },
 _caORw() //  []
         { []
         }
     {offset
       caORw: // global
           Sp = Sp + 8;
           call _saLKs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caORw_info" {
     block_caORw_info:
         const _caORw;
         const 2;
         const 30064771102;
         const SaMem_srt+32;
 },
 _caORL() //  []
         { []
         }
     {offset
       caORL: // global
           Sp = Sp + 8;
           call _saLKs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caORL_info" {
     block_caORL_info:
         const _caORL;
         const 2;
         const 30064771102;
         const SaMem_srt+32;
 },
 _saLKs() //  []
         { []
         }
     {offset
       saLKs: // global
           I64[Sp - 8] = block_caOPF_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaOSk; else goto caOPG;
       uaOSk: // global
           call _caOPF(R1) args: 0, res: 0, upd: 0;
       caOPG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caOPF() //  [R1]
         { []
         }
     {offset
       caOPF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caOQU; else goto caOQT;
       caOQU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caOQT: // global
           _saLKv::I64 = I64[R1 + 7];
           I64[Hp - 8] = sat_saLKy_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caOQ2_info;
           R2 = Hp - 7;
           R1 = _saLKv::I64;
           I64[Sp + 16] = _saLKv::I64;
           Sp = Sp + 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOPF_info" {
     block_caOPF_info:
         const _caOPF;
         const 130;
         const 30064771102;
         const SaMem_srt+32;
 },
 _caOQ2() //  [R1]
         { []
         }
     {offset
       caOQ2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caOQX; else goto caOQW;
       caOQX: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caOQW: // global
           I64[Hp - 32] = sat_saLKM_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_saLKG_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp] = block_caOQO_info;
           R4 = Hp - 30;
           R3 = Hp - 16;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp + 8] = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOQ2_info" {
     block_caOQ2_info:
         const _caOQ2;
         const 65;
         const 4294967326;
         const SaMem_srt+48;
 },
 _caOQO() //  [R1]
         { []
         }
     {offset
       caOQO: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caOR0; else goto caOQZ;
       caOR0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caOQZ: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caOQO_info" {
     block_caOQO_info:
         const _caOQO;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.931886648 UTC

[section ""cstring" . lvl3_raLJr_bytes" {
     lvl3_raLJr_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.934221035 UTC

[section ""data" . lvl4_raLJs_closure" {
     lvl4_raLJs_closure:
         const lvl4_raLJs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_raLJs_entry() //  [R1]
         { []
         }
     {offset
       caOTI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOTJ; else goto caOTK;
       caOTJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOTK: // global
           (_caOTF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caOTF::I64 == 0) goto caOTH; else goto caOTG;
       caOTH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caOTG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caOTF::I64;
           R2 = lvl3_raLJr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_raLJs_info" {
     lvl4_raLJs_info:
         const lvl4_raLJs_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.938349163 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning8_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning8_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning8_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caOTZ: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caOU3; else goto caOU2;
       caOU3: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caOU2: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R3;
           R6 = lvl4_raLJs_closure;
           R5 = Hp - 39;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning8_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning8_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning8_entry;
         const 0;
         const 30064771086;
         const 12884901904;
         const SaMem_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.950062911 UTC

[section ""data" . GHC.Event.Thread.$wstartIOManagerThread_closure" {
     GHC.Event.Thread.$wstartIOManagerThread_closure:
         const GHC.Event.Thread.$wstartIOManagerThread_info;
         const 0;
 },
 GHC.Event.Thread.$wstartIOManagerThread_slow() //  [R1]
         { []
         }
     {offset
       caOU9: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.Thread.$wstartIOManagerThread_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saLM0_entry() //  [R1]
         { []
         }
     {offset
       caOUO: // global
           _saLLE::P64 = P64[R1 + 7];
           call "ccall" arg hints:  [,
                                     ‘signed’]  result hints:  [] setIOManagerControlFd(%MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[R1 + 15])), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 23])));
           R2 = _saLLE::P64;
           call GHC.Event.Manager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLM0_info" {
     sat_saLM0_info:
         const sat_saLM0_entry;
         const 8589934593;
         const 4294967304;
         const 4294967299;
         const SaMem_srt+32;
 },
 sat_saLM1_entry() //  [R1]
         { []
         }
     {offset
       caOV1: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caOV5; else goto caOV4;
       caOV5: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caOV4: // global
           _saLLE::P64 = P64[R1 + 7];
           _saLLm::I64 = I64[R1 + 15];
           _saLLN::I64 = I64[R1 + 23];
           I64[Hp - 24] = sat_saLM0_info;
           P64[Hp - 16] = _saLLE::P64;
           I64[Hp - 8] = _saLLm::I64;
           I64[Hp] = _saLLN::I64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 23;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLM1_info" {
     sat_saLM1_info:
         const sat_saLM1_entry;
         const 8589934593;
         const 12884901896;
         const 4294967299;
         const SaMem_srt+32;
 },
 sat_saLMf_entry() //  [R1, R2]
         { []
         }
     {offset
       caOVg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOVk; else goto caOVl;
       caOVk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caOVl: // global
           I64[Sp - 16] = block_caOVd_info;
           _saLM4::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saLM4::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaOVp; else goto caOVe;
       uaOVp: // global
           call _caOVd(R1) args: 0, res: 0, upd: 0;
       caOVe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLMf_info" {
     sat_saLMf_info:
         const sat_saLMf_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caOVd() //  [R1]
         { []
         }
     {offset
       caOVd: // global
           _saLM4::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caOVj_info;
           R2 = I64[R1 + 7];
           R1 = _saLM4::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOVd_info" {
     block_caOVd_info:
         const _caOVd;
         const 1;
         const 30;
 },
 _caOVj() //  []
         { []
         }
     {offset
       caOVj: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caOVj_info" {
     block_caOVj_info:
         const _caOVj;
         const 0;
         const 30;
 },
 sat_saLM8_entry() //  [R1]
         { []
         }
     {offset
       caOVB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caOVC; else goto caOVD;
       caOVC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOVD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caOVy_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saLM8_info" {
     sat_saLM8_info:
         const sat_saLM8_entry;
         const 4294967296;
         const 17;
 },
 _caOVy() //  [R1, R2]
         { []
         }
     {offset
       caOVy: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caOVG; else goto caOVF;
       caOVG: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caOVF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caOVy_info" {
     block_caOVy_info:
         const _caOVy;
         const 0;
         const 30;
 },
 sat_saLM9_entry() //  [R1]
         { []
         }
     {offset
       caOVH: // global
           _saLM9::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caOVI; else goto caOVJ;
       caOVJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caOVL; else goto caOVK;
       caOVL: // global
           HpAlloc = 24;
           goto caOVI;
       caOVI: // global
           R1 = _saLM9::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caOVK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saLM9::P64;
           _saLLm::I64 = I64[_saLM9::P64 + 16];
           I64[Hp - 16] = sat_saLM8_info;
           I64[Hp] = _saLLm::I64;
           R3 = Hp - 16;
           R2 = GHC.Event.Thread.ensureIOManagerIsRunning7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saLM9_info" {
     sat_saLM9_info:
         const sat_saLM9_entry;
         const 4294967296;
         const 17;
 },
 GHC.Event.Thread.$wstartIOManagerThread_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       caOVP: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caOVQ; else goto caOVR;
       caOVQ: // global
           R1 = GHC.Event.Thread.$wstartIOManagerThread_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       caOVR: // global
           _saLLm::I64 = R5;
           _saLLk::I64 = R3;
           _saLLj::I64 = R2;
           if (%MO_S_Gt_W64(R2, R5)) goto caOVT; else goto caOVO;
       caOVO: // global
           if (%MO_S_Gt_W64(_saLLm::I64,
                            _saLLk::I64)) goto caOVT; else goto caOW9;
       caOVT: // global
           R4 = _saLLm::I64;
           R3 = _saLLj::I64;
           R2 = _saLLk::I64;
           call GHC.Event.Thread.ensureIOManagerIsRunning8_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
       caOW9: // global
           _saLLv::P64 = P64[(R4 + 24) + (_saLLm::I64 - _saLLj::I64 << 3)];
           I64[Sp - 32] = block_caOVU_info;
           R1 = _saLLv::P64;
           I64[Sp - 24] = _saLLj::I64;
           P64[Sp - 16] = R4;
           I64[Sp - 8] = _saLLm::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaOX6; else goto caOWa;
       uaOX6: // global
           call _caOVU(R1) args: 0, res: 0, upd: 0;
       caOWa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wstartIOManagerThread_info" {
     GHC.Event.Thread.$wstartIOManagerThread_info:
         const GHC.Event.Thread.$wstartIOManagerThread_entry;
         const 0;
         const 15972983373838;
         const 21474836480;
         const SaMem_srt+32;
         const 708;
         const GHC.Event.Thread.$wstartIOManagerThread_slow;
 },
 _caOVU() //  [R1]
         { []
         }
     {offset
       caOVU: // global
           if (R1 & 7 == 1) goto uaOX2; else goto caOWq;
       uaOX2: // global
           Sp = Sp + 8;
           call _saLLw() args: 0, res: 0, upd: 0;
       caOWq: // global
           I64[Sp] = block_caOWj_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaOX7; else goto caOWk;
       uaOX7: // global
           call _caOWj(R1) args: 0, res: 0, upd: 0;
       caOWk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOVU_info" {
     block_caOVU_info:
         const _caOVU;
         const 323;
         const 6627134537758;
         const SaMem_srt+32;
 },
 _caOWj() //  [R1]
         { []
         }
     {offset
       caOWj: // global
           I64[Sp - 8] = block_caOWo_info;
           _saLMs::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _saLMs::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaOX9; else goto caOWs;
       uaOX9: // global
           call _caOWo(R1) args: 0, res: 0, upd: 0;
       caOWs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOWj_info" {
     block_caOWj_info:
         const _caOWj;
         const 323;
         const 6627134537758;
         const SaMem_srt+32;
 },
 _caOWo() //  [R1]
         { []
         }
     {offset
       caOWo: // global
           I64[Sp] = block_caOWw_info;
           R1 = P64[R1 + 7];
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOWo_info" {
     block_caOWo_info:
         const _caOWo;
         const 644;
         const 6627134537758;
         const SaMem_srt+32;
 },
 _caOWw() //  [R1]
         { []
         }
     {offset
       caOWw: // global
           if (R1 == 16) goto uaOX3; else goto uaOX1;
       uaOX3: // global
           Sp = Sp + 16;
           call _saLLw() args: 0, res: 0, upd: 0;
       uaOX1: // global
           if (R1 == 17) goto caOWT; else goto caOWE;
       caOWT: // global
           _saLMs::P64 = P64[Sp + 8];
           call "ccall" arg hints:  [,
                                     ‘signed’]  result hints:  [] setIOManagerControlFd(%MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[Sp + 32])), (-1));
           I64[Sp + 8] = block_caOWS_info;
           R2 = _saLMs::P64;
           Sp = Sp + 8;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 8, upd: 8;
       caOWE: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caOWw_info" {
     block_caOWw_info:
         const _caOWw;
         const 644;
         const 6627134537758;
         const SaMem_srt+32;
 },
 _caOWS() //  []
         { []
         }
     {offset
       caOWS: // global
           Sp = Sp + 8;
           call _saLLw() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caOWS_info" {
     block_caOWS_info:
         const _caOWS;
         const 323;
         const 6627134537758;
         const SaMem_srt+32;
 },
 _saLLw() //  []
         { []
         }
     {offset
       saLLw: // global
           I64[Sp - 8] = block_caOUt_info;
           Sp = Sp - 8;
           call GHC.Event.EPoll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _caOUt() //  [R1]
         { []
         }
     {offset
       caOUt: // global
           I64[Sp] = block_caOUv_info;
           R2 = R1;
           call GHC.Event.Manager.new2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOUt_info" {
     block_caOUt_info:
         const _caOUt;
         const 323;
         const 4428111282206;
         const SaMem_srt+32;
 },
 _caOUv() //  [R1]
         { []
         }
     {offset
       caOUv: // global
           I64[Sp] = block_caOUx_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaOX5; else goto caOUy;
       uaOX5: // global
           call _caOUx(R1) args: 0, res: 0, upd: 0;
       caOUy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOUv_info" {
     block_caOUv_info:
         const _caOUv;
         const 323;
         const 30064771102;
         const SaMem_srt+32;
 },
 _caOUx() //  [R1]
         { []
         }
     {offset
       caOUx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caOW1; else goto caOW0;
       caOW1: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caOW0: // global
           _saLLN::I64 = I64[R1 + 95];
           I64[Hp - 24] = sat_saLM1_info;
           P64[Hp - 16] = R1;
           _saLLm::I64 = I64[Sp + 24];
           I64[Hp - 8] = _saLLm::I64;
           I64[Hp] = _saLLN::I64;
           I64[Sp - 8] = block_caOV6_info;
           R2 = Hp - 23;
           _saLLE::P64 = R1;
           R1 = _saLLm::I64;
           P64[Sp] = _saLLE::P64;
           Sp = Sp - 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOUx_info" {
     block_caOUx_info:
         const _caOUx;
         const 323;
         const 30064771102;
         const SaMem_srt+32;
 },
 _caOV6() //  [R1]
         { []
         }
     {offset
       caOV6: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caOW4; else goto caOW3;
       caOW4: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caOW3: // global
           I64[Hp - 32] = sat_saLMf_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_saLM9_info;
           I64[Hp] = I64[Sp + 32];
           I64[Sp - 8] = block_caOVY_info;
           R4 = Hp - 30;
           R3 = Hp - 16;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOV6_info" {
     block_caOV6_info:
         const _caOV6;
         const 644;
         const 4294967326;
         const SaMem_srt+48;
 },
 _caOVY() //  [R1]
         { []
         }
     {offset
       caOVY: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caOW8; else goto caOW7;
       caOW8: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caOW7: // global
           I64[Hp - 48] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           _saLLl::P64 = P64[Sp + 32];
           _saLMj::I64 = I64[Sp + 40] - I64[Sp + 24];
           call MO_WriteBarrier();
           P64[(_saLLl::P64 + 24) + (_saLMj::I64 << 3)] = Hp - 6;
           I64[_saLLl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saLLl::P64 + 24) + ((I64[_saLLl::P64 + 8] << 3) + (_saLMj::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caOVY_info" {
     block_caOVY_info:
         const _caOVY;
         const 1285;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:43.988138282 UTC

[section ""data" . lvl5_raLJt_closure" {
     lvl5_raLJt_closure:
         const lvl5_raLJt_info;
 },
 sat_saLNh_entry() //  [R1]
         { []
         }
     {offset
       caOZc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOZd; else goto caOZe;
       caOZd: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caOZe: // global
           I64[Sp - 16] = block_caOZ3_info;
           _saLMS::P64 = P64[R1 + 7];
           R1 = _saLMS::P64;
           P64[Sp - 8] = _saLMS::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLNh_info" {
     sat_saLNh_info:
         const sat_saLNh_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caOZ3() //  [R1]
         { []
         }
     {offset
       caOZ3: // global
           _saLMS::P64 = P64[Sp + 8];
           (_saLNc::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadIOManagerThreadStore(R1);
           if (R1 == _saLNc::I64) goto caOZb; else goto caOZa;
       caOZb: // global
           R1 = _saLMS::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caOZa: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLNc::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caOZ3_info" {
     block_caOZ3_info:
         const _caOZ3;
         const 1;
         const 30;
 },
 lvl5_raLJt_entry() //  []
         { []
         }
     {offset
       caOZm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caOZn; else goto caOZo;
       caOZn: // global
           R1 = lvl5_raLJt_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caOZo: // global
           I64[Sp - 8] = block_caOYM_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_raLJt_info" {
     lvl5_raLJt_info:
         const lvl5_raLJt_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caOYM() //  []
         { []
         }
     {offset
       caOYM: // global
           I64[Sp] = block_caOYO_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOYM_info" {
     block_caOYM_info:
         const _caOYM;
         const 0;
         const 30;
 },
 _caOYO() //  [R1]
         { []
         }
     {offset
       caOYO: // global
           I64[Sp - 8] = block_caOYQ_info;
           R2 = GHC.Base.Nothing_closure+1;
           _saLMN::P64 = R1;
           R1 = R1;
           P64[Sp] = _saLMN::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOYO_info" {
     block_caOYO_info:
         const _caOYO;
         const 0;
         const 30;
 },
 _caOYQ() //  []
         { []
         }
     {offset
       caOYQ: // global
           I64[Sp] = block_caOYS_info;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOYQ_info" {
     block_caOYQ_info:
         const _caOYQ;
         const 1;
         const 30;
 },
 _caOYS() //  [R1]
         { []
         }
     {offset
       caOYS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caOZu; else goto caOZt;
       caOZu: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caOZt: // global
           I64[Hp - 24] = GHC.MVar.MVar_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caOYU::P64 = Hp - 23;
           if (R1 == 0) goto caOZl; else goto caOZk;
       caOZl: // global
           I64[Hp - 8] = sat_saLNh_info;
           P64[Hp] = _caOYU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caOZk: // global
           Hp = Hp - 16;
           I64[Sp] = block_caOZv_info;
           R1 = _caOYU::P64;
           P64[Sp + 8] = _caOYU::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caOYS_info" {
     block_caOYS_info:
         const _caOYS;
         const 1;
         const 30;
 },
 _caOZv() //  [R1]
         { []
         }
     {offset
       caOZv: // global
           _caOYU::P64 = P64[Sp + 8];
           (_saLN0::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadIOManagerThreadStore(R1);
           if (R1 == _saLN0::I64) goto caOZE; else goto caOZD;
       caOZE: // global
           R1 = _caOYU::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caOZD: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLN0::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caOZv_info" {
     block_caOZv_info:
         const _caOZv;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.003367507 UTC

[section ""data" . GHC.Event.Thread.timerManagerThreadVar_closure" {
     GHC.Event.Thread.timerManagerThreadVar_closure:
         const GHC.Event.Thread.timerManagerThreadVar_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.timerManagerThreadVar_entry() //  [R1]
         { []
         }
     {offset
       caP0k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caP0l; else goto caP0m;
       caP0l: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caP0m: // global
           (_caP0f::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caP0f::I64 == 0) goto caP0h; else goto caP0g;
       caP0h: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caP0g: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caP0f::I64;
           I64[Sp - 24] = block_caP0i_info;
           Sp = Sp - 24;
           call lvl5_raLJt_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.timerManagerThreadVar_info" {
     GHC.Event.Thread.timerManagerThreadVar_info:
         const GHC.Event.Thread.timerManagerThreadVar_entry;
         const 0;
         const 21;
 },
 _caP0i() //  [R1]
         { []
         }
     {offset
       caP0i: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caP0i_info" {
     block_caP0i_info:
         const _caP0i;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.010807674 UTC

[section ""data" . lvl6_raLJu_closure" {
     lvl6_raLJu_closure:
         const lvl6_raLJu_info;
 },
 sat_saLNS_entry() //  [R1]
         { []
         }
     {offset
       caP12: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caP13; else goto caP14;
       caP13: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP14: // global
           I64[Sp - 16] = block_caP0T_info;
           _saLNt::P64 = P64[R1 + 7];
           R1 = _saLNt::P64;
           P64[Sp - 8] = _saLNt::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLNS_info" {
     sat_saLNS_info:
         const sat_saLNS_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caP0T() //  [R1]
         { []
         }
     {offset
       caP0T: // global
           _saLNt::P64 = P64[Sp + 8];
           (_saLNN::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadEventManagerStore(R1);
           if (R1 == _saLNN::I64) goto caP11; else goto caP10;
       caP11: // global
           R1 = _saLNt::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caP10: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLNN::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP0T_info" {
     block_caP0T_info:
         const _caP0T;
         const 1;
         const 30;
 },
 lvl6_raLJu_entry() //  []
         { []
         }
     {offset
       caP1c: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caP1d; else goto caP1e;
       caP1d: // global
           R1 = lvl6_raLJu_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP1e: // global
           I64[Sp - 8] = block_caP0E_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_raLJu_info" {
     lvl6_raLJu_info:
         const lvl6_raLJu_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caP0E() //  []
         { []
         }
     {offset
       caP0E: // global
           I64[Sp] = block_caP0G_info;
           R1 = GHC.Base.Nothing_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP0E_info" {
     block_caP0E_info:
         const _caP0E;
         const 0;
         const 30;
 },
 _caP0G() //  [R1]
         { []
         }
     {offset
       caP0G: // global
           I64[Sp - 8] = block_caP0I_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP0G_info" {
     block_caP0G_info:
         const _caP0G;
         const 0;
         const 30;
 },
 _caP0I() //  [R1]
         { []
         }
     {offset
       caP0I: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caP1j; else goto caP1i;
       caP1j: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caP1i: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caP0K::P64 = Hp - 23;
           if (R1 == 0) goto caP1b; else goto caP1a;
       caP1b: // global
           I64[Hp - 8] = sat_saLNS_info;
           P64[Hp] = _caP0K::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caP1a: // global
           Hp = Hp - 16;
           I64[Sp] = block_caP1k_info;
           R1 = _caP0K::P64;
           P64[Sp + 8] = _caP0K::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP0I_info" {
     block_caP0I_info:
         const _caP0I;
         const 1;
         const 30;
 },
 _caP1k() //  [R1]
         { []
         }
     {offset
       caP1k: // global
           _caP0K::P64 = P64[Sp + 8];
           (_saLNB::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadEventManagerStore(R1);
           if (R1 == _saLNB::I64) goto caP1t; else goto caP1s;
       caP1t: // global
           R1 = _caP0K::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caP1s: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLNB::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP1k_info" {
     block_caP1k_info:
         const _caP1k;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.023891545 UTC

[section ""data" . GHC.Event.Thread.timerManager_closure" {
     GHC.Event.Thread.timerManager_closure:
         const GHC.Event.Thread.timerManager_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.timerManager_entry() //  [R1]
         { []
         }
     {offset
       caP26: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caP27; else goto caP28;
       caP27: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caP28: // global
           (_caP21::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caP21::I64 == 0) goto caP23; else goto caP22;
       caP23: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caP22: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caP21::I64;
           I64[Sp - 24] = block_caP24_info;
           Sp = Sp - 24;
           call lvl6_raLJu_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.timerManager_info" {
     GHC.Event.Thread.timerManager_info:
         const GHC.Event.Thread.timerManager_entry;
         const 0;
         const 21;
 },
 _caP24() //  [R1]
         { []
         }
     {offset
       caP24: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caP24_info" {
     block_caP24_info:
         const _caP24;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.029416755 UTC

[section ""cstring" . lvl7_raLJv_bytes" {
     lvl7_raLJv_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,50,49,54,58,51,45,49,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.031579864 UTC

[section ""data" . GHC.Event.Thread.getSystemTimerManager2_closure" {
     GHC.Event.Thread.getSystemTimerManager2_closure:
         const GHC.Event.Thread.getSystemTimerManager2_info;
         const 0;
 },
 GHC.Event.Thread.getSystemTimerManager2_entry() //  []
         { []
         }
     {offset
       caP2t: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caP2u; else goto caP2v;
       caP2u: // global
           R1 = GHC.Event.Thread.getSystemTimerManager2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP2v: // global
           I64[Sp - 8] = block_caP2r_info;
           R2 = lvl7_raLJv_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemTimerManager2_info" {
     GHC.Event.Thread.getSystemTimerManager2_info:
         const GHC.Event.Thread.getSystemTimerManager2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SaMem_srt+128;
 },
 _caP2r() //  [R1]
         { []
         }
     {offset
       caP2r: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP2r_info" {
     block_caP2r_info:
         const _caP2r;
         const 0;
         const 4294967326;
         const SaMem_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.03710362 UTC

[section ""data" . GHC.Event.Thread.getSystemTimerManager1_closure" {
     GHC.Event.Thread.getSystemTimerManager1_closure:
         const GHC.Event.Thread.getSystemTimerManager1_info;
         const 0;
 },
 GHC.Event.Thread.getSystemTimerManager1_entry() //  []
         { []
         }
     {offset
       caP2O: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caP2P; else goto caP2Q;
       caP2P: // global
           R1 = GHC.Event.Thread.getSystemTimerManager1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP2Q: // global
           I64[Sp - 8] = block_caP2L_info;
           R1 = GHC.Event.Thread.timerManager_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaP38; else goto caP2M;
       uaP38: // global
           call _caP2L(R1) args: 0, res: 0, upd: 0;
       caP2M: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemTimerManager1_info" {
     GHC.Event.Thread.getSystemTimerManager1_info:
         const GHC.Event.Thread.getSystemTimerManager1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SaMem_srt+136;
 },
 _caP2L() //  [R1]
         { []
         }
     {offset
       caP2L: // global
           _saLO3::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caP2T_info;
           R1 = _saLO3::P64;
           if (R1 & 7 != 0) goto uaP37; else goto caP2V;
       uaP37: // global
           call _caP2T(R1) args: 0, res: 0, upd: 0;
       caP2V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP2L_info" {
     block_caP2L_info:
         const _caP2L;
         const 0;
         const 4294967326;
         const SaMem_srt+136;
 },
 _caP2T() //  [R1]
         { []
         }
     {offset
       caP2T: // global
           if (R1 & 7 == 1) goto caP31; else goto caP35;
       caP31: // global
           Sp = Sp + 8;
           call GHC.Event.Thread.getSystemTimerManager2_entry() args: 8, res: 0, upd: 8;
       caP35: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP2T_info" {
     block_caP2T_info:
         const _caP2T;
         const 0;
         const 4294967326;
         const SaMem_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.043977964 UTC

[section ""data" . GHC.Event.Thread.getSystemTimerManager_closure" {
     GHC.Event.Thread.getSystemTimerManager_closure:
         const GHC.Event.Thread.getSystemTimerManager_info;
         const 0;
 },
 GHC.Event.Thread.getSystemTimerManager_entry() //  []
         { []
         }
     {offset
       caP3u: // global
           call GHC.Event.Thread.getSystemTimerManager1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemTimerManager_info" {
     GHC.Event.Thread.getSystemTimerManager_info:
         const GHC.Event.Thread.getSystemTimerManager_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaMem_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.049730189 UTC

[section ""data" . lvl8_raLJw_closure" {
     lvl8_raLJw_closure:
         const lvl8_raLJw_info;
 },
 sat_saLOE_entry() //  [R1]
         { []
         }
     {offset
       caP45: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caP46; else goto caP47;
       caP46: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP47: // global
           I64[Sp - 16] = block_caP3W_info;
           _saLOf::P64 = P64[R1 + 7];
           R1 = _saLOf::P64;
           P64[Sp - 8] = _saLOf::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLOE_info" {
     sat_saLOE_info:
         const sat_saLOE_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caP3W() //  [R1]
         { []
         }
     {offset
       caP3W: // global
           _saLOf::P64 = P64[Sp + 8];
           (_saLOz::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadIOManagerThreadStore(R1);
           if (R1 == _saLOz::I64) goto caP44; else goto caP43;
       caP44: // global
           R1 = _saLOf::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caP43: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLOz::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP3W_info" {
     block_caP3W_info:
         const _caP3W;
         const 1;
         const 30;
 },
 lvl8_raLJw_entry() //  []
         { []
         }
     {offset
       caP4f: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caP4g; else goto caP4h;
       caP4g: // global
           R1 = lvl8_raLJw_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP4h: // global
           I64[Sp - 8] = block_caP3F_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_raLJw_info" {
     lvl8_raLJw_info:
         const lvl8_raLJw_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caP3F() //  []
         { []
         }
     {offset
       caP3F: // global
           I64[Sp] = block_caP3H_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP3F_info" {
     block_caP3F_info:
         const _caP3F;
         const 0;
         const 30;
 },
 _caP3H() //  [R1]
         { []
         }
     {offset
       caP3H: // global
           I64[Sp - 8] = block_caP3J_info;
           R2 = GHC.Tuple.()_closure+1;
           _saLOa::P64 = R1;
           R1 = R1;
           P64[Sp] = _saLOa::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP3H_info" {
     block_caP3H_info:
         const _caP3H;
         const 0;
         const 30;
 },
 _caP3J() //  []
         { []
         }
     {offset
       caP3J: // global
           I64[Sp] = block_caP3L_info;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP3J_info" {
     block_caP3J_info:
         const _caP3J;
         const 1;
         const 30;
 },
 _caP3L() //  [R1]
         { []
         }
     {offset
       caP3L: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caP4n; else goto caP4m;
       caP4n: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caP4m: // global
           I64[Hp - 24] = GHC.MVar.MVar_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caP3N::P64 = Hp - 23;
           if (R1 == 0) goto caP4e; else goto caP4d;
       caP4e: // global
           I64[Hp - 8] = sat_saLOE_info;
           P64[Hp] = _caP3N::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caP4d: // global
           Hp = Hp - 16;
           I64[Sp] = block_caP4o_info;
           R1 = _caP3N::P64;
           P64[Sp + 8] = _caP3N::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP3L_info" {
     block_caP3L_info:
         const _caP3L;
         const 1;
         const 30;
 },
 _caP4o() //  [R1]
         { []
         }
     {offset
       caP4o: // global
           _caP3N::P64 = P64[Sp + 8];
           (_saLOn::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadIOManagerThreadStore(R1);
           if (R1 == _saLOn::I64) goto caP4x; else goto caP4w;
       caP4x: // global
           R1 = _caP3N::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caP4w: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLOn::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP4o_info" {
     block_caP4o_info:
         const _caP4o;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.064908336 UTC

[section ""data" . GHC.Event.Thread.ioManagerLock_closure" {
     GHC.Event.Thread.ioManagerLock_closure:
         const GHC.Event.Thread.ioManagerLock_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.ioManagerLock_entry() //  [R1]
         { []
         }
     {offset
       caP5d: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caP5e; else goto caP5f;
       caP5e: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caP5f: // global
           (_caP58::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caP58::I64 == 0) goto caP5a; else goto caP59;
       caP5a: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caP59: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caP58::I64;
           I64[Sp - 24] = block_caP5b_info;
           Sp = Sp - 24;
           call lvl8_raLJw_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerLock_info" {
     GHC.Event.Thread.ioManagerLock_info:
         const GHC.Event.Thread.ioManagerLock_entry;
         const 0;
         const 21;
 },
 _caP5b() //  [R1]
         { []
         }
     {offset
       caP5b: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caP5b_info" {
     block_caP5b_info:
         const _caP5b;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.072959391 UTC

[section ""data" . lvl9_raLJx_closure" {
     lvl9_raLJx_closure:
         const lvl9_raLJx_info;
         const 0;
 },
 sat_saLPr_entry() //  [R1]
         { []
         }
     {offset
       caP6a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caP6b; else goto caP6c;
       caP6b: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP6c: // global
           I64[Sp - 16] = block_caP61_info;
           _saLP2::P64 = P64[R1 + 7];
           R1 = _saLP2::P64;
           P64[Sp - 8] = _saLP2::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLPr_info" {
     sat_saLPr_info:
         const sat_saLPr_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caP61() //  [R1]
         { []
         }
     {offset
       caP61: // global
           _saLP2::P64 = P64[Sp + 8];
           (_saLPm::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadEventManagerStore(R1);
           if (R1 == _saLPm::I64) goto caP69; else goto caP68;
       caP69: // global
           R1 = _saLP2::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caP68: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLPm::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP61_info" {
     block_caP61_info:
         const _caP61;
         const 1;
         const 30;
 },
 lvl9_raLJx_entry() //  []
         { []
         }
     {offset
       caP6h: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caP6i; else goto caP6j;
       caP6i: // global
           R1 = lvl9_raLJx_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP6j: // global
           I64[Sp - 8] = block_caP5x_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_raLJx_info" {
     lvl9_raLJx_info:
         const lvl9_raLJx_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SaMem_srt+160;
 },
 _caP5x() //  []
         { []
         }
     {offset
       caP5x: // global
           _saLON::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]) - 1;
           if (%MO_S_Gt_W64(0, _saLON::I64)) goto caP6M; else goto caP6N;
       caP6M: // global
           _saLOP::I64 = 0;
           goto saLOO;
       caP6N: // global
           _saLOP::I64 = _saLON::I64 + 1;
           goto saLOO;
       saLOO: // global
           if (%MO_S_Ge_W64(_saLOP::I64, 0)) goto caP6n; else goto caP6I;
       caP6n: // global
           I64[Sp - 16] = block_caP5K_info;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _saLOP::I64;
           I64[Sp - 8] = _saLOP::I64;
           I64[Sp] = _saLON::I64;
           Sp = Sp - 16;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       caP6I: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP5x_info" {
     block_caP5x_info:
         const _caP5x;
         const 0;
         const 4294967326;
         const SaMem_srt+160;
 },
 _caP5K() //  [R1]
         { []
         }
     {offset
       caP5K: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caP6q; else goto caP6p;
       caP6q: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caP6p: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = lvl1_raLJo_closure+1;
           P64[Hp - 16] = Hp - 47;
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 16] = block_caP5O_info;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP5K_info" {
     block_caP5K_info:
         const _caP5K;
         const 194;
         const 30;
 },
 _caP5O() //  [R1]
         { []
         }
     {offset
       caP5O: // global
           I64[Sp - 8] = block_caP5Q_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP5O_info" {
     block_caP5O_info:
         const _caP5O;
         const 0;
         const 30;
 },
 _caP5Q() //  [R1]
         { []
         }
     {offset
       caP5Q: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caP6u; else goto caP6t;
       caP6u: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caP6t: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caP5S::P64 = Hp - 23;
           if (R1 == 0) goto caP6H; else goto caP6x;
       caP6H: // global
           I64[Hp - 8] = sat_saLPr_info;
           P64[Hp] = _caP5S::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caP6x: // global
           Hp = Hp - 16;
           I64[Sp] = block_caP6v_info;
           R1 = _caP5S::P64;
           P64[Sp + 8] = _caP5S::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP5Q_info" {
     block_caP5Q_info:
         const _caP5Q;
         const 1;
         const 30;
 },
 _caP6v() //  [R1]
         { []
         }
     {offset
       caP6v: // global
           _caP5S::P64 = P64[Sp + 8];
           (_saLPa::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadEventManagerStore(R1);
           if (R1 == _saLPa::I64) goto caP6G; else goto caP6F;
       caP6G: // global
           R1 = _caP5S::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caP6F: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saLPa::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP6v_info" {
     block_caP6v_info:
         const _caP6v;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.088907263 UTC

[section ""data" . GHC.Event.Thread.eventManager_closure" {
     GHC.Event.Thread.eventManager_closure:
         const GHC.Event.Thread.eventManager_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.eventManager_entry() //  [R1]
         { []
         }
     {offset
       caP7B: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caP7C; else goto caP7D;
       caP7C: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caP7D: // global
           (_caP7w::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caP7w::I64 == 0) goto caP7y; else goto caP7x;
       caP7y: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caP7x: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caP7w::I64;
           I64[Sp - 24] = block_caP7z_info;
           Sp = Sp - 24;
           call lvl9_raLJx_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.eventManager_info" {
     GHC.Event.Thread.eventManager_info:
         const GHC.Event.Thread.eventManager_entry;
         const 0;
         const 4294967317;
         const SaMem_srt+168;
 },
 _caP7z() //  [R1]
         { []
         }
     {offset
       caP7z: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caP7z_info" {
     block_caP7z_info:
         const _caP7z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.094129224 UTC

[section ""cstring" . GHC.Event.Thread.ensureIOManagerIsRunning5_bytes" {
     GHC.Event.Thread.ensureIOManagerIsRunning5_bytes:
         I8[] [84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.096299681 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning4_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning4_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning4_entry() //  [R1]
         { []
         }
     {offset
       caP7Y: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caP7Z; else goto caP80;
       caP7Z: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caP80: // global
           (_caP7V::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caP7V::I64 == 0) goto caP7X; else goto caP7W;
       caP7X: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caP7W: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caP7V::I64;
           R2 = GHC.Event.Thread.ensureIOManagerIsRunning5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning4_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning4_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.105526028 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning3_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning3_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning3_info;
         const 0;
 },
 sat_saLPZ_entry() //  [R1]
         { []
         }
     {offset
       caP8J: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caP8K; else goto caP8L;
       caP8K: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP8L: // global
           R6 = I64[R1 + 55];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           I64[Sp - 32] = I64[R1 + 63];
           I64[Sp - 24] = I64[R1 + 71];
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           Sp = Sp - 32;
           call GHC.Event.TimerManager.$wloop_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLPZ_info" {
     sat_saLPZ_info:
         const sat_saLPZ_entry;
         const 12884901894;
         const 4294967304;
         const 4294967299;
         const SaMem_srt+176;
 },
 sat_saLQ0_entry() //  [R1]
         { []
         }
     {offset
       caP8M: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caP8Q; else goto caP8P;
       caP8Q: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP8P: // global
           _saLPG::P64 = P64[R1 + 7];
           _saLPH::P64 = P64[R1 + 15];
           _saLPI::P64 = P64[R1 + 23];
           _saLPJ::P64 = P64[R1 + 31];
           _saLPN::P64 = P64[R1 + 39];
           _saLPO::P64 = P64[R1 + 47];
           _saLPK::I64 = I64[R1 + 55];
           _saLPL::I64 = I64[R1 + 63];
           _saLPM::I64 = I64[R1 + 71];
           I64[Hp - 72] = sat_saLPZ_info;
           P64[Hp - 64] = _saLPG::P64;
           P64[Hp - 56] = _saLPH::P64;
           P64[Hp - 48] = _saLPI::P64;
           P64[Hp - 40] = _saLPJ::P64;
           P64[Hp - 32] = _saLPN::P64;
           P64[Hp - 24] = _saLPO::P64;
           I64[Hp - 16] = _saLPK::I64;
           I64[Hp - 8] = _saLPL::I64;
           I64[Hp] = _saLPM::I64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 71;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLQ0_info" {
     sat_saLQ0_info:
         const sat_saLQ0_entry;
         const 12884901894;
         const 562954248388616;
         const 4294967299;
         const SaMem_srt+40;
 },
 sat_saLQ9_entry() //  [R1, R2]
         { []
         }
     {offset
       caP91: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caP95; else goto caP96;
       caP95: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caP96: // global
           I64[Sp - 16] = block_caP8Y_info;
           _saLQ3::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saLQ3::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaP9a; else goto caP8Z;
       uaP9a: // global
           call _caP8Y(R1) args: 0, res: 0, upd: 0;
       caP8Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLQ9_info" {
     sat_saLQ9_info:
         const sat_saLQ9_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caP8Y() //  [R1]
         { []
         }
     {offset
       caP8Y: // global
           _saLQ3::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caP94_info;
           R2 = I64[R1 + 7];
           R1 = _saLQ3::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP8Y_info" {
     block_caP8Y_info:
         const _caP8Y;
         const 1;
         const 30;
 },
 _caP94() //  []
         { []
         }
     {offset
       caP94: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP94_info" {
     block_caP94_info:
         const _caP94;
         const 0;
         const 30;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning3_entry() //  []
         { []
         }
     {offset
       caP9b: // global
           if ((Sp + -88) < SpLim) (likely: False) goto caP9g; else goto caP9h;
       caP9g: // global
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning3_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caP9h: // global
           I64[Sp - 8] = block_caP8c_info;
           Sp = Sp - 8;
           call GHC.Event.Poll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning3_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning3_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning3_entry;
         const 0;
         const 17486645813051406;
         const 4294967299;
         const SaMem_srt+40;
 },
 _caP8c() //  [R1]
         { []
         }
     {offset
       caP8c: // global
           I64[Sp] = block_caP8e_info;
           R2 = R1;
           call GHC.Event.TimerManager.new2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP8c_info" {
     block_caP8c_info:
         const _caP8c;
         const 0;
         const 11857146278838302;
         const SaMem_srt+40;
 },
 _caP8e() //  [R1]
         { []
         }
     {offset
       caP8e: // global
           I64[Sp] = block_caP8g_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaP9u; else goto caP8h;
       uaP9u: // global
           call _caP8g(R1) args: 0, res: 0, upd: 0;
       caP8h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP8e_info" {
     block_caP8e_info:
         const _caP8e;
         const 0;
         const 9605346465153054;
         const SaMem_srt+40;
 },
 _caP8g() //  [R1]
         { []
         }
     {offset
       caP8g: // global
           _saLPG::P64 = P64[R1 + 7];
           _saLPH::P64 = P64[R1 + 15];
           _saLPI::P64 = P64[R1 + 23];
           _saLPJ::P64 = P64[R1 + 31];
           _saLPN::P64 = P64[R1 + 39];
           _saLPO::P64 = P64[R1 + 47];
           _saLPK::I64 = I64[R1 + 55];
           _saLPL::I64 = I64[R1 + 63];
           _saLPM::I64 = I64[R1 + 71];
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setTimerManagerControlFd(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saLPL::I64)));
           I64[Sp - 80] = block_caP8q_info;
           _saLPF::P64 = R1;
           R1 = GHC.Event.Thread.timerManager_closure;
           P64[Sp - 72] = _saLPG::P64;
           P64[Sp - 64] = _saLPH::P64;
           P64[Sp - 56] = _saLPI::P64;
           P64[Sp - 48] = _saLPJ::P64;
           I64[Sp - 40] = _saLPK::I64;
           I64[Sp - 32] = _saLPL::I64;
           I64[Sp - 24] = _saLPM::I64;
           P64[Sp - 16] = _saLPN::P64;
           P64[Sp - 8] = _saLPO::P64;
           P64[Sp] = _saLPF::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto uaP9v; else goto caP8r;
       uaP9v: // global
           call _caP8q(R1) args: 0, res: 0, upd: 0;
       caP8r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP8g_info" {
     block_caP8g_info:
         const _caP8g;
         const 0;
         const 9605346465153054;
         const SaMem_srt+40;
 },
 _caP8q() //  [R1]
         { []
         }
     {offset
       caP8q: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caP9n; else goto caP9m;
       caP9n: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caP9m: // global
           _saLPU::P64 = P64[R1 + 7];
           I64[Hp - 88] = GHC.Base.Just_con_info;
           P64[Hp - 80] = P64[Sp + 80];
           _saLPG::P64 = P64[Sp + 8];
           _saLPH::P64 = P64[Sp + 16];
           _saLPI::P64 = P64[Sp + 24];
           _saLPJ::P64 = P64[Sp + 32];
           _saLPK::I64 = I64[Sp + 40];
           _saLPL::I64 = I64[Sp + 48];
           _saLPM::I64 = I64[Sp + 56];
           _saLPN::P64 = P64[Sp + 64];
           _saLPO::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_saLPU::P64 + 8] = Hp - 86;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saLPU::P64);
           I64[Hp - 72] = sat_saLQ0_info;
           P64[Hp - 64] = _saLPG::P64;
           P64[Hp - 56] = _saLPH::P64;
           P64[Hp - 48] = _saLPI::P64;
           P64[Hp - 40] = _saLPJ::P64;
           P64[Hp - 32] = _saLPN::P64;
           P64[Hp - 24] = _saLPO::P64;
           I64[Hp - 16] = _saLPK::I64;
           I64[Hp - 8] = _saLPL::I64;
           I64[Hp] = _saLPM::I64;
           I64[Sp + 80] = block_caP8R_info;
           R1 = Hp - 71;
           Sp = Sp + 80;
           call stg_fork#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP8q_info" {
     block_caP8q_info:
         const _caP8q;
         const 7178;
         const 9570162093064222;
         const SaMem_srt+40;
 },
 _caP8R() //  [R1]
         { []
         }
     {offset
       caP8R: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caP9q; else goto caP9p;
       caP9q: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caP9p: // global
           I64[Hp - 8] = sat_saLQ9_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_caP9c_info;
           R4 = Hp - 6;
           R3 = GHC.Event.Thread.ensureIOManagerIsRunning4_closure;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caP8R_info" {
     block_caP8R_info:
         const _caP8R;
         const 0;
         const 4503603922337822;
         const SaMem_srt+48;
 },
 _caP9c() //  [R1]
         { []
         }
     {offset
       caP9c: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caP9t; else goto caP9s;
       caP9t: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caP9s: // global
           I64[Hp - 24] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caP9c_info" {
     block_caP9c_info:
         const _caP9c;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.131545325 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning2_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning2_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning2_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning2_entry() //  [R2]
         { []
         }
     {offset
       caPaz: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caPaA; else goto caPaB;
       caPaA: // global
           R2 = R2;
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPaB: // global
           I64[Sp - 8] = block_caPas_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPcm; else goto caPat;
       uaPcm: // global
           call _caPas(R1) args: 0, res: 0, upd: 0;
       caPat: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning2_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning2_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning2_entry;
         const 0;
         const 2753074036750;
         const 8589934597;
         const SaMem_srt+144;
 },
 _caPas() //  [R1]
         { []
         }
     {offset
       caPas: // global
           if (R1 & 7 == 1) goto uaPch; else goto caPax;
       uaPch: // global
           Sp = Sp + 8;
           call _caPbe() args: 0, res: 0, upd: 0;
       caPax: // global
           I64[Sp - 8] = block_caPaH_info;
           _saLQh::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _saLQh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPck; else goto caPaJ;
       uaPck: // global
           call _caPaH(R1) args: 0, res: 0, upd: 0;
       caPaJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPas_info" {
     block_caPas_info:
         const _caPas;
         const 0;
         const 554050781214;
         const SaMem_srt+144;
 },
 _caPaH() //  [R1]
         { []
         }
     {offset
       caPaH: // global
           I64[Sp] = block_caPaN_info;
           R1 = P64[R1 + 7];
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPaH_info" {
     block_caPaH_info:
         const _caPaH;
         const 1;
         const 554050781214;
         const SaMem_srt+144;
 },
 _caPaN() //  [R1]
         { []
         }
     {offset
       caPaN: // global
           if (R1 == 16) goto uaPci; else goto uaPcg;
       uaPci: // global
           Sp = Sp + 16;
           call _caPbe() args: 0, res: 0, upd: 0;
       uaPcg: // global
           if (R1 == 17) goto caPb1; else goto caPaV;
       caPb1: // global
           I64[Sp + 8] = block_caPb0_info;
           R1 = GHC.Event.Thread.timerManager_closure;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaPcn; else goto caPb2;
       uaPcn: // global
           call _caPb0(R1) args: 0, res: 0, upd: 0;
       caPb2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPaV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPaN_info" {
     block_caPaN_info:
         const _caPaN;
         const 1;
         const 554050781214;
         const SaMem_srt+144;
 },
 _caPb0() //  [R1]
         { []
         }
     {offset
       caPb0: // global
           _saLQv::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caPb6_info;
           R1 = _saLQv::P64;
           if (R1 & 7 != 0) goto uaPcp; else goto caPb8;
       uaPcp: // global
           call _caPb6(R1) args: 0, res: 0, upd: 0;
       caPb8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPb0_info" {
     block_caPb0_info:
         const _caPb0;
         const 0;
         const 4294967326;
         const SaMem_srt+200;
 },
 _caPb6() //  [R1]
         { []
         }
     {offset
       caPb6: // global
           if (R1 & 7 == 1) goto uaPcj; else goto caPbq;
       uaPcj: // global
           Sp = Sp + 8;
           call _caPbe() args: 0, res: 0, upd: 0;
       caPbq: // global
           _saLQx::P64 = P64[R1 + 6];
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setTimerManagerControlFd((-1));
           I64[Sp] = block_caPbj_info;
           R1 = _saLQx::P64;
           if (R1 & 7 != 0) goto uaPcq; else goto caPbk;
       uaPcq: // global
           call _caPbj(R1) args: 0, res: 0, upd: 0;
       caPbk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPb6_info" {
     block_caPb6_info:
         const _caPb6;
         const 0;
         const 4294967326;
         const SaMem_srt+200;
 },
 _caPbe() //  []
         { []
         }
     {offset
       caPbe: // global
           call GHC.Event.Thread.ensureIOManagerIsRunning3_entry() args: 8, res: 0, upd: 8;
     }
 },
 _caPbj() //  [R1]
         { []
         }
     {offset
       caPbj: // global
           I64[Sp - 48] = block_caPbo_info;
           _saLQE::P64 = P64[R1 + 23];
           _saLQJ::P64 = P64[R1 + 39];
           _saLQK::P64 = P64[R1 + 47];
           _saLQG::I64 = I64[R1 + 55];
           _saLQH::I64 = I64[R1 + 63];
           _saLQI::I64 = I64[R1 + 71];
           R1 = P64[R1 + 7];
           I64[Sp - 40] = _saLQG::I64;
           I64[Sp - 32] = _saLQH::I64;
           I64[Sp - 24] = _saLQI::I64;
           P64[Sp - 16] = _saLQJ::P64;
           P64[Sp - 8] = _saLQK::P64;
           P64[Sp] = _saLQE::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uaPcs; else goto caPbs;
       uaPcs: // global
           call _caPbo(R1) args: 0, res: 0, upd: 0;
       caPbs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPbj_info" {
     block_caPbj_info:
         const _caPbj;
         const 0;
         const 4294967326;
         const SaMem_srt+200;
 },
 _caPbo() //  [R1]
         { []
         }
     {offset
       caPbo: // global
           _saLQE::P64 = P64[Sp + 48];
           _saLQM::P64 = P64[R1 + 7];
           _saLQQ::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saLQE::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saLQE::P64);
           I64[Sp] = block_caPbz_info;
           R2 = _saLQM::P64;
           R1 = _saLQQ::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPbo_info" {
     block_caPbo_info:
         const _caPbo;
         const 454;
         const 4294967326;
         const SaMem_srt+200;
 },
 _caPbz() //  []
         { []
         }
     {offset
       caPbz: // global
           I64[Sp] = block_caPbB_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPbz_info" {
     block_caPbz_info:
         const _caPbz;
         const 2502;
         const 4294967326;
         const SaMem_srt+200;
 },
 _caPbB() //  []
         { []
         }
     {offset
       caPbB: // global
           _saLQH::I64 = I64[Sp + 16];
           _saLQJ::P64 = P64[Sp + 32];
           (_saLR2::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saLR7::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saLQH::I64)));
           I64[Sp + 16] = block_caPbQ_info;
           R1 = _saLQJ::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaPct; else goto caPbR;
       uaPct: // global
           call _caPbQ(R1) args: 0, res: 0, upd: 0;
       caPbR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPbB_info" {
     block_caPbB_info:
         const _caPbB;
         const 3526;
         const 4294967326;
         const SaMem_srt+200;
 },
 _caPbQ() //  [R1]
         { []
         }
     {offset
       caPbQ: // global
           _saLQI::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caPbX; else goto caPc1;
       caPbX: // global
           (_saLRd::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saLQI::I64)));
           Sp = Sp + 40;
           call GHC.Event.Thread.ensureIOManagerIsRunning3_entry() args: 8, res: 0, upd: 8;
       caPc1: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saLRl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saLQI::I64)));
           Sp = Sp + 40;
           call GHC.Event.Thread.ensureIOManagerIsRunning3_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPbQ_info" {
     block_caPbQ_info:
         const _caPbQ;
         const 964;
         const 4294967326;
         const SaMem_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.156993038 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning6_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning6_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning6_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning6_entry() //  [R2]
         { []
         }
     {offset
       caPdt: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caPdH; else goto caPdI;
       caPdH: // global
           R2 = R2;
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPdI: // global
           I64[Sp - 8] = block_caPdq_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPeR; else goto caPdr;
       uaPeR: // global
           call _caPdq(R1) args: 0, res: 0, upd: 0;
       caPdr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning6_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning6_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning6_entry;
         const 0;
         const 246294899589134;
         const 8589934597;
         const SaMem_srt+120;
 },
 _caPdq() //  [R1]
         { []
         }
     {offset
       caPdq: // global
           _saLRs::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caPdw_info;
           R1 = _saLRs::P64;
           if (R1 & 7 != 0) goto uaPeQ; else goto caPdx;
       uaPeQ: // global
           call _caPdw(R1) args: 0, res: 0, upd: 0;
       caPdx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPdq_info" {
     block_caPdq_info:
         const _caPdq;
         const 0;
         const 70373039144990;
         const SaMem_srt+120;
 },
 _caPdw() //  [R1]
         { []
         }
     {offset
       caPdw: // global
           I64[Sp - 16] = block_caPdB_info;
           _saLRu::P64 = P64[R1 + 7];
           _saLRx::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saLRx::P64;
           P64[Sp] = _saLRu::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPeS; else goto caPdC;
       uaPeS: // global
           call _caPdB(R1) args: 0, res: 0, upd: 0;
       caPdC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPdw_info" {
     block_caPdw_info:
         const _caPdw;
         const 0;
         const 70373039144990;
         const SaMem_srt+120;
 },
 _caPdB() //  [R1]
         { []
         }
     {offset
       caPdB: // global
           I64[Sp] = block_caPdG_info;
           _saLRz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saLRz::I64;
           if (R1 & 7 != 0) goto uaPeT; else goto caPdM;
       uaPeT: // global
           call _caPdG(R1) args: 0, res: 0, upd: 0;
       caPdM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPdB_info" {
     block_caPdB_info:
         const _caPdB;
         const 2;
         const 70373039144990;
         const SaMem_srt+120;
 },
 _caPdG() //  [R1]
         { []
         }
     {offset
       caPdG: // global
           if (%MO_S_Le_W64(0, I64[Sp + 16])) goto caPen; else goto caPeq;
       caPen: // global
           I64[Sp - 8] = 0;
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _caPeb() args: 0, res: 0, upd: 0;
       caPeq: // global
           I64[Sp + 8] = block_caPep_info;
           R1 = GHC.Event.Thread.numEnabledEventManagers_closure;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaPeU; else goto caPer;
       uaPeU: // global
           call _caPep(R1) args: 0, res: 0, upd: 0;
       caPer: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPdG_info" {
     block_caPdG_info:
         const _caPdG;
         const 130;
         const 70373039144990;
         const SaMem_srt+120;
 },
 _caPeb() //  []
         { []
         }
     {offset
       caPeb: // global
           I64[Sp - 8] = block_caPed_info;
           R5 = I64[Sp];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Event.Thread.$wstartIOManagerThread_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _caPed() //  []
         { []
         }
     {offset
       caPed: // global
           _saLRL::I64 = I64[Sp + 8];
           if (_saLRL::I64 == I64[Sp + 32]) goto caPel; else goto caPek;
       caPel: // global
           I64[Sp + 24] = block_caPdZ_info;
           R1 = GHC.Event.Thread.numEnabledEventManagers_closure;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaPeW; else goto caPe1;
       uaPeW: // global
           call _caPdZ(R1) args: 0, res: 0, upd: 0;
       caPe1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPek: // global
           I64[Sp + 8] = _saLRL::I64 + 1;
           Sp = Sp + 8;
           call _caPeb() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPed_info" {
     block_caPed_info:
         const _caPed;
         const 708;
         const 70373039144990;
         const SaMem_srt+120;
 },
 _caPdZ() //  [R1]
         { []
         }
     {offset
       caPdZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPe7; else goto caPe6;
       caPe7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPe6: // global
           _saLRG::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] + 1;
           call MO_WriteBarrier();
           P64[_saLRG::P64 + 8] = Hp - 7;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saLRG::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPdZ_info" {
     block_caPdZ_info:
         const _caPdZ;
         const 65;
         const 30;
 },
 _caPep() //  [R1]
         { []
         }
     {offset
       caPep: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPex; else goto caPew;
       caPex: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPew: // global
           _saLRT::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] + 1;
           call MO_WriteBarrier();
           P64[_saLRT::P64 + 8] = Hp - 7;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saLRT::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPep_info" {
     block_caPep_info:
         const _caPep;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.174505949 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning1_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning1_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning1_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning1_entry() //  []
         { []
         }
     {offset
       caPfT: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPfU; else goto caPfV;
       caPfU: // global
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPfV: // global
           (_saLS1::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] rtsSupportsBoundThreads();
           if (_saLS1::I64 == 0) goto caPfS; else goto caPfR;
       caPfS: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caPfR: // global
           I64[Sp - 8] = block_caPfX_info;
           R1 = GHC.Event.Thread.ioManagerLock_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPgc; else goto caPfY;
       uaPgc: // global
           call _caPfX(R1) args: 0, res: 0, upd: 0;
       caPfY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning1_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning1_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning1_entry;
         const 0;
         const 519691042830;
         const 4294967299;
         const SaMem_srt+216;
 },
 _caPfX() //  [R1]
         { []
         }
     {offset
       caPfX: // global
           I64[Sp] = block_caPg2_info;
           R3 = GHC.Event.Thread.ensureIOManagerIsRunning6_closure+2;
           R2 = P64[R1 + 7];
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPfX_info" {
     block_caPfX_info:
         const _caPfX;
         const 0;
         const 176093659166;
         const SaMem_srt+216;
 },
 _caPg2() //  []
         { []
         }
     {offset
       caPg2: // global
           I64[Sp] = block_caPg4_info;
           R1 = GHC.Event.Thread.timerManagerThreadVar_closure;
           if (R1 & 7 != 0) goto uaPgd; else goto caPg7;
       uaPgd: // global
           call _caPg4(R1) args: 0, res: 0, upd: 0;
       caPg7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPg2_info" {
     block_caPg2_info:
         const _caPg2;
         const 0;
         const 141733920798;
         const SaMem_srt+216;
 },
 _caPg4() //  [R1]
         { []
         }
     {offset
       caPg4: // global
           R3 = GHC.Event.Thread.ensureIOManagerIsRunning2_closure+2;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wmodifyMVar__entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPg4_info" {
     block_caPg4_info:
         const _caPg4;
         const 0;
         const 4294967326;
         const SaMem_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.183279231 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning_entry() //  []
         { []
         }
     {offset
       caPgz: // global
           call GHC.Event.Thread.ensureIOManagerIsRunning1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaMem_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.186666229 UTC

[section ""cstring" . lvl10_raLJy_bytes" {
     lvl10_raLJy_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,51,53,51,58,49,53,45,50,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.188903344 UTC

[section ""data" . lvl11_raLJz_closure" {
     lvl11_raLJz_closure:
         const lvl11_raLJz_info;
         const 0;
 },
 lvl11_raLJz_entry() //  []
         { []
         }
     {offset
       caPgN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPgO; else goto caPgP;
       caPgO: // global
           R1 = lvl11_raLJz_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPgP: // global
           I64[Sp - 8] = block_caPgL_info;
           R2 = lvl10_raLJy_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl11_raLJz_info" {
     lvl11_raLJz_info:
         const lvl11_raLJz_entry;
         const 0;
         const 1125904201809934;
         const 4294967299;
         const SaMem_srt+128;
 },
 _caPgL() //  [R1]
         { []
         }
     {offset
       caPgL: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPgL_info" {
     block_caPgL_info:
         const _caPgL;
         const 0;
         const 4294967326;
         const SaMem_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.193956576 UTC

[section ""cstring" . lvl12_raLJA_bytes" {
     lvl12_raLJA_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,51,51,57,58,49,55,45,51,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.196192633 UTC

[section ""data" . lvl13_raLJB_closure" {
     lvl13_raLJB_closure:
         const lvl13_raLJB_info;
         const 0;
 },
 lvl13_raLJB_entry() //  []
         { []
         }
     {offset
       caPh8: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPh9; else goto caPha;
       caPh9: // global
           R1 = lvl13_raLJB_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPha: // global
           I64[Sp - 8] = block_caPh6_info;
           R2 = lvl12_raLJA_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl13_raLJB_info" {
     lvl13_raLJB_info:
         const lvl13_raLJB_entry;
         const 0;
         const 2251804108652558;
         const 4294967299;
         const SaMem_srt+128;
 },
 _caPh6() //  [R1]
         { []
         }
     {offset
       caPh6: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPh6_info" {
     block_caPh6_info:
         const _caPh6;
         const 0;
         const 4294967326;
         const SaMem_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.201075132 UTC

[section ""data" . lvl14_raLJC_closure" {
     lvl14_raLJC_closure:
         const lvl14_raLJC_info;
         const 0;
 },
 lvl14_raLJC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caPhq: // global
           R6 = lvl4_raLJs_closure;
           R5 = R4;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl14_raLJC_info" {
     lvl14_raLJC_info:
         const lvl14_raLJC_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SaMem_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.204524854 UTC

[section ""data" . lvl15_raLJD_closure" {
     lvl15_raLJD_closure:
         const lvl15_raLJD_info;
         const 0;
 },
 lvl15_raLJD_entry() //  [R2, R3]
         { []
         }
     {offset
       caPhB: // global
           R6 = lvl4_raLJs_closure;
           R5 = R3;
           R4 = R2;
           R3 = lvl1_raLJo_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_raLJD_info" {
     lvl15_raLJD_info:
         const lvl15_raLJD_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SaMem_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.221647415 UTC

[section ""data" . GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure" {
     GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure:
         const GHC.Event.Thread.$wioManagerCapabilitiesChanged_info;
         const 0;
 },
 GHC.Event.Thread.$wioManagerCapabilitiesChanged_entry() //  []
         { []
         }
     {offset
       caPju: // global
           if ((Sp + -136) < SpLim) (likely: False) goto caPjv; else goto caPjw;
       caPjv: // global
           R1 = GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPjw: // global
           _saLSm::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]);
           I64[Sp - 16] = block_caPhM_info;
           R1 = GHC.Event.Thread.numEnabledEventManagers_closure;
           I64[Sp - 8] = _saLSm::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPoi; else goto caPhN;
       uaPoi: // global
           call _caPhM(R1) args: 0, res: 0, upd: 0;
       caPhN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wioManagerCapabilitiesChanged_info" {
     GHC.Event.Thread.$wioManagerCapabilitiesChanged_info:
         const GHC.Event.Thread.$wioManagerCapabilitiesChanged_entry;
         const 0;
         const 4474335305058484238;
         const 4294967299;
         const SaMem_srt+72;
 },
 _caPhM() //  [R1]
         { []
         }
     {offset
       caPhM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPjz; else goto caPjy;
       caPjz: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPjy: // global
           _saLSo::P64 = P64[R1 + 7];
           _saLSr::P64 = P64[_saLSo::P64 + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[_saLSo::P64 + 8] = Hp - 7;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saLSo::P64);
           I64[Sp - 8] = block_caPhV_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           P64[Sp] = _saLSr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPo4; else goto caPhW;
       uaPo4: // global
           call _caPhV(R1) args: 0, res: 0, upd: 0;
       caPhW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPhM_info" {
     block_caPhM_info:
         const _caPhM;
         const 65;
         const 3893370953127690270;
         const SaMem_srt+72;
 },
 _caPhV() //  [R1]
         { []
         }
     {offset
       caPhV: // global
           I64[Sp - 8] = block_caPi0_info;
           _saLSv::P64 = P64[R1 + 7];
           R1 = P64[_saLSv::P64 + 8];
           P64[Sp] = _saLSv::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPo5; else goto caPi1;
       uaPo5: // global
           call _caPi0(R1) args: 0, res: 0, upd: 0;
       caPi1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPhV_info" {
     block_caPhV_info:
         const _caPhV;
         const 130;
         const 3891119153314005022;
         const SaMem_srt+72;
 },
 _caPi0() //  [R1]
         { []
         }
     {offset
       caPi0: // global
           I64[Sp - 16] = block_caPi5_info;
           _saLSA::P64 = P64[R1 + 7];
           _saLSD::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saLSD::P64;
           P64[Sp] = _saLSA::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPo6; else goto caPi6;
       uaPo6: // global
           call _caPi5(R1) args: 0, res: 0, upd: 0;
       caPi6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPi0_info" {
     block_caPi0_info:
         const _caPi0;
         const 259;
         const 3891119153314005022;
         const SaMem_srt+72;
 },
 _caPi5() //  [R1]
         { []
         }
     {offset
       caPi5: // global
           I64[Sp - 8] = block_caPia_info;
           _saLSE::P64 = R1;
           _saLSF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saLSF::I64;
           P64[Sp + 16] = _saLSE::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPo7; else goto caPib;
       uaPo7: // global
           call _caPia(R1) args: 0, res: 0, upd: 0;
       caPib: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPi5_info" {
     block_caPi5_info:
         const _caPi5;
         const 1029;
         const 3891119153314005022;
         const SaMem_srt+72;
 },
 _caPia() //  [R1]
         { []
         }
     {offset
       caPia: // global
           _saLSm::I64 = I64[Sp + 48];
           _saLSH::I64 = I64[R1 + 7];
           _saLSI::I64 = I64[Sp + 8] + 1;
           if (%MO_S_Le_W64(_saLSm::I64,
                            _saLSI::I64)) goto caPjF; else goto caPnr;
       caPjF: // global
           I64[Sp] = block_caPil_info;
           _saLSG::P64 = R1;
           R1 = P64[Sp + 40];
           I64[Sp + 32] = _saLSH::I64;
           P64[Sp + 40] = _saLSG::P64;
           if (R1 & 7 != 0) goto uaPo8; else goto caPim;
       uaPo8: // global
           call _caPil(R1) args: 0, res: 0, upd: 0;
       caPim: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPnr: // global
           _saLTn::I64 = _saLSm::I64 - 1;
           if (%MO_S_Gt_W64(0, _saLTn::I64)) goto caPnp; else goto caPnq;
       caPnp: // global
           _saLSG::P64 = R1;
           _saLTp::I64 = 0;
           goto saLTo;
       caPnq: // global
           _saLSG::P64 = R1;
           _saLTp::I64 = _saLTn::I64 + 1;
           goto saLTo;
       saLTo: // global
           if (%MO_S_Ge_W64(_saLTp::I64, 0)) goto caPkK; else goto caPnl;
       caPkK: // global
           I64[Sp - 32] = block_caPj4_info;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _saLTp::I64;
           I64[Sp - 24] = _saLSI::I64;
           I64[Sp - 16] = _saLTn::I64;
           I64[Sp - 8] = _saLTp::I64;
           I64[Sp] = _saLSH::I64;
           P64[Sp + 48] = _saLSG::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       caPnl: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPia_info" {
     block_caPia_info:
         const _caPia;
         const 2118;
         const 3891119153314005022;
         const SaMem_srt+72;
 },
 _caPil() //  [R1]
         { []
         }
     {offset
       caPil: // global
           _saLSm::I64 = I64[Sp + 48];
           _saLSL::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_saLSm::I64,
                            _saLSL::I64)) goto uaPnO; else goto caPkH;
       uaPnO: // global
           Sp = Sp + 56;
           goto uaPoa;
       caPkH: // global
           _saLSN::I64 = _saLSm::I64 - 1;
           if (%MO_S_Le_W64(_saLSL::I64,
                            _saLSN::I64)) goto caPkF; else goto uaPnP;
       caPkF: // global
           I64[Sp] = _saLSL::I64;
           I64[Sp + 48] = _saLSN::I64;
           call _caPiH() args: 0, res: 0, upd: 0;
       uaPnP: // global
           Sp = Sp + 56;
           goto uaPoa;
       uaPoa: // global
           call _caPkG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPil_info" {
     block_caPil_info:
         const _caPil;
         const 2630;
         const 1297036696977670174;
         const SaMem_srt+72;
 },
 _caPiH() //  []
         { []
         }
     {offset
       caPiH: // global
           Hp = Hp + 16;
           _saLSY::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto caPjT; else goto caPjS;
       caPjT: // global
           HpAlloc = 16;
           I64[Sp] = block_caPiG_info;
           R1 = _saLSY::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPjS: // global
           _saLSE::P64 = P64[Sp + 24];
           _saLSG::P64 = P64[Sp + 40];
           _saLSH::I64 = I64[Sp + 32];
           if (%MO_S_Gt_W64(_saLSH::I64,
                            _saLSY::I64)) goto caPjV; else goto caPkD;
       caPjV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saLSY::I64;
           R4 = Hp - 7;
           R3 = _saLSG::P64;
           R2 = _saLSE::P64;
           Sp = Sp + 56;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caPkD: // global
           if (%MO_S_Gt_W64(_saLSY::I64,
                            I64[Sp + 8])) goto caPjX; else goto caPk3;
       caPjX: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saLSY::I64;
           R4 = Hp - 7;
           R3 = _saLSG::P64;
           R2 = _saLSE::P64;
           Sp = Sp + 56;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caPk3: // global
           Hp = Hp - 16;
           _saLT7::P64 = P64[P64[Sp + 16] + ((_saLSY::I64 - _saLSH::I64 << 3) + 24)];
           I64[Sp - 8] = block_caPk2_info;
           R1 = _saLT7::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPod; else goto caPk4;
       uaPod: // global
           call _caPk2(R1) args: 0, res: 0, upd: 0;
       caPk4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caPiG() //  [R1]
         { []
         }
     {offset
       caPiG: // global
           I64[Sp] = R1;
           call _caPiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPiG_info" {
     block_caPiG_info:
         const _caPiG;
         const 2630;
         const 1297036696977670174;
         const SaMem_srt+72;
 },
 _caPk2() //  [R1]
         { []
         }
     {offset
       caPk2: // global
           if (R1 & 7 == 1) goto caPka; else goto caPkf;
       caPka: // global
           Sp = Sp + 64;
           call lvl11_raLJz_entry() args: 8, res: 0, upd: 8;
       caPkf: // global
           I64[Sp] = block_caPkd_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaPoj; else goto caPkg;
       uaPoj: // global
           call _caPkd(R1) args: 0, res: 0, upd: 0;
       caPkg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPk2_info" {
     block_caPk2_info:
         const _caPk2;
         const 5319;
         const 1297036696977670174;
         const SaMem_srt+72;
 },
 _caPkd() //  [R1]
         { []
         }
     {offset
       caPkd: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPko; else goto caPkn;
       caPko: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPkn: // global
           _saLTc::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp - 8] = block_caPkl_info;
           R3 = Hp - 7;
           R2 = _saLTc::P64;
           P64[Sp] = _saLTc::P64;
           Sp = Sp - 8;
           call restartPollLoop_raLJq_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPkd_info" {
     block_caPkd_info:
         const _caPkd;
         const 5319;
         const 1297036696977670174;
         const SaMem_srt+72;
 },
 _caPkl() //  [R1]
         { []
         }
     {offset
       caPkl: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caPks; else goto caPkr;
       caPks: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPkr: // global
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           _saLSD::P64 = P64[Sp + 32];
           _saLSN::I64 = I64[Sp + 64];
           _saLSY::I64 = I64[Sp + 16];
           _saLTh::I64 = _saLSY::I64 - I64[Sp + 48];
           call MO_WriteBarrier();
           P64[(_saLSD::P64 + 24) + (_saLTh::I64 << 3)] = Hp - 6;
           I64[_saLSD::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saLSD::P64 + 24) + ((I64[_saLSD::P64 + 8] << 3) + (_saLTh::I64 >> 7))] = 1 :: W8;
           if (_saLSY::I64 == _saLSN::I64) goto uaPnS; else goto caPkB;
       uaPnS: // global
           Sp = Sp + 72;
           call _caPkG() args: 0, res: 0, upd: 0;
       caPkB: // global
           I64[Sp + 16] = _saLSY::I64 + 1;
           Sp = Sp + 16;
           call _caPiH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPkl_info" {
     block_caPkl_info:
         const _caPkl;
         const 10632;
         const 1297036696977670174;
         const SaMem_srt+72;
 },
 _caPkG() //  []
         { []
         }
     {offset
       caPkG: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caPj4() //  [R1]
         { []
         }
     {offset
       caPj4: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPkN; else goto caPkM;
       caPkN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPkM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           _caPj6::P64 = Hp - 7;
           if (%MO_S_Le_W64(0, I64[Sp + 40])) goto caPnj; else goto uaPnU;
       caPnj: // global
           P64[Sp - 16] = R1;
           I64[Sp - 8] = 0;
           P64[Sp] = _caPj6::P64;
           Sp = Sp - 16;
           call _caPjr() args: 0, res: 0, upd: 0;
       uaPnU: // global
           P64[Sp + 72] = R1;
           P64[Sp + 80] = _caPj6::P64;
           call _caPkP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPj4_info" {
     block_caPj4_info:
         const _caPj4;
         const 1994;
         const 3746995169145126942;
         const SaMem_srt+72;
 },
 _caPjr() //  []
         { []
         }
     {offset
       caPjr: // global
           Hp = Hp + 16;
           _saLU8::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto caPlM; else goto caPlL;
       caPlM: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caPjq_info;
           R1 = _saLU8::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPlL: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saLU8::I64;
           _saLSE::P64 = P64[Sp + 72];
           _saLSG::P64 = P64[Sp + 96];
           _saLSH::I64 = I64[Sp + 48];
           _caPjt::P64 = Hp - 7;
           if (%MO_S_Gt_W64(_saLSH::I64,
                            _saLU8::I64)) goto caPlQ; else goto caPnh;
       caPlQ: // global
           R4 = _caPjt::P64;
           R3 = _saLSG::P64;
           R2 = _saLSE::P64;
           Sp = Sp + 104;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caPnh: // global
           if (%MO_S_Gt_W64(_saLU8::I64,
                            I64[Sp + 56])) goto caPlW; else goto caPm3;
       caPlW: // global
           R4 = _caPjt::P64;
           R3 = _saLSG::P64;
           R2 = _saLSE::P64;
           Sp = Sp + 104;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caPm3: // global
           _saLUg::P64 = P64[P64[Sp + 64] + ((_saLU8::I64 - _saLSH::I64 << 3) + 24)];
           I64[Sp - 16] = block_caPm2_info;
           R1 = _saLUg::P64;
           P64[Sp - 8] = _caPjt::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPoh; else goto caPm4;
       uaPoh: // global
           call _caPm2(R1) args: 0, res: 0, upd: 0;
       caPm4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caPjq() //  [R1]
         { []
         }
     {offset
       caPjq: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _caPjr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPjq_info" {
     block_caPjq_info:
         const _caPjq;
         const 16013;
         const 3746995169145126942;
         const SaMem_srt+72;
 },
 _caPm2() //  [R1]
         { []
         }
     {offset
       caPm2: // global
           if (R1 & 7 == 1) goto caPma; else goto caPmk;
       caPma: // global
           Sp = Sp + 120;
           call lvl13_raLJB_entry() args: 8, res: 0, upd: 8;
       caPmk: // global
           I64[Sp - 8] = block_caPmd_info;
           _saLUh::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _saLUh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPop; else goto caPme;
       uaPop: // global
           call _caPmd(R1) args: 0, res: 0, upd: 0;
       caPme: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPm2_info" {
     block_caPm2_info:
         const _caPm2;
         const 32014;
         const 3746995169145126942;
         const SaMem_srt+72;
 },
 _caPmd() //  [R1]
         { []
         }
     {offset
       caPmd: // global
           I64[Sp - 8] = block_caPmi_info;
           _saLUl::P64 = P64[R1 + 15];
           R1 = P64[Sp + 112];
           P64[Sp] = _saLUl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPoq; else goto caPmm;
       uaPoq: // global
           call _caPmi(R1) args: 0, res: 0, upd: 0;
       caPmm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPmd_info" {
     block_caPmd_info:
         const _caPmd;
         const 64015;
         const 3746995169145126942;
         const SaMem_srt+72;
 },
 _caPmi() //  [R1]
         { []
         }
     {offset
       caPmi: // global
           _caPjt::P64 = P64[Sp + 24];
           _saLU8::I64 = I64[Sp + 40];
           if (%MO_S_Ge_W64(_saLU8::I64,
                            I64[R1 + 7])) goto caPmw; else goto caPng;
       caPmw: // global
           I64[Sp] = block_caPmu_info;
           R3 = _caPjt::P64;
           R2 = P64[Sp + 8];
           call restartPollLoop_raLJq_entry(R3, R2) args: 8, res: 8, upd: 8;
       caPng: // global
           _caPj6::P64 = P64[Sp + 48];
           if (%MO_S_Gt_W64(0, _saLU8::I64)) goto caPn0; else goto caPnf;
       caPn0: // global
           R3 = _caPjt::P64;
           R2 = _caPj6::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caPnf: // global
           if (%MO_S_Gt_W64(_saLU8::I64,
                            I64[Sp + 64])) goto caPn6; else goto caPne;
       caPn6: // global
           R3 = _caPjt::P64;
           R2 = _caPj6::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caPne: // global
           _saLSF::I64 = I64[Sp + 88];
           _saLTt::P64 = P64[Sp + 32];
           _saLUh::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[(_saLTt::P64 + 24) + (_saLU8::I64 << 3)] = _saLUh::P64;
           I64[_saLTt::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saLTt::P64 + 24) + ((I64[_saLTt::P64 + 8] << 3) + (_saLU8::I64 >> 7))] = 1 :: W8;
           if (_saLU8::I64 == _saLSF::I64) goto uaPnZ; else goto caPnc;
       uaPnZ: // global
           P64[Sp + 128] = _caPj6::P64;
           P64[Sp + 120] = _saLTt::P64;
           Sp = Sp + 48;
           call _caPkP() args: 0, res: 0, upd: 0;
       caPnc: // global
           I64[Sp + 40] = _saLU8::I64 + 1;
           Sp = Sp + 32;
           call _caPjr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPmi_info" {
     block_caPmi_info:
         const _caPmi;
         const 128016;
         const 3746995169145126942;
         const SaMem_srt+72;
 },
 _caPmu() //  [R1]
         { []
         }
     {offset
       caPmu: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caPmA; else goto caPmz;
       caPmA: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPmz: // global
           _caPj6::P64 = P64[Sp + 48];
           _caPjt::P64 = P64[Sp + 24];
           _saLU8::I64 = I64[Sp + 40];
           if (%MO_S_Gt_W64(0, _saLU8::I64)) goto caPmE; else goto caPmV;
       caPmE: // global
           Hp = Hp - 40;
           R3 = _caPjt::P64;
           R2 = _caPj6::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caPmV: // global
           if (%MO_S_Gt_W64(_saLU8::I64,
                            I64[Sp + 64])) goto caPmK; else goto caPmU;
       caPmK: // global
           Hp = Hp - 40;
           R3 = _caPjt::P64;
           R2 = _caPj6::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caPmU: // global
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           _saLSF::I64 = I64[Sp + 88];
           _saLTt::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[(_saLTt::P64 + 24) + (_saLU8::I64 << 3)] = Hp - 6;
           I64[_saLTt::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saLTt::P64 + 24) + ((I64[_saLTt::P64 + 8] << 3) + (_saLU8::I64 >> 7))] = 1 :: W8;
           if (_saLU8::I64 == _saLSF::I64) goto uaPnX; else goto caPmS;
       uaPnX: // global
           P64[Sp + 128] = _caPj6::P64;
           P64[Sp + 120] = _saLTt::P64;
           Sp = Sp + 48;
           call _caPkP() args: 0, res: 0, upd: 0;
       caPmS: // global
           I64[Sp + 40] = _saLU8::I64 + 1;
           Sp = Sp + 32;
           call _caPjr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPmu_info" {
     block_caPmu_info:
         const _caPmu;
         const 128144;
         const 3746995169145126942;
         const SaMem_srt+72;
 },
 _caPkP() //  []
         { []
         }
     {offset
       caPkP: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caPkT; else goto caPkS;
       caPkT: // global
           HpAlloc = 40;
           I64[Sp] = block_caPkP_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caPkS: // global
           _saLSI::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_saLSI::I64,
                            I64[Sp + 16])) goto caPlk; else goto caPll;
       caPlk: // global
           Hp = Hp - 40;
           I64[Sp + 56] = _saLSI::I64;
           Sp = Sp + 16;
           call _caPl8() args: 0, res: 0, upd: 0;
       caPll: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = lvl1_raLJo_closure+1;
           P64[Hp - 16] = P64[Sp + 80];
           P64[Hp - 8] = P64[Sp + 72];
           I64[Hp] = I64[Sp + 24];
           _saLSv::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[_saLSv::P64 + 8] = Hp - 31;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saLSv::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPkP_info" {
     block_caPkP_info:
         const _caPkP;
         const 8138;
         const 4294967326;
         const SaMem_srt+120;
 },
 _caPl8() //  []
         { []
         }
     {offset
       caPl8: // global
           I64[Sp - 8] = block_caPla_info;
           R5 = I64[Sp + 40];
           R4 = P64[Sp + 56];
           R3 = I64[Sp];
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Event.Thread.$wstartIOManagerThread_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _caPla() //  []
         { []
         }
     {offset
       caPla: // global
           _saLTD::I64 = I64[Sp + 48];
           if (_saLTD::I64 == I64[Sp + 8]) goto uaPo2; else goto caPlh;
       uaPo2: // global
           Sp = Sp + 8;
           call _caPl0() args: 0, res: 0, upd: 0;
       caPlh: // global
           I64[Sp + 48] = _saLTD::I64 + 1;
           Sp = Sp + 8;
           call _caPl8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPla_info" {
     block_caPla_info:
         const _caPla;
         const 4041;
         const 4294967326;
         const SaMem_srt+120;
 },
 _caPl0() //  []
         { []
         }
     {offset
       caPl0: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caPl4; else goto caPl3;
       caPl4: // global
           HpAlloc = 40;
           I64[Sp] = block_caPl0_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caPl3: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = lvl1_raLJo_closure+1;
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 56];
           I64[Hp] = I64[Sp + 8];
           _saLSv::P64 = P64[Sp + 48];
           call MO_WriteBarrier();
           P64[_saLSv::P64 + 8] = Hp - 31;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saLSv::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPl0_info" {
     block_caPl0_info:
         const _caPl0;
         const 1992;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.265876522 UTC

[section ""data" . GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged2_info;
         const 0;
 },
 GHC.Event.Thread.ioManagerCapabilitiesChanged2_entry() //  []
         { []
         }
     {offset
       caPqK: // global
           call GHC.Event.Thread.$wioManagerCapabilitiesChanged_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerCapabilitiesChanged2_info" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged2_info:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaMem_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.270195416 UTC

[section ""data" . GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged1_info;
         const 0;
 },
 GHC.Event.Thread.ioManagerCapabilitiesChanged1_entry() //  []
         { []
         }
     {offset
       caPqY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPqZ; else goto caPr0;
       caPqZ: // global
           R1 = GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPr0: // global
           I64[Sp - 8] = block_caPqV_info;
           R1 = GHC.Event.Thread.ioManagerLock_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPr4; else goto caPqW;
       uaPr4: // global
           call _caPqV(R1) args: 0, res: 0, upd: 0;
       caPqW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerCapabilitiesChanged1_info" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged1_info:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged1_entry;
         const 0;
         const 3302829850638;
         const 4294967299;
         const SaMem_srt+248;
 },
 _caPqV() //  [R1]
         { []
         }
     {offset
       caPqV: // global
           R3 = GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure+2;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPqV_info" {
     block_caPqV_info:
         const _caPqV;
         const 0;
         const 4294967326;
         const SaMem_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.27526181 UTC

[section ""data" . GHC.Event.Thread.ioManagerCapabilitiesChanged_closure" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged_closure:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged_info;
         const 0;
 },
 GHC.Event.Thread.ioManagerCapabilitiesChanged_entry() //  []
         { []
         }
     {offset
       caPri: // global
           call GHC.Event.Thread.ioManagerCapabilitiesChanged1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerCapabilitiesChanged_info" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged_info:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaMem_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.278920034 UTC

[section ""data" . GHC.Event.Thread.getSystemEventManager2_closure" {
     GHC.Event.Thread.getSystemEventManager2_closure:
         const GHC.Event.Thread.getSystemEventManager2_info;
         const 0;
 },
 GHC.Event.Thread.getSystemEventManager2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caPru: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPry; else goto caPrx;
       caPry: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.getSystemEventManager2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caPrx: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R6 = lvl4_raLJs_closure;
           R5 = Hp - 7;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemEventManager2_info" {
     GHC.Event.Thread.getSystemEventManager2_info:
         const GHC.Event.Thread.getSystemEventManager2_entry;
         const 0;
         const 9223372058329612302;
         const 12884901910;
         const SaMem_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.286680986 UTC

[section ""data" . GHC.Event.Thread.getSystemEventManager1_closure" {
     GHC.Event.Thread.getSystemEventManager1_closure:
         const GHC.Event.Thread.getSystemEventManager1_info;
         const 0;
 },
 sat_saLVn_entry() //  [R1]
         { []
         }
     {offset
       caPsu: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPsv; else goto caPsw;
       caPsv: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPsw: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Tuple.snd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saLVn_info" {
     sat_saLVn_info:
         const sat_saLVn_entry;
         const 1;
         const 16;
 },
 sat_saLVo_entry() //  [R1]
         { []
         }
     {offset
       caPsB: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caPsC; else goto caPsD;
       caPsC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPsD: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caPsk_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaPsK; else goto caPsl;
       uaPsK: // global
           call _caPsk(R1) args: 0, res: 0, upd: 0;
       caPsl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saLVo_info" {
     sat_saLVo_info:
         const sat_saLVo_entry;
         const 1;
         const 16;
 },
 _caPsk() //  [R1]
         { []
         }
     {offset
       caPsk: // global
           if (R1 & 7 == 1) goto caPsy; else goto caPsz;
       caPsy: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caPsz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caPsJ; else goto caPsI;
       caPsJ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       caPsI: // global
           _saLVm::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_saLVn_info;
           P64[Hp - 16] = _saLVm::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caPsk_info" {
     block_caPsk_info:
         const _caPsk;
         const 0;
         const 30;
 },
 GHC.Event.Thread.getSystemEventManager1_entry() //  []
         { []
         }
     {offset
       caPsL: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caPsM; else goto caPsN;
       caPsM: // global
           R1 = GHC.Event.Thread.getSystemEventManager1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPsN: // global
           I64[Sp - 8] = block_caPrH_info;
           R1 = CurrentTSO;
           Sp = Sp - 8;
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemEventManager1_info" {
     GHC.Event.Thread.getSystemEventManager1_info:
         const GHC.Event.Thread.getSystemEventManager1_entry;
         const 0;
         const 105557411233806;
         const 4294967299;
         const SaMem_srt+224;
 },
 _caPrH() //  [R2]
         { []
         }
     {offset
       caPrH: // global
           I64[Sp - 8] = block_caPrL_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           I64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPt1; else goto caPrM;
       uaPt1: // global
           call _caPrL(R1) args: 0, res: 0, upd: 0;
       caPrM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPrH_info" {
     block_caPrH_info:
         const _caPrH;
         const 0;
         const 35188667056158;
         const SaMem_srt+224;
 },
 _caPrL() //  [R1]
         { []
         }
     {offset
       caPrL: // global
           _saLV3::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caPrQ_info;
           R1 = _saLV3::P64;
           if (R1 & 7 != 0) goto uaPt2; else goto caPrR;
       uaPt2: // global
           call _caPrQ(R1) args: 0, res: 0, upd: 0;
       caPrR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPrL_info" {
     block_caPrL_info:
         const _caPrL;
         const 65;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caPrQ() //  [R1]
         { []
         }
     {offset
       caPrQ: // global
           I64[Sp - 16] = block_caPrV_info;
           _saLV6::P64 = P64[R1 + 15];
           _saLV8::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _saLV8::P64;
           P64[Sp] = _saLV6::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPt3; else goto caPrW;
       uaPt3: // global
           call _caPrV(R1) args: 0, res: 0, upd: 0;
       caPrW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPrQ_info" {
     block_caPrQ_info:
         const _caPrQ;
         const 65;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caPrV() //  [R1]
         { []
         }
     {offset
       caPrV: // global
           I64[Sp - 8] = block_caPs0_info;
           _saLV9::P64 = R1;
           _saLVa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saLVa::I64;
           P64[Sp + 16] = _saLV9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPt4; else goto caPs1;
       uaPt4: // global
           call _caPs0(R1) args: 0, res: 0, upd: 0;
       caPs1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPrV_info" {
     block_caPrV_info:
         const _caPrV;
         const 259;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caPs0() //  [R1]
         { []
         }
     {offset
       caPs0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPsU; else goto caPsT;
       caPsU: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPsT: // global
           _saLUX::I64 = I64[Sp + 32];
           _saLV9::P64 = P64[Sp + 24];
           _saLVa::I64 = I64[Sp + 8];
           _saLVb::P64 = R1;
           if (%MO_S_Gt_W64(_saLVa::I64,
                            _saLUX::I64)) goto caPsY; else goto caPt0;
       caPt0: // global
           if (%MO_S_Gt_W64(_saLUX::I64,
                            I64[R1 + 7])) goto caPsY; else goto caPsZ;
       caPsY: // global
           Hp = Hp - 24;
           R4 = _saLUX::I64;
           R3 = _saLV9::P64;
           R2 = _saLVb::P64;
           Sp = Sp + 40;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caPsZ: // global
           I64[Hp - 16] = sat_saLVo_info;
           P64[Hp] = P64[P64[Sp + 16] + ((_saLUX::I64 - _saLVa::I64 << 3) + 24)];
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPs0_info" {
     block_caPs0_info:
         const _caPs0;
         const 580;
         const 4294967326;
         const SaMem_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.304147373 UTC

[section ""data" . GHC.Event.Thread.getSystemEventManager_closure" {
     GHC.Event.Thread.getSystemEventManager_closure:
         const GHC.Event.Thread.getSystemEventManager_info;
         const 0;
 },
 GHC.Event.Thread.getSystemEventManager_entry() //  []
         { []
         }
     {offset
       caPtU: // global
           call GHC.Event.Thread.getSystemEventManager1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemEventManager_info" {
     GHC.Event.Thread.getSystemEventManager_info:
         const GHC.Event.Thread.getSystemEventManager_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaMem_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.307833986 UTC

[section ""cstring" . lvl16_raLJE_bytes" {
     lvl16_raLJE_bytes:
         I8[] [116,104,114,101,97,100,87,97,105,116,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.310081303 UTC

[section ""data" . lvl17_raLJF_closure" {
     lvl17_raLJF_closure:
         const lvl17_raLJF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_raLJF_entry() //  [R1]
         { []
         }
     {offset
       caPu8: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPu9; else goto caPua;
       caPu9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPua: // global
           (_caPu5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caPu5::I64 == 0) goto caPu7; else goto caPu6;
       caPu7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caPu6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caPu5::I64;
           R2 = lvl16_raLJE_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_raLJF_info" {
     lvl17_raLJF_info:
         const lvl17_raLJF_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.314148904 UTC

[section ""data" . lvl18_raLJG_closure" {
     lvl18_raLJG_closure:
         const lvl18_raLJG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_raLJG_entry() //  [R1]
         { []
         }
     {offset
       caPuo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPup; else goto caPuq;
       caPup: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPuq: // global
           (_caPul::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caPul::I64 == 0) goto caPun; else goto caPum;
       caPun: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caPum: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caPul::I64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = 9;
           R2 = lvl17_raLJF_closure;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_raLJG_info" {
     lvl18_raLJG_info:
         const lvl18_raLJG_entry;
         const 0;
         const 12884901909;
         const SaMem_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.318522125 UTC

[section ""data" . lvl19_raLJH_closure" {
     lvl19_raLJH_closure:
         const lvl19_raLJH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_raLJH_entry() //  [R1]
         { []
         }
     {offset
       caPuE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPuF; else goto caPuG;
       caPuF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPuG: // global
           (_caPuB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caPuB::I64 == 0) goto caPuD; else goto caPuC;
       caPuD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caPuC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caPuB::I64;
           R2 = lvl18_raLJG_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_raLJH_info" {
     lvl19_raLJH_info:
         const lvl19_raLJH_entry;
         const 0;
         const 12884901909;
         const SaMem_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.321967792 UTC

[section ""data" . lvl20_raLJI_closure" {
     lvl20_raLJI_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.32372942 UTC

[section ""data" . lvl21_raLJJ_closure" {
     lvl21_raLJJ_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.325478088 UTC

[section ""data" . lvl22_raLJK_closure" {
     lvl22_raLJK_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.327158872 UTC

[section ""cstring" . lvl23_raLJL_bytes" {
     lvl23_raLJL_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,49,56,51,58,51,45,49,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.329921937 UTC

[section ""data" . lvl24_raLJM_closure" {
     lvl24_raLJM_closure:
         const lvl24_raLJM_info;
         const 0;
 },
 lvl24_raLJM_entry() //  []
         { []
         }
     {offset
       caPuY: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPuZ; else goto caPv0;
       caPuZ: // global
           R1 = lvl24_raLJM_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPv0: // global
           I64[Sp - 8] = block_caPuW_info;
           R2 = lvl23_raLJL_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl24_raLJM_info" {
     lvl24_raLJM_info:
         const lvl24_raLJM_entry;
         const 0;
         const 9223372041149743118;
         const 4294967299;
         const SaMem_srt+128;
 },
 _caPuW() //  [R1]
         { []
         }
     {offset
       caPuW: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPuW_info" {
     block_caPuW_info:
         const _caPuW;
         const 0;
         const 4294967326;
         const SaMem_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.375033419 UTC

[section ""data" . GHC.Event.Thread.threadWaitReadSTM1_closure" {
     GHC.Event.Thread.threadWaitReadSTM1_closure:
         const GHC.Event.Thread.threadWaitReadSTM1_info;
         const 0;
 },
 sat_saLWA_entry() //  [R1]
         { []
         }
     {offset
       caPwX: // global
           _saLWA::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caPwY; else goto caPwZ;
       caPwZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPx1; else goto caPx0;
       caPx1: // global
           HpAlloc = 16;
           goto caPwY;
       caPwY: // global
           R1 = _saLWA::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPx0: // global
           _saLVB::P64 = P64[_saLWA::P64 + 7];
           _saLWv::P64 = P64[_saLWA::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saLWv::P64;
           I64[Sp - 8] = block_caPwV_info;
           R2 = Hp - 6;
           R1 = _saLVB::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLWA_info" {
     sat_saLWA_info:
         const sat_saLWA_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caPwV() //  []
         { []
         }
     {offset
       caPwV: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPwV_info" {
     block_caPwV_info:
         const _caPwV;
         const 0;
         const 30;
 },
 lvl31_saLWt_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caPx3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPx7; else goto caPx6;
       caPx7: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPx6: // global
           _saLVB::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_saLWA_info;
           P64[Hp - 8] = _saLVB::P64;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call stg_atomically#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_saLWt_info" {
     lvl31_saLWt_info:
         const lvl31_saLWt_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 $wgo_saLXa_entry() //  [R1, R2]
         { []
         }
     {offset
       caPyd: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caPye; else goto caPyf;
       caPye: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPyf: // global
           I64[Sp - 24] = block_caPy6_info;
           _saLXa::P64 = R1;
           _saLWa::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saLWa::I64;
           P64[Sp - 8] = _saLXa::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaPyC; else goto caPy7;
       uaPyC: // global
           call _caPy6(R1) args: 0, res: 0, upd: 0;
       caPy7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saLXa_info" {
     $wgo_saLXa_info:
         const $wgo_saLXa_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caPy6() //  [R1]
         { []
         }
     {offset
       caPy6: // global
           if (R1 & 7 == 1) goto caPya; else goto caPyb;
       caPya: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPyb: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPyn; else goto caPym;
       caPyn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPym: // global
           _saLXe::P64 = P64[R1 + 6];
           _saLXf::P64 = P64[R1 + 14];
           _saLXd::I64 = I64[R1 + 22];
           if (_saLXd::I64 == I64[Sp + 8]) goto caPyB; else goto caPyv;
       caPyB: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saLXe::P64;
           R3 = _saLXf::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPyv: // global
           Hp = Hp - 16;
           I64[Sp] = block_caPyr_info;
           R2 = _saLXf::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saLXe::P64;
           I64[Sp + 16] = _saLXd::I64;
           call $wgo_saLXa_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPy6_info" {
     block_caPy6_info:
         const _caPy6;
         const 66;
         const 30;
 },
 _caPyr() //  [R1, R2, R3]
         { []
         }
     {offset
       caPyr: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caPyy; else goto caPyx;
       caPyy: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caPyx: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPyr_info" {
     block_caPyr_info:
         const _caPyr;
         const 130;
         const 30;
 },
 $wgo_saLXZ_entry() //  [R1, R2]
         { []
         }
     {offset
       caPzn: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caPzo; else goto caPzp;
       caPzo: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPzp: // global
           I64[Sp - 24] = block_caPzg_info;
           _saLXZ::P64 = R1;
           _saLWa::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saLWa::I64;
           P64[Sp - 8] = _saLXZ::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaPzM; else goto caPzh;
       uaPzM: // global
           call _caPzg(R1) args: 0, res: 0, upd: 0;
       caPzh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saLXZ_info" {
     $wgo_saLXZ_info:
         const $wgo_saLXZ_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caPzg() //  [R1]
         { []
         }
     {offset
       caPzg: // global
           if (R1 & 7 == 1) goto caPzk; else goto caPzl;
       caPzk: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPzl: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPzx; else goto caPzw;
       caPzx: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPzw: // global
           _saLY3::P64 = P64[R1 + 6];
           _saLY4::P64 = P64[R1 + 14];
           _saLY2::I64 = I64[R1 + 22];
           if (_saLY2::I64 == I64[Sp + 8]) goto caPzL; else goto caPzF;
       caPzL: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saLY3::P64;
           R3 = _saLY4::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPzF: // global
           Hp = Hp - 16;
           I64[Sp] = block_caPzB_info;
           R2 = _saLY4::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saLY3::P64;
           I64[Sp + 16] = _saLY2::I64;
           call $wgo_saLXZ_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPzg_info" {
     block_caPzg_info:
         const _caPzg;
         const 66;
         const 30;
 },
 _caPzB() //  [R1, R2, R3]
         { []
         }
     {offset
       caPzB: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caPzI; else goto caPzH;
       caPzI: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caPzH: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPzB_info" {
     block_caPzB_info:
         const _caPzB;
         const 130;
         const 30;
 },
 $wio_saLWq_entry() //  [R1, R2]
         { []
         }
     {offset
       caPzR: // global
           _saLWr::P64 = R2;
           _saLWq::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto caPzS; else goto caPzT;
       caPzT: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caPzV; else goto caPzU;
       caPzV: // global
           HpAlloc = 80;
           goto caPzS;
       caPzS: // global
           R2 = _saLWr::P64;
           R1 = _saLWq::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPzU: // global
           _saLVB::P64 = P64[_saLWq::P64 + 6];
           _saLW1::P64 = P64[_saLWq::P64 + 14];
           _saLW3::P64 = P64[_saLWq::P64 + 22];
           _saLW4::P64 = P64[_saLWq::P64 + 30];
           _saLW9::P64 = P64[_saLWq::P64 + 38];
           _saLW8::I64 = I64[_saLWq::P64 + 46];
           _saLWa::I64 = I64[_saLWq::P64 + 54];
           _saLWc::I64 = I64[_saLWq::P64 + 62];
           I64[Hp - 72] = lvl31_saLWt_info;
           P64[Hp - 64] = _saLVB::P64;
           I64[Hp - 56] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 48] = Hp - 69;
           I64[Hp - 40] = _saLWa::I64;
           I64[Hp - 32] = _saLW8::I64;
           I64[Hp - 24] = _saLWc::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 64] = block_caPwx_info;
           R5 = _saLWr::P64;
           R4 = Hp - 14;
           R3 = _saLWa::I64;
           R2 = GHC.Base.++_closure+2;
           P64[Sp - 56] = _saLW1::P64;
           P64[Sp - 48] = _saLW3::P64;
           P64[Sp - 40] = _saLW4::P64;
           P64[Sp - 32] = _saLW9::P64;
           I64[Sp - 24] = _saLWa::I64;
           I64[Sp - 16] = _saLWc::I64;
           P64[Sp - 8] = _saLWr::P64;
           Sp = Sp - 64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saLWq_info" {
     $wio_saLWq_info:
         const $wio_saLWq_entry;
         const 12884901893;
         const 4294967304;
         const 8589934597;
         const SaMem_srt+384;
 },
 _caPwx() //  [R1]
         { []
         }
     {offset
       caPwx: // global
           I64[Sp - 8] = block_caPwB_info;
           _saLWF::P64 = R1;
           R1 = R1;
           P64[Sp] = _saLWF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPCf; else goto caPwC;
       uaPCf: // global
           call _caPwB(R1) args: 0, res: 0, upd: 0;
       caPwC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPwx_info" {
     block_caPwx_info:
         const _caPwx;
         const 3079;
         const 4294967326;
         const SaMem_srt+384;
 },
 _caPwB() //  [R1]
         { []
         }
     {offset
       caPwB: // global
           if (R1 & 7 == 1) goto caPzO; else goto caPzP;
       caPzO: // global
           I64[Sp] = 0;
           P64[Sp - 8] = GHC.Event.Internal.$fMonoidEventLifetime1_closure;
           Sp = Sp - 8;
           call _saLWG() args: 0, res: 0, upd: 0;
       caPzP: // global
           I64[Sp] = block_caPwH_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPwB_info" {
     block_caPwB_info:
         const _caPwB;
         const 6152;
         const 4294967326;
         const SaMem_srt+384;
 },
 _caPwH() //  [R1]
         { []
         }
     {offset
       caPwH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPBO; else goto caPBN;
       caPBO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPBN: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           P64[Sp - 8] = Hp - 7;
           I64[Sp] = R1;
           Sp = Sp - 8;
           call _saLWG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPwH_info" {
     block_caPwH_info:
         const _caPwH;
         const 6152;
         const 30;
 },
 _saLWG() //  []
         { []
         }
     {offset
       saLWG: // global
           _saLWI::P64 = P64[Sp];
           I64[Sp] = block_caPxb_info;
           R1 = _saLWI::P64;
           if (R1 & 7 != 0) goto uaPCA; else goto caPxc;
       uaPCA: // global
           call _caPxb(R1) args: 0, res: 0, upd: 0;
       caPxc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caPxb() //  [R1]
         { []
         }
     {offset
       caPxb: // global
           _saLWL::I64 = I64[Sp + 8] | I64[Sp + 64];
           _saLWM::I64 = _saLWL::I64 & 8;
           if (_saLWM::I64 != 0) goto uaPC8; else goto uaPC7;
       uaPC8: // global
           I64[Sp] = _saLWM::I64;
           I64[Sp + 40] = _saLWL::I64;
           I64[Sp + 64] = I64[R1 + 7];
           call _caPxn() args: 0, res: 0, upd: 0;
       uaPC7: // global
           I64[Sp + 32] = _saLWM::I64;
           I64[Sp + 64] = _saLWL::I64;
           Sp = Sp + 16;
           call _caPyF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPxb_info" {
     block_caPxb_info:
         const _caPxb;
         const 12361;
         const 30;
 },
 _caPxn() //  []
         { []
         }
     {offset
       caPxn: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caPA3; else goto caPA2;
       caPA3: // global
           HpAlloc = 32;
           _saLWM::I64 = I64[Sp];
           I64[Sp] = block_caPxm_info;
           R1 = _saLWM::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPA2: // global
           _saLWL::I64 = I64[Sp + 40];
           if (I64[Sp + 64] == _saLWL::I64) goto caPA5; else goto caPA6;
       caPA5: // global
           Hp = Hp - 32;
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caPA6: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _saLWL::I64 & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] & 7;
           I64[Sp + 8] = block_caPxB_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 32];
           I64[Sp] = stg_ap_v_info;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caPxm() //  [R1]
         { []
         }
     {offset
       caPxm: // global
           I64[Sp] = R1;
           call _caPxn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPxm_info" {
     block_caPxm_info:
         const _caPxm;
         const 13385;
         const 30;
 },
 _caPxB() //  [R1]
         { []
         }
     {offset
       caPxB: // global
           I64[Sp] = block_caPxD_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaPCl; else goto caPxE;
       uaPCl: // global
           call _caPxD(R1) args: 0, res: 0, upd: 0;
       caPxE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPxB_info" {
     block_caPxB_info:
         const _caPxB;
         const 8072;
         const 30;
 },
 _caPxD() //  [R1]
         { []
         }
     {offset
       caPxD: // global
           if (R1 & 7 == 1) goto caPAa; else goto caPAS;
       caPAa: // global
           I64[Sp + 40] = block_caPxI_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaPCm; else goto caPxJ;
       uaPCm: // global
           call _caPxI(R1) args: 0, res: 0, upd: 0;
       caPxJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPAS: // global
           R1 = lvl22_raLJK_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPxD_info" {
     block_caPxD_info:
         const _caPxD;
         const 8072;
         const 30;
 },
 _caPxI() //  [R1]
         { []
         }
     {offset
       caPxI: // global
           _saLWr::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caPAd; else goto caPAM;
       caPAd: // global
           I64[Sp] = block_caPxN_info;
           R1 = P64[_saLWr::P64 + 8];
           if (R1 & 7 != 0) goto uaPCn; else goto caPxO;
       uaPCn: // global
           call _caPxN(R1) args: 0, res: 0, upd: 0;
       caPxO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPAM: // global
           I64[Sp + 24] = block_caPAK_info;
           R5 = _saLWr::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPxI_info" {
     block_caPxI_info:
         const _caPxI;
         const 195;
         const 30;
 },
 _caPxN() //  [R1]
         { []
         }
     {offset
       caPxN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPAg; else goto caPAf;
       caPAg: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPAf: // global
           _saLWa::I64 = I64[Sp + 8];
           _saLX1::P64 = P64[R1 + 7];
           _saLX3::P64 = P64[R1 + 15];
           _saLX2::I64 = I64[R1 + 23];
           _saLX4::I64 = _saLWa::I64 & (I64[_saLX1::P64 + 8] - 1);
           _saLX9::P64 = P64[(_saLX1::P64 + 24) + (_saLX4::I64 << 3)];
           I64[Hp - 8] = $wgo_saLXa_info;
           I64[Hp] = _saLWa::I64;
           I64[Sp - 8] = block_caPAh_info;
           R2 = _saLX9::P64;
           R1 = Hp - 7;
           I64[Sp] = _saLX4::I64;
           P64[Sp + 8] = _saLX3::P64;
           I64[Sp + 16] = _saLX2::I64;
           P64[Sp + 24] = _saLX1::P64;
           Sp = Sp - 8;
           call $wgo_saLXa_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPxN_info" {
     block_caPxN_info:
         const _caPxN;
         const 451;
         const 30;
 },
 _caPAh() //  [R1, R2, R3]
         { []
         }
     {offset
       caPAh: // global
           I64[Sp - 16] = block_caPAj_info;
           _saLXo::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saLXo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPCs; else goto caPAl;
       uaPCs: // global
           call _caPAj(R1) args: 0, res: 0, upd: 0;
       caPAl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPAh_info" {
     block_caPAh_info:
         const _caPAh;
         const 324;
         const 30;
 },
 _caPAj() //  [R1]
         { []
         }
     {offset
       caPAj: // global
           if (R1 & 7 == 1) goto uaPCa; else goto caPAw;
       uaPCa: // global
           Sp = Sp + 56;
           call _caPBt() args: 0, res: 0, upd: 0;
       caPAw: // global
           _saLX1::P64 = P64[Sp + 48];
           _saLX4::I64 = I64[Sp + 24];
           _saLXo::P64 = P64[Sp + 16];
           _saLXq::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saLX1::P64 + 24) + (_saLX4::I64 << 3)] = _saLXq::P64;
           I64[_saLX1::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saLX1::P64 + 24) + ((I64[_saLX1::P64 + 8] << 3) + (_saLX4::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caPAu_info;
           R1 = _saLXo::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaPCt; else goto caPAx;
       uaPCt: // global
           call _caPAu(R1) args: 0, res: 0, upd: 0;
       caPAx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPAj_info" {
     block_caPAj_info:
         const _caPAj;
         const 1286;
         const 30;
 },
 _caPAu() //  [R1]
         { []
         }
     {offset
       caPAu: // global
           if (R1 & 7 == 1) goto uaPCb; else goto caPAH;
       uaPCb: // global
           Sp = Sp + 32;
           call _caPBt() args: 0, res: 0, upd: 0;
       caPAH: // global
           _saLX2::I64 = I64[Sp + 16];
           _saLX3::P64 = P64[Sp + 8];
           I64[_saLX2::I64] = I64[_saLX2::I64] - 1;
           call MO_Touch(_saLX3::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPAu_info" {
     block_caPAu_info:
         const _caPAu;
         const 387;
         const 30;
 },
 _caPAK() //  []
         { []
         }
     {offset
       caPAK: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPAK_info" {
     block_caPAK_info:
         const _caPAK;
         const 0;
         const 30;
 },
 _caPyF() //  []
         { []
         }
     {offset
       caPyF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPAW; else goto caPAV;
       caPAW: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caPyE_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPAV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           I64[Sp - 8] = block_caPyL_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caPyE() //  [R1]
         { []
         }
     {offset
       caPyE: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caPyF() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPyE_info" {
     block_caPyE_info:
         const _caPyE;
         const 6408;
         const 30;
 },
 _caPyL() //  [R1]
         { []
         }
     {offset
       caPyL: // global
           I64[Sp] = block_caPyN_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaPCp; else goto caPyO;
       uaPCp: // global
           call _caPyN(R1) args: 0, res: 0, upd: 0;
       caPyO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPyL_info" {
     block_caPyL_info:
         const _caPyL;
         const 8072;
         const 30;
 },
 _caPyN() //  [R1]
         { []
         }
     {offset
       caPyN: // global
           if (R1 & 7 == 1) goto caPB0; else goto caPBI;
       caPB0: // global
           I64[Sp + 40] = block_caPyS_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaPCq; else goto caPyT;
       uaPCq: // global
           call _caPyS(R1) args: 0, res: 0, upd: 0;
       caPyT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPBI: // global
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPyN_info" {
     block_caPyN_info:
         const _caPyN;
         const 8072;
         const 30;
 },
 _caPyS() //  [R1]
         { []
         }
     {offset
       caPyS: // global
           _saLWr::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caPB3; else goto caPBC;
       caPB3: // global
           I64[Sp] = block_caPyX_info;
           R1 = P64[_saLWr::P64 + 8];
           if (R1 & 7 != 0) goto uaPCr; else goto caPyY;
       uaPCr: // global
           call _caPyX(R1) args: 0, res: 0, upd: 0;
       caPyY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPBC: // global
           I64[Sp + 24] = block_caPBA_info;
           R5 = _saLWr::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPyS_info" {
     block_caPyS_info:
         const _caPyS;
         const 195;
         const 30;
 },
 _caPyX() //  [R1]
         { []
         }
     {offset
       caPyX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPB6; else goto caPB5;
       caPB6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPB5: // global
           _saLWa::I64 = I64[Sp + 8];
           _saLXQ::P64 = P64[R1 + 7];
           _saLXS::P64 = P64[R1 + 15];
           _saLXR::I64 = I64[R1 + 23];
           _saLXT::I64 = _saLWa::I64 & (I64[_saLXQ::P64 + 8] - 1);
           _saLXY::P64 = P64[(_saLXQ::P64 + 24) + (_saLXT::I64 << 3)];
           I64[Hp - 8] = $wgo_saLXZ_info;
           I64[Hp] = _saLWa::I64;
           I64[Sp - 8] = block_caPB7_info;
           R2 = _saLXY::P64;
           R1 = Hp - 7;
           I64[Sp] = _saLXT::I64;
           P64[Sp + 8] = _saLXS::P64;
           I64[Sp + 16] = _saLXR::I64;
           P64[Sp + 24] = _saLXQ::P64;
           Sp = Sp - 8;
           call $wgo_saLXZ_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPyX_info" {
     block_caPyX_info:
         const _caPyX;
         const 451;
         const 30;
 },
 _caPB7() //  [R1, R2, R3]
         { []
         }
     {offset
       caPB7: // global
           I64[Sp - 16] = block_caPB9_info;
           _saLYd::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saLYd::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPCw; else goto caPBb;
       uaPCw: // global
           call _caPB9(R1) args: 0, res: 0, upd: 0;
       caPBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPB7_info" {
     block_caPB7_info:
         const _caPB7;
         const 324;
         const 30;
 },
 _caPB9() //  [R1]
         { []
         }
     {offset
       caPB9: // global
           if (R1 & 7 == 1) goto uaPCd; else goto caPBm;
       uaPCd: // global
           Sp = Sp + 56;
           call _caPBt() args: 0, res: 0, upd: 0;
       caPBm: // global
           _saLXQ::P64 = P64[Sp + 48];
           _saLXT::I64 = I64[Sp + 24];
           _saLYd::P64 = P64[Sp + 16];
           _saLYf::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saLXQ::P64 + 24) + (_saLXT::I64 << 3)] = _saLYf::P64;
           I64[_saLXQ::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saLXQ::P64 + 24) + ((I64[_saLXQ::P64 + 8] << 3) + (_saLXT::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caPBk_info;
           R1 = _saLYd::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaPCx; else goto caPBn;
       uaPCx: // global
           call _caPBk(R1) args: 0, res: 0, upd: 0;
       caPBn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPB9_info" {
     block_caPB9_info:
         const _caPB9;
         const 1286;
         const 30;
 },
 _caPBk() //  [R1]
         { []
         }
     {offset
       caPBk: // global
           if (R1 & 7 == 1) goto uaPCe; else goto caPBx;
       uaPCe: // global
           Sp = Sp + 32;
           call _caPBt() args: 0, res: 0, upd: 0;
       caPBx: // global
           _saLXR::I64 = I64[Sp + 16];
           _saLXS::P64 = P64[Sp + 8];
           I64[_saLXR::I64] = I64[_saLXR::I64] - 1;
           call MO_Touch(_saLXS::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPBk_info" {
     block_caPBk_info:
         const _caPBk;
         const 387;
         const 30;
 },
 _caPBt() //  []
         { []
         }
     {offset
       caPBt: // global
           R1 = lvl21_raLJJ_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caPBA() //  []
         { []
         }
     {offset
       caPBA: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPBA_info" {
     block_caPBA_info:
         const _caPBA;
         const 0;
         const 30;
 },
 io1_saLYy_entry() //  [R1, R2]
         { []
         }
     {offset
       caPCJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPCK; else goto caPCL;
       caPCK: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPCL: // global
           I64[Sp - 16] = block_caPCG_info;
           _saLWq::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saLWq::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPCP; else goto caPCH;
       uaPCP: // global
           call _caPCG(R1) args: 0, res: 0, upd: 0;
       caPCH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io1_saLYy_info" {
     io1_saLYy_info:
         const io1_saLYy_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaMem_srt+384;
 },
 _caPCG() //  [R1]
         { []
         }
     {offset
       caPCG: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saLWq_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPCG_info" {
     block_caPCG_info:
         const _caPCG;
         const 1;
         const 4294967326;
         const SaMem_srt+384;
 },
 sat_saLYU_entry() //  [R1]
         { []
         }
     {offset
       caPD2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPD3; else goto caPD4;
       caPD3: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPD4: // global
           I64[Sp - 8] = block_caPD0_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLYU_info" {
     sat_saLYU_info:
         const sat_saLYU_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+392;
 },
 _caPD0() //  []
         { []
         }
     {offset
       caPD0: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPD0_info" {
     block_caPD0_info:
         const _caPD0;
         const 0;
         const 30;
 },
 sat_saLYP_entry() //  [R1]
         { []
         }
     {offset
       caPDk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPDl; else goto caPDm;
       caPDl: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPDm: // global
           I64[Sp - 8] = block_caPDb_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_readTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLYP_info" {
     sat_saLYP_info:
         const sat_saLYP_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SaMem_srt+400;
 },
 _caPDb() //  [R1]
         { []
         }
     {offset
       caPDb: // global
           I64[Sp] = block_caPDd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaPDP; else goto caPDe;
       uaPDP: // global
           call _caPDd(R1) args: 0, res: 0, upd: 0;
       caPDe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPDb_info" {
     block_caPDb_info:
         const _caPDb;
         const 0;
         const 4294967326;
         const SaMem_srt+400;
 },
 _caPDd() //  [R1]
         { []
         }
     {offset
       caPDd: // global
           if (R1 & 7 == 1) goto caPDh; else goto caPDi;
       caPDh: // global
           Sp = Sp + 8;
           call stg_retry#() args: 8, res: 0, upd: 8;
       caPDi: // global
           I64[Sp] = block_caPDt_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaPDQ; else goto caPDv;
       uaPDQ: // global
           call _caPDt(R1) args: 0, res: 0, upd: 0;
       caPDv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPDd_info" {
     block_caPDd_info:
         const _caPDd;
         const 0;
         const 4294967326;
         const SaMem_srt+400;
 },
 _caPDt() //  [R1]
         { []
         }
     {offset
       caPDt: // global
           if (I64[R1 + 7] & 4 == 0) goto caPDL; else goto caPDF;
       caPDL: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caPDF: // global
           R1 = lvl19_raLJH_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPDt_info" {
     block_caPDt_info:
         const _caPDt;
         const 0;
         const 4294967326;
         const SaMem_srt+400;
 },
 sat_saLZ5_entry() //  [R1, R2]
         { []
         }
     {offset
       caPE2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPE3; else goto caPE4;
       caPE3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPE4: // global
           I64[Sp - 16] = block_caPE0_info;
           _saLZ2::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saLZ2::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZ5_info" {
     sat_saLZ5_info:
         const sat_saLZ5_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caPE0() //  []
         { []
         }
     {offset
       caPE0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPE0_info" {
     block_caPE0_info:
         const _caPE0;
         const 1;
         const 30;
 },
 sat_saLZ0_entry() //  [R1]
         { []
         }
     {offset
       caPEb: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saLYy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZ0_info" {
     sat_saLZ0_info:
         const sat_saLZ0_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 sat_saLZ1_entry() //  [R1]
         { []
         }
     {offset
       caPEj: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZ1_info" {
     sat_saLZ1_info:
         const sat_saLZ1_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saLZh_entry() //  [R1]
         { []
         }
     {offset
       caPEI: // global
           _saLZh::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caPEJ; else goto caPEK;
       caPEK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPEM; else goto caPEL;
       caPEM: // global
           HpAlloc = 16;
           goto caPEJ;
       caPEJ: // global
           R1 = _saLZh::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPEL: // global
           _saLVB::P64 = P64[_saLZh::P64 + 7];
           _saLWb::P64 = P64[_saLZh::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saLWb::P64;
           I64[Sp - 8] = block_caPEG_info;
           R2 = Hp - 6;
           R1 = _saLVB::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZh_info" {
     sat_saLZh_info:
         const sat_saLZh_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caPEG() //  []
         { []
         }
     {offset
       caPEG: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPEG_info" {
     block_caPEG_info:
         const _caPEG;
         const 0;
         const 30;
 },
 sat_saLZy_entry() //  [R1, R2]
         { []
         }
     {offset
       caPF3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPF4; else goto caPF5;
       caPF4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPF5: // global
           I64[Sp - 16] = block_caPF1_info;
           _saLZv::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saLZv::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZy_info" {
     sat_saLZy_info:
         const sat_saLZy_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caPF1() //  []
         { []
         }
     {offset
       caPF1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPF1_info" {
     block_caPF1_info:
         const _caPF1;
         const 1;
         const 30;
 },
 sat_saLZt_entry() //  [R1]
         { []
         }
     {offset
       caPFc: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saLYy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZt_info" {
     sat_saLZt_info:
         const sat_saLZt_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 sat_saLZu_entry() //  [R1]
         { []
         }
     {offset
       caPFk: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZu_info" {
     sat_saLZu_info:
         const sat_saLZu_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saLZD_entry() //  [R1]
         { []
         }
     {offset
       caPFr: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caPFs; else goto caPFt;
       caPFs: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPFt: // global
           I64[Sp - 24] = block_caPEU_info;
           _saLWp::P64 = P64[R1 + 7];
           _saLYy::P64 = P64[R1 + 15];
           R1 = _saLWp::P64;
           P64[Sp - 16] = _saLWp::P64;
           P64[Sp - 8] = _saLYy::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZD_info" {
     sat_saLZD_info:
         const sat_saLZD_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 _caPEU() //  [R1]
         { []
         }
     {offset
       caPEU: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caPFw; else goto caPFv;
       caPFw: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPFv: // global
           I64[Hp - 56] = sat_saLZy_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saLZt_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saLZu_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caPFn_info;
           R2 = Hp - 54;
           _saLZs::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saLZs::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPEU_info" {
     block_caPEU_info:
         const _caPEU;
         const 2;
         const 4294967326;
         const SaMem_srt+384;
 },
 _caPFn() //  [R1]
         { []
         }
     {offset
       caPFn: // global
           _saLWp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caPFp_info;
           R2 = P64[Sp + 16];
           _saLZB::P64 = R1;
           R1 = _saLWp::P64;
           P64[Sp + 16] = _saLZB::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPFn_info" {
     block_caPFn_info:
         const _caPFn;
         const 2;
         const 30;
 },
 _caPFp() //  []
         { []
         }
     {offset
       caPFp: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPFp_info" {
     block_caPFp_info:
         const _caPFp;
         const 1;
         const 30;
 },
 sat_saLZO_entry() //  [R1]
         { []
         }
     {offset
       caPFT: // global
           _saLZO::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caPFU; else goto caPFV;
       caPFV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPFX; else goto caPFW;
       caPFX: // global
           HpAlloc = 16;
           goto caPFU;
       caPFU: // global
           R1 = _saLZO::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPFW: // global
           _saLVB::P64 = P64[_saLZO::P64 + 7];
           _saLWb::P64 = P64[_saLZO::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saLWb::P64;
           I64[Sp - 8] = block_caPFR_info;
           R2 = Hp - 6;
           R1 = _saLVB::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZO_info" {
     sat_saLZO_info:
         const sat_saLZO_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caPFR() //  []
         { []
         }
     {offset
       caPFR: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPFR_info" {
     block_caPFR_info:
         const _caPFR;
         const 0;
         const 30;
 },
 sat_saM04_entry() //  [R1, R2]
         { []
         }
     {offset
       caPG9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPGa; else goto caPGb;
       caPGa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPGb: // global
           I64[Sp - 16] = block_caPG7_info;
           _saM01::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saM01::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM04_info" {
     sat_saM04_info:
         const sat_saM04_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caPG7() //  []
         { []
         }
     {offset
       caPG7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPG7_info" {
     block_caPG7_info:
         const _caPG7;
         const 1;
         const 30;
 },
 sat_saLZZ_entry() //  [R1]
         { []
         }
     {offset
       caPGi: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saLYy_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saLZZ_info" {
     sat_saLZZ_info:
         const sat_saLZZ_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 sat_saM00_entry() //  [R1]
         { []
         }
     {offset
       caPGq: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM00_info" {
     sat_saM00_info:
         const sat_saM00_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saM0g_entry() //  [R1]
         { []
         }
     {offset
       caPGP: // global
           _saM0g::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caPGQ; else goto caPGR;
       caPGR: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPGT; else goto caPGS;
       caPGT: // global
           HpAlloc = 16;
           goto caPGQ;
       caPGQ: // global
           R1 = _saM0g::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPGS: // global
           _saLVB::P64 = P64[_saM0g::P64 + 7];
           _saLWb::P64 = P64[_saM0g::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saLWb::P64;
           I64[Sp - 8] = block_caPGN_info;
           R2 = Hp - 6;
           R1 = _saLVB::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM0g_info" {
     sat_saM0g_info:
         const sat_saM0g_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caPGN() //  []
         { []
         }
     {offset
       caPGN: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPGN_info" {
     block_caPGN_info:
         const _caPGN;
         const 0;
         const 30;
 },
 io_saLVx_entry() //  [R1]
         { []
         }
     {offset
       caPGZ: // global
           if ((Sp + -128) < SpLim) (likely: False) goto caPH0; else goto caPH1;
       caPH0: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caPH1: // global
           I64[Sp - 24] = block_caPvn_info;
           _saLVr::P64 = P64[R1 + 7];
           _saLVs::P64 = P64[R1 + 15];
           R1 = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _saLVr::P64;
           P64[Sp - 8] = _saLVs::P64;
           Sp = Sp - 24;
           call stg_newTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saLVx_info" {
     io_saLVx_info:
         const io_saLVx_entry;
         const 2;
         const 4136053506059;
         const 4294967299;
         const SaMem_srt+328;
 },
 _caPvn() //  [R1]
         { []
         }
     {offset
       caPvn: // global
           I64[Sp - 8] = block_caPvp_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Thread.getSystemEventManager1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvn_info" {
     block_caPvn_info:
         const _caPvn;
         const 2;
         const 4136053506078;
         const SaMem_srt+328;
 },
 _caPvp() //  [R1]
         { []
         }
     {offset
       caPvp: // global
           I64[Sp] = block_caPvr_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaPJm; else goto caPvs;
       uaPJm: // global
           call _caPvr(R1) args: 0, res: 0, upd: 0;
       caPvs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvp_info" {
     block_caPvp_info:
         const _caPvp;
         const 3;
         const 4127463571486;
         const SaMem_srt+328;
 },
 _caPvr() //  [R1]
         { []
         }
     {offset
       caPvr: // global
           if (R1 & 7 == 1) goto caPGW; else goto caPGX;
       caPGW: // global
           Sp = Sp + 32;
           call lvl24_raLJM_entry() args: 8, res: 0, upd: 8;
       caPGX: // global
           I64[Sp] = block_caPvx_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaPJn; else goto caPvy;
       uaPJn: // global
           call _caPvx(R1) args: 0, res: 0, upd: 0;
       caPvy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvr_info" {
     block_caPvr_info:
         const _caPvr;
         const 3;
         const 4127463571486;
         const SaMem_srt+328;
 },
 _caPvx() //  [R1]
         { []
         }
     {offset
       caPvx: // global
           I64[Sp - 40] = block_caPvC_info;
           _saLVI::P64 = R1;
           _saLVJ::P64 = P64[R1 + 7];
           _saLVL::P64 = P64[R1 + 23];
           _saLVN::P64 = P64[R1 + 31];
           _saLVP::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _saLVJ::P64;
           P64[Sp - 24] = _saLVL::P64;
           P64[Sp - 16] = _saLVN::P64;
           P64[Sp - 8] = _saLVP::P64;
           P64[Sp] = _saLVI::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaPJo; else goto caPvD;
       uaPJo: // global
           call _caPvC(R1) args: 0, res: 0, upd: 0;
       caPvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvx_info" {
     block_caPvx_info:
         const _caPvx;
         const 3;
         const 3852585664542;
         const SaMem_srt+328;
 },
 _caPvC() //  [R1]
         { []
         }
     {offset
       caPvC: // global
           I64[Sp - 8] = block_caPvH_info;
           _saLVW::P64 = R1;
           _saLVX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saLVX::I64;
           P64[Sp + 16] = _saLVW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPJp; else goto caPvI;
       uaPJp: // global
           call _caPvH(R1) args: 0, res: 0, upd: 0;
       caPvI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvC_info" {
     block_caPvC_info:
         const _caPvC;
         const 8;
         const 3852585664542;
         const SaMem_srt+328;
 },
 _caPvH() //  [R1]
         { []
         }
     {offset
       caPvH: // global
           I64[Sp - 8] = block_caPvM_info;
           _saLVY::P64 = R1;
           _saLVZ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saLVZ::I64;
           P64[Sp + 16] = _saLVY::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPJq; else goto caPvN;
       uaPJq: // global
           call _caPvM(R1) args: 0, res: 0, upd: 0;
       caPvN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvH_info" {
     block_caPvH_info:
         const _caPvH;
         const 73;
         const 3852585664542;
         const SaMem_srt+328;
 },
 _caPvM() //  [R1]
         { []
         }
     {offset
       caPvM: // global
           _saLVs::P64 = P64[Sp + 80];
           _saLW1::P64 = P64[R1 + 7];
           _saLW3::P64 = P64[R1 + 23];
           _saLW4::P64 = P64[R1 + 31];
           (_saLW8::I64) = call MO_AtomicRMW W64 AMO_Add(P64[Sp + 48] + 16, 1);
           I64[Sp - 16] = block_caPvT_info;
           R1 = _saLVs::P64;
           I64[Sp - 8] = _saLW8::I64;
           P64[Sp] = _saLW4::P64;
           P64[Sp + 48] = _saLW3::P64;
           P64[Sp + 80] = _saLW1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaPJr; else goto caPvU;
       uaPJr: // global
           call _caPvT(R1) args: 0, res: 0, upd: 0;
       caPvU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvM_info" {
     block_caPvM_info:
         const _caPvM;
         const 202;
         const 3852585664542;
         const SaMem_srt+328;
 },
 _caPvT() //  [R1]
         { []
         }
     {offset
       caPvT: // global
           I64[Sp - 8] = block_caPvY_info;
           _saLW9::P64 = R1;
           _saLWa::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saLWa::I64;
           P64[Sp + 88] = _saLW9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaPJs; else goto caPvZ;
       uaPJs: // global
           call _caPvY(R1) args: 0, res: 0, upd: 0;
       caPvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvT_info" {
     block_caPvT_info:
         const _caPvT;
         const 844;
         const 3852585664542;
         const SaMem_srt+328;
 },
 _caPvY() //  [R1]
         { []
         }
     {offset
       caPvY: // global
           I64[Sp - 16] = block_caPw3_info;
           I64[Sp - 8] = I64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvY_info" {
     block_caPvY_info:
         const _caPvY;
         const 1741;
         const 3852585664542;
         const SaMem_srt+328;
 },
 _caPw3() //  [R1]
         { []
         }
     {offset
       caPw3: // global
           _saLVW::P64 = P64[Sp + 72];
           _saLVX::I64 = I64[Sp + 56];
           _saLVY::P64 = P64[Sp + 64];
           _saLWg::I64 = I64[Sp + 24] & 31;
           if (%MO_S_Gt_W64(_saLVX::I64,
                            _saLWg::I64)) goto caPHh; else goto caPJ4;
       caPJ4: // global
           if (%MO_S_Gt_W64(_saLWg::I64,
                            I64[Sp + 48])) goto caPHh; else goto caPHi;
       caPHh: // global
           R4 = _saLWg::I64;
           R3 = _saLVW::P64;
           R2 = _saLVY::P64;
           Sp = Sp + 128;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caPHi: // global
           _saLWn::P64 = P64[P64[Sp + 80] + ((_saLWg::I64 - _saLVX::I64 << 3) + 24)];
           I64[Sp] = block_caPwj_info;
           _saLWf::I64 = R1;
           R1 = _saLWn::P64;
           I64[Sp + 80] = _saLWf::I64;
           if (R1 & 7 != 0) goto uaPJt; else goto caPwk;
       uaPJt: // global
           call _caPwj(R1) args: 0, res: 0, upd: 0;
       caPwk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPw3_info" {
     block_caPw3_info:
         const _caPw3;
         const 6991;
         const 3852585664542;
         const SaMem_srt+328;
 },
 _caPwj() //  [R1]
         { []
         }
     {offset
       caPwj: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caPHl; else goto caPHk;
       caPHl: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPHk: // global
           _saLWp::P64 = P64[R1 + 7];
           I64[Hp - 104] = $wio_saLWq_info;
           P64[Hp - 96] = P64[Sp + 104];
           P64[Hp - 88] = P64[Sp + 120];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 112];
           I64[Hp - 56] = I64[Sp + 32];
           I64[Hp - 48] = I64[Sp + 24];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io1_saLYy_info;
           P64[Hp - 24] = Hp - 102;
           _caPCB::P64 = Hp - 30;
           _saLYW::I64 = I64[Sp + 80];
           if (_saLYW::I64 != 0) goto uaPJe; else goto caPI0;
       uaPJe: // global
           if (_saLYW::I64 != 1) goto caPHr; else goto caPIv;
       caPHr: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caPDT_info;
           R1 = _saLWp::P64;
           P64[Sp + 112] = _saLWp::P64;
           P64[Sp + 120] = _caPCB::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caPIv: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caPG0_info;
           R1 = _saLWp::P64;
           P64[Sp + 112] = _saLWp::P64;
           P64[Sp + 120] = _caPCB::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caPI0: // global
           I64[Hp - 16] = sat_saLZD_info;
           P64[Hp - 8] = _saLWp::P64;
           P64[Hp] = _caPCB::P64;
           I64[Sp + 8] = block_caPFz_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPwj_info" {
     block_caPwj_info:
         const _caPwj;
         const 64335;
         const 30064771102;
         const SaMem_srt+384;
 },
 _caPDT() //  [R1]
         { []
         }
     {offset
       caPDT: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caPHu; else goto caPHt;
       caPHu: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPHt: // global
           I64[Hp - 56] = sat_saLZ5_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saLZ0_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saLZ1_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caPEm_info;
           R2 = Hp - 54;
           _saLYZ::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saLYZ::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPDT_info" {
     block_caPDT_info:
         const _caPDT;
         const 65422;
         const 30064771102;
         const SaMem_srt+384;
 },
 _caPEm() //  [R1]
         { []
         }
     {offset
       caPEm: // global
           I64[Sp] = block_caPEo_info;
           R2 = P64[Sp + 112];
           _saLZ8::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saLZ8::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPEm_info" {
     block_caPEm_info:
         const _caPEm;
         const 65422;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPEo() //  []
         { []
         }
     {offset
       caPEo: // global
           I64[Sp] = block_caPEq_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaPJv; else goto caPEr;
       uaPJv: // global
           call _caPEq(R1) args: 0, res: 0, upd: 0;
       caPEr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPEo_info" {
     block_caPEo_info:
         const _caPEo;
         const 327566;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPEq() //  [R1]
         { []
         }
     {offset
       caPEq: // global
           I64[Sp] = block_caPEv_info;
           _saLZb::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saLZb::P64;
           if (R1 & 7 != 0) goto uaPJw; else goto caPEw;
       uaPJw: // global
           call _caPEv(R1) args: 0, res: 0, upd: 0;
       caPEw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPEq_info" {
     block_caPEq_info:
         const _caPEq;
         const 851854;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPEv() //  [R1]
         { []
         }
     {offset
       caPEv: // global
           if (R1 & 7 == 1) goto caPHC; else goto caPHS;
       caPHC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPHF; else goto caPHE;
       caPHF: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPHE: // global
           I64[Hp - 16] = sat_saLZh_info;
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caPHy_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
       caPHS: // global
           I64[Sp + 8] = block_caPHQ_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaPJx; else goto caPHT;
       uaPJx: // global
           call _caPHQ(R1) args: 0, res: 0, upd: 0;
       caPHT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPEv_info" {
     block_caPEv_info:
         const _caPEv;
         const 327566;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPHy() //  []
         { []
         }
     {offset
       caPHy: // global
           I64[Sp] = block_caPHA_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaPJE; else goto caPHH;
       uaPJE: // global
           call _caPHA(R1) args: 0, res: 0, upd: 0;
       caPHH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPHy_info" {
     block_caPHy_info:
         const _caPHy;
         const 163789;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPHA() //  [R1]
         { []
         }
     {offset
       caPHA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPHN; else goto caPHM;
       caPHN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPHM: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caPCT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPHA_info" {
     block_caPHA_info:
         const _caPHA;
         const 425933;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPHQ() //  [R1]
         { []
         }
     {offset
       caPHQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPHZ; else goto caPHY;
       caPHZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPHY: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caPCT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPHQ_info" {
     block_caPHQ_info:
         const _caPHQ;
         const 425933;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPG0() //  [R1]
         { []
         }
     {offset
       caPG0: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caPIy; else goto caPIx;
       caPIy: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPIx: // global
           I64[Hp - 56] = sat_saM04_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saLZZ_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saM00_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caPGt_info;
           R2 = Hp - 54;
           _saLZY::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saLZY::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPG0_info" {
     block_caPG0_info:
         const _caPG0;
         const 65422;
         const 30064771102;
         const SaMem_srt+384;
 },
 _caPGt() //  [R1]
         { []
         }
     {offset
       caPGt: // global
           I64[Sp] = block_caPGv_info;
           R2 = P64[Sp + 112];
           _saM07::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saM07::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPGt_info" {
     block_caPGt_info:
         const _caPGt;
         const 65422;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPGv() //  []
         { []
         }
     {offset
       caPGv: // global
           I64[Sp] = block_caPGx_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaPJB; else goto caPGy;
       uaPJB: // global
           call _caPGx(R1) args: 0, res: 0, upd: 0;
       caPGy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPGv_info" {
     block_caPGv_info:
         const _caPGv;
         const 327566;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPGx() //  [R1]
         { []
         }
     {offset
       caPGx: // global
           I64[Sp] = block_caPGC_info;
           _saM0a::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saM0a::P64;
           if (R1 & 7 != 0) goto uaPJC; else goto caPGD;
       uaPJC: // global
           call _caPGC(R1) args: 0, res: 0, upd: 0;
       caPGD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPGx_info" {
     block_caPGx_info:
         const _caPGx;
         const 851854;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPGC() //  [R1]
         { []
         }
     {offset
       caPGC: // global
           if (R1 & 7 == 1) goto caPIG; else goto caPIW;
       caPIG: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPIJ; else goto caPII;
       caPIJ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPII: // global
           I64[Hp - 16] = sat_saM0g_info;
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caPIC_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
       caPIW: // global
           I64[Sp + 8] = block_caPIU_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaPJD; else goto caPIX;
       uaPJD: // global
           call _caPIU(R1) args: 0, res: 0, upd: 0;
       caPIX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPGC_info" {
     block_caPGC_info:
         const _caPGC;
         const 327566;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPIC() //  []
         { []
         }
     {offset
       caPIC: // global
           I64[Sp] = block_caPIE_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaPJK; else goto caPIL;
       uaPJK: // global
           call _caPIE(R1) args: 0, res: 0, upd: 0;
       caPIL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPIC_info" {
     block_caPIC_info:
         const _caPIC;
         const 163789;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPIE() //  [R1]
         { []
         }
     {offset
       caPIE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPIR; else goto caPIQ;
       caPIR: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPIQ: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caPCT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPIE_info" {
     block_caPIE_info:
         const _caPIE;
         const 425933;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPIU() //  [R1]
         { []
         }
     {offset
       caPIU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPJ3; else goto caPJ2;
       caPJ3: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPJ2: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caPCT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPIU_info" {
     block_caPIU_info:
         const _caPIU;
         const 425933;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPFz() //  [R1]
         { []
         }
     {offset
       caPFz: // global
           I64[Sp] = block_caPFB_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaPJy; else goto caPFC;
       uaPJy: // global
           call _caPFB(R1) args: 0, res: 0, upd: 0;
       caPFC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPFz_info" {
     block_caPFz_info:
         const _caPFz;
         const 851854;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPFB() //  [R1]
         { []
         }
     {offset
       caPFB: // global
           I64[Sp] = block_caPFG_info;
           _saLZI::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saLZI::P64;
           if (R1 & 7 != 0) goto uaPJz; else goto caPFH;
       uaPJz: // global
           call _caPFG(R1) args: 0, res: 0, upd: 0;
       caPFH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPFB_info" {
     block_caPFB_info:
         const _caPFB;
         const 851854;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPFG() //  [R1]
         { []
         }
     {offset
       caPFG: // global
           if (R1 & 7 == 1) goto caPI7; else goto caPIn;
       caPI7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPIa; else goto caPI9;
       caPIa: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPI9: // global
           I64[Hp - 16] = sat_saLZO_info;
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caPI3_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
       caPIn: // global
           I64[Sp + 8] = block_caPIl_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaPJA; else goto caPIo;
       uaPJA: // global
           call _caPIl(R1) args: 0, res: 0, upd: 0;
       caPIo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPFG_info" {
     block_caPFG_info:
         const _caPFG;
         const 327566;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPI3() //  []
         { []
         }
     {offset
       caPI3: // global
           I64[Sp] = block_caPI5_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaPJH; else goto caPIc;
       uaPJH: // global
           call _caPI5(R1) args: 0, res: 0, upd: 0;
       caPIc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPI3_info" {
     block_caPI3_info:
         const _caPI3;
         const 163789;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPI5() //  [R1]
         { []
         }
     {offset
       caPI5: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPIi; else goto caPIh;
       caPIi: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPIh: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caPCT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPI5_info" {
     block_caPI5_info:
         const _caPI5;
         const 425933;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPIl() //  [R1]
         { []
         }
     {offset
       caPIl: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPIu; else goto caPIt;
       caPIu: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPIt: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caPCT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPIl_info" {
     block_caPIl_info:
         const _caPIl;
         const 425933;
         const 12884901918;
         const SaMem_srt+392;
 },
 _caPCT() //  []
         { []
         }
     {offset
       caPCT: // global
           Hp = Hp + 64;
           _saLYF::P64 = P64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto caPHp; else goto caPHo;
       caPHp: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_caPCS_info;
           R1 = _saLYF::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPHo: // global
           I64[Hp - 56] = sat_saLYU_info;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = _saLYF::P64;
           I64[Hp - 32] = sat_saLYP_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caPCS() //  [R1]
         { []
         }
     {offset
       caPCS: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _caPCT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPCS_info" {
     block_caPCS_info:
         const _caPCS;
         const 772;
         const 12884901918;
         const SaMem_srt+392;
 },
 GHC.Event.Thread.threadWaitReadSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       caPJR: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caPJS; else goto caPJT;
       caPJS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.threadWaitReadSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPJT: // global
           I64[Sp - 24] = block_caPvg_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitReadSTM1_info" {
     GHC.Event.Thread.threadWaitReadSTM1_info:
         const GHC.Event.Thread.threadWaitReadSTM1_entry;
         const 0;
         const 8534100017166;
         const 12884901903;
         const SaMem_srt+328;
 },
 _caPvg() //  [R1]
         { []
         }
     {offset
       caPvg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caPJW; else goto caPJV;
       caPJW: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPJV: // global
           I64[Hp - 16] = io_saLVx_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _caPvi::P64 = Hp - 15;
           if (R1 == 0) goto caPJQ; else goto caPJP;
       caPJQ: // global
           R1 = _caPvi::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caPJP: // global
           R1 = _caPvi::P64;
           Sp = Sp + 24;
           call io_saLVx_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPvg_info" {
     block_caPvg_info:
         const _caPvg;
         const 2;
         const 4136053506078;
         const SaMem_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.544001923 UTC

[section ""data" . threadWaitReadSTM2_raLJN_closure" {
     threadWaitReadSTM2_raLJN_closure:
         const threadWaitReadSTM2_raLJN_info;
         const 0;
 },
 threadWaitReadSTM2_raLJN_entry() //  [R2]
         { []
         }
     {offset
       caPS6: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtRead_closure;
           call GHC.Event.Thread.threadWaitReadSTM1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitReadSTM2_raLJN_info" {
     threadWaitReadSTM2_raLJN_info:
         const threadWaitReadSTM2_raLJN_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaMem_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.547693814 UTC

[section ""data" . GHC.Event.Thread.threadWaitReadSTM_closure" {
     GHC.Event.Thread.threadWaitReadSTM_closure:
         const GHC.Event.Thread.threadWaitReadSTM_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitReadSTM_entry() //  [R2]
         { []
         }
     {offset
       caPSh: // global
           R2 = R2;
           call threadWaitReadSTM2_raLJN_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitReadSTM_info" {
     GHC.Event.Thread.threadWaitReadSTM_info:
         const GHC.Event.Thread.threadWaitReadSTM_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaMem_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.551705606 UTC

[section ""data" . threadWaitWriteSTM1_raLJO_closure" {
     threadWaitWriteSTM1_raLJO_closure:
         const threadWaitWriteSTM1_raLJO_info;
         const 0;
 },
 threadWaitWriteSTM1_raLJO_entry() //  [R2]
         { []
         }
     {offset
       caPSs: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtWrite_closure;
           call GHC.Event.Thread.threadWaitReadSTM1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitWriteSTM1_raLJO_info" {
     threadWaitWriteSTM1_raLJO_info:
         const threadWaitWriteSTM1_raLJO_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const SaMem_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.555223005 UTC

[section ""data" . GHC.Event.Thread.threadWaitWriteSTM_closure" {
     GHC.Event.Thread.threadWaitWriteSTM_closure:
         const GHC.Event.Thread.threadWaitWriteSTM_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitWriteSTM_entry() //  [R2]
         { []
         }
     {offset
       caPSD: // global
           R2 = R2;
           call threadWaitWriteSTM1_raLJO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitWriteSTM_info" {
     GHC.Event.Thread.threadWaitWriteSTM_info:
         const GHC.Event.Thread.threadWaitWriteSTM_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaMem_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.558356673 UTC

[section ""cstring" . lvl25_raLJP_bytes" {
     lvl25_raLJP_bytes:
         I8[] [116,104,114,101,97,100,87,97,105,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.560593823 UTC

[section ""data" . lvl26_raLJQ_closure" {
     lvl26_raLJQ_closure:
         const lvl26_raLJQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_raLJQ_entry() //  [R1]
         { []
         }
     {offset
       caPSR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPSS; else goto caPST;
       caPSS: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPST: // global
           (_caPSO::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caPSO::I64 == 0) goto caPSQ; else goto caPSP;
       caPSQ: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caPSP: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caPSO::I64;
           R2 = lvl25_raLJP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_raLJQ_info" {
     lvl26_raLJQ_info:
         const lvl26_raLJQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.565027431 UTC

[section ""data" . lvl27_raLJR_closure" {
     lvl27_raLJR_closure:
         const lvl27_raLJR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_raLJR_entry() //  [R1]
         { []
         }
     {offset
       caPT7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPT8; else goto caPT9;
       caPT8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPT9: // global
           (_caPT4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caPT4::I64 == 0) goto caPT6; else goto caPT5;
       caPT6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caPT5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caPT4::I64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = 9;
           R2 = lvl26_raLJQ_closure;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_raLJR_info" {
     lvl27_raLJR_info:
         const lvl27_raLJR_entry;
         const 0;
         const 17596481011733;
         const SaMem_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.569027801 UTC

[section ""data" . lvl28_raLJS_closure" {
     lvl28_raLJS_closure:
         const lvl28_raLJS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl28_raLJS_entry() //  [R1]
         { []
         }
     {offset
       caPTn: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caPTo; else goto caPTp;
       caPTo: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caPTp: // global
           (_caPTk::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caPTk::I64 == 0) goto caPTm; else goto caPTl;
       caPTm: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caPTl: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caPTk::I64;
           R2 = lvl27_raLJR_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl28_raLJS_info" {
     lvl28_raLJS_info:
         const lvl28_raLJS_entry;
         const 0;
         const 8800387989525;
         const SaMem_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.607737118 UTC

[section ""data" . GHC.Event.Thread.threadWaitRead1_closure" {
     GHC.Event.Thread.threadWaitRead1_closure:
         const GHC.Event.Thread.threadWaitRead1_info;
         const 0;
 },
 lvl31_saM1r_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caPVc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caPVd; else goto caPVe;
       caPVd: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPVe: // global
           I64[Sp - 8] = block_caPVa_info;
           R2 = R3;
           R1 = P64[R1 + 5];
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_saM1r_info" {
     lvl31_saM1r_info:
         const lvl31_saM1r_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 _caPVa() //  []
         { []
         }
     {offset
       caPVa: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPVa_info" {
     block_caPVa_info:
         const _caPVa;
         const 0;
         const 30;
 },
 $wgo_saM25_entry() //  [R1, R2]
         { []
         }
     {offset
       caPWl: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caPWm; else goto caPWn;
       caPWm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPWn: // global
           I64[Sp - 24] = block_caPWe_info;
           _saM25::P64 = R1;
           _saM18::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saM18::I64;
           P64[Sp - 8] = _saM25::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaPWK; else goto caPWf;
       uaPWK: // global
           call _caPWe(R1) args: 0, res: 0, upd: 0;
       caPWf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saM25_info" {
     $wgo_saM25_info:
         const $wgo_saM25_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caPWe() //  [R1]
         { []
         }
     {offset
       caPWe: // global
           if (R1 & 7 == 1) goto caPWi; else goto caPWj;
       caPWi: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPWj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPWv; else goto caPWu;
       caPWv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPWu: // global
           _saM29::P64 = P64[R1 + 6];
           _saM2a::P64 = P64[R1 + 14];
           _saM28::I64 = I64[R1 + 22];
           if (_saM28::I64 == I64[Sp + 8]) goto caPWJ; else goto caPWD;
       caPWJ: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saM29::P64;
           R3 = _saM2a::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPWD: // global
           Hp = Hp - 16;
           I64[Sp] = block_caPWz_info;
           R2 = _saM2a::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saM29::P64;
           I64[Sp + 16] = _saM28::I64;
           call $wgo_saM25_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPWe_info" {
     block_caPWe_info:
         const _caPWe;
         const 66;
         const 30;
 },
 _caPWz() //  [R1, R2, R3]
         { []
         }
     {offset
       caPWz: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caPWG; else goto caPWF;
       caPWG: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caPWF: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPWz_info" {
     block_caPWz_info:
         const _caPWz;
         const 130;
         const 30;
 },
 $wgo_saM2U_entry() //  [R1, R2]
         { []
         }
     {offset
       caPXv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caPXw; else goto caPXx;
       caPXw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPXx: // global
           I64[Sp - 24] = block_caPXo_info;
           _saM2U::P64 = R1;
           _saM18::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saM18::I64;
           P64[Sp - 8] = _saM2U::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaPXU; else goto caPXp;
       uaPXU: // global
           call _caPXo(R1) args: 0, res: 0, upd: 0;
       caPXp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saM2U_info" {
     $wgo_saM2U_info:
         const $wgo_saM2U_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caPXo() //  [R1]
         { []
         }
     {offset
       caPXo: // global
           if (R1 & 7 == 1) goto caPXs; else goto caPXt;
       caPXs: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPXt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPXF; else goto caPXE;
       caPXF: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPXE: // global
           _saM2Y::P64 = P64[R1 + 6];
           _saM2Z::P64 = P64[R1 + 14];
           _saM2X::I64 = I64[R1 + 22];
           if (_saM2X::I64 == I64[Sp + 8]) goto caPXT; else goto caPXN;
       caPXT: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saM2Y::P64;
           R3 = _saM2Z::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caPXN: // global
           Hp = Hp - 16;
           I64[Sp] = block_caPXJ_info;
           R2 = _saM2Z::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saM2Y::P64;
           I64[Sp + 16] = _saM2X::I64;
           call $wgo_saM2U_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPXo_info" {
     block_caPXo_info:
         const _caPXo;
         const 66;
         const 30;
 },
 _caPXJ() //  [R1, R2, R3]
         { []
         }
     {offset
       caPXJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caPXQ; else goto caPXP;
       caPXQ: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caPXP: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPXJ_info" {
     block_caPXJ_info:
         const _caPXJ;
         const 130;
         const 30;
 },
 $wio_saM1o_entry() //  [R1, R2]
         { []
         }
     {offset
       caPXZ: // global
           _saM1p::P64 = R2;
           _saM1o::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto caPY0; else goto caPY1;
       caPY1: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caPY3; else goto caPY2;
       caPY3: // global
           HpAlloc = 80;
           goto caPY0;
       caPY0: // global
           R2 = _saM1p::P64;
           R1 = _saM1o::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caPY2: // global
           _saM0z::P64 = P64[_saM1o::P64 + 6];
           _saM0Z::P64 = P64[_saM1o::P64 + 14];
           _saM11::P64 = P64[_saM1o::P64 + 22];
           _saM12::P64 = P64[_saM1o::P64 + 30];
           _saM17::P64 = P64[_saM1o::P64 + 38];
           _saM16::I64 = I64[_saM1o::P64 + 46];
           _saM18::I64 = I64[_saM1o::P64 + 54];
           _saM1a::I64 = I64[_saM1o::P64 + 62];
           I64[Hp - 72] = lvl31_saM1r_info;
           P64[Hp - 64] = _saM0z::P64;
           I64[Hp - 56] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 48] = Hp - 69;
           I64[Hp - 40] = _saM18::I64;
           I64[Hp - 32] = _saM16::I64;
           I64[Hp - 24] = _saM1a::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 64] = block_caPUS_info;
           R5 = _saM1p::P64;
           R4 = Hp - 14;
           R3 = _saM18::I64;
           R2 = GHC.Base.++_closure+2;
           P64[Sp - 56] = _saM0Z::P64;
           P64[Sp - 48] = _saM11::P64;
           P64[Sp - 40] = _saM12::P64;
           P64[Sp - 32] = _saM17::P64;
           I64[Sp - 24] = _saM18::I64;
           I64[Sp - 16] = _saM1a::I64;
           P64[Sp - 8] = _saM1p::P64;
           Sp = Sp - 64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saM1o_info" {
     $wio_saM1o_info:
         const $wio_saM1o_entry;
         const 12884901893;
         const 4294967304;
         const 8589934597;
         const SaMem_srt+384;
 },
 _caPUS() //  [R1]
         { []
         }
     {offset
       caPUS: // global
           I64[Sp - 8] = block_caPUW_info;
           _saM1A::P64 = R1;
           R1 = R1;
           P64[Sp] = _saM1A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQ0n; else goto caPUX;
       uaQ0n: // global
           call _caPUW(R1) args: 0, res: 0, upd: 0;
       caPUX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPUS_info" {
     block_caPUS_info:
         const _caPUS;
         const 3079;
         const 4294967326;
         const SaMem_srt+384;
 },
 _caPUW() //  [R1]
         { []
         }
     {offset
       caPUW: // global
           if (R1 & 7 == 1) goto caPXW; else goto caPXX;
       caPXW: // global
           I64[Sp] = 0;
           P64[Sp - 8] = GHC.Event.Internal.$fMonoidEventLifetime1_closure;
           Sp = Sp - 8;
           call _saM1B() args: 0, res: 0, upd: 0;
       caPXX: // global
           I64[Sp] = block_caPV2_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPUW_info" {
     block_caPUW_info:
         const _caPUW;
         const 6152;
         const 4294967326;
         const SaMem_srt+384;
 },
 _caPV2() //  [R1]
         { []
         }
     {offset
       caPV2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPZW; else goto caPZV;
       caPZW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPZV: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           P64[Sp - 8] = Hp - 7;
           I64[Sp] = R1;
           Sp = Sp - 8;
           call _saM1B() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPV2_info" {
     block_caPV2_info:
         const _caPV2;
         const 6152;
         const 30;
 },
 _saM1B() //  []
         { []
         }
     {offset
       saM1B: // global
           _saM1D::P64 = P64[Sp];
           I64[Sp] = block_caPVj_info;
           R1 = _saM1D::P64;
           if (R1 & 7 != 0) goto uaQ0I; else goto caPVk;
       uaQ0I: // global
           call _caPVj(R1) args: 0, res: 0, upd: 0;
       caPVk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caPVj() //  [R1]
         { []
         }
     {offset
       caPVj: // global
           _saM1G::I64 = I64[Sp + 8] | I64[Sp + 64];
           _saM1H::I64 = _saM1G::I64 & 8;
           if (_saM1H::I64 != 0) goto uaQ0g; else goto uaQ0f;
       uaQ0g: // global
           I64[Sp] = _saM1H::I64;
           I64[Sp + 40] = _saM1G::I64;
           I64[Sp + 64] = I64[R1 + 7];
           call _caPVv() args: 0, res: 0, upd: 0;
       uaQ0f: // global
           I64[Sp + 32] = _saM1H::I64;
           I64[Sp + 64] = _saM1G::I64;
           Sp = Sp + 16;
           call _caPWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPVj_info" {
     block_caPVj_info:
         const _caPVj;
         const 12361;
         const 30;
 },
 _caPVv() //  []
         { []
         }
     {offset
       caPVv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caPYb; else goto caPYa;
       caPYb: // global
           HpAlloc = 32;
           _saM1H::I64 = I64[Sp];
           I64[Sp] = block_caPVu_info;
           R1 = _saM1H::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPYa: // global
           _saM1G::I64 = I64[Sp + 40];
           if (I64[Sp + 64] == _saM1G::I64) goto caPYd; else goto caPYe;
       caPYd: // global
           Hp = Hp - 32;
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caPYe: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _saM1G::I64 & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] & 7;
           I64[Sp + 8] = block_caPVJ_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 32];
           I64[Sp] = stg_ap_v_info;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caPVu() //  [R1]
         { []
         }
     {offset
       caPVu: // global
           I64[Sp] = R1;
           call _caPVv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPVu_info" {
     block_caPVu_info:
         const _caPVu;
         const 13385;
         const 30;
 },
 _caPVJ() //  [R1]
         { []
         }
     {offset
       caPVJ: // global
           I64[Sp] = block_caPVL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQ0t; else goto caPVM;
       uaQ0t: // global
           call _caPVL(R1) args: 0, res: 0, upd: 0;
       caPVM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPVJ_info" {
     block_caPVJ_info:
         const _caPVJ;
         const 8072;
         const 30;
 },
 _caPVL() //  [R1]
         { []
         }
     {offset
       caPVL: // global
           if (R1 & 7 == 1) goto caPYi; else goto caPZ0;
       caPYi: // global
           I64[Sp + 40] = block_caPVQ_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaQ0u; else goto caPVR;
       uaQ0u: // global
           call _caPVQ(R1) args: 0, res: 0, upd: 0;
       caPVR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPZ0: // global
           R1 = lvl22_raLJK_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPVL_info" {
     block_caPVL_info:
         const _caPVL;
         const 8072;
         const 30;
 },
 _caPVQ() //  [R1]
         { []
         }
     {offset
       caPVQ: // global
           _saM1p::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caPYl; else goto caPYU;
       caPYl: // global
           I64[Sp] = block_caPVV_info;
           R1 = P64[_saM1p::P64 + 8];
           if (R1 & 7 != 0) goto uaQ0v; else goto caPVW;
       uaQ0v: // global
           call _caPVV(R1) args: 0, res: 0, upd: 0;
       caPVW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPYU: // global
           I64[Sp + 24] = block_caPYS_info;
           R5 = _saM1p::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPVQ_info" {
     block_caPVQ_info:
         const _caPVQ;
         const 195;
         const 30;
 },
 _caPVV() //  [R1]
         { []
         }
     {offset
       caPVV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPYo; else goto caPYn;
       caPYo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPYn: // global
           _saM18::I64 = I64[Sp + 8];
           _saM1W::P64 = P64[R1 + 7];
           _saM1Y::P64 = P64[R1 + 15];
           _saM1X::I64 = I64[R1 + 23];
           _saM1Z::I64 = _saM18::I64 & (I64[_saM1W::P64 + 8] - 1);
           _saM24::P64 = P64[(_saM1W::P64 + 24) + (_saM1Z::I64 << 3)];
           I64[Hp - 8] = $wgo_saM25_info;
           I64[Hp] = _saM18::I64;
           I64[Sp - 8] = block_caPYp_info;
           R2 = _saM24::P64;
           R1 = Hp - 7;
           I64[Sp] = _saM1Z::I64;
           P64[Sp + 8] = _saM1Y::P64;
           I64[Sp + 16] = _saM1X::I64;
           P64[Sp + 24] = _saM1W::P64;
           Sp = Sp - 8;
           call $wgo_saM25_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPVV_info" {
     block_caPVV_info:
         const _caPVV;
         const 451;
         const 30;
 },
 _caPYp() //  [R1, R2, R3]
         { []
         }
     {offset
       caPYp: // global
           I64[Sp - 16] = block_caPYr_info;
           _saM2j::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saM2j::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQ0A; else goto caPYt;
       uaQ0A: // global
           call _caPYr(R1) args: 0, res: 0, upd: 0;
       caPYt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPYp_info" {
     block_caPYp_info:
         const _caPYp;
         const 324;
         const 30;
 },
 _caPYr() //  [R1]
         { []
         }
     {offset
       caPYr: // global
           if (R1 & 7 == 1) goto uaQ0i; else goto caPYE;
       uaQ0i: // global
           Sp = Sp + 56;
           call _caPZB() args: 0, res: 0, upd: 0;
       caPYE: // global
           _saM1W::P64 = P64[Sp + 48];
           _saM1Z::I64 = I64[Sp + 24];
           _saM2j::P64 = P64[Sp + 16];
           _saM2l::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saM1W::P64 + 24) + (_saM1Z::I64 << 3)] = _saM2l::P64;
           I64[_saM1W::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saM1W::P64 + 24) + ((I64[_saM1W::P64 + 8] << 3) + (_saM1Z::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caPYC_info;
           R1 = _saM2j::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaQ0B; else goto caPYF;
       uaQ0B: // global
           call _caPYC(R1) args: 0, res: 0, upd: 0;
       caPYF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPYr_info" {
     block_caPYr_info:
         const _caPYr;
         const 1286;
         const 30;
 },
 _caPYC() //  [R1]
         { []
         }
     {offset
       caPYC: // global
           if (R1 & 7 == 1) goto uaQ0j; else goto caPYP;
       uaQ0j: // global
           Sp = Sp + 32;
           call _caPZB() args: 0, res: 0, upd: 0;
       caPYP: // global
           _saM1X::I64 = I64[Sp + 16];
           _saM1Y::P64 = P64[Sp + 8];
           I64[_saM1X::I64] = I64[_saM1X::I64] - 1;
           call MO_Touch(_saM1Y::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPYC_info" {
     block_caPYC_info:
         const _caPYC;
         const 387;
         const 30;
 },
 _caPYS() //  []
         { []
         }
     {offset
       caPYS: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPYS_info" {
     block_caPYS_info:
         const _caPYS;
         const 0;
         const 30;
 },
 _caPWN() //  []
         { []
         }
     {offset
       caPWN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPZ4; else goto caPZ3;
       caPZ4: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caPWM_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caPZ3: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           I64[Sp - 8] = block_caPWT_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caPWM() //  [R1]
         { []
         }
     {offset
       caPWM: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caPWN() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caPWM_info" {
     block_caPWM_info:
         const _caPWM;
         const 6408;
         const 30;
 },
 _caPWT() //  [R1]
         { []
         }
     {offset
       caPWT: // global
           I64[Sp] = block_caPWV_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQ0x; else goto caPWW;
       uaQ0x: // global
           call _caPWV(R1) args: 0, res: 0, upd: 0;
       caPWW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPWT_info" {
     block_caPWT_info:
         const _caPWT;
         const 8072;
         const 30;
 },
 _caPWV() //  [R1]
         { []
         }
     {offset
       caPWV: // global
           if (R1 & 7 == 1) goto caPZ8; else goto caPZQ;
       caPZ8: // global
           I64[Sp + 40] = block_caPX0_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaQ0y; else goto caPX1;
       uaQ0y: // global
           call _caPX0(R1) args: 0, res: 0, upd: 0;
       caPX1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPZQ: // global
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPWV_info" {
     block_caPWV_info:
         const _caPWV;
         const 8072;
         const 30;
 },
 _caPX0() //  [R1]
         { []
         }
     {offset
       caPX0: // global
           _saM1p::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caPZb; else goto caPZK;
       caPZb: // global
           I64[Sp] = block_caPX5_info;
           R1 = P64[_saM1p::P64 + 8];
           if (R1 & 7 != 0) goto uaQ0z; else goto caPX6;
       uaQ0z: // global
           call _caPX5(R1) args: 0, res: 0, upd: 0;
       caPX6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caPZK: // global
           I64[Sp + 24] = block_caPZI_info;
           R5 = _saM1p::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPX0_info" {
     block_caPX0_info:
         const _caPX0;
         const 195;
         const 30;
 },
 _caPX5() //  [R1]
         { []
         }
     {offset
       caPX5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caPZe; else goto caPZd;
       caPZe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caPZd: // global
           _saM18::I64 = I64[Sp + 8];
           _saM2L::P64 = P64[R1 + 7];
           _saM2N::P64 = P64[R1 + 15];
           _saM2M::I64 = I64[R1 + 23];
           _saM2O::I64 = _saM18::I64 & (I64[_saM2L::P64 + 8] - 1);
           _saM2T::P64 = P64[(_saM2L::P64 + 24) + (_saM2O::I64 << 3)];
           I64[Hp - 8] = $wgo_saM2U_info;
           I64[Hp] = _saM18::I64;
           I64[Sp - 8] = block_caPZf_info;
           R2 = _saM2T::P64;
           R1 = Hp - 7;
           I64[Sp] = _saM2O::I64;
           P64[Sp + 8] = _saM2N::P64;
           I64[Sp + 16] = _saM2M::I64;
           P64[Sp + 24] = _saM2L::P64;
           Sp = Sp - 8;
           call $wgo_saM2U_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPX5_info" {
     block_caPX5_info:
         const _caPX5;
         const 451;
         const 30;
 },
 _caPZf() //  [R1, R2, R3]
         { []
         }
     {offset
       caPZf: // global
           I64[Sp - 16] = block_caPZh_info;
           _saM38::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saM38::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQ0E; else goto caPZj;
       uaQ0E: // global
           call _caPZh(R1) args: 0, res: 0, upd: 0;
       caPZj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPZf_info" {
     block_caPZf_info:
         const _caPZf;
         const 324;
         const 30;
 },
 _caPZh() //  [R1]
         { []
         }
     {offset
       caPZh: // global
           if (R1 & 7 == 1) goto uaQ0l; else goto caPZu;
       uaQ0l: // global
           Sp = Sp + 56;
           call _caPZB() args: 0, res: 0, upd: 0;
       caPZu: // global
           _saM2L::P64 = P64[Sp + 48];
           _saM2O::I64 = I64[Sp + 24];
           _saM38::P64 = P64[Sp + 16];
           _saM3a::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saM2L::P64 + 24) + (_saM2O::I64 << 3)] = _saM3a::P64;
           I64[_saM2L::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saM2L::P64 + 24) + ((I64[_saM2L::P64 + 8] << 3) + (_saM2O::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caPZs_info;
           R1 = _saM38::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaQ0F; else goto caPZv;
       uaQ0F: // global
           call _caPZs(R1) args: 0, res: 0, upd: 0;
       caPZv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPZh_info" {
     block_caPZh_info:
         const _caPZh;
         const 1286;
         const 30;
 },
 _caPZs() //  [R1]
         { []
         }
     {offset
       caPZs: // global
           if (R1 & 7 == 1) goto uaQ0m; else goto caPZF;
       uaQ0m: // global
           Sp = Sp + 32;
           call _caPZB() args: 0, res: 0, upd: 0;
       caPZF: // global
           _saM2M::I64 = I64[Sp + 16];
           _saM2N::P64 = P64[Sp + 8];
           I64[_saM2M::I64] = I64[_saM2M::I64] - 1;
           call MO_Touch(_saM2N::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPZs_info" {
     block_caPZs_info:
         const _caPZs;
         const 387;
         const 30;
 },
 _caPZB() //  []
         { []
         }
     {offset
       caPZB: // global
           R1 = lvl21_raLJJ_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caPZI() //  []
         { []
         }
     {offset
       caPZI: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPZI_info" {
     block_caPZI_info:
         const _caPZI;
         const 0;
         const 30;
 },
 io1_saM3t_entry() //  [R1, R2]
         { []
         }
     {offset
       caQ0R: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQ0S; else goto caQ0T;
       caQ0S: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQ0T: // global
           I64[Sp - 16] = block_caQ0O_info;
           _saM1o::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saM1o::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQ0X; else goto caQ0P;
       uaQ0X: // global
           call _caQ0O(R1) args: 0, res: 0, upd: 0;
       caQ0P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io1_saM3t_info" {
     io1_saM3t_info:
         const io1_saM3t_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaMem_srt+384;
 },
 _caQ0O() //  [R1]
         { []
         }
     {offset
       caQ0O: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saM1o_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ0O_info" {
     block_caQ0O_info:
         const _caQ0O;
         const 1;
         const 4294967326;
         const SaMem_srt+384;
 },
 sat_saM3I_entry() //  [R1, R2]
         { []
         }
     {offset
       caQ1a: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQ1b; else goto caQ1c;
       caQ1b: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQ1c: // global
           I64[Sp - 16] = block_caQ18_info;
           R3 = P64[R1 + 14];
           _saM3D::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saM3D::P64;
           Sp = Sp - 16;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM3I_info" {
     sat_saM3I_info:
         const sat_saM3I_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const SaMem_srt+392;
 },
 _caQ18() //  []
         { []
         }
     {offset
       caQ18: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ18_info" {
     block_caQ18_info:
         const _caQ18;
         const 1;
         const 30;
 },
 sat_saM3C_entry() //  [R1]
         { []
         }
     {offset
       caQ1j: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM3C_info" {
     sat_saM3C_info:
         const sat_saM3C_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saM3Y_entry() //  [R1, R2]
         { []
         }
     {offset
       caQ1x: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQ1y; else goto caQ1z;
       caQ1y: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQ1z: // global
           I64[Sp - 16] = block_caQ1v_info;
           _saM3V::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saM3V::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM3Y_info" {
     sat_saM3Y_info:
         const sat_saM3Y_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caQ1v() //  []
         { []
         }
     {offset
       caQ1v: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ1v_info" {
     block_caQ1v_info:
         const _caQ1v;
         const 1;
         const 30;
 },
 sat_saM3T_entry() //  [R1]
         { []
         }
     {offset
       caQ1G: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saM3t_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM3T_info" {
     sat_saM3T_info:
         const sat_saM3T_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 sat_saM3U_entry() //  [R1]
         { []
         }
     {offset
       caQ1O: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM3U_info" {
     sat_saM3U_info:
         const sat_saM3U_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saM4l_entry() //  [R1, R2]
         { []
         }
     {offset
       caQ26: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQ27; else goto caQ28;
       caQ27: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQ28: // global
           I64[Sp - 16] = block_caQ24_info;
           _saM4i::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saM4i::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM4l_info" {
     sat_saM4l_info:
         const sat_saM4l_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caQ24() //  []
         { []
         }
     {offset
       caQ24: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ24_info" {
     block_caQ24_info:
         const _caQ24;
         const 1;
         const 30;
 },
 sat_saM4g_entry() //  [R1]
         { []
         }
     {offset
       caQ2f: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saM3t_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM4g_info" {
     sat_saM4g_info:
         const sat_saM4g_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 sat_saM4h_entry() //  [R1]
         { []
         }
     {offset
       caQ2n: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM4h_info" {
     sat_saM4h_info:
         const sat_saM4h_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saM4q_entry() //  [R1]
         { []
         }
     {offset
       caQ2u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caQ2v; else goto caQ2w;
       caQ2v: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQ2w: // global
           I64[Sp - 24] = block_caQ1X_info;
           _saM1n::P64 = P64[R1 + 7];
           _saM3t::P64 = P64[R1 + 15];
           R1 = _saM1n::P64;
           P64[Sp - 16] = _saM1n::P64;
           P64[Sp - 8] = _saM3t::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM4q_info" {
     sat_saM4q_info:
         const sat_saM4q_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 _caQ1X() //  [R1]
         { []
         }
     {offset
       caQ1X: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caQ2z; else goto caQ2y;
       caQ2z: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ2y: // global
           I64[Hp - 56] = sat_saM4l_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saM4g_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saM4h_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caQ2q_info;
           R2 = Hp - 54;
           _saM4f::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saM4f::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ1X_info" {
     block_caQ1X_info:
         const _caQ1X;
         const 2;
         const 4294967326;
         const SaMem_srt+384;
 },
 _caQ2q() //  [R1]
         { []
         }
     {offset
       caQ2q: // global
           _saM1n::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caQ2s_info;
           R2 = P64[Sp + 16];
           _saM4o::P64 = R1;
           R1 = _saM1n::P64;
           P64[Sp + 16] = _saM4o::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ2q_info" {
     block_caQ2q_info:
         const _caQ2q;
         const 2;
         const 30;
 },
 _caQ2s() //  []
         { []
         }
     {offset
       caQ2s: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ2s_info" {
     block_caQ2s_info:
         const _caQ2s;
         const 1;
         const 30;
 },
 sat_saM4L_entry() //  [R1, R2]
         { []
         }
     {offset
       caQ2M: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQ2N; else goto caQ2O;
       caQ2N: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQ2O: // global
           I64[Sp - 16] = block_caQ2K_info;
           _saM4I::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saM4I::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM4L_info" {
     sat_saM4L_info:
         const sat_saM4L_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caQ2K() //  []
         { []
         }
     {offset
       caQ2K: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ2K_info" {
     block_caQ2K_info:
         const _caQ2K;
         const 1;
         const 30;
 },
 sat_saM4G_entry() //  [R1]
         { []
         }
     {offset
       caQ2V: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saM3t_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM4G_info" {
     sat_saM4G_info:
         const sat_saM4G_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaMem_srt+384;
 },
 sat_saM4H_entry() //  [R1]
         { []
         }
     {offset
       caQ33: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM4H_info" {
     sat_saM4H_info:
         const sat_saM4H_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_saM0v_entry() //  [R1]
         { []
         }
     {offset
       caQ3a: // global
           if ((Sp + -128) < SpLim) (likely: False) goto caQ3b; else goto caQ3c;
       caQ3b: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQ3c: // global
           I64[Sp - 24] = block_caPTI_info;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saM0v_info" {
     io_saM0v_info:
         const io_saM0v_entry;
         const 2;
         const 564886983671819;
         const 4294967299;
         const SaMem_srt+328;
 },
 _caPTI() //  [R1]
         { []
         }
     {offset
       caPTI: // global
           I64[Sp - 8] = block_caPTK_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Thread.getSystemEventManager1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPTI_info" {
     block_caPTI_info:
         const _caPTI;
         const 2;
         const 564886983671838;
         const SaMem_srt+328;
 },
 _caPTK() //  [R1]
         { []
         }
     {offset
       caPTK: // global
           I64[Sp] = block_caPTM_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQ6s; else goto caPTN;
       uaQ6s: // global
           call _caPTM(R1) args: 0, res: 0, upd: 0;
       caPTN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPTK_info" {
     block_caPTK_info:
         const _caPTK;
         const 3;
         const 564878393737246;
         const SaMem_srt+328;
 },
 _caPTM() //  [R1]
         { []
         }
     {offset
       caPTM: // global
           if (R1 & 7 == 1) goto caQ37; else goto caQ38;
       caQ37: // global
           Sp = Sp + 32;
           call lvl24_raLJM_entry() args: 8, res: 0, upd: 8;
       caQ38: // global
           I64[Sp] = block_caPTS_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaQ6t; else goto caPTT;
       uaQ6t: // global
           call _caPTS(R1) args: 0, res: 0, upd: 0;
       caPTT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPTM_info" {
     block_caPTM_info:
         const _caPTM;
         const 3;
         const 564878393737246;
         const SaMem_srt+328;
 },
 _caPTS() //  [R1]
         { []
         }
     {offset
       caPTS: // global
           I64[Sp - 40] = block_caPTX_info;
           _saM0G::P64 = R1;
           _saM0H::P64 = P64[R1 + 7];
           _saM0J::P64 = P64[R1 + 23];
           _saM0L::P64 = P64[R1 + 31];
           _saM0N::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _saM0H::P64;
           P64[Sp - 24] = _saM0J::P64;
           P64[Sp - 16] = _saM0L::P64;
           P64[Sp - 8] = _saM0N::P64;
           P64[Sp] = _saM0G::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaQ6u; else goto caPTY;
       uaQ6u: // global
           call _caPTX(R1) args: 0, res: 0, upd: 0;
       caPTY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPTS_info" {
     block_caPTS_info:
         const _caPTS;
         const 3;
         const 564603515830302;
         const SaMem_srt+328;
 },
 _caPTX() //  [R1]
         { []
         }
     {offset
       caPTX: // global
           I64[Sp - 8] = block_caPU2_info;
           _saM0U::P64 = R1;
           _saM0V::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saM0V::I64;
           P64[Sp + 16] = _saM0U::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQ6v; else goto caPU3;
       uaQ6v: // global
           call _caPU2(R1) args: 0, res: 0, upd: 0;
       caPU3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPTX_info" {
     block_caPTX_info:
         const _caPTX;
         const 8;
         const 564603515830302;
         const SaMem_srt+328;
 },
 _caPU2() //  [R1]
         { []
         }
     {offset
       caPU2: // global
           I64[Sp - 8] = block_caPU7_info;
           _saM0W::P64 = R1;
           _saM0X::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saM0X::I64;
           P64[Sp + 16] = _saM0W::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQ6w; else goto caPU8;
       uaQ6w: // global
           call _caPU7(R1) args: 0, res: 0, upd: 0;
       caPU8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPU2_info" {
     block_caPU2_info:
         const _caPU2;
         const 73;
         const 564603515830302;
         const SaMem_srt+328;
 },
 _caPU7() //  [R1]
         { []
         }
     {offset
       caPU7: // global
           _saM0q::P64 = P64[Sp + 80];
           _saM0Z::P64 = P64[R1 + 7];
           _saM11::P64 = P64[R1 + 23];
           _saM12::P64 = P64[R1 + 31];
           (_saM16::I64) = call MO_AtomicRMW W64 AMO_Add(P64[Sp + 48] + 16, 1);
           I64[Sp - 16] = block_caPUe_info;
           R1 = _saM0q::P64;
           I64[Sp - 8] = _saM16::I64;
           P64[Sp] = _saM12::P64;
           P64[Sp + 48] = _saM11::P64;
           P64[Sp + 80] = _saM0Z::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQ6x; else goto caPUf;
       uaQ6x: // global
           call _caPUe(R1) args: 0, res: 0, upd: 0;
       caPUf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPU7_info" {
     block_caPU7_info:
         const _caPU7;
         const 202;
         const 564603515830302;
         const SaMem_srt+328;
 },
 _caPUe() //  [R1]
         { []
         }
     {offset
       caPUe: // global
           I64[Sp - 8] = block_caPUj_info;
           _saM17::P64 = R1;
           _saM18::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saM18::I64;
           P64[Sp + 88] = _saM17::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQ6y; else goto caPUk;
       uaQ6y: // global
           call _caPUj(R1) args: 0, res: 0, upd: 0;
       caPUk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPUe_info" {
     block_caPUe_info:
         const _caPUe;
         const 844;
         const 564603515830302;
         const SaMem_srt+328;
 },
 _caPUj() //  [R1]
         { []
         }
     {offset
       caPUj: // global
           I64[Sp - 16] = block_caPUo_info;
           I64[Sp - 8] = I64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPUj_info" {
     block_caPUj_info:
         const _caPUj;
         const 1741;
         const 564603515830302;
         const SaMem_srt+328;
 },
 _caPUo() //  [R1]
         { []
         }
     {offset
       caPUo: // global
           _saM0U::P64 = P64[Sp + 72];
           _saM0V::I64 = I64[Sp + 56];
           _saM0W::P64 = P64[Sp + 64];
           _saM1e::I64 = I64[Sp + 24] & 31;
           if (%MO_S_Gt_W64(_saM0V::I64,
                            _saM1e::I64)) goto caQ3s; else goto caQ6a;
       caQ6a: // global
           if (%MO_S_Gt_W64(_saM1e::I64,
                            I64[Sp + 48])) goto caQ3s; else goto caQ3t;
       caQ3s: // global
           R4 = _saM1e::I64;
           R3 = _saM0U::P64;
           R2 = _saM0W::P64;
           Sp = Sp + 128;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caQ3t: // global
           _saM1l::P64 = P64[P64[Sp + 80] + ((_saM1e::I64 - _saM0V::I64 << 3) + 24)];
           I64[Sp] = block_caPUE_info;
           _saM1d::I64 = R1;
           R1 = _saM1l::P64;
           I64[Sp + 80] = _saM1d::I64;
           if (R1 & 7 != 0) goto uaQ6z; else goto caPUF;
       uaQ6z: // global
           call _caPUE(R1) args: 0, res: 0, upd: 0;
       caPUF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPUo_info" {
     block_caPUo_info:
         const _caPUo;
         const 6991;
         const 564603515830302;
         const SaMem_srt+328;
 },
 _caPUE() //  [R1]
         { []
         }
     {offset
       caPUE: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caQ3w; else goto caQ3v;
       caQ3w: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ3v: // global
           _saM1n::P64 = P64[R1 + 7];
           I64[Hp - 104] = $wio_saM1o_info;
           P64[Hp - 96] = P64[Sp + 104];
           P64[Hp - 88] = P64[Sp + 120];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 112];
           I64[Hp - 56] = I64[Sp + 32];
           I64[Hp - 48] = I64[Sp + 24];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io1_saM3t_info;
           P64[Hp - 24] = Hp - 102;
           _caQ0J::P64 = Hp - 30;
           _saM3P::I64 = I64[Sp + 80];
           if (_saM3P::I64 != 0) goto uaQ6k; else goto caQ4N;
       uaQ6k: // global
           if (_saM3P::I64 != 1) goto caQ44; else goto caQ5u;
       caQ44: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caQ1o_info;
           R1 = _saM1n::P64;
           P64[Sp + 112] = _saM1n::P64;
           P64[Sp + 120] = _caQ0J::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caQ5u: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caQ2D_info;
           R1 = _saM1n::P64;
           P64[Sp + 112] = _saM1n::P64;
           P64[Sp + 120] = _caQ0J::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caQ4N: // global
           I64[Hp - 16] = sat_saM4q_info;
           P64[Hp - 8] = _saM1n::P64;
           P64[Hp] = _caQ0J::P64;
           I64[Sp + 8] = block_caQ4K_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caPUE_info" {
     block_caPUE_info:
         const _caPUE;
         const 64335;
         const 4410931413022;
         const SaMem_srt+384;
 },
 _caQ1o() //  [R1]
         { []
         }
     {offset
       caQ1o: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caQ47; else goto caQ46;
       caQ47: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ46: // global
           I64[Hp - 56] = sat_saM3Y_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saM3T_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saM3U_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caQ3Y_info;
           R2 = Hp - 54;
           _saM3S::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saM3S::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ1o_info" {
     block_caQ1o_info:
         const _caQ1o;
         const 65422;
         const 4410931413022;
         const SaMem_srt+384;
 },
 _caQ3Y() //  [R1]
         { []
         }
     {offset
       caQ3Y: // global
           I64[Sp] = block_caQ40_info;
           R2 = P64[Sp + 112];
           _saM41::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saM41::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ3Y_info" {
     block_caQ3Y_info:
         const _caQ3Y;
         const 65422;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ40() //  []
         { []
         }
     {offset
       caQ40: // global
           I64[Sp] = block_caQ42_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaQ6C; else goto caQ4a;
       uaQ6C: // global
           call _caQ42(R1) args: 0, res: 0, upd: 0;
       caQ4a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ40_info" {
     block_caQ40_info:
         const _caQ40;
         const 327566;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ42() //  [R1]
         { []
         }
     {offset
       caQ42: // global
           I64[Sp] = block_caQ4e_info;
           _saM44::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saM44::P64;
           if (R1 & 7 != 0) goto uaQ6D; else goto caQ4g;
       uaQ6D: // global
           call _caQ4e(R1) args: 0, res: 0, upd: 0;
       caQ4g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ42_info" {
     block_caQ42_info:
         const _caQ42;
         const 851854;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4e() //  [R1]
         { []
         }
     {offset
       caQ4e: // global
           if (R1 & 7 == 1) goto caQ4p; else goto caQ4C;
       caQ4p: // global
           _saM19::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caQ4k_info;
           R2 = _saM19::P64;
           R1 = P64[Sp + 96];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caQ4C: // global
           I64[Sp + 8] = block_caQ4A_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaQ6E; else goto caQ4D;
       uaQ6E: // global
           call _caQ4A(R1) args: 0, res: 0, upd: 0;
       caQ4D: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ4e_info" {
     block_caQ4e_info:
         const _caQ4e;
         const 327566;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4k() //  []
         { []
         }
     {offset
       caQ4k: // global
           I64[Sp] = block_caQ4m_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaQ6F; else goto caQ4r;
       uaQ6F: // global
           call _caQ4m(R1) args: 0, res: 0, upd: 0;
       caQ4r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ4k_info" {
     block_caQ4k_info:
         const _caQ4k;
         const 163789;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4m() //  [R1]
         { []
         }
     {offset
       caQ4m: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQ4x; else goto caQ4w;
       caQ4x: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ4w: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caQ11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQ4m_info" {
     block_caQ4m_info:
         const _caQ4m;
         const 425933;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4A() //  [R1]
         { []
         }
     {offset
       caQ4A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQ4J; else goto caQ4I;
       caQ4J: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ4I: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caQ11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQ4A_info" {
     block_caQ4A_info:
         const _caQ4A;
         const 425933;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ2D() //  [R1]
         { []
         }
     {offset
       caQ2D: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caQ5x; else goto caQ5w;
       caQ5x: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ5w: // global
           I64[Hp - 56] = sat_saM4L_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saM4G_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saM4H_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caQ5p_info;
           R2 = Hp - 54;
           _saM4F::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saM4F::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ2D_info" {
     block_caQ2D_info:
         const _caQ2D;
         const 65422;
         const 4410931413022;
         const SaMem_srt+384;
 },
 _caQ5p() //  [R1]
         { []
         }
     {offset
       caQ5p: // global
           I64[Sp] = block_caQ5r_info;
           R2 = P64[Sp + 112];
           _saM4O::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saM4O::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ5p_info" {
     block_caQ5p_info:
         const _caQ5p;
         const 65422;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ5r() //  []
         { []
         }
     {offset
       caQ5r: // global
           I64[Sp] = block_caQ5t_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaQ6O; else goto caQ5A;
       uaQ6O: // global
           call _caQ5t(R1) args: 0, res: 0, upd: 0;
       caQ5A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ5r_info" {
     block_caQ5r_info:
         const _caQ5r;
         const 327566;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ5t() //  [R1]
         { []
         }
     {offset
       caQ5t: // global
           I64[Sp] = block_caQ5E_info;
           _saM4R::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saM4R::P64;
           if (R1 & 7 != 0) goto uaQ6P; else goto caQ5G;
       uaQ6P: // global
           call _caQ5E(R1) args: 0, res: 0, upd: 0;
       caQ5G: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ5t_info" {
     block_caQ5t_info:
         const _caQ5t;
         const 851854;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ5E() //  [R1]
         { []
         }
     {offset
       caQ5E: // global
           if (R1 & 7 == 1) goto caQ5P; else goto caQ62;
       caQ5P: // global
           _saM19::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caQ5K_info;
           R2 = _saM19::P64;
           R1 = P64[Sp + 96];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caQ62: // global
           I64[Sp + 8] = block_caQ60_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaQ6Q; else goto caQ63;
       uaQ6Q: // global
           call _caQ60(R1) args: 0, res: 0, upd: 0;
       caQ63: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ5E_info" {
     block_caQ5E_info:
         const _caQ5E;
         const 327566;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ5K() //  []
         { []
         }
     {offset
       caQ5K: // global
           I64[Sp] = block_caQ5M_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaQ6R; else goto caQ5R;
       uaQ6R: // global
           call _caQ5M(R1) args: 0, res: 0, upd: 0;
       caQ5R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ5K_info" {
     block_caQ5K_info:
         const _caQ5K;
         const 163789;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ5M() //  [R1]
         { []
         }
     {offset
       caQ5M: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQ5X; else goto caQ5W;
       caQ5X: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ5W: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caQ11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQ5M_info" {
     block_caQ5M_info:
         const _caQ5M;
         const 425933;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ60() //  [R1]
         { []
         }
     {offset
       caQ60: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQ69; else goto caQ68;
       caQ69: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ68: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caQ11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQ60_info" {
     block_caQ60_info:
         const _caQ60;
         const 425933;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4K() //  [R1]
         { []
         }
     {offset
       caQ4K: // global
           I64[Sp] = block_caQ4M_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQ6I; else goto caQ4P;
       uaQ6I: // global
           call _caQ4M(R1) args: 0, res: 0, upd: 0;
       caQ4P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ4K_info" {
     block_caQ4K_info:
         const _caQ4K;
         const 851854;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4M() //  [R1]
         { []
         }
     {offset
       caQ4M: // global
           I64[Sp] = block_caQ4T_info;
           _saM4v::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saM4v::P64;
           if (R1 & 7 != 0) goto uaQ6J; else goto caQ4V;
       uaQ6J: // global
           call _caQ4T(R1) args: 0, res: 0, upd: 0;
       caQ4V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ4M_info" {
     block_caQ4M_info:
         const _caQ4M;
         const 851854;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4T() //  [R1]
         { []
         }
     {offset
       caQ4T: // global
           if (R1 & 7 == 1) goto caQ54; else goto caQ5h;
       caQ54: // global
           _saM19::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caQ4Z_info;
           R2 = _saM19::P64;
           R1 = P64[Sp + 96];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caQ5h: // global
           I64[Sp + 8] = block_caQ5f_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaQ6K; else goto caQ5i;
       uaQ6K: // global
           call _caQ5f(R1) args: 0, res: 0, upd: 0;
       caQ5i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ4T_info" {
     block_caQ4T_info:
         const _caQ4T;
         const 327566;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ4Z() //  []
         { []
         }
     {offset
       caQ4Z: // global
           I64[Sp] = block_caQ51_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaQ6L; else goto caQ56;
       uaQ6L: // global
           call _caQ51(R1) args: 0, res: 0, upd: 0;
       caQ56: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ4Z_info" {
     block_caQ4Z_info:
         const _caQ4Z;
         const 163789;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ51() //  [R1]
         { []
         }
     {offset
       caQ51: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQ5c; else goto caQ5b;
       caQ5c: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ5b: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caQ11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQ51_info" {
     block_caQ51_info:
         const _caQ51;
         const 425933;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ5f() //  [R1]
         { []
         }
     {offset
       caQ5f: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQ5o; else goto caQ5n;
       caQ5o: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ5n: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caQ11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQ5f_info" {
     block_caQ5f_info:
         const _caQ5f;
         const 425933;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ11() //  []
         { []
         }
     {offset
       caQ11: // global
           Hp = Hp + 40;
           _saM3A::P64 = P64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto caQ3C; else goto caQ3B;
       caQ3C: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_caQ10_info;
           R1 = _saM3A::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQ3B: // global
           I64[Hp - 32] = sat_saM3I_info;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = _saM3A::P64;
           I64[Hp - 8] = sat_saM3C_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_caQ3x_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caQ10() //  [R1]
         { []
         }
     {offset
       caQ10: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _caQ11() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQ10_info" {
     block_caQ10_info:
         const _caQ10;
         const 772;
         const 2203318222878;
         const SaMem_srt+392;
 },
 _caQ3x() //  [R1]
         { []
         }
     {offset
       caQ3x: // global
           I64[Sp] = block_caQ3z_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQ6B; else goto caQ3E;
       uaQ6B: // global
           call _caQ3z(R1) args: 0, res: 0, upd: 0;
       caQ3E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ3x_info" {
     block_caQ3x_info:
         const _caQ3x;
         const 0;
         const 4294967326;
         const SaMem_srt+464;
 },
 _caQ3z() //  [R1]
         { []
         }
     {offset
       caQ3z: // global
           if (I64[R1 + 7] & 4 == 0) goto caQ3U; else goto caQ3O;
       caQ3U: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caQ3O: // global
           R1 = lvl28_raLJS_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQ3z_info" {
     block_caQ3z_info:
         const _caQ3z;
         const 0;
         const 4294967326;
         const SaMem_srt+464;
 },
 GHC.Event.Thread.threadWaitRead1_entry() //  [R2, R3]
         { []
         }
     {offset
       caQ6Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caQ6Z; else goto caQ70;
       caQ6Z: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.threadWaitRead1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caQ70: // global
           I64[Sp - 24] = block_caPTB_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitRead1_info" {
     GHC.Event.Thread.threadWaitRead1_info:
         const GHC.Event.Thread.threadWaitRead1_entry;
         const 0;
         const 1690786890514446;
         const 12884901903;
         const SaMem_srt+328;
 },
 _caPTB() //  [R1]
         { []
         }
     {offset
       caPTB: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQ73; else goto caQ72;
       caQ73: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caQ72: // global
           I64[Hp - 16] = io_saM0v_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _caPTD::P64 = Hp - 15;
           if (R1 == 0) goto caQ6X; else goto caQ6W;
       caQ6X: // global
           R1 = _caPTD::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caQ6W: // global
           R1 = _caPTD::P64;
           Sp = Sp + 24;
           call io_saM0v_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caPTB_info" {
     block_caPTB_info:
         const _caPTB;
         const 2;
         const 564886983671838;
         const SaMem_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.765127117 UTC

[section ""data" . threadWaitWrite1_raLJT_closure" {
     threadWaitWrite1_raLJT_closure:
         const threadWaitWrite1_raLJT_info;
         const 0;
 },
 threadWaitWrite1_raLJT_entry() //  [R2]
         { []
         }
     {offset
       caQex: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtWrite_closure;
           call GHC.Event.Thread.threadWaitRead1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitWrite1_raLJT_info" {
     threadWaitWrite1_raLJT_info:
         const threadWaitWrite1_raLJT_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const SaMem_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.76849475 UTC

[section ""data" . GHC.Event.Thread.threadWaitWrite_closure" {
     GHC.Event.Thread.threadWaitWrite_closure:
         const GHC.Event.Thread.threadWaitWrite_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitWrite_entry() //  [R2]
         { []
         }
     {offset
       caQeI: // global
           R2 = R2;
           call threadWaitWrite1_raLJT_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitWrite_info" {
     GHC.Event.Thread.threadWaitWrite_info:
         const GHC.Event.Thread.threadWaitWrite_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaMem_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.771858889 UTC

[section ""data" . threadWaitRead2_raLJU_closure" {
     threadWaitRead2_raLJU_closure:
         const threadWaitRead2_raLJU_info;
         const 0;
 },
 threadWaitRead2_raLJU_entry() //  [R2]
         { []
         }
     {offset
       caQeT: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtRead_closure;
           call GHC.Event.Thread.threadWaitRead1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitRead2_raLJU_info" {
     threadWaitRead2_raLJU_info:
         const threadWaitRead2_raLJU_entry;
         const 0;
         const 554050781198;
         const 8589934597;
         const SaMem_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.775867312 UTC

[section ""data" . GHC.Event.Thread.threadWaitRead_closure" {
     GHC.Event.Thread.threadWaitRead_closure:
         const GHC.Event.Thread.threadWaitRead_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitRead_entry() //  [R2]
         { []
         }
     {offset
       caQf4: // global
           R2 = R2;
           call threadWaitRead2_raLJU_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitRead_info" {
     GHC.Event.Thread.threadWaitRead_info:
         const GHC.Event.Thread.threadWaitRead_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaMem_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.77879109 UTC

[section ""cstring" . lvl29_raLJV_bytes" {
     lvl29_raLJV_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,49,48,52,58,53,45,49,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.781056408 UTC

[section ""data" . lvl30_raLJW_closure" {
     lvl30_raLJW_closure:
         const lvl30_raLJW_info;
         const 0;
 },
 lvl30_raLJW_entry() //  []
         { []
         }
     {offset
       caQfi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caQfj; else goto caQfk;
       caQfj: // global
           R1 = lvl30_raLJW_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQfk: // global
           I64[Sp - 8] = block_caQfg_info;
           R2 = lvl29_raLJV_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl30_raLJW_info" {
     lvl30_raLJW_info:
         const lvl30_raLJW_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SaMem_srt+496;
 },
 _caQfg() //  [R1]
         { []
         }
     {offset
       caQfg: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQfg_info" {
     block_caQfg_info:
         const _caQfg;
         const 0;
         const 4294967326;
         const SaMem_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.787895765 UTC

[section ""data" . go_raLJX_closure" {
     go_raLJX_closure:
         const go_raLJX_info;
 },
 go_raLJX_entry() //  [R2]
         { []
         }
     {offset
       caQfH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQfI; else goto uaQfT;
       caQfI: // global
           R2 = R2;
           R1 = go_raLJX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uaQfT: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _caQfx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_raLJX_info" {
     go_raLJX_info:
         const go_raLJX_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caQfx() //  []
         { []
         }
     {offset
       caQfx: // global
           _saM52::P64 = P64[Sp];
           I64[Sp] = block_caQfA_info;
           R1 = _saM52::P64;
           if (R1 & 7 != 0) goto uaQfV; else goto caQfB;
       uaQfV: // global
           call _caQfA(R1) args: 0, res: 0, upd: 0;
       caQfB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caQfA() //  [R1]
         { []
         }
     {offset
       caQfA: // global
           if (R1 & 7 == 1) goto caQfE; else goto caQfF;
       caQfE: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caQfF: // global
           I64[Sp - 8] = block_caQfP_info;
           _saM56::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saM56::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQfA_info" {
     block_caQfA_info:
         const _caQfA;
         const 0;
         const 30;
 },
 _caQfP() //  []
         { []
         }
     {offset
       caQfP: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caQfx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQfP_info" {
     block_caQfP_info:
         const _caQfP;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.814883457 UTC

[section ""data" . GHC.Event.Thread.closeFdWith1_closure" {
     GHC.Event.Thread.closeFdWith1_closure:
         const GHC.Event.Thread.closeFdWith1_info;
         const 0;
 },
 go1_saM5z_entry() //  [R1, R2]
         { []
         }
     {offset
       caQh2: // global
           if ((Sp + -64) < SpLim) (likely: False) goto caQh3; else goto caQh4;
       caQh3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQh4: // global
           I64[Sp - 24] = block_caQgV_info;
           _saM5z::P64 = R1;
           _saM5b::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _saM5b::P64;
           P64[Sp - 8] = _saM5z::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaQi9; else goto caQgW;
       uaQi9: // global
           call _caQgV(R1) args: 0, res: 0, upd: 0;
       caQgW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_saM5z_info" {
     go1_saM5z_info:
         const go1_saM5z_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaMem_srt+328;
 },
 _caQgV() //  [R1]
         { []
         }
     {offset
       caQgV: // global
           if (R1 & 7 == 1) goto caQgZ; else goto caQh0;
       caQgZ: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caQh0: // global
           I64[Sp - 8] = block_caQha_info;
           _saM5E::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saM5E::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQi8; else goto caQhb;
       uaQi8: // global
           call _caQha(R1) args: 0, res: 0, upd: 0;
       caQhb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQgV_info" {
     block_caQgV_info:
         const _caQgV;
         const 2;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQha() //  [R1]
         { []
         }
     {offset
       caQha: // global
           I64[Sp - 16] = block_caQhf_info;
           _saM5I::P64 = P64[R1 + 23];
           _saM5K::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saM5K::P64;
           P64[Sp] = _saM5I::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQia; else goto caQhg;
       uaQia: // global
           call _caQhf(R1) args: 0, res: 0, upd: 0;
       caQhg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQha_info" {
     block_caQha_info:
         const _caQha;
         const 3;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQhf() //  [R1]
         { []
         }
     {offset
       caQhf: // global
           I64[Sp - 8] = block_caQhk_info;
           _saM5T::P64 = R1;
           _saM5U::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saM5U::I64;
           P64[Sp + 16] = _saM5T::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQib; else goto caQhl;
       uaQib: // global
           call _caQhk(R1) args: 0, res: 0, upd: 0;
       caQhl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQhf_info" {
     block_caQhf_info:
         const _caQhf;
         const 5;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQhk() //  [R1]
         { []
         }
     {offset
       caQhk: // global
           I64[Sp - 8] = block_caQhp_info;
           _saM5V::P64 = R1;
           _saM5W::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp] = _saM5W::I64;
           P64[Sp + 40] = _saM5V::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQic; else goto caQhu;
       uaQic: // global
           call _caQhp(R1) args: 0, res: 0, upd: 0;
       caQhu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQhk_info" {
     block_caQhk_info:
         const _caQhk;
         const 70;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQhp() //  [R1]
         { []
         }
     {offset
       caQhp: // global
           _saM5T::P64 = P64[Sp + 32];
           _saM5U::I64 = I64[Sp + 16];
           _saM5V::P64 = P64[Sp + 48];
           _saM5Z::I64 = I64[R1 + 7] & 31;
           if (%MO_S_Gt_W64(_saM5U::I64,
                            _saM5Z::I64)) goto caQhL; else goto caQi7;
       caQi7: // global
           if (%MO_S_Gt_W64(_saM5Z::I64,
                            I64[Sp + 8])) goto caQhL; else goto caQi1;
       caQhL: // global
           R4 = _saM5Z::I64;
           R3 = _saM5T::P64;
           R2 = _saM5V::P64;
           Sp = Sp + 64;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caQi1: // global
           _saM66::P64 = P64[P64[Sp + 24] + ((_saM5Z::I64 - _saM5U::I64 << 3) + 24)];
           I64[Sp + 32] = block_caQhR_info;
           R1 = _saM66::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto uaQid; else goto caQhS;
       uaQid: // global
           call _caQhR(R1) args: 0, res: 0, upd: 0;
       caQhS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQhp_info" {
     block_caQhp_info:
         const _caQhp;
         const 199;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQhR() //  [R1]
         { []
         }
     {offset
       caQhR: // global
           I64[Sp] = block_caQhW_info;
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQhR_info" {
     block_caQhR_info:
         const _caQhR;
         const 131;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQhW() //  [R1]
         { []
         }
     {offset
       caQhW: // global
           I64[Sp + 16] = block_caQhY_info;
           R2 = P64[Sp + 8];
           _saM6b::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _saM6b::P64;
           Sp = Sp + 16;
           call go1_saM5z_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQhW_info" {
     block_caQhW_info:
         const _caQhW;
         const 131;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQhY() //  [R1]
         { []
         }
     {offset
       caQhY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQi6; else goto caQi5;
       caQi6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQi5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQhY_info" {
     block_caQhY_info:
         const _caQhY;
         const 1;
         const 30;
 },
 go2_saM6j_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caQis: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caQit; else goto caQiu;
       caQit: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caQiu: // global
           I64[Sp - 32] = block_caQil_info;
           _saM6j::P64 = R1;
           _saM5b::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 24] = _saM5b::P64;
           P64[Sp - 16] = _saM6j::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaQjd; else goto caQim;
       uaQjd: // global
           call _caQil(R1) args: 0, res: 0, upd: 0;
       caQim: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_saM6j_info" {
     go2_saM6j_info:
         const go2_saM6j_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaMem_srt+512;
 },
 _caQil() //  [R1]
         { []
         }
     {offset
       caQil: // global
           if (R1 & 7 == 1) goto uaQj9; else goto caQiq;
       uaQj9: // global
           Sp = Sp + 32;
           call _caQiI() args: 0, res: 0, upd: 0;
       caQiq: // global
           I64[Sp - 8] = block_caQiA_info;
           _saM6o::P64 = P64[R1 + 6];
           _saM6p::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _saM6p::P64;
           P64[Sp + 24] = _saM6o::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQjb; else goto caQiC;
       uaQjb: // global
           call _caQiA(R1) args: 0, res: 0, upd: 0;
       caQiC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQil_info" {
     block_caQil_info:
         const _caQil;
         const 3;
         const 4294967326;
         const SaMem_srt+512;
 },
 _caQiA() //  [R1]
         { []
         }
     {offset
       caQiA: // global
           if (R1 & 7 == 1) goto uaQja; else goto caQj1;
       uaQja: // global
           Sp = Sp + 40;
           call _caQiI() args: 0, res: 0, upd: 0;
       caQj1: // global
           I64[Sp - 8] = block_caQiL_info;
           _saM6s::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saM6s::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQje; else goto caQiM;
       uaQje: // global
           call _caQiL(R1) args: 0, res: 0, upd: 0;
       caQiM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQiA_info" {
     block_caQiA_info:
         const _caQiA;
         const 4;
         const 4294967326;
         const SaMem_srt+512;
 },
 _caQiI() //  []
         { []
         }
     {offset
       caQiI: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caQiL() //  [R1]
         { []
         }
     {offset
       caQiL: // global
           I64[Sp] = block_caQiQ_info;
           _saM6u::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _saM6u::P64;
           if (R1 & 7 != 0) goto uaQjg; else goto caQiR;
       uaQjg: // global
           call _caQiQ(R1) args: 0, res: 0, upd: 0;
       caQiR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQiL_info" {
     block_caQiL_info:
         const _caQiL;
         const 5;
         const 4294967326;
         const SaMem_srt+512;
 },
 _caQiQ() //  [R1]
         { []
         }
     {offset
       caQiQ: // global
           I64[Sp] = block_caQiV_info;
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 40];
           call GHC.Event.Manager.$wcloseFd__entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQiQ_info" {
     block_caQiQ_info:
         const _caQiQ;
         const 5;
         const 4294967326;
         const SaMem_srt+512;
 },
 _caQiV() //  [R1]
         { []
         }
     {offset
       caQiV: // global
           _saM6j::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_caQiX_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           _saM6z::P64 = R1;
           R1 = _saM6j::P64;
           P64[Sp + 40] = _saM6z::P64;
           Sp = Sp + 32;
           call go2_saM6j_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQiV_info" {
     block_caQiV_info:
         const _caQiV;
         const 1285;
         const 4294967326;
         const SaMem_srt+512;
 },
 _caQiX() //  [R1]
         { []
         }
     {offset
       caQiX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQj7; else goto caQj6;
       caQj7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQj6: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQiX_info" {
     block_caQiX_info:
         const _caQiX;
         const 1;
         const 30;
 },
 sat_saM7k_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       caQjt: // global
           if ((Sp + -64) < SpLim) (likely: False) goto caQjH; else goto caQjI;
       caQjH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caQjI: // global
           I64[Sp - 32] = block_caQjq_info;
           _saM5b::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _saM5b::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaQkl; else goto caQjr;
       uaQkl: // global
           call _caQjq(R1) args: 0, res: 0, upd: 0;
       caQjr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7k_info" {
     sat_saM7k_info:
         const sat_saM7k_entry;
         const 1;
         const 4294967305;
         const 17179869207;
         const SaMem_srt+328;
 },
 _caQjq() //  [R1]
         { []
         }
     {offset
       caQjq: // global
           I64[Sp - 16] = block_caQjw_info;
           _saM6S::P64 = P64[R1 + 23];
           _saM6U::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saM6U::P64;
           P64[Sp] = _saM6S::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQkk; else goto caQjx;
       uaQkk: // global
           call _caQjw(R1) args: 0, res: 0, upd: 0;
       caQjx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQjq_info" {
     block_caQjq_info:
         const _caQjq;
         const 3;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQjw() //  [R1]
         { []
         }
     {offset
       caQjw: // global
           I64[Sp - 8] = block_caQjB_info;
           _saM73::P64 = R1;
           _saM74::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saM74::I64;
           P64[Sp + 16] = _saM73::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQkm; else goto caQjC;
       uaQkm: // global
           call _caQjB(R1) args: 0, res: 0, upd: 0;
       caQjC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQjw_info" {
     block_caQjw_info:
         const _caQjw;
         const 5;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQjB() //  [R1]
         { []
         }
     {offset
       caQjB: // global
           I64[Sp - 8] = block_caQjG_info;
           _saM75::P64 = R1;
           _saM76::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp] = _saM76::I64;
           P64[Sp + 32] = _saM75::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQkn; else goto caQjM;
       uaQkn: // global
           call _caQjG(R1) args: 0, res: 0, upd: 0;
       caQjM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQjB_info" {
     block_caQjB_info:
         const _caQjB;
         const 70;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQjG() //  [R1]
         { []
         }
     {offset
       caQjG: // global
           _saM73::P64 = P64[Sp + 32];
           _saM74::I64 = I64[Sp + 16];
           _saM75::P64 = P64[Sp + 40];
           _saM79::I64 = I64[R1 + 7] & 31;
           if (%MO_S_Gt_W64(_saM74::I64,
                            _saM79::I64)) goto caQk3; else goto caQkj;
       caQkj: // global
           if (%MO_S_Gt_W64(_saM79::I64,
                            I64[Sp + 8])) goto caQk3; else goto caQkf;
       caQk3: // global
           R4 = _saM79::I64;
           R3 = _saM73::P64;
           R2 = _saM75::P64;
           Sp = Sp + 64;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caQkf: // global
           _saM7g::P64 = P64[P64[Sp + 24] + ((_saM79::I64 - _saM74::I64 << 3) + 24)];
           I64[Sp + 40] = block_caQk9_info;
           R1 = _saM7g::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaQko; else goto caQka;
       uaQko: // global
           call _caQk9(R1) args: 0, res: 0, upd: 0;
       caQka: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQjG_info" {
     block_caQjG_info:
         const _caQjG;
         const 199;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQk9() //  [R1]
         { []
         }
     {offset
       caQk9: // global
           _saM6M::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caQke_info;
           R2 = _saM6M::P64;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQk9_info" {
     block_caQk9_info:
         const _caQk9;
         const 2;
         const 30;
 },
 _caQke() //  []
         { []
         }
     {offset
       caQke: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQke_info" {
     block_caQke_info:
         const _caQke;
         const 1;
         const 30;
 },
 sat_saM7t_entry() //  [R1, R2]
         { []
         }
     {offset
       caQkC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQkD; else goto caQkE;
       caQkD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQkE: // global
           I64[Sp - 16] = block_caQkA_info;
           _saM7o::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saM7o::P64;
           Sp = Sp - 16;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7t_info" {
     sat_saM7t_info:
         const sat_saM7t_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caQkA() //  []
         { []
         }
     {offset
       caQkA: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQkA_info" {
     block_caQkA_info:
         const _caQkA;
         const 1;
         const 30;
 },
 sat_saM7n_entry() //  [R1]
         { []
         }
     {offset
       caQkM: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7n_info" {
     sat_saM7n_info:
         const sat_saM7n_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saM7I_entry() //  [R1, R2]
         { []
         }
     {offset
       caQl2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQl3; else goto caQl4;
       caQl3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQl4: // global
           I64[Sp - 16] = block_caQl0_info;
           _saM7D::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saM7D::P64;
           Sp = Sp - 16;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7I_info" {
     sat_saM7I_info:
         const sat_saM7I_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caQl0() //  []
         { []
         }
     {offset
       caQl0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQl0_info" {
     block_caQl0_info:
         const _caQl0;
         const 1;
         const 30;
 },
 sat_saM7C_entry() //  [R1]
         { []
         }
     {offset
       caQlc: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7C_info" {
     sat_saM7C_info:
         const sat_saM7C_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saM7P_entry() //  [R1]
         { []
         }
     {offset
       caQlj: // global
           _saM7P::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caQlk; else goto caQll;
       caQll: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caQln; else goto caQlm;
       caQln: // global
           HpAlloc = 64;
           goto caQlk;
       caQlk: // global
           R1 = _saM7P::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQlm: // global
           _saM5a::P64 = P64[_saM7P::P64 + 7];
           _saM5b::P64 = P64[_saM7P::P64 + 15];
           _saM6K::P64 = P64[_saM7P::P64 + 23];
           I64[Hp - 56] = sat_saM7I_info;
           P64[Hp - 48] = _saM6K::P64;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _saM5a::P64;
           P64[Hp - 16] = _saM5b::P64;
           I64[Hp - 8] = sat_saM7C_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_caQlf_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           P64[Sp - 8] = _saM6K::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7P_info" {
     sat_saM7P_info:
         const sat_saM7P_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _caQlf() //  [R1]
         { []
         }
     {offset
       caQlf: // global
           I64[Sp] = block_caQlh_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQlf_info" {
     block_caQlf_info:
         const _caQlf;
         const 1;
         const 30;
 },
 _caQlh() //  []
         { []
         }
     {offset
       caQlh: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQlh_info" {
     block_caQlh_info:
         const _caQlh;
         const 1;
         const 30;
 },
 sat_saM7X_entry() //  [R1, R2]
         { []
         }
     {offset
       caQly: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQlz; else goto caQlA;
       caQlz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQlA: // global
           I64[Sp - 16] = block_caQlw_info;
           _saM7S::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saM7S::P64;
           Sp = Sp - 16;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7X_info" {
     sat_saM7X_info:
         const sat_saM7X_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caQlw() //  []
         { []
         }
     {offset
       caQlw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQlw_info" {
     block_caQlw_info:
         const _caQlw;
         const 1;
         const 30;
 },
 sat_saM7R_entry() //  [R1]
         { []
         }
     {offset
       caQlI: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saM7R_info" {
     sat_saM7R_info:
         const sat_saM7R_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_saM5x_entry() //  [R1]
         { []
         }
     {offset
       caQlL: // global
           _saM5x::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto caQlM; else goto caQlN;
       caQlN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caQlP; else goto caQlO;
       caQlP: // global
           HpAlloc = 16;
           goto caQlM;
       caQlM: // global
           R1 = _saM5x::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQlO: // global
           _saM5a::P64 = P64[_saM5x::P64 + 7];
           _saM5b::P64 = P64[_saM5x::P64 + 15];
           _saM5t::P64 = P64[_saM5x::P64 + 23];
           I64[Hp - 8] = go1_saM5z_info;
           P64[Hp] = _saM5b::P64;
           I64[Sp - 32] = block_caQie_info;
           R2 = _saM5t::P64;
           R1 = Hp - 6;
           P64[Sp - 24] = _saM5a::P64;
           P64[Sp - 16] = _saM5b::P64;
           P64[Sp - 8] = _saM5t::P64;
           Sp = Sp - 32;
           call go1_saM5z_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saM5x_info" {
     io_saM5x_info:
         const io_saM5x_entry;
         const 3;
         const 36028801313931272;
         const 4294967299;
         const SaMem_srt+328;
 },
 _caQie() //  [R1]
         { []
         }
     {offset
       caQie: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caQlS; else goto caQlR;
       caQlS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQlR: // global
           I64[Hp - 8] = go2_saM6j_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_caQjh_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           _saM6i::P64 = R1;
           R1 = Hp - 5;
           P64[Sp] = _saM6i::P64;
           Sp = Sp - 8;
           call go2_saM6j_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQie_info" {
     block_caQie_info:
         const _caQie;
         const 3;
         const 36028801313931294;
         const SaMem_srt+328;
 },
 _caQjh() //  [R1]
         { []
         }
     {offset
       caQjh: // global
           I64[Sp - 8] = block_caQjj_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQjh_info" {
     block_caQjh_info:
         const _caQjh;
         const 4;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQjj() //  [R1]
         { []
         }
     {offset
       caQjj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caQlW; else goto caQlV;
       caQlW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caQlV: // global
           I64[Hp - 8] = sat_saM7k_info;
           P64[Hp] = P64[Sp + 32];
           _saM6i::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caQkp_info;
           R5 = P64[Sp + 8];
           R4 = _saM6i::P64;
           R3 = P64[Sp + 40];
           R2 = Hp - 4;
           I64[Sp + 40] = R1;
           Sp = Sp + 16;
           call GHC.List.zipWith3_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQjj_info" {
     block_caQjj_info:
         const _caQjj;
         const 5;
         const 4294967326;
         const SaMem_srt+328;
 },
 _caQkp() //  [R1]
         { []
         }
     {offset
       caQkp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caQlZ; else goto caQlY;
       caQlZ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQlY: // global
           _saM5a::P64 = P64[Sp + 8];
           _saM5b::P64 = P64[Sp + 16];
           _saM7l::I64 = I64[Sp + 24];
           if (_saM7l::I64 == 0) goto caQm8; else goto uaQmg;
       caQm8: // global
           I64[Hp - 56] = sat_saM7P_info;
           P64[Hp - 48] = _saM5a::P64;
           P64[Hp - 40] = _saM5b::P64;
           P64[Hp - 32] = R1;
           _caQkQ::P64 = Hp - 55;
           Hp = Hp - 32;
           R1 = _caQkQ::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uaQmg: // global
           if (_saM7l::I64 == 1) goto caQmc; else goto caQm4;
       caQmc: // global
           I64[Hp - 56] = sat_saM7X_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _saM5a::P64;
           P64[Hp - 16] = _saM5b::P64;
           I64[Hp - 8] = sat_saM7R_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 16] = block_caQm9_info;
           R2 = Hp - 54;
           _saM6K::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 24] = _saM6K::P64;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       caQm4: // global
           I64[Hp - 56] = sat_saM7t_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _saM5a::P64;
           P64[Hp - 16] = _saM5b::P64;
           I64[Hp - 8] = sat_saM7n_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 16] = block_caQm0_info;
           R2 = Hp - 54;
           _saM6K::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 24] = _saM6K::P64;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQkp_info" {
     block_caQkp_info:
         const _caQkp;
         const 259;
         const 30;
 },
 _caQm9() //  [R1]
         { []
         }
     {offset
       caQm9: // global
           I64[Sp] = block_caQmb_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQm9_info" {
     block_caQm9_info:
         const _caQm9;
         const 1;
         const 30;
 },
 _caQmb() //  []
         { []
         }
     {offset
       caQmb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQmb_info" {
     block_caQmb_info:
         const _caQmb;
         const 1;
         const 30;
 },
 _caQm0() //  [R1]
         { []
         }
     {offset
       caQm0: // global
           I64[Sp] = block_caQm2_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQm0_info" {
     block_caQm0_info:
         const _caQm0;
         const 1;
         const 30;
 },
 _caQm2() //  []
         { []
         }
     {offset
       caQm2: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQm2_info" {
     block_caQm2_info:
         const _caQm2;
         const 1;
         const 30;
 },
 go1_saM86_entry() //  [R1, R2]
         { []
         }
     {offset
       caQmu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caQmv; else goto caQmw;
       caQmv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQmw: // global
           _saM87::I64 = R2;
           _saM5n::P64 = P64[R1 + 14];
           _saM5p::P64 = P64[R1 + 22];
           _saM5o::I64 = I64[R1 + 30];
           if (%MO_S_Gt_W64(_saM5o::I64, R2)) goto caQmC; else goto caQmt;
       caQmt: // global
           _saM5q::I64 = I64[R1 + 38];
           if (%MO_S_Gt_W64(_saM87::I64,
                            _saM5q::I64)) goto caQmC; else goto caQmJ;
       caQmC: // global
           R4 = _saM87::I64;
           R3 = _saM5n::P64;
           R2 = _saM5p::P64;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caQmJ: // global
           _saM8g::P64 = P64[P64[R1 + 6] + ((_saM87::I64 - _saM5o::I64 << 3) + 24)];
           I64[Sp - 32] = block_caQmI_info;
           _saM86::P64 = R1;
           R1 = _saM8g::P64;
           I64[Sp - 24] = _saM5q::I64;
           P64[Sp - 16] = _saM86::P64;
           I64[Sp - 8] = _saM87::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaQnr; else goto caQmK;
       uaQnr: // global
           call _caQmI(R1) args: 0, res: 0, upd: 0;
       caQmK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_saM86_info" {
     go1_saM86_info:
         const go1_saM86_entry;
         const 8589934595;
         const 9007203549708296;
         const 8589934596;
         const SaMem_srt+328;
 },
 _caQmI() //  [R1]
         { []
         }
     {offset
       caQmI: // global
           if (R1 & 7 == 1) goto caQmQ; else goto caQn0;
       caQmQ: // global
           Sp = Sp + 32;
           call lvl30_raLJW_entry() args: 8, res: 0, upd: 8;
       caQn0: // global
           I64[Sp] = block_caQmT_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaQns; else goto caQmU;
       uaQns: // global
           call _caQmT(R1) args: 0, res: 0, upd: 0;
       caQmU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQmI_info" {
     block_caQmI_info:
         const _caQmI;
         const 323;
         const 9007203549708318;
         const SaMem_srt+328;
 },
 _caQmT() //  [R1]
         { []
         }
     {offset
       caQmT: // global
           I64[Sp] = block_caQmY_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uaQnt; else goto caQn2;
       uaQnt: // global
           call _caQmY(R1) args: 0, res: 0, upd: 0;
       caQn2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQmT_info" {
     block_caQmT_info:
         const _caQmT;
         const 323;
         const 9007203549708318;
         const SaMem_srt+328;
 },
 _caQmY() //  [R1]
         { []
         }
     {offset
       caQmY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQn8; else goto caQn7;
       caQn8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQn7: // global
           _saM87::I64 = I64[Sp + 24];
           if (_saM87::I64 == I64[Sp + 8]) goto caQnp; else goto caQnj;
       caQnp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caQnj: // global
           Hp = Hp - 24;
           _saM86::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caQnf_info;
           R2 = _saM87::I64 + 1;
           _saM8n::P64 = R1;
           R1 = _saM86::P64;
           P64[Sp + 24] = _saM8n::P64;
           Sp = Sp + 16;
           call go1_saM86_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQmY_info" {
     block_caQmY_info:
         const _caQmY;
         const 323;
         const 9007203549708318;
         const SaMem_srt+328;
 },
 _caQnf() //  [R1]
         { []
         }
     {offset
       caQnf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caQnm; else goto caQnl;
       caQnm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQnl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQnf_info" {
     block_caQnf_info:
         const _caQnf;
         const 1;
         const 30;
 },
 section ""relreadonly" . uaQnZ_srtd" {
     uaQnZ_srtd:
         const SaMem_srt+224;
         const 38;
         const 223338307585;
 },
 GHC.Event.Thread.closeFdWith1_entry() //  [R2, R3]
         { []
         }
     {offset
       caQnu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caQnv; else goto caQnw;
       caQnv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.closeFdWith1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caQnw: // global
           I64[Sp - 24] = block_caQgk_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaQnX; else goto caQgl;
       uaQnX: // global
           call _caQgk(R1) args: 0, res: 0, upd: 0;
       caQgl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.closeFdWith1_info" {
     GHC.Event.Thread.closeFdWith1_info:
         const GHC.Event.Thread.closeFdWith1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const uaQnZ_srtd;
 },
 _caQgk() //  [R1]
         { []
         }
     {offset
       caQgk: // global
           _saM5h::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caQgp_info;
           R1 = _saM5h::P64;
           if (R1 & 7 != 0) goto uaQnT; else goto caQgq;
       uaQnT: // global
           call _caQgp(R1) args: 0, res: 0, upd: 0;
       caQgq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQgk_info" {
     block_caQgk_info:
         const _caQgk;
         const 2;
         const 45036000568672286;
         const SaMem_srt+328;
 },
 _caQgp() //  [R1]
         { []
         }
     {offset
       caQgp: // global
           I64[Sp - 16] = block_caQgu_info;
           _saM5k::P64 = P64[R1 + 15];
           _saM5m::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _saM5m::P64;
           P64[Sp] = _saM5k::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQnU; else goto caQgv;
       uaQnU: // global
           call _caQgu(R1) args: 0, res: 0, upd: 0;
       caQgv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQgp_info" {
     block_caQgp_info:
         const _caQgp;
         const 2;
         const 45036000568672286;
         const SaMem_srt+328;
 },
 _caQgu() //  [R1]
         { []
         }
     {offset
       caQgu: // global
           I64[Sp - 8] = block_caQgz_info;
           _saM5n::P64 = R1;
           _saM5o::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saM5o::I64;
           P64[Sp + 16] = _saM5n::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQnV; else goto caQgA;
       uaQnV: // global
           call _caQgz(R1) args: 0, res: 0, upd: 0;
       caQgA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQgu_info" {
     block_caQgu_info:
         const _caQgu;
         const 4;
         const 45036000568672286;
         const SaMem_srt+328;
 },
 _caQgz() //  [R1]
         { []
         }
     {offset
       caQgz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caQnC; else goto caQnB;
       caQnC: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQnB: // global
           _saM5o::I64 = I64[Sp + 8];
           _saM5q::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_saM5o::I64,
                            _saM5q::I64)) goto caQnN; else goto caQnQ;
       caQnN: // global
           I64[Hp - 40] = go1_saM86_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = _saM5o::I64;
           I64[Hp] = _saM5q::I64;
           I64[Sp + 24] = block_caQnL_info;
           R2 = _saM5o::I64;
           R1 = Hp - 38;
           Sp = Sp + 24;
           call go1_saM86_entry(R2, R1) args: 8, res: 8, upd: 8;
       caQnQ: // global
           Hp = Hp - 48;
           P64[Sp + 24] = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call _saM5r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQgz_info" {
     block_caQgz_info:
         const _caQgz;
         const 69;
         const 45036000568672286;
         const SaMem_srt+328;
 },
 _caQnL() //  [R1]
         { []
         }
     {offset
       caQnL: // global
           P64[Sp] = R1;
           call _saM5r() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQnL_info" {
     block_caQnL_info:
         const _caQnL;
         const 2;
         const 36028801313931294;
         const SaMem_srt+328;
 },
 _saM5r() //  []
         { []
         }
     {offset
       saM5r: // global
           I64[Sp - 8] = block_caQgJ_info;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _caQgJ() //  [R1]
         { []
         }
     {offset
       caQgJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caQnG; else goto caQnF;
       caQnG: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caQnF: // global
           I64[Hp - 24] = io_saM5x_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           _caQgL::P64 = Hp - 23;
           if (R1 == 0) goto caQnK; else goto caQnJ;
       caQnK: // global
           R1 = _caQgL::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caQnJ: // global
           R1 = _caQgL::P64;
           Sp = Sp + 32;
           call io_saM5x_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQgJ_info" {
     block_caQgJ_info:
         const _caQgJ;
         const 3;
         const 36028801313931294;
         const SaMem_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.911660708 UTC

[section ""data" . GHC.Event.Thread.closeFdWith_closure" {
     GHC.Event.Thread.closeFdWith_closure:
         const GHC.Event.Thread.closeFdWith_info;
         const 0;
 },
 GHC.Event.Thread.closeFdWith_entry() //  [R2, R3]
         { []
         }
     {offset
       caQs4: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Thread.closeFdWith1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.closeFdWith_info" {
     GHC.Event.Thread.closeFdWith_info:
         const GHC.Event.Thread.closeFdWith_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SaMem_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.915726857 UTC

[section ""data" . GHC.Event.Thread.registerDelay2_closure" {
     GHC.Event.Thread.registerDelay2_closure:
         const GHC.Event.Thread.registerDelay2_info;
 },
 GHC.Event.Thread.registerDelay2_entry() //  []
         { []
         }
     {offset
       caQsi: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caQsj; else goto caQsk;
       caQsj: // global
           R1 = GHC.Event.Thread.registerDelay2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQsk: // global
           I64[Sp - 8] = block_caQsf_info;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 8;
           call stg_newTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.registerDelay2_info" {
     GHC.Event.Thread.registerDelay2_info:
         const GHC.Event.Thread.registerDelay2_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caQsf() //  [R1]
         { []
         }
     {offset
       caQsf: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caQsn; else goto caQsm;
       caQsn: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQsm: // global
           I64[Hp - 8] = GHC.Conc.Sync.TVar_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQsf_info" {
     block_caQsf_info:
         const _caQsf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.929148535 UTC

[section ""data" . GHC.Event.Thread.$wregisterDelay_closure" {
     GHC.Event.Thread.$wregisterDelay_closure:
         const GHC.Event.Thread.$wregisterDelay_info;
         const 0;
 },
 w1_saM9g_entry() //  [R1]
         { []
         }
     {offset
       caQt3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caQt7; else goto caQt8;
       caQt7: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQt8: // global
           I64[Sp - 8] = block_caQt0_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQtc; else goto caQt1;
       uaQtc: // global
           call _caQt0(R1) args: 0, res: 0, upd: 0;
       caQt1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w1_saM9g_info" {
     w1_saM9g_info:
         const w1_saM9g_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caQt0() //  [R1]
         { []
         }
     {offset
       caQt0: // global
           I64[Sp] = block_caQt6_info;
           R2 = GHC.Types.True_closure+2;
           R1 = P64[R1 + 7];
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQt0_info" {
     block_caQt0_info:
         const _caQt0;
         const 0;
         const 30;
 },
 _caQt6() //  []
         { []
         }
     {offset
       caQt6: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQt6_info" {
     block_caQt6_info:
         const _caQt6;
         const 0;
         const 30;
 },
 w2_saM9q_entry() //  [R1]
         { []
         }
     {offset
       caQtm: // global
           R1 = P64[R1 + 7];
           call stg_atomically#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w2_saM9q_info" {
     w2_saM9q_info:
         const w2_saM9q_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saMa6_entry() //  [R1]
         { []
         }
     {offset
       caQtY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caQtZ; else goto caQu0;
       caQtZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caQu0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caQtQ_info;
           _saM9x::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saM9x::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaQuV; else goto caQtR;
       uaQuV: // global
           call _caQtQ(R1) args: 0, res: 0, upd: 0;
       caQtR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saMa6_info" {
     sat_saMa6_info:
         const sat_saMa6_entry;
         const 2;
         const 18;
 },
 _caQtQ() //  [R1]
         { []
         }
     {offset
       caQtQ: // global
           _caQtX::P64 = R1 & 7;
           if (_caQtX::P64 < 3) goto uaQuM; else goto uaQuP;
       uaQuM: // global
           _saM9x::P64 = P64[Sp + 8];
           if (_caQtX::P64 < 2) goto caQtU; else goto caQtV;
       caQtU: // global
           I64[Sp] = block_caQu3_info;
           _saM9A::I64 = I64[R1 + 39];
           R1 = _saM9x::P64;
           I64[Sp + 8] = _saM9A::I64;
           if (R1 & 7 != 0) goto uaQuS; else goto caQu5;
       uaQuS: // global
           call _caQu3(R1) args: 0, res: 0, upd: 0;
       caQu5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caQtV: // global
           I64[Sp] = block_caQum_info;
           _saM9S::I64 = I64[R1 + 22];
           R1 = _saM9x::P64;
           I64[Sp + 8] = _saM9S::I64;
           if (R1 & 7 != 0) goto uaQuT; else goto caQuo;
       uaQuT: // global
           call _caQum(R1) args: 0, res: 0, upd: 0;
       caQuo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaQuP: // global
           Sp = Sp + 16;
           call _caQtW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQtQ_info" {
     block_caQtQ_info:
         const _caQtQ;
         const 1;
         const 30;
 },
 _caQu3() //  [R1]
         { []
         }
     {offset
       caQu3: // global
           _caQuJ::P64 = R1 & 7;
           if (_caQuJ::P64 < 3) goto uaQuN; else goto uaQuQ;
       uaQuN: // global
           _saM9A::I64 = I64[Sp + 8];
           if (_caQuJ::P64 < 2) goto caQub; else goto caQuf;
       caQub: // global
           R1 = I64[((_saM9A::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caQuf: // global
           R1 = I64[((_saM9A::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaQuQ: // global
           Sp = Sp + 16;
           call _caQtW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQu3_info" {
     block_caQu3_info:
         const _caQu3;
         const 65;
         const 30;
 },
 _caQum() //  [R1]
         { []
         }
     {offset
       caQum: // global
           _caQuG::P64 = R1 & 7;
           if (_caQuG::P64 < 3) goto uaQuO; else goto uaQuR;
       uaQuO: // global
           _saM9S::I64 = I64[Sp + 8];
           if (_caQuG::P64 < 2) goto caQuu; else goto caQuy;
       caQuu: // global
           R1 = I64[((_saM9S::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caQuy: // global
           R1 = I64[((_saM9S::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaQuR: // global
           Sp = Sp + 16;
           call _caQtW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQum_info" {
     block_caQum_info:
         const _caQum;
         const 65;
         const 30;
 },
 _caQtW() //  []
         { []
         }
     {offset
       caQtW: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saMa7_entry() //  [R1, R2]
         { []
         }
     {offset
       caQuY: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caQv0; else goto caQv1;
       caQv0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQv1: // global
           I64[Sp - 40] = block_caQtE_info;
           R3 = R2;
           _saM9v::P64 = R2;
           R2 = P64[R1 + 15];
           I64[Sp - 32] = I64[R1 + 23];
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 31];
           P64[Sp - 8] = _saM9v::P64;
           Sp = Sp - 40;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saMa7_info" {
     sat_saMa7_info:
         const sat_saMa7_entry;
         const 8589934594;
         const 8;
         const 4294967301;
 },
 _caQtE() //  [R1]
         { []
         }
     {offset
       caQtE: // global
           _saM9s::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_caQtI_info;
           R5 = R1;
           R4 = P64[Sp + 16];
           R3 = _saM9s::I64;
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQtE_info" {
     block_caQtE_info:
         const _caQtE;
         const 324;
         const 30;
 },
 _caQtI() //  [R1]
         { []
         }
     {offset
       caQtI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caQv5; else goto caQv4;
       caQv5: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQv4: // global
           I64[Hp - 48] = sat_saMa6_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQtI_info" {
     block_caQtI_info:
         const _caQtI;
         const 1;
         const 30;
 },
 GHC.Event.Thread.$wregisterDelay_entry() //  [R2]
         { []
         }
     {offset
       caQv6: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caQv7; else goto caQv8;
       caQv7: // global
           R2 = R2;
           R1 = GHC.Event.Thread.$wregisterDelay_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQv8: // global
           I64[Sp - 16] = block_caQsB_info;
           R1 = GHC.Event.Thread.registerDelay2_closure+1;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wregisterDelay_info" {
     GHC.Event.Thread.$wregisterDelay_info:
         const GHC.Event.Thread.$wregisterDelay_entry;
         const 0;
         const 133143986190;
         const 8589934596;
         const SaMem_srt+528;
 },
 _caQsB() //  [R1]
         { []
         }
     {offset
       caQsB: // global
           I64[Sp - 8] = block_caQsD_info;
           _saM8U::P64 = R1;
           R1 = GHC.Event.Thread.timerManager_closure;
           P64[Sp] = _saM8U::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQwF; else goto caQsE;
       uaQwF: // global
           call _caQsD(R1) args: 0, res: 0, upd: 0;
       caQsE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQsB_info" {
     block_caQsB_info:
         const _caQsB;
         const 65;
         const 64424509470;
         const SaMem_srt+536;
 },
 _caQsD() //  [R1]
         { []
         }
     {offset
       caQsD: // global
           _saM8Z::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caQsI_info;
           R1 = _saM8Z::P64;
           if (R1 & 7 != 0) goto uaQwG; else goto caQsJ;
       uaQwG: // global
           call _caQsI(R1) args: 0, res: 0, upd: 0;
       caQsJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQsD_info" {
     block_caQsD_info:
         const _caQsD;
         const 130;
         const 30064771102;
         const SaMem_srt+544;
 },
 _caQsI() //  [R1]
         { []
         }
     {offset
       caQsI: // global
           if (R1 & 7 == 1) goto caQve; else goto caQvg;
       caQve: // global
           Sp = Sp + 24;
           call GHC.Event.Thread.getSystemTimerManager2_entry() args: 8, res: 0, upd: 8;
       caQvg: // global
           I64[Sp] = block_caQsO_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaQwH; else goto caQsP;
       uaQwH: // global
           call _caQsO(R1) args: 0, res: 0, upd: 0;
       caQsP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQsI_info" {
     block_caQsI_info:
         const _caQsI;
         const 130;
         const 30064771102;
         const SaMem_srt+544;
 },
 _caQsO() //  [R1]
         { []
         }
     {offset
       caQsO: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto caQvj; else goto caQvi;
       caQvj: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQvi: // global
           _saM8Q::I64 = I64[Sp + 16];
           _saM8U::P64 = P64[Sp + 8];
           _saM95::P64 = P64[R1 + 15];
           _saM9c::P64 = P64[R1 + 47];
           _saM9a::I64 = I64[R1 + 71];
           (_saM9f::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 31] + 16, 1);
           I64[Hp - 80] = w1_saM9g_info;
           P64[Hp - 72] = _saM8U::P64;
           _caQsV::P64 = Hp - 79;
           if (%MO_S_Gt_W64(_saM8Q::I64, 0)) goto caQvo; else goto caQww;
       caQvo: // global
           (_saM9p::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 64] = w2_saM9q_info;
           P64[Hp - 56] = _caQsV::P64;
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _saM9f::I64;
           I64[Hp - 32] = sat_saMa7_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _saM9f::I64;
           I64[Hp] = _saM8Q::I64 * 1000 + _saM9p::I64;
           I64[Sp - 8] = block_caQvk_info;
           R2 = Hp - 31;
           R1 = _saM95::P64;
           P64[Sp] = _saM9c::P64;
           I64[Sp + 16] = _saM9a::I64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       caQww: // global
           Hp = Hp - 72;
           I64[Sp] = block_caQwv_info;
           R1 = _caQsV::P64;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQsO_info" {
     block_caQsO_info:
         const _caQsO;
         const 130;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQvk() //  [R1]
         { []
         }
     {offset
       caQvk: // global
           I64[Sp] = block_caQvm_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQwI; else goto caQvq;
       uaQwI: // global
           call _caQvm(R1) args: 0, res: 0, upd: 0;
       caQvq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQvk_info" {
     block_caQvk_info:
         const _caQvk;
         const 259;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQvm() //  [R1]
         { []
         }
     {offset
       caQvm: // global
           if (R1 & 7 == 1) goto uaQwC; else goto caQwt;
       uaQwC: // global
           Sp = Sp + 16;
           goto uaQwL;
       caQwt: // global
           _saM9c::P64 = P64[Sp + 8];
           (_saMag::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 1);
           if (%MO_SS_Conv_W64_W32(_saMag::I64) == 0 :: W32) goto uaQwD; else goto caQvP;
       uaQwD: // global
           Sp = Sp + 16;
           goto uaQwL;
       uaQwL: // global
           call _caQwp() args: 0, res: 0, upd: 0;
       caQvP: // global
           (_saMal::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_caQvN_info;
           R1 = P64[_saM9c::P64 + 8];
           I64[Sp + 24] = _saMal::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaQwJ; else goto caQvR;
       uaQwJ: // global
           call _caQvN(R1) args: 0, res: 0, upd: 0;
       caQvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQvm_info" {
     block_caQvm_info:
         const _caQvm;
         const 259;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQvN() //  [R1]
         { []
         }
     {offset
       caQvN: // global
           if (R1 & 7 == 1) goto caQvY; else goto caQwm;
       caQvY: // global
           I64[Sp] = block_caQvV_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caQwm: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 16]) == 9 :: W32) goto uaQwE; else goto caQwc;
       uaQwE: // global
           Sp = Sp + 8;
           call _caQwp() args: 0, res: 0, upd: 0;
       caQwc: // global
           I64[Sp] = block_caQwa_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQvN_info" {
     block_caQvN_info:
         const _caQvN;
         const 130;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQvV() //  []
         { []
         }
     {offset
       caQvV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQvV_info" {
     block_caQvV_info:
         const _caQvV;
         const 130;
         const 30;
 },
 _caQwp() //  []
         { []
         }
     {offset
       caQwp: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caQwa() //  []
         { []
         }
     {offset
       caQwa: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQwa_info" {
     block_caQwa_info:
         const _caQwa;
         const 130;
         const 30;
 },
 _caQwv() //  []
         { []
         }
     {offset
       caQwv: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQwv_info" {
     block_caQwv_info:
         const _caQwv;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.969524171 UTC

[section ""data" . GHC.Event.Thread.registerDelay1_closure" {
     GHC.Event.Thread.registerDelay1_closure:
         const GHC.Event.Thread.registerDelay1_info;
         const 0;
 },
 GHC.Event.Thread.registerDelay1_entry() //  [R2]
         { []
         }
     {offset
       caQyX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caQyY; else goto caQyZ;
       caQyY: // global
           R2 = R2;
           R1 = GHC.Event.Thread.registerDelay1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQyZ: // global
           I64[Sp - 8] = block_caQyU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQz3; else goto caQyV;
       uaQz3: // global
           call _caQyU(R1) args: 0, res: 0, upd: 0;
       caQyV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.registerDelay1_info" {
     GHC.Event.Thread.registerDelay1_info:
         const GHC.Event.Thread.registerDelay1_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const SaMem_srt+528;
 },
 _caQyU() //  [R1]
         { []
         }
     {offset
       caQyU: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.Thread.$wregisterDelay_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQyU_info" {
     block_caQyU_info:
         const _caQyU;
         const 0;
         const 4294967326;
         const SaMem_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.974796288 UTC

[section ""data" . GHC.Event.Thread.registerDelay_closure" {
     GHC.Event.Thread.registerDelay_closure:
         const GHC.Event.Thread.registerDelay_info;
         const 0;
 },
 GHC.Event.Thread.registerDelay_entry() //  [R2]
         { []
         }
     {offset
       caQzh: // global
           R2 = R2;
           call GHC.Event.Thread.registerDelay1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.registerDelay_info" {
     GHC.Event.Thread.registerDelay_info:
         const GHC.Event.Thread.registerDelay_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaMem_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:44.999681172 UTC

[section ""data" . GHC.Event.Thread.$wthreadDelay_closure" {
     GHC.Event.Thread.$wthreadDelay_closure:
         const GHC.Event.Thread.$wthreadDelay_info;
         const 0;
 },
 sat_saMbR_entry() //  [R1]
         { []
         }
     {offset
       caQAp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caQAq; else goto caQAr;
       caQAq: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caQAr: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caQAh_info;
           _saMbi::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saMbi::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaQBm; else goto caQAi;
       uaQBm: // global
           call _caQAh(R1) args: 0, res: 0, upd: 0;
       caQAi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saMbR_info" {
     sat_saMbR_info:
         const sat_saMbR_entry;
         const 2;
         const 18;
 },
 _caQAh() //  [R1]
         { []
         }
     {offset
       caQAh: // global
           _caQAo::P64 = R1 & 7;
           if (_caQAo::P64 < 3) goto uaQBd; else goto uaQBg;
       uaQBd: // global
           _saMbi::P64 = P64[Sp + 8];
           if (_caQAo::P64 < 2) goto caQAl; else goto caQAm;
       caQAl: // global
           I64[Sp] = block_caQAu_info;
           _saMbl::I64 = I64[R1 + 39];
           R1 = _saMbi::P64;
           I64[Sp + 8] = _saMbl::I64;
           if (R1 & 7 != 0) goto uaQBj; else goto caQAw;
       uaQBj: // global
           call _caQAu(R1) args: 0, res: 0, upd: 0;
       caQAw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caQAm: // global
           I64[Sp] = block_caQAN_info;
           _saMbD::I64 = I64[R1 + 22];
           R1 = _saMbi::P64;
           I64[Sp + 8] = _saMbD::I64;
           if (R1 & 7 != 0) goto uaQBk; else goto caQAP;
       uaQBk: // global
           call _caQAN(R1) args: 0, res: 0, upd: 0;
       caQAP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaQBg: // global
           Sp = Sp + 16;
           call _caQAn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQAh_info" {
     block_caQAh_info:
         const _caQAh;
         const 1;
         const 30;
 },
 _caQAu() //  [R1]
         { []
         }
     {offset
       caQAu: // global
           _caQBa::P64 = R1 & 7;
           if (_caQBa::P64 < 3) goto uaQBe; else goto uaQBh;
       uaQBe: // global
           _saMbl::I64 = I64[Sp + 8];
           if (_caQBa::P64 < 2) goto caQAC; else goto caQAG;
       caQAC: // global
           R1 = I64[((_saMbl::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caQAG: // global
           R1 = I64[((_saMbl::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaQBh: // global
           Sp = Sp + 16;
           call _caQAn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQAu_info" {
     block_caQAu_info:
         const _caQAu;
         const 65;
         const 30;
 },
 _caQAN() //  [R1]
         { []
         }
     {offset
       caQAN: // global
           _caQB7::P64 = R1 & 7;
           if (_caQB7::P64 < 3) goto uaQBf; else goto uaQBi;
       uaQBf: // global
           _saMbD::I64 = I64[Sp + 8];
           if (_caQB7::P64 < 2) goto caQAV; else goto caQAZ;
       caQAV: // global
           R1 = I64[((_saMbD::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caQAZ: // global
           R1 = I64[((_saMbD::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaQBi: // global
           Sp = Sp + 16;
           call _caQAn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQAN_info" {
     block_caQAN_info:
         const _caQAN;
         const 65;
         const 30;
 },
 _caQAn() //  []
         { []
         }
     {offset
       caQAn: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saMbS_entry() //  [R1, R2]
         { []
         }
     {offset
       caQBp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQBr; else goto caQBs;
       caQBr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQBs: // global
           I64[Sp - 16] = block_caQA9_info;
           R3 = R2;
           _saMbh::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _saMbh::P64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saMbS_info" {
     sat_saMbS_info:
         const sat_saMbS_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _caQA9() //  [R1]
         { []
         }
     {offset
       caQA9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caQBv; else goto caQBu;
       caQBv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQBu: // global
           I64[Hp - 48] = sat_saMbR_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQA9_info" {
     block_caQA9_info:
         const _caQA9;
         const 1;
         const 30;
 },
 sat_saMci_entry() //  [R1, R2]
         { []
         }
     {offset
       caQBF: // global
           _saMbf::P64 = R2;
           _saMci::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto caQBG; else goto caQBH;
       caQBH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caQBJ; else goto caQBI;
       caQBJ: // global
           HpAlloc = 16;
           goto caQBG;
       caQBG: // global
           R2 = _saMbf::P64;
           R1 = _saMci::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQBI: // global
           _saMaY::P64 = P64[_saMci::P64 + 6];
           _saMb5::P64 = P64[_saMci::P64 + 14];
           _saMbc::P64 = P64[_saMci::P64 + 22];
           _saMb3::I64 = I64[_saMci::P64 + 30];
           I64[Hp - 8] = sat_saMbS_info;
           P64[Hp] = _saMbc::P64;
           I64[Sp - 32] = block_caQBw_info;
           R2 = Hp - 7;
           R1 = _saMaY::P64;
           I64[Sp - 24] = _saMb3::I64;
           P64[Sp - 16] = _saMb5::P64;
           P64[Sp - 8] = _saMbf::P64;
           Sp = Sp - 32;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saMci_info" {
     sat_saMci_info:
         const sat_saMci_entry;
         const 4294967299;
         const 12884901896;
         const 8589934597;
         const SaMem_srt+552;
 },
 _caQBw() //  [R1]
         { []
         }
     {offset
       caQBw: // global
           I64[Sp] = block_caQBy_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQCO; else goto caQBz;
       uaQCO: // global
           call _caQBy(R1) args: 0, res: 0, upd: 0;
       caQBz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQBw_info" {
     block_caQBw_info:
         const _caQBw;
         const 67;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQBy() //  [R1]
         { []
         }
     {offset
       caQBy: // global
           if (R1 & 7 == 1) goto uaQCL; else goto caQBD;
       uaQCL: // global
           Sp = Sp + 24;
           goto uaQCR;
       caQBD: // global
           _saMb5::P64 = P64[Sp + 16];
           (_saMc1::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), 1);
           if (%MO_SS_Conv_W64_W32(_saMc1::I64) == 0 :: W32) goto uaQCM; else goto caQC6;
       uaQCM: // global
           Sp = Sp + 24;
           goto uaQCR;
       uaQCR: // global
           call _caQCG() args: 0, res: 0, upd: 0;
       caQC6: // global
           (_saMc6::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_caQC4_info;
           R1 = P64[_saMb5::P64 + 8];
           I64[Sp + 16] = _saMc6::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaQCP; else goto caQC8;
       uaQCP: // global
           call _caQC4(R1) args: 0, res: 0, upd: 0;
       caQC8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQBy_info" {
     block_caQBy_info:
         const _caQBy;
         const 67;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQC4() //  [R1]
         { []
         }
     {offset
       caQC4: // global
           if (R1 & 7 == 1) goto caQCf; else goto caQCD;
       caQCf: // global
           I64[Sp + 8] = block_caQCc_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caQCD: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uaQCN; else goto caQCt;
       uaQCN: // global
           Sp = Sp + 16;
           call _caQCG() args: 0, res: 0, upd: 0;
       caQCt: // global
           I64[Sp + 8] = block_caQCr_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQC4_info" {
     block_caQC4_info:
         const _caQC4;
         const 66;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQCc() //  []
         { []
         }
     {offset
       caQCc: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQCc_info" {
     block_caQCc_info:
         const _caQCc;
         const 1;
         const 30;
 },
 _caQCG() //  []
         { []
         }
     {offset
       caQCG: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caQCr() //  []
         { []
         }
     {offset
       caQCr: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQCr_info" {
     block_caQCr_info:
         const _caQCr;
         const 1;
         const 30;
 },
 sat_saMbe_entry() //  [R1]
         { []
         }
     {offset
       caQCY: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saMbe_info" {
     sat_saMbe_info:
         const sat_saMbe_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 w1_saMco_entry() //  [R1]
         { []
         }
     {offset
       caQDc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caQDd; else goto caQDe;
       caQDd: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQDe: // global
           I64[Sp - 8] = block_caQDa_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w1_saMco_info" {
     w1_saMco_info:
         const w1_saMco_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caQDa() //  []
         { []
         }
     {offset
       caQDa: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQDa_info" {
     block_caQDa_info:
         const _caQDa;
         const 0;
         const 30;
 },
 sat_saMd5_entry() //  [R1]
         { []
         }
     {offset
       caQDO: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caQDP; else goto caQDQ;
       caQDP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caQDQ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caQDG_info;
           _saMcw::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saMcw::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaQEL; else goto caQDH;
       uaQEL: // global
           call _caQDG(R1) args: 0, res: 0, upd: 0;
       caQDH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saMd5_info" {
     sat_saMd5_info:
         const sat_saMd5_entry;
         const 2;
         const 18;
 },
 _caQDG() //  [R1]
         { []
         }
     {offset
       caQDG: // global
           _caQDN::P64 = R1 & 7;
           if (_caQDN::P64 < 3) goto uaQEC; else goto uaQEF;
       uaQEC: // global
           _saMcw::P64 = P64[Sp + 8];
           if (_caQDN::P64 < 2) goto caQDK; else goto caQDL;
       caQDK: // global
           I64[Sp] = block_caQDT_info;
           _saMcz::I64 = I64[R1 + 39];
           R1 = _saMcw::P64;
           I64[Sp + 8] = _saMcz::I64;
           if (R1 & 7 != 0) goto uaQEI; else goto caQDV;
       uaQEI: // global
           call _caQDT(R1) args: 0, res: 0, upd: 0;
       caQDV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caQDL: // global
           I64[Sp] = block_caQEc_info;
           _saMcR::I64 = I64[R1 + 22];
           R1 = _saMcw::P64;
           I64[Sp + 8] = _saMcR::I64;
           if (R1 & 7 != 0) goto uaQEJ; else goto caQEe;
       uaQEJ: // global
           call _caQEc(R1) args: 0, res: 0, upd: 0;
       caQEe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaQEF: // global
           Sp = Sp + 16;
           call _caQDM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQDG_info" {
     block_caQDG_info:
         const _caQDG;
         const 1;
         const 30;
 },
 _caQDT() //  [R1]
         { []
         }
     {offset
       caQDT: // global
           _caQEz::P64 = R1 & 7;
           if (_caQEz::P64 < 3) goto uaQED; else goto uaQEG;
       uaQED: // global
           _saMcz::I64 = I64[Sp + 8];
           if (_caQEz::P64 < 2) goto caQE1; else goto caQE5;
       caQE1: // global
           R1 = I64[((_saMcz::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caQE5: // global
           R1 = I64[((_saMcz::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaQEG: // global
           Sp = Sp + 16;
           call _caQDM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQDT_info" {
     block_caQDT_info:
         const _caQDT;
         const 65;
         const 30;
 },
 _caQEc() //  [R1]
         { []
         }
     {offset
       caQEc: // global
           _caQEw::P64 = R1 & 7;
           if (_caQEw::P64 < 3) goto uaQEE; else goto uaQEH;
       uaQEE: // global
           _saMcR::I64 = I64[Sp + 8];
           if (_caQEw::P64 < 2) goto caQEk; else goto caQEo;
       caQEk: // global
           R1 = I64[((_saMcR::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caQEo: // global
           R1 = I64[((_saMcR::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaQEH: // global
           Sp = Sp + 16;
           call _caQDM() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQEc_info" {
     block_caQEc_info:
         const _caQEc;
         const 65;
         const 30;
 },
 _caQDM() //  []
         { []
         }
     {offset
       caQDM: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saMd6_entry() //  [R1, R2]
         { []
         }
     {offset
       caQEO: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caQEQ; else goto caQER;
       caQEQ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQER: // global
           I64[Sp - 40] = block_caQDu_info;
           R3 = R2;
           _saMcu::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = I64[R1 + 23];
           P64[Sp - 24] = P64[R1 + 15];
           I64[Sp - 16] = I64[R1 + 31];
           P64[Sp - 8] = _saMcu::P64;
           Sp = Sp - 40;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saMd6_info" {
     sat_saMd6_info:
         const sat_saMd6_entry;
         const 8589934594;
         const 8;
         const 4294967301;
 },
 _caQDu() //  [R1]
         { []
         }
     {offset
       caQDu: // global
           _saMcr::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_caQDy_info;
           R5 = R1;
           R4 = P64[Sp + 16];
           R3 = _saMcr::I64;
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQDu_info" {
     block_caQDu_info:
         const _caQDu;
         const 324;
         const 30;
 },
 _caQDy() //  [R1]
         { []
         }
     {offset
       caQDy: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caQEV; else goto caQEU;
       caQEV: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQEU: // global
           I64[Hp - 48] = sat_saMd5_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQDy_info" {
     block_caQDy_info:
         const _caQDy;
         const 1;
         const 30;
 },
 io_saMaJ_entry() //  [R1]
         { []
         }
     {offset
       caQEW: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caQEX; else goto caQEY;
       caQEX: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caQEY: // global
           I64[Sp - 16] = block_caQzz_info;
           _saMaE::I64 = I64[R1 + 7];
           R1 = GHC.Event.Thread.timerManager_closure;
           I64[Sp - 8] = _saMaE::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaQGD; else goto caQzA;
       uaQGD: // global
           call _caQzz(R1) args: 0, res: 0, upd: 0;
       caQzA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saMaJ_info" {
     io_saMaJ_info:
         const io_saMaJ_entry;
         const 4294967296;
         const 64424509450;
         const 4294967299;
         const SaMem_srt+536;
 },
 _caQzz() //  [R1]
         { []
         }
     {offset
       caQzz: // global
           _saMaP::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caQzE_info;
           R1 = _saMaP::P64;
           if (R1 & 7 != 0) goto uaQGA; else goto caQzF;
       uaQGA: // global
           call _caQzE(R1) args: 0, res: 0, upd: 0;
       caQzF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQzz_info" {
     block_caQzz_info:
         const _caQzz;
         const 65;
         const 30064771102;
         const SaMem_srt+544;
 },
 _caQzE() //  [R1]
         { []
         }
     {offset
       caQzE: // global
           if (R1 & 7 == 1) goto caQF3; else goto caQF5;
       caQF3: // global
           Sp = Sp + 16;
           call GHC.Event.Thread.getSystemTimerManager2_entry() args: 8, res: 0, upd: 8;
       caQF5: // global
           I64[Sp - 8] = block_caQzK_info;
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQzE_info" {
     block_caQzE_info:
         const _caQzE;
         const 65;
         const 30064771102;
         const SaMem_srt+544;
 },
 _caQzK() //  [R1]
         { []
         }
     {offset
       caQzK: // global
           I64[Sp] = block_caQzM_info;
           _saMaV::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _saMaV::P64;
           if (R1 & 7 != 0) goto uaQGB; else goto caQzN;
       uaQGB: // global
           call _caQzM(R1) args: 0, res: 0, upd: 0;
       caQzN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQzK_info" {
     block_caQzK_info:
         const _caQzK;
         const 130;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQzM() //  [R1]
         { []
         }
     {offset
       caQzM: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto caQF9; else goto caQF8;
       caQF9: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQF8: // global
           _saMaE::I64 = I64[Sp + 16];
           _saMaV::P64 = P64[Sp + 8];
           _saMaY::P64 = P64[R1 + 15];
           _saMb5::P64 = P64[R1 + 47];
           _saMb3::I64 = I64[R1 + 71];
           (_saMb8::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 31] + 16, 1);
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _saMb8::I64;
           _caQzT::P64 = Hp - 63;
           if (%MO_S_Gt_W64(_saMaE::I64, 0)) goto caQFh; else goto caQGp;
       caQFh: // global
           (_saMcn::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 48] = w1_saMco_info;
           P64[Hp - 40] = _saMaV::P64;
           I64[Hp - 32] = sat_saMd6_info;
           P64[Hp - 24] = _caQzT::P64;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _saMb8::I64;
           I64[Hp] = _saMaE::I64 * 1000 + _saMcn::I64;
           I64[Sp - 24] = block_caQFd_info;
           R2 = Hp - 31;
           R1 = _saMaY::P64;
           I64[Sp - 16] = _saMb3::I64;
           P64[Sp - 8] = _saMb5::P64;
           P64[Sp] = _saMaY::P64;
           P64[Sp + 16] = _caQzT::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       caQGp: // global
           Hp = Hp - 56;
           I64[Sp - 24] = block_caQGo_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saMaV::P64;
           P64[Sp + 16] = _caQzT::P64;
           P64[Sp] = _saMaY::P64;
           I64[Sp - 16] = _saMb3::I64;
           P64[Sp - 8] = _saMb5::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQzM_info" {
     block_caQzM_info:
         const _caQzM;
         const 130;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQFd() //  [R1]
         { []
         }
     {offset
       caQFd: // global
           I64[Sp] = block_caQFf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaQGE; else goto caQFj;
       uaQGE: // global
           call _caQFf(R1) args: 0, res: 0, upd: 0;
       caQFj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQFd_info" {
     block_caQFd_info:
         const _caQFd;
         const 69;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQFf() //  [R1]
         { []
         }
     {offset
       caQFf: // global
           if (R1 & 7 == 1) goto uaQGH; else goto caQGm;
       caQGm: // global
           _saMb5::P64 = P64[Sp + 16];
           (_saMdf::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), 1);
           if (%MO_SS_Conv_W64_W32(_saMdf::I64) == 0 :: W32) goto uaQGH; else goto caQFI;
       uaQGH: // global
           call _caQGo() args: 0, res: 0, upd: 0;
       caQFI: // global
           (_saMdk::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp - 8] = block_caQFG_info;
           R1 = P64[_saMb5::P64 + 8];
           I64[Sp] = _saMdk::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQGG; else goto caQFK;
       uaQGG: // global
           call _caQFG(R1) args: 0, res: 0, upd: 0;
       caQFK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQFf_info" {
     block_caQFf_info:
         const _caQFf;
         const 69;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQFG() //  [R1]
         { []
         }
     {offset
       caQFG: // global
           if (R1 & 7 == 1) goto caQFR; else goto caQGf;
       caQFR: // global
           I64[Sp + 8] = block_caQFO_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caQGf: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uaQGv; else goto caQG5;
       uaQGv: // global
           Sp = Sp + 8;
           call _caQGo() args: 0, res: 0, upd: 0;
       caQG5: // global
           I64[Sp + 8] = block_caQG3_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caQFG_info" {
     block_caQFG_info:
         const _caQFG;
         const 198;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQFO() //  []
         { []
         }
     {offset
       caQFO: // global
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _caQzX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQFO_info" {
     block_caQFO_info:
         const _caQFO;
         const 69;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQG3() //  []
         { []
         }
     {offset
       caQG3: // global
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _caQzX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQG3_info" {
     block_caQG3_info:
         const _caQG3;
         const 69;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQGo() //  []
         { []
         }
     {offset
       caQGo: // global
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _caQzX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQGo_info" {
     block_caQGo_info:
         const _caQGo;
         const 69;
         const 12884901918;
         const SaMem_srt+552;
 },
 _caQzX() //  []
         { []
         }
     {offset
       caQzX: // global
           Hp = Hp + 56;
           _saMbc::P64 = P64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto caQFc; else goto caQFb;
       caQFc: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_caQzW_info;
           R1 = _saMbc::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caQFb: // global
           I64[Hp - 48] = sat_saMci_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _saMbc::P64;
           I64[Hp - 16] = I64[Sp];
           I64[Hp - 8] = sat_saMbe_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 46;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _caQzW() //  [R1]
         { []
         }
     {offset
       caQzW: // global
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _caQzX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caQzW_info" {
     block_caQzW_info:
         const _caQzW;
         const 1093;
         const 12884901918;
         const SaMem_srt+552;
 },
 GHC.Event.Thread.$wthreadDelay_entry() //  [R2]
         { []
         }
     {offset
       caQGQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caQGR; else goto caQGS;
       caQGR: // global
           R2 = R2;
           R1 = GHC.Event.Thread.$wthreadDelay_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQGS: // global
           I64[Sp - 16] = block_caQzs_info;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wthreadDelay_info" {
     GHC.Event.Thread.$wthreadDelay_info:
         const GHC.Event.Thread.$wthreadDelay_entry;
         const 0;
         const 201863462926;
         const 8589934596;
         const SaMem_srt+536;
 },
 _caQzs() //  [R1]
         { []
         }
     {offset
       caQzs: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caQGV; else goto caQGU;
       caQGV: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caQGU: // global
           I64[Hp - 8] = io_saMaJ_info;
           I64[Hp] = I64[Sp + 8];
           _caQzu::P64 = Hp - 7;
           if (R1 == 0) goto caQGP; else goto caQGO;
       caQGP: // global
           R1 = _caQzu::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caQGO: // global
           R1 = _caQzu::P64;
           Sp = Sp + 16;
           call io_saMaJ_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQzs_info" {
     block_caQzs_info:
         const _caQzs;
         const 65;
         const 64424509470;
         const SaMem_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:45.06675455 UTC

[section ""data" . GHC.Event.Thread.threadDelay1_closure" {
     GHC.Event.Thread.threadDelay1_closure:
         const GHC.Event.Thread.threadDelay1_info;
         const 0;
 },
 GHC.Event.Thread.threadDelay1_entry() //  [R2]
         { []
         }
     {offset
       caQKr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caQKs; else goto caQKt;
       caQKs: // global
           R2 = R2;
           R1 = GHC.Event.Thread.threadDelay1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caQKt: // global
           I64[Sp - 8] = block_caQKo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaQKx; else goto caQKp;
       uaQKx: // global
           call _caQKo(R1) args: 0, res: 0, upd: 0;
       caQKp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadDelay1_info" {
     GHC.Event.Thread.threadDelay1_info:
         const GHC.Event.Thread.threadDelay1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaMem_srt+576;
 },
 _caQKo() //  [R1]
         { []
         }
     {offset
       caQKo: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.Thread.$wthreadDelay_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caQKo_info" {
     block_caQKo_info:
         const _caQKo;
         const 0;
         const 4294967326;
         const SaMem_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:45.071663175 UTC

[section ""data" . GHC.Event.Thread.threadDelay_closure" {
     GHC.Event.Thread.threadDelay_closure:
         const GHC.Event.Thread.threadDelay_info;
         const 0;
 },
 GHC.Event.Thread.threadDelay_entry() //  [R2]
         { []
         }
     {offset
       caQKL: // global
           R2 = R2;
           call GHC.Event.Thread.threadDelay1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadDelay_info" {
     GHC.Event.Thread.threadDelay_info:
         const GHC.Event.Thread.threadDelay_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaMem_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:45.075349687 UTC

[section ""relreadonly" . SaMem_srt" {
     SaMem_srt:
         const Foreign.C.Error.$werrnoToIOError_closure;
         const GHC.Event.Thread.blockedOnBadFD2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.Event.Thread.blockedOnBadFD1_closure;
         const GHC.Event.Manager.loop1_closure;
         const GHC.Conc.Sync.forkIO2_closure;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const restartPollLoop_raLJq_closure;
         const GHC.Arr.$windexError_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning8_closure;
         const lvl4_raLJs_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.Manager.new2_closure;
         const GHC.Event.Thread.$wstartIOManagerThread_closure;
         const GHC.IO.failIO1_closure;
         const GHC.Event.Thread.getSystemTimerManager2_closure;
         const GHC.Event.Thread.timerManager_closure;
         const GHC.Event.Thread.getSystemTimerManager1_closure;
         const GHC.Arr.negRange_closure;
         const lvl9_raLJx_closure;
         const GHC.Event.TimerManager.$wloop_closure;
         const GHC.Event.Poll.new1_closure;
         const GHC.Event.TimerManager.new2_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning3_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning4_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning2_closure;
         const GHC.Event.Thread.eventManager_closure;
         const GHC.Event.Thread.numEnabledEventManagers_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning6_closure;
         const GHC.Event.Thread.ioManagerLock_closure;
         const GHC.Event.Thread.timerManagerThreadVar_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning1_closure;
         const lvl11_raLJz_closure;
         const lvl13_raLJB_closure;
         const GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure;
         const lvl14_raLJC_closure;
         const lvl15_raLJD_closure;
         const GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure;
         const GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure;
         const GHC.Event.Thread.getSystemEventManager2_closure;
         const GHC.Event.Thread.getSystemEventManager1_closure;
         const lvl17_raLJF_closure;
         const Foreign.C.Error.$werrnoToIOError_closure;
         const lvl18_raLJG_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl24_raLJM_closure;
         const GHC.Event.Manager.$weventsOf_closure;
         const GHC.Event.Manager.unregisterFd2_closure;
         const lvl19_raLJH_closure;
         const GHC.Event.Thread.threadWaitReadSTM1_closure;
         const GHC.Event.Internal.evtRead_closure;
         const threadWaitReadSTM2_raLJN_closure;
         const GHC.Event.Internal.evtWrite_closure;
         const threadWaitWriteSTM1_raLJO_closure;
         const lvl26_raLJQ_closure;
         const lvl27_raLJR_closure;
         const lvl28_raLJS_closure;
         const GHC.Event.Thread.threadWaitRead1_closure;
         const threadWaitWrite1_raLJT_closure;
         const threadWaitRead2_raLJU_closure;
         const lvl30_raLJW_closure;
         const GHC.IO.failIO1_closure;
         const GHC.Event.Manager.$wcloseFd__closure;
         const GHC.Event.Thread.closeFdWith1_closure;
         const GHC.Event.Thread.$wregisterDelay_closure;
         const GHC.Event.Thread.timerManager_closure;
         const GHC.Event.Thread.getSystemTimerManager2_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Thread.registerDelay1_closure;
         const GHC.Event.Thread.$wthreadDelay_closure;
         const GHC.Event.Thread.threadDelay1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.465442679 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:52.466566332 UTC

[section ""data" . lvl1_raLJo_closure" {
     lvl1_raLJo_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.469327934 UTC

[section ""data" . lvl2_raLJp_closure" {
     lvl2_raLJp_closure:
         const lvl2_raLJp_info;
 },
 lvl2_raLJp_entry() //  []
         { []
         }
     {offset
       caReG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caReH; else goto caReI;
       caReH: // global
           R1 = lvl2_raLJp_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caReI: // global
           I64[Sp - 8] = block_caReB_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl2_raLJp_info" {
     lvl2_raLJp_info:
         const lvl2_raLJp_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caReB() //  []
         { []
         }
     {offset
       caReB: // global
           I64[Sp] = block_caReD_info;
           R1 = lvl1_raLJo_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caReB_info" {
     block_caReB_info:
         const _caReB;
         const 0;
         const 30;
 },
 _caReD() //  [R1]
         { []
         }
     {offset
       caReD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caReM; else goto caReL;
       caReM: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caReL: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caReD_info" {
     block_caReD_info:
         const _caReD;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.476239188 UTC

[section ""data" . GHC.Event.Thread.numEnabledEventManagers_closure" {
     GHC.Event.Thread.numEnabledEventManagers_closure:
         const GHC.Event.Thread.numEnabledEventManagers_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.numEnabledEventManagers_entry() //  [R1]
         { []
         }
     {offset
       caRfa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRfb; else goto caRfc;
       caRfb: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRfc: // global
           (_caRf5::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRf5::I64 == 0) goto caRf7; else goto caRf6;
       caRf7: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRf6: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRf5::I64;
           I64[Sp - 24] = block_caRf8_info;
           Sp = Sp - 24;
           call lvl2_raLJp_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.numEnabledEventManagers_info" {
     GHC.Event.Thread.numEnabledEventManagers_info:
         const GHC.Event.Thread.numEnabledEventManagers_entry;
         const 0;
         const 21;
 },
 _caRf8() //  [R1]
         { []
         }
     {offset
       caRf8: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRf8_info" {
     block_caRf8_info:
         const _caRf8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.481286348 UTC

[section ""cstring" . GHC.Event.Thread.$trModule4_bytes" {
     GHC.Event.Thread.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.502618989 UTC

[section ""data" . GHC.Event.Thread.$trModule3_closure" {
     GHC.Event.Thread.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Thread.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.504145958 UTC

[section ""cstring" . GHC.Event.Thread.$trModule2_bytes" {
     GHC.Event.Thread.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,84,104,114,101,97,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.50568801 UTC

[section ""data" . GHC.Event.Thread.$trModule1_closure" {
     GHC.Event.Thread.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Thread.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.507280486 UTC

[section ""data" . GHC.Event.Thread.$trModule_closure" {
     GHC.Event.Thread.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Thread.$trModule3_closure+1;
         const GHC.Event.Thread.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.50888901 UTC

[section ""cstring" . GHC.Event.Thread.blockedOnBadFD3_bytes" {
     GHC.Event.Thread.blockedOnBadFD3_bytes:
         I8[] [97,119,97,105,116,69,118,101,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.511239401 UTC

[section ""data" . GHC.Event.Thread.blockedOnBadFD2_closure" {
     GHC.Event.Thread.blockedOnBadFD2_closure:
         const GHC.Event.Thread.blockedOnBadFD2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.blockedOnBadFD2_entry() //  [R1]
         { []
         }
     {offset
       caRfE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRfF; else goto caRfG;
       caRfF: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRfG: // global
           (_caRfB::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRfB::I64 == 0) goto caRfD; else goto caRfC;
       caRfD: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRfC: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRfB::I64;
           R2 = GHC.Event.Thread.blockedOnBadFD3_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.blockedOnBadFD2_info" {
     GHC.Event.Thread.blockedOnBadFD2_info:
         const GHC.Event.Thread.blockedOnBadFD2_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.515483549 UTC

[section ""data" . GHC.Event.Thread.blockedOnBadFD1_closure" {
     GHC.Event.Thread.blockedOnBadFD1_closure:
         const GHC.Event.Thread.blockedOnBadFD1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.blockedOnBadFD1_entry() //  [R1]
         { []
         }
     {offset
       caRfV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRfW; else goto caRfX;
       caRfW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRfX: // global
           (_caRfS::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRfS::I64 == 0) goto caRfU; else goto caRfT;
       caRfU: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRfT: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRfS::I64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = 9;
           R2 = GHC.Event.Thread.blockedOnBadFD2_closure;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.blockedOnBadFD1_info" {
     GHC.Event.Thread.blockedOnBadFD1_info:
         const GHC.Event.Thread.blockedOnBadFD1_entry;
         const 0;
         const 12884901909;
         const SaRfY_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.519633291 UTC

[section ""data" . GHC.Event.Thread.blockedOnBadFD_closure" {
     GHC.Event.Thread.blockedOnBadFD_closure:
         const GHC.Event.Thread.blockedOnBadFD_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.blockedOnBadFD_entry() //  [R1]
         { []
         }
     {offset
       caRgf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRgg; else goto caRgh;
       caRgg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRgh: // global
           (_caRgc::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRgc::I64 == 0) goto caRge; else goto caRgd;
       caRge: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRgd: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRgc::I64;
           R2 = GHC.Event.Thread.blockedOnBadFD1_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.blockedOnBadFD_info" {
     GHC.Event.Thread.blockedOnBadFD_info:
         const GHC.Event.Thread.blockedOnBadFD_entry;
         const 0;
         const 12884901909;
         const SaRfY_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.523208983 UTC

[section ""cstring" . GHC.Event.Thread.ensureIOManagerIsRunning7_bytes" {
     GHC.Event.Thread.ensureIOManagerIsRunning7_bytes:
         I8[] [73,79,77,97,110,97,103,101,114,32,111,110,32,99,97,112,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.531560238 UTC

[section ""data" . restartPollLoop_raLJq_closure" {
     restartPollLoop_raLJq_closure:
         const restartPollLoop_raLJq_info;
         const 0;
 },
 sat_saQLr_entry() //  [R1]
         { []
         }
     {offset
       caRgW: // global
           R2 = P64[R1 + 7];
           call GHC.Event.Manager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQLr_info" {
     sat_saQLr_info:
         const sat_saQLr_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SaRfY_srt+32;
 },
 sat_saQLs_entry() //  [R1]
         { []
         }
     {offset
       caRgZ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRh3; else goto caRh2;
       caRh3: // global
           HpAlloc = 16;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRh2: // global
           _saQL5::P64 = P64[R1 + 7];
           I64[Hp - 8] = sat_saQLr_info;
           P64[Hp] = _saQL5::P64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQLs_info" {
     sat_saQLs_info:
         const sat_saQLs_entry;
         const 1;
         const 12884901897;
         const 4294967299;
         const SaRfY_srt+32;
 },
 sat_saQLG_entry() //  [R1, R2]
         { []
         }
     {offset
       caRhe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRhi; else goto caRhj;
       caRhi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caRhj: // global
           I64[Sp - 16] = block_caRhb_info;
           _saQLv::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saQLv::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRhn; else goto caRhc;
       uaRhn: // global
           call _caRhb(R1) args: 0, res: 0, upd: 0;
       caRhc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQLG_info" {
     sat_saQLG_info:
         const sat_saQLG_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caRhb() //  [R1]
         { []
         }
     {offset
       caRhb: // global
           _saQLv::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caRhh_info;
           R2 = I64[R1 + 7];
           R1 = _saQLv::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRhb_info" {
     block_caRhb_info:
         const _caRhb;
         const 1;
         const 30;
 },
 _caRhh() //  []
         { []
         }
     {offset
       caRhh: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRhh_info" {
     block_caRhh_info:
         const _caRhh;
         const 0;
         const 30;
 },
 sat_saQLz_entry() //  [R1]
         { []
         }
     {offset
       caRhz: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRhA; else goto caRhB;
       caRhA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRhB: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caRhw_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saQLz_info" {
     sat_saQLz_info:
         const sat_saQLz_entry;
         const 4294967296;
         const 17;
 },
 _caRhw() //  [R1, R2]
         { []
         }
     {offset
       caRhw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caRhE; else goto caRhD;
       caRhE: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caRhD: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRhw_info" {
     block_caRhw_info:
         const _caRhw;
         const 0;
         const 30;
 },
 sat_saQLA_entry() //  [R1]
         { []
         }
     {offset
       caRhF: // global
           _saQLA::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caRhG; else goto caRhH;
       caRhH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caRhJ; else goto caRhI;
       caRhJ: // global
           HpAlloc = 24;
           goto caRhG;
       caRhG: // global
           R1 = _saQLA::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRhI: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saQLA::P64;
           _saQLp::I64 = I64[_saQLA::P64 + 16];
           I64[Hp - 16] = sat_saQLz_info;
           I64[Hp] = _saQLp::I64;
           R3 = Hp - 16;
           R2 = GHC.Event.Thread.ensureIOManagerIsRunning7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saQLA_info" {
     sat_saQLA_info:
         const sat_saQLA_entry;
         const 4294967296;
         const 17;
 },
 restartPollLoop_raLJq_entry() //  [R2, R3]
         { []
         }
     {offset
       caRhK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caRhL; else goto caRhM;
       caRhL: // global
           R3 = R3;
           R2 = R2;
           R1 = restartPollLoop_raLJq_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caRhM: // global
           I64[Sp - 16] = block_caRgv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRjf; else goto caRgw;
       uaRjf: // global
           call _caRgv(R1) args: 0, res: 0, upd: 0;
       caRgw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . restartPollLoop_raLJq_info" {
     restartPollLoop_raLJq_info:
         const restartPollLoop_raLJq_entry;
         const 0;
         const 270582939662;
         const 12884901903;
         const SaRfY_srt+32;
 },
 _caRgv() //  [R1]
         { []
         }
     {offset
       caRgv: // global
           I64[Sp - 24] = block_caRgA_info;
           R2 = GHC.Event.Manager.release2_closure+1;
           _saQL5::P64 = R1;
           _saQLh::P64 = P64[R1 + 63];
           _saQLf::I64 = I64[R1 + 103];
           R1 = P64[R1 + 39];
           I64[Sp - 16] = _saQLf::I64;
           P64[Sp - 8] = _saQLh::P64;
           P64[Sp] = _saQL5::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRgv_info" {
     block_caRgv_info:
         const _caRgv;
         const 1;
         const 133143986206;
         const SaRfY_srt+32;
 },
 _caRgA() //  [R1]
         { []
         }
     {offset
       caRgA: // global
           I64[Sp] = block_caRhN_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaRje; else goto caRi3;
       uaRje: // global
           call _caRhN(R1) args: 0, res: 0, upd: 0;
       caRi3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRgA_info" {
     block_caRgA_info:
         const _caRgA;
         const 68;
         const 133143986206;
         const SaRfY_srt+32;
 },
 _caRhN() //  [R1]
         { []
         }
     {offset
       caRhN: // global
           if (R1 & 7 == 2) goto caRj6; else goto uaRj9;
       caRj6: // global
           _saQLh::P64 = P64[Sp + 16];
           (_saQLQ::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), 1);
           if (%MO_SS_Conv_W64_W32(_saQLQ::I64) == 0 :: W32) goto uaRja; else goto caRis;
       uaRja: // global
           Sp = Sp + 24;
           goto uaRji;
       caRis: // global
           (_saQLV::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_caRiq_info;
           R1 = P64[_saQLh::P64 + 8];
           I64[Sp + 16] = _saQLV::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaRjg; else goto caRiu;
       uaRjg: // global
           call _caRiq(R1) args: 0, res: 0, upd: 0;
       caRiu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uaRj9: // global
           Sp = Sp + 24;
           goto uaRji;
       uaRji: // global
           call _saQLm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRhN_info" {
     block_caRhN_info:
         const _caRhN;
         const 68;
         const 133143986206;
         const SaRfY_srt+32;
 },
 _caRiq() //  [R1]
         { []
         }
     {offset
       caRiq: // global
           if (R1 & 7 == 1) goto caRiB; else goto caRiZ;
       caRiB: // global
           I64[Sp + 8] = block_caRiy_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caRiZ: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uaRjb; else goto caRiP;
       uaRjb: // global
           Sp = Sp + 16;
           call _saQLm() args: 0, res: 0, upd: 0;
       caRiP: // global
           I64[Sp + 8] = block_caRiN_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRiq_info" {
     block_caRiq_info:
         const _caRiq;
         const 67;
         const 133143986206;
         const SaRfY_srt+32;
 },
 _caRiy() //  []
         { []
         }
     {offset
       caRiy: // global
           Sp = Sp + 8;
           call _saQLm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRiy_info" {
     block_caRiy_info:
         const _caRiy;
         const 2;
         const 30064771102;
         const SaRfY_srt+32;
 },
 _caRiN() //  []
         { []
         }
     {offset
       caRiN: // global
           Sp = Sp + 8;
           call _saQLm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRiN_info" {
     block_caRiN_info:
         const _caRiN;
         const 2;
         const 30064771102;
         const SaRfY_srt+32;
 },
 _saQLm() //  []
         { []
         }
     {offset
       saQLm: // global
           I64[Sp - 8] = block_caRgH_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRjm; else goto caRgI;
       uaRjm: // global
           call _caRgH(R1) args: 0, res: 0, upd: 0;
       caRgI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caRgH() //  [R1]
         { []
         }
     {offset
       caRgH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRhW; else goto caRhV;
       caRhW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRhV: // global
           _saQLp::I64 = I64[R1 + 7];
           I64[Hp - 8] = sat_saQLs_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caRh4_info;
           R2 = Hp - 7;
           R1 = _saQLp::I64;
           I64[Sp + 16] = _saQLp::I64;
           Sp = Sp + 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRgH_info" {
     block_caRgH_info:
         const _caRgH;
         const 130;
         const 30064771102;
         const SaRfY_srt+32;
 },
 _caRh4() //  [R1]
         { []
         }
     {offset
       caRh4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caRhZ; else goto caRhY;
       caRhZ: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRhY: // global
           I64[Hp - 32] = sat_saQLG_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_saQLA_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp] = block_caRhQ_info;
           R4 = Hp - 30;
           R3 = Hp - 16;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp + 8] = R1;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRh4_info" {
     block_caRh4_info:
         const _caRh4;
         const 65;
         const 4294967326;
         const SaRfY_srt+48;
 },
 _caRhQ() //  [R1]
         { []
         }
     {offset
       caRhQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRi2; else goto caRi1;
       caRi2: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRi1: // global
           I64[Hp - 8] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRhQ_info" {
     block_caRhQ_info:
         const _caRhQ;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.564452491 UTC

[section ""cstring" . lvl3_raLJr_bytes" {
     lvl3_raLJr_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.567312455 UTC

[section ""data" . lvl4_raLJs_closure" {
     lvl4_raLJs_closure:
         const lvl4_raLJs_info;
         const 0;
         const 0;
         const 0;
 },
 lvl4_raLJs_entry() //  [R1]
         { []
         }
     {offset
       caRl9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRla; else goto caRlb;
       caRla: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRlb: // global
           (_caRl6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRl6::I64 == 0) goto caRl8; else goto caRl7;
       caRl8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRl7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRl6::I64;
           R2 = lvl3_raLJr_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl4_raLJs_info" {
     lvl4_raLJs_info:
         const lvl4_raLJs_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.571459172 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning8_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning8_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning8_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caRlr: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caRlv; else goto caRlu;
       caRlv: // global
           HpAlloc = 48;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caRlu: // global
           I64[Hp - 40] = GHC.Types.I#_con_info;
           I64[Hp - 32] = R4;
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R3;
           R6 = lvl4_raLJs_closure;
           R5 = Hp - 39;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning8_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning8_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning8_entry;
         const 0;
         const 30064771086;
         const 12884901904;
         const SaRfY_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.583228155 UTC

[section ""data" . GHC.Event.Thread.$wstartIOManagerThread_closure" {
     GHC.Event.Thread.$wstartIOManagerThread_closure:
         const GHC.Event.Thread.$wstartIOManagerThread_info;
         const 0;
 },
 GHC.Event.Thread.$wstartIOManagerThread_slow() //  [R1]
         { []
         }
     {offset
       caRlE: // global
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.Thread.$wstartIOManagerThread_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2,
                                                              R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saQMU_entry() //  [R1]
         { []
         }
     {offset
       caRmj: // global
           _saQMy::P64 = P64[R1 + 7];
           call "ccall" arg hints:  [,
                                     ‘signed’]  result hints:  [] setIOManagerControlFd(%MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[R1 + 15])), %MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[R1 + 23])));
           R2 = _saQMy::P64;
           call GHC.Event.Manager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQMU_info" {
     sat_saQMU_info:
         const sat_saQMU_entry;
         const 8589934593;
         const 4294967304;
         const 4294967299;
         const SaRfY_srt+32;
 },
 sat_saQMV_entry() //  [R1]
         { []
         }
     {offset
       caRmw: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caRmA; else goto caRmz;
       caRmA: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRmz: // global
           _saQMy::P64 = P64[R1 + 7];
           _saQMg::I64 = I64[R1 + 15];
           _saQMH::I64 = I64[R1 + 23];
           I64[Hp - 24] = sat_saQMU_info;
           P64[Hp - 16] = _saQMy::P64;
           I64[Hp - 8] = _saQMg::I64;
           I64[Hp] = _saQMH::I64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 23;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQMV_info" {
     sat_saQMV_info:
         const sat_saQMV_entry;
         const 8589934593;
         const 12884901896;
         const 4294967299;
         const SaRfY_srt+32;
 },
 sat_saQN9_entry() //  [R1, R2]
         { []
         }
     {offset
       caRmL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRmP; else goto caRmQ;
       caRmP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caRmQ: // global
           I64[Sp - 16] = block_caRmI_info;
           _saQMY::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saQMY::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRmU; else goto caRmJ;
       uaRmU: // global
           call _caRmI(R1) args: 0, res: 0, upd: 0;
       caRmJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQN9_info" {
     sat_saQN9_info:
         const sat_saQN9_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caRmI() //  [R1]
         { []
         }
     {offset
       caRmI: // global
           _saQMY::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caRmO_info;
           R2 = I64[R1 + 7];
           R1 = _saQMY::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRmI_info" {
     block_caRmI_info:
         const _caRmI;
         const 1;
         const 30;
 },
 _caRmO() //  []
         { []
         }
     {offset
       caRmO: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRmO_info" {
     block_caRmO_info:
         const _caRmO;
         const 0;
         const 30;
 },
 sat_saQN2_entry() //  [R1]
         { []
         }
     {offset
       caRn6: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRn7; else goto caRn8;
       caRn7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRn8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caRn3_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 16];
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saQN2_info" {
     sat_saQN2_info:
         const sat_saQN2_entry;
         const 4294967296;
         const 17;
 },
 _caRn3() //  [R1, R2]
         { []
         }
     {offset
       caRn3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caRnb; else goto caRna;
       caRnb: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caRna: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRn3_info" {
     block_caRn3_info:
         const _caRn3;
         const 0;
         const 30;
 },
 sat_saQN3_entry() //  [R1]
         { []
         }
     {offset
       caRnc: // global
           _saQN3::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caRnd; else goto caRne;
       caRne: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caRng; else goto caRnf;
       caRng: // global
           HpAlloc = 24;
           goto caRnd;
       caRnd: // global
           R1 = _saQN3::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRnf: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saQN3::P64;
           _saQMg::I64 = I64[_saQN3::P64 + 16];
           I64[Hp - 16] = sat_saQN2_info;
           I64[Hp] = _saQMg::I64;
           R3 = Hp - 16;
           R2 = GHC.Event.Thread.ensureIOManagerIsRunning7_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saQN3_info" {
     sat_saQN3_info:
         const sat_saQN3_entry;
         const 4294967296;
         const 17;
 },
 GHC.Event.Thread.$wstartIOManagerThread_entry() //  [R2, R3, R4,
                                                      R5]
         { []
         }
     {offset
       caRnk: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caRnl; else goto caRnm;
       caRnl: // global
           R1 = GHC.Event.Thread.$wstartIOManagerThread_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           P64[Sp - 16] = R4;
           I64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       caRnm: // global
           _saQMg::I64 = R5;
           _saQMe::I64 = R3;
           _saQMd::I64 = R2;
           if (%MO_S_Gt_W64(R2, R5)) goto caRno; else goto caRnj;
       caRnj: // global
           if (%MO_S_Gt_W64(_saQMg::I64,
                            _saQMe::I64)) goto caRno; else goto caRnE;
       caRno: // global
           R4 = _saQMg::I64;
           R3 = _saQMd::I64;
           R2 = _saQMe::I64;
           call GHC.Event.Thread.ensureIOManagerIsRunning8_entry(R4,
                                                                 R3,
                                                                 R2) args: 8, res: 0, upd: 8;
       caRnE: // global
           _saQMp::P64 = P64[(R4 + 24) + (_saQMg::I64 - _saQMd::I64 << 3)];
           I64[Sp - 32] = block_caRnp_info;
           R1 = _saQMp::P64;
           I64[Sp - 24] = _saQMd::I64;
           P64[Sp - 16] = R4;
           I64[Sp - 8] = _saQMg::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaRoB; else goto caRnF;
       uaRoB: // global
           call _caRnp(R1) args: 0, res: 0, upd: 0;
       caRnF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wstartIOManagerThread_info" {
     GHC.Event.Thread.$wstartIOManagerThread_info:
         const GHC.Event.Thread.$wstartIOManagerThread_entry;
         const 0;
         const 15972983373838;
         const 21474836480;
         const SaRfY_srt+32;
         const 708;
         const GHC.Event.Thread.$wstartIOManagerThread_slow;
 },
 _caRnp() //  [R1]
         { []
         }
     {offset
       caRnp: // global
           if (R1 & 7 == 1) goto uaRox; else goto caRnV;
       uaRox: // global
           Sp = Sp + 8;
           call _saQMq() args: 0, res: 0, upd: 0;
       caRnV: // global
           I64[Sp] = block_caRnO_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaRoC; else goto caRnP;
       uaRoC: // global
           call _caRnO(R1) args: 0, res: 0, upd: 0;
       caRnP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRnp_info" {
     block_caRnp_info:
         const _caRnp;
         const 323;
         const 6627134537758;
         const SaRfY_srt+32;
 },
 _caRnO() //  [R1]
         { []
         }
     {offset
       caRnO: // global
           I64[Sp - 8] = block_caRnT_info;
           _saQNm::P64 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           P64[Sp] = _saQNm::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRoE; else goto caRnX;
       uaRoE: // global
           call _caRnT(R1) args: 0, res: 0, upd: 0;
       caRnX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRnO_info" {
     block_caRnO_info:
         const _caRnO;
         const 323;
         const 6627134537758;
         const SaRfY_srt+32;
 },
 _caRnT() //  [R1]
         { []
         }
     {offset
       caRnT: // global
           I64[Sp] = block_caRo1_info;
           R1 = P64[R1 + 7];
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRnT_info" {
     block_caRnT_info:
         const _caRnT;
         const 644;
         const 6627134537758;
         const SaRfY_srt+32;
 },
 _caRo1() //  [R1]
         { []
         }
     {offset
       caRo1: // global
           if (R1 == 16) goto uaRoy; else goto uaRow;
       uaRoy: // global
           Sp = Sp + 16;
           call _saQMq() args: 0, res: 0, upd: 0;
       uaRow: // global
           if (R1 == 17) goto caRoo; else goto caRo9;
       caRoo: // global
           _saQNm::P64 = P64[Sp + 8];
           call "ccall" arg hints:  [,
                                     ‘signed’]  result hints:  [] setIOManagerControlFd(%MO_UU_Conv_W32_W64(%MO_UU_Conv_W64_W32(I64[Sp + 32])), (-1));
           I64[Sp + 8] = block_caRon_info;
           R2 = _saQNm::P64;
           Sp = Sp + 8;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 8, upd: 8;
       caRo9: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRo1_info" {
     block_caRo1_info:
         const _caRo1;
         const 644;
         const 6627134537758;
         const SaRfY_srt+32;
 },
 _caRon() //  []
         { []
         }
     {offset
       caRon: // global
           Sp = Sp + 8;
           call _saQMq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRon_info" {
     block_caRon_info:
         const _caRon;
         const 323;
         const 6627134537758;
         const SaRfY_srt+32;
 },
 _saQMq() //  []
         { []
         }
     {offset
       saQMq: // global
           I64[Sp - 8] = block_caRlY_info;
           Sp = Sp - 8;
           call GHC.Event.EPoll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 _caRlY() //  [R1]
         { []
         }
     {offset
       caRlY: // global
           I64[Sp] = block_caRm0_info;
           R2 = R1;
           call GHC.Event.Manager.new2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRlY_info" {
     block_caRlY_info:
         const _caRlY;
         const 323;
         const 4428111282206;
         const SaRfY_srt+32;
 },
 _caRm0() //  [R1]
         { []
         }
     {offset
       caRm0: // global
           I64[Sp] = block_caRm2_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaRoA; else goto caRm3;
       uaRoA: // global
           call _caRm2(R1) args: 0, res: 0, upd: 0;
       caRm3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRm0_info" {
     block_caRm0_info:
         const _caRm0;
         const 323;
         const 30064771102;
         const SaRfY_srt+32;
 },
 _caRm2() //  [R1]
         { []
         }
     {offset
       caRm2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caRnw; else goto caRnv;
       caRnw: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRnv: // global
           _saQMH::I64 = I64[R1 + 95];
           I64[Hp - 24] = sat_saQMV_info;
           P64[Hp - 16] = R1;
           _saQMg::I64 = I64[Sp + 24];
           I64[Hp - 8] = _saQMg::I64;
           I64[Hp] = _saQMH::I64;
           I64[Sp - 8] = block_caRmB_info;
           R2 = Hp - 23;
           _saQMy::P64 = R1;
           R1 = _saQMg::I64;
           P64[Sp] = _saQMy::P64;
           Sp = Sp - 8;
           call stg_forkOn#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRm2_info" {
     block_caRm2_info:
         const _caRm2;
         const 323;
         const 30064771102;
         const SaRfY_srt+32;
 },
 _caRmB() //  [R1]
         { []
         }
     {offset
       caRmB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caRnz; else goto caRny;
       caRnz: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRny: // global
           I64[Hp - 32] = sat_saQN9_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = sat_saQN3_info;
           I64[Hp] = I64[Sp + 32];
           I64[Sp - 8] = block_caRnt_info;
           R4 = Hp - 30;
           R3 = Hp - 16;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRmB_info" {
     block_caRmB_info:
         const _caRmB;
         const 644;
         const 4294967326;
         const SaRfY_srt+48;
 },
 _caRnt() //  [R1]
         { []
         }
     {offset
       caRnt: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caRnD; else goto caRnC;
       caRnD: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRnC: // global
           I64[Hp - 48] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp - 40] = P64[Sp + 8];
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = Hp - 47;
           P64[Hp - 16] = P64[Sp + 16];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           _saQMf::P64 = P64[Sp + 32];
           _saQNd::I64 = I64[Sp + 40] - I64[Sp + 24];
           call MO_WriteBarrier();
           P64[(_saQMf::P64 + 24) + (_saQNd::I64 << 3)] = Hp - 6;
           I64[_saQMf::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saQMf::P64 + 24) + ((I64[_saQMf::P64 + 8] << 3) + (_saQNd::I64 >> 7))] = 1 :: W8;
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRnt_info" {
     block_caRnt_info:
         const _caRnt;
         const 1285;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.621955205 UTC

[section ""data" . lvl5_raLJt_closure" {
     lvl5_raLJt_closure:
         const lvl5_raLJt_info;
 },
 sat_saQOb_entry() //  [R1]
         { []
         }
     {offset
       caRrb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRrc; else goto caRrd;
       caRrc: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRrd: // global
           I64[Sp - 16] = block_caRr2_info;
           _saQNM::P64 = P64[R1 + 7];
           R1 = _saQNM::P64;
           P64[Sp - 8] = _saQNM::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQOb_info" {
     sat_saQOb_info:
         const sat_saQOb_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caRr2() //  [R1]
         { []
         }
     {offset
       caRr2: // global
           _saQNM::P64 = P64[Sp + 8];
           (_saQO6::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadIOManagerThreadStore(R1);
           if (R1 == _saQO6::I64) goto caRra; else goto caRr9;
       caRra: // global
           R1 = _saQNM::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRr9: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQO6::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRr2_info" {
     block_caRr2_info:
         const _caRr2;
         const 1;
         const 30;
 },
 lvl5_raLJt_entry() //  []
         { []
         }
     {offset
       caRrl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRrm; else goto caRrn;
       caRrm: // global
           R1 = lvl5_raLJt_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRrn: // global
           I64[Sp - 8] = block_caRqL_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl5_raLJt_info" {
     lvl5_raLJt_info:
         const lvl5_raLJt_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caRqL() //  []
         { []
         }
     {offset
       caRqL: // global
           I64[Sp] = block_caRqN_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRqL_info" {
     block_caRqL_info:
         const _caRqL;
         const 0;
         const 30;
 },
 _caRqN() //  [R1]
         { []
         }
     {offset
       caRqN: // global
           I64[Sp - 8] = block_caRqP_info;
           R2 = GHC.Base.Nothing_closure+1;
           _saQNH::P64 = R1;
           R1 = R1;
           P64[Sp] = _saQNH::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRqN_info" {
     block_caRqN_info:
         const _caRqN;
         const 0;
         const 30;
 },
 _caRqP() //  []
         { []
         }
     {offset
       caRqP: // global
           I64[Sp] = block_caRqR_info;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRqP_info" {
     block_caRqP_info:
         const _caRqP;
         const 1;
         const 30;
 },
 _caRqR() //  [R1]
         { []
         }
     {offset
       caRqR: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caRrt; else goto caRrs;
       caRrt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caRrs: // global
           I64[Hp - 24] = GHC.MVar.MVar_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caRqT::P64 = Hp - 23;
           if (R1 == 0) goto caRrk; else goto caRrj;
       caRrk: // global
           I64[Hp - 8] = sat_saQOb_info;
           P64[Hp] = _caRqT::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caRrj: // global
           Hp = Hp - 16;
           I64[Sp] = block_caRru_info;
           R1 = _caRqT::P64;
           P64[Sp + 8] = _caRqT::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRqR_info" {
     block_caRqR_info:
         const _caRqR;
         const 1;
         const 30;
 },
 _caRru() //  [R1]
         { []
         }
     {offset
       caRru: // global
           _caRqT::P64 = P64[Sp + 8];
           (_saQNU::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadIOManagerThreadStore(R1);
           if (R1 == _saQNU::I64) goto caRrD; else goto caRrC;
       caRrD: // global
           R1 = _caRqT::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRrC: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQNU::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRru_info" {
     block_caRru_info:
         const _caRru;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.640205638 UTC

[section ""data" . GHC.Event.Thread.timerManagerThreadVar_closure" {
     GHC.Event.Thread.timerManagerThreadVar_closure:
         const GHC.Event.Thread.timerManagerThreadVar_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.timerManagerThreadVar_entry() //  [R1]
         { []
         }
     {offset
       caRss: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRst; else goto caRsu;
       caRst: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRsu: // global
           (_caRsn::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRsn::I64 == 0) goto caRsp; else goto caRso;
       caRsp: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRso: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRsn::I64;
           I64[Sp - 24] = block_caRsq_info;
           Sp = Sp - 24;
           call lvl5_raLJt_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.timerManagerThreadVar_info" {
     GHC.Event.Thread.timerManagerThreadVar_info:
         const GHC.Event.Thread.timerManagerThreadVar_entry;
         const 0;
         const 21;
 },
 _caRsq() //  [R1]
         { []
         }
     {offset
       caRsq: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRsq_info" {
     block_caRsq_info:
         const _caRsq;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.649719004 UTC

[section ""data" . lvl6_raLJu_closure" {
     lvl6_raLJu_closure:
         const lvl6_raLJu_info;
 },
 sat_saQOM_entry() //  [R1]
         { []
         }
     {offset
       caRtc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRtd; else goto caRte;
       caRtd: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRte: // global
           I64[Sp - 16] = block_caRt3_info;
           _saQOn::P64 = P64[R1 + 7];
           R1 = _saQOn::P64;
           P64[Sp - 8] = _saQOn::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQOM_info" {
     sat_saQOM_info:
         const sat_saQOM_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caRt3() //  [R1]
         { []
         }
     {offset
       caRt3: // global
           _saQOn::P64 = P64[Sp + 8];
           (_saQOH::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadEventManagerStore(R1);
           if (R1 == _saQOH::I64) goto caRtb; else goto caRta;
       caRtb: // global
           R1 = _saQOn::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRta: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQOH::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRt3_info" {
     block_caRt3_info:
         const _caRt3;
         const 1;
         const 30;
 },
 lvl6_raLJu_entry() //  []
         { []
         }
     {offset
       caRtm: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRtn; else goto caRto;
       caRtn: // global
           R1 = lvl6_raLJu_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRto: // global
           I64[Sp - 8] = block_caRsO_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl6_raLJu_info" {
     lvl6_raLJu_info:
         const lvl6_raLJu_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caRsO() //  []
         { []
         }
     {offset
       caRsO: // global
           I64[Sp] = block_caRsQ_info;
           R1 = GHC.Base.Nothing_closure+1;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRsO_info" {
     block_caRsO_info:
         const _caRsO;
         const 0;
         const 30;
 },
 _caRsQ() //  [R1]
         { []
         }
     {offset
       caRsQ: // global
           I64[Sp - 8] = block_caRsS_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRsQ_info" {
     block_caRsQ_info:
         const _caRsQ;
         const 0;
         const 30;
 },
 _caRsS() //  [R1]
         { []
         }
     {offset
       caRsS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caRtt; else goto caRts;
       caRtt: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caRts: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caRsU::P64 = Hp - 23;
           if (R1 == 0) goto caRtl; else goto caRtk;
       caRtl: // global
           I64[Hp - 8] = sat_saQOM_info;
           P64[Hp] = _caRsU::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caRtk: // global
           Hp = Hp - 16;
           I64[Sp] = block_caRtu_info;
           R1 = _caRsU::P64;
           P64[Sp + 8] = _caRsU::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRsS_info" {
     block_caRsS_info:
         const _caRsS;
         const 1;
         const 30;
 },
 _caRtu() //  [R1]
         { []
         }
     {offset
       caRtu: // global
           _caRsU::P64 = P64[Sp + 8];
           (_saQOv::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemTimerThreadEventManagerStore(R1);
           if (R1 == _saQOv::I64) goto caRtD; else goto caRtC;
       caRtD: // global
           R1 = _caRsU::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRtC: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQOv::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRtu_info" {
     block_caRtu_info:
         const _caRtu;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.66377836 UTC

[section ""data" . GHC.Event.Thread.timerManager_closure" {
     GHC.Event.Thread.timerManager_closure:
         const GHC.Event.Thread.timerManager_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.timerManager_entry() //  [R1]
         { []
         }
     {offset
       caRuo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRup; else goto caRuq;
       caRup: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRuq: // global
           (_caRuj::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRuj::I64 == 0) goto caRul; else goto caRuk;
       caRul: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRuk: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRuj::I64;
           I64[Sp - 24] = block_caRum_info;
           Sp = Sp - 24;
           call lvl6_raLJu_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.timerManager_info" {
     GHC.Event.Thread.timerManager_info:
         const GHC.Event.Thread.timerManager_entry;
         const 0;
         const 21;
 },
 _caRum() //  [R1]
         { []
         }
     {offset
       caRum: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRum_info" {
     block_caRum_info:
         const _caRum;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.668678041 UTC

[section ""cstring" . lvl7_raLJv_bytes" {
     lvl7_raLJv_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,50,49,54,58,51,45,49,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.670983768 UTC

[section ""data" . GHC.Event.Thread.getSystemTimerManager2_closure" {
     GHC.Event.Thread.getSystemTimerManager2_closure:
         const GHC.Event.Thread.getSystemTimerManager2_info;
         const 0;
 },
 GHC.Event.Thread.getSystemTimerManager2_entry() //  []
         { []
         }
     {offset
       caRuN: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caRuO; else goto caRuP;
       caRuO: // global
           R1 = GHC.Event.Thread.getSystemTimerManager2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRuP: // global
           I64[Sp - 8] = block_caRuL_info;
           R2 = lvl7_raLJv_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemTimerManager2_info" {
     GHC.Event.Thread.getSystemTimerManager2_info:
         const GHC.Event.Thread.getSystemTimerManager2_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SaRfY_srt+128;
 },
 _caRuL() //  [R1]
         { []
         }
     {offset
       caRuL: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRuL_info" {
     block_caRuL_info:
         const _caRuL;
         const 0;
         const 4294967326;
         const SaRfY_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.676707504 UTC

[section ""data" . GHC.Event.Thread.getSystemTimerManager1_closure" {
     GHC.Event.Thread.getSystemTimerManager1_closure:
         const GHC.Event.Thread.getSystemTimerManager1_info;
         const 0;
 },
 GHC.Event.Thread.getSystemTimerManager1_entry() //  []
         { []
         }
     {offset
       caRv9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caRva; else goto caRvb;
       caRva: // global
           R1 = GHC.Event.Thread.getSystemTimerManager1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRvb: // global
           I64[Sp - 8] = block_caRv6_info;
           R1 = GHC.Event.Thread.timerManager_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRvt; else goto caRv7;
       uaRvt: // global
           call _caRv6(R1) args: 0, res: 0, upd: 0;
       caRv7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemTimerManager1_info" {
     GHC.Event.Thread.getSystemTimerManager1_info:
         const GHC.Event.Thread.getSystemTimerManager1_entry;
         const 0;
         const 30064771086;
         const 4294967299;
         const SaRfY_srt+136;
 },
 _caRv6() //  [R1]
         { []
         }
     {offset
       caRv6: // global
           _saQOX::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caRve_info;
           R1 = _saQOX::P64;
           if (R1 & 7 != 0) goto uaRvs; else goto caRvg;
       uaRvs: // global
           call _caRve(R1) args: 0, res: 0, upd: 0;
       caRvg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRv6_info" {
     block_caRv6_info:
         const _caRv6;
         const 0;
         const 4294967326;
         const SaRfY_srt+136;
 },
 _caRve() //  [R1]
         { []
         }
     {offset
       caRve: // global
           if (R1 & 7 == 1) goto caRvm; else goto caRvq;
       caRvm: // global
           Sp = Sp + 8;
           call GHC.Event.Thread.getSystemTimerManager2_entry() args: 8, res: 0, upd: 8;
       caRvq: // global
           R1 = P64[R1 + 6];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRve_info" {
     block_caRve_info:
         const _caRve;
         const 0;
         const 4294967326;
         const SaRfY_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.68436251 UTC

[section ""data" . GHC.Event.Thread.getSystemTimerManager_closure" {
     GHC.Event.Thread.getSystemTimerManager_closure:
         const GHC.Event.Thread.getSystemTimerManager_info;
         const 0;
 },
 GHC.Event.Thread.getSystemTimerManager_entry() //  []
         { []
         }
     {offset
       caRvR: // global
           call GHC.Event.Thread.getSystemTimerManager1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemTimerManager_info" {
     GHC.Event.Thread.getSystemTimerManager_info:
         const GHC.Event.Thread.getSystemTimerManager_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaRfY_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.69030764 UTC

[section ""data" . lvl8_raLJw_closure" {
     lvl8_raLJw_closure:
         const lvl8_raLJw_info;
 },
 sat_saQPy_entry() //  [R1]
         { []
         }
     {offset
       caRws: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRwt; else goto caRwu;
       caRwt: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRwu: // global
           I64[Sp - 16] = block_caRwj_info;
           _saQP9::P64 = P64[R1 + 7];
           R1 = _saQP9::P64;
           P64[Sp - 8] = _saQP9::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQPy_info" {
     sat_saQPy_info:
         const sat_saQPy_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caRwj() //  [R1]
         { []
         }
     {offset
       caRwj: // global
           _saQP9::P64 = P64[Sp + 8];
           (_saQPt::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadIOManagerThreadStore(R1);
           if (R1 == _saQPt::I64) goto caRwr; else goto caRwq;
       caRwr: // global
           R1 = _saQP9::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRwq: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQPt::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRwj_info" {
     block_caRwj_info:
         const _caRwj;
         const 1;
         const 30;
 },
 lvl8_raLJw_entry() //  []
         { []
         }
     {offset
       caRwC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRwD; else goto caRwE;
       caRwD: // global
           R1 = lvl8_raLJw_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRwE: // global
           I64[Sp - 8] = block_caRw2_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_raLJw_info" {
     lvl8_raLJw_info:
         const lvl8_raLJw_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caRw2() //  []
         { []
         }
     {offset
       caRw2: // global
           I64[Sp] = block_caRw4_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRw2_info" {
     block_caRw2_info:
         const _caRw2;
         const 0;
         const 30;
 },
 _caRw4() //  [R1]
         { []
         }
     {offset
       caRw4: // global
           I64[Sp - 8] = block_caRw6_info;
           R2 = GHC.Tuple.()_closure+1;
           _saQP4::P64 = R1;
           R1 = R1;
           P64[Sp] = _saQP4::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRw4_info" {
     block_caRw4_info:
         const _caRw4;
         const 0;
         const 30;
 },
 _caRw6() //  []
         { []
         }
     {offset
       caRw6: // global
           I64[Sp] = block_caRw8_info;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRw6_info" {
     block_caRw6_info:
         const _caRw6;
         const 1;
         const 30;
 },
 _caRw8() //  [R1]
         { []
         }
     {offset
       caRw8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caRwK; else goto caRwJ;
       caRwK: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caRwJ: // global
           I64[Hp - 24] = GHC.MVar.MVar_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caRwa::P64 = Hp - 23;
           if (R1 == 0) goto caRwB; else goto caRwA;
       caRwB: // global
           I64[Hp - 8] = sat_saQPy_info;
           P64[Hp] = _caRwa::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caRwA: // global
           Hp = Hp - 16;
           I64[Sp] = block_caRwL_info;
           R1 = _caRwa::P64;
           P64[Sp + 8] = _caRwa::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRw8_info" {
     block_caRw8_info:
         const _caRw8;
         const 1;
         const 30;
 },
 _caRwL() //  [R1]
         { []
         }
     {offset
       caRwL: // global
           _caRwa::P64 = P64[Sp + 8];
           (_saQPh::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadIOManagerThreadStore(R1);
           if (R1 == _saQPh::I64) goto caRwU; else goto caRwT;
       caRwU: // global
           R1 = _caRwa::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRwT: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQPh::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRwL_info" {
     block_caRwL_info:
         const _caRwL;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.705567295 UTC

[section ""data" . GHC.Event.Thread.ioManagerLock_closure" {
     GHC.Event.Thread.ioManagerLock_closure:
         const GHC.Event.Thread.ioManagerLock_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.ioManagerLock_entry() //  [R1]
         { []
         }
     {offset
       caRxJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRxK; else goto caRxL;
       caRxK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRxL: // global
           (_caRxE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRxE::I64 == 0) goto caRxG; else goto caRxF;
       caRxG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRxF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRxE::I64;
           I64[Sp - 24] = block_caRxH_info;
           Sp = Sp - 24;
           call lvl8_raLJw_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerLock_info" {
     GHC.Event.Thread.ioManagerLock_info:
         const GHC.Event.Thread.ioManagerLock_entry;
         const 0;
         const 21;
 },
 _caRxH() //  [R1]
         { []
         }
     {offset
       caRxH: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRxH_info" {
     block_caRxH_info:
         const _caRxH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.714069789 UTC

[section ""data" . lvl9_raLJx_closure" {
     lvl9_raLJx_closure:
         const lvl9_raLJx_info;
         const 0;
 },
 sat_saQQl_entry() //  [R1]
         { []
         }
     {offset
       caRyI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRyJ; else goto caRyK;
       caRyJ: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRyK: // global
           I64[Sp - 16] = block_caRyz_info;
           _saQPW::P64 = P64[R1 + 7];
           R1 = _saQPW::P64;
           P64[Sp - 8] = _saQPW::P64;
           Sp = Sp - 16;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQQl_info" {
     sat_saQQl_info:
         const sat_saQQl_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caRyz() //  [R1]
         { []
         }
     {offset
       caRyz: // global
           _saQPW::P64 = P64[Sp + 8];
           (_saQQg::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadEventManagerStore(R1);
           if (R1 == _saQQg::I64) goto caRyH; else goto caRyG;
       caRyH: // global
           R1 = _saQPW::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRyG: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQQg::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRyz_info" {
     block_caRyz_info:
         const _caRyz;
         const 1;
         const 30;
 },
 lvl9_raLJx_entry() //  []
         { []
         }
     {offset
       caRyP: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRyQ; else goto caRyR;
       caRyQ: // global
           R1 = lvl9_raLJx_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRyR: // global
           I64[Sp - 8] = block_caRy5_info;
           Sp = Sp - 8;
           call stg_noDuplicate#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl9_raLJx_info" {
     lvl9_raLJx_info:
         const lvl9_raLJx_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SaRfY_srt+160;
 },
 _caRy5() //  []
         { []
         }
     {offset
       caRy5: // global
           _saQPH::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]) - 1;
           if (%MO_S_Gt_W64(0, _saQPH::I64)) goto caRzk; else goto caRzl;
       caRzk: // global
           _saQPJ::I64 = 0;
           goto saQPI;
       caRzl: // global
           _saQPJ::I64 = _saQPH::I64 + 1;
           goto saQPI;
       saQPI: // global
           if (%MO_S_Ge_W64(_saQPJ::I64, 0)) goto caRyV; else goto caRzg;
       caRyV: // global
           I64[Sp - 16] = block_caRyi_info;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _saQPJ::I64;
           I64[Sp - 8] = _saQPJ::I64;
           I64[Sp] = _saQPH::I64;
           Sp = Sp - 16;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       caRzg: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRy5_info" {
     block_caRy5_info:
         const _caRy5;
         const 0;
         const 4294967326;
         const SaRfY_srt+160;
 },
 _caRyi() //  [R1]
         { []
         }
     {offset
       caRyi: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caRyY; else goto caRyX;
       caRyY: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRyX: // global
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = I64[Sp + 16];
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = lvl1_raLJo_closure+1;
           P64[Hp - 16] = Hp - 47;
           P64[Hp - 8] = R1;
           I64[Hp] = I64[Sp + 8];
           I64[Sp + 16] = block_caRym_info;
           R1 = Hp - 31;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRyi_info" {
     block_caRyi_info:
         const _caRyi;
         const 194;
         const 30;
 },
 _caRym() //  [R1]
         { []
         }
     {offset
       caRym: // global
           I64[Sp - 8] = block_caRyo_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRym_info" {
     block_caRym_info:
         const _caRym;
         const 0;
         const 30;
 },
 _caRyo() //  [R1]
         { []
         }
     {offset
       caRyo: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caRz2; else goto caRz1;
       caRz2: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caRz1: // global
           I64[Hp - 24] = GHC.STRef.STRef_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           _caRyq::P64 = Hp - 23;
           if (R1 == 0) goto caRzf; else goto caRz5;
       caRzf: // global
           I64[Hp - 8] = sat_saQQl_info;
           P64[Hp] = _caRyq::P64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caRz5: // global
           Hp = Hp - 16;
           I64[Sp] = block_caRz3_info;
           R1 = _caRyq::P64;
           P64[Sp + 8] = _caRyq::P64;
           call stg_makeStablePtr#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRyo_info" {
     block_caRyo_info:
         const _caRyo;
         const 1;
         const 30;
 },
 _caRz3() //  [R1]
         { []
         }
     {offset
       caRz3: // global
           _caRyq::P64 = P64[Sp + 8];
           (_saQQ4::I64) = call "ccall" arg hints:  [PtrHint]  result hints:  [PtrHint] getOrSetSystemEventThreadEventManagerStore(R1);
           if (R1 == _saQQ4::I64) goto caRze; else goto caRzd;
       caRze: // global
           R1 = _caRyq::P64;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRzd: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] hs_free_stable_ptr(R1);
           R1 = _saQQ4::I64;
           Sp = Sp + 16;
           call stg_deRefStablePtr#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRz3_info" {
     block_caRz3_info:
         const _caRz3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.731091411 UTC

[section ""data" . GHC.Event.Thread.eventManager_closure" {
     GHC.Event.Thread.eventManager_closure:
         const GHC.Event.Thread.eventManager_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.eventManager_entry() //  [R1]
         { []
         }
     {offset
       caRAm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRAn; else goto caRAo;
       caRAn: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRAo: // global
           (_caRAh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRAh::I64 == 0) goto caRAj; else goto caRAi;
       caRAj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRAi: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRAh::I64;
           I64[Sp - 24] = block_caRAk_info;
           Sp = Sp - 24;
           call lvl9_raLJx_entry() args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.eventManager_info" {
     GHC.Event.Thread.eventManager_info:
         const GHC.Event.Thread.eventManager_entry;
         const 0;
         const 4294967317;
         const SaRfY_srt+168;
 },
 _caRAk() //  [R1]
         { []
         }
     {offset
       caRAk: // global
           R1 = R1 & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRAk_info" {
     block_caRAk_info:
         const _caRAk;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.735948251 UTC

[section ""cstring" . GHC.Event.Thread.ensureIOManagerIsRunning5_bytes" {
     GHC.Event.Thread.ensureIOManagerIsRunning5_bytes:
         I8[] [84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.738295245 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning4_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning4_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning4_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning4_entry() //  [R1]
         { []
         }
     {offset
       caRAL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRAM; else goto caRAN;
       caRAM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRAN: // global
           (_caRAI::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRAI::I64 == 0) goto caRAK; else goto caRAJ;
       caRAK: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRAJ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRAI::I64;
           R2 = GHC.Event.Thread.ensureIOManagerIsRunning5_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning4_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning4_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning4_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.746957817 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning3_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning3_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning3_info;
         const 0;
 },
 sat_saQQT_entry() //  [R1]
         { []
         }
     {offset
       caRBx: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caRBy; else goto caRBz;
       caRBy: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRBz: // global
           R6 = I64[R1 + 55];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           I64[Sp - 32] = I64[R1 + 63];
           I64[Sp - 24] = I64[R1 + 71];
           P64[Sp - 16] = P64[R1 + 39];
           P64[Sp - 8] = P64[R1 + 47];
           Sp = Sp - 32;
           call GHC.Event.TimerManager.$wloop_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQQT_info" {
     sat_saQQT_info:
         const sat_saQQT_entry;
         const 12884901894;
         const 4294967304;
         const 4294967299;
         const SaRfY_srt+176;
 },
 sat_saQQU_entry() //  [R1]
         { []
         }
     {offset
       caRBA: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caRBE; else goto caRBD;
       caRBE: // global
           HpAlloc = 80;
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRBD: // global
           _saQQA::P64 = P64[R1 + 7];
           _saQQB::P64 = P64[R1 + 15];
           _saQQC::P64 = P64[R1 + 23];
           _saQQD::P64 = P64[R1 + 31];
           _saQQH::P64 = P64[R1 + 39];
           _saQQI::P64 = P64[R1 + 47];
           _saQQE::I64 = I64[R1 + 55];
           _saQQF::I64 = I64[R1 + 63];
           _saQQG::I64 = I64[R1 + 71];
           I64[Hp - 72] = sat_saQQT_info;
           P64[Hp - 64] = _saQQA::P64;
           P64[Hp - 56] = _saQQB::P64;
           P64[Hp - 48] = _saQQC::P64;
           P64[Hp - 40] = _saQQD::P64;
           P64[Hp - 32] = _saQQH::P64;
           P64[Hp - 24] = _saQQI::P64;
           I64[Hp - 16] = _saQQE::I64;
           I64[Hp - 8] = _saQQF::I64;
           I64[Hp] = _saQQG::I64;
           R2 = GHC.Conc.Sync.forkIO2_closure+2;
           R1 = Hp - 71;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQQU_info" {
     sat_saQQU_info:
         const sat_saQQU_entry;
         const 12884901894;
         const 562954248388616;
         const 4294967299;
         const SaRfY_srt+40;
 },
 sat_saQR3_entry() //  [R1, R2]
         { []
         }
     {offset
       caRBP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRBT; else goto caRBU;
       caRBT: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caRBU: // global
           I64[Sp - 16] = block_caRBM_info;
           _saQQX::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saQQX::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRBY; else goto caRBN;
       uaRBY: // global
           call _caRBM(R1) args: 0, res: 0, upd: 0;
       caRBN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQR3_info" {
     sat_saQR3_info:
         const sat_saQR3_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caRBM() //  [R1]
         { []
         }
     {offset
       caRBM: // global
           _saQQX::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caRBS_info;
           R2 = I64[R1 + 7];
           R1 = _saQQX::P64;
           Sp = Sp + 8;
           call stg_labelThread#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRBM_info" {
     block_caRBM_info:
         const _caRBM;
         const 1;
         const 30;
 },
 _caRBS() //  []
         { []
         }
     {offset
       caRBS: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRBS_info" {
     block_caRBS_info:
         const _caRBS;
         const 0;
         const 30;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning3_entry() //  []
         { []
         }
     {offset
       caRBZ: // global
           if ((Sp + -88) < SpLim) (likely: False) goto caRC4; else goto caRC5;
       caRC4: // global
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning3_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRC5: // global
           I64[Sp - 8] = block_caRB0_info;
           Sp = Sp - 8;
           call GHC.Event.Poll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning3_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning3_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning3_entry;
         const 0;
         const 17486645813051406;
         const 4294967299;
         const SaRfY_srt+40;
 },
 _caRB0() //  [R1]
         { []
         }
     {offset
       caRB0: // global
           I64[Sp] = block_caRB2_info;
           R2 = R1;
           call GHC.Event.TimerManager.new2_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRB0_info" {
     block_caRB0_info:
         const _caRB0;
         const 0;
         const 11857146278838302;
         const SaRfY_srt+40;
 },
 _caRB2() //  [R1]
         { []
         }
     {offset
       caRB2: // global
           I64[Sp] = block_caRB4_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaRCi; else goto caRB5;
       uaRCi: // global
           call _caRB4(R1) args: 0, res: 0, upd: 0;
       caRB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRB2_info" {
     block_caRB2_info:
         const _caRB2;
         const 0;
         const 9605346465153054;
         const SaRfY_srt+40;
 },
 _caRB4() //  [R1]
         { []
         }
     {offset
       caRB4: // global
           _saQQA::P64 = P64[R1 + 7];
           _saQQB::P64 = P64[R1 + 15];
           _saQQC::P64 = P64[R1 + 23];
           _saQQD::P64 = P64[R1 + 31];
           _saQQH::P64 = P64[R1 + 39];
           _saQQI::P64 = P64[R1 + 47];
           _saQQE::I64 = I64[R1 + 55];
           _saQQF::I64 = I64[R1 + 63];
           _saQQG::I64 = I64[R1 + 71];
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setTimerManagerControlFd(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saQQF::I64)));
           I64[Sp - 80] = block_caRBe_info;
           _saQQz::P64 = R1;
           R1 = GHC.Event.Thread.timerManager_closure;
           P64[Sp - 72] = _saQQA::P64;
           P64[Sp - 64] = _saQQB::P64;
           P64[Sp - 56] = _saQQC::P64;
           P64[Sp - 48] = _saQQD::P64;
           I64[Sp - 40] = _saQQE::I64;
           I64[Sp - 32] = _saQQF::I64;
           I64[Sp - 24] = _saQQG::I64;
           P64[Sp - 16] = _saQQH::P64;
           P64[Sp - 8] = _saQQI::P64;
           P64[Sp] = _saQQz::P64;
           Sp = Sp - 80;
           if (R1 & 7 != 0) goto uaRCj; else goto caRBf;
       uaRCj: // global
           call _caRBe(R1) args: 0, res: 0, upd: 0;
       caRBf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRB4_info" {
     block_caRB4_info:
         const _caRB4;
         const 0;
         const 9605346465153054;
         const SaRfY_srt+40;
 },
 _caRBe() //  [R1]
         { []
         }
     {offset
       caRBe: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caRCb; else goto caRCa;
       caRCb: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRCa: // global
           _saQQO::P64 = P64[R1 + 7];
           I64[Hp - 88] = GHC.Base.Just_con_info;
           P64[Hp - 80] = P64[Sp + 80];
           _saQQA::P64 = P64[Sp + 8];
           _saQQB::P64 = P64[Sp + 16];
           _saQQC::P64 = P64[Sp + 24];
           _saQQD::P64 = P64[Sp + 32];
           _saQQE::I64 = I64[Sp + 40];
           _saQQF::I64 = I64[Sp + 48];
           _saQQG::I64 = I64[Sp + 56];
           _saQQH::P64 = P64[Sp + 64];
           _saQQI::P64 = P64[Sp + 72];
           call MO_WriteBarrier();
           P64[_saQQO::P64 + 8] = Hp - 86;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saQQO::P64);
           I64[Hp - 72] = sat_saQQU_info;
           P64[Hp - 64] = _saQQA::P64;
           P64[Hp - 56] = _saQQB::P64;
           P64[Hp - 48] = _saQQC::P64;
           P64[Hp - 40] = _saQQD::P64;
           P64[Hp - 32] = _saQQH::P64;
           P64[Hp - 24] = _saQQI::P64;
           I64[Hp - 16] = _saQQE::I64;
           I64[Hp - 8] = _saQQF::I64;
           I64[Hp] = _saQQG::I64;
           I64[Sp + 80] = block_caRBF_info;
           R1 = Hp - 71;
           Sp = Sp + 80;
           call stg_fork#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRBe_info" {
     block_caRBe_info:
         const _caRBe;
         const 7178;
         const 9570162093064222;
         const SaRfY_srt+40;
 },
 _caRBF() //  [R1]
         { []
         }
     {offset
       caRBF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRCe; else goto caRCd;
       caRCe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRCd: // global
           I64[Hp - 8] = sat_saQR3_info;
           P64[Hp] = R1;
           I64[Sp - 8] = block_caRC0_info;
           R4 = Hp - 6;
           R3 = GHC.Event.Thread.ensureIOManagerIsRunning4_closure;
           R2 = GHC.IO.Encoding.UTF8.utf8_closure;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Foreign.charIsRepresentable3_entry(R4,
                                                       R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRBF_info" {
     block_caRBF_info:
         const _caRBF;
         const 0;
         const 4503603922337822;
         const SaRfY_srt+48;
 },
 _caRC0() //  [R1]
         { []
         }
     {offset
       caRC0: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caRCh; else goto caRCg;
       caRCh: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRCg: // global
           I64[Hp - 24] = GHC.Conc.Sync.ThreadId_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 23;
           R1 = Hp - 6;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRC0_info" {
     block_caRC0_info:
         const _caRC0;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.781304521 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning2_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning2_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning2_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning2_entry() //  [R2]
         { []
         }
     {offset
       caRDD: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caRDE; else goto caRDF;
       caRDE: // global
           R2 = R2;
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caRDF: // global
           I64[Sp - 8] = block_caRDw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRFq; else goto caRDx;
       uaRFq: // global
           call _caRDw(R1) args: 0, res: 0, upd: 0;
       caRDx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning2_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning2_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning2_entry;
         const 0;
         const 2753074036750;
         const 8589934597;
         const SaRfY_srt+144;
 },
 _caRDw() //  [R1]
         { []
         }
     {offset
       caRDw: // global
           if (R1 & 7 == 1) goto uaRFl; else goto caRDB;
       uaRFl: // global
           Sp = Sp + 8;
           call _caREi() args: 0, res: 0, upd: 0;
       caRDB: // global
           I64[Sp - 8] = block_caRDL_info;
           _saQRb::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _saQRb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRFo; else goto caRDN;
       uaRFo: // global
           call _caRDL(R1) args: 0, res: 0, upd: 0;
       caRDN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRDw_info" {
     block_caRDw_info:
         const _caRDw;
         const 0;
         const 554050781214;
         const SaRfY_srt+144;
 },
 _caRDL() //  [R1]
         { []
         }
     {offset
       caRDL: // global
           I64[Sp] = block_caRDR_info;
           R1 = P64[R1 + 7];
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRDL_info" {
     block_caRDL_info:
         const _caRDL;
         const 1;
         const 554050781214;
         const SaRfY_srt+144;
 },
 _caRDR() //  [R1]
         { []
         }
     {offset
       caRDR: // global
           if (R1 == 16) goto uaRFm; else goto uaRFk;
       uaRFm: // global
           Sp = Sp + 16;
           call _caREi() args: 0, res: 0, upd: 0;
       uaRFk: // global
           if (R1 == 17) goto caRE5; else goto caRDZ;
       caRE5: // global
           I64[Sp + 8] = block_caRE4_info;
           R1 = GHC.Event.Thread.timerManager_closure;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaRFr; else goto caRE6;
       uaRFr: // global
           call _caRE4(R1) args: 0, res: 0, upd: 0;
       caRE6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caRDZ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRDR_info" {
     block_caRDR_info:
         const _caRDR;
         const 1;
         const 554050781214;
         const SaRfY_srt+144;
 },
 _caRE4() //  [R1]
         { []
         }
     {offset
       caRE4: // global
           _saQRp::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caREa_info;
           R1 = _saQRp::P64;
           if (R1 & 7 != 0) goto uaRFt; else goto caREc;
       uaRFt: // global
           call _caREa(R1) args: 0, res: 0, upd: 0;
       caREc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRE4_info" {
     block_caRE4_info:
         const _caRE4;
         const 0;
         const 4294967326;
         const SaRfY_srt+200;
 },
 _caREa() //  [R1]
         { []
         }
     {offset
       caREa: // global
           if (R1 & 7 == 1) goto uaRFn; else goto caREu;
       uaRFn: // global
           Sp = Sp + 8;
           call _caREi() args: 0, res: 0, upd: 0;
       caREu: // global
           _saQRr::P64 = P64[R1 + 6];
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setTimerManagerControlFd((-1));
           I64[Sp] = block_caREn_info;
           R1 = _saQRr::P64;
           if (R1 & 7 != 0) goto uaRFu; else goto caREo;
       uaRFu: // global
           call _caREn(R1) args: 0, res: 0, upd: 0;
       caREo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caREa_info" {
     block_caREa_info:
         const _caREa;
         const 0;
         const 4294967326;
         const SaRfY_srt+200;
 },
 _caREi() //  []
         { []
         }
     {offset
       caREi: // global
           call GHC.Event.Thread.ensureIOManagerIsRunning3_entry() args: 8, res: 0, upd: 8;
     }
 },
 _caREn() //  [R1]
         { []
         }
     {offset
       caREn: // global
           I64[Sp - 48] = block_caREs_info;
           _saQRy::P64 = P64[R1 + 23];
           _saQRD::P64 = P64[R1 + 39];
           _saQRE::P64 = P64[R1 + 47];
           _saQRA::I64 = I64[R1 + 55];
           _saQRB::I64 = I64[R1 + 63];
           _saQRC::I64 = I64[R1 + 71];
           R1 = P64[R1 + 7];
           I64[Sp - 40] = _saQRA::I64;
           I64[Sp - 32] = _saQRB::I64;
           I64[Sp - 24] = _saQRC::I64;
           P64[Sp - 16] = _saQRD::P64;
           P64[Sp - 8] = _saQRE::P64;
           P64[Sp] = _saQRy::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uaRFw; else goto caREw;
       uaRFw: // global
           call _caREs(R1) args: 0, res: 0, upd: 0;
       caREw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caREn_info" {
     block_caREn_info:
         const _caREn;
         const 0;
         const 4294967326;
         const SaRfY_srt+200;
 },
 _caREs() //  [R1]
         { []
         }
     {offset
       caREs: // global
           _saQRy::P64 = P64[Sp + 48];
           _saQRG::P64 = P64[R1 + 7];
           _saQRK::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saQRy::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saQRy::P64);
           I64[Sp] = block_caRED_info;
           R2 = _saQRG::P64;
           R1 = _saQRK::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caREs_info" {
     block_caREs_info:
         const _caREs;
         const 454;
         const 4294967326;
         const SaRfY_srt+200;
 },
 _caRED() //  []
         { []
         }
     {offset
       caRED: // global
           I64[Sp] = block_caREF_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRED_info" {
     block_caRED_info:
         const _caRED;
         const 2502;
         const 4294967326;
         const SaRfY_srt+200;
 },
 _caREF() //  []
         { []
         }
     {offset
       caREF: // global
           _saQRB::I64 = I64[Sp + 16];
           _saQRD::P64 = P64[Sp + 32];
           (_saQRW::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saQS1::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saQRB::I64)));
           I64[Sp + 16] = block_caREU_info;
           R1 = _saQRD::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaRFx; else goto caREV;
       uaRFx: // global
           call _caREU(R1) args: 0, res: 0, upd: 0;
       caREV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caREF_info" {
     block_caREF_info:
         const _caREF;
         const 3526;
         const 4294967326;
         const SaRfY_srt+200;
 },
 _caREU() //  [R1]
         { []
         }
     {offset
       caREU: // global
           _saQRC::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caRF1; else goto caRF5;
       caRF1: // global
           (_saQS7::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saQRC::I64)));
           Sp = Sp + 40;
           call GHC.Event.Thread.ensureIOManagerIsRunning3_entry() args: 8, res: 0, upd: 8;
       caRF5: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saQSf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saQRC::I64)));
           Sp = Sp + 40;
           call GHC.Event.Thread.ensureIOManagerIsRunning3_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caREU_info" {
     block_caREU_info:
         const _caREU;
         const 964;
         const 4294967326;
         const SaRfY_srt+200;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.806951585 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning6_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning6_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning6_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning6_entry() //  [R2]
         { []
         }
     {offset
       caRGK: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caRGY; else goto caRGZ;
       caRGY: // global
           R2 = R2;
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caRGZ: // global
           I64[Sp - 8] = block_caRGH_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRI8; else goto caRGI;
       uaRI8: // global
           call _caRGH(R1) args: 0, res: 0, upd: 0;
       caRGI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning6_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning6_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning6_entry;
         const 0;
         const 246294899589134;
         const 8589934597;
         const SaRfY_srt+120;
 },
 _caRGH() //  [R1]
         { []
         }
     {offset
       caRGH: // global
           _saQSm::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caRGN_info;
           R1 = _saQSm::P64;
           if (R1 & 7 != 0) goto uaRI7; else goto caRGO;
       uaRI7: // global
           call _caRGN(R1) args: 0, res: 0, upd: 0;
       caRGO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRGH_info" {
     block_caRGH_info:
         const _caRGH;
         const 0;
         const 70373039144990;
         const SaRfY_srt+120;
 },
 _caRGN() //  [R1]
         { []
         }
     {offset
       caRGN: // global
           I64[Sp - 16] = block_caRGS_info;
           _saQSo::P64 = P64[R1 + 7];
           _saQSr::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saQSr::P64;
           P64[Sp] = _saQSo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRI9; else goto caRGT;
       uaRI9: // global
           call _caRGS(R1) args: 0, res: 0, upd: 0;
       caRGT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRGN_info" {
     block_caRGN_info:
         const _caRGN;
         const 0;
         const 70373039144990;
         const SaRfY_srt+120;
 },
 _caRGS() //  [R1]
         { []
         }
     {offset
       caRGS: // global
           I64[Sp] = block_caRGX_info;
           _saQSt::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saQSt::I64;
           if (R1 & 7 != 0) goto uaRIa; else goto caRH3;
       uaRIa: // global
           call _caRGX(R1) args: 0, res: 0, upd: 0;
       caRH3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRGS_info" {
     block_caRGS_info:
         const _caRGS;
         const 2;
         const 70373039144990;
         const SaRfY_srt+120;
 },
 _caRGX() //  [R1]
         { []
         }
     {offset
       caRGX: // global
           if (%MO_S_Le_W64(0, I64[Sp + 16])) goto caRHE; else goto caRHH;
       caRHE: // global
           I64[Sp - 8] = 0;
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 8;
           call _caRHs() args: 0, res: 0, upd: 0;
       caRHH: // global
           I64[Sp + 8] = block_caRHG_info;
           R1 = GHC.Event.Thread.numEnabledEventManagers_closure;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaRIb; else goto caRHI;
       uaRIb: // global
           call _caRHG(R1) args: 0, res: 0, upd: 0;
       caRHI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRGX_info" {
     block_caRGX_info:
         const _caRGX;
         const 130;
         const 70373039144990;
         const SaRfY_srt+120;
 },
 _caRHs() //  []
         { []
         }
     {offset
       caRHs: // global
           I64[Sp - 8] = block_caRHu_info;
           R5 = I64[Sp];
           R4 = P64[Sp + 16];
           R3 = I64[Sp + 24];
           R2 = I64[Sp + 8];
           Sp = Sp - 8;
           call GHC.Event.Thread.$wstartIOManagerThread_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _caRHu() //  []
         { []
         }
     {offset
       caRHu: // global
           _saQSF::I64 = I64[Sp + 8];
           if (_saQSF::I64 == I64[Sp + 32]) goto caRHC; else goto caRHB;
       caRHC: // global
           I64[Sp + 24] = block_caRHg_info;
           R1 = GHC.Event.Thread.numEnabledEventManagers_closure;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaRId; else goto caRHi;
       uaRId: // global
           call _caRHg(R1) args: 0, res: 0, upd: 0;
       caRHi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caRHB: // global
           I64[Sp + 8] = _saQSF::I64 + 1;
           Sp = Sp + 8;
           call _caRHs() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRHu_info" {
     block_caRHu_info:
         const _caRHu;
         const 708;
         const 70373039144990;
         const SaRfY_srt+120;
 },
 _caRHg() //  [R1]
         { []
         }
     {offset
       caRHg: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRHo; else goto caRHn;
       caRHo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRHn: // global
           _saQSA::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] + 1;
           call MO_WriteBarrier();
           P64[_saQSA::P64 + 8] = Hp - 7;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saQSA::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRHg_info" {
     block_caRHg_info:
         const _caRHg;
         const 65;
         const 30;
 },
 _caRHG() //  [R1]
         { []
         }
     {offset
       caRHG: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRHO; else goto caRHN;
       caRHO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRHN: // global
           _saQSN::P64 = P64[R1 + 7];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] + 1;
           call MO_WriteBarrier();
           P64[_saQSN::P64 + 8] = Hp - 7;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saQSN::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRHG_info" {
     block_caRHG_info:
         const _caRHG;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.824227147 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning1_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning1_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning1_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning1_entry() //  []
         { []
         }
     {offset
       caRJl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caRJm; else goto caRJn;
       caRJm: // global
           R1 = GHC.Event.Thread.ensureIOManagerIsRunning1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRJn: // global
           (_saQSV::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] rtsSupportsBoundThreads();
           if (_saQSV::I64 == 0) goto caRJk; else goto caRJj;
       caRJk: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caRJj: // global
           I64[Sp - 8] = block_caRJp_info;
           R1 = GHC.Event.Thread.ioManagerLock_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRJE; else goto caRJq;
       uaRJE: // global
           call _caRJp(R1) args: 0, res: 0, upd: 0;
       caRJq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning1_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning1_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning1_entry;
         const 0;
         const 519691042830;
         const 4294967299;
         const SaRfY_srt+216;
 },
 _caRJp() //  [R1]
         { []
         }
     {offset
       caRJp: // global
           I64[Sp] = block_caRJu_info;
           R3 = GHC.Event.Thread.ensureIOManagerIsRunning6_closure+2;
           R2 = P64[R1 + 7];
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRJp_info" {
     block_caRJp_info:
         const _caRJp;
         const 0;
         const 176093659166;
         const SaRfY_srt+216;
 },
 _caRJu() //  []
         { []
         }
     {offset
       caRJu: // global
           I64[Sp] = block_caRJw_info;
           R1 = GHC.Event.Thread.timerManagerThreadVar_closure;
           if (R1 & 7 != 0) goto uaRJF; else goto caRJz;
       uaRJF: // global
           call _caRJw(R1) args: 0, res: 0, upd: 0;
       caRJz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRJu_info" {
     block_caRJu_info:
         const _caRJu;
         const 0;
         const 141733920798;
         const SaRfY_srt+216;
 },
 _caRJw() //  [R1]
         { []
         }
     {offset
       caRJw: // global
           R3 = GHC.Event.Thread.ensureIOManagerIsRunning2_closure+2;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wmodifyMVar__entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRJw_info" {
     block_caRJw_info:
         const _caRJw;
         const 0;
         const 4294967326;
         const SaRfY_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.833921953 UTC

[section ""data" . GHC.Event.Thread.ensureIOManagerIsRunning_closure" {
     GHC.Event.Thread.ensureIOManagerIsRunning_closure:
         const GHC.Event.Thread.ensureIOManagerIsRunning_info;
         const 0;
 },
 GHC.Event.Thread.ensureIOManagerIsRunning_entry() //  []
         { []
         }
     {offset
       caRK5: // global
           call GHC.Event.Thread.ensureIOManagerIsRunning1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ensureIOManagerIsRunning_info" {
     GHC.Event.Thread.ensureIOManagerIsRunning_info:
         const GHC.Event.Thread.ensureIOManagerIsRunning_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaRfY_srt+264;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.83707556 UTC

[section ""cstring" . lvl10_raLJy_bytes" {
     lvl10_raLJy_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,51,53,51,58,49,53,45,50,54]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.83963152 UTC

[section ""data" . lvl11_raLJz_closure" {
     lvl11_raLJz_closure:
         const lvl11_raLJz_info;
         const 0;
 },
 lvl11_raLJz_entry() //  []
         { []
         }
     {offset
       caRKj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caRKk; else goto caRKl;
       caRKk: // global
           R1 = lvl11_raLJz_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRKl: // global
           I64[Sp - 8] = block_caRKh_info;
           R2 = lvl10_raLJy_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl11_raLJz_info" {
     lvl11_raLJz_info:
         const lvl11_raLJz_entry;
         const 0;
         const 1125904201809934;
         const 4294967299;
         const SaRfY_srt+128;
 },
 _caRKh() //  [R1]
         { []
         }
     {offset
       caRKh: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRKh_info" {
     block_caRKh_info:
         const _caRKh;
         const 0;
         const 4294967326;
         const SaRfY_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.844853304 UTC

[section ""cstring" . lvl12_raLJA_bytes" {
     lvl12_raLJA_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,51,51,57,58,49,55,45,51,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.847076905 UTC

[section ""data" . lvl13_raLJB_closure" {
     lvl13_raLJB_closure:
         const lvl13_raLJB_info;
         const 0;
 },
 lvl13_raLJB_entry() //  []
         { []
         }
     {offset
       caRKF: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caRKG; else goto caRKH;
       caRKG: // global
           R1 = lvl13_raLJB_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRKH: // global
           I64[Sp - 8] = block_caRKD_info;
           R2 = lvl12_raLJA_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl13_raLJB_info" {
     lvl13_raLJB_info:
         const lvl13_raLJB_entry;
         const 0;
         const 2251804108652558;
         const 4294967299;
         const SaRfY_srt+128;
 },
 _caRKD() //  [R1]
         { []
         }
     {offset
       caRKD: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRKD_info" {
     block_caRKD_info:
         const _caRKD;
         const 0;
         const 4294967326;
         const SaRfY_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.852137194 UTC

[section ""data" . lvl14_raLJC_closure" {
     lvl14_raLJC_closure:
         const lvl14_raLJC_info;
         const 0;
 },
 lvl14_raLJC_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caRKY: // global
           R6 = lvl4_raLJs_closure;
           R5 = R4;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl14_raLJC_info" {
     lvl14_raLJC_info:
         const lvl14_raLJC_entry;
         const 0;
         const 21474836494;
         const 12884901911;
         const SaRfY_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.856012266 UTC

[section ""data" . lvl15_raLJD_closure" {
     lvl15_raLJD_closure:
         const lvl15_raLJD_info;
         const 0;
 },
 lvl15_raLJD_entry() //  [R2, R3]
         { []
         }
     {offset
       caRL9: // global
           R6 = lvl4_raLJs_closure;
           R5 = R3;
           R4 = R2;
           R3 = lvl1_raLJo_closure+1;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_raLJD_info" {
     lvl15_raLJD_info:
         const lvl15_raLJD_entry;
         const 0;
         const 21474836494;
         const 8589934607;
         const SaRfY_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.873086796 UTC

[section ""data" . GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure" {
     GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure:
         const GHC.Event.Thread.$wioManagerCapabilitiesChanged_info;
         const 0;
 },
 GHC.Event.Thread.$wioManagerCapabilitiesChanged_entry() //  []
         { []
         }
     {offset
       caRN2: // global
           if ((Sp + -136) < SpLim) (likely: False) goto caRN3; else goto caRN4;
       caRN3: // global
           R1 = GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRN4: // global
           _saQTg::I64 = %MO_SS_Conv_W32_W64(I32[enabled_capabilities]);
           I64[Sp - 16] = block_caRLk_info;
           R1 = GHC.Event.Thread.numEnabledEventManagers_closure;
           I64[Sp - 8] = _saQTg::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRRQ; else goto caRLl;
       uaRRQ: // global
           call _caRLk(R1) args: 0, res: 0, upd: 0;
       caRLl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wioManagerCapabilitiesChanged_info" {
     GHC.Event.Thread.$wioManagerCapabilitiesChanged_info:
         const GHC.Event.Thread.$wioManagerCapabilitiesChanged_entry;
         const 0;
         const 4474335305058484238;
         const 4294967299;
         const SaRfY_srt+72;
 },
 _caRLk() //  [R1]
         { []
         }
     {offset
       caRLk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRN7; else goto caRN6;
       caRN7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRN6: // global
           _saQTi::P64 = P64[R1 + 7];
           _saQTl::P64 = P64[_saQTi::P64 + 8];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           call MO_WriteBarrier();
           P64[_saQTi::P64 + 8] = Hp - 7;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saQTi::P64);
           I64[Sp - 8] = block_caRLt_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           P64[Sp] = _saQTl::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRRC; else goto caRLu;
       uaRRC: // global
           call _caRLt(R1) args: 0, res: 0, upd: 0;
       caRLu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRLk_info" {
     block_caRLk_info:
         const _caRLk;
         const 65;
         const 3893370953127690270;
         const SaRfY_srt+72;
 },
 _caRLt() //  [R1]
         { []
         }
     {offset
       caRLt: // global
           I64[Sp - 8] = block_caRLy_info;
           _saQTp::P64 = P64[R1 + 7];
           R1 = P64[_saQTp::P64 + 8];
           P64[Sp] = _saQTp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRRD; else goto caRLz;
       uaRRD: // global
           call _caRLy(R1) args: 0, res: 0, upd: 0;
       caRLz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRLt_info" {
     block_caRLt_info:
         const _caRLt;
         const 130;
         const 3891119153314005022;
         const SaRfY_srt+72;
 },
 _caRLy() //  [R1]
         { []
         }
     {offset
       caRLy: // global
           I64[Sp - 16] = block_caRLD_info;
           _saQTu::P64 = P64[R1 + 7];
           _saQTx::P64 = P64[R1 + 23];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saQTx::P64;
           P64[Sp] = _saQTu::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRRE; else goto caRLE;
       uaRRE: // global
           call _caRLD(R1) args: 0, res: 0, upd: 0;
       caRLE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRLy_info" {
     block_caRLy_info:
         const _caRLy;
         const 259;
         const 3891119153314005022;
         const SaRfY_srt+72;
 },
 _caRLD() //  [R1]
         { []
         }
     {offset
       caRLD: // global
           I64[Sp - 8] = block_caRLI_info;
           _saQTy::P64 = R1;
           _saQTz::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saQTz::I64;
           P64[Sp + 16] = _saQTy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRRF; else goto caRLJ;
       uaRRF: // global
           call _caRLI(R1) args: 0, res: 0, upd: 0;
       caRLJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRLD_info" {
     block_caRLD_info:
         const _caRLD;
         const 1029;
         const 3891119153314005022;
         const SaRfY_srt+72;
 },
 _caRLI() //  [R1]
         { []
         }
     {offset
       caRLI: // global
           _saQTg::I64 = I64[Sp + 48];
           _saQTB::I64 = I64[R1 + 7];
           _saQTC::I64 = I64[Sp + 8] + 1;
           if (%MO_S_Le_W64(_saQTg::I64,
                            _saQTC::I64)) goto caRNd; else goto caRQZ;
       caRNd: // global
           I64[Sp] = block_caRLT_info;
           _saQTA::P64 = R1;
           R1 = P64[Sp + 40];
           I64[Sp + 32] = _saQTB::I64;
           P64[Sp + 40] = _saQTA::P64;
           if (R1 & 7 != 0) goto uaRRG; else goto caRLU;
       uaRRG: // global
           call _caRLT(R1) args: 0, res: 0, upd: 0;
       caRLU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caRQZ: // global
           _saQUh::I64 = _saQTg::I64 - 1;
           if (%MO_S_Gt_W64(0, _saQUh::I64)) goto caRQX; else goto caRQY;
       caRQX: // global
           _saQTA::P64 = R1;
           _saQUj::I64 = 0;
           goto saQUi;
       caRQY: // global
           _saQTA::P64 = R1;
           _saQUj::I64 = _saQUh::I64 + 1;
           goto saQUi;
       saQUi: // global
           if (%MO_S_Ge_W64(_saQUj::I64, 0)) goto caROi; else goto caRQT;
       caROi: // global
           I64[Sp - 32] = block_caRMC_info;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = _saQUj::I64;
           I64[Sp - 24] = _saQTC::I64;
           I64[Sp - 16] = _saQUh::I64;
           I64[Sp - 8] = _saQUj::I64;
           I64[Sp] = _saQTB::I64;
           P64[Sp + 48] = _saQTA::P64;
           Sp = Sp - 32;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
       caRQT: // global
           R1 = GHC.Arr.negRange_closure;
           Sp = Sp + 56;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRLI_info" {
     block_caRLI_info:
         const _caRLI;
         const 2118;
         const 3891119153314005022;
         const SaRfY_srt+72;
 },
 _caRLT() //  [R1]
         { []
         }
     {offset
       caRLT: // global
           _saQTg::I64 = I64[Sp + 48];
           _saQTF::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_saQTg::I64,
                            _saQTF::I64)) goto uaRRm; else goto caROf;
       uaRRm: // global
           Sp = Sp + 56;
           goto uaRRI;
       caROf: // global
           _saQTH::I64 = _saQTg::I64 - 1;
           if (%MO_S_Le_W64(_saQTF::I64,
                            _saQTH::I64)) goto caROd; else goto uaRRn;
       caROd: // global
           I64[Sp] = _saQTF::I64;
           I64[Sp + 48] = _saQTH::I64;
           call _caRMf() args: 0, res: 0, upd: 0;
       uaRRn: // global
           Sp = Sp + 56;
           goto uaRRI;
       uaRRI: // global
           call _caROe() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRLT_info" {
     block_caRLT_info:
         const _caRLT;
         const 2630;
         const 1297036696977670174;
         const SaRfY_srt+72;
 },
 _caRMf() //  []
         { []
         }
     {offset
       caRMf: // global
           Hp = Hp + 16;
           _saQTS::I64 = I64[Sp];
           if (Hp > HpLim) (likely: False) goto caRNr; else goto caRNq;
       caRNr: // global
           HpAlloc = 16;
           I64[Sp] = block_caRMe_info;
           R1 = _saQTS::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caRNq: // global
           _saQTy::P64 = P64[Sp + 24];
           _saQTA::P64 = P64[Sp + 40];
           _saQTB::I64 = I64[Sp + 32];
           if (%MO_S_Gt_W64(_saQTB::I64,
                            _saQTS::I64)) goto caRNt; else goto caROb;
       caRNt: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saQTS::I64;
           R4 = Hp - 7;
           R3 = _saQTA::P64;
           R2 = _saQTy::P64;
           Sp = Sp + 56;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caROb: // global
           if (%MO_S_Gt_W64(_saQTS::I64,
                            I64[Sp + 8])) goto caRNv; else goto caRNB;
       caRNv: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saQTS::I64;
           R4 = Hp - 7;
           R3 = _saQTA::P64;
           R2 = _saQTy::P64;
           Sp = Sp + 56;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caRNB: // global
           Hp = Hp - 16;
           _saQU1::P64 = P64[P64[Sp + 16] + ((_saQTS::I64 - _saQTB::I64 << 3) + 24)];
           I64[Sp - 8] = block_caRNA_info;
           R1 = _saQU1::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRRL; else goto caRNC;
       uaRRL: // global
           call _caRNA(R1) args: 0, res: 0, upd: 0;
       caRNC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caRMe() //  [R1]
         { []
         }
     {offset
       caRMe: // global
           I64[Sp] = R1;
           call _caRMf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRMe_info" {
     block_caRMe_info:
         const _caRMe;
         const 2630;
         const 1297036696977670174;
         const SaRfY_srt+72;
 },
 _caRNA() //  [R1]
         { []
         }
     {offset
       caRNA: // global
           if (R1 & 7 == 1) goto caRNI; else goto caRNN;
       caRNI: // global
           Sp = Sp + 64;
           call lvl11_raLJz_entry() args: 8, res: 0, upd: 8;
       caRNN: // global
           I64[Sp] = block_caRNL_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaRRR; else goto caRNO;
       uaRRR: // global
           call _caRNL(R1) args: 0, res: 0, upd: 0;
       caRNO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRNA_info" {
     block_caRNA_info:
         const _caRNA;
         const 5319;
         const 1297036696977670174;
         const SaRfY_srt+72;
 },
 _caRNL() //  [R1]
         { []
         }
     {offset
       caRNL: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRNW; else goto caRNV;
       caRNW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRNV: // global
           _saQU6::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8];
           I64[Sp - 8] = block_caRNT_info;
           R3 = Hp - 7;
           R2 = _saQU6::P64;
           P64[Sp] = _saQU6::P64;
           Sp = Sp - 8;
           call restartPollLoop_raLJq_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRNL_info" {
     block_caRNL_info:
         const _caRNL;
         const 5319;
         const 1297036696977670174;
         const SaRfY_srt+72;
 },
 _caRNT() //  [R1]
         { []
         }
     {offset
       caRNT: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caRO0; else goto caRNZ;
       caRO0: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRNZ: // global
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           _saQTx::P64 = P64[Sp + 32];
           _saQTH::I64 = I64[Sp + 64];
           _saQTS::I64 = I64[Sp + 16];
           _saQUb::I64 = _saQTS::I64 - I64[Sp + 48];
           call MO_WriteBarrier();
           P64[(_saQTx::P64 + 24) + (_saQUb::I64 << 3)] = Hp - 6;
           I64[_saQTx::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saQTx::P64 + 24) + ((I64[_saQTx::P64 + 8] << 3) + (_saQUb::I64 >> 7))] = 1 :: W8;
           if (_saQTS::I64 == _saQTH::I64) goto uaRRq; else goto caRO9;
       uaRRq: // global
           Sp = Sp + 72;
           call _caROe() args: 0, res: 0, upd: 0;
       caRO9: // global
           I64[Sp + 16] = _saQTS::I64 + 1;
           Sp = Sp + 16;
           call _caRMf() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRNT_info" {
     block_caRNT_info:
         const _caRNT;
         const 10632;
         const 1297036696977670174;
         const SaRfY_srt+72;
 },
 _caROe() //  []
         { []
         }
     {offset
       caROe: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caRMC() //  [R1]
         { []
         }
     {offset
       caRMC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caROl; else goto caROk;
       caROl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caROk: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           _caRME::P64 = Hp - 7;
           if (%MO_S_Le_W64(0, I64[Sp + 40])) goto caRQR; else goto uaRRs;
       caRQR: // global
           P64[Sp - 16] = R1;
           I64[Sp - 8] = 0;
           P64[Sp] = _caRME::P64;
           Sp = Sp - 16;
           call _caRMZ() args: 0, res: 0, upd: 0;
       uaRRs: // global
           P64[Sp + 72] = R1;
           P64[Sp + 80] = _caRME::P64;
           call _caROn() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRMC_info" {
     block_caRMC_info:
         const _caRMC;
         const 1994;
         const 3746995169145126942;
         const SaRfY_srt+72;
 },
 _caRMZ() //  []
         { []
         }
     {offset
       caRMZ: // global
           Hp = Hp + 16;
           _saQV2::I64 = I64[Sp + 8];
           if (Hp > HpLim) (likely: False) goto caRPk; else goto caRPj;
       caRPk: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caRMY_info;
           R1 = _saQV2::I64;
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caRPj: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saQV2::I64;
           _saQTy::P64 = P64[Sp + 72];
           _saQTA::P64 = P64[Sp + 96];
           _saQTB::I64 = I64[Sp + 48];
           _caRN1::P64 = Hp - 7;
           if (%MO_S_Gt_W64(_saQTB::I64,
                            _saQV2::I64)) goto caRPo; else goto caRQP;
       caRPo: // global
           R4 = _caRN1::P64;
           R3 = _saQTA::P64;
           R2 = _saQTy::P64;
           Sp = Sp + 104;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caRQP: // global
           if (%MO_S_Gt_W64(_saQV2::I64,
                            I64[Sp + 56])) goto caRPu; else goto caRPB;
       caRPu: // global
           R4 = _caRN1::P64;
           R3 = _saQTA::P64;
           R2 = _saQTy::P64;
           Sp = Sp + 104;
           call lvl14_raLJC_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caRPB: // global
           _saQVa::P64 = P64[P64[Sp + 64] + ((_saQV2::I64 - _saQTB::I64 << 3) + 24)];
           I64[Sp - 16] = block_caRPA_info;
           R1 = _saQVa::P64;
           P64[Sp - 8] = _caRN1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRRP; else goto caRPC;
       uaRRP: // global
           call _caRPA(R1) args: 0, res: 0, upd: 0;
       caRPC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caRMY() //  [R1]
         { []
         }
     {offset
       caRMY: // global
           I64[Sp + 16] = R1;
           Sp = Sp + 8;
           call _caRMZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRMY_info" {
     block_caRMY_info:
         const _caRMY;
         const 16013;
         const 3746995169145126942;
         const SaRfY_srt+72;
 },
 _caRPA() //  [R1]
         { []
         }
     {offset
       caRPA: // global
           if (R1 & 7 == 1) goto caRPI; else goto caRPS;
       caRPI: // global
           Sp = Sp + 120;
           call lvl13_raLJB_entry() args: 8, res: 0, upd: 8;
       caRPS: // global
           I64[Sp - 8] = block_caRPL_info;
           _saQVb::P64 = R1;
           R1 = P64[R1 + 6];
           P64[Sp] = _saQVb::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRRX; else goto caRPM;
       uaRRX: // global
           call _caRPL(R1) args: 0, res: 0, upd: 0;
       caRPM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRPA_info" {
     block_caRPA_info:
         const _caRPA;
         const 32014;
         const 3746995169145126942;
         const SaRfY_srt+72;
 },
 _caRPL() //  [R1]
         { []
         }
     {offset
       caRPL: // global
           I64[Sp - 8] = block_caRPQ_info;
           _saQVf::P64 = P64[R1 + 15];
           R1 = P64[Sp + 112];
           P64[Sp] = _saQVf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRRY; else goto caRPU;
       uaRRY: // global
           call _caRPQ(R1) args: 0, res: 0, upd: 0;
       caRPU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRPL_info" {
     block_caRPL_info:
         const _caRPL;
         const 64015;
         const 3746995169145126942;
         const SaRfY_srt+72;
 },
 _caRPQ() //  [R1]
         { []
         }
     {offset
       caRPQ: // global
           _caRN1::P64 = P64[Sp + 24];
           _saQV2::I64 = I64[Sp + 40];
           if (%MO_S_Ge_W64(_saQV2::I64,
                            I64[R1 + 7])) goto caRQ4; else goto caRQO;
       caRQ4: // global
           I64[Sp] = block_caRQ2_info;
           R3 = _caRN1::P64;
           R2 = P64[Sp + 8];
           call restartPollLoop_raLJq_entry(R3, R2) args: 8, res: 8, upd: 8;
       caRQO: // global
           _caRME::P64 = P64[Sp + 48];
           if (%MO_S_Gt_W64(0, _saQV2::I64)) goto caRQy; else goto caRQN;
       caRQy: // global
           R3 = _caRN1::P64;
           R2 = _caRME::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caRQN: // global
           if (%MO_S_Gt_W64(_saQV2::I64,
                            I64[Sp + 64])) goto caRQE; else goto caRQM;
       caRQE: // global
           R3 = _caRN1::P64;
           R2 = _caRME::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caRQM: // global
           _saQTz::I64 = I64[Sp + 88];
           _saQUn::P64 = P64[Sp + 32];
           _saQVb::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[(_saQUn::P64 + 24) + (_saQV2::I64 << 3)] = _saQVb::P64;
           I64[_saQUn::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saQUn::P64 + 24) + ((I64[_saQUn::P64 + 8] << 3) + (_saQV2::I64 >> 7))] = 1 :: W8;
           if (_saQV2::I64 == _saQTz::I64) goto uaRRx; else goto caRQK;
       uaRRx: // global
           P64[Sp + 128] = _caRME::P64;
           P64[Sp + 120] = _saQUn::P64;
           Sp = Sp + 48;
           call _caROn() args: 0, res: 0, upd: 0;
       caRQK: // global
           I64[Sp + 40] = _saQV2::I64 + 1;
           Sp = Sp + 32;
           call _caRMZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRPQ_info" {
     block_caRPQ_info:
         const _caRPQ;
         const 128016;
         const 3746995169145126942;
         const SaRfY_srt+72;
 },
 _caRQ2() //  [R1]
         { []
         }
     {offset
       caRQ2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caRQ8; else goto caRQ7;
       caRQ8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRQ7: // global
           _caRME::P64 = P64[Sp + 48];
           _caRN1::P64 = P64[Sp + 24];
           _saQV2::I64 = I64[Sp + 40];
           if (%MO_S_Gt_W64(0, _saQV2::I64)) goto caRQc; else goto caRQt;
       caRQc: // global
           Hp = Hp - 40;
           R3 = _caRN1::P64;
           R2 = _caRME::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caRQt: // global
           if (%MO_S_Gt_W64(_saQV2::I64,
                            I64[Sp + 64])) goto caRQi; else goto caRQs;
       caRQi: // global
           Hp = Hp - 40;
           R3 = _caRN1::P64;
           R2 = _caRME::P64;
           Sp = Sp + 136;
           call lvl15_raLJD_entry(R3, R2) args: 8, res: 0, upd: 8;
       caRQs: // global
           I64[Hp - 32] = (,)_con_info;
           P64[Hp - 24] = R1;
           P64[Hp - 16] = P64[Sp + 8];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 31;
           _saQTz::I64 = I64[Sp + 88];
           _saQUn::P64 = P64[Sp + 32];
           call MO_WriteBarrier();
           P64[(_saQUn::P64 + 24) + (_saQV2::I64 << 3)] = Hp - 6;
           I64[_saQUn::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saQUn::P64 + 24) + ((I64[_saQUn::P64 + 8] << 3) + (_saQV2::I64 >> 7))] = 1 :: W8;
           if (_saQV2::I64 == _saQTz::I64) goto uaRRv; else goto caRQq;
       uaRRv: // global
           P64[Sp + 128] = _caRME::P64;
           P64[Sp + 120] = _saQUn::P64;
           Sp = Sp + 48;
           call _caROn() args: 0, res: 0, upd: 0;
       caRQq: // global
           I64[Sp + 40] = _saQV2::I64 + 1;
           Sp = Sp + 32;
           call _caRMZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caRQ2_info" {
     block_caRQ2_info:
         const _caRQ2;
         const 128144;
         const 3746995169145126942;
         const SaRfY_srt+72;
 },
 _caROn() //  []
         { []
         }
     {offset
       caROn: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caROr; else goto caROq;
       caROr: // global
           HpAlloc = 40;
           I64[Sp] = block_caROn_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caROq: // global
           _saQTC::I64 = I64[Sp + 8];
           if (%MO_S_Le_W64(_saQTC::I64,
                            I64[Sp + 16])) goto caROS; else goto caROT;
       caROS: // global
           Hp = Hp - 40;
           I64[Sp + 56] = _saQTC::I64;
           Sp = Sp + 16;
           call _caROG() args: 0, res: 0, upd: 0;
       caROT: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = lvl1_raLJo_closure+1;
           P64[Hp - 16] = P64[Sp + 80];
           P64[Hp - 8] = P64[Sp + 72];
           I64[Hp] = I64[Sp + 24];
           _saQTp::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[_saQTp::P64 + 8] = Hp - 31;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saQTp::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 88;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caROn_info" {
     block_caROn_info:
         const _caROn;
         const 8138;
         const 4294967326;
         const SaRfY_srt+120;
 },
 _caROG() //  []
         { []
         }
     {offset
       caROG: // global
           I64[Sp - 8] = block_caROI_info;
           R5 = I64[Sp + 40];
           R4 = P64[Sp + 56];
           R3 = I64[Sp];
           R2 = 0;
           Sp = Sp - 8;
           call GHC.Event.Thread.$wstartIOManagerThread_entry(R5,
                                                              R4,
                                                              R3,
                                                              R2) args: 8, res: 8, upd: 8;
     }
 },
 _caROI() //  []
         { []
         }
     {offset
       caROI: // global
           _saQUx::I64 = I64[Sp + 48];
           if (_saQUx::I64 == I64[Sp + 8]) goto uaRRA; else goto caROP;
       uaRRA: // global
           Sp = Sp + 8;
           call _caROy() args: 0, res: 0, upd: 0;
       caROP: // global
           I64[Sp + 48] = _saQUx::I64 + 1;
           Sp = Sp + 8;
           call _caROG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caROI_info" {
     block_caROI_info:
         const _caROI;
         const 4041;
         const 4294967326;
         const SaRfY_srt+120;
 },
 _caROy() //  []
         { []
         }
     {offset
       caROy: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caROC; else goto caROB;
       caROC: // global
           HpAlloc = 40;
           I64[Sp] = block_caROy_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caROB: // global
           I64[Hp - 32] = GHC.Arr.STArray_con_info;
           P64[Hp - 24] = lvl1_raLJo_closure+1;
           P64[Hp - 16] = P64[Sp + 64];
           P64[Hp - 8] = P64[Sp + 56];
           I64[Hp] = I64[Sp + 8];
           _saQTp::P64 = P64[Sp + 48];
           call MO_WriteBarrier();
           P64[_saQTp::P64 + 8] = Hp - 31;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saQTp::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caROy_info" {
     block_caROy_info:
         const _caROy;
         const 1992;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.920063617 UTC

[section ""data" . GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged2_info;
         const 0;
 },
 GHC.Event.Thread.ioManagerCapabilitiesChanged2_entry() //  []
         { []
         }
     {offset
       caRUX: // global
           call GHC.Event.Thread.$wioManagerCapabilitiesChanged_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerCapabilitiesChanged2_info" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged2_info:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged2_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaRfY_srt+288;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.923764041 UTC

[section ""data" . GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged1_info;
         const 0;
 },
 GHC.Event.Thread.ioManagerCapabilitiesChanged1_entry() //  []
         { []
         }
     {offset
       caRVb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caRVc; else goto caRVd;
       caRVc: // global
           R1 = GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRVd: // global
           I64[Sp - 8] = block_caRV8_info;
           R1 = GHC.Event.Thread.ioManagerLock_closure;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRVh; else goto caRV9;
       uaRVh: // global
           call _caRV8(R1) args: 0, res: 0, upd: 0;
       caRV9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerCapabilitiesChanged1_info" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged1_info:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged1_entry;
         const 0;
         const 3302829850638;
         const 4294967299;
         const SaRfY_srt+248;
 },
 _caRV8() //  [R1]
         { []
         }
     {offset
       caRV8: // global
           R3 = GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure+2;
           R2 = P64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Conc.Sync.$wwithMVar_entry(R3,
                                               R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRV8_info" {
     block_caRV8_info:
         const _caRV8;
         const 0;
         const 4294967326;
         const SaRfY_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.928966616 UTC

[section ""data" . GHC.Event.Thread.ioManagerCapabilitiesChanged_closure" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged_closure:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged_info;
         const 0;
 },
 GHC.Event.Thread.ioManagerCapabilitiesChanged_entry() //  []
         { []
         }
     {offset
       caRVw: // global
           call GHC.Event.Thread.ioManagerCapabilitiesChanged1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.ioManagerCapabilitiesChanged_info" {
     GHC.Event.Thread.ioManagerCapabilitiesChanged_info:
         const GHC.Event.Thread.ioManagerCapabilitiesChanged_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaRfY_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.933235043 UTC

[section ""data" . GHC.Event.Thread.getSystemEventManager2_closure" {
     GHC.Event.Thread.getSystemEventManager2_closure:
         const GHC.Event.Thread.getSystemEventManager2_info;
         const 0;
 },
 GHC.Event.Thread.getSystemEventManager2_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caRVI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caRVM; else goto caRVL;
       caRVM: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.getSystemEventManager2_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caRVL: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R6 = lvl4_raLJs_closure;
           R5 = Hp - 7;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemEventManager2_info" {
     GHC.Event.Thread.getSystemEventManager2_info:
         const GHC.Event.Thread.getSystemEventManager2_entry;
         const 0;
         const 9223372058329612302;
         const 12884901910;
         const SaRfY_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.942616505 UTC

[section ""data" . GHC.Event.Thread.getSystemEventManager1_closure" {
     GHC.Event.Thread.getSystemEventManager1_closure:
         const GHC.Event.Thread.getSystemEventManager1_info;
         const 0;
 },
 sat_saQWh_entry() //  [R1]
         { []
         }
     {offset
       caRWJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRWK; else goto caRWL;
       caRWK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRWL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call Data.Tuple.snd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saQWh_info" {
     sat_saQWh_info:
         const sat_saQWh_entry;
         const 1;
         const 16;
 },
 sat_saQWi_entry() //  [R1]
         { []
         }
     {offset
       caRWQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caRWR; else goto caRWS;
       caRWR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRWS: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caRWz_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaRWZ; else goto caRWA;
       uaRWZ: // global
           call _caRWz(R1) args: 0, res: 0, upd: 0;
       caRWA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saQWi_info" {
     sat_saQWi_info:
         const sat_saQWi_entry;
         const 1;
         const 16;
 },
 _caRWz() //  [R1]
         { []
         }
     {offset
       caRWz: // global
           if (R1 & 7 == 1) goto caRWN; else goto caRWO;
       caRWN: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caRWO: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caRWY; else goto caRWX;
       caRWY: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       caRWX: // global
           _saQWg::P64 = P64[R1 + 6];
           I64[Hp - 32] = sat_saQWh_info;
           P64[Hp - 16] = _saQWg::P64;
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = Hp - 32;
           R1 = Hp - 6;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caRWz_info" {
     block_caRWz_info:
         const _caRWz;
         const 0;
         const 30;
 },
 GHC.Event.Thread.getSystemEventManager1_entry() //  []
         { []
         }
     {offset
       caRX0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caRX1; else goto caRX2;
       caRX1: // global
           R1 = GHC.Event.Thread.getSystemEventManager1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRX2: // global
           I64[Sp - 8] = block_caRVW_info;
           R1 = CurrentTSO;
           Sp = Sp - 8;
           call stg_threadStatus#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemEventManager1_info" {
     GHC.Event.Thread.getSystemEventManager1_info:
         const GHC.Event.Thread.getSystemEventManager1_entry;
         const 0;
         const 105557411233806;
         const 4294967299;
         const SaRfY_srt+224;
 },
 _caRVW() //  [R2]
         { []
         }
     {offset
       caRVW: // global
           I64[Sp - 8] = block_caRW0_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           I64[Sp] = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRXg; else goto caRW1;
       uaRXg: // global
           call _caRW0(R1) args: 0, res: 0, upd: 0;
       caRW1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRVW_info" {
     block_caRVW_info:
         const _caRVW;
         const 0;
         const 35188667056158;
         const SaRfY_srt+224;
 },
 _caRW0() //  [R1]
         { []
         }
     {offset
       caRW0: // global
           _saQVX::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caRW5_info;
           R1 = _saQVX::P64;
           if (R1 & 7 != 0) goto uaRXh; else goto caRW6;
       uaRXh: // global
           call _caRW5(R1) args: 0, res: 0, upd: 0;
       caRW6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRW0_info" {
     block_caRW0_info:
         const _caRW0;
         const 65;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caRW5() //  [R1]
         { []
         }
     {offset
       caRW5: // global
           I64[Sp - 16] = block_caRWa_info;
           _saQW0::P64 = P64[R1 + 15];
           _saQW2::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _saQW2::P64;
           P64[Sp] = _saQW0::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaRXi; else goto caRWb;
       uaRXi: // global
           call _caRWa(R1) args: 0, res: 0, upd: 0;
       caRWb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRW5_info" {
     block_caRW5_info:
         const _caRW5;
         const 65;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caRWa() //  [R1]
         { []
         }
     {offset
       caRWa: // global
           I64[Sp - 8] = block_caRWf_info;
           _saQW3::P64 = R1;
           _saQW4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saQW4::I64;
           P64[Sp + 16] = _saQW3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaRXj; else goto caRWg;
       uaRXj: // global
           call _caRWf(R1) args: 0, res: 0, upd: 0;
       caRWg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRWa_info" {
     block_caRWa_info:
         const _caRWa;
         const 259;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caRWf() //  [R1]
         { []
         }
     {offset
       caRWf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caRX9; else goto caRX8;
       caRX9: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caRX8: // global
           _saQVR::I64 = I64[Sp + 32];
           _saQW3::P64 = P64[Sp + 24];
           _saQW4::I64 = I64[Sp + 8];
           _saQW5::P64 = R1;
           if (%MO_S_Gt_W64(_saQW4::I64,
                            _saQVR::I64)) goto caRXd; else goto caRXf;
       caRXf: // global
           if (%MO_S_Gt_W64(_saQVR::I64,
                            I64[R1 + 7])) goto caRXd; else goto caRXe;
       caRXd: // global
           Hp = Hp - 24;
           R4 = _saQVR::I64;
           R3 = _saQW3::P64;
           R2 = _saQW5::P64;
           Sp = Sp + 40;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caRXe: // global
           I64[Hp - 16] = sat_saQWi_info;
           P64[Hp] = P64[P64[Sp + 16] + ((_saQVR::I64 - _saQW4::I64 << 3) + 24)];
           R1 = Hp - 16;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRWf_info" {
     block_caRWf_info:
         const _caRWf;
         const 580;
         const 4294967326;
         const SaRfY_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.960711839 UTC

[section ""data" . GHC.Event.Thread.getSystemEventManager_closure" {
     GHC.Event.Thread.getSystemEventManager_closure:
         const GHC.Event.Thread.getSystemEventManager_info;
         const 0;
 },
 GHC.Event.Thread.getSystemEventManager_entry() //  []
         { []
         }
     {offset
       caRYl: // global
           call GHC.Event.Thread.getSystemEventManager1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.getSystemEventManager_info" {
     GHC.Event.Thread.getSystemEventManager_info:
         const GHC.Event.Thread.getSystemEventManager_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaRfY_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.963644033 UTC

[section ""cstring" . lvl16_raLJE_bytes" {
     lvl16_raLJE_bytes:
         I8[] [116,104,114,101,97,100,87,97,105,116,83,84,77]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.96581947 UTC

[section ""data" . lvl17_raLJF_closure" {
     lvl17_raLJF_closure:
         const lvl17_raLJF_info;
         const 0;
         const 0;
         const 0;
 },
 lvl17_raLJF_entry() //  [R1]
         { []
         }
     {offset
       caRYz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRYA; else goto caRYB;
       caRYA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRYB: // global
           (_caRYw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRYw::I64 == 0) goto caRYy; else goto caRYx;
       caRYy: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRYx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRYw::I64;
           R2 = lvl16_raLJE_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl17_raLJF_info" {
     lvl17_raLJF_info:
         const lvl17_raLJF_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.969867131 UTC

[section ""data" . lvl18_raLJG_closure" {
     lvl18_raLJG_closure:
         const lvl18_raLJG_info;
         const 0;
         const 0;
         const 0;
 },
 lvl18_raLJG_entry() //  [R1]
         { []
         }
     {offset
       caRYQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRYR; else goto caRYS;
       caRYR: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRYS: // global
           (_caRYN::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRYN::I64 == 0) goto caRYP; else goto caRYO;
       caRYP: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRYO: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRYN::I64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = 9;
           R2 = lvl17_raLJF_closure;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl18_raLJG_info" {
     lvl18_raLJG_info:
         const lvl18_raLJG_entry;
         const 0;
         const 12884901909;
         const SaRfY_srt+344;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.974298481 UTC

[section ""data" . lvl19_raLJH_closure" {
     lvl19_raLJH_closure:
         const lvl19_raLJH_info;
         const 0;
         const 0;
         const 0;
 },
 lvl19_raLJH_entry() //  [R1]
         { []
         }
     {offset
       caRZ9: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caRZa; else goto caRZb;
       caRZa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caRZb: // global
           (_caRZ6::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caRZ6::I64 == 0) goto caRZ8; else goto caRZ7;
       caRZ8: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caRZ7: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caRZ6::I64;
           R2 = lvl18_raLJG_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl19_raLJH_info" {
     lvl19_raLJH_info:
         const lvl19_raLJH_entry;
         const 0;
         const 12884901909;
         const SaRfY_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.977905182 UTC

[section ""data" . lvl20_raLJI_closure" {
     lvl20_raLJI_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.979638396 UTC

[section ""data" . lvl21_raLJJ_closure" {
     lvl21_raLJJ_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.981339771 UTC

[section ""data" . lvl22_raLJK_closure" {
     lvl22_raLJK_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.983090157 UTC

[section ""cstring" . lvl23_raLJL_bytes" {
     lvl23_raLJL_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,49,56,51,58,51,45,49,48]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:52.986350092 UTC

[section ""data" . lvl24_raLJM_closure" {
     lvl24_raLJM_closure:
         const lvl24_raLJM_info;
         const 0;
 },
 lvl24_raLJM_entry() //  []
         { []
         }
     {offset
       caRZu: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caRZv; else goto caRZw;
       caRZv: // global
           R1 = lvl24_raLJM_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caRZw: // global
           I64[Sp - 8] = block_caRZs_info;
           R2 = lvl23_raLJL_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl24_raLJM_info" {
     lvl24_raLJM_info:
         const lvl24_raLJM_entry;
         const 0;
         const 9223372041149743118;
         const 4294967299;
         const SaRfY_srt+128;
 },
 _caRZs() //  [R1]
         { []
         }
     {offset
       caRZs: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRZs_info" {
     block_caRZs_info:
         const _caRZs;
         const 0;
         const 4294967326;
         const SaRfY_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.031329459 UTC

[section ""data" . GHC.Event.Thread.threadWaitReadSTM1_closure" {
     GHC.Event.Thread.threadWaitReadSTM1_closure:
         const GHC.Event.Thread.threadWaitReadSTM1_info;
         const 0;
 },
 sat_saQXu_entry() //  [R1]
         { []
         }
     {offset
       caS1u: // global
           _saQXu::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caS1v; else goto caS1w;
       caS1w: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS1y; else goto caS1x;
       caS1y: // global
           HpAlloc = 16;
           goto caS1v;
       caS1v: // global
           R1 = _saQXu::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caS1x: // global
           _saQWv::P64 = P64[_saQXu::P64 + 7];
           _saQXp::P64 = P64[_saQXu::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saQXp::P64;
           I64[Sp - 8] = block_caS1s_info;
           R2 = Hp - 6;
           R1 = _saQWv::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQXu_info" {
     sat_saQXu_info:
         const sat_saQXu_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caS1s() //  []
         { []
         }
     {offset
       caS1s: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS1s_info" {
     block_caS1s_info:
         const _caS1s;
         const 0;
         const 30;
 },
 lvl31_saQXn_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caS1A: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caS1E; else goto caS1D;
       caS1E: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caS1D: // global
           _saQWv::P64 = P64[R1 + 5];
           I64[Hp - 16] = sat_saQXu_info;
           P64[Hp - 8] = _saQWv::P64;
           P64[Hp] = R3;
           R1 = Hp - 15;
           call stg_atomically#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_saQXn_info" {
     lvl31_saQXn_info:
         const lvl31_saQXn_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 $wgo_saQY4_entry() //  [R1, R2]
         { []
         }
     {offset
       caS2K: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caS2L; else goto caS2M;
       caS2L: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caS2M: // global
           I64[Sp - 24] = block_caS2D_info;
           _saQY4::P64 = R1;
           _saQX4::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saQX4::I64;
           P64[Sp - 8] = _saQY4::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaS39; else goto caS2E;
       uaS39: // global
           call _caS2D(R1) args: 0, res: 0, upd: 0;
       caS2E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saQY4_info" {
     $wgo_saQY4_info:
         const $wgo_saQY4_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caS2D() //  [R1]
         { []
         }
     {offset
       caS2D: // global
           if (R1 & 7 == 1) goto caS2H; else goto caS2I;
       caS2H: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caS2I: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS2U; else goto caS2T;
       caS2U: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caS2T: // global
           _saQY8::P64 = P64[R1 + 6];
           _saQY9::P64 = P64[R1 + 14];
           _saQY7::I64 = I64[R1 + 22];
           if (_saQY7::I64 == I64[Sp + 8]) goto caS38; else goto caS32;
       caS38: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saQY8::P64;
           R3 = _saQY9::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caS32: // global
           Hp = Hp - 16;
           I64[Sp] = block_caS2Y_info;
           R2 = _saQY9::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saQY8::P64;
           I64[Sp + 16] = _saQY7::I64;
           call $wgo_saQY4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS2D_info" {
     block_caS2D_info:
         const _caS2D;
         const 66;
         const 30;
 },
 _caS2Y() //  [R1, R2, R3]
         { []
         }
     {offset
       caS2Y: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caS35; else goto caS34;
       caS35: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caS34: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS2Y_info" {
     block_caS2Y_info:
         const _caS2Y;
         const 130;
         const 30;
 },
 $wgo_saQYT_entry() //  [R1, R2]
         { []
         }
     {offset
       caS3U: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caS3V; else goto caS3W;
       caS3V: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caS3W: // global
           I64[Sp - 24] = block_caS3N_info;
           _saQYT::P64 = R1;
           _saQX4::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saQX4::I64;
           P64[Sp - 8] = _saQYT::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaS4j; else goto caS3O;
       uaS4j: // global
           call _caS3N(R1) args: 0, res: 0, upd: 0;
       caS3O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saQYT_info" {
     $wgo_saQYT_info:
         const $wgo_saQYT_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caS3N() //  [R1]
         { []
         }
     {offset
       caS3N: // global
           if (R1 & 7 == 1) goto caS3R; else goto caS3S;
       caS3R: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caS3S: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS44; else goto caS43;
       caS44: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caS43: // global
           _saQYX::P64 = P64[R1 + 6];
           _saQYY::P64 = P64[R1 + 14];
           _saQYW::I64 = I64[R1 + 22];
           if (_saQYW::I64 == I64[Sp + 8]) goto caS4i; else goto caS4c;
       caS4i: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saQYX::P64;
           R3 = _saQYY::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caS4c: // global
           Hp = Hp - 16;
           I64[Sp] = block_caS48_info;
           R2 = _saQYY::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saQYX::P64;
           I64[Sp + 16] = _saQYW::I64;
           call $wgo_saQYT_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS3N_info" {
     block_caS3N_info:
         const _caS3N;
         const 66;
         const 30;
 },
 _caS48() //  [R1, R2, R3]
         { []
         }
     {offset
       caS48: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caS4f; else goto caS4e;
       caS4f: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caS4e: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS48_info" {
     block_caS48_info:
         const _caS48;
         const 130;
         const 30;
 },
 $wio_saQXk_entry() //  [R1, R2]
         { []
         }
     {offset
       caS4o: // global
           _saQXl::P64 = R2;
           _saQXk::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto caS4p; else goto caS4q;
       caS4q: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caS4s; else goto caS4r;
       caS4s: // global
           HpAlloc = 80;
           goto caS4p;
       caS4p: // global
           R2 = _saQXl::P64;
           R1 = _saQXk::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caS4r: // global
           _saQWv::P64 = P64[_saQXk::P64 + 6];
           _saQWV::P64 = P64[_saQXk::P64 + 14];
           _saQWX::P64 = P64[_saQXk::P64 + 22];
           _saQWY::P64 = P64[_saQXk::P64 + 30];
           _saQX3::P64 = P64[_saQXk::P64 + 38];
           _saQX2::I64 = I64[_saQXk::P64 + 46];
           _saQX4::I64 = I64[_saQXk::P64 + 54];
           _saQX6::I64 = I64[_saQXk::P64 + 62];
           I64[Hp - 72] = lvl31_saQXn_info;
           P64[Hp - 64] = _saQWv::P64;
           I64[Hp - 56] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 48] = Hp - 69;
           I64[Hp - 40] = _saQX4::I64;
           I64[Hp - 32] = _saQX2::I64;
           I64[Hp - 24] = _saQX6::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 64] = block_caS14_info;
           R5 = _saQXl::P64;
           R4 = Hp - 14;
           R3 = _saQX4::I64;
           R2 = GHC.Base.++_closure+2;
           P64[Sp - 56] = _saQWV::P64;
           P64[Sp - 48] = _saQWX::P64;
           P64[Sp - 40] = _saQWY::P64;
           P64[Sp - 32] = _saQX3::P64;
           I64[Sp - 24] = _saQX4::I64;
           I64[Sp - 16] = _saQX6::I64;
           P64[Sp - 8] = _saQXl::P64;
           Sp = Sp - 64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saQXk_info" {
     $wio_saQXk_info:
         const $wio_saQXk_entry;
         const 12884901893;
         const 4294967304;
         const 8589934597;
         const SaRfY_srt+384;
 },
 _caS14() //  [R1]
         { []
         }
     {offset
       caS14: // global
           I64[Sp - 8] = block_caS18_info;
           _saQXz::P64 = R1;
           R1 = R1;
           P64[Sp] = _saQXz::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaS6M; else goto caS19;
       uaS6M: // global
           call _caS18(R1) args: 0, res: 0, upd: 0;
       caS19: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS14_info" {
     block_caS14_info:
         const _caS14;
         const 3079;
         const 4294967326;
         const SaRfY_srt+384;
 },
 _caS18() //  [R1]
         { []
         }
     {offset
       caS18: // global
           if (R1 & 7 == 1) goto caS4l; else goto caS4m;
       caS4l: // global
           I64[Sp] = 0;
           P64[Sp - 8] = GHC.Event.Internal.$fMonoidEventLifetime1_closure;
           Sp = Sp - 8;
           call _saQXA() args: 0, res: 0, upd: 0;
       caS4m: // global
           I64[Sp] = block_caS1e_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS18_info" {
     block_caS18_info:
         const _caS18;
         const 6152;
         const 4294967326;
         const SaRfY_srt+384;
 },
 _caS1e() //  [R1]
         { []
         }
     {offset
       caS1e: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS6l; else goto caS6k;
       caS6l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caS6k: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           P64[Sp - 8] = Hp - 7;
           I64[Sp] = R1;
           Sp = Sp - 8;
           call _saQXA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caS1e_info" {
     block_caS1e_info:
         const _caS1e;
         const 6152;
         const 30;
 },
 _saQXA() //  []
         { []
         }
     {offset
       saQXA: // global
           _saQXC::P64 = P64[Sp];
           I64[Sp] = block_caS1I_info;
           R1 = _saQXC::P64;
           if (R1 & 7 != 0) goto uaS77; else goto caS1J;
       uaS77: // global
           call _caS1I(R1) args: 0, res: 0, upd: 0;
       caS1J: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caS1I() //  [R1]
         { []
         }
     {offset
       caS1I: // global
           _saQXF::I64 = I64[Sp + 8] | I64[Sp + 64];
           _saQXG::I64 = _saQXF::I64 & 8;
           if (_saQXG::I64 != 0) goto uaS6F; else goto uaS6E;
       uaS6F: // global
           I64[Sp] = _saQXG::I64;
           I64[Sp + 40] = _saQXF::I64;
           I64[Sp + 64] = I64[R1 + 7];
           call _caS1U() args: 0, res: 0, upd: 0;
       uaS6E: // global
           I64[Sp + 32] = _saQXG::I64;
           I64[Sp + 64] = _saQXF::I64;
           Sp = Sp + 16;
           call _caS3c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caS1I_info" {
     block_caS1I_info:
         const _caS1I;
         const 12361;
         const 30;
 },
 _caS1U() //  []
         { []
         }
     {offset
       caS1U: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caS4A; else goto caS4z;
       caS4A: // global
           HpAlloc = 32;
           _saQXG::I64 = I64[Sp];
           I64[Sp] = block_caS1T_info;
           R1 = _saQXG::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caS4z: // global
           _saQXF::I64 = I64[Sp + 40];
           if (I64[Sp + 64] == _saQXF::I64) goto caS4C; else goto caS4D;
       caS4C: // global
           Hp = Hp - 32;
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caS4D: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _saQXF::I64 & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] & 7;
           I64[Sp + 8] = block_caS28_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 32];
           I64[Sp] = stg_ap_v_info;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caS1T() //  [R1]
         { []
         }
     {offset
       caS1T: // global
           I64[Sp] = R1;
           call _caS1U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caS1T_info" {
     block_caS1T_info:
         const _caS1T;
         const 13385;
         const 30;
 },
 _caS28() //  [R1]
         { []
         }
     {offset
       caS28: // global
           I64[Sp] = block_caS2a_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaS6S; else goto caS2b;
       uaS6S: // global
           call _caS2a(R1) args: 0, res: 0, upd: 0;
       caS2b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS28_info" {
     block_caS28_info:
         const _caS28;
         const 8072;
         const 30;
 },
 _caS2a() //  [R1]
         { []
         }
     {offset
       caS2a: // global
           if (R1 & 7 == 1) goto caS4H; else goto caS5p;
       caS4H: // global
           I64[Sp + 40] = block_caS2f_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaS6T; else goto caS2g;
       uaS6T: // global
           call _caS2f(R1) args: 0, res: 0, upd: 0;
       caS2g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caS5p: // global
           R1 = lvl22_raLJK_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS2a_info" {
     block_caS2a_info:
         const _caS2a;
         const 8072;
         const 30;
 },
 _caS2f() //  [R1]
         { []
         }
     {offset
       caS2f: // global
           _saQXl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caS4K; else goto caS5j;
       caS4K: // global
           I64[Sp] = block_caS2k_info;
           R1 = P64[_saQXl::P64 + 8];
           if (R1 & 7 != 0) goto uaS6U; else goto caS2l;
       uaS6U: // global
           call _caS2k(R1) args: 0, res: 0, upd: 0;
       caS2l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caS5j: // global
           I64[Sp + 24] = block_caS5h_info;
           R5 = _saQXl::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS2f_info" {
     block_caS2f_info:
         const _caS2f;
         const 195;
         const 30;
 },
 _caS2k() //  [R1]
         { []
         }
     {offset
       caS2k: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS4N; else goto caS4M;
       caS4N: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caS4M: // global
           _saQX4::I64 = I64[Sp + 8];
           _saQXV::P64 = P64[R1 + 7];
           _saQXX::P64 = P64[R1 + 15];
           _saQXW::I64 = I64[R1 + 23];
           _saQXY::I64 = _saQX4::I64 & (I64[_saQXV::P64 + 8] - 1);
           _saQY3::P64 = P64[(_saQXV::P64 + 24) + (_saQXY::I64 << 3)];
           I64[Hp - 8] = $wgo_saQY4_info;
           I64[Hp] = _saQX4::I64;
           I64[Sp - 8] = block_caS4O_info;
           R2 = _saQY3::P64;
           R1 = Hp - 7;
           I64[Sp] = _saQXY::I64;
           P64[Sp + 8] = _saQXX::P64;
           I64[Sp + 16] = _saQXW::I64;
           P64[Sp + 24] = _saQXV::P64;
           Sp = Sp - 8;
           call $wgo_saQY4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS2k_info" {
     block_caS2k_info:
         const _caS2k;
         const 451;
         const 30;
 },
 _caS4O() //  [R1, R2, R3]
         { []
         }
     {offset
       caS4O: // global
           I64[Sp - 16] = block_caS4Q_info;
           _saQYi::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saQYi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaS6Z; else goto caS4S;
       uaS6Z: // global
           call _caS4Q(R1) args: 0, res: 0, upd: 0;
       caS4S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS4O_info" {
     block_caS4O_info:
         const _caS4O;
         const 324;
         const 30;
 },
 _caS4Q() //  [R1]
         { []
         }
     {offset
       caS4Q: // global
           if (R1 & 7 == 1) goto uaS6H; else goto caS53;
       uaS6H: // global
           Sp = Sp + 56;
           call _caS60() args: 0, res: 0, upd: 0;
       caS53: // global
           _saQXV::P64 = P64[Sp + 48];
           _saQXY::I64 = I64[Sp + 24];
           _saQYi::P64 = P64[Sp + 16];
           _saQYk::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saQXV::P64 + 24) + (_saQXY::I64 << 3)] = _saQYk::P64;
           I64[_saQXV::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saQXV::P64 + 24) + ((I64[_saQXV::P64 + 8] << 3) + (_saQXY::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caS51_info;
           R1 = _saQYi::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaS70; else goto caS54;
       uaS70: // global
           call _caS51(R1) args: 0, res: 0, upd: 0;
       caS54: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS4Q_info" {
     block_caS4Q_info:
         const _caS4Q;
         const 1286;
         const 30;
 },
 _caS51() //  [R1]
         { []
         }
     {offset
       caS51: // global
           if (R1 & 7 == 1) goto uaS6I; else goto caS5e;
       uaS6I: // global
           Sp = Sp + 32;
           call _caS60() args: 0, res: 0, upd: 0;
       caS5e: // global
           _saQXW::I64 = I64[Sp + 16];
           _saQXX::P64 = P64[Sp + 8];
           I64[_saQXW::I64] = I64[_saQXW::I64] - 1;
           call MO_Touch(_saQXX::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS51_info" {
     block_caS51_info:
         const _caS51;
         const 387;
         const 30;
 },
 _caS5h() //  []
         { []
         }
     {offset
       caS5h: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS5h_info" {
     block_caS5h_info:
         const _caS5h;
         const 0;
         const 30;
 },
 _caS3c() //  []
         { []
         }
     {offset
       caS3c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS5t; else goto caS5s;
       caS5t: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caS3b_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caS5s: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           I64[Sp - 8] = block_caS3i_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caS3b() //  [R1]
         { []
         }
     {offset
       caS3b: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caS3c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caS3b_info" {
     block_caS3b_info:
         const _caS3b;
         const 6408;
         const 30;
 },
 _caS3i() //  [R1]
         { []
         }
     {offset
       caS3i: // global
           I64[Sp] = block_caS3k_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaS6W; else goto caS3l;
       uaS6W: // global
           call _caS3k(R1) args: 0, res: 0, upd: 0;
       caS3l: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS3i_info" {
     block_caS3i_info:
         const _caS3i;
         const 8072;
         const 30;
 },
 _caS3k() //  [R1]
         { []
         }
     {offset
       caS3k: // global
           if (R1 & 7 == 1) goto caS5x; else goto caS6f;
       caS5x: // global
           I64[Sp + 40] = block_caS3p_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaS6X; else goto caS3q;
       uaS6X: // global
           call _caS3p(R1) args: 0, res: 0, upd: 0;
       caS3q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caS6f: // global
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS3k_info" {
     block_caS3k_info:
         const _caS3k;
         const 8072;
         const 30;
 },
 _caS3p() //  [R1]
         { []
         }
     {offset
       caS3p: // global
           _saQXl::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caS5A; else goto caS69;
       caS5A: // global
           I64[Sp] = block_caS3u_info;
           R1 = P64[_saQXl::P64 + 8];
           if (R1 & 7 != 0) goto uaS6Y; else goto caS3v;
       uaS6Y: // global
           call _caS3u(R1) args: 0, res: 0, upd: 0;
       caS3v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caS69: // global
           I64[Sp + 24] = block_caS67_info;
           R5 = _saQXl::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS3p_info" {
     block_caS3p_info:
         const _caS3p;
         const 195;
         const 30;
 },
 _caS3u() //  [R1]
         { []
         }
     {offset
       caS3u: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS5D; else goto caS5C;
       caS5D: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caS5C: // global
           _saQX4::I64 = I64[Sp + 8];
           _saQYK::P64 = P64[R1 + 7];
           _saQYM::P64 = P64[R1 + 15];
           _saQYL::I64 = I64[R1 + 23];
           _saQYN::I64 = _saQX4::I64 & (I64[_saQYK::P64 + 8] - 1);
           _saQYS::P64 = P64[(_saQYK::P64 + 24) + (_saQYN::I64 << 3)];
           I64[Hp - 8] = $wgo_saQYT_info;
           I64[Hp] = _saQX4::I64;
           I64[Sp - 8] = block_caS5E_info;
           R2 = _saQYS::P64;
           R1 = Hp - 7;
           I64[Sp] = _saQYN::I64;
           P64[Sp + 8] = _saQYM::P64;
           I64[Sp + 16] = _saQYL::I64;
           P64[Sp + 24] = _saQYK::P64;
           Sp = Sp - 8;
           call $wgo_saQYT_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS3u_info" {
     block_caS3u_info:
         const _caS3u;
         const 451;
         const 30;
 },
 _caS5E() //  [R1, R2, R3]
         { []
         }
     {offset
       caS5E: // global
           I64[Sp - 16] = block_caS5G_info;
           _saQZ7::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saQZ7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaS73; else goto caS5I;
       uaS73: // global
           call _caS5G(R1) args: 0, res: 0, upd: 0;
       caS5I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS5E_info" {
     block_caS5E_info:
         const _caS5E;
         const 324;
         const 30;
 },
 _caS5G() //  [R1]
         { []
         }
     {offset
       caS5G: // global
           if (R1 & 7 == 1) goto uaS6K; else goto caS5T;
       uaS6K: // global
           Sp = Sp + 56;
           call _caS60() args: 0, res: 0, upd: 0;
       caS5T: // global
           _saQYK::P64 = P64[Sp + 48];
           _saQYN::I64 = I64[Sp + 24];
           _saQZ7::P64 = P64[Sp + 16];
           _saQZ9::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saQYK::P64 + 24) + (_saQYN::I64 << 3)] = _saQZ9::P64;
           I64[_saQYK::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saQYK::P64 + 24) + ((I64[_saQYK::P64 + 8] << 3) + (_saQYN::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caS5R_info;
           R1 = _saQZ7::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaS74; else goto caS5U;
       uaS74: // global
           call _caS5R(R1) args: 0, res: 0, upd: 0;
       caS5U: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS5G_info" {
     block_caS5G_info:
         const _caS5G;
         const 1286;
         const 30;
 },
 _caS5R() //  [R1]
         { []
         }
     {offset
       caS5R: // global
           if (R1 & 7 == 1) goto uaS6L; else goto caS64;
       uaS6L: // global
           Sp = Sp + 32;
           call _caS60() args: 0, res: 0, upd: 0;
       caS64: // global
           _saQYL::I64 = I64[Sp + 16];
           _saQYM::P64 = P64[Sp + 8];
           I64[_saQYL::I64] = I64[_saQYL::I64] - 1;
           call MO_Touch(_saQYM::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS5R_info" {
     block_caS5R_info:
         const _caS5R;
         const 387;
         const 30;
 },
 _caS60() //  []
         { []
         }
     {offset
       caS60: // global
           R1 = lvl21_raLJJ_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caS67() //  []
         { []
         }
     {offset
       caS67: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS67_info" {
     block_caS67_info:
         const _caS67;
         const 0;
         const 30;
 },
 io1_saQZs_entry() //  [R1, R2]
         { []
         }
     {offset
       caS7g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caS7h; else goto caS7i;
       caS7h: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caS7i: // global
           I64[Sp - 16] = block_caS7d_info;
           _saQXk::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saQXk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaS7m; else goto caS7e;
       uaS7m: // global
           call _caS7d(R1) args: 0, res: 0, upd: 0;
       caS7e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io1_saQZs_info" {
     io1_saQZs_info:
         const io1_saQZs_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaRfY_srt+384;
 },
 _caS7d() //  [R1]
         { []
         }
     {offset
       caS7d: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saQXk_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS7d_info" {
     block_caS7d_info:
         const _caS7d;
         const 1;
         const 4294967326;
         const SaRfY_srt+384;
 },
 sat_saQZO_entry() //  [R1]
         { []
         }
     {offset
       caS7z: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caS7A; else goto caS7B;
       caS7A: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caS7B: // global
           I64[Sp - 8] = block_caS7x_info;
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           Sp = Sp - 8;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQZO_info" {
     sat_saQZO_info:
         const sat_saQZO_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+392;
 },
 _caS7x() //  []
         { []
         }
     {offset
       caS7x: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS7x_info" {
     block_caS7x_info:
         const _caS7x;
         const 0;
         const 30;
 },
 sat_saQZJ_entry() //  [R1]
         { []
         }
     {offset
       caS7R: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caS7S; else goto caS7T;
       caS7S: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caS7T: // global
           I64[Sp - 8] = block_caS7I_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_readTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQZJ_info" {
     sat_saQZJ_info:
         const sat_saQZJ_entry;
         const 1;
         const 4294967305;
         const 4294967299;
         const SaRfY_srt+400;
 },
 _caS7I() //  [R1]
         { []
         }
     {offset
       caS7I: // global
           I64[Sp] = block_caS7K_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaS8m; else goto caS7L;
       uaS8m: // global
           call _caS7K(R1) args: 0, res: 0, upd: 0;
       caS7L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS7I_info" {
     block_caS7I_info:
         const _caS7I;
         const 0;
         const 4294967326;
         const SaRfY_srt+400;
 },
 _caS7K() //  [R1]
         { []
         }
     {offset
       caS7K: // global
           if (R1 & 7 == 1) goto caS7O; else goto caS7P;
       caS7O: // global
           Sp = Sp + 8;
           call stg_retry#() args: 8, res: 0, upd: 8;
       caS7P: // global
           I64[Sp] = block_caS80_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaS8n; else goto caS82;
       uaS8n: // global
           call _caS80(R1) args: 0, res: 0, upd: 0;
       caS82: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS7K_info" {
     block_caS7K_info:
         const _caS7K;
         const 0;
         const 4294967326;
         const SaRfY_srt+400;
 },
 _caS80() //  [R1]
         { []
         }
     {offset
       caS80: // global
           if (I64[R1 + 7] & 4 == 0) goto caS8i; else goto caS8c;
       caS8i: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caS8c: // global
           R1 = lvl19_raLJH_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS80_info" {
     block_caS80_info:
         const _caS80;
         const 0;
         const 4294967326;
         const SaRfY_srt+400;
 },
 sat_saQZZ_entry() //  [R1, R2]
         { []
         }
     {offset
       caS8z: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caS8A; else goto caS8B;
       caS8A: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caS8B: // global
           I64[Sp - 16] = block_caS8x_info;
           _saQZW::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saQZW::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQZZ_info" {
     sat_saQZZ_info:
         const sat_saQZZ_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caS8x() //  []
         { []
         }
     {offset
       caS8x: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS8x_info" {
     block_caS8x_info:
         const _caS8x;
         const 1;
         const 30;
 },
 sat_saQZU_entry() //  [R1]
         { []
         }
     {offset
       caS8I: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saQZs_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQZU_info" {
     sat_saQZU_info:
         const sat_saQZU_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 sat_saQZV_entry() //  [R1]
         { []
         }
     {offset
       caS8Q: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saQZV_info" {
     sat_saQZV_info:
         const sat_saQZV_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR0b_entry() //  [R1]
         { []
         }
     {offset
       caS9f: // global
           _saR0b::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caS9g; else goto caS9h;
       caS9h: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caS9j; else goto caS9i;
       caS9j: // global
           HpAlloc = 16;
           goto caS9g;
       caS9g: // global
           R1 = _saR0b::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caS9i: // global
           _saQWv::P64 = P64[_saR0b::P64 + 7];
           _saQX5::P64 = P64[_saR0b::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saQX5::P64;
           I64[Sp - 8] = block_caS9d_info;
           R2 = Hp - 6;
           R1 = _saQWv::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0b_info" {
     sat_saR0b_info:
         const sat_saR0b_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caS9d() //  []
         { []
         }
     {offset
       caS9d: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS9d_info" {
     block_caS9d_info:
         const _caS9d;
         const 0;
         const 30;
 },
 sat_saR0s_entry() //  [R1, R2]
         { []
         }
     {offset
       caS9A: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caS9B; else goto caS9C;
       caS9B: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caS9C: // global
           I64[Sp - 16] = block_caS9y_info;
           _saR0p::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saR0p::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0s_info" {
     sat_saR0s_info:
         const sat_saR0s_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caS9y() //  []
         { []
         }
     {offset
       caS9y: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS9y_info" {
     block_caS9y_info:
         const _caS9y;
         const 1;
         const 30;
 },
 sat_saR0n_entry() //  [R1]
         { []
         }
     {offset
       caS9J: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saQZs_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0n_info" {
     sat_saR0n_info:
         const sat_saR0n_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 sat_saR0o_entry() //  [R1]
         { []
         }
     {offset
       caS9R: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0o_info" {
     sat_saR0o_info:
         const sat_saR0o_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR0x_entry() //  [R1]
         { []
         }
     {offset
       caS9Y: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caS9Z; else goto caSa0;
       caS9Z: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSa0: // global
           I64[Sp - 24] = block_caS9r_info;
           _saQXj::P64 = P64[R1 + 7];
           _saQZs::P64 = P64[R1 + 15];
           R1 = _saQXj::P64;
           P64[Sp - 16] = _saQXj::P64;
           P64[Sp - 8] = _saQZs::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0x_info" {
     sat_saR0x_info:
         const sat_saR0x_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 _caS9r() //  [R1]
         { []
         }
     {offset
       caS9r: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSa3; else goto caSa2;
       caSa3: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSa2: // global
           I64[Hp - 56] = sat_saR0s_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saR0n_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saR0o_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caS9U_info;
           R2 = Hp - 54;
           _saR0m::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saR0m::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS9r_info" {
     block_caS9r_info:
         const _caS9r;
         const 2;
         const 4294967326;
         const SaRfY_srt+384;
 },
 _caS9U() //  [R1]
         { []
         }
     {offset
       caS9U: // global
           _saQXj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caS9W_info;
           R2 = P64[Sp + 16];
           _saR0v::P64 = R1;
           R1 = _saQXj::P64;
           P64[Sp + 16] = _saR0v::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS9U_info" {
     block_caS9U_info:
         const _caS9U;
         const 2;
         const 30;
 },
 _caS9W() //  []
         { []
         }
     {offset
       caS9W: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caS9W_info" {
     block_caS9W_info:
         const _caS9W;
         const 1;
         const 30;
 },
 sat_saR0I_entry() //  [R1]
         { []
         }
     {offset
       caSaq: // global
           _saR0I::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caSar; else goto caSas;
       caSas: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSau; else goto caSat;
       caSau: // global
           HpAlloc = 16;
           goto caSar;
       caSar: // global
           R1 = _saR0I::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSat: // global
           _saQWv::P64 = P64[_saR0I::P64 + 7];
           _saQX5::P64 = P64[_saR0I::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saQX5::P64;
           I64[Sp - 8] = block_caSao_info;
           R2 = Hp - 6;
           R1 = _saQWv::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0I_info" {
     sat_saR0I_info:
         const sat_saR0I_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caSao() //  []
         { []
         }
     {offset
       caSao: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSao_info" {
     block_caSao_info:
         const _caSao;
         const 0;
         const 30;
 },
 sat_saR0Y_entry() //  [R1, R2]
         { []
         }
     {offset
       caSaG: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSaH; else goto caSaI;
       caSaH: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSaI: // global
           I64[Sp - 16] = block_caSaE_info;
           _saR0V::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saR0V::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0Y_info" {
     sat_saR0Y_info:
         const sat_saR0Y_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caSaE() //  []
         { []
         }
     {offset
       caSaE: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSaE_info" {
     block_caSaE_info:
         const _caSaE;
         const 1;
         const 30;
 },
 sat_saR0T_entry() //  [R1]
         { []
         }
     {offset
       caSaP: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saQZs_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0T_info" {
     sat_saR0T_info:
         const sat_saR0T_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 sat_saR0U_entry() //  [R1]
         { []
         }
     {offset
       caSaX: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR0U_info" {
     sat_saR0U_info:
         const sat_saR0U_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR1a_entry() //  [R1]
         { []
         }
     {offset
       caSbm: // global
           _saR1a::P64 = R1;
           if ((Sp + -8) < SpLim) (likely: False) goto caSbn; else goto caSbo;
       caSbo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSbq; else goto caSbp;
       caSbq: // global
           HpAlloc = 16;
           goto caSbn;
       caSbn: // global
           R1 = _saR1a::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSbp: // global
           _saQWv::P64 = P64[_saR1a::P64 + 7];
           _saQX5::P64 = P64[_saR1a::P64 + 15];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saQX5::P64;
           I64[Sp - 8] = block_caSbk_info;
           R2 = Hp - 6;
           R1 = _saQWv::P64;
           Sp = Sp - 8;
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR1a_info" {
     sat_saR1a_info:
         const sat_saR1a_entry;
         const 2;
         const 11;
         const 4294967299;
 },
 _caSbk() //  []
         { []
         }
     {offset
       caSbk: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSbk_info" {
     block_caSbk_info:
         const _caSbk;
         const 0;
         const 30;
 },
 io_saQWr_entry() //  [R1]
         { []
         }
     {offset
       caSbw: // global
           if ((Sp + -128) < SpLim) (likely: False) goto caSbx; else goto caSby;
       caSbx: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSby: // global
           I64[Sp - 24] = block_caRZU_info;
           _saQWl::P64 = P64[R1 + 7];
           _saQWm::P64 = P64[R1 + 15];
           R1 = GHC.Base.Nothing_closure+1;
           P64[Sp - 16] = _saQWl::P64;
           P64[Sp - 8] = _saQWm::P64;
           Sp = Sp - 24;
           call stg_newTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saQWr_info" {
     io_saQWr_info:
         const io_saQWr_entry;
         const 2;
         const 4136053506059;
         const 4294967299;
         const SaRfY_srt+328;
 },
 _caRZU() //  [R1]
         { []
         }
     {offset
       caRZU: // global
           I64[Sp - 8] = block_caRZW_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Thread.getSystemEventManager1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRZU_info" {
     block_caRZU_info:
         const _caRZU;
         const 2;
         const 4136053506078;
         const SaRfY_srt+328;
 },
 _caRZW() //  [R1]
         { []
         }
     {offset
       caRZW: // global
           I64[Sp] = block_caRZY_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaSdT; else goto caRZZ;
       uaSdT: // global
           call _caRZY(R1) args: 0, res: 0, upd: 0;
       caRZZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRZW_info" {
     block_caRZW_info:
         const _caRZW;
         const 3;
         const 4127463571486;
         const SaRfY_srt+328;
 },
 _caRZY() //  [R1]
         { []
         }
     {offset
       caRZY: // global
           if (R1 & 7 == 1) goto caSbt; else goto caSbu;
       caSbt: // global
           Sp = Sp + 32;
           call lvl24_raLJM_entry() args: 8, res: 0, upd: 8;
       caSbu: // global
           I64[Sp] = block_caS04_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaSdU; else goto caS05;
       uaSdU: // global
           call _caS04(R1) args: 0, res: 0, upd: 0;
       caS05: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caRZY_info" {
     block_caRZY_info:
         const _caRZY;
         const 3;
         const 4127463571486;
         const SaRfY_srt+328;
 },
 _caS04() //  [R1]
         { []
         }
     {offset
       caS04: // global
           I64[Sp - 40] = block_caS09_info;
           _saQWC::P64 = R1;
           _saQWD::P64 = P64[R1 + 7];
           _saQWF::P64 = P64[R1 + 23];
           _saQWH::P64 = P64[R1 + 31];
           _saQWJ::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _saQWD::P64;
           P64[Sp - 24] = _saQWF::P64;
           P64[Sp - 16] = _saQWH::P64;
           P64[Sp - 8] = _saQWJ::P64;
           P64[Sp] = _saQWC::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaSdV; else goto caS0a;
       uaSdV: // global
           call _caS09(R1) args: 0, res: 0, upd: 0;
       caS0a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS04_info" {
     block_caS04_info:
         const _caS04;
         const 3;
         const 3852585664542;
         const SaRfY_srt+328;
 },
 _caS09() //  [R1]
         { []
         }
     {offset
       caS09: // global
           I64[Sp - 8] = block_caS0e_info;
           _saQWQ::P64 = R1;
           _saQWR::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saQWR::I64;
           P64[Sp + 16] = _saQWQ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSdW; else goto caS0f;
       uaSdW: // global
           call _caS0e(R1) args: 0, res: 0, upd: 0;
       caS0f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS09_info" {
     block_caS09_info:
         const _caS09;
         const 8;
         const 3852585664542;
         const SaRfY_srt+328;
 },
 _caS0e() //  [R1]
         { []
         }
     {offset
       caS0e: // global
           I64[Sp - 8] = block_caS0j_info;
           _saQWS::P64 = R1;
           _saQWT::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saQWT::I64;
           P64[Sp + 16] = _saQWS::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSdX; else goto caS0k;
       uaSdX: // global
           call _caS0j(R1) args: 0, res: 0, upd: 0;
       caS0k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS0e_info" {
     block_caS0e_info:
         const _caS0e;
         const 73;
         const 3852585664542;
         const SaRfY_srt+328;
 },
 _caS0j() //  [R1]
         { []
         }
     {offset
       caS0j: // global
           _saQWm::P64 = P64[Sp + 80];
           _saQWV::P64 = P64[R1 + 7];
           _saQWX::P64 = P64[R1 + 23];
           _saQWY::P64 = P64[R1 + 31];
           (_saQX2::I64) = call MO_AtomicRMW W64 AMO_Add(P64[Sp + 48] + 16, 1);
           I64[Sp - 16] = block_caS0q_info;
           R1 = _saQWm::P64;
           I64[Sp - 8] = _saQX2::I64;
           P64[Sp] = _saQWY::P64;
           P64[Sp + 48] = _saQWX::P64;
           P64[Sp + 80] = _saQWV::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSdY; else goto caS0r;
       uaSdY: // global
           call _caS0q(R1) args: 0, res: 0, upd: 0;
       caS0r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS0j_info" {
     block_caS0j_info:
         const _caS0j;
         const 202;
         const 3852585664542;
         const SaRfY_srt+328;
 },
 _caS0q() //  [R1]
         { []
         }
     {offset
       caS0q: // global
           I64[Sp - 8] = block_caS0v_info;
           _saQX3::P64 = R1;
           _saQX4::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saQX4::I64;
           P64[Sp + 88] = _saQX3::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSdZ; else goto caS0w;
       uaSdZ: // global
           call _caS0v(R1) args: 0, res: 0, upd: 0;
       caS0w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS0q_info" {
     block_caS0q_info:
         const _caS0q;
         const 844;
         const 3852585664542;
         const SaRfY_srt+328;
 },
 _caS0v() //  [R1]
         { []
         }
     {offset
       caS0v: // global
           I64[Sp - 16] = block_caS0A_info;
           I64[Sp - 8] = I64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS0v_info" {
     block_caS0v_info:
         const _caS0v;
         const 1741;
         const 3852585664542;
         const SaRfY_srt+328;
 },
 _caS0A() //  [R1]
         { []
         }
     {offset
       caS0A: // global
           _saQWQ::P64 = P64[Sp + 72];
           _saQWR::I64 = I64[Sp + 56];
           _saQWS::P64 = P64[Sp + 64];
           _saQXa::I64 = I64[Sp + 24] & 31;
           if (%MO_S_Gt_W64(_saQWR::I64,
                            _saQXa::I64)) goto caSbO; else goto caSdB;
       caSdB: // global
           if (%MO_S_Gt_W64(_saQXa::I64,
                            I64[Sp + 48])) goto caSbO; else goto caSbP;
       caSbO: // global
           R4 = _saQXa::I64;
           R3 = _saQWQ::P64;
           R2 = _saQWS::P64;
           Sp = Sp + 128;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caSbP: // global
           _saQXh::P64 = P64[P64[Sp + 80] + ((_saQXa::I64 - _saQWR::I64 << 3) + 24)];
           I64[Sp] = block_caS0Q_info;
           _saQX9::I64 = R1;
           R1 = _saQXh::P64;
           I64[Sp + 80] = _saQX9::I64;
           if (R1 & 7 != 0) goto uaSe0; else goto caS0R;
       uaSe0: // global
           call _caS0Q(R1) args: 0, res: 0, upd: 0;
       caS0R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS0A_info" {
     block_caS0A_info:
         const _caS0A;
         const 6991;
         const 3852585664542;
         const SaRfY_srt+328;
 },
 _caS0Q() //  [R1]
         { []
         }
     {offset
       caS0Q: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caSbS; else goto caSbR;
       caSbS: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSbR: // global
           _saQXj::P64 = P64[R1 + 7];
           I64[Hp - 104] = $wio_saQXk_info;
           P64[Hp - 96] = P64[Sp + 104];
           P64[Hp - 88] = P64[Sp + 120];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 112];
           I64[Hp - 56] = I64[Sp + 32];
           I64[Hp - 48] = I64[Sp + 24];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io1_saQZs_info;
           P64[Hp - 24] = Hp - 102;
           _caS78::P64 = Hp - 30;
           _saQZQ::I64 = I64[Sp + 80];
           if (_saQZQ::I64 != 0) goto uaSdL; else goto caScx;
       uaSdL: // global
           if (_saQZQ::I64 != 1) goto caSbY; else goto caSd2;
       caSbY: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caS8q_info;
           R1 = _saQXj::P64;
           P64[Sp + 112] = _saQXj::P64;
           P64[Sp + 120] = _caS78::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caSd2: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caSax_info;
           R1 = _saQXj::P64;
           P64[Sp + 112] = _saQXj::P64;
           P64[Sp + 120] = _caS78::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caScx: // global
           I64[Hp - 16] = sat_saR0x_info;
           P64[Hp - 8] = _saQXj::P64;
           P64[Hp] = _caS78::P64;
           I64[Sp + 8] = block_caSa6_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS0Q_info" {
     block_caS0Q_info:
         const _caS0Q;
         const 64335;
         const 30064771102;
         const SaRfY_srt+384;
 },
 _caS8q() //  [R1]
         { []
         }
     {offset
       caS8q: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSc1; else goto caSc0;
       caSc1: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSc0: // global
           I64[Hp - 56] = sat_saQZZ_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saQZU_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saQZV_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caS8T_info;
           R2 = Hp - 54;
           _saQZT::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saQZT::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS8q_info" {
     block_caS8q_info:
         const _caS8q;
         const 65422;
         const 30064771102;
         const SaRfY_srt+384;
 },
 _caS8T() //  [R1]
         { []
         }
     {offset
       caS8T: // global
           I64[Sp] = block_caS8V_info;
           R2 = P64[Sp + 112];
           _saR02::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saR02::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS8T_info" {
     block_caS8T_info:
         const _caS8T;
         const 65422;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caS8V() //  []
         { []
         }
     {offset
       caS8V: // global
           I64[Sp] = block_caS8X_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaSe2; else goto caS8Y;
       uaSe2: // global
           call _caS8X(R1) args: 0, res: 0, upd: 0;
       caS8Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS8V_info" {
     block_caS8V_info:
         const _caS8V;
         const 327566;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caS8X() //  [R1]
         { []
         }
     {offset
       caS8X: // global
           I64[Sp] = block_caS92_info;
           _saR05::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saR05::P64;
           if (R1 & 7 != 0) goto uaSe3; else goto caS93;
       uaSe3: // global
           call _caS92(R1) args: 0, res: 0, upd: 0;
       caS93: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS8X_info" {
     block_caS8X_info:
         const _caS8X;
         const 851854;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caS92() //  [R1]
         { []
         }
     {offset
       caS92: // global
           if (R1 & 7 == 1) goto caSc9; else goto caScp;
       caSc9: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caScc; else goto caScb;
       caScc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caScb: // global
           I64[Hp - 16] = sat_saR0b_info;
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caSc5_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
       caScp: // global
           I64[Sp + 8] = block_caScn_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaSe4; else goto caScq;
       uaSe4: // global
           call _caScn(R1) args: 0, res: 0, upd: 0;
       caScq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caS92_info" {
     block_caS92_info:
         const _caS92;
         const 327566;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSc5() //  []
         { []
         }
     {offset
       caSc5: // global
           I64[Sp] = block_caSc7_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaSeb; else goto caSce;
       uaSeb: // global
           call _caSc7(R1) args: 0, res: 0, upd: 0;
       caSce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSc5_info" {
     block_caSc5_info:
         const _caSc5;
         const 163789;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSc7() //  [R1]
         { []
         }
     {offset
       caSc7: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSck; else goto caScj;
       caSck: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caScj: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caS7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSc7_info" {
     block_caSc7_info:
         const _caSc7;
         const 425933;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caScn() //  [R1]
         { []
         }
     {offset
       caScn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caScw; else goto caScv;
       caScw: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caScv: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caS7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caScn_info" {
     block_caScn_info:
         const _caScn;
         const 425933;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSax() //  [R1]
         { []
         }
     {offset
       caSax: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSd5; else goto caSd4;
       caSd5: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSd4: // global
           I64[Hp - 56] = sat_saR0Y_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saR0T_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saR0U_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caSb0_info;
           R2 = Hp - 54;
           _saR0S::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saR0S::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSax_info" {
     block_caSax_info:
         const _caSax;
         const 65422;
         const 30064771102;
         const SaRfY_srt+384;
 },
 _caSb0() //  [R1]
         { []
         }
     {offset
       caSb0: // global
           I64[Sp] = block_caSb2_info;
           R2 = P64[Sp + 112];
           _saR11::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saR11::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSb0_info" {
     block_caSb0_info:
         const _caSb0;
         const 65422;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSb2() //  []
         { []
         }
     {offset
       caSb2: // global
           I64[Sp] = block_caSb4_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaSe8; else goto caSb5;
       uaSe8: // global
           call _caSb4(R1) args: 0, res: 0, upd: 0;
       caSb5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSb2_info" {
     block_caSb2_info:
         const _caSb2;
         const 327566;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSb4() //  [R1]
         { []
         }
     {offset
       caSb4: // global
           I64[Sp] = block_caSb9_info;
           _saR14::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saR14::P64;
           if (R1 & 7 != 0) goto uaSe9; else goto caSba;
       uaSe9: // global
           call _caSb9(R1) args: 0, res: 0, upd: 0;
       caSba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSb4_info" {
     block_caSb4_info:
         const _caSb4;
         const 851854;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSb9() //  [R1]
         { []
         }
     {offset
       caSb9: // global
           if (R1 & 7 == 1) goto caSdd; else goto caSdt;
       caSdd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSdg; else goto caSdf;
       caSdg: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSdf: // global
           I64[Hp - 16] = sat_saR1a_info;
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caSd9_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
       caSdt: // global
           I64[Sp + 8] = block_caSdr_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaSea; else goto caSdu;
       uaSea: // global
           call _caSdr(R1) args: 0, res: 0, upd: 0;
       caSdu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSb9_info" {
     block_caSb9_info:
         const _caSb9;
         const 327566;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSd9() //  []
         { []
         }
     {offset
       caSd9: // global
           I64[Sp] = block_caSdb_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaSeh; else goto caSdi;
       uaSeh: // global
           call _caSdb(R1) args: 0, res: 0, upd: 0;
       caSdi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSd9_info" {
     block_caSd9_info:
         const _caSd9;
         const 163789;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSdb() //  [R1]
         { []
         }
     {offset
       caSdb: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSdo; else goto caSdn;
       caSdo: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSdn: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caS7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSdb_info" {
     block_caSdb_info:
         const _caSdb;
         const 425933;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSdr() //  [R1]
         { []
         }
     {offset
       caSdr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSdA; else goto caSdz;
       caSdA: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSdz: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caS7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSdr_info" {
     block_caSdr_info:
         const _caSdr;
         const 425933;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSa6() //  [R1]
         { []
         }
     {offset
       caSa6: // global
           I64[Sp] = block_caSa8_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaSe5; else goto caSa9;
       uaSe5: // global
           call _caSa8(R1) args: 0, res: 0, upd: 0;
       caSa9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSa6_info" {
     block_caSa6_info:
         const _caSa6;
         const 851854;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSa8() //  [R1]
         { []
         }
     {offset
       caSa8: // global
           I64[Sp] = block_caSad_info;
           _saR0C::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saR0C::P64;
           if (R1 & 7 != 0) goto uaSe6; else goto caSae;
       uaSe6: // global
           call _caSad(R1) args: 0, res: 0, upd: 0;
       caSae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSa8_info" {
     block_caSa8_info:
         const _caSa8;
         const 851854;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caSad() //  [R1]
         { []
         }
     {offset
       caSad: // global
           if (R1 & 7 == 1) goto caScE; else goto caScU;
       caScE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caScH; else goto caScG;
       caScH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caScG: // global
           I64[Hp - 16] = sat_saR0I_info;
           P64[Hp - 8] = P64[Sp + 96];
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_caScA_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
       caScU: // global
           I64[Sp + 8] = block_caScS_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaSe7; else goto caScV;
       uaSe7: // global
           call _caScS(R1) args: 0, res: 0, upd: 0;
       caScV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSad_info" {
     block_caSad_info:
         const _caSad;
         const 327566;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caScA() //  []
         { []
         }
     {offset
       caScA: // global
           I64[Sp] = block_caScC_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaSee; else goto caScJ;
       uaSee: // global
           call _caScC(R1) args: 0, res: 0, upd: 0;
       caScJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caScA_info" {
     block_caScA_info:
         const _caScA;
         const 163789;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caScC() //  [R1]
         { []
         }
     {offset
       caScC: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caScP; else goto caScO;
       caScP: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caScO: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caS7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caScC_info" {
     block_caScC_info:
         const _caScC;
         const 425933;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caScS() //  [R1]
         { []
         }
     {offset
       caScS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSd1; else goto caSd0;
       caSd1: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSd0: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caS7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caScS_info" {
     block_caScS_info:
         const _caScS;
         const 425933;
         const 12884901918;
         const SaRfY_srt+392;
 },
 _caS7q() //  []
         { []
         }
     {offset
       caS7q: // global
           Hp = Hp + 64;
           _saQZz::P64 = P64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto caSbW; else goto caSbV;
       caSbW: // global
           HpAlloc = 64;
           I64[Sp - 8] = block_caS7p_info;
           R1 = _saQZz::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSbV: // global
           I64[Hp - 56] = sat_saQZO_info;
           P64[Hp - 48] = P64[Sp];
           P64[Hp - 40] = _saQZz::P64;
           I64[Hp - 32] = sat_saQZJ_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = Hp - 31;
           P64[Hp] = Hp - 55;
           R1 = Hp - 15;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caS7p() //  [R1]
         { []
         }
     {offset
       caS7p: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _caS7q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caS7p_info" {
     block_caS7p_info:
         const _caS7p;
         const 772;
         const 12884901918;
         const SaRfY_srt+392;
 },
 GHC.Event.Thread.threadWaitReadSTM1_entry() //  [R2, R3]
         { []
         }
     {offset
       caSeo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caSep; else goto caSeq;
       caSep: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.threadWaitReadSTM1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSeq: // global
           I64[Sp - 24] = block_caRZN_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitReadSTM1_info" {
     GHC.Event.Thread.threadWaitReadSTM1_info:
         const GHC.Event.Thread.threadWaitReadSTM1_entry;
         const 0;
         const 8534100017166;
         const 12884901903;
         const SaRfY_srt+328;
 },
 _caRZN() //  [R1]
         { []
         }
     {offset
       caRZN: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSet; else goto caSes;
       caSet: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caSes: // global
           I64[Hp - 16] = io_saQWr_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _caRZP::P64 = Hp - 15;
           if (R1 == 0) goto caSen; else goto caSem;
       caSen: // global
           R1 = _caRZP::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caSem: // global
           R1 = _caRZP::P64;
           Sp = Sp + 24;
           call io_saQWr_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caRZN_info" {
     block_caRZN_info:
         const _caRZN;
         const 2;
         const 4136053506078;
         const SaRfY_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.201727615 UTC

[section ""data" . threadWaitReadSTM2_raLJN_closure" {
     threadWaitReadSTM2_raLJN_closure:
         const threadWaitReadSTM2_raLJN_info;
         const 0;
 },
 threadWaitReadSTM2_raLJN_entry() //  [R2]
         { []
         }
     {offset
       caSoW: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtRead_closure;
           call GHC.Event.Thread.threadWaitReadSTM1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitReadSTM2_raLJN_info" {
     threadWaitReadSTM2_raLJN_info:
         const threadWaitReadSTM2_raLJN_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaRfY_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.205041887 UTC

[section ""data" . GHC.Event.Thread.threadWaitReadSTM_closure" {
     GHC.Event.Thread.threadWaitReadSTM_closure:
         const GHC.Event.Thread.threadWaitReadSTM_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitReadSTM_entry() //  [R2]
         { []
         }
     {offset
       caSp7: // global
           R2 = R2;
           call threadWaitReadSTM2_raLJN_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitReadSTM_info" {
     GHC.Event.Thread.threadWaitReadSTM_info:
         const GHC.Event.Thread.threadWaitReadSTM_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaRfY_srt+424;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.208809639 UTC

[section ""data" . threadWaitWriteSTM1_raLJO_closure" {
     threadWaitWriteSTM1_raLJO_closure:
         const threadWaitWriteSTM1_raLJO_info;
         const 0;
 },
 threadWaitWriteSTM1_raLJO_entry() //  [R2]
         { []
         }
     {offset
       caSpi: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtWrite_closure;
           call GHC.Event.Thread.threadWaitReadSTM1_entry(R3,
                                                          R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitWriteSTM1_raLJO_info" {
     threadWaitWriteSTM1_raLJO_info:
         const threadWaitWriteSTM1_raLJO_entry;
         const 0;
         const 38654705678;
         const 8589934597;
         const SaRfY_srt+408;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.212123374 UTC

[section ""data" . GHC.Event.Thread.threadWaitWriteSTM_closure" {
     GHC.Event.Thread.threadWaitWriteSTM_closure:
         const GHC.Event.Thread.threadWaitWriteSTM_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitWriteSTM_entry() //  [R2]
         { []
         }
     {offset
       caSpt: // global
           R2 = R2;
           call threadWaitWriteSTM1_raLJO_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitWriteSTM_info" {
     GHC.Event.Thread.threadWaitWriteSTM_info:
         const GHC.Event.Thread.threadWaitWriteSTM_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaRfY_srt+440;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.215705248 UTC

[section ""cstring" . lvl25_raLJP_bytes" {
     lvl25_raLJP_bytes:
         I8[] [116,104,114,101,97,100,87,97,105,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.218130089 UTC

[section ""data" . lvl26_raLJQ_closure" {
     lvl26_raLJQ_closure:
         const lvl26_raLJQ_info;
         const 0;
         const 0;
         const 0;
 },
 lvl26_raLJQ_entry() //  [R1]
         { []
         }
     {offset
       caSpH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSpI; else goto caSpJ;
       caSpI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caSpJ: // global
           (_caSpE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caSpE::I64 == 0) goto caSpG; else goto caSpF;
       caSpG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caSpF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caSpE::I64;
           R2 = lvl25_raLJP_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl26_raLJQ_info" {
     lvl26_raLJQ_info:
         const lvl26_raLJQ_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.222402832 UTC

[section ""data" . lvl27_raLJR_closure" {
     lvl27_raLJR_closure:
         const lvl27_raLJR_info;
         const 0;
         const 0;
         const 0;
 },
 lvl27_raLJR_entry() //  [R1]
         { []
         }
     {offset
       caSpY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSpZ; else goto caSq0;
       caSpZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caSq0: // global
           (_caSpV::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caSpV::I64 == 0) goto caSpX; else goto caSpW;
       caSpX: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caSpW: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caSpV::I64;
           R5 = GHC.Base.Nothing_closure+1;
           R4 = GHC.Base.Nothing_closure+1;
           R3 = 9;
           R2 = lvl26_raLJQ_closure;
           Sp = Sp - 16;
           call Foreign.C.Error.$werrnoToIOError_entry(R5,
                                                       R4,
                                                       R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl27_raLJR_info" {
     lvl27_raLJR_info:
         const lvl27_raLJR_entry;
         const 0;
         const 17596481011733;
         const SaRfY_srt+352;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.226461299 UTC

[section ""data" . lvl28_raLJS_closure" {
     lvl28_raLJS_closure:
         const lvl28_raLJS_info;
         const 0;
         const 0;
         const 0;
 },
 lvl28_raLJS_entry() //  [R1]
         { []
         }
     {offset
       caSqh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSqi; else goto caSqj;
       caSqi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caSqj: // global
           (_caSqe::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caSqe::I64 == 0) goto caSqg; else goto caSqf;
       caSqg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caSqf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caSqe::I64;
           R2 = lvl27_raLJR_closure;
           Sp = Sp - 16;
           call GHC.IO.Exception.$fExceptionIOException_$ctoException_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl28_raLJS_info" {
     lvl28_raLJS_info:
         const lvl28_raLJS_entry;
         const 0;
         const 8800387989525;
         const SaRfY_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.266990292 UTC

[section ""data" . GHC.Event.Thread.threadWaitRead1_closure" {
     GHC.Event.Thread.threadWaitRead1_closure:
         const GHC.Event.Thread.threadWaitRead1_info;
         const 0;
 },
 lvl31_saR2l_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caSs7: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caSs8; else goto caSs9;
       caSs8: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSs9: // global
           I64[Sp - 8] = block_caSs5_info;
           R2 = R3;
           R1 = P64[R1 + 5];
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl31_saR2l_info" {
     lvl31_saR2l_info:
         const lvl31_saR2l_entry;
         const 1;
         const 9;
         const 12884901903;
 },
 _caSs5() //  []
         { []
         }
     {offset
       caSs5: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSs5_info" {
     block_caSs5_info:
         const _caSs5;
         const 0;
         const 30;
 },
 $wgo_saR2Z_entry() //  [R1, R2]
         { []
         }
     {offset
       caStg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caSth; else goto caSti;
       caSth: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSti: // global
           I64[Sp - 24] = block_caSt9_info;
           _saR2Z::P64 = R1;
           _saR22::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saR22::I64;
           P64[Sp - 8] = _saR2Z::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaStF; else goto caSta;
       uaStF: // global
           call _caSt9(R1) args: 0, res: 0, upd: 0;
       caSta: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saR2Z_info" {
     $wgo_saR2Z_info:
         const $wgo_saR2Z_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caSt9() //  [R1]
         { []
         }
     {offset
       caSt9: // global
           if (R1 & 7 == 1) goto caStd; else goto caSte;
       caStd: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSte: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caStq; else goto caStp;
       caStq: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caStp: // global
           _saR33::P64 = P64[R1 + 6];
           _saR34::P64 = P64[R1 + 14];
           _saR32::I64 = I64[R1 + 22];
           if (_saR32::I64 == I64[Sp + 8]) goto caStE; else goto caSty;
       caStE: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saR33::P64;
           R3 = _saR34::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSty: // global
           Hp = Hp - 16;
           I64[Sp] = block_caStu_info;
           R2 = _saR34::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saR33::P64;
           I64[Sp + 16] = _saR32::I64;
           call $wgo_saR2Z_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSt9_info" {
     block_caSt9_info:
         const _caSt9;
         const 66;
         const 30;
 },
 _caStu() //  [R1, R2, R3]
         { []
         }
     {offset
       caStu: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caStB; else goto caStA;
       caStB: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caStA: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caStu_info" {
     block_caStu_info:
         const _caStu;
         const 130;
         const 30;
 },
 $wgo_saR3O_entry() //  [R1, R2]
         { []
         }
     {offset
       caSuq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caSur; else goto caSus;
       caSur: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSus: // global
           I64[Sp - 24] = block_caSuj_info;
           _saR3O::P64 = R1;
           _saR22::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saR22::I64;
           P64[Sp - 8] = _saR3O::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaSuP; else goto caSuk;
       uaSuP: // global
           call _caSuj(R1) args: 0, res: 0, upd: 0;
       caSuk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saR3O_info" {
     $wgo_saR3O_info:
         const $wgo_saR3O_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caSuj() //  [R1]
         { []
         }
     {offset
       caSuj: // global
           if (R1 & 7 == 1) goto caSun; else goto caSuo;
       caSun: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSuo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSuA; else goto caSuz;
       caSuA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSuz: // global
           _saR3S::P64 = P64[R1 + 6];
           _saR3T::P64 = P64[R1 + 14];
           _saR3R::I64 = I64[R1 + 22];
           if (_saR3R::I64 == I64[Sp + 8]) goto caSuO; else goto caSuI;
       caSuO: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saR3S::P64;
           R3 = _saR3T::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSuI: // global
           Hp = Hp - 16;
           I64[Sp] = block_caSuE_info;
           R2 = _saR3T::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saR3S::P64;
           I64[Sp + 16] = _saR3R::I64;
           call $wgo_saR3O_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSuj_info" {
     block_caSuj_info:
         const _caSuj;
         const 66;
         const 30;
 },
 _caSuE() //  [R1, R2, R3]
         { []
         }
     {offset
       caSuE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caSuL; else goto caSuK;
       caSuL: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caSuK: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSuE_info" {
     block_caSuE_info:
         const _caSuE;
         const 130;
         const 30;
 },
 $wio_saR2i_entry() //  [R1, R2]
         { []
         }
     {offset
       caSuU: // global
           _saR2j::P64 = R2;
           _saR2i::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto caSuV; else goto caSuW;
       caSuW: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caSuY; else goto caSuX;
       caSuY: // global
           HpAlloc = 80;
           goto caSuV;
       caSuV: // global
           R2 = _saR2j::P64;
           R1 = _saR2i::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSuX: // global
           _saR1t::P64 = P64[_saR2i::P64 + 6];
           _saR1T::P64 = P64[_saR2i::P64 + 14];
           _saR1V::P64 = P64[_saR2i::P64 + 22];
           _saR1W::P64 = P64[_saR2i::P64 + 30];
           _saR21::P64 = P64[_saR2i::P64 + 38];
           _saR20::I64 = I64[_saR2i::P64 + 46];
           _saR22::I64 = I64[_saR2i::P64 + 54];
           _saR24::I64 = I64[_saR2i::P64 + 62];
           I64[Hp - 72] = lvl31_saR2l_info;
           P64[Hp - 64] = _saR1t::P64;
           I64[Hp - 56] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 48] = Hp - 69;
           I64[Hp - 40] = _saR22::I64;
           I64[Hp - 32] = _saR20::I64;
           I64[Hp - 24] = _saR24::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 64] = block_caSrN_info;
           R5 = _saR2j::P64;
           R4 = Hp - 14;
           R3 = _saR22::I64;
           R2 = GHC.Base.++_closure+2;
           P64[Sp - 56] = _saR1T::P64;
           P64[Sp - 48] = _saR1V::P64;
           P64[Sp - 40] = _saR1W::P64;
           P64[Sp - 32] = _saR21::P64;
           I64[Sp - 24] = _saR22::I64;
           I64[Sp - 16] = _saR24::I64;
           P64[Sp - 8] = _saR2j::P64;
           Sp = Sp - 64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saR2i_info" {
     $wio_saR2i_info:
         const $wio_saR2i_entry;
         const 12884901893;
         const 4294967304;
         const 8589934597;
         const SaRfY_srt+384;
 },
 _caSrN() //  [R1]
         { []
         }
     {offset
       caSrN: // global
           I64[Sp - 8] = block_caSrR_info;
           _saR2u::P64 = R1;
           R1 = R1;
           P64[Sp] = _saR2u::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSxi; else goto caSrS;
       uaSxi: // global
           call _caSrR(R1) args: 0, res: 0, upd: 0;
       caSrS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSrN_info" {
     block_caSrN_info:
         const _caSrN;
         const 3079;
         const 4294967326;
         const SaRfY_srt+384;
 },
 _caSrR() //  [R1]
         { []
         }
     {offset
       caSrR: // global
           if (R1 & 7 == 1) goto caSuR; else goto caSuS;
       caSuR: // global
           I64[Sp] = 0;
           P64[Sp - 8] = GHC.Event.Internal.$fMonoidEventLifetime1_closure;
           Sp = Sp - 8;
           call _saR2v() args: 0, res: 0, upd: 0;
       caSuS: // global
           I64[Sp] = block_caSrX_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSrR_info" {
     block_caSrR_info:
         const _caSrR;
         const 6152;
         const 4294967326;
         const SaRfY_srt+384;
 },
 _caSrX() //  [R1]
         { []
         }
     {offset
       caSrX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSwR; else goto caSwQ;
       caSwR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caSwQ: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           P64[Sp - 8] = Hp - 7;
           I64[Sp] = R1;
           Sp = Sp - 8;
           call _saR2v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSrX_info" {
     block_caSrX_info:
         const _caSrX;
         const 6152;
         const 30;
 },
 _saR2v() //  []
         { []
         }
     {offset
       saR2v: // global
           _saR2x::P64 = P64[Sp];
           I64[Sp] = block_caSse_info;
           R1 = _saR2x::P64;
           if (R1 & 7 != 0) goto uaSxD; else goto caSsf;
       uaSxD: // global
           call _caSse(R1) args: 0, res: 0, upd: 0;
       caSsf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caSse() //  [R1]
         { []
         }
     {offset
       caSse: // global
           _saR2A::I64 = I64[Sp + 8] | I64[Sp + 64];
           _saR2B::I64 = _saR2A::I64 & 8;
           if (_saR2B::I64 != 0) goto uaSxb; else goto uaSxa;
       uaSxb: // global
           I64[Sp] = _saR2B::I64;
           I64[Sp + 40] = _saR2A::I64;
           I64[Sp + 64] = I64[R1 + 7];
           call _caSsq() args: 0, res: 0, upd: 0;
       uaSxa: // global
           I64[Sp + 32] = _saR2B::I64;
           I64[Sp + 64] = _saR2A::I64;
           Sp = Sp + 16;
           call _caStI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSse_info" {
     block_caSse_info:
         const _caSse;
         const 12361;
         const 30;
 },
 _caSsq() //  []
         { []
         }
     {offset
       caSsq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caSv6; else goto caSv5;
       caSv6: // global
           HpAlloc = 32;
           _saR2B::I64 = I64[Sp];
           I64[Sp] = block_caSsp_info;
           R1 = _saR2B::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caSv5: // global
           _saR2A::I64 = I64[Sp + 40];
           if (I64[Sp + 64] == _saR2A::I64) goto caSv8; else goto caSv9;
       caSv8: // global
           Hp = Hp - 32;
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caSv9: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _saR2A::I64 & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 8] & 7;
           I64[Sp + 8] = block_caSsE_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 48];
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 32];
           I64[Sp] = stg_ap_v_info;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caSsp() //  [R1]
         { []
         }
     {offset
       caSsp: // global
           I64[Sp] = R1;
           call _caSsq() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSsp_info" {
     block_caSsp_info:
         const _caSsp;
         const 13385;
         const 30;
 },
 _caSsE() //  [R1]
         { []
         }
     {offset
       caSsE: // global
           I64[Sp] = block_caSsG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaSxo; else goto caSsH;
       uaSxo: // global
           call _caSsG(R1) args: 0, res: 0, upd: 0;
       caSsH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSsE_info" {
     block_caSsE_info:
         const _caSsE;
         const 8072;
         const 30;
 },
 _caSsG() //  [R1]
         { []
         }
     {offset
       caSsG: // global
           if (R1 & 7 == 1) goto caSvd; else goto caSvV;
       caSvd: // global
           I64[Sp + 40] = block_caSsL_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaSxp; else goto caSsM;
       uaSxp: // global
           call _caSsL(R1) args: 0, res: 0, upd: 0;
       caSsM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caSvV: // global
           R1 = lvl22_raLJK_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSsG_info" {
     block_caSsG_info:
         const _caSsG;
         const 8072;
         const 30;
 },
 _caSsL() //  [R1]
         { []
         }
     {offset
       caSsL: // global
           _saR2j::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caSvg; else goto caSvP;
       caSvg: // global
           I64[Sp] = block_caSsQ_info;
           R1 = P64[_saR2j::P64 + 8];
           if (R1 & 7 != 0) goto uaSxq; else goto caSsR;
       uaSxq: // global
           call _caSsQ(R1) args: 0, res: 0, upd: 0;
       caSsR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caSvP: // global
           I64[Sp + 24] = block_caSvN_info;
           R5 = _saR2j::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSsL_info" {
     block_caSsL_info:
         const _caSsL;
         const 195;
         const 30;
 },
 _caSsQ() //  [R1]
         { []
         }
     {offset
       caSsQ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSvj; else goto caSvi;
       caSvj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSvi: // global
           _saR22::I64 = I64[Sp + 8];
           _saR2Q::P64 = P64[R1 + 7];
           _saR2S::P64 = P64[R1 + 15];
           _saR2R::I64 = I64[R1 + 23];
           _saR2T::I64 = _saR22::I64 & (I64[_saR2Q::P64 + 8] - 1);
           _saR2Y::P64 = P64[(_saR2Q::P64 + 24) + (_saR2T::I64 << 3)];
           I64[Hp - 8] = $wgo_saR2Z_info;
           I64[Hp] = _saR22::I64;
           I64[Sp - 8] = block_caSvk_info;
           R2 = _saR2Y::P64;
           R1 = Hp - 7;
           I64[Sp] = _saR2T::I64;
           P64[Sp + 8] = _saR2S::P64;
           I64[Sp + 16] = _saR2R::I64;
           P64[Sp + 24] = _saR2Q::P64;
           Sp = Sp - 8;
           call $wgo_saR2Z_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSsQ_info" {
     block_caSsQ_info:
         const _caSsQ;
         const 451;
         const 30;
 },
 _caSvk() //  [R1, R2, R3]
         { []
         }
     {offset
       caSvk: // global
           I64[Sp - 16] = block_caSvm_info;
           _saR3d::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saR3d::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSxv; else goto caSvo;
       uaSxv: // global
           call _caSvm(R1) args: 0, res: 0, upd: 0;
       caSvo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSvk_info" {
     block_caSvk_info:
         const _caSvk;
         const 324;
         const 30;
 },
 _caSvm() //  [R1]
         { []
         }
     {offset
       caSvm: // global
           if (R1 & 7 == 1) goto uaSxd; else goto caSvz;
       uaSxd: // global
           Sp = Sp + 56;
           call _caSww() args: 0, res: 0, upd: 0;
       caSvz: // global
           _saR2Q::P64 = P64[Sp + 48];
           _saR2T::I64 = I64[Sp + 24];
           _saR3d::P64 = P64[Sp + 16];
           _saR3f::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saR2Q::P64 + 24) + (_saR2T::I64 << 3)] = _saR3f::P64;
           I64[_saR2Q::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saR2Q::P64 + 24) + ((I64[_saR2Q::P64 + 8] << 3) + (_saR2T::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caSvx_info;
           R1 = _saR3d::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaSxw; else goto caSvA;
       uaSxw: // global
           call _caSvx(R1) args: 0, res: 0, upd: 0;
       caSvA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSvm_info" {
     block_caSvm_info:
         const _caSvm;
         const 1286;
         const 30;
 },
 _caSvx() //  [R1]
         { []
         }
     {offset
       caSvx: // global
           if (R1 & 7 == 1) goto uaSxe; else goto caSvK;
       uaSxe: // global
           Sp = Sp + 32;
           call _caSww() args: 0, res: 0, upd: 0;
       caSvK: // global
           _saR2R::I64 = I64[Sp + 16];
           _saR2S::P64 = P64[Sp + 8];
           I64[_saR2R::I64] = I64[_saR2R::I64] - 1;
           call MO_Touch(_saR2S::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSvx_info" {
     block_caSvx_info:
         const _caSvx;
         const 387;
         const 30;
 },
 _caSvN() //  []
         { []
         }
     {offset
       caSvN: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSvN_info" {
     block_caSvN_info:
         const _caSvN;
         const 0;
         const 30;
 },
 _caStI() //  []
         { []
         }
     {offset
       caStI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSvZ; else goto caSvY;
       caSvZ: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caStH_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caSvY: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           I64[Sp - 8] = block_caStO_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caStH() //  [R1]
         { []
         }
     {offset
       caStH: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caStI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caStH_info" {
     block_caStH_info:
         const _caStH;
         const 6408;
         const 30;
 },
 _caStO() //  [R1]
         { []
         }
     {offset
       caStO: // global
           I64[Sp] = block_caStQ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaSxs; else goto caStR;
       uaSxs: // global
           call _caStQ(R1) args: 0, res: 0, upd: 0;
       caStR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caStO_info" {
     block_caStO_info:
         const _caStO;
         const 8072;
         const 30;
 },
 _caStQ() //  [R1]
         { []
         }
     {offset
       caStQ: // global
           if (R1 & 7 == 1) goto caSw3; else goto caSwL;
       caSw3: // global
           I64[Sp + 40] = block_caStV_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaSxt; else goto caStW;
       uaSxt: // global
           call _caStV(R1) args: 0, res: 0, upd: 0;
       caStW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caSwL: // global
           R1 = lvl20_raLJI_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caStQ_info" {
     block_caStQ_info:
         const _caStQ;
         const 8072;
         const 30;
 },
 _caStV() //  [R1]
         { []
         }
     {offset
       caStV: // global
           _saR2j::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caSw6; else goto caSwF;
       caSw6: // global
           I64[Sp] = block_caSu0_info;
           R1 = P64[_saR2j::P64 + 8];
           if (R1 & 7 != 0) goto uaSxu; else goto caSu1;
       uaSxu: // global
           call _caSu0(R1) args: 0, res: 0, upd: 0;
       caSu1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caSwF: // global
           I64[Sp + 24] = block_caSwD_info;
           R5 = _saR2j::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caStV_info" {
     block_caStV_info:
         const _caStV;
         const 195;
         const 30;
 },
 _caSu0() //  [R1]
         { []
         }
     {offset
       caSu0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSw9; else goto caSw8;
       caSw9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSw8: // global
           _saR22::I64 = I64[Sp + 8];
           _saR3F::P64 = P64[R1 + 7];
           _saR3H::P64 = P64[R1 + 15];
           _saR3G::I64 = I64[R1 + 23];
           _saR3I::I64 = _saR22::I64 & (I64[_saR3F::P64 + 8] - 1);
           _saR3N::P64 = P64[(_saR3F::P64 + 24) + (_saR3I::I64 << 3)];
           I64[Hp - 8] = $wgo_saR3O_info;
           I64[Hp] = _saR22::I64;
           I64[Sp - 8] = block_caSwa_info;
           R2 = _saR3N::P64;
           R1 = Hp - 7;
           I64[Sp] = _saR3I::I64;
           P64[Sp + 8] = _saR3H::P64;
           I64[Sp + 16] = _saR3G::I64;
           P64[Sp + 24] = _saR3F::P64;
           Sp = Sp - 8;
           call $wgo_saR3O_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSu0_info" {
     block_caSu0_info:
         const _caSu0;
         const 451;
         const 30;
 },
 _caSwa() //  [R1, R2, R3]
         { []
         }
     {offset
       caSwa: // global
           I64[Sp - 16] = block_caSwc_info;
           _saR42::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saR42::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSxz; else goto caSwe;
       uaSxz: // global
           call _caSwc(R1) args: 0, res: 0, upd: 0;
       caSwe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSwa_info" {
     block_caSwa_info:
         const _caSwa;
         const 324;
         const 30;
 },
 _caSwc() //  [R1]
         { []
         }
     {offset
       caSwc: // global
           if (R1 & 7 == 1) goto uaSxg; else goto caSwp;
       uaSxg: // global
           Sp = Sp + 56;
           call _caSww() args: 0, res: 0, upd: 0;
       caSwp: // global
           _saR3F::P64 = P64[Sp + 48];
           _saR3I::I64 = I64[Sp + 24];
           _saR42::P64 = P64[Sp + 16];
           _saR44::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saR3F::P64 + 24) + (_saR3I::I64 << 3)] = _saR44::P64;
           I64[_saR3F::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saR3F::P64 + 24) + ((I64[_saR3F::P64 + 8] << 3) + (_saR3I::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caSwn_info;
           R1 = _saR42::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaSxA; else goto caSwq;
       uaSxA: // global
           call _caSwn(R1) args: 0, res: 0, upd: 0;
       caSwq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSwc_info" {
     block_caSwc_info:
         const _caSwc;
         const 1286;
         const 30;
 },
 _caSwn() //  [R1]
         { []
         }
     {offset
       caSwn: // global
           if (R1 & 7 == 1) goto uaSxh; else goto caSwA;
       uaSxh: // global
           Sp = Sp + 32;
           call _caSww() args: 0, res: 0, upd: 0;
       caSwA: // global
           _saR3G::I64 = I64[Sp + 16];
           _saR3H::P64 = P64[Sp + 8];
           I64[_saR3G::I64] = I64[_saR3G::I64] - 1;
           call MO_Touch(_saR3H::P64);
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSwn_info" {
     block_caSwn_info:
         const _caSwn;
         const 387;
         const 30;
 },
 _caSww() //  []
         { []
         }
     {offset
       caSww: // global
           R1 = lvl21_raLJJ_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caSwD() //  []
         { []
         }
     {offset
       caSwD: // global
           R1 = lvl21_raLJJ_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSwD_info" {
     block_caSwD_info:
         const _caSwD;
         const 0;
         const 30;
 },
 io1_saR4n_entry() //  [R1, R2]
         { []
         }
     {offset
       caSxM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSxN; else goto caSxO;
       caSxN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSxO: // global
           I64[Sp - 16] = block_caSxJ_info;
           _saR2i::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saR2i::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSxS; else goto caSxK;
       uaSxS: // global
           call _caSxJ(R1) args: 0, res: 0, upd: 0;
       caSxK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io1_saR4n_info" {
     io1_saR4n_info:
         const io1_saR4n_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaRfY_srt+384;
 },
 _caSxJ() //  [R1]
         { []
         }
     {offset
       caSxJ: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saR2i_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSxJ_info" {
     block_caSxJ_info:
         const _caSxJ;
         const 1;
         const 4294967326;
         const SaRfY_srt+384;
 },
 sat_saR4C_entry() //  [R1, R2]
         { []
         }
     {offset
       caSy5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSy6; else goto caSy7;
       caSy6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSy7: // global
           I64[Sp - 16] = block_caSy3_info;
           R3 = P64[R1 + 14];
           _saR4x::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saR4x::P64;
           Sp = Sp - 16;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR4C_info" {
     sat_saR4C_info:
         const sat_saR4C_entry;
         const 2;
         const 4294967307;
         const 8589934597;
         const SaRfY_srt+392;
 },
 _caSy3() //  []
         { []
         }
     {offset
       caSy3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSy3_info" {
     block_caSy3_info:
         const _caSy3;
         const 1;
         const 30;
 },
 sat_saR4w_entry() //  [R1]
         { []
         }
     {offset
       caSye: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR4w_info" {
     sat_saR4w_info:
         const sat_saR4w_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR4S_entry() //  [R1, R2]
         { []
         }
     {offset
       caSys: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSyt; else goto caSyu;
       caSyt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSyu: // global
           I64[Sp - 16] = block_caSyq_info;
           _saR4P::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saR4P::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR4S_info" {
     sat_saR4S_info:
         const sat_saR4S_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caSyq() //  []
         { []
         }
     {offset
       caSyq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSyq_info" {
     block_caSyq_info:
         const _caSyq;
         const 1;
         const 30;
 },
 sat_saR4N_entry() //  [R1]
         { []
         }
     {offset
       caSyB: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saR4n_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR4N_info" {
     sat_saR4N_info:
         const sat_saR4N_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 sat_saR4O_entry() //  [R1]
         { []
         }
     {offset
       caSyJ: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR4O_info" {
     sat_saR4O_info:
         const sat_saR4O_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR5f_entry() //  [R1, R2]
         { []
         }
     {offset
       caSz1: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSz2; else goto caSz3;
       caSz2: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSz3: // global
           I64[Sp - 16] = block_caSyZ_info;
           _saR5c::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saR5c::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR5f_info" {
     sat_saR5f_info:
         const sat_saR5f_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caSyZ() //  []
         { []
         }
     {offset
       caSyZ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSyZ_info" {
     block_caSyZ_info:
         const _caSyZ;
         const 1;
         const 30;
 },
 sat_saR5a_entry() //  [R1]
         { []
         }
     {offset
       caSza: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saR4n_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR5a_info" {
     sat_saR5a_info:
         const sat_saR5a_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 sat_saR5b_entry() //  [R1]
         { []
         }
     {offset
       caSzi: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR5b_info" {
     sat_saR5b_info:
         const sat_saR5b_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR5k_entry() //  [R1]
         { []
         }
     {offset
       caSzp: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caSzq; else goto caSzr;
       caSzq: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSzr: // global
           I64[Sp - 24] = block_caSyS_info;
           _saR2h::P64 = P64[R1 + 7];
           _saR4n::P64 = P64[R1 + 15];
           R1 = _saR2h::P64;
           P64[Sp - 16] = _saR2h::P64;
           P64[Sp - 8] = _saR4n::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR5k_info" {
     sat_saR5k_info:
         const sat_saR5k_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 _caSyS() //  [R1]
         { []
         }
     {offset
       caSyS: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSzu; else goto caSzt;
       caSzu: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSzt: // global
           I64[Hp - 56] = sat_saR5f_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saR5a_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saR5b_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caSzl_info;
           R2 = Hp - 54;
           _saR59::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saR59::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSyS_info" {
     block_caSyS_info:
         const _caSyS;
         const 2;
         const 4294967326;
         const SaRfY_srt+384;
 },
 _caSzl() //  [R1]
         { []
         }
     {offset
       caSzl: // global
           _saR2h::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caSzn_info;
           R2 = P64[Sp + 16];
           _saR5i::P64 = R1;
           R1 = _saR2h::P64;
           P64[Sp + 16] = _saR5i::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSzl_info" {
     block_caSzl_info:
         const _caSzl;
         const 2;
         const 30;
 },
 _caSzn() //  []
         { []
         }
     {offset
       caSzn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSzn_info" {
     block_caSzn_info:
         const _caSzn;
         const 1;
         const 30;
 },
 sat_saR5F_entry() //  [R1, R2]
         { []
         }
     {offset
       caSzH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSzI; else goto caSzJ;
       caSzI: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSzJ: // global
           I64[Sp - 16] = block_caSzF_info;
           _saR5C::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saR5C::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR5F_info" {
     sat_saR5F_info:
         const sat_saR5F_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caSzF() //  []
         { []
         }
     {offset
       caSzF: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSzF_info" {
     block_caSzF_info:
         const _caSzF;
         const 1;
         const 30;
 },
 sat_saR5A_entry() //  [R1]
         { []
         }
     {offset
       caSzQ: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io1_saR4n_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR5A_info" {
     sat_saR5A_info:
         const sat_saR5A_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaRfY_srt+384;
 },
 sat_saR5B_entry() //  [R1]
         { []
         }
     {offset
       caSzY: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR5B_info" {
     sat_saR5B_info:
         const sat_saR5B_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_saR1p_entry() //  [R1]
         { []
         }
     {offset
       caSA5: // global
           if ((Sp + -128) < SpLim) (likely: False) goto caSA6; else goto caSA7;
       caSA6: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSA7: // global
           I64[Sp - 24] = block_caSqD_info;
           P64[Sp - 16] = P64[R1 + 7];
           P64[Sp - 8] = P64[R1 + 15];
           Sp = Sp - 24;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saR1p_info" {
     io_saR1p_info:
         const io_saR1p_entry;
         const 2;
         const 564886983671819;
         const 4294967299;
         const SaRfY_srt+328;
 },
 _caSqD() //  [R1]
         { []
         }
     {offset
       caSqD: // global
           I64[Sp - 8] = block_caSqF_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Thread.getSystemEventManager1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSqD_info" {
     block_caSqD_info:
         const _caSqD;
         const 2;
         const 564886983671838;
         const SaRfY_srt+328;
 },
 _caSqF() //  [R1]
         { []
         }
     {offset
       caSqF: // global
           I64[Sp] = block_caSqH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaSDn; else goto caSqI;
       uaSDn: // global
           call _caSqH(R1) args: 0, res: 0, upd: 0;
       caSqI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSqF_info" {
     block_caSqF_info:
         const _caSqF;
         const 3;
         const 564878393737246;
         const SaRfY_srt+328;
 },
 _caSqH() //  [R1]
         { []
         }
     {offset
       caSqH: // global
           if (R1 & 7 == 1) goto caSA2; else goto caSA3;
       caSA2: // global
           Sp = Sp + 32;
           call lvl24_raLJM_entry() args: 8, res: 0, upd: 8;
       caSA3: // global
           I64[Sp] = block_caSqN_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaSDo; else goto caSqO;
       uaSDo: // global
           call _caSqN(R1) args: 0, res: 0, upd: 0;
       caSqO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSqH_info" {
     block_caSqH_info:
         const _caSqH;
         const 3;
         const 564878393737246;
         const SaRfY_srt+328;
 },
 _caSqN() //  [R1]
         { []
         }
     {offset
       caSqN: // global
           I64[Sp - 40] = block_caSqS_info;
           _saR1A::P64 = R1;
           _saR1B::P64 = P64[R1 + 7];
           _saR1D::P64 = P64[R1 + 23];
           _saR1F::P64 = P64[R1 + 31];
           _saR1H::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 32] = _saR1B::P64;
           P64[Sp - 24] = _saR1D::P64;
           P64[Sp - 16] = _saR1F::P64;
           P64[Sp - 8] = _saR1H::P64;
           P64[Sp] = _saR1A::P64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaSDp; else goto caSqT;
       uaSDp: // global
           call _caSqS(R1) args: 0, res: 0, upd: 0;
       caSqT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSqN_info" {
     block_caSqN_info:
         const _caSqN;
         const 3;
         const 564603515830302;
         const SaRfY_srt+328;
 },
 _caSqS() //  [R1]
         { []
         }
     {offset
       caSqS: // global
           I64[Sp - 8] = block_caSqX_info;
           _saR1O::P64 = R1;
           _saR1P::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saR1P::I64;
           P64[Sp + 16] = _saR1O::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSDq; else goto caSqY;
       uaSDq: // global
           call _caSqX(R1) args: 0, res: 0, upd: 0;
       caSqY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSqS_info" {
     block_caSqS_info:
         const _caSqS;
         const 8;
         const 564603515830302;
         const SaRfY_srt+328;
 },
 _caSqX() //  [R1]
         { []
         }
     {offset
       caSqX: // global
           I64[Sp - 8] = block_caSr2_info;
           _saR1Q::P64 = R1;
           _saR1R::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saR1R::I64;
           P64[Sp + 16] = _saR1Q::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSDr; else goto caSr3;
       uaSDr: // global
           call _caSr2(R1) args: 0, res: 0, upd: 0;
       caSr3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSqX_info" {
     block_caSqX_info:
         const _caSqX;
         const 73;
         const 564603515830302;
         const SaRfY_srt+328;
 },
 _caSr2() //  [R1]
         { []
         }
     {offset
       caSr2: // global
           _saR1k::P64 = P64[Sp + 80];
           _saR1T::P64 = P64[R1 + 7];
           _saR1V::P64 = P64[R1 + 23];
           _saR1W::P64 = P64[R1 + 31];
           (_saR20::I64) = call MO_AtomicRMW W64 AMO_Add(P64[Sp + 48] + 16, 1);
           I64[Sp - 16] = block_caSr9_info;
           R1 = _saR1k::P64;
           I64[Sp - 8] = _saR20::I64;
           P64[Sp] = _saR1W::P64;
           P64[Sp + 48] = _saR1V::P64;
           P64[Sp + 80] = _saR1T::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSDs; else goto caSra;
       uaSDs: // global
           call _caSr9(R1) args: 0, res: 0, upd: 0;
       caSra: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSr2_info" {
     block_caSr2_info:
         const _caSr2;
         const 202;
         const 564603515830302;
         const SaRfY_srt+328;
 },
 _caSr9() //  [R1]
         { []
         }
     {offset
       caSr9: // global
           I64[Sp - 8] = block_caSre_info;
           _saR21::P64 = R1;
           _saR22::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saR22::I64;
           P64[Sp + 88] = _saR21::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSDt; else goto caSrf;
       uaSDt: // global
           call _caSre(R1) args: 0, res: 0, upd: 0;
       caSrf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSr9_info" {
     block_caSr9_info:
         const _caSr9;
         const 844;
         const 564603515830302;
         const SaRfY_srt+328;
 },
 _caSre() //  [R1]
         { []
         }
     {offset
       caSre: // global
           I64[Sp - 16] = block_caSrj_info;
           I64[Sp - 8] = I64[R1 + 7];
           P64[Sp] = R1;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSre_info" {
     block_caSre_info:
         const _caSre;
         const 1741;
         const 564603515830302;
         const SaRfY_srt+328;
 },
 _caSrj() //  [R1]
         { []
         }
     {offset
       caSrj: // global
           _saR1O::P64 = P64[Sp + 72];
           _saR1P::I64 = I64[Sp + 56];
           _saR1Q::P64 = P64[Sp + 64];
           _saR28::I64 = I64[Sp + 24] & 31;
           if (%MO_S_Gt_W64(_saR1P::I64,
                            _saR28::I64)) goto caSAn; else goto caSD5;
       caSD5: // global
           if (%MO_S_Gt_W64(_saR28::I64,
                            I64[Sp + 48])) goto caSAn; else goto caSAo;
       caSAn: // global
           R4 = _saR28::I64;
           R3 = _saR1O::P64;
           R2 = _saR1Q::P64;
           Sp = Sp + 128;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caSAo: // global
           _saR2f::P64 = P64[P64[Sp + 80] + ((_saR28::I64 - _saR1P::I64 << 3) + 24)];
           I64[Sp] = block_caSrz_info;
           _saR27::I64 = R1;
           R1 = _saR2f::P64;
           I64[Sp + 80] = _saR27::I64;
           if (R1 & 7 != 0) goto uaSDu; else goto caSrA;
       uaSDu: // global
           call _caSrz(R1) args: 0, res: 0, upd: 0;
       caSrA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSrj_info" {
     block_caSrj_info:
         const _caSrj;
         const 6991;
         const 564603515830302;
         const SaRfY_srt+328;
 },
 _caSrz() //  [R1]
         { []
         }
     {offset
       caSrz: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caSAr; else goto caSAq;
       caSAr: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSAq: // global
           _saR2h::P64 = P64[R1 + 7];
           I64[Hp - 104] = $wio_saR2i_info;
           P64[Hp - 96] = P64[Sp + 104];
           P64[Hp - 88] = P64[Sp + 120];
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 40];
           P64[Hp - 64] = P64[Sp + 112];
           I64[Hp - 56] = I64[Sp + 32];
           I64[Hp - 48] = I64[Sp + 24];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io1_saR4n_info;
           P64[Hp - 24] = Hp - 102;
           _caSxE::P64 = Hp - 30;
           _saR4J::I64 = I64[Sp + 80];
           if (_saR4J::I64 != 0) goto uaSDf; else goto caSBI;
       uaSDf: // global
           if (_saR4J::I64 != 1) goto caSAZ; else goto caSCp;
       caSAZ: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caSyj_info;
           R1 = _saR2h::P64;
           P64[Sp + 112] = _saR2h::P64;
           P64[Sp + 120] = _caSxE::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caSCp: // global
           Hp = Hp - 24;
           I64[Sp + 8] = block_caSzy_info;
           R1 = _saR2h::P64;
           P64[Sp + 112] = _saR2h::P64;
           P64[Sp + 120] = _caSxE::P64;
           Sp = Sp + 8;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caSBI: // global
           I64[Hp - 16] = sat_saR5k_info;
           P64[Hp - 8] = _saR2h::P64;
           P64[Hp] = _caSxE::P64;
           I64[Sp + 8] = block_caSBF_info;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSrz_info" {
     block_caSrz_info:
         const _caSrz;
         const 64335;
         const 4410931413022;
         const SaRfY_srt+384;
 },
 _caSyj() //  [R1]
         { []
         }
     {offset
       caSyj: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSB2; else goto caSB1;
       caSB2: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSB1: // global
           I64[Hp - 56] = sat_saR4S_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saR4N_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saR4O_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caSAT_info;
           R2 = Hp - 54;
           _saR4M::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saR4M::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSyj_info" {
     block_caSyj_info:
         const _caSyj;
         const 65422;
         const 4410931413022;
         const SaRfY_srt+384;
 },
 _caSAT() //  [R1]
         { []
         }
     {offset
       caSAT: // global
           I64[Sp] = block_caSAV_info;
           R2 = P64[Sp + 112];
           _saR4V::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saR4V::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSAT_info" {
     block_caSAT_info:
         const _caSAT;
         const 65422;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSAV() //  []
         { []
         }
     {offset
       caSAV: // global
           I64[Sp] = block_caSAX_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaSDx; else goto caSB5;
       uaSDx: // global
           call _caSAX(R1) args: 0, res: 0, upd: 0;
       caSB5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSAV_info" {
     block_caSAV_info:
         const _caSAV;
         const 327566;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSAX() //  [R1]
         { []
         }
     {offset
       caSAX: // global
           I64[Sp] = block_caSB9_info;
           _saR4Y::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saR4Y::P64;
           if (R1 & 7 != 0) goto uaSDy; else goto caSBb;
       uaSDy: // global
           call _caSB9(R1) args: 0, res: 0, upd: 0;
       caSBb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSAX_info" {
     block_caSAX_info:
         const _caSAX;
         const 851854;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSB9() //  [R1]
         { []
         }
     {offset
       caSB9: // global
           if (R1 & 7 == 1) goto caSBk; else goto caSBx;
       caSBk: // global
           _saR23::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caSBf_info;
           R2 = _saR23::P64;
           R1 = P64[Sp + 96];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caSBx: // global
           I64[Sp + 8] = block_caSBv_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaSDz; else goto caSBy;
       uaSDz: // global
           call _caSBv(R1) args: 0, res: 0, upd: 0;
       caSBy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSB9_info" {
     block_caSB9_info:
         const _caSB9;
         const 327566;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBf() //  []
         { []
         }
     {offset
       caSBf: // global
           I64[Sp] = block_caSBh_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaSDA; else goto caSBm;
       uaSDA: // global
           call _caSBh(R1) args: 0, res: 0, upd: 0;
       caSBm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSBf_info" {
     block_caSBf_info:
         const _caSBf;
         const 163789;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBh() //  [R1]
         { []
         }
     {offset
       caSBh: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSBs; else goto caSBr;
       caSBs: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSBr: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caSxW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSBh_info" {
     block_caSBh_info:
         const _caSBh;
         const 425933;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBv() //  [R1]
         { []
         }
     {offset
       caSBv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSBE; else goto caSBD;
       caSBE: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSBD: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caSxW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSBv_info" {
     block_caSBv_info:
         const _caSBv;
         const 425933;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSzy() //  [R1]
         { []
         }
     {offset
       caSzy: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSCs; else goto caSCr;
       caSCs: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSCr: // global
           I64[Hp - 56] = sat_saR5F_info;
           P64[Hp - 48] = P64[Sp + 104];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saR5A_info;
           P64[Hp - 24] = P64[Sp + 112];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saR5B_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caSCk_info;
           R2 = Hp - 54;
           _saR5z::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 112] = _saR5z::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSzy_info" {
     block_caSzy_info:
         const _caSzy;
         const 65422;
         const 4410931413022;
         const SaRfY_srt+384;
 },
 _caSCk() //  [R1]
         { []
         }
     {offset
       caSCk: // global
           I64[Sp] = block_caSCm_info;
           R2 = P64[Sp + 112];
           _saR5I::P64 = R1;
           R1 = P64[Sp + 104];
           P64[Sp + 112] = _saR5I::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSCk_info" {
     block_caSCk_info:
         const _caSCk;
         const 65422;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSCm() //  []
         { []
         }
     {offset
       caSCm: // global
           I64[Sp] = block_caSCo_info;
           R1 = P64[Sp + 112];
           if (R1 & 7 != 0) goto uaSDJ; else goto caSCv;
       uaSDJ: // global
           call _caSCo(R1) args: 0, res: 0, upd: 0;
       caSCv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSCm_info" {
     block_caSCm_info:
         const _caSCm;
         const 327566;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSCo() //  [R1]
         { []
         }
     {offset
       caSCo: // global
           I64[Sp] = block_caSCz_info;
           _saR5L::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saR5L::P64;
           if (R1 & 7 != 0) goto uaSDK; else goto caSCB;
       uaSDK: // global
           call _caSCz(R1) args: 0, res: 0, upd: 0;
       caSCB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSCo_info" {
     block_caSCo_info:
         const _caSCo;
         const 851854;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSCz() //  [R1]
         { []
         }
     {offset
       caSCz: // global
           if (R1 & 7 == 1) goto caSCK; else goto caSCX;
       caSCK: // global
           _saR23::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caSCF_info;
           R2 = _saR23::P64;
           R1 = P64[Sp + 96];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caSCX: // global
           I64[Sp + 8] = block_caSCV_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaSDL; else goto caSCY;
       uaSDL: // global
           call _caSCV(R1) args: 0, res: 0, upd: 0;
       caSCY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSCz_info" {
     block_caSCz_info:
         const _caSCz;
         const 327566;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSCF() //  []
         { []
         }
     {offset
       caSCF: // global
           I64[Sp] = block_caSCH_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaSDM; else goto caSCM;
       uaSDM: // global
           call _caSCH(R1) args: 0, res: 0, upd: 0;
       caSCM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSCF_info" {
     block_caSCF_info:
         const _caSCF;
         const 163789;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSCH() //  [R1]
         { []
         }
     {offset
       caSCH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSCS; else goto caSCR;
       caSCS: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSCR: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caSxW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSCH_info" {
     block_caSCH_info:
         const _caSCH;
         const 425933;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSCV() //  [R1]
         { []
         }
     {offset
       caSCV: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSD4; else goto caSD3;
       caSD4: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSD3: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caSxW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSCV_info" {
     block_caSCV_info:
         const _caSCV;
         const 425933;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBF() //  [R1]
         { []
         }
     {offset
       caSBF: // global
           I64[Sp] = block_caSBH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaSDD; else goto caSBK;
       uaSDD: // global
           call _caSBH(R1) args: 0, res: 0, upd: 0;
       caSBK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSBF_info" {
     block_caSBF_info:
         const _caSBF;
         const 851854;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBH() //  [R1]
         { []
         }
     {offset
       caSBH: // global
           I64[Sp] = block_caSBO_info;
           _saR5p::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 112] = _saR5p::P64;
           if (R1 & 7 != 0) goto uaSDE; else goto caSBQ;
       uaSDE: // global
           call _caSBO(R1) args: 0, res: 0, upd: 0;
       caSBQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSBH_info" {
     block_caSBH_info:
         const _caSBH;
         const 851854;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBO() //  [R1]
         { []
         }
     {offset
       caSBO: // global
           if (R1 & 7 == 1) goto caSBZ; else goto caSCc;
       caSBZ: // global
           _saR23::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caSBU_info;
           R2 = _saR23::P64;
           R1 = P64[Sp + 96];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caSCc: // global
           I64[Sp + 8] = block_caSCa_info;
           R1 = P64[Sp + 112];
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaSDF; else goto caSCd;
       uaSDF: // global
           call _caSCa(R1) args: 0, res: 0, upd: 0;
       caSCd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSBO_info" {
     block_caSBO_info:
         const _caSBO;
         const 327566;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBU() //  []
         { []
         }
     {offset
       caSBU: // global
           I64[Sp] = block_caSBW_info;
           R1 = P64[Sp + 104];
           if (R1 & 7 != 0) goto uaSDG; else goto caSC1;
       uaSDG: // global
           call _caSBW(R1) args: 0, res: 0, upd: 0;
       caSC1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSBU_info" {
     block_caSBU_info:
         const _caSBU;
         const 163789;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSBW() //  [R1]
         { []
         }
     {offset
       caSBW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSC7; else goto caSC6;
       caSC7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSC6: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caSxW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSBW_info" {
     block_caSBW_info:
         const _caSBW;
         const 425933;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSCa() //  [R1]
         { []
         }
     {offset
       caSCa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSCj; else goto caSCi;
       caSCj: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSCi: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 16];
           P64[Sp + 104] = Hp - 15;
           Sp = Sp + 80;
           call _caSxW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSCa_info" {
     block_caSCa_info:
         const _caSCa;
         const 425933;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSxW() //  []
         { []
         }
     {offset
       caSxW: // global
           Hp = Hp + 40;
           _saR4u::P64 = P64[Sp + 24];
           if (Hp > HpLim) (likely: False) goto caSAx; else goto caSAw;
       caSAx: // global
           HpAlloc = 40;
           I64[Sp - 8] = block_caSxV_info;
           R1 = _saR4u::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSAw: // global
           I64[Hp - 32] = sat_saR4C_info;
           P64[Hp - 24] = P64[Sp];
           P64[Hp - 16] = _saR4u::P64;
           I64[Hp - 8] = sat_saR4w_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 24] = block_caSAs_info;
           R2 = Hp - 30;
           R1 = Hp - 7;
           Sp = Sp + 24;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caSxV() //  [R1]
         { []
         }
     {offset
       caSxV: // global
           P64[Sp + 32] = R1;
           Sp = Sp + 8;
           call _caSxW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSxV_info" {
     block_caSxV_info:
         const _caSxV;
         const 772;
         const 2203318222878;
         const SaRfY_srt+392;
 },
 _caSAs() //  [R1]
         { []
         }
     {offset
       caSAs: // global
           I64[Sp] = block_caSAu_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaSDw; else goto caSAz;
       uaSDw: // global
           call _caSAu(R1) args: 0, res: 0, upd: 0;
       caSAz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSAs_info" {
     block_caSAs_info:
         const _caSAs;
         const 0;
         const 4294967326;
         const SaRfY_srt+464;
 },
 _caSAu() //  [R1]
         { []
         }
     {offset
       caSAu: // global
           if (I64[R1 + 7] & 4 == 0) goto caSAP; else goto caSAJ;
       caSAP: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caSAJ: // global
           R1 = lvl28_raLJS_closure;
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSAu_info" {
     block_caSAu_info:
         const _caSAu;
         const 0;
         const 4294967326;
         const SaRfY_srt+464;
 },
 GHC.Event.Thread.threadWaitRead1_entry() //  [R2, R3]
         { []
         }
     {offset
       caSDT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caSDU; else goto caSDV;
       caSDU: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.threadWaitRead1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSDV: // global
           I64[Sp - 24] = block_caSqw_info;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitRead1_info" {
     GHC.Event.Thread.threadWaitRead1_info:
         const GHC.Event.Thread.threadWaitRead1_entry;
         const 0;
         const 1690786890514446;
         const 12884901903;
         const SaRfY_srt+328;
 },
 _caSqw() //  [R1]
         { []
         }
     {offset
       caSqw: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSDY; else goto caSDX;
       caSDY: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caSDX: // global
           I64[Hp - 16] = io_saR1p_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 16];
           _caSqy::P64 = Hp - 15;
           if (R1 == 0) goto caSDS; else goto caSDR;
       caSDS: // global
           R1 = _caSqy::P64;
           Sp = Sp + 24;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caSDR: // global
           R1 = _caSqy::P64;
           Sp = Sp + 24;
           call io_saR1p_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSqw_info" {
     block_caSqw_info:
         const _caSqw;
         const 2;
         const 564886983671838;
         const SaRfY_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.423074284 UTC

[section ""data" . threadWaitWrite1_raLJT_closure" {
     threadWaitWrite1_raLJT_closure:
         const threadWaitWrite1_raLJT_info;
         const 0;
 },
 threadWaitWrite1_raLJT_entry() //  [R2]
         { []
         }
     {offset
       caSNt: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtWrite_closure;
           call GHC.Event.Thread.threadWaitRead1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitWrite1_raLJT_info" {
     threadWaitWrite1_raLJT_info:
         const threadWaitWrite1_raLJT_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const SaRfY_srt+432;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.426310575 UTC

[section ""data" . GHC.Event.Thread.threadWaitWrite_closure" {
     GHC.Event.Thread.threadWaitWrite_closure:
         const GHC.Event.Thread.threadWaitWrite_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitWrite_entry() //  [R2]
         { []
         }
     {offset
       caSNE: // global
           R2 = R2;
           call threadWaitWrite1_raLJT_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitWrite_info" {
     GHC.Event.Thread.threadWaitWrite_info:
         const GHC.Event.Thread.threadWaitWrite_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaRfY_srt+480;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.42962328 UTC

[section ""data" . threadWaitRead2_raLJU_closure" {
     threadWaitRead2_raLJU_closure:
         const threadWaitRead2_raLJU_info;
         const 0;
 },
 threadWaitRead2_raLJU_entry() //  [R2]
         { []
         }
     {offset
       caSNP: // global
           R3 = R2;
           R2 = GHC.Event.Internal.evtRead_closure;
           call GHC.Event.Thread.threadWaitRead1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . threadWaitRead2_raLJU_info" {
     threadWaitRead2_raLJU_info:
         const threadWaitRead2_raLJU_entry;
         const 0;
         const 554050781198;
         const 8589934597;
         const SaRfY_srt+416;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.433012578 UTC

[section ""data" . GHC.Event.Thread.threadWaitRead_closure" {
     GHC.Event.Thread.threadWaitRead_closure:
         const GHC.Event.Thread.threadWaitRead_info;
         const 0;
 },
 GHC.Event.Thread.threadWaitRead_entry() //  [R2]
         { []
         }
     {offset
       caSO0: // global
           R2 = R2;
           call threadWaitRead2_raLJU_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadWaitRead_info" {
     GHC.Event.Thread.threadWaitRead_info:
         const GHC.Event.Thread.threadWaitRead_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaRfY_srt+488;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.436401352 UTC

[section ""cstring" . lvl29_raLJV_bytes" {
     lvl29_raLJV_bytes:
         I8[] [80,97,116,116,101,114,110,32,109,97,116,99,104,32,102,97,105,108,117,114,101,32,105,110,32,100,111,32,101,120,112,114,101,115,115,105,111,110,32,97,116,32,71,72,67,47,69,118,101,110,116,47,84,104,114,101,97,100,46,104,115,58,49,48,52,58,53,45,49,55]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.43867974 UTC

[section ""data" . lvl30_raLJW_closure" {
     lvl30_raLJW_closure:
         const lvl30_raLJW_info;
         const 0;
 },
 lvl30_raLJW_entry() //  []
         { []
         }
     {offset
       caSOe: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caSOf; else goto caSOg;
       caSOf: // global
           R1 = lvl30_raLJW_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSOg: // global
           I64[Sp - 8] = block_caSOc_info;
           R2 = lvl29_raLJV_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl30_raLJW_info" {
     lvl30_raLJW_info:
         const lvl30_raLJW_entry;
         const 0;
         const 12884901902;
         const 4294967299;
         const SaRfY_srt+496;
 },
 _caSOc() //  [R1]
         { []
         }
     {offset
       caSOc: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.IO.failIO1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSOc_info" {
     block_caSOc_info:
         const _caSOc;
         const 0;
         const 4294967326;
         const SaRfY_srt+504;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.444993802 UTC

[section ""data" . go_raLJX_closure" {
     go_raLJX_closure:
         const go_raLJX_info;
 },
 go_raLJX_entry() //  [R2]
         { []
         }
     {offset
       caSOE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSOF; else goto uaSOQ;
       caSOF: // global
           R2 = R2;
           R1 = go_raLJX_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uaSOQ: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _caSOu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_raLJX_info" {
     go_raLJX_info:
         const go_raLJX_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caSOu() //  []
         { []
         }
     {offset
       caSOu: // global
           _saR5W::P64 = P64[Sp];
           I64[Sp] = block_caSOx_info;
           R1 = _saR5W::P64;
           if (R1 & 7 != 0) goto uaSOS; else goto caSOy;
       uaSOS: // global
           call _caSOx(R1) args: 0, res: 0, upd: 0;
       caSOy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caSOx() //  [R1]
         { []
         }
     {offset
       caSOx: // global
           if (R1 & 7 == 1) goto caSOB; else goto caSOC;
       caSOB: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caSOC: // global
           I64[Sp - 8] = block_caSOM_info;
           _saR60::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saR60::P64;
           Sp = Sp - 8;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSOx_info" {
     block_caSOx_info:
         const _caSOx;
         const 0;
         const 30;
 },
 _caSOM() //  []
         { []
         }
     {offset
       caSOM: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caSOu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSOM_info" {
     block_caSOM_info:
         const _caSOM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.472218602 UTC

[section ""data" . GHC.Event.Thread.closeFdWith1_closure" {
     GHC.Event.Thread.closeFdWith1_closure:
         const GHC.Event.Thread.closeFdWith1_info;
         const 0;
 },
 go1_saR6t_entry() //  [R1, R2]
         { []
         }
     {offset
       caSQ2: // global
           if ((Sp + -64) < SpLim) (likely: False) goto caSQ3; else goto caSQ4;
       caSQ3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSQ4: // global
           I64[Sp - 24] = block_caSPV_info;
           _saR6t::P64 = R1;
           _saR65::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 16] = _saR65::P64;
           P64[Sp - 8] = _saR6t::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaSR9; else goto caSPW;
       uaSR9: // global
           call _caSPV(R1) args: 0, res: 0, upd: 0;
       caSPW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_saR6t_info" {
     go1_saR6t_info:
         const go1_saR6t_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaRfY_srt+328;
 },
 _caSPV() //  [R1]
         { []
         }
     {offset
       caSPV: // global
           if (R1 & 7 == 1) goto caSPZ; else goto caSQ0;
       caSPZ: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caSQ0: // global
           I64[Sp - 8] = block_caSQa_info;
           _saR6y::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saR6y::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSR8; else goto caSQb;
       uaSR8: // global
           call _caSQa(R1) args: 0, res: 0, upd: 0;
       caSQb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSPV_info" {
     block_caSPV_info:
         const _caSPV;
         const 2;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSQa() //  [R1]
         { []
         }
     {offset
       caSQa: // global
           I64[Sp - 16] = block_caSQf_info;
           _saR6C::P64 = P64[R1 + 23];
           _saR6E::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saR6E::P64;
           P64[Sp] = _saR6C::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSRa; else goto caSQg;
       uaSRa: // global
           call _caSQf(R1) args: 0, res: 0, upd: 0;
       caSQg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSQa_info" {
     block_caSQa_info:
         const _caSQa;
         const 3;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSQf() //  [R1]
         { []
         }
     {offset
       caSQf: // global
           I64[Sp - 8] = block_caSQk_info;
           _saR6N::P64 = R1;
           _saR6O::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saR6O::I64;
           P64[Sp + 16] = _saR6N::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSRb; else goto caSQl;
       uaSRb: // global
           call _caSQk(R1) args: 0, res: 0, upd: 0;
       caSQl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSQf_info" {
     block_caSQf_info:
         const _caSQf;
         const 5;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSQk() //  [R1]
         { []
         }
     {offset
       caSQk: // global
           I64[Sp - 8] = block_caSQp_info;
           _saR6P::P64 = R1;
           _saR6Q::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp] = _saR6Q::I64;
           P64[Sp + 40] = _saR6P::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSRc; else goto caSQu;
       uaSRc: // global
           call _caSQp(R1) args: 0, res: 0, upd: 0;
       caSQu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSQk_info" {
     block_caSQk_info:
         const _caSQk;
         const 70;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSQp() //  [R1]
         { []
         }
     {offset
       caSQp: // global
           _saR6N::P64 = P64[Sp + 32];
           _saR6O::I64 = I64[Sp + 16];
           _saR6P::P64 = P64[Sp + 48];
           _saR6T::I64 = I64[R1 + 7] & 31;
           if (%MO_S_Gt_W64(_saR6O::I64,
                            _saR6T::I64)) goto caSQL; else goto caSR7;
       caSR7: // global
           if (%MO_S_Gt_W64(_saR6T::I64,
                            I64[Sp + 8])) goto caSQL; else goto caSR1;
       caSQL: // global
           R4 = _saR6T::I64;
           R3 = _saR6N::P64;
           R2 = _saR6P::P64;
           Sp = Sp + 64;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caSR1: // global
           _saR70::P64 = P64[P64[Sp + 24] + ((_saR6T::I64 - _saR6O::I64 << 3) + 24)];
           I64[Sp + 32] = block_caSQR_info;
           R1 = _saR70::P64;
           Sp = Sp + 32;
           if (R1 & 7 != 0) goto uaSRd; else goto caSQS;
       uaSRd: // global
           call _caSQR(R1) args: 0, res: 0, upd: 0;
       caSQS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSQp_info" {
     block_caSQp_info:
         const _caSQp;
         const 199;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSQR() //  [R1]
         { []
         }
     {offset
       caSQR: // global
           I64[Sp] = block_caSQW_info;
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSQR_info" {
     block_caSQR_info:
         const _caSQR;
         const 131;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSQW() //  [R1]
         { []
         }
     {offset
       caSQW: // global
           I64[Sp + 16] = block_caSQY_info;
           R2 = P64[Sp + 8];
           _saR75::P64 = R1;
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _saR75::P64;
           Sp = Sp + 16;
           call go1_saR6t_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSQW_info" {
     block_caSQW_info:
         const _caSQW;
         const 131;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSQY() //  [R1]
         { []
         }
     {offset
       caSQY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSR6; else goto caSR5;
       caSR6: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSR5: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSQY_info" {
     block_caSQY_info:
         const _caSQY;
         const 1;
         const 30;
 },
 go2_saR7d_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caSRs: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caSRt; else goto caSRu;
       caSRt: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSRu: // global
           I64[Sp - 32] = block_caSRl_info;
           _saR7d::P64 = R1;
           _saR65::P64 = P64[R1 + 5];
           R1 = R2;
           P64[Sp - 24] = _saR65::P64;
           P64[Sp - 16] = _saR7d::P64;
           P64[Sp - 8] = R3;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaSSd; else goto caSRm;
       uaSSd: // global
           call _caSRl(R1) args: 0, res: 0, upd: 0;
       caSRm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go2_saR7d_info" {
     go2_saR7d_info:
         const go2_saR7d_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaRfY_srt+512;
 },
 _caSRl() //  [R1]
         { []
         }
     {offset
       caSRl: // global
           if (R1 & 7 == 1) goto uaSS9; else goto caSRq;
       uaSS9: // global
           Sp = Sp + 32;
           call _caSRI() args: 0, res: 0, upd: 0;
       caSRq: // global
           I64[Sp - 8] = block_caSRA_info;
           _saR7i::P64 = P64[R1 + 6];
           _saR7j::P64 = P64[R1 + 14];
           R1 = P64[Sp + 24];
           P64[Sp] = _saR7j::P64;
           P64[Sp + 24] = _saR7i::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSSb; else goto caSRC;
       uaSSb: // global
           call _caSRA(R1) args: 0, res: 0, upd: 0;
       caSRC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSRl_info" {
     block_caSRl_info:
         const _caSRl;
         const 3;
         const 4294967326;
         const SaRfY_srt+512;
 },
 _caSRA() //  [R1]
         { []
         }
     {offset
       caSRA: // global
           if (R1 & 7 == 1) goto uaSSa; else goto caSS1;
       uaSSa: // global
           Sp = Sp + 40;
           call _caSRI() args: 0, res: 0, upd: 0;
       caSS1: // global
           I64[Sp - 8] = block_caSRL_info;
           _saR7m::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saR7m::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSSe; else goto caSRM;
       uaSSe: // global
           call _caSRL(R1) args: 0, res: 0, upd: 0;
       caSRM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSRA_info" {
     block_caSRA_info:
         const _caSRA;
         const 4;
         const 4294967326;
         const SaRfY_srt+512;
 },
 _caSRI() //  []
         { []
         }
     {offset
       caSRI: // global
           R1 = GHC.Types.[]_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caSRL() //  [R1]
         { []
         }
     {offset
       caSRL: // global
           I64[Sp] = block_caSRQ_info;
           _saR7o::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _saR7o::P64;
           if (R1 & 7 != 0) goto uaSSg; else goto caSRR;
       uaSSg: // global
           call _caSRQ(R1) args: 0, res: 0, upd: 0;
       caSRR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSRL_info" {
     block_caSRL_info:
         const _caSRL;
         const 5;
         const 4294967326;
         const SaRfY_srt+512;
 },
 _caSRQ() //  [R1]
         { []
         }
     {offset
       caSRQ: // global
           I64[Sp] = block_caSRV_info;
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 24];
           R2 = P64[Sp + 40];
           call GHC.Event.Manager.$wcloseFd__entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSRQ_info" {
     block_caSRQ_info:
         const _caSRQ;
         const 5;
         const 4294967326;
         const SaRfY_srt+512;
 },
 _caSRV() //  [R1]
         { []
         }
     {offset
       caSRV: // global
           _saR7d::P64 = P64[Sp + 32];
           I64[Sp + 32] = block_caSRX_info;
           R3 = P64[Sp + 8];
           R2 = P64[Sp + 16];
           _saR7t::P64 = R1;
           R1 = _saR7d::P64;
           P64[Sp + 40] = _saR7t::P64;
           Sp = Sp + 32;
           call go2_saR7d_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSRV_info" {
     block_caSRV_info:
         const _caSRV;
         const 1285;
         const 4294967326;
         const SaRfY_srt+512;
 },
 _caSRX() //  [R1]
         { []
         }
     {offset
       caSRX: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSS7; else goto caSS6;
       caSS7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSS6: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSRX_info" {
     block_caSRX_info:
         const _caSRX;
         const 1;
         const 30;
 },
 sat_saR8e_entry() //  [R1, R2, R3, R4]
         { []
         }
     {offset
       caSSt: // global
           if ((Sp + -64) < SpLim) (likely: False) goto caSSH; else goto caSSI;
       caSSH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caSSI: // global
           I64[Sp - 32] = block_caSSq_info;
           _saR65::P64 = P64[R1 + 4];
           R1 = R2;
           P64[Sp - 24] = _saR65::P64;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaSTl; else goto caSSr;
       uaSTl: // global
           call _caSSq(R1) args: 0, res: 0, upd: 0;
       caSSr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8e_info" {
     sat_saR8e_info:
         const sat_saR8e_entry;
         const 1;
         const 4294967305;
         const 17179869207;
         const SaRfY_srt+328;
 },
 _caSSq() //  [R1]
         { []
         }
     {offset
       caSSq: // global
           I64[Sp - 16] = block_caSSw_info;
           _saR7M::P64 = P64[R1 + 23];
           _saR7O::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saR7O::P64;
           P64[Sp] = _saR7M::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSTk; else goto caSSx;
       uaSTk: // global
           call _caSSw(R1) args: 0, res: 0, upd: 0;
       caSSx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSSq_info" {
     block_caSSq_info:
         const _caSSq;
         const 3;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSSw() //  [R1]
         { []
         }
     {offset
       caSSw: // global
           I64[Sp - 8] = block_caSSB_info;
           _saR7X::P64 = R1;
           _saR7Y::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saR7Y::I64;
           P64[Sp + 16] = _saR7X::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSTm; else goto caSSC;
       uaSTm: // global
           call _caSSB(R1) args: 0, res: 0, upd: 0;
       caSSC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSSw_info" {
     block_caSSw_info:
         const _caSSw;
         const 5;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSSB() //  [R1]
         { []
         }
     {offset
       caSSB: // global
           I64[Sp - 8] = block_caSSG_info;
           _saR7Z::P64 = R1;
           _saR80::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp] = _saR80::I64;
           P64[Sp + 32] = _saR7Z::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSTn; else goto caSSM;
       uaSTn: // global
           call _caSSG(R1) args: 0, res: 0, upd: 0;
       caSSM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSSB_info" {
     block_caSSB_info:
         const _caSSB;
         const 70;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSSG() //  [R1]
         { []
         }
     {offset
       caSSG: // global
           _saR7X::P64 = P64[Sp + 32];
           _saR7Y::I64 = I64[Sp + 16];
           _saR7Z::P64 = P64[Sp + 40];
           _saR83::I64 = I64[R1 + 7] & 31;
           if (%MO_S_Gt_W64(_saR7Y::I64,
                            _saR83::I64)) goto caST3; else goto caSTj;
       caSTj: // global
           if (%MO_S_Gt_W64(_saR83::I64,
                            I64[Sp + 8])) goto caST3; else goto caSTf;
       caST3: // global
           R4 = _saR83::I64;
           R3 = _saR7X::P64;
           R2 = _saR7Z::P64;
           Sp = Sp + 64;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caSTf: // global
           _saR8a::P64 = P64[P64[Sp + 24] + ((_saR83::I64 - _saR7Y::I64 << 3) + 24)];
           I64[Sp + 40] = block_caST9_info;
           R1 = _saR8a::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaSTo; else goto caSTa;
       uaSTo: // global
           call _caST9(R1) args: 0, res: 0, upd: 0;
       caSTa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSSG_info" {
     block_caSSG_info:
         const _caSSG;
         const 199;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caST9() //  [R1]
         { []
         }
     {offset
       caST9: // global
           _saR7G::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caSTe_info;
           R2 = _saR7G::P64;
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caST9_info" {
     block_caST9_info:
         const _caST9;
         const 2;
         const 30;
 },
 _caSTe() //  []
         { []
         }
     {offset
       caSTe: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_v_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSTe_info" {
     block_caSTe_info:
         const _caSTe;
         const 1;
         const 30;
 },
 sat_saR8n_entry() //  [R1, R2]
         { []
         }
     {offset
       caSTC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSTD; else goto caSTE;
       caSTD: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSTE: // global
           I64[Sp - 16] = block_caSTA_info;
           _saR8i::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saR8i::P64;
           Sp = Sp - 16;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8n_info" {
     sat_saR8n_info:
         const sat_saR8n_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caSTA() //  []
         { []
         }
     {offset
       caSTA: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSTA_info" {
     block_caSTA_info:
         const _caSTA;
         const 1;
         const 30;
 },
 sat_saR8h_entry() //  [R1]
         { []
         }
     {offset
       caSTM: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8h_info" {
     sat_saR8h_info:
         const sat_saR8h_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR8C_entry() //  [R1, R2]
         { []
         }
     {offset
       caSU2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSU3; else goto caSU4;
       caSU3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSU4: // global
           I64[Sp - 16] = block_caSU0_info;
           _saR8x::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saR8x::P64;
           Sp = Sp - 16;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8C_info" {
     sat_saR8C_info:
         const sat_saR8C_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caSU0() //  []
         { []
         }
     {offset
       caSU0: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSU0_info" {
     block_caSU0_info:
         const _caSU0;
         const 1;
         const 30;
 },
 sat_saR8w_entry() //  [R1]
         { []
         }
     {offset
       caSUc: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8w_info" {
     sat_saR8w_info:
         const sat_saR8w_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saR8J_entry() //  [R1]
         { []
         }
     {offset
       caSUj: // global
           _saR8J::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caSUk; else goto caSUl;
       caSUl: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSUn; else goto caSUm;
       caSUn: // global
           HpAlloc = 64;
           goto caSUk;
       caSUk: // global
           R1 = _saR8J::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSUm: // global
           _saR64::P64 = P64[_saR8J::P64 + 7];
           _saR65::P64 = P64[_saR8J::P64 + 15];
           _saR7E::P64 = P64[_saR8J::P64 + 23];
           I64[Hp - 56] = sat_saR8C_info;
           P64[Hp - 48] = _saR7E::P64;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _saR64::P64;
           P64[Hp - 16] = _saR65::P64;
           I64[Hp - 8] = sat_saR8w_info;
           P64[Hp] = Hp - 40;
           I64[Sp - 16] = block_caSUf_info;
           R2 = Hp - 54;
           R1 = Hp - 7;
           P64[Sp - 8] = _saR7E::P64;
           Sp = Sp - 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8J_info" {
     sat_saR8J_info:
         const sat_saR8J_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _caSUf() //  [R1]
         { []
         }
     {offset
       caSUf: // global
           I64[Sp] = block_caSUh_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSUf_info" {
     block_caSUf_info:
         const _caSUf;
         const 1;
         const 30;
 },
 _caSUh() //  []
         { []
         }
     {offset
       caSUh: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSUh_info" {
     block_caSUh_info:
         const _caSUh;
         const 1;
         const 30;
 },
 sat_saR8R_entry() //  [R1, R2]
         { []
         }
     {offset
       caSUy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caSUz; else goto caSUA;
       caSUz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSUA: // global
           I64[Sp - 16] = block_caSUw_info;
           _saR8M::P64 = R2;
           R2 = P64[R1 + 6];
           P64[Sp - 8] = _saR8M::P64;
           Sp = Sp - 16;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8R_info" {
     sat_saR8R_info:
         const sat_saR8R_entry;
         const 1;
         const 9;
         const 8589934597;
 },
 _caSUw() //  []
         { []
         }
     {offset
       caSUw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSUw_info" {
     block_caSUw_info:
         const _caSUw;
         const 1;
         const 30;
 },
 sat_saR8L_entry() //  [R1]
         { []
         }
     {offset
       caSUI: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saR8L_info" {
     sat_saR8L_info:
         const sat_saR8L_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 io_saR6r_entry() //  [R1]
         { []
         }
     {offset
       caSUL: // global
           _saR6r::P64 = R1;
           if ((Sp + -48) < SpLim) (likely: False) goto caSUM; else goto caSUN;
       caSUN: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSUP; else goto caSUO;
       caSUP: // global
           HpAlloc = 16;
           goto caSUM;
       caSUM: // global
           R1 = _saR6r::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caSUO: // global
           _saR64::P64 = P64[_saR6r::P64 + 7];
           _saR65::P64 = P64[_saR6r::P64 + 15];
           _saR6n::P64 = P64[_saR6r::P64 + 23];
           I64[Hp - 8] = go1_saR6t_info;
           P64[Hp] = _saR65::P64;
           I64[Sp - 32] = block_caSRe_info;
           R2 = _saR6n::P64;
           R1 = Hp - 6;
           P64[Sp - 24] = _saR64::P64;
           P64[Sp - 16] = _saR65::P64;
           P64[Sp - 8] = _saR6n::P64;
           Sp = Sp - 32;
           call go1_saR6t_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saR6r_info" {
     io_saR6r_info:
         const io_saR6r_entry;
         const 3;
         const 36028801313931272;
         const 4294967299;
         const SaRfY_srt+328;
 },
 _caSRe() //  [R1]
         { []
         }
     {offset
       caSRe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSUS; else goto caSUR;
       caSUS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSUR: // global
           I64[Hp - 8] = go2_saR7d_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 8] = block_caSSh_info;
           R3 = R1;
           R2 = P64[Sp + 24];
           _saR7c::P64 = R1;
           R1 = Hp - 5;
           P64[Sp] = _saR7c::P64;
           Sp = Sp - 8;
           call go2_saR7d_entry(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSRe_info" {
     block_caSRe_info:
         const _caSRe;
         const 3;
         const 36028801313931294;
         const SaRfY_srt+328;
 },
 _caSSh() //  [R1]
         { []
         }
     {offset
       caSSh: // global
           I64[Sp - 8] = block_caSSj_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSSh_info" {
     block_caSSh_info:
         const _caSSh;
         const 4;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSSj() //  [R1]
         { []
         }
     {offset
       caSSj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caSUW; else goto caSUV;
       caSUW: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caSUV: // global
           I64[Hp - 8] = sat_saR8e_info;
           P64[Hp] = P64[Sp + 32];
           _saR7c::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caSTp_info;
           R5 = P64[Sp + 8];
           R4 = _saR7c::P64;
           R3 = P64[Sp + 40];
           R2 = Hp - 4;
           I64[Sp + 40] = R1;
           Sp = Sp + 16;
           call GHC.List.zipWith3_entry(R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSSj_info" {
     block_caSSj_info:
         const _caSSj;
         const 5;
         const 4294967326;
         const SaRfY_srt+328;
 },
 _caSTp() //  [R1]
         { []
         }
     {offset
       caSTp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caSUZ; else goto caSUY;
       caSUZ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSUY: // global
           _saR64::P64 = P64[Sp + 8];
           _saR65::P64 = P64[Sp + 16];
           _saR8f::I64 = I64[Sp + 24];
           if (_saR8f::I64 == 0) goto caSV8; else goto uaSVg;
       caSV8: // global
           I64[Hp - 56] = sat_saR8J_info;
           P64[Hp - 48] = _saR64::P64;
           P64[Hp - 40] = _saR65::P64;
           P64[Hp - 32] = R1;
           _caSTQ::P64 = Hp - 55;
           Hp = Hp - 32;
           R1 = _caSTQ::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uaSVg: // global
           if (_saR8f::I64 == 1) goto caSVc; else goto caSV4;
       caSVc: // global
           I64[Hp - 56] = sat_saR8R_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _saR64::P64;
           P64[Hp - 16] = _saR65::P64;
           I64[Hp - 8] = sat_saR8L_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 16] = block_caSV9_info;
           R2 = Hp - 54;
           _saR7E::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 24] = _saR7E::P64;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       caSV4: // global
           I64[Hp - 56] = sat_saR8n_info;
           P64[Hp - 48] = R1;
           I64[Hp - 40] = stg_ap_2_upd_info;
           P64[Hp - 24] = _saR64::P64;
           P64[Hp - 16] = _saR65::P64;
           I64[Hp - 8] = sat_saR8h_info;
           P64[Hp] = Hp - 40;
           I64[Sp + 16] = block_caSV0_info;
           R2 = Hp - 54;
           _saR7E::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 24] = _saR7E::P64;
           Sp = Sp + 16;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSTp_info" {
     block_caSTp_info:
         const _caSTp;
         const 259;
         const 30;
 },
 _caSV9() //  [R1]
         { []
         }
     {offset
       caSV9: // global
           I64[Sp] = block_caSVb_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSV9_info" {
     block_caSV9_info:
         const _caSV9;
         const 1;
         const 30;
 },
 _caSVb() //  []
         { []
         }
     {offset
       caSVb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSVb_info" {
     block_caSVb_info:
         const _caSVb;
         const 1;
         const 30;
 },
 _caSV0() //  [R1]
         { []
         }
     {offset
       caSV0: // global
           I64[Sp] = block_caSV2_info;
           R2 = P64[Sp + 8];
           P64[Sp + 8] = R1;
           call go_raLJX_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSV0_info" {
     block_caSV0_info:
         const _caSV0;
         const 1;
         const 30;
 },
 _caSV2() //  []
         { []
         }
     {offset
       caSV2: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSV2_info" {
     block_caSV2_info:
         const _caSV2;
         const 1;
         const 30;
 },
 go1_saR90_entry() //  [R1, R2]
         { []
         }
     {offset
       caSVu: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caSVv; else goto caSVw;
       caSVv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caSVw: // global
           _saR91::I64 = R2;
           _saR6h::P64 = P64[R1 + 14];
           _saR6j::P64 = P64[R1 + 22];
           _saR6i::I64 = I64[R1 + 30];
           if (%MO_S_Gt_W64(_saR6i::I64, R2)) goto caSVC; else goto caSVt;
       caSVt: // global
           _saR6k::I64 = I64[R1 + 38];
           if (%MO_S_Gt_W64(_saR91::I64,
                            _saR6k::I64)) goto caSVC; else goto caSVJ;
       caSVC: // global
           R4 = _saR91::I64;
           R3 = _saR6h::P64;
           R2 = _saR6j::P64;
           call GHC.Event.Thread.getSystemEventManager2_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
       caSVJ: // global
           _saR9a::P64 = P64[P64[R1 + 6] + ((_saR91::I64 - _saR6i::I64 << 3) + 24)];
           I64[Sp - 32] = block_caSVI_info;
           _saR90::P64 = R1;
           R1 = _saR9a::P64;
           I64[Sp - 24] = _saR6k::I64;
           P64[Sp - 16] = _saR90::P64;
           I64[Sp - 8] = _saR91::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaSWr; else goto caSVK;
       uaSWr: // global
           call _caSVI(R1) args: 0, res: 0, upd: 0;
       caSVK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . go1_saR90_info" {
     go1_saR90_info:
         const go1_saR90_entry;
         const 8589934595;
         const 9007203549708296;
         const 8589934596;
         const SaRfY_srt+328;
 },
 _caSVI() //  [R1]
         { []
         }
     {offset
       caSVI: // global
           if (R1 & 7 == 1) goto caSVQ; else goto caSW0;
       caSVQ: // global
           Sp = Sp + 32;
           call lvl30_raLJW_entry() args: 8, res: 0, upd: 8;
       caSW0: // global
           I64[Sp] = block_caSVT_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaSWs; else goto caSVU;
       uaSWs: // global
           call _caSVT(R1) args: 0, res: 0, upd: 0;
       caSVU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSVI_info" {
     block_caSVI_info:
         const _caSVI;
         const 323;
         const 9007203549708318;
         const SaRfY_srt+328;
 },
 _caSVT() //  [R1]
         { []
         }
     {offset
       caSVT: // global
           I64[Sp] = block_caSVY_info;
           R1 = P64[R1 + 15];
           if (R1 & 7 != 0) goto uaSWt; else goto caSW2;
       uaSWt: // global
           call _caSVY(R1) args: 0, res: 0, upd: 0;
       caSW2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSVT_info" {
     block_caSVT_info:
         const _caSVT;
         const 323;
         const 9007203549708318;
         const SaRfY_srt+328;
 },
 _caSVY() //  [R1]
         { []
         }
     {offset
       caSVY: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSW8; else goto caSW7;
       caSW8: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSW7: // global
           _saR91::I64 = I64[Sp + 24];
           if (_saR91::I64 == I64[Sp + 8]) goto caSWp; else goto caSWj;
       caSWp: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caSWj: // global
           Hp = Hp - 24;
           _saR90::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caSWf_info;
           R2 = _saR91::I64 + 1;
           _saR9h::P64 = R1;
           R1 = _saR90::P64;
           P64[Sp + 24] = _saR9h::P64;
           Sp = Sp + 16;
           call go1_saR90_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSVY_info" {
     block_caSVY_info:
         const _caSVY;
         const 323;
         const 9007203549708318;
         const SaRfY_srt+328;
 },
 _caSWf() //  [R1]
         { []
         }
     {offset
       caSWf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caSWm; else goto caSWl;
       caSWm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSWl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSWf_info" {
     block_caSWf_info:
         const _caSWf;
         const 1;
         const 30;
 },
 section ""relreadonly" . uaSWZ_srtd" {
     uaSWZ_srtd:
         const SaRfY_srt+224;
         const 38;
         const 223338307585;
 },
 GHC.Event.Thread.closeFdWith1_entry() //  [R2, R3]
         { []
         }
     {offset
       caSWu: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caSWv; else goto caSWw;
       caSWv: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Thread.closeFdWith1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caSWw: // global
           I64[Sp - 24] = block_caSPk_info;
           R1 = GHC.Event.Thread.eventManager_closure;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaSWX; else goto caSPl;
       uaSWX: // global
           call _caSPk(R1) args: 0, res: 0, upd: 0;
       caSPl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.closeFdWith1_info" {
     GHC.Event.Thread.closeFdWith1_info:
         const GHC.Event.Thread.closeFdWith1_entry;
         const 0;
         const 18446744069414584334;
         const 12884901903;
         const uaSWZ_srtd;
 },
 _caSPk() //  [R1]
         { []
         }
     {offset
       caSPk: // global
           _saR6b::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caSPp_info;
           R1 = _saR6b::P64;
           if (R1 & 7 != 0) goto uaSWT; else goto caSPq;
       uaSWT: // global
           call _caSPp(R1) args: 0, res: 0, upd: 0;
       caSPq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSPk_info" {
     block_caSPk_info:
         const _caSPk;
         const 2;
         const 45036000568672286;
         const SaRfY_srt+328;
 },
 _caSPp() //  [R1]
         { []
         }
     {offset
       caSPp: // global
           I64[Sp - 16] = block_caSPu_info;
           _saR6e::P64 = P64[R1 + 15];
           _saR6g::P64 = P64[R1 + 23];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _saR6g::P64;
           P64[Sp] = _saR6e::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaSWU; else goto caSPv;
       uaSWU: // global
           call _caSPu(R1) args: 0, res: 0, upd: 0;
       caSPv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSPp_info" {
     block_caSPp_info:
         const _caSPp;
         const 2;
         const 45036000568672286;
         const SaRfY_srt+328;
 },
 _caSPu() //  [R1]
         { []
         }
     {offset
       caSPu: // global
           I64[Sp - 8] = block_caSPz_info;
           _saR6h::P64 = R1;
           _saR6i::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saR6i::I64;
           P64[Sp + 16] = _saR6h::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaSWV; else goto caSPA;
       uaSWV: // global
           call _caSPz(R1) args: 0, res: 0, upd: 0;
       caSPA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caSPu_info" {
     block_caSPu_info:
         const _caSPu;
         const 4;
         const 45036000568672286;
         const SaRfY_srt+328;
 },
 _caSPz() //  [R1]
         { []
         }
     {offset
       caSPz: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caSWC; else goto caSWB;
       caSWC: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caSWB: // global
           _saR6i::I64 = I64[Sp + 8];
           _saR6k::I64 = I64[R1 + 7];
           if (%MO_S_Le_W64(_saR6i::I64,
                            _saR6k::I64)) goto caSWN; else goto caSWQ;
       caSWN: // global
           I64[Hp - 40] = go1_saR90_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = _saR6i::I64;
           I64[Hp] = _saR6k::I64;
           I64[Sp + 24] = block_caSWL_info;
           R2 = _saR6i::I64;
           R1 = Hp - 38;
           Sp = Sp + 24;
           call go1_saR90_entry(R2, R1) args: 8, res: 8, upd: 8;
       caSWQ: // global
           Hp = Hp - 48;
           P64[Sp + 24] = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call _saR6l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSPz_info" {
     block_caSPz_info:
         const _caSPz;
         const 69;
         const 45036000568672286;
         const SaRfY_srt+328;
 },
 _caSWL() //  [R1]
         { []
         }
     {offset
       caSWL: // global
           P64[Sp] = R1;
           call _saR6l() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caSWL_info" {
     block_caSWL_info:
         const _caSWL;
         const 2;
         const 36028801313931294;
         const SaRfY_srt+328;
 },
 _saR6l() //  []
         { []
         }
     {offset
       saR6l: // global
           I64[Sp - 8] = block_caSPJ_info;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 _caSPJ() //  [R1]
         { []
         }
     {offset
       caSPJ: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caSWG; else goto caSWF;
       caSWG: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caSWF: // global
           I64[Hp - 24] = io_saR6r_info;
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = P64[Sp + 8];
           _caSPL::P64 = Hp - 23;
           if (R1 == 0) goto caSWK; else goto caSWJ;
       caSWK: // global
           R1 = _caSPL::P64;
           Sp = Sp + 32;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caSWJ: // global
           R1 = _caSPL::P64;
           Sp = Sp + 32;
           call io_saR6r_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caSPJ_info" {
     block_caSPJ_info:
         const _caSPJ;
         const 3;
         const 36028801313931294;
         const SaRfY_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.571651142 UTC

[section ""data" . GHC.Event.Thread.closeFdWith_closure" {
     GHC.Event.Thread.closeFdWith_closure:
         const GHC.Event.Thread.closeFdWith_info;
         const 0;
 },
 GHC.Event.Thread.closeFdWith_entry() //  [R2, R3]
         { []
         }
     {offset
       caT2a: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Thread.closeFdWith1_entry(R3,
                                                    R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.closeFdWith_info" {
     GHC.Event.Thread.closeFdWith_info:
         const GHC.Event.Thread.closeFdWith_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SaRfY_srt+520;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.575460614 UTC

[section ""data" . GHC.Event.Thread.registerDelay2_closure" {
     GHC.Event.Thread.registerDelay2_closure:
         const GHC.Event.Thread.registerDelay2_info;
 },
 GHC.Event.Thread.registerDelay2_entry() //  []
         { []
         }
     {offset
       caT2o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caT2p; else goto caT2q;
       caT2p: // global
           R1 = GHC.Event.Thread.registerDelay2_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caT2q: // global
           I64[Sp - 8] = block_caT2l_info;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp - 8;
           call stg_newTVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.registerDelay2_info" {
     GHC.Event.Thread.registerDelay2_info:
         const GHC.Event.Thread.registerDelay2_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caT2l() //  [R1]
         { []
         }
     {offset
       caT2l: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caT2t; else goto caT2s;
       caT2t: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caT2s: // global
           I64[Hp - 8] = GHC.Conc.Sync.TVar_con_info;
           P64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caT2l_info" {
     block_caT2l_info:
         const _caT2l;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.590192701 UTC

[section ""data" . GHC.Event.Thread.$wregisterDelay_closure" {
     GHC.Event.Thread.$wregisterDelay_closure:
         const GHC.Event.Thread.$wregisterDelay_info;
         const 0;
 },
 w1_saRaa_entry() //  [R1]
         { []
         }
     {offset
       caT3c: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caT3g; else goto caT3h;
       caT3g: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caT3h: // global
           I64[Sp - 8] = block_caT39_info;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaT3l; else goto caT3a;
       uaT3l: // global
           call _caT39(R1) args: 0, res: 0, upd: 0;
       caT3a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w1_saRaa_info" {
     w1_saRaa_info:
         const w1_saRaa_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caT39() //  [R1]
         { []
         }
     {offset
       caT39: // global
           I64[Sp] = block_caT3f_info;
           R2 = GHC.Types.True_closure+2;
           R1 = P64[R1 + 7];
           call stg_writeTVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT39_info" {
     block_caT39_info:
         const _caT39;
         const 0;
         const 30;
 },
 _caT3f() //  []
         { []
         }
     {offset
       caT3f: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caT3f_info" {
     block_caT3f_info:
         const _caT3f;
         const 0;
         const 30;
 },
 w2_saRak_entry() //  [R1]
         { []
         }
     {offset
       caT3v: // global
           R1 = P64[R1 + 7];
           call stg_atomically#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . w2_saRak_info" {
     w2_saRak_info:
         const w2_saRak_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saRb0_entry() //  [R1]
         { []
         }
     {offset
       caT47: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caT48; else goto caT49;
       caT48: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caT49: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caT3Z_info;
           _saRar::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saRar::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaT54; else goto caT40;
       uaT54: // global
           call _caT3Z(R1) args: 0, res: 0, upd: 0;
       caT40: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saRb0_info" {
     sat_saRb0_info:
         const sat_saRb0_entry;
         const 2;
         const 18;
 },
 _caT3Z() //  [R1]
         { []
         }
     {offset
       caT3Z: // global
           _caT46::P64 = R1 & 7;
           if (_caT46::P64 < 3) goto uaT4V; else goto uaT4Y;
       uaT4V: // global
           _saRar::P64 = P64[Sp + 8];
           if (_caT46::P64 < 2) goto caT43; else goto caT44;
       caT43: // global
           I64[Sp] = block_caT4c_info;
           _saRau::I64 = I64[R1 + 39];
           R1 = _saRar::P64;
           I64[Sp + 8] = _saRau::I64;
           if (R1 & 7 != 0) goto uaT51; else goto caT4e;
       uaT51: // global
           call _caT4c(R1) args: 0, res: 0, upd: 0;
       caT4e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caT44: // global
           I64[Sp] = block_caT4v_info;
           _saRaM::I64 = I64[R1 + 22];
           R1 = _saRar::P64;
           I64[Sp + 8] = _saRaM::I64;
           if (R1 & 7 != 0) goto uaT52; else goto caT4x;
       uaT52: // global
           call _caT4v(R1) args: 0, res: 0, upd: 0;
       caT4x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaT4Y: // global
           Sp = Sp + 16;
           call _caT45() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caT3Z_info" {
     block_caT3Z_info:
         const _caT3Z;
         const 1;
         const 30;
 },
 _caT4c() //  [R1]
         { []
         }
     {offset
       caT4c: // global
           _caT4S::P64 = R1 & 7;
           if (_caT4S::P64 < 3) goto uaT4W; else goto uaT4Z;
       uaT4W: // global
           _saRau::I64 = I64[Sp + 8];
           if (_caT4S::P64 < 2) goto caT4k; else goto caT4o;
       caT4k: // global
           R1 = I64[((_saRau::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caT4o: // global
           R1 = I64[((_saRau::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaT4Z: // global
           Sp = Sp + 16;
           call _caT45() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caT4c_info" {
     block_caT4c_info:
         const _caT4c;
         const 65;
         const 30;
 },
 _caT4v() //  [R1]
         { []
         }
     {offset
       caT4v: // global
           _caT4P::P64 = R1 & 7;
           if (_caT4P::P64 < 3) goto uaT4X; else goto uaT50;
       uaT4X: // global
           _saRaM::I64 = I64[Sp + 8];
           if (_caT4P::P64 < 2) goto caT4D; else goto caT4H;
       caT4D: // global
           R1 = I64[((_saRaM::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caT4H: // global
           R1 = I64[((_saRaM::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaT50: // global
           Sp = Sp + 16;
           call _caT45() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caT4v_info" {
     block_caT4v_info:
         const _caT4v;
         const 65;
         const 30;
 },
 _caT45() //  []
         { []
         }
     {offset
       caT45: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saRb1_entry() //  [R1, R2]
         { []
         }
     {offset
       caT57: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caT59; else goto caT5a;
       caT59: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caT5a: // global
           I64[Sp - 40] = block_caT3N_info;
           R3 = R2;
           _saRap::P64 = R2;
           R2 = P64[R1 + 15];
           I64[Sp - 32] = I64[R1 + 23];
           P64[Sp - 24] = P64[R1 + 7];
           I64[Sp - 16] = I64[R1 + 31];
           P64[Sp - 8] = _saRap::P64;
           Sp = Sp - 40;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saRb1_info" {
     sat_saRb1_info:
         const sat_saRb1_entry;
         const 8589934594;
         const 8;
         const 4294967301;
 },
 _caT3N() //  [R1]
         { []
         }
     {offset
       caT3N: // global
           _saRam::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_caT3R_info;
           R5 = R1;
           R4 = P64[Sp + 16];
           R3 = _saRam::I64;
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT3N_info" {
     block_caT3N_info:
         const _caT3N;
         const 324;
         const 30;
 },
 _caT3R() //  [R1]
         { []
         }
     {offset
       caT3R: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caT5e; else goto caT5d;
       caT5e: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caT5d: // global
           I64[Hp - 48] = sat_saRb0_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caT3R_info" {
     block_caT3R_info:
         const _caT3R;
         const 1;
         const 30;
 },
 GHC.Event.Thread.$wregisterDelay_entry() //  [R2]
         { []
         }
     {offset
       caT5f: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caT5g; else goto caT5h;
       caT5g: // global
           R2 = R2;
           R1 = GHC.Event.Thread.$wregisterDelay_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caT5h: // global
           I64[Sp - 16] = block_caT2K_info;
           R1 = GHC.Event.Thread.registerDelay2_closure+1;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wregisterDelay_info" {
     GHC.Event.Thread.$wregisterDelay_info:
         const GHC.Event.Thread.$wregisterDelay_entry;
         const 0;
         const 133143986190;
         const 8589934596;
         const SaRfY_srt+528;
 },
 _caT2K() //  [R1]
         { []
         }
     {offset
       caT2K: // global
           I64[Sp - 8] = block_caT2M_info;
           _saR9O::P64 = R1;
           R1 = GHC.Event.Thread.timerManager_closure;
           P64[Sp] = _saR9O::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaT6O; else goto caT2N;
       uaT6O: // global
           call _caT2M(R1) args: 0, res: 0, upd: 0;
       caT2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT2K_info" {
     block_caT2K_info:
         const _caT2K;
         const 65;
         const 64424509470;
         const SaRfY_srt+536;
 },
 _caT2M() //  [R1]
         { []
         }
     {offset
       caT2M: // global
           _saR9T::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caT2R_info;
           R1 = _saR9T::P64;
           if (R1 & 7 != 0) goto uaT6P; else goto caT2S;
       uaT6P: // global
           call _caT2R(R1) args: 0, res: 0, upd: 0;
       caT2S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT2M_info" {
     block_caT2M_info:
         const _caT2M;
         const 130;
         const 30064771102;
         const SaRfY_srt+544;
 },
 _caT2R() //  [R1]
         { []
         }
     {offset
       caT2R: // global
           if (R1 & 7 == 1) goto caT5n; else goto caT5p;
       caT5n: // global
           Sp = Sp + 24;
           call GHC.Event.Thread.getSystemTimerManager2_entry() args: 8, res: 0, upd: 8;
       caT5p: // global
           I64[Sp] = block_caT2X_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uaT6Q; else goto caT2Y;
       uaT6Q: // global
           call _caT2X(R1) args: 0, res: 0, upd: 0;
       caT2Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT2R_info" {
     block_caT2R_info:
         const _caT2R;
         const 130;
         const 30064771102;
         const SaRfY_srt+544;
 },
 _caT2X() //  [R1]
         { []
         }
     {offset
       caT2X: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto caT5s; else goto caT5r;
       caT5s: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caT5r: // global
           _saR9K::I64 = I64[Sp + 16];
           _saR9O::P64 = P64[Sp + 8];
           _saR9Z::P64 = P64[R1 + 15];
           _saRa6::P64 = P64[R1 + 47];
           _saRa4::I64 = I64[R1 + 71];
           (_saRa9::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 31] + 16, 1);
           I64[Hp - 80] = w1_saRaa_info;
           P64[Hp - 72] = _saR9O::P64;
           _caT34::P64 = Hp - 79;
           if (%MO_S_Gt_W64(_saR9K::I64, 0)) goto caT5x; else goto caT6F;
       caT5x: // global
           (_saRaj::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 64] = w2_saRak_info;
           P64[Hp - 56] = _caT34::P64;
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _saRa9::I64;
           I64[Hp - 32] = sat_saRb1_info;
           P64[Hp - 24] = Hp - 63;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _saRa9::I64;
           I64[Hp] = _saR9K::I64 * 1000 + _saRaj::I64;
           I64[Sp - 8] = block_caT5t_info;
           R2 = Hp - 31;
           R1 = _saR9Z::P64;
           P64[Sp] = _saRa6::P64;
           I64[Sp + 16] = _saRa4::I64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       caT6F: // global
           Hp = Hp - 72;
           I64[Sp] = block_caT6E_info;
           R1 = _caT34::P64;
           call stg_atomically#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT2X_info" {
     block_caT2X_info:
         const _caT2X;
         const 130;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caT5t() //  [R1]
         { []
         }
     {offset
       caT5t: // global
           I64[Sp] = block_caT5v_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaT6R; else goto caT5z;
       uaT6R: // global
           call _caT5v(R1) args: 0, res: 0, upd: 0;
       caT5z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT5t_info" {
     block_caT5t_info:
         const _caT5t;
         const 259;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caT5v() //  [R1]
         { []
         }
     {offset
       caT5v: // global
           if (R1 & 7 == 1) goto uaT6L; else goto caT6C;
       uaT6L: // global
           Sp = Sp + 16;
           goto uaT6U;
       caT6C: // global
           _saRa6::P64 = P64[Sp + 8];
           (_saRba::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 24])), 1);
           if (%MO_SS_Conv_W64_W32(_saRba::I64) == 0 :: W32) goto uaT6M; else goto caT5Y;
       uaT6M: // global
           Sp = Sp + 16;
           goto uaT6U;
       uaT6U: // global
           call _caT6y() args: 0, res: 0, upd: 0;
       caT5Y: // global
           (_saRbf::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_caT5W_info;
           R1 = P64[_saRa6::P64 + 8];
           I64[Sp + 24] = _saRbf::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaT6S; else goto caT60;
       uaT6S: // global
           call _caT5W(R1) args: 0, res: 0, upd: 0;
       caT60: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT5v_info" {
     block_caT5v_info:
         const _caT5v;
         const 259;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caT5W() //  [R1]
         { []
         }
     {offset
       caT5W: // global
           if (R1 & 7 == 1) goto caT67; else goto caT6v;
       caT67: // global
           I64[Sp] = block_caT64_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caT6v: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 16]) == 9 :: W32) goto uaT6N; else goto caT6l;
       uaT6N: // global
           Sp = Sp + 8;
           call _caT6y() args: 0, res: 0, upd: 0;
       caT6l: // global
           I64[Sp] = block_caT6j_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caT5W_info" {
     block_caT5W_info:
         const _caT5W;
         const 130;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caT64() //  []
         { []
         }
     {offset
       caT64: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caT64_info" {
     block_caT64_info:
         const _caT64;
         const 130;
         const 30;
 },
 _caT6y() //  []
         { []
         }
     {offset
       caT6y: // global
           R1 = P64[Sp];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caT6j() //  []
         { []
         }
     {offset
       caT6j: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caT6j_info" {
     block_caT6j_info:
         const _caT6j;
         const 130;
         const 30;
 },
 _caT6E() //  []
         { []
         }
     {offset
       caT6E: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caT6E_info" {
     block_caT6E_info:
         const _caT6E;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.631918191 UTC

[section ""data" . GHC.Event.Thread.registerDelay1_closure" {
     GHC.Event.Thread.registerDelay1_closure:
         const GHC.Event.Thread.registerDelay1_info;
         const 0;
 },
 GHC.Event.Thread.registerDelay1_entry() //  [R2]
         { []
         }
     {offset
       caT9B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caT9C; else goto caT9D;
       caT9C: // global
           R2 = R2;
           R1 = GHC.Event.Thread.registerDelay1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caT9D: // global
           I64[Sp - 8] = block_caT9y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaT9H; else goto caT9z;
       uaT9H: // global
           call _caT9y(R1) args: 0, res: 0, upd: 0;
       caT9z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.registerDelay1_info" {
     GHC.Event.Thread.registerDelay1_info:
         const GHC.Event.Thread.registerDelay1_entry;
         const 0;
         const 141733920782;
         const 8589934597;
         const SaRfY_srt+528;
 },
 _caT9y() //  [R1]
         { []
         }
     {offset
       caT9y: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.Thread.$wregisterDelay_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caT9y_info" {
     block_caT9y_info:
         const _caT9y;
         const 0;
         const 4294967326;
         const SaRfY_srt+528;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.637080439 UTC

[section ""data" . GHC.Event.Thread.registerDelay_closure" {
     GHC.Event.Thread.registerDelay_closure:
         const GHC.Event.Thread.registerDelay_info;
         const 0;
 },
 GHC.Event.Thread.registerDelay_entry() //  [R2]
         { []
         }
     {offset
       caT9W: // global
           R2 = R2;
           call GHC.Event.Thread.registerDelay1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.registerDelay_info" {
     GHC.Event.Thread.registerDelay_info:
         const GHC.Event.Thread.registerDelay_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaRfY_srt+568;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.657028316 UTC

[section ""data" . GHC.Event.Thread.$wthreadDelay_closure" {
     GHC.Event.Thread.$wthreadDelay_closure:
         const GHC.Event.Thread.$wthreadDelay_info;
         const 0;
 },
 sat_saRcL_entry() //  [R1]
         { []
         }
     {offset
       caTb4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caTb5; else goto caTb6;
       caTb5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caTb6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caTaW_info;
           _saRcc::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saRcc::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaTc1; else goto caTaX;
       uaTc1: // global
           call _caTaW(R1) args: 0, res: 0, upd: 0;
       caTaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saRcL_info" {
     sat_saRcL_info:
         const sat_saRcL_entry;
         const 2;
         const 18;
 },
 _caTaW() //  [R1]
         { []
         }
     {offset
       caTaW: // global
           _caTb3::P64 = R1 & 7;
           if (_caTb3::P64 < 3) goto uaTbS; else goto uaTbV;
       uaTbS: // global
           _saRcc::P64 = P64[Sp + 8];
           if (_caTb3::P64 < 2) goto caTb0; else goto caTb1;
       caTb0: // global
           I64[Sp] = block_caTb9_info;
           _saRcf::I64 = I64[R1 + 39];
           R1 = _saRcc::P64;
           I64[Sp + 8] = _saRcf::I64;
           if (R1 & 7 != 0) goto uaTbY; else goto caTbb;
       uaTbY: // global
           call _caTb9(R1) args: 0, res: 0, upd: 0;
       caTbb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caTb1: // global
           I64[Sp] = block_caTbs_info;
           _saRcx::I64 = I64[R1 + 22];
           R1 = _saRcc::P64;
           I64[Sp + 8] = _saRcx::I64;
           if (R1 & 7 != 0) goto uaTbZ; else goto caTbu;
       uaTbZ: // global
           call _caTbs(R1) args: 0, res: 0, upd: 0;
       caTbu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaTbV: // global
           Sp = Sp + 16;
           call _caTb2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTaW_info" {
     block_caTaW_info:
         const _caTaW;
         const 1;
         const 30;
 },
 _caTb9() //  [R1]
         { []
         }
     {offset
       caTb9: // global
           _caTbP::P64 = R1 & 7;
           if (_caTbP::P64 < 3) goto uaTbT; else goto uaTbW;
       uaTbT: // global
           _saRcf::I64 = I64[Sp + 8];
           if (_caTbP::P64 < 2) goto caTbh; else goto caTbl;
       caTbh: // global
           R1 = I64[((_saRcf::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caTbl: // global
           R1 = I64[((_saRcf::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaTbW: // global
           Sp = Sp + 16;
           call _caTb2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTb9_info" {
     block_caTb9_info:
         const _caTb9;
         const 65;
         const 30;
 },
 _caTbs() //  [R1]
         { []
         }
     {offset
       caTbs: // global
           _caTbM::P64 = R1 & 7;
           if (_caTbM::P64 < 3) goto uaTbU; else goto uaTbX;
       uaTbU: // global
           _saRcx::I64 = I64[Sp + 8];
           if (_caTbM::P64 < 2) goto caTbA; else goto caTbE;
       caTbA: // global
           R1 = I64[((_saRcx::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caTbE: // global
           R1 = I64[((_saRcx::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaTbX: // global
           Sp = Sp + 16;
           call _caTb2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTbs_info" {
     block_caTbs_info:
         const _caTbs;
         const 65;
         const 30;
 },
 _caTb2() //  []
         { []
         }
     {offset
       caTb2: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saRcM_entry() //  [R1, R2]
         { []
         }
     {offset
       caTc4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caTc6; else goto caTc7;
       caTc6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caTc7: // global
           I64[Sp - 16] = block_caTaO_info;
           R3 = R2;
           _saRcb::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _saRcb::P64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saRcM_info" {
     sat_saRcM_info:
         const sat_saRcM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _caTaO() //  [R1]
         { []
         }
     {offset
       caTaO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caTca; else goto caTc9;
       caTca: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caTc9: // global
           I64[Hp - 48] = sat_saRcL_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caTaO_info" {
     block_caTaO_info:
         const _caTaO;
         const 1;
         const 30;
 },
 sat_saRdc_entry() //  [R1, R2]
         { []
         }
     {offset
       caTck: // global
           _saRc9::P64 = R2;
           _saRdc::P64 = R1;
           if ((Sp + -32) < SpLim) (likely: False) goto caTcl; else goto caTcm;
       caTcm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caTco; else goto caTcn;
       caTco: // global
           HpAlloc = 16;
           goto caTcl;
       caTcl: // global
           R2 = _saRc9::P64;
           R1 = _saRdc::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caTcn: // global
           _saRbS::P64 = P64[_saRdc::P64 + 6];
           _saRbZ::P64 = P64[_saRdc::P64 + 14];
           _saRc6::P64 = P64[_saRdc::P64 + 22];
           _saRbX::I64 = I64[_saRdc::P64 + 30];
           I64[Hp - 8] = sat_saRcM_info;
           P64[Hp] = _saRc6::P64;
           I64[Sp - 32] = block_caTcb_info;
           R2 = Hp - 7;
           R1 = _saRbS::P64;
           I64[Sp - 24] = _saRbX::I64;
           P64[Sp - 16] = _saRbZ::P64;
           P64[Sp - 8] = _saRc9::P64;
           Sp = Sp - 32;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saRdc_info" {
     sat_saRdc_info:
         const sat_saRdc_entry;
         const 4294967299;
         const 12884901896;
         const 8589934597;
         const SaRfY_srt+552;
 },
 _caTcb() //  [R1]
         { []
         }
     {offset
       caTcb: // global
           I64[Sp] = block_caTcd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaTdt; else goto caTce;
       uaTdt: // global
           call _caTcd(R1) args: 0, res: 0, upd: 0;
       caTce: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTcb_info" {
     block_caTcb_info:
         const _caTcb;
         const 67;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTcd() //  [R1]
         { []
         }
     {offset
       caTcd: // global
           if (R1 & 7 == 1) goto uaTdq; else goto caTci;
       uaTdq: // global
           Sp = Sp + 24;
           goto uaTdw;
       caTci: // global
           _saRbZ::P64 = P64[Sp + 16];
           (_saRcV::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), 1);
           if (%MO_SS_Conv_W64_W32(_saRcV::I64) == 0 :: W32) goto uaTdr; else goto caTcL;
       uaTdr: // global
           Sp = Sp + 24;
           goto uaTdw;
       uaTdw: // global
           call _caTdl() args: 0, res: 0, upd: 0;
       caTcL: // global
           (_saRd0::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_caTcJ_info;
           R1 = P64[_saRbZ::P64 + 8];
           I64[Sp + 16] = _saRd0::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaTdu; else goto caTcN;
       uaTdu: // global
           call _caTcJ(R1) args: 0, res: 0, upd: 0;
       caTcN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTcd_info" {
     block_caTcd_info:
         const _caTcd;
         const 67;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTcJ() //  [R1]
         { []
         }
     {offset
       caTcJ: // global
           if (R1 & 7 == 1) goto caTcU; else goto caTdi;
       caTcU: // global
           I64[Sp + 8] = block_caTcR_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caTdi: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uaTds; else goto caTd8;
       uaTds: // global
           Sp = Sp + 16;
           call _caTdl() args: 0, res: 0, upd: 0;
       caTd8: // global
           I64[Sp + 8] = block_caTd6_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTcJ_info" {
     block_caTcJ_info:
         const _caTcJ;
         const 66;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTcR() //  []
         { []
         }
     {offset
       caTcR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caTcR_info" {
     block_caTcR_info:
         const _caTcR;
         const 1;
         const 30;
 },
 _caTdl() //  []
         { []
         }
     {offset
       caTdl: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caTd6() //  []
         { []
         }
     {offset
       caTd6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caTd6_info" {
     block_caTd6_info:
         const _caTd6;
         const 1;
         const 30;
 },
 sat_saRc8_entry() //  [R1]
         { []
         }
     {offset
       caTdD: // global
           R1 = P64[R1 + 7];
           call stg_takeMVar#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saRc8_info" {
     sat_saRc8_info:
         const sat_saRc8_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 w1_saRdi_entry() //  [R1]
         { []
         }
     {offset
       caTdR: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caTdS; else goto caTdT;
       caTdS: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caTdT: // global
           I64[Sp - 8] = block_caTdP_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[R1 + 7];
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . w1_saRdi_info" {
     w1_saRdi_info:
         const w1_saRdi_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 _caTdP() //  []
         { []
         }
     {offset
       caTdP: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caTdP_info" {
     block_caTdP_info:
         const _caTdP;
         const 0;
         const 30;
 },
 sat_saRdZ_entry() //  [R1]
         { []
         }
     {offset
       caTet: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caTeu; else goto caTev;
       caTeu: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caTev: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caTel_info;
           _saRdq::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saRdq::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaTfq; else goto caTem;
       uaTfq: // global
           call _caTel(R1) args: 0, res: 0, upd: 0;
       caTem: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saRdZ_info" {
     sat_saRdZ_info:
         const sat_saRdZ_entry;
         const 2;
         const 18;
 },
 _caTel() //  [R1]
         { []
         }
     {offset
       caTel: // global
           _caTes::P64 = R1 & 7;
           if (_caTes::P64 < 3) goto uaTfh; else goto uaTfk;
       uaTfh: // global
           _saRdq::P64 = P64[Sp + 8];
           if (_caTes::P64 < 2) goto caTep; else goto caTeq;
       caTep: // global
           I64[Sp] = block_caTey_info;
           _saRdt::I64 = I64[R1 + 39];
           R1 = _saRdq::P64;
           I64[Sp + 8] = _saRdt::I64;
           if (R1 & 7 != 0) goto uaTfn; else goto caTeA;
       uaTfn: // global
           call _caTey(R1) args: 0, res: 0, upd: 0;
       caTeA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caTeq: // global
           I64[Sp] = block_caTeR_info;
           _saRdL::I64 = I64[R1 + 22];
           R1 = _saRdq::P64;
           I64[Sp + 8] = _saRdL::I64;
           if (R1 & 7 != 0) goto uaTfo; else goto caTeT;
       uaTfo: // global
           call _caTeR(R1) args: 0, res: 0, upd: 0;
       caTeT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaTfk: // global
           Sp = Sp + 16;
           call _caTer() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTel_info" {
     block_caTel_info:
         const _caTel;
         const 1;
         const 30;
 },
 _caTey() //  [R1]
         { []
         }
     {offset
       caTey: // global
           _caTfe::P64 = R1 & 7;
           if (_caTfe::P64 < 3) goto uaTfi; else goto uaTfl;
       uaTfi: // global
           _saRdt::I64 = I64[Sp + 8];
           if (_caTfe::P64 < 2) goto caTeG; else goto caTeK;
       caTeG: // global
           R1 = I64[((_saRdt::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caTeK: // global
           R1 = I64[((_saRdt::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaTfl: // global
           Sp = Sp + 16;
           call _caTer() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTey_info" {
     block_caTey_info:
         const _caTey;
         const 65;
         const 30;
 },
 _caTeR() //  [R1]
         { []
         }
     {offset
       caTeR: // global
           _caTfb::P64 = R1 & 7;
           if (_caTfb::P64 < 3) goto uaTfj; else goto uaTfm;
       uaTfj: // global
           _saRdL::I64 = I64[Sp + 8];
           if (_caTfb::P64 < 2) goto caTeZ; else goto caTf3;
       caTeZ: // global
           R1 = I64[((_saRdL::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caTf3: // global
           R1 = I64[((_saRdL::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaTfm: // global
           Sp = Sp + 16;
           call _caTer() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTeR_info" {
     block_caTeR_info:
         const _caTeR;
         const 65;
         const 30;
 },
 _caTer() //  []
         { []
         }
     {offset
       caTer: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_saRe0_entry() //  [R1, R2]
         { []
         }
     {offset
       caTft: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caTfv; else goto caTfw;
       caTfv: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caTfw: // global
           I64[Sp - 40] = block_caTe9_info;
           R3 = R2;
           _saRdo::P64 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 32] = I64[R1 + 23];
           P64[Sp - 24] = P64[R1 + 15];
           I64[Sp - 16] = I64[R1 + 31];
           P64[Sp - 8] = _saRdo::P64;
           Sp = Sp - 40;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saRe0_info" {
     sat_saRe0_info:
         const sat_saRe0_entry;
         const 8589934594;
         const 8;
         const 4294967301;
 },
 _caTe9() //  [R1]
         { []
         }
     {offset
       caTe9: // global
           _saRdl::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_caTed_info;
           R5 = R1;
           R4 = P64[Sp + 16];
           R3 = _saRdl::I64;
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTe9_info" {
     block_caTe9_info:
         const _caTe9;
         const 324;
         const 30;
 },
 _caTed() //  [R1]
         { []
         }
     {offset
       caTed: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caTfA; else goto caTfz;
       caTfA: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caTfz: // global
           I64[Hp - 48] = sat_saRdZ_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caTed_info" {
     block_caTed_info:
         const _caTed;
         const 1;
         const 30;
 },
 io_saRbD_entry() //  [R1]
         { []
         }
     {offset
       caTfB: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caTfC; else goto caTfD;
       caTfC: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caTfD: // global
           I64[Sp - 16] = block_caTae_info;
           _saRby::I64 = I64[R1 + 7];
           R1 = GHC.Event.Thread.timerManager_closure;
           I64[Sp - 8] = _saRby::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaThi; else goto caTaf;
       uaThi: // global
           call _caTae(R1) args: 0, res: 0, upd: 0;
       caTaf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saRbD_info" {
     io_saRbD_info:
         const io_saRbD_entry;
         const 4294967296;
         const 64424509450;
         const 4294967299;
         const SaRfY_srt+536;
 },
 _caTae() //  [R1]
         { []
         }
     {offset
       caTae: // global
           _saRbJ::P64 = P64[P64[R1 + 7] + 8];
           I64[Sp] = block_caTaj_info;
           R1 = _saRbJ::P64;
           if (R1 & 7 != 0) goto uaThf; else goto caTak;
       uaThf: // global
           call _caTaj(R1) args: 0, res: 0, upd: 0;
       caTak: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTae_info" {
     block_caTae_info:
         const _caTae;
         const 65;
         const 30064771102;
         const SaRfY_srt+544;
 },
 _caTaj() //  [R1]
         { []
         }
     {offset
       caTaj: // global
           if (R1 & 7 == 1) goto caTfI; else goto caTfK;
       caTfI: // global
           Sp = Sp + 16;
           call GHC.Event.Thread.getSystemTimerManager2_entry() args: 8, res: 0, upd: 8;
       caTfK: // global
           I64[Sp - 8] = block_caTap_info;
           P64[Sp] = P64[R1 + 6];
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTaj_info" {
     block_caTaj_info:
         const _caTaj;
         const 65;
         const 30064771102;
         const SaRfY_srt+544;
 },
 _caTap() //  [R1]
         { []
         }
     {offset
       caTap: // global
           I64[Sp] = block_caTar_info;
           _saRbP::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _saRbP::P64;
           if (R1 & 7 != 0) goto uaThg; else goto caTas;
       uaThg: // global
           call _caTar(R1) args: 0, res: 0, upd: 0;
       caTas: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTap_info" {
     block_caTap_info:
         const _caTap;
         const 130;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTar() //  [R1]
         { []
         }
     {offset
       caTar: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto caTfO; else goto caTfN;
       caTfO: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caTfN: // global
           _saRby::I64 = I64[Sp + 16];
           _saRbP::P64 = P64[Sp + 8];
           _saRbS::P64 = P64[R1 + 15];
           _saRbZ::P64 = P64[R1 + 47];
           _saRbX::I64 = I64[R1 + 71];
           (_saRc2::I64) = call MO_AtomicRMW W64 AMO_Add(P64[R1 + 31] + 16, 1);
           I64[Hp - 64] = GHC.Types.I#_con_info;
           I64[Hp - 56] = _saRc2::I64;
           _caTay::P64 = Hp - 63;
           if (%MO_S_Gt_W64(_saRby::I64, 0)) goto caTfW; else goto caTh4;
       caTfW: // global
           (_saRdh::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 48] = w1_saRdi_info;
           P64[Hp - 40] = _saRbP::P64;
           I64[Hp - 32] = sat_saRe0_info;
           P64[Hp - 24] = _caTay::P64;
           P64[Hp - 16] = Hp - 47;
           I64[Hp - 8] = _saRc2::I64;
           I64[Hp] = _saRby::I64 * 1000 + _saRdh::I64;
           I64[Sp - 24] = block_caTfS_info;
           R2 = Hp - 31;
           R1 = _saRbS::P64;
           I64[Sp - 16] = _saRbX::I64;
           P64[Sp - 8] = _saRbZ::P64;
           P64[Sp] = _saRbS::P64;
           P64[Sp + 16] = _caTay::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       caTh4: // global
           Hp = Hp - 56;
           I64[Sp - 24] = block_caTh3_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saRbP::P64;
           P64[Sp + 16] = _caTay::P64;
           P64[Sp] = _saRbS::P64;
           I64[Sp - 16] = _saRbX::I64;
           P64[Sp - 8] = _saRbZ::P64;
           Sp = Sp - 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTar_info" {
     block_caTar_info:
         const _caTar;
         const 130;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTfS() //  [R1]
         { []
         }
     {offset
       caTfS: // global
           I64[Sp] = block_caTfU_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaThj; else goto caTfY;
       uaThj: // global
           call _caTfU(R1) args: 0, res: 0, upd: 0;
       caTfY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTfS_info" {
     block_caTfS_info:
         const _caTfS;
         const 69;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTfU() //  [R1]
         { []
         }
     {offset
       caTfU: // global
           if (R1 & 7 == 1) goto uaThm; else goto caTh1;
       caTh1: // global
           _saRbZ::P64 = P64[Sp + 16];
           (_saRe9::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])), 1);
           if (%MO_SS_Conv_W64_W32(_saRe9::I64) == 0 :: W32) goto uaThm; else goto caTgn;
       uaThm: // global
           call _caTh3() args: 0, res: 0, upd: 0;
       caTgn: // global
           (_saRee::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp - 8] = block_caTgl_info;
           R1 = P64[_saRbZ::P64 + 8];
           I64[Sp] = _saRee::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaThl; else goto caTgp;
       uaThl: // global
           call _caTgl(R1) args: 0, res: 0, upd: 0;
       caTgp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTfU_info" {
     block_caTfU_info:
         const _caTfU;
         const 69;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTgl() //  [R1]
         { []
         }
     {offset
       caTgl: // global
           if (R1 & 7 == 1) goto caTgw; else goto caTgU;
       caTgw: // global
           I64[Sp + 8] = block_caTgt_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       caTgU: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uaTha; else goto caTgK;
       uaTha: // global
           Sp = Sp + 8;
           call _caTh3() args: 0, res: 0, upd: 0;
       caTgK: // global
           I64[Sp + 8] = block_caTgI_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caTgl_info" {
     block_caTgl_info:
         const _caTgl;
         const 198;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTgt() //  []
         { []
         }
     {offset
       caTgt: // global
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _caTaC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTgt_info" {
     block_caTgt_info:
         const _caTgt;
         const 69;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTgI() //  []
         { []
         }
     {offset
       caTgI: // global
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _caTaC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTgI_info" {
     block_caTgI_info:
         const _caTgI;
         const 69;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTh3() //  []
         { []
         }
     {offset
       caTh3: // global
           P64[Sp + 40] = P64[Sp + 40];
           Sp = Sp + 8;
           call _caTaC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTh3_info" {
     block_caTh3_info:
         const _caTh3;
         const 69;
         const 12884901918;
         const SaRfY_srt+552;
 },
 _caTaC() //  []
         { []
         }
     {offset
       caTaC: // global
           Hp = Hp + 56;
           _saRc6::P64 = P64[Sp + 32];
           if (Hp > HpLim) (likely: False) goto caTfR; else goto caTfQ;
       caTfR: // global
           HpAlloc = 56;
           I64[Sp - 8] = block_caTaB_info;
           R1 = _saRc6::P64;
           Sp = Sp - 8;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caTfQ: // global
           I64[Hp - 48] = sat_saRdc_info;
           P64[Hp - 40] = P64[Sp + 16];
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = _saRc6::P64;
           I64[Hp - 16] = I64[Sp];
           I64[Hp - 8] = sat_saRc8_info;
           P64[Hp] = P64[Sp + 24];
           R2 = Hp - 46;
           R1 = Hp - 7;
           Sp = Sp + 40;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 _caTaB() //  [R1]
         { []
         }
     {offset
       caTaB: // global
           P64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _caTaC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caTaB_info" {
     block_caTaB_info:
         const _caTaB;
         const 1093;
         const 12884901918;
         const SaRfY_srt+552;
 },
 GHC.Event.Thread.$wthreadDelay_entry() //  [R2]
         { []
         }
     {offset
       caThv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caThw; else goto caThx;
       caThw: // global
           R2 = R2;
           R1 = GHC.Event.Thread.$wthreadDelay_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caThx: // global
           I64[Sp - 16] = block_caTa7_info;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.$wthreadDelay_info" {
     GHC.Event.Thread.$wthreadDelay_info:
         const GHC.Event.Thread.$wthreadDelay_entry;
         const 0;
         const 201863462926;
         const 8589934596;
         const SaRfY_srt+536;
 },
 _caTa7() //  [R1]
         { []
         }
     {offset
       caTa7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caThA; else goto caThz;
       caThA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caThz: // global
           I64[Hp - 8] = io_saRbD_info;
           I64[Hp] = I64[Sp + 8];
           _caTa9::P64 = Hp - 7;
           if (R1 == 0) goto caThu; else goto caTht;
       caThu: // global
           R1 = _caTa9::P64;
           Sp = Sp + 16;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       caTht: // global
           R1 = _caTa9::P64;
           Sp = Sp + 16;
           call io_saRbD_entry(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caTa7_info" {
     block_caTa7_info:
         const _caTa7;
         const 65;
         const 64424509470;
         const SaRfY_srt+536;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.724832669 UTC

[section ""data" . GHC.Event.Thread.threadDelay1_closure" {
     GHC.Event.Thread.threadDelay1_closure:
         const GHC.Event.Thread.threadDelay1_info;
         const 0;
 },
 GHC.Event.Thread.threadDelay1_entry() //  [R2]
         { []
         }
     {offset
       caTlX: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caTlY; else goto caTlZ;
       caTlY: // global
           R2 = R2;
           R1 = GHC.Event.Thread.threadDelay1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caTlZ: // global
           I64[Sp - 8] = block_caTlU_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaTm3; else goto caTlV;
       uaTm3: // global
           call _caTlU(R1) args: 0, res: 0, upd: 0;
       caTlV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadDelay1_info" {
     GHC.Event.Thread.threadDelay1_info:
         const GHC.Event.Thread.threadDelay1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaRfY_srt+576;
 },
 _caTlU() //  [R1]
         { []
         }
     {offset
       caTlU: // global
           R2 = I64[R1 + 7];
           Sp = Sp + 8;
           call GHC.Event.Thread.$wthreadDelay_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caTlU_info" {
     block_caTlU_info:
         const _caTlU;
         const 0;
         const 4294967326;
         const SaRfY_srt+576;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.729807545 UTC

[section ""data" . GHC.Event.Thread.threadDelay_closure" {
     GHC.Event.Thread.threadDelay_closure:
         const GHC.Event.Thread.threadDelay_info;
         const 0;
 },
 GHC.Event.Thread.threadDelay_entry() //  [R2]
         { []
         }
     {offset
       caTmi: // global
           R2 = R2;
           call GHC.Event.Thread.threadDelay1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Thread.threadDelay_info" {
     GHC.Event.Thread.threadDelay_info:
         const GHC.Event.Thread.threadDelay_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaRfY_srt+584;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:53.733660689 UTC

[section ""relreadonly" . SaRfY_srt" {
     SaRfY_srt:
         const Foreign.C.Error.$werrnoToIOError_closure;
         const GHC.Event.Thread.blockedOnBadFD2_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const GHC.Event.Thread.blockedOnBadFD1_closure;
         const GHC.Event.Manager.loop1_closure;
         const GHC.Conc.Sync.forkIO2_closure;
         const GHC.IO.Encoding.UTF8.utf8_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const restartPollLoop_raLJq_closure;
         const GHC.Arr.$windexError_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning8_closure;
         const lvl4_raLJs_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.Manager.new2_closure;
         const GHC.Event.Thread.$wstartIOManagerThread_closure;
         const GHC.IO.failIO1_closure;
         const GHC.Event.Thread.getSystemTimerManager2_closure;
         const GHC.Event.Thread.timerManager_closure;
         const GHC.Event.Thread.getSystemTimerManager1_closure;
         const GHC.Arr.negRange_closure;
         const lvl9_raLJx_closure;
         const GHC.Event.TimerManager.$wloop_closure;
         const GHC.Event.Poll.new1_closure;
         const GHC.Event.TimerManager.new2_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning3_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning4_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning2_closure;
         const GHC.Event.Thread.eventManager_closure;
         const GHC.Event.Thread.numEnabledEventManagers_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning6_closure;
         const GHC.Event.Thread.ioManagerLock_closure;
         const GHC.Event.Thread.timerManagerThreadVar_closure;
         const GHC.Event.Thread.ensureIOManagerIsRunning1_closure;
         const lvl11_raLJz_closure;
         const lvl13_raLJB_closure;
         const GHC.Event.Thread.$wioManagerCapabilitiesChanged_closure;
         const lvl14_raLJC_closure;
         const lvl15_raLJD_closure;
         const GHC.Event.Thread.ioManagerCapabilitiesChanged1_closure;
         const GHC.Event.Thread.ioManagerCapabilitiesChanged2_closure;
         const GHC.Event.Thread.getSystemEventManager2_closure;
         const GHC.Event.Thread.getSystemEventManager1_closure;
         const lvl17_raLJF_closure;
         const Foreign.C.Error.$werrnoToIOError_closure;
         const lvl18_raLJG_closure;
         const GHC.IO.Exception.$fExceptionIOException_$ctoException_closure;
         const lvl24_raLJM_closure;
         const GHC.Event.Manager.$weventsOf_closure;
         const GHC.Event.Manager.unregisterFd2_closure;
         const lvl19_raLJH_closure;
         const GHC.Event.Thread.threadWaitReadSTM1_closure;
         const GHC.Event.Internal.evtRead_closure;
         const threadWaitReadSTM2_raLJN_closure;
         const GHC.Event.Internal.evtWrite_closure;
         const threadWaitWriteSTM1_raLJO_closure;
         const lvl26_raLJQ_closure;
         const lvl27_raLJR_closure;
         const lvl28_raLJS_closure;
         const GHC.Event.Thread.threadWaitRead1_closure;
         const threadWaitWrite1_raLJT_closure;
         const threadWaitRead2_raLJU_closure;
         const lvl30_raLJW_closure;
         const GHC.IO.failIO1_closure;
         const GHC.Event.Manager.$wcloseFd__closure;
         const GHC.Event.Thread.closeFdWith1_closure;
         const GHC.Event.Thread.$wregisterDelay_closure;
         const GHC.Event.Thread.timerManager_closure;
         const GHC.Event.Thread.getSystemTimerManager2_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Thread.registerDelay1_closure;
         const GHC.Event.Thread.$wthreadDelay_closure;
         const GHC.Event.Thread.threadDelay1_closure;
 }]

