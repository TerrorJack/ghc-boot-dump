
==================== Raw Cmm ====================
2018-03-16 16:05:27.581093116 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:27.584538609 UTC

[section ""data" . GHC.Event.TimerManager.$WTimerManager_closure" {
     GHC.Event.TimerManager.$WTimerManager_closure:
         const GHC.Event.TimerManager.$WTimerManager_info;
 },
 GHC.Event.TimerManager.$WTimerManager_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cau6R: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cau7f; else goto cau7g;
       cau7f: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$WTimerManager_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cau7g: // global
           I64[Sp - 40] = block_cau6O_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uau7p; else goto cau6P;
       uau7p: // global
           call _cau6O(R1) args: 0, res: 0, upd: 0;
       cau6P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$WTimerManager_info" {
     GHC.Event.TimerManager.$WTimerManager_info:
         const GHC.Event.TimerManager.$WTimerManager_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cau6O() //  [R1]
         { []
         }
     {offset
       cau6O: // global
           I64[Sp] = block_cau6U_info;
           _sasE5::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sasE5::P64;
           if (R1 & 7 != 0) goto uau7o; else goto cau6V;
       uau7o: // global
           call _cau6U(R1) args: 0, res: 0, upd: 0;
       cau6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cau6O_info" {
     block_cau6O_info:
         const _cau6O;
         const 4;
         const 30;
 },
 _cau6U() //  [R1]
         { []
         }
     {offset
       cau6U: // global
           I64[Sp] = block_cau6Z_info;
           _sasE7::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sasE7::P64;
           if (R1 & 7 != 0) goto uau7q; else goto cau70;
       uau7q: // global
           call _cau6Z(R1) args: 0, res: 0, upd: 0;
       cau70: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cau6U_info" {
     block_cau6U_info:
         const _cau6U;
         const 4;
         const 30;
 },
 _cau6Z() //  [R1]
         { []
         }
     {offset
       cau6Z: // global
           I64[Sp] = block_cau74_info;
           _sasE9::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sasE9::P64;
           if (R1 & 7 != 0) goto uau7r; else goto cau75;
       uau7r: // global
           call _cau74(R1) args: 0, res: 0, upd: 0;
       cau75: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cau6Z_info" {
     block_cau6Z_info:
         const _cau6Z;
         const 4;
         const 30;
 },
 _cau74() //  [R1]
         { []
         }
     {offset
       cau74: // global
           I64[Sp] = block_cau79_info;
           _sasEb::P64 = P64[R1 + 7];
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sasEb::P64;
           if (R1 & 7 != 0) goto uau7s; else goto cau7a;
       uau7s: // global
           call _cau79(R1) args: 0, res: 0, upd: 0;
       cau7a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cau74_info" {
     block_cau74_info:
         const _cau74;
         const 4;
         const 30;
 },
 _cau79() //  [R1]
         { []
         }
     {offset
       cau79: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cau7n; else goto cau7m;
       cau7n: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cau7m: // global
           _sasEg::P64 = P64[R1 + 7];
           _sasEh::P64 = P64[R1 + 15];
           _sasEd::I64 = I64[R1 + 23];
           _sasEe::I64 = I64[R1 + 31];
           _sasEf::I64 = I64[R1 + 39];
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sasEg::P64;
           P64[Hp - 24] = _sasEh::P64;
           I64[Hp - 16] = _sasEd::I64;
           I64[Hp - 8] = _sasEe::I64;
           I64[Hp] = _sasEf::I64;
           R1 = Hp - 71;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cau79_info" {
     block_cau79_info:
         const _cau79;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.598867772 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState8_bytes" {
     GHC.Event.TimerManager.$fShowState8_bytes:
         I8[] [67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.601670208 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState7_closure" {
     GHC.Event.TimerManager.$fShowState7_closure:
         const GHC.Event.TimerManager.$fShowState7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState7_entry() //  [R1]
         { []
         }
     {offset
       cau84: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cau85; else goto cau86;
       cau85: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cau86: // global
           (_cau81::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cau81::I64 == 0) goto cau83; else goto cau82;
       cau83: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cau82: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cau81::I64;
           R2 = GHC.Event.TimerManager.$fShowState8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState7_info" {
     GHC.Event.TimerManager.$fShowState7_info:
         const GHC.Event.TimerManager.$fShowState7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.605285999 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState6_bytes" {
     GHC.Event.TimerManager.$fShowState6_bytes:
         I8[] [82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.607589488 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState5_closure" {
     GHC.Event.TimerManager.$fShowState5_closure:
         const GHC.Event.TimerManager.$fShowState5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState5_entry() //  [R1]
         { []
         }
     {offset
       cau8l: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cau8m; else goto cau8n;
       cau8m: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cau8n: // global
           (_cau8i::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cau8i::I64 == 0) goto cau8k; else goto cau8j;
       cau8k: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cau8j: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cau8i::I64;
           R2 = GHC.Event.TimerManager.$fShowState6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState5_info" {
     GHC.Event.TimerManager.$fShowState5_info:
         const GHC.Event.TimerManager.$fShowState5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.611678767 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState4_bytes" {
     GHC.Event.TimerManager.$fShowState4_bytes:
         I8[] [68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.614209481 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState3_closure" {
     GHC.Event.TimerManager.$fShowState3_closure:
         const GHC.Event.TimerManager.$fShowState3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState3_entry() //  [R1]
         { []
         }
     {offset
       cau8C: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cau8D; else goto cau8E;
       cau8D: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cau8E: // global
           (_cau8z::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cau8z::I64 == 0) goto cau8B; else goto cau8A;
       cau8B: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cau8A: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cau8z::I64;
           R2 = GHC.Event.TimerManager.$fShowState4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState3_info" {
     GHC.Event.TimerManager.$fShowState3_info:
         const GHC.Event.TimerManager.$fShowState3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.617737418 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState2_bytes" {
     GHC.Event.TimerManager.$fShowState2_bytes:
         I8[] [70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.620066992 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState1_closure" {
     GHC.Event.TimerManager.$fShowState1_closure:
         const GHC.Event.TimerManager.$fShowState1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState1_entry() //  [R1]
         { []
         }
     {offset
       cau8T: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cau8U; else goto cau8V;
       cau8U: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cau8V: // global
           (_cau8Q::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cau8Q::I64 == 0) goto cau8S; else goto cau8R;
       cau8S: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cau8R: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cau8Q::I64;
           R2 = GHC.Event.TimerManager.$fShowState2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState1_info" {
     GHC.Event.TimerManager.$fShowState1_info:
         const GHC.Event.TimerManager.$fShowState1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.624756596 UTC

[section ""data" . GHC.Event.TimerManager.$w$cshowsPrec_closure" {
     GHC.Event.TimerManager.$w$cshowsPrec_closure:
         const GHC.Event.TimerManager.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Event.TimerManager.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cau9g: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cau9h; else goto cau9i;
       cau9h: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cau9i: // global
           I64[Sp - 16] = block_cau97_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uau9x; else goto cau98;
       uau9x: // global
           call _cau97(R1) args: 0, res: 0, upd: 0;
       cau98: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$w$cshowsPrec_info" {
     GHC.Event.TimerManager.$w$cshowsPrec_info:
         const GHC.Event.TimerManager.$w$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const SasVk_srt;
 },
 _cau97() //  [R1]
         { []
         }
     {offset
       cau97: // global
           _sasEj::P64 = P64[Sp + 8];
           _cau9f::P64 = R1 & 7;
           if (_cau9f::P64 < 3) goto uau9v; else goto uau9w;
       uau9v: // global
           if (_cau9f::P64 < 2) goto cau9b; else goto cau9c;
       cau9b: // global
           R3 = _sasEj::P64;
           R2 = GHC.Event.TimerManager.$fShowState7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cau9c: // global
           R3 = _sasEj::P64;
           R2 = GHC.Event.TimerManager.$fShowState5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       uau9w: // global
           if (_cau9f::P64 < 4) goto cau9d; else goto cau9e;
       cau9d: // global
           R3 = _sasEj::P64;
           R2 = GHC.Event.TimerManager.$fShowState3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cau9e: // global
           R3 = _sasEj::P64;
           R2 = GHC.Event.TimerManager.$fShowState1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cau97_info" {
     block_cau97_info:
         const _cau97;
         const 1;
         const 64424509470;
         const SasVk_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.630467698 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_$cshowsPrec_closure" {
     GHC.Event.TimerManager.$fShowState_$cshowsPrec_closure:
         const GHC.Event.TimerManager.$fShowState_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cau9M: // global
           _sasEm::P64 = R3;
           R3 = R4;
           R2 = _sasEm::P64;
           call GHC.Event.TimerManager.$w$cshowsPrec_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState_$cshowsPrec_info" {
     GHC.Event.TimerManager.$fShowState_$cshowsPrec_info:
         const GHC.Event.TimerManager.$fShowState_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SasVk_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.637349602 UTC

[section ""data" . GHC.Event.TimerManager.$fEqState_$c==_closure" {
     GHC.Event.TimerManager.$fEqState_$c==_closure:
         const GHC.Event.TimerManager.$fEqState_$c==_info;
 },
 GHC.Event.TimerManager.$fEqState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       caua6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caua7; else goto caua8;
       caua7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$fEqState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caua8: // global
           I64[Sp - 16] = block_cau9X_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaubp; else goto cau9Y;
       uaubp: // global
           call _cau9X(R1) args: 0, res: 0, upd: 0;
       cau9Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fEqState_$c==_info" {
     GHC.Event.TimerManager.$fEqState_$c==_info:
         const GHC.Event.TimerManager.$fEqState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cau9X() //  [R1]
         { []
         }
     {offset
       cau9X: // global
           _sasEp::P64 = P64[Sp + 8];
           _caua5::P64 = R1 & 7;
           if (_caua5::P64 < 3) goto uaubb; else goto uaubc;
       uaubb: // global
           if (_caua5::P64 < 2) goto caua1; else goto caua2;
       caua1: // global
           I64[Sp + 8] = block_cauab_info;
           R1 = _sasEp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaubl; else goto cauad;
       uaubl: // global
           call _cauab(R1) args: 0, res: 0, upd: 0;
       cauad: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caua2: // global
           I64[Sp + 8] = block_cauaq_info;
           R1 = _sasEp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaubm; else goto cauas;
       uaubm: // global
           call _cauaq(R1) args: 0, res: 0, upd: 0;
       cauas: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uaubc: // global
           if (_caua5::P64 < 4) goto caua3; else goto caua4;
       caua3: // global
           I64[Sp + 8] = block_cauaF_info;
           R1 = _sasEp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaubn; else goto cauaH;
       uaubn: // global
           call _cauaF(R1) args: 0, res: 0, upd: 0;
       cauaH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caua4: // global
           I64[Sp + 8] = block_cauaU_info;
           R1 = _sasEp::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaubo; else goto cauaW;
       uaubo: // global
           call _cauaU(R1) args: 0, res: 0, upd: 0;
       cauaW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cau9X_info" {
     block_cau9X_info:
         const _cau9X;
         const 1;
         const 30;
 },
 _cauab() //  [R1]
         { []
         }
     {offset
       cauab: // global
           if (R1 & 7 == 1) goto uaubd; else goto uaube;
       uaubd: // global
           Sp = Sp + 8;
           call _caub6() args: 0, res: 0, upd: 0;
       uaube: // global
           Sp = Sp + 8;
           call _caub2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauab_info" {
     block_cauab_info:
         const _cauab;
         const 0;
         const 30;
 },
 _cauaq() //  [R1]
         { []
         }
     {offset
       cauaq: // global
           if (R1 & 7 == 2) goto uaubf; else goto uaubg;
       uaubf: // global
           Sp = Sp + 8;
           call _caub6() args: 0, res: 0, upd: 0;
       uaubg: // global
           Sp = Sp + 8;
           call _caub2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauaq_info" {
     block_cauaq_info:
         const _cauaq;
         const 0;
         const 30;
 },
 _cauaF() //  [R1]
         { []
         }
     {offset
       cauaF: // global
           if (R1 & 7 == 3) goto uaubh; else goto uaubi;
       uaubh: // global
           Sp = Sp + 8;
           call _caub6() args: 0, res: 0, upd: 0;
       uaubi: // global
           Sp = Sp + 8;
           call _caub2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauaF_info" {
     block_cauaF_info:
         const _cauaF;
         const 0;
         const 30;
 },
 _cauaU() //  [R1]
         { []
         }
     {offset
       cauaU: // global
           if (R1 & 7 == 4) goto uaubj; else goto uaubk;
       uaubj: // global
           Sp = Sp + 8;
           call _caub6() args: 0, res: 0, upd: 0;
       uaubk: // global
           Sp = Sp + 8;
           call _caub2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauaU_info" {
     block_cauaU_info:
         const _cauaU;
         const 0;
         const 30;
 },
 _caub6() //  []
         { []
         }
     {offset
       caub6: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caub2() //  []
         { []
         }
     {offset
       caub2: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.650478779 UTC

[section ""data" . GHC.Event.TimerManager.$fEqTimeoutKey_closure" {
     GHC.Event.TimerManager.$fEqTimeoutKey_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.653350221 UTC

[section ""data" . GHC.Event.TimerManager.emControl_closure" {
     GHC.Event.TimerManager.emControl_closure:
         const GHC.Event.TimerManager.emControl_info;
 },
 GHC.Event.TimerManager.emControl_entry() //  [R2]
         { []
         }
     {offset
       cauck: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cauco; else goto caucp;
       cauco: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caucp: // global
           I64[Sp - 8] = block_cauch_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauct; else goto cauci;
       uauct: // global
           call _cauch(R1) args: 0, res: 0, upd: 0;
       cauci: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emControl_info" {
     GHC.Event.TimerManager.emControl_info:
         const GHC.Event.TimerManager.emControl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cauch() //  [R1]
         { []
         }
     {offset
       cauch: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caucs; else goto caucr;
       caucs: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caucr: // global
           _sasEE::P64 = P64[R1 + 39];
           _sasEF::P64 = P64[R1 + 47];
           _sasEB::I64 = I64[R1 + 55];
           _sasEC::I64 = I64[R1 + 63];
           _sasED::I64 = I64[R1 + 71];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = _sasEE::P64;
           P64[Hp - 24] = _sasEF::P64;
           I64[Hp - 16] = _sasEB::I64;
           I64[Hp - 8] = _sasEC::I64;
           I64[Hp] = _sasED::I64;
           R1 = Hp - 39;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauch_info" {
     block_cauch_info:
         const _cauch;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.659649723 UTC

[section ""data" . GHC.Event.TimerManager.emUniqueSource_closure" {
     GHC.Event.TimerManager.emUniqueSource_closure:
         const GHC.Event.TimerManager.emUniqueSource_info;
 },
 GHC.Event.TimerManager.emUniqueSource_entry() //  [R2]
         { []
         }
     {offset
       caucL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caucP; else goto caucQ;
       caucP: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emUniqueSource_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caucQ: // global
           I64[Sp - 8] = block_caucI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaucU; else goto caucJ;
       uaucU: // global
           call _caucI(R1) args: 0, res: 0, upd: 0;
       caucJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emUniqueSource_info" {
     GHC.Event.TimerManager.emUniqueSource_info:
         const GHC.Event.TimerManager.emUniqueSource_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caucI() //  [R1]
         { []
         }
     {offset
       caucI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caucT; else goto caucS;
       caucT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caucS: // global
           _sasEL::P64 = P64[R1 + 31];
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = _sasEL::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caucI_info" {
     block_caucI_info:
         const _caucI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.665228611 UTC

[section ""data" . GHC.Event.TimerManager.emState_closure" {
     GHC.Event.TimerManager.emState_closure:
         const GHC.Event.TimerManager.emState_info;
 },
 GHC.Event.TimerManager.emState_entry() //  [R2]
         { []
         }
     {offset
       caudc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caudg; else goto caudh;
       caudg: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caudh: // global
           I64[Sp - 8] = block_caud9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaudl; else goto cauda;
       uaudl: // global
           call _caud9(R1) args: 0, res: 0, upd: 0;
       cauda: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emState_info" {
     GHC.Event.TimerManager.emState_info:
         const GHC.Event.TimerManager.emState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caud9() //  [R1]
         { []
         }
     {offset
       caud9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caudk; else goto caudj;
       caudk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caudj: // global
           _sasEV::P64 = P64[R1 + 23];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _sasEV::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caud9_info" {
     block_caud9_info:
         const _caud9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.671614602 UTC

[section ""data" . GHC.Event.TimerManager.emTimeouts_closure" {
     GHC.Event.TimerManager.emTimeouts_closure:
         const GHC.Event.TimerManager.emTimeouts_info;
 },
 GHC.Event.TimerManager.emTimeouts_entry() //  [R2]
         { []
         }
     {offset
       caudD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caudH; else goto caudI;
       caudH: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emTimeouts_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caudI: // global
           I64[Sp - 8] = block_caudA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaudM; else goto caudB;
       uaudM: // global
           call _caudA(R1) args: 0, res: 0, upd: 0;
       caudB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emTimeouts_info" {
     GHC.Event.TimerManager.emTimeouts_info:
         const GHC.Event.TimerManager.emTimeouts_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caudA() //  [R1]
         { []
         }
     {offset
       caudA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caudL; else goto caudK;
       caudL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caudK: // global
           _sasF5::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _sasF5::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caudA_info" {
     block_caudA_info:
         const _caudA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.677204399 UTC

[section ""data" . GHC.Event.TimerManager.emBackend_closure" {
     GHC.Event.TimerManager.emBackend_closure:
         const GHC.Event.TimerManager.emBackend_info;
 },
 GHC.Event.TimerManager.emBackend_entry() //  [R2]
         { []
         }
     {offset
       caue4: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caue5; else goto caue6;
       caue5: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emBackend_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caue6: // global
           I64[Sp - 8] = block_caue1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauea; else goto caue2;
       uauea: // global
           call _caue1(R1) args: 0, res: 0, upd: 0;
       caue2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emBackend_info" {
     GHC.Event.TimerManager.emBackend_info:
         const GHC.Event.TimerManager.emBackend_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caue1() //  [R1]
         { []
         }
     {offset
       caue1: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caue1_info" {
     block_caue1_info:
         const _caue1;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.682166294 UTC

[section ""data" . GHC.Event.TimerManager.newDefaultBackend_closure" {
     GHC.Event.TimerManager.newDefaultBackend_closure:
         const GHC.Event.TimerManager.newDefaultBackend_info;
         const 0;
 },
 GHC.Event.TimerManager.newDefaultBackend_entry() //  []
         { []
         }
     {offset
       caueq: // global
           call GHC.Event.Poll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.newDefaultBackend_info" {
     GHC.Event.TimerManager.newDefaultBackend_info:
         const GHC.Event.TimerManager.newDefaultBackend_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SasVk_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.686109606 UTC

[section ""data" . GHC.Event.TimerManager.wakeManager1_closure" {
     GHC.Event.TimerManager.wakeManager1_closure:
         const GHC.Event.TimerManager.wakeManager1_info;
         const 0;
 },
 GHC.Event.TimerManager.wakeManager1_entry() //  [R2]
         { []
         }
     {offset
       caueE: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caueF; else goto caueG;
       caueF: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.wakeManager1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caueG: // global
           I64[Sp - 8] = block_caueB_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaueK; else goto caueC;
       uaueK: // global
           call _caueB(R1) args: 0, res: 0, upd: 0;
       caueC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.wakeManager1_info" {
     GHC.Event.TimerManager.wakeManager1_info:
         const GHC.Event.TimerManager.wakeManager1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SasVk_srt+48;
 },
 _caueB() //  [R1]
         { []
         }
     {offset
       caueB: // global
           R3 = P64[R1 + 47];
           R2 = I64[R1 + 71];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caueB_info" {
     block_caueB_info:
         const _caueB;
         const 0;
         const 4294967326;
         const SasVk_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.691027611 UTC

[section ""data" . GHC.Event.TimerManager.wakeManager_closure" {
     GHC.Event.TimerManager.wakeManager_closure:
         const GHC.Event.TimerManager.wakeManager_info;
         const 0;
 },
 GHC.Event.TimerManager.wakeManager_entry() //  [R2]
         { []
         }
     {offset
       caueY: // global
           R2 = R2;
           call GHC.Event.TimerManager.wakeManager1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.wakeManager_info" {
     GHC.Event.TimerManager.wakeManager_info:
         const GHC.Event.TimerManager.wakeManager_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SasVk_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.693938593 UTC

[section ""cstring" . GHC.Event.TimerManager.$trModule4_bytes" {
     GHC.Event.TimerManager.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.695630623 UTC

[section ""data" . GHC.Event.TimerManager.$trModule3_closure" {
     GHC.Event.TimerManager.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.697223738 UTC

[section ""cstring" . GHC.Event.TimerManager.$trModule2_bytes" {
     GHC.Event.TimerManager.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.699244284 UTC

[section ""data" . GHC.Event.TimerManager.$trModule1_closure" {
     GHC.Event.TimerManager.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.701387133 UTC

[section ""data" . GHC.Event.TimerManager.$trModule_closure" {
     GHC.Event.TimerManager.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.TimerManager.$trModule3_closure+1;
         const GHC.Event.TimerManager.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.703170373 UTC

[section ""data" . $krep_rasDC_closure" {
     $krep_rasDC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.704888472 UTC

[section ""data" . $krep1_rasDD_closure" {
     $krep1_rasDD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.706635174 UTC

[section ""data" . $krep2_rasDE_closure" {
     $krep2_rasDE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.708273131 UTC

[section ""data" . $krep3_rasDF_closure" {
     $krep3_rasDF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.710415645 UTC

[section ""data" . $krep4_rasDG_closure" {
     $krep4_rasDG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcBackend_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.712156635 UTC

[section ""data" . $krep5_rasDH_closure" {
     $krep5_rasDH_closure:
         const :_con_info;
         const $krep3_rasDF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.713910131 UTC

[section ""data" . $krep6_rasDI_closure" {
     $krep6_rasDI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep5_rasDH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.71559865 UTC

[section ""data" . $krep7_rasDJ_closure" {
     $krep7_rasDJ_closure:
         const :_con_info;
         const $krep6_rasDI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.717283417 UTC

[section ""data" . $krep8_rasDK_closure" {
     $krep8_rasDK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure;
         const $krep7_rasDJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.719065684 UTC

[section ""data" . $krep9_rasDL_closure" {
     $krep9_rasDL_closure:
         const :_con_info;
         const $krep8_rasDK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.720795345 UTC

[section ""data" . $krep10_rasDM_closure" {
     $krep10_rasDM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep9_rasDL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.722508707 UTC

[section ""cstring" . GHC.Event.TimerManager.$tcTimeoutKey2_bytes" {
     GHC.Event.TimerManager.$tcTimeoutKey2_bytes:
         I8[] [84,105,109,101,111,117,116,75,101,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.724171884 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimeoutKey1_closure" {
     GHC.Event.TimerManager.$tcTimeoutKey1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tcTimeoutKey2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.726408683 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimeoutKey_closure" {
     GHC.Event.TimerManager.$tcTimeoutKey_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tcTimeoutKey1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11465769786694886755;
         const 8841886228133799087;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.728214128 UTC

[section ""data" . $krep11_rasDN_closure" {
     $krep11_rasDN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.TimerManager.$tcTimeoutKey_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.730390187 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TK1_closure" {
     GHC.Event.TimerManager.$tc'TK1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rasDC_closure+1;
         const $krep11_rasDN_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.732127859 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'TK3_bytes" {
     GHC.Event.TimerManager.$tc'TK3_bytes:
         I8[] [39,84,75]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.733833207 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TK2_closure" {
     GHC.Event.TimerManager.$tc'TK2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'TK3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.735531581 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TK_closure" {
     GHC.Event.TimerManager.$tc'TK_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'TK2_closure+1;
         const GHC.Event.TimerManager.$tc'TK1_closure+4;
         const 4362213157428095811;
         const 13641506162182658721;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.737263728 UTC

[section ""cstring" . GHC.Event.TimerManager.$tcState2_bytes" {
     GHC.Event.TimerManager.$tcState2_bytes:
         I8[] [83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.738980429 UTC

[section ""data" . GHC.Event.TimerManager.$tcState1_closure" {
     GHC.Event.TimerManager.$tcState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tcState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.740746002 UTC

[section ""data" . GHC.Event.TimerManager.$tcState_closure" {
     GHC.Event.TimerManager.$tcState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tcState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10067362680685980057;
         const 6560547589611231606;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.743150372 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Created1_closure" {
     GHC.Event.TimerManager.$tc'Created1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.TimerManager.$tcState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.744868007 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Created3_bytes" {
     GHC.Event.TimerManager.$tc'Created3_bytes:
         I8[] [39,67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.746546835 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Created2_closure" {
     GHC.Event.TimerManager.$tc'Created2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Created3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.748279862 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Created_closure" {
     GHC.Event.TimerManager.$tc'Created_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Created2_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 7473777249114724674;
         const 2904627795268885228;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.750060241 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Running2_bytes" {
     GHC.Event.TimerManager.$tc'Running2_bytes:
         I8[] [39,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.752183124 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Running1_closure" {
     GHC.Event.TimerManager.$tc'Running1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Running2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.754339341 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Running_closure" {
     GHC.Event.TimerManager.$tc'Running_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Running1_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 15425377252641674582;
         const 12404533232809671740;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.756040602 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Dying2_bytes" {
     GHC.Event.TimerManager.$tc'Dying2_bytes:
         I8[] [39,68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.757692709 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Dying1_closure" {
     GHC.Event.TimerManager.$tc'Dying1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Dying2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.759348049 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Dying_closure" {
     GHC.Event.TimerManager.$tc'Dying_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Dying1_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 13405772281963838681;
         const 437803396301020926;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.761052298 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Finished2_bytes" {
     GHC.Event.TimerManager.$tc'Finished2_bytes:
         I8[] [39,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.762644719 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Finished1_closure" {
     GHC.Event.TimerManager.$tc'Finished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Finished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.764428588 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Finished_closure" {
     GHC.Event.TimerManager.$tc'Finished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Finished1_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 1288208730452846229;
         const 15347214930365004647;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.766236114 UTC

[section ""data" . $krep12_rasDO_closure" {
     $krep12_rasDO_closure:
         const :_con_info;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.767962692 UTC

[section ""data" . $krep13_rasDP_closure" {
     $krep13_rasDP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep12_rasDO_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.770007671 UTC

[section ""cstring" . GHC.Event.TimerManager.$tcTimerManager2_bytes" {
     GHC.Event.TimerManager.$tcTimerManager2_bytes:
         I8[] [84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.771710661 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimerManager1_closure" {
     GHC.Event.TimerManager.$tcTimerManager1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tcTimerManager2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.773536979 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimerManager_closure" {
     GHC.Event.TimerManager.$tcTimerManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tcTimerManager1_closure+1;
         const GHC.Types.krep$*_closure;
         const 3987042711794726631;
         const 6993782799294290901;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.775412222 UTC

[section ""data" . $krep14_rasDQ_closure" {
     $krep14_rasDQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.TimerManager.$tcTimerManager_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.777651979 UTC

[section ""data" . $krep15_rasDR_closure" {
     $krep15_rasDR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rasDD_closure+1;
         const $krep14_rasDQ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.779338963 UTC

[section ""data" . $krep16_rasDS_closure" {
     $krep16_rasDS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rasDE_closure+1;
         const $krep15_rasDR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.781077389 UTC

[section ""data" . $krep17_rasDT_closure" {
     $krep17_rasDT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_rasDP_closure+1;
         const $krep16_rasDS_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.782756739 UTC

[section ""data" . $krep18_rasDU_closure" {
     $krep18_rasDU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rasDM_closure+1;
         const $krep17_rasDT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.784496716 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TimerManager1_closure" {
     GHC.Event.TimerManager.$tc'TimerManager1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rasDG_closure+1;
         const $krep18_rasDU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.786762714 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'TimerManager3_bytes" {
     GHC.Event.TimerManager.$tc'TimerManager3_bytes:
         I8[] [39,84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.788428175 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TimerManager2_closure" {
     GHC.Event.TimerManager.$tc'TimerManager2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'TimerManager3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.790160523 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TimerManager_closure" {
     GHC.Event.TimerManager.$tc'TimerManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'TimerManager2_closure+1;
         const GHC.Event.TimerManager.$tc'TimerManager1_closure+4;
         const 451007785877958328;
         const 8145550165147362681;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.793020937 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_$cshow_closure" {
     GHC.Event.TimerManager.$fShowState_$cshow_closure:
         const GHC.Event.TimerManager.$fShowState_$cshow_info;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cauga: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caugb; else goto caugc;
       caugb: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.$fShowState_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caugc: // global
           I64[Sp - 8] = block_caug1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaugr; else goto caug2;
       uaugr: // global
           call _caug1(R1) args: 0, res: 0, upd: 0;
       caug2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState_$cshow_info" {
     GHC.Event.TimerManager.$fShowState_$cshow_info:
         const GHC.Event.TimerManager.$fShowState_$cshow_entry;
         const 0;
         const 614180323342;
         const 4294967301;
         const SasVk_srt+8;
 },
 _caug1() //  [R1]
         { []
         }
     {offset
       caug1: // global
           _caug9::P64 = R1 & 7;
           if (_caug9::P64 < 3) goto uaugp; else goto uaugq;
       uaugp: // global
           if (_caug9::P64 < 2) goto caug5; else goto caug6;
       caug5: // global
           R1 = GHC.Event.TimerManager.$fShowState7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caug6: // global
           R1 = GHC.Event.TimerManager.$fShowState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       uaugq: // global
           if (_caug9::P64 < 4) goto caug7; else goto caug8;
       caug7: // global
           R1 = GHC.Event.TimerManager.$fShowState3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caug8: // global
           R1 = GHC.Event.TimerManager.$fShowState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caug1_info" {
     block_caug1_info:
         const _caug1;
         const 0;
         const 64424509470;
         const SasVk_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.799075742 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_$cshowList_closure" {
     GHC.Event.TimerManager.$fShowState_$cshowList_closure:
         const GHC.Event.TimerManager.$fShowState_$cshowList_info;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       caugK: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.TimerManager.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState_$cshowList_info" {
     GHC.Event.TimerManager.$fShowState_$cshowList_info:
         const GHC.Event.TimerManager.$fShowState_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SasVk_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.802139608 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_closure" {
     GHC.Event.TimerManager.$fShowState_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.TimerManager.$fShowState_$cshowsPrec_closure+3;
         const GHC.Event.TimerManager.$fShowState_$cshow_closure+1;
         const GHC.Event.TimerManager.$fShowState_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.806213438 UTC

[section ""data" . GHC.Event.TimerManager.$fEqState_$c/=_closure" {
     GHC.Event.TimerManager.$fEqState_$c/=_closure:
         const GHC.Event.TimerManager.$fEqState_$c/=_info;
 },
 GHC.Event.TimerManager.$fEqState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cauh5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cauh6; else goto cauh7;
       cauh6: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$fEqState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cauh7: // global
           I64[Sp - 16] = block_caugW_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uauio; else goto caugX;
       uauio: // global
           call _caugW(R1) args: 0, res: 0, upd: 0;
       caugX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fEqState_$c/=_info" {
     GHC.Event.TimerManager.$fEqState_$c/=_info:
         const GHC.Event.TimerManager.$fEqState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caugW() //  [R1]
         { []
         }
     {offset
       caugW: // global
           _sasFF::P64 = P64[Sp + 8];
           _cauh4::P64 = R1 & 7;
           if (_cauh4::P64 < 3) goto uauia; else goto uauib;
       uauia: // global
           if (_cauh4::P64 < 2) goto cauh0; else goto cauh1;
       cauh0: // global
           I64[Sp + 8] = block_cauha_info;
           R1 = _sasFF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uauik; else goto cauhc;
       uauik: // global
           call _cauha(R1) args: 0, res: 0, upd: 0;
       cauhc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cauh1: // global
           I64[Sp + 8] = block_cauhp_info;
           R1 = _sasFF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uauil; else goto cauhr;
       uauil: // global
           call _cauhp(R1) args: 0, res: 0, upd: 0;
       cauhr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uauib: // global
           if (_cauh4::P64 < 4) goto cauh2; else goto cauh3;
       cauh2: // global
           I64[Sp + 8] = block_cauhE_info;
           R1 = _sasFF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uauim; else goto cauhG;
       uauim: // global
           call _cauhE(R1) args: 0, res: 0, upd: 0;
       cauhG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cauh3: // global
           I64[Sp + 8] = block_cauhT_info;
           R1 = _sasFF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uauin; else goto cauhV;
       uauin: // global
           call _cauhT(R1) args: 0, res: 0, upd: 0;
       cauhV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caugW_info" {
     block_caugW_info:
         const _caugW;
         const 1;
         const 30;
 },
 _cauha() //  [R1]
         { []
         }
     {offset
       cauha: // global
           if (R1 & 7 == 1) goto uauic; else goto uauid;
       uauic: // global
           Sp = Sp + 8;
           call _caui5() args: 0, res: 0, upd: 0;
       uauid: // global
           Sp = Sp + 8;
           call _caui1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauha_info" {
     block_cauha_info:
         const _cauha;
         const 0;
         const 30;
 },
 _cauhp() //  [R1]
         { []
         }
     {offset
       cauhp: // global
           if (R1 & 7 == 2) goto uauie; else goto uauif;
       uauie: // global
           Sp = Sp + 8;
           call _caui5() args: 0, res: 0, upd: 0;
       uauif: // global
           Sp = Sp + 8;
           call _caui1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauhp_info" {
     block_cauhp_info:
         const _cauhp;
         const 0;
         const 30;
 },
 _cauhE() //  [R1]
         { []
         }
     {offset
       cauhE: // global
           if (R1 & 7 == 3) goto uauig; else goto uauih;
       uauig: // global
           Sp = Sp + 8;
           call _caui5() args: 0, res: 0, upd: 0;
       uauih: // global
           Sp = Sp + 8;
           call _caui1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauhE_info" {
     block_cauhE_info:
         const _cauhE;
         const 0;
         const 30;
 },
 _cauhT() //  [R1]
         { []
         }
     {offset
       cauhT: // global
           if (R1 & 7 == 4) goto uauii; else goto uauij;
       uauii: // global
           Sp = Sp + 8;
           call _caui5() args: 0, res: 0, upd: 0;
       uauij: // global
           Sp = Sp + 8;
           call _caui1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauhT_info" {
     block_cauhT_info:
         const _cauhT;
         const 0;
         const 30;
 },
 _caui5() //  []
         { []
         }
     {offset
       caui5: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caui1() //  []
         { []
         }
     {offset
       caui1: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.819625586 UTC

[section ""data" . GHC.Event.TimerManager.$fEqState_closure" {
     GHC.Event.TimerManager.$fEqState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.TimerManager.$fEqState_$c==_closure+2;
         const GHC.Event.TimerManager.$fEqState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.826325691 UTC

[section ""data" . GHC.Event.TimerManager.$weditTimeouts_closure" {
     GHC.Event.TimerManager.$weditTimeouts_closure:
         const GHC.Event.TimerManager.$weditTimeouts_info;
         const 0;
 },
 GHC.Event.TimerManager.$weditTimeouts_slow() //  [R1]
         { []
         }
     {offset
       caujd: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$weditTimeouts_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sasGs_entry() //  [R1]
         { []
         }
     {offset
       caujC: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caujD; else goto caujE;
       caujD: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caujE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cauju_info;
           _sasFT::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sasFT::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaukz; else goto caujv;
       uaukz: // global
           call _cauju(R1) args: 0, res: 0, upd: 0;
       caujv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasGs_info" {
     sat_sasGs_info:
         const sat_sasGs_entry;
         const 2;
         const 18;
 },
 _cauju() //  [R1]
         { []
         }
     {offset
       cauju: // global
           _caujB::P64 = R1 & 7;
           if (_caujB::P64 < 3) goto uaukq; else goto uaukt;
       uaukq: // global
           _sasFT::P64 = P64[Sp + 8];
           if (_caujB::P64 < 2) goto caujy; else goto caujz;
       caujy: // global
           I64[Sp] = block_caujH_info;
           _sasFW::I64 = I64[R1 + 39];
           R1 = _sasFT::P64;
           I64[Sp + 8] = _sasFW::I64;
           if (R1 & 7 != 0) goto uaukw; else goto caujJ;
       uaukw: // global
           call _caujH(R1) args: 0, res: 0, upd: 0;
       caujJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caujz: // global
           I64[Sp] = block_cauk0_info;
           _sasGe::I64 = I64[R1 + 22];
           R1 = _sasFT::P64;
           I64[Sp + 8] = _sasGe::I64;
           if (R1 & 7 != 0) goto uaukx; else goto cauk2;
       uaukx: // global
           call _cauk0(R1) args: 0, res: 0, upd: 0;
       cauk2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaukt: // global
           Sp = Sp + 16;
           call _caujA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauju_info" {
     block_cauju_info:
         const _cauju;
         const 1;
         const 30;
 },
 _caujH() //  [R1]
         { []
         }
     {offset
       caujH: // global
           _caukn::P64 = R1 & 7;
           if (_caukn::P64 < 3) goto uaukr; else goto uauku;
       uaukr: // global
           _sasFW::I64 = I64[Sp + 8];
           if (_caukn::P64 < 2) goto caujP; else goto caujT;
       caujP: // global
           R1 = I64[((_sasFW::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caujT: // global
           R1 = I64[((_sasFW::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uauku: // global
           Sp = Sp + 16;
           call _caujA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caujH_info" {
     block_caujH_info:
         const _caujH;
         const 65;
         const 30;
 },
 _cauk0() //  [R1]
         { []
         }
     {offset
       cauk0: // global
           _caukk::P64 = R1 & 7;
           if (_caukk::P64 < 3) goto uauks; else goto uaukv;
       uauks: // global
           _sasGe::I64 = I64[Sp + 8];
           if (_caukk::P64 < 2) goto cauk8; else goto caukc;
       cauk8: // global
           R1 = I64[((_sasGe::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caukc: // global
           R1 = I64[((_sasGe::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaukv: // global
           Sp = Sp + 16;
           call _caujA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauk0_info" {
     block_cauk0_info:
         const _cauk0;
         const 65;
         const 30;
 },
 _caujA() //  []
         { []
         }
     {offset
       caujA: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sasGt_entry() //  [R1, R2]
         { []
         }
     {offset
       caukC: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caukE; else goto caukF;
       caukE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caukF: // global
           I64[Sp - 16] = block_caujm_info;
           _sasFS::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sasFS::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasGt_info" {
     sat_sasGt_info:
         const sat_sasGt_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _caujm() //  [R1]
         { []
         }
     {offset
       caujm: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caukI; else goto caukH;
       caukI: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caukH: // global
           I64[Hp - 48] = sat_sasGs_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caujm_info" {
     block_caujm_info:
         const _caujm;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.$weditTimeouts_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       caukS: // global
           _sasFP::P64 = R6;
           _sasFO::I64 = R5;
           _sasFN::P64 = R4;
           _sasFM::P64 = R3;
           _sasFL::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto caukT; else goto caukU;
       caukU: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caukW; else goto caukV;
       caukW: // global
           HpAlloc = 16;
           goto caukT;
       caukT: // global
           R1 = GHC.Event.TimerManager.$weditTimeouts_closure;
           P64[Sp - 40] = _sasFL::P64;
           P64[Sp - 32] = _sasFM::P64;
           P64[Sp - 24] = _sasFN::P64;
           I64[Sp - 16] = _sasFO::I64;
           P64[Sp - 8] = _sasFP::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       caukV: // global
           I64[Hp - 8] = sat_sasGt_info;
           P64[Hp] = P64[Sp];
           I64[Sp - 16] = block_caukJ_info;
           R2 = Hp - 7;
           R1 = _sasFL::P64;
           P64[Sp - 8] = _sasFP::P64;
           I64[Sp] = _sasFO::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$weditTimeouts_info" {
     GHC.Event.TimerManager.$weditTimeouts_info:
         const GHC.Event.TimerManager.$weditTimeouts_entry;
         const 0;
         const 38654705678;
         const 30064771072;
         const SasVk_srt+48;
         const 518;
         const GHC.Event.TimerManager.$weditTimeouts_slow;
 },
 _caukJ() //  [R1]
         { []
         }
     {offset
       caukJ: // global
           I64[Sp] = block_caukL_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaul4; else goto caukM;
       uaul4: // global
           call _caukL(R1) args: 0, res: 0, upd: 0;
       caukM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caukJ_info" {
     block_caukJ_info:
         const _caukJ;
         const 130;
         const 4294967326;
         const SasVk_srt+48;
 },
 _caukL() //  [R1]
         { []
         }
     {offset
       caukL: // global
           if (R1 & 7 == 1) goto caukP; else goto caukQ;
       caukP: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caukQ: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caukL_info" {
     block_caukL_info:
         const _caukL;
         const 130;
         const 4294967326;
         const SasVk_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.846128505 UTC

[section ""data" . GHC.Event.TimerManager.unregisterTimeout2_closure" {
     GHC.Event.TimerManager.unregisterTimeout2_closure:
         const GHC.Event.TimerManager.unregisterTimeout2_info;
         const 0;
 },
 GHC.Event.TimerManager.unregisterTimeout2_entry() //  [R2, R3]
         { []
         }
     {offset
       caumc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caumd; else goto caume;
       caumd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.unregisterTimeout2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caume: // global
           I64[Sp - 16] = block_caum9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaumi; else goto cauma;
       uaumi: // global
           call _caum9(R1) args: 0, res: 0, upd: 0;
       cauma: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.unregisterTimeout2_info" {
     GHC.Event.TimerManager.unregisterTimeout2_info:
         const GHC.Event.TimerManager.unregisterTimeout2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const SasVk_srt+72;
 },
 _caum9() //  [R1]
         { []
         }
     {offset
       caum9: // global
           R6 = P64[R1 + 47];
           R5 = I64[R1 + 71];
           R4 = P64[R1 + 31];
           R3 = P64[R1 + 23];
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Event.TimerManager.$weditTimeouts_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caum9_info" {
     block_caum9_info:
         const _caum9;
         const 1;
         const 4294967326;
         const SasVk_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.856218661 UTC

[section ""data" . GHC.Event.TimerManager.unregisterTimeout1_closure" {
     GHC.Event.TimerManager.unregisterTimeout1_closure:
         const GHC.Event.TimerManager.unregisterTimeout1_info;
         const 0;
 },
 sat_sasHy_entry() //  [R1]
         { []
         }
     {offset
       caumW: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caumX; else goto caumY;
       caumX: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caumY: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caumO_info;
           _sasGZ::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sasGZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaunT; else goto caumP;
       uaunT: // global
           call _caumO(R1) args: 0, res: 0, upd: 0;
       caumP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasHy_info" {
     sat_sasHy_info:
         const sat_sasHy_entry;
         const 2;
         const 18;
 },
 _caumO() //  [R1]
         { []
         }
     {offset
       caumO: // global
           _caumV::P64 = R1 & 7;
           if (_caumV::P64 < 3) goto uaunK; else goto uaunN;
       uaunK: // global
           _sasGZ::P64 = P64[Sp + 8];
           if (_caumV::P64 < 2) goto caumS; else goto caumT;
       caumS: // global
           I64[Sp] = block_caun1_info;
           _sasH2::I64 = I64[R1 + 39];
           R1 = _sasGZ::P64;
           I64[Sp + 8] = _sasH2::I64;
           if (R1 & 7 != 0) goto uaunQ; else goto caun3;
       uaunQ: // global
           call _caun1(R1) args: 0, res: 0, upd: 0;
       caun3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       caumT: // global
           I64[Sp] = block_caunk_info;
           _sasHk::I64 = I64[R1 + 22];
           R1 = _sasGZ::P64;
           I64[Sp + 8] = _sasHk::I64;
           if (R1 & 7 != 0) goto uaunR; else goto caunm;
       uaunR: // global
           call _caunk(R1) args: 0, res: 0, upd: 0;
       caunm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaunN: // global
           Sp = Sp + 16;
           call _caumU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caumO_info" {
     block_caumO_info:
         const _caumO;
         const 1;
         const 30;
 },
 _caun1() //  [R1]
         { []
         }
     {offset
       caun1: // global
           _caunH::P64 = R1 & 7;
           if (_caunH::P64 < 3) goto uaunL; else goto uaunO;
       uaunL: // global
           _sasH2::I64 = I64[Sp + 8];
           if (_caunH::P64 < 2) goto caun9; else goto caund;
       caun9: // global
           R1 = I64[((_sasH2::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caund: // global
           R1 = I64[((_sasH2::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaunO: // global
           Sp = Sp + 16;
           call _caumU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caun1_info" {
     block_caun1_info:
         const _caun1;
         const 65;
         const 30;
 },
 _caunk() //  [R1]
         { []
         }
     {offset
       caunk: // global
           _caunE::P64 = R1 & 7;
           if (_caunE::P64 < 3) goto uaunM; else goto uaunP;
       uaunM: // global
           _sasHk::I64 = I64[Sp + 8];
           if (_caunE::P64 < 2) goto cauns; else goto caunw;
       cauns: // global
           R1 = I64[((_sasHk::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caunw: // global
           R1 = I64[((_sasHk::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaunP: // global
           Sp = Sp + 16;
           call _caumU() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caunk_info" {
     block_caunk_info:
         const _caunk;
         const 65;
         const 30;
 },
 _caumU() //  []
         { []
         }
     {offset
       caumU: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sasHz_entry() //  [R1, R2]
         { []
         }
     {offset
       caunW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caunY; else goto caunZ;
       caunY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caunZ: // global
           I64[Sp - 16] = block_caumG_info;
           R3 = R2;
           _sasGY::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sasGY::P64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasHz_info" {
     sat_sasHz_info:
         const sat_sasHz_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _caumG() //  [R1]
         { []
         }
     {offset
       caumG: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cauo2; else goto cauo1;
       cauo2: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauo1: // global
           I64[Hp - 48] = sat_sasHy_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caumG_info" {
     block_caumG_info:
         const _caumG;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.unregisterTimeout1_entry() //  [R2, R3]
         { []
         }
     {offset
       cauo3: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauo4; else goto cauo5;
       cauo4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.unregisterTimeout1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cauo5: // global
           I64[Sp - 16] = block_caumw_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uauop; else goto caumx;
       uauop: // global
           call _caumw(R1) args: 0, res: 0, upd: 0;
       caumx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.unregisterTimeout1_info" {
     GHC.Event.TimerManager.unregisterTimeout1_info:
         const GHC.Event.TimerManager.unregisterTimeout1_entry;
         const 0;
         const 141733920782;
         const 12884901903;
         const SasVk_srt+48;
 },
 _caumw() //  [R1]
         { []
         }
     {offset
       caumw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cauob; else goto cauoa;
       cauob: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauoa: // global
           _sasGQ::P64 = P64[R1 + 15];
           _sasGX::P64 = P64[R1 + 47];
           _sasGV::I64 = I64[R1 + 71];
           I64[Hp - 8] = sat_sasHz_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cauo6_info;
           R2 = Hp - 7;
           R1 = _sasGQ::P64;
           P64[Sp] = _sasGX::P64;
           I64[Sp + 8] = _sasGV::I64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caumw_info" {
     block_caumw_info:
         const _caumw;
         const 1;
         const 4294967326;
         const SasVk_srt+48;
 },
 _cauo6() //  [R1]
         { []
         }
     {offset
       cauo6: // global
           I64[Sp] = block_cauo8_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauoq; else goto cauod;
       uauoq: // global
           call _cauo8(R1) args: 0, res: 0, upd: 0;
       cauod: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauo6_info" {
     block_cauo6_info:
         const _cauo6;
         const 130;
         const 4294967326;
         const SasVk_srt+48;
 },
 _cauo8() //  [R1]
         { []
         }
     {offset
       cauo8: // global
           if (R1 & 7 == 1) goto cauoj; else goto cauon;
       cauoj: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauon: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauo8_info" {
     block_cauo8_info:
         const _cauo8;
         const 130;
         const 4294967326;
         const SasVk_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.876038661 UTC

[section ""data" . GHC.Event.TimerManager.unregisterTimeout_closure" {
     GHC.Event.TimerManager.unregisterTimeout_closure:
         const GHC.Event.TimerManager.unregisterTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.unregisterTimeout_entry() //  [R2, R3]
         { []
         }
     {offset
       caupx: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.TimerManager.unregisterTimeout1_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.unregisterTimeout_info" {
     GHC.Event.TimerManager.unregisterTimeout_info:
         const GHC.Event.TimerManager.unregisterTimeout_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SasVk_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.886021568 UTC

[section ""data" . GHC.Event.TimerManager.$wregisterTimeout_closure" {
     GHC.Event.TimerManager.$wregisterTimeout_closure:
         const GHC.Event.TimerManager.$wregisterTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.$wregisterTimeout_slow() //  [R1]
         { []
         }
     {offset
       caupF: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$wregisterTimeout_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sasIz_entry() //  [R1]
         { []
         }
     {offset
       cauqo: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cauqp; else goto cauqq;
       cauqp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauqq: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cauqg_info;
           _sasI0::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sasI0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaurl; else goto cauqh;
       uaurl: // global
           call _cauqg(R1) args: 0, res: 0, upd: 0;
       cauqh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasIz_info" {
     sat_sasIz_info:
         const sat_sasIz_entry;
         const 2;
         const 18;
 },
 _cauqg() //  [R1]
         { []
         }
     {offset
       cauqg: // global
           _cauqn::P64 = R1 & 7;
           if (_cauqn::P64 < 3) goto uaurc; else goto uaurf;
       uaurc: // global
           _sasI0::P64 = P64[Sp + 8];
           if (_cauqn::P64 < 2) goto cauqk; else goto cauql;
       cauqk: // global
           I64[Sp] = block_cauqt_info;
           _sasI3::I64 = I64[R1 + 39];
           R1 = _sasI0::P64;
           I64[Sp + 8] = _sasI3::I64;
           if (R1 & 7 != 0) goto uauri; else goto cauqv;
       uauri: // global
           call _cauqt(R1) args: 0, res: 0, upd: 0;
       cauqv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cauql: // global
           I64[Sp] = block_cauqM_info;
           _sasIl::I64 = I64[R1 + 22];
           R1 = _sasI0::P64;
           I64[Sp + 8] = _sasIl::I64;
           if (R1 & 7 != 0) goto uaurj; else goto cauqO;
       uaurj: // global
           call _cauqM(R1) args: 0, res: 0, upd: 0;
       cauqO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uaurf: // global
           Sp = Sp + 16;
           call _cauqm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauqg_info" {
     block_cauqg_info:
         const _cauqg;
         const 1;
         const 30;
 },
 _cauqt() //  [R1]
         { []
         }
     {offset
       cauqt: // global
           _caur9::P64 = R1 & 7;
           if (_caur9::P64 < 3) goto uaurd; else goto uaurg;
       uaurd: // global
           _sasI3::I64 = I64[Sp + 8];
           if (_caur9::P64 < 2) goto cauqB; else goto cauqF;
       cauqB: // global
           R1 = I64[((_sasI3::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauqF: // global
           R1 = I64[((_sasI3::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaurg: // global
           Sp = Sp + 16;
           call _cauqm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauqt_info" {
     block_cauqt_info:
         const _cauqt;
         const 65;
         const 30;
 },
 _cauqM() //  [R1]
         { []
         }
     {offset
       cauqM: // global
           _caur6::P64 = R1 & 7;
           if (_caur6::P64 < 3) goto uaure; else goto uaurh;
       uaure: // global
           _sasIl::I64 = I64[Sp + 8];
           if (_caur6::P64 < 2) goto cauqU; else goto cauqY;
       cauqU: // global
           R1 = I64[((_sasIl::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauqY: // global
           R1 = I64[((_sasIl::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uaurh: // global
           Sp = Sp + 16;
           call _cauqm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauqM_info" {
     block_cauqM_info:
         const _cauqM;
         const 65;
         const 30;
 },
 _cauqm() //  []
         { []
         }
     {offset
       cauqm: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sasIA_entry() //  [R1, R2]
         { []
         }
     {offset
       cauro: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caurq; else goto caurr;
       caurq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caurr: // global
           I64[Sp - 40] = block_cauq4_info;
           R3 = R2;
           _sasHY::P64 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 32] = P64[R1 + 7];
           I64[Sp - 24] = I64[R1 + 23];
           I64[Sp - 16] = I64[R1 + 31];
           P64[Sp - 8] = _sasHY::P64;
           Sp = Sp - 40;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasIA_info" {
     sat_sasIA_info:
         const sat_sasIA_entry;
         const 8589934594;
         const 8;
         const 4294967301;
 },
 _cauq4() //  [R1]
         { []
         }
     {offset
       cauq4: // global
           _sasHV::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_cauq8_info;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sasHV::I64;
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauq4_info" {
     block_cauq4_info:
         const _cauq4;
         const 388;
         const 30;
 },
 _cauq8() //  [R1]
         { []
         }
     {offset
       cauq8: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caurv; else goto cauru;
       caurv: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauru: // global
           I64[Hp - 48] = sat_sasIz_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauq8_info" {
     block_cauq8_info:
         const _cauq8;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.$wregisterTimeout_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       caurz: // global
           _sasHI::P64 = R6;
           _sasHH::I64 = R5;
           _sasHG::P64 = R4;
           _sasHF::P64 = R3;
           _sasHE::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto caurA; else goto caurB;
       caurB: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caurD; else goto caurC;
       caurD: // global
           HpAlloc = 56;
           goto caurA;
       caurA: // global
           R1 = GHC.Event.TimerManager.$wregisterTimeout_closure;
           P64[Sp - 40] = _sasHE::P64;
           P64[Sp - 32] = _sasHF::P64;
           P64[Sp - 24] = _sasHG::P64;
           I64[Sp - 16] = _sasHH::I64;
           P64[Sp - 8] = _sasHI::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       caurC: // global
           _sasHJ::I64 = I64[Sp];
           _sasHK::P64 = P64[Sp + 8];
           (_sasHO::I64) = call MO_AtomicRMW W64 AMO_Add(_sasHG::P64 + 16, 1);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _sasHO::I64;
           _caupL::P64 = Hp - 47;
           if (%MO_S_Gt_W64(_sasHJ::I64, 0)) goto caurx; else goto caury;
       caurx: // global
           (_sasHU::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 32] = sat_sasIA_info;
           P64[Hp - 24] = _sasHK::P64;
           P64[Hp - 16] = _caupL::P64;
           I64[Hp - 8] = _sasHO::I64;
           I64[Hp] = _sasHJ::I64 * 1000 + _sasHU::I64;
           I64[Sp - 16] = block_caurE_info;
           R2 = Hp - 31;
           R1 = _sasHE::P64;
           P64[Sp - 8] = _sasHI::P64;
           I64[Sp] = _sasHH::I64;
           P64[Sp + 8] = _caupL::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       caury: // global
           Hp = Hp - 40;
           I64[Sp] = block_causN_info;
           R1 = _sasHK::P64;
           P64[Sp + 8] = _caupL::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$wregisterTimeout_info" {
     GHC.Event.TimerManager.$wregisterTimeout_info:
         const GHC.Event.TimerManager.$wregisterTimeout_entry;
         const 0;
         const 30064771086;
         const 34359738368;
         const SasVk_srt+96;
         const 2567;
         const GHC.Event.TimerManager.$wregisterTimeout_slow;
 },
 _caurE() //  [R1]
         { []
         }
     {offset
       caurE: // global
           I64[Sp] = block_caurG_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uausV; else goto caurI;
       uausV: // global
           call _caurG(R1) args: 0, res: 0, upd: 0;
       caurI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caurE_info" {
     block_caurE_info:
         const _caurE;
         const 131;
         const 12884901918;
         const SasVk_srt+96;
 },
 _caurG() //  [R1]
         { []
         }
     {offset
       caurG: // global
           if (R1 & 7 == 1) goto uausS; else goto causL;
       uausS: // global
           Sp = Sp + 24;
           goto uausY;
       causL: // global
           _sasHI::P64 = P64[Sp + 8];
           (_sasIJ::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])), 1);
           if (%MO_SS_Conv_W64_W32(_sasIJ::I64) == 0 :: W32) goto uausT; else goto caus7;
       uausT: // global
           Sp = Sp + 24;
           goto uausY;
       uausY: // global
           call _causH() args: 0, res: 0, upd: 0;
       caus7: // global
           (_sasIO::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_caus5_info;
           R1 = P64[_sasHI::P64 + 8];
           I64[Sp + 16] = _sasIO::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uausW; else goto caus9;
       uausW: // global
           call _caus5(R1) args: 0, res: 0, upd: 0;
       caus9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caurG_info" {
     block_caurG_info:
         const _caurG;
         const 131;
         const 12884901918;
         const SasVk_srt+96;
 },
 _caus5() //  [R1]
         { []
         }
     {offset
       caus5: // global
           if (R1 & 7 == 1) goto causg; else goto causE;
       causg: // global
           I64[Sp + 8] = block_causd_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       causE: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uausU; else goto causu;
       uausU: // global
           Sp = Sp + 16;
           call _causH() args: 0, res: 0, upd: 0;
       causu: // global
           I64[Sp + 8] = block_causs_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caus5_info" {
     block_caus5_info:
         const _caus5;
         const 66;
         const 12884901918;
         const SasVk_srt+96;
 },
 _causd() //  []
         { []
         }
     {offset
       causd: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_causd_info" {
     block_causd_info:
         const _causd;
         const 1;
         const 30;
 },
 _causH() //  []
         { []
         }
     {offset
       causH: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _causs() //  []
         { []
         }
     {offset
       causs: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_causs_info" {
     block_causs_info:
         const _causs;
         const 1;
         const 30;
 },
 _causN() //  []
         { []
         }
     {offset
       causN: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_causN_info" {
     block_causN_info:
         const _causN;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.916107865 UTC

[section ""data" . GHC.Event.TimerManager.registerTimeout1_closure" {
     GHC.Event.TimerManager.registerTimeout1_closure:
         const GHC.Event.TimerManager.registerTimeout1_info;
         const 0;
 },
 GHC.Event.TimerManager.registerTimeout1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cauuC: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cauuG; else goto cauuH;
       cauuG: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.registerTimeout1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cauuH: // global
           I64[Sp - 24] = block_cauuz_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uauuP; else goto cauuA;
       uauuP: // global
           call _cauuz(R1) args: 0, res: 0, upd: 0;
       cauuA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.registerTimeout1_info" {
     GHC.Event.TimerManager.registerTimeout1_info:
         const GHC.Event.TimerManager.registerTimeout1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SasVk_srt+112;
 },
 _cauuz() //  [R1]
         { []
         }
     {offset
       cauuz: // global
           I64[Sp - 32] = block_cauuF_info;
           _sasJ9::P64 = P64[R1 + 15];
           _sasJa::P64 = P64[R1 + 23];
           _sasJb::P64 = P64[R1 + 31];
           _sasJg::P64 = P64[R1 + 47];
           _sasJe::I64 = I64[R1 + 71];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sasJb::P64;
           I64[Sp - 16] = _sasJe::I64;
           P64[Sp - 8] = _sasJg::P64;
           P64[Sp] = _sasJa::P64;
           P64[Sp + 8] = _sasJ9::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uauuO; else goto cauuJ;
       uauuO: // global
           call _cauuF(R1) args: 0, res: 0, upd: 0;
       cauuJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauuz_info" {
     block_cauuz_info:
         const _cauuz;
         const 2;
         const 4294967326;
         const SasVk_srt+112;
 },
 _cauuF() //  [R1]
         { []
         }
     {offset
       cauuF: // global
           R6 = P64[Sp + 24];
           R5 = I64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 40];
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$wregisterTimeout_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauuF_info" {
     block_cauuF_info:
         const _cauuF;
         const 134;
         const 4294967326;
         const SasVk_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.923129753 UTC

[section ""data" . GHC.Event.TimerManager.registerTimeout_closure" {
     GHC.Event.TimerManager.registerTimeout_closure:
         const GHC.Event.TimerManager.registerTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.registerTimeout_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cauv8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.TimerManager.registerTimeout1_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.registerTimeout_info" {
     GHC.Event.TimerManager.registerTimeout_info:
         const GHC.Event.TimerManager.registerTimeout_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SasVk_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.934254784 UTC

[section ""data" . GHC.Event.TimerManager.updateTimeout1_closure" {
     GHC.Event.TimerManager.updateTimeout1_closure:
         const GHC.Event.TimerManager.updateTimeout1_info;
         const 0;
 },
 x_sasJB_entry() //  [R1]
         { []
         }
     {offset
       cauvw: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cauvJ; else goto cauvK;
       cauvJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauvK: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cauvt_info;
           _sasJq::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sasJq::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uauvO; else goto cauvu;
       uauvO: // global
           call _cauvt(R1) args: 0, res: 0, upd: 0;
       cauvu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_sasJB_info" {
     x_sasJB_info:
         const x_sasJB_entry;
         const 4294967297;
         const 19;
 },
 _cauvt() //  [R1]
         { []
         }
     {offset
       cauvt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cauvN; else goto cauvM;
       cauvN: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cauvM: // global
           _sasJG::I64 = I64[R1 + 7] * 1000 + I64[Sp + 8];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _sasJG::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cauvt_info" {
     block_cauvt_info:
         const _cauvt;
         const 65;
         const 30;
 },
 sat_sasJL_entry() //  [R1]
         { []
         }
     {offset
       cauwe: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauwf; else goto cauwg;
       cauwf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauwg: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cauw7_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uauwn; else goto cauw8;
       uauwn: // global
           call _cauw7(R1) args: 0, res: 0, upd: 0;
       cauw8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasJL_info" {
     sat_sasJL_info:
         const sat_sasJL_entry;
         const 1;
         const 16;
 },
 _cauw7() //  [R1]
         { []
         }
     {offset
       cauw7: // global
           if (R1 & 7 == 3) goto cauwc; else goto cauwb;
       cauwc: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauwb: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cauw7_info" {
     block_cauw7_info:
         const _cauw7;
         const 0;
         const 30;
 },
 sat_sasKu_entry() //  [R1]
         { []
         }
     {offset
       cauwV: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cauwW; else goto cauwX;
       cauwW: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauwX: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cauwN_info;
           _sasJV::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sasJV::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uauxS; else goto cauwO;
       uauxS: // global
           call _cauwN(R1) args: 0, res: 0, upd: 0;
       cauwO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasKu_info" {
     sat_sasKu_info:
         const sat_sasKu_entry;
         const 2;
         const 18;
 },
 _cauwN() //  [R1]
         { []
         }
     {offset
       cauwN: // global
           _cauwU::P64 = R1 & 7;
           if (_cauwU::P64 < 3) goto uauxJ; else goto uauxM;
       uauxJ: // global
           _sasJV::P64 = P64[Sp + 8];
           if (_cauwU::P64 < 2) goto cauwR; else goto cauwS;
       cauwR: // global
           I64[Sp] = block_caux0_info;
           _sasJY::I64 = I64[R1 + 39];
           R1 = _sasJV::P64;
           I64[Sp + 8] = _sasJY::I64;
           if (R1 & 7 != 0) goto uauxP; else goto caux2;
       uauxP: // global
           call _caux0(R1) args: 0, res: 0, upd: 0;
       caux2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cauwS: // global
           I64[Sp] = block_cauxj_info;
           _sasKg::I64 = I64[R1 + 22];
           R1 = _sasJV::P64;
           I64[Sp + 8] = _sasKg::I64;
           if (R1 & 7 != 0) goto uauxQ; else goto cauxl;
       uauxQ: // global
           call _cauxj(R1) args: 0, res: 0, upd: 0;
       cauxl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uauxM: // global
           Sp = Sp + 16;
           call _cauwT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauwN_info" {
     block_cauwN_info:
         const _cauwN;
         const 1;
         const 30;
 },
 _caux0() //  [R1]
         { []
         }
     {offset
       caux0: // global
           _cauxG::P64 = R1 & 7;
           if (_cauxG::P64 < 3) goto uauxK; else goto uauxN;
       uauxK: // global
           _sasJY::I64 = I64[Sp + 8];
           if (_cauxG::P64 < 2) goto caux8; else goto cauxc;
       caux8: // global
           R1 = I64[((_sasJY::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauxc: // global
           R1 = I64[((_sasJY::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uauxN: // global
           Sp = Sp + 16;
           call _cauwT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caux0_info" {
     block_caux0_info:
         const _caux0;
         const 65;
         const 30;
 },
 _cauxj() //  [R1]
         { []
         }
     {offset
       cauxj: // global
           _cauxD::P64 = R1 & 7;
           if (_cauxD::P64 < 3) goto uauxL; else goto uauxO;
       uauxL: // global
           _sasKg::I64 = I64[Sp + 8];
           if (_cauxD::P64 < 2) goto cauxr; else goto cauxv;
       cauxr: // global
           R1 = I64[((_sasKg::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauxv: // global
           R1 = I64[((_sasKg::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uauxO: // global
           Sp = Sp + 16;
           call _cauwT() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauxj_info" {
     block_cauxj_info:
         const _cauxj;
         const 65;
         const 30;
 },
 _cauwT() //  []
         { []
         }
     {offset
       cauwT: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sasKv_entry() //  [R1, R2]
         { []
         }
     {offset
       cauxZ: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cauy0; else goto cauy1;
       cauy0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauy1: // global
           I64[Sp - 32] = block_cauvU_info;
           R3 = R2;
           _sasJH::P64 = R2;
           _sasJk::P64 = P64[R1 + 7];
           R2 = _sasJk::P64;
           P64[Sp - 24] = _sasJk::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _sasJH::P64;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasKv_info" {
     sat_sasKv_info:
         const sat_sasKv_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cauvU() //  [R1]
         { []
         }
     {offset
       cauvU: // global
           if (R1 & 7 == 1) goto cauxW; else goto cauxX;
       cauxW: // global
           _sasJH::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cauvY_info;
           R1 = _sasJH::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uauyf; else goto cauvZ;
       uauyf: // global
           call _cauvY(R1) args: 0, res: 0, upd: 0;
       cauvZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cauxX: // global
           I64[Sp] = block_cauwq_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uauyg; else goto cauwr;
       uauyg: // global
           call _cauwq(R1) args: 0, res: 0, upd: 0;
       cauwr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauvU_info" {
     block_cauvU_info:
         const _cauvU;
         const 3;
         const 30;
 },
 _cauvY() //  [R1]
         { []
         }
     {offset
       cauvY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cauy6; else goto cauy5;
       cauy6: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauy5: // global
           I64[Hp - 40] = sat_sasJL_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauvY_info" {
     block_cauvY_info:
         const _cauvY;
         const 0;
         const 30;
 },
 _cauwq() //  [R1]
         { []
         }
     {offset
       cauwq: // global
           I64[Sp - 8] = block_cauwv_info;
           _sasJP::P64 = P64[R1 + 15];
           _sasJQ::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp] = _sasJQ::P64;
           P64[Sp + 8] = _sasJP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauyh; else goto cauww;
       uauyh: // global
           call _cauwv(R1) args: 0, res: 0, upd: 0;
       cauww: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauwq_info" {
     block_cauwq_info:
         const _cauwq;
         const 3;
         const 30;
 },
 _cauwv() //  [R1]
         { []
         }
     {offset
       cauwv: // global
           I64[Sp] = block_cauwA_info;
           _sasJS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sasJS::I64;
           if (R1 & 7 != 0) goto uauyi; else goto cauwB;
       uauyi: // global
           call _cauwA(R1) args: 0, res: 0, upd: 0;
       cauwB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauwv_info" {
     block_cauwv_info:
         const _cauwv;
         const 4;
         const 30;
 },
 _cauwA() //  [R1]
         { []
         }
     {offset
       cauwA: // global
           _sasJS::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_cauwF_info;
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = _sasJS::I64;
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauwA_info" {
     block_cauwA_info:
         const _cauwA;
         const 260;
         const 30;
 },
 _cauwF() //  [R1]
         { []
         }
     {offset
       cauwF: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cauye; else goto cauyd;
       cauye: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauyd: // global
           I64[Hp - 48] = sat_sasKu_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauwF_info" {
     block_cauwF_info:
         const _cauwF;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.updateTimeout1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cauyj: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cauyk; else goto cauyl;
       cauyk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.updateTimeout1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cauyl: // global
           _sasJl::P64 = R4;
           _sasJk::P64 = R3;
           (_sasJq::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Sp - 32] = block_cauvk_info;
           R1 = R2;
           P64[Sp - 24] = _sasJk::P64;
           P64[Sp - 16] = _sasJl::P64;
           I64[Sp - 8] = _sasJq::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uauyF; else goto cauvl;
       uauyF: // global
           call _cauvk(R1) args: 0, res: 0, upd: 0;
       cauvl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.updateTimeout1_info" {
     GHC.Event.TimerManager.updateTimeout1_info:
         const GHC.Event.TimerManager.updateTimeout1_entry;
         const 0;
         const 4402341478414;
         const 17179869207;
         const SasVk_srt+48;
 },
 _cauvk() //  [R1]
         { []
         }
     {offset
       cauvk: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cauyr; else goto cauyq;
       cauyr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauyq: // global
           _sasJt::P64 = P64[R1 + 15];
           _sasJA::P64 = P64[R1 + 47];
           _sasJy::I64 = I64[R1 + 71];
           I64[Hp - 48] = x_sasJB_info;
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 24];
           I64[Hp - 16] = sat_sasKv_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           I64[Sp + 8] = block_cauym_info;
           R2 = Hp - 15;
           R1 = _sasJt::P64;
           P64[Sp + 16] = _sasJA::P64;
           I64[Sp + 24] = _sasJy::I64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauvk_info" {
     block_cauvk_info:
         const _cauvk;
         const 259;
         const 4294967326;
         const SasVk_srt+48;
 },
 _cauym() //  [R1]
         { []
         }
     {offset
       cauym: // global
           I64[Sp] = block_cauyo_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauyG; else goto cauyt;
       uauyG: // global
           call _cauyo(R1) args: 0, res: 0, upd: 0;
       cauyt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauym_info" {
     block_cauym_info:
         const _cauym;
         const 130;
         const 4294967326;
         const SasVk_srt+48;
 },
 _cauyo() //  [R1]
         { []
         }
     {offset
       cauyo: // global
           if (R1 & 7 == 1) goto cauyz; else goto cauyD;
       cauyz: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauyD: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauyo_info" {
     block_cauyo_info:
         const _cauyo;
         const 130;
         const 4294967326;
         const SasVk_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.96935967 UTC

[section ""data" . GHC.Event.TimerManager.updateTimeout_closure" {
     GHC.Event.TimerManager.updateTimeout_closure:
         const GHC.Event.TimerManager.updateTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.updateTimeout_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cauAB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.TimerManager.updateTimeout1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.updateTimeout_info" {
     GHC.Event.TimerManager.updateTimeout_info:
         const GHC.Event.TimerManager.updateTimeout_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SasVk_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.975716069 UTC

[section ""data" . GHC.Event.TimerManager.cleanup1_closure" {
     GHC.Event.TimerManager.cleanup1_closure:
         const GHC.Event.TimerManager.cleanup1_info;
 },
 GHC.Event.TimerManager.cleanup1_entry() //  [R2]
         { []
         }
     {offset
       cauAP: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cauAT; else goto cauAU;
       cauAT: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.cleanup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauAU: // global
           I64[Sp - 8] = block_cauAM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauBK; else goto cauAN;
       uauBK: // global
           call _cauAM(R1) args: 0, res: 0, upd: 0;
       cauAN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.cleanup1_info" {
     GHC.Event.TimerManager.cleanup1_info:
         const GHC.Event.TimerManager.cleanup1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cauAM() //  [R1]
         { []
         }
     {offset
       cauAM: // global
           I64[Sp - 48] = block_cauAS_info;
           _sasKF::P64 = P64[R1 + 23];
           _sasKK::P64 = P64[R1 + 39];
           _sasKL::P64 = P64[R1 + 47];
           _sasKH::I64 = I64[R1 + 55];
           _sasKI::I64 = I64[R1 + 63];
           _sasKJ::I64 = I64[R1 + 71];
           R1 = P64[R1 + 7];
           I64[Sp - 40] = _sasKH::I64;
           I64[Sp - 32] = _sasKI::I64;
           I64[Sp - 24] = _sasKJ::I64;
           P64[Sp - 16] = _sasKK::P64;
           P64[Sp - 8] = _sasKL::P64;
           P64[Sp] = _sasKF::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uauBJ; else goto cauAW;
       uauBJ: // global
           call _cauAS(R1) args: 0, res: 0, upd: 0;
       cauAW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauAM_info" {
     block_cauAM_info:
         const _cauAM;
         const 0;
         const 30;
 },
 _cauAS() //  [R1]
         { []
         }
     {offset
       cauAS: // global
           _sasKF::P64 = P64[Sp + 48];
           _sasKN::P64 = P64[R1 + 7];
           _sasKR::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_sasKF::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasKF::P64);
           I64[Sp] = block_cauB3_info;
           R2 = _sasKN::P64;
           R1 = _sasKR::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauAS_info" {
     block_cauAS_info:
         const _cauAS;
         const 454;
         const 30;
 },
 _cauB3() //  []
         { []
         }
     {offset
       cauB3: // global
           I64[Sp] = block_cauB5_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauB3_info" {
     block_cauB3_info:
         const _cauB3;
         const 2502;
         const 30;
 },
 _cauB5() //  []
         { []
         }
     {offset
       cauB5: // global
           _sasKI::I64 = I64[Sp + 16];
           _sasKK::P64 = P64[Sp + 32];
           (_sasL3::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_sasL8::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasKI::I64)));
           I64[Sp + 16] = block_cauBk_info;
           R1 = _sasKK::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uauBL; else goto cauBl;
       uauBL: // global
           call _cauBk(R1) args: 0, res: 0, upd: 0;
       cauBl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauB5_info" {
     block_cauB5_info:
         const _cauB5;
         const 3526;
         const 30;
 },
 _cauBk() //  [R1]
         { []
         }
     {offset
       cauBk: // global
           _sasKJ::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cauBr; else goto cauBv;
       cauBr: // global
           (_sasLe::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasKJ::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauBv: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasLm::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasKJ::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauBk_info" {
     block_cauBk_info:
         const _cauBk;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.987763718 UTC

[section ""data" . GHC.Event.TimerManager.cleanup_closure" {
     GHC.Event.TimerManager.cleanup_closure:
         const GHC.Event.TimerManager.cleanup_info;
 },
 GHC.Event.TimerManager.cleanup_entry() //  [R2]
         { []
         }
     {offset
       cauCj: // global
           R2 = R2;
           call GHC.Event.TimerManager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.cleanup_info" {
     GHC.Event.TimerManager.cleanup_info:
         const GHC.Event.TimerManager.cleanup_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:27.992178573 UTC

[section ""data" . GHC.Event.TimerManager.finished1_closure" {
     GHC.Event.TimerManager.finished1_closure:
         const GHC.Event.TimerManager.finished1_info;
 },
 sat_sasLD_entry() //  [R1]
         { []
         }
     {offset
       cauCK: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauCL; else goto cauCM;
       cauCL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauCM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cauCD_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uauCT; else goto cauCE;
       uauCT: // global
           call _cauCD(R1) args: 0, res: 0, upd: 0;
       cauCE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasLD_info" {
     sat_sasLD_info:
         const sat_sasLD_entry;
         const 1;
         const 16;
 },
 _cauCD() //  [R1]
         { []
         }
     {offset
       cauCD: // global
           if (R1 & 7 == 4) goto cauCI; else goto cauCH;
       cauCI: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauCH: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cauCD_info" {
     block_cauCD_info:
         const _cauCD;
         const 0;
         const 30;
 },
 GHC.Event.TimerManager.finished1_entry() //  [R2]
         { []
         }
     {offset
       cauCU: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cauCV; else goto cauCW;
       cauCV: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.finished1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauCW: // global
           I64[Sp - 8] = block_cauCu_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauD0; else goto cauCv;
       uauD0: // global
           call _cauCu(R1) args: 0, res: 0, upd: 0;
       cauCv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.finished1_info" {
     GHC.Event.TimerManager.finished1_info:
         const GHC.Event.TimerManager.finished1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cauCu() //  [R1]
         { []
         }
     {offset
       cauCu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauCZ; else goto cauCY;
       cauCZ: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauCY: // global
           _sasLB::P64 = P64[P64[R1 + 23] + 8];
           I64[Hp - 16] = sat_sasLD_info;
           P64[Hp] = _sasLB::P64;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauCu_info" {
     block_cauCu_info:
         const _cauCu;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.000522671 UTC

[section ""data" . GHC.Event.TimerManager.finished_closure" {
     GHC.Event.TimerManager.finished_closure:
         const GHC.Event.TimerManager.finished_info;
 },
 GHC.Event.TimerManager.finished_entry() //  [R2]
         { []
         }
     {offset
       cauDs: // global
           R2 = R2;
           call GHC.Event.TimerManager.finished1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.finished_info" {
     GHC.Event.TimerManager.finished_info:
         const GHC.Event.TimerManager.finished_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.003722901 UTC

[section ""data" . GHC.Event.TimerManager.shutdown2_closure" {
     GHC.Event.TimerManager.shutdown2_closure:
         const GHC.Event.TimerManager.shutdown2_info;
 },
 GHC.Event.TimerManager.shutdown2_entry() //  [R2]
         { []
         }
     {offset
       cauDE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauDI; else goto cauDH;
       cauDI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.TimerManager.shutdown2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauDH: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.TimerManager.Dying_closure+3;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.shutdown2_info" {
     GHC.Event.TimerManager.shutdown2_info:
         const GHC.Event.TimerManager.shutdown2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.008267202 UTC

[section ""data" . GHC.Event.TimerManager.shutdown1_closure" {
     GHC.Event.TimerManager.shutdown1_closure:
         const GHC.Event.TimerManager.shutdown1_info;
         const 0;
 },
 GHC.Event.TimerManager.shutdown1_entry() //  [R2]
         { []
         }
     {offset
       cauDV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauDW; else goto cauDX;
       cauDW: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.shutdown1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauDX: // global
           I64[Sp - 8] = block_cauDS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauEh; else goto cauDT;
       uauEh: // global
           call _cauDS(R1) args: 0, res: 0, upd: 0;
       cauDT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.shutdown1_info" {
     GHC.Event.TimerManager.shutdown1_info:
         const GHC.Event.TimerManager.shutdown1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SasVk_srt+136;
 },
 _cauDS() //  [R1]
         { []
         }
     {offset
       cauDS: // global
           I64[Sp - 16] = block_cauE0_info;
           R2 = GHC.Event.TimerManager.shutdown2_closure+1;
           _sasLQ::P64 = P64[R1 + 47];
           _sasLN::I64 = I64[R1 + 63];
           R1 = P64[R1 + 23];
           P64[Sp - 8] = _sasLQ::P64;
           I64[Sp] = _sasLN::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauDS_info" {
     block_cauDS_info:
         const _cauDS;
         const 0;
         const 4294967326;
         const SasVk_srt+136;
 },
 _cauE0() //  [R1]
         { []
         }
     {offset
       cauE0: // global
           I64[Sp] = block_cauE2_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauEi; else goto cauE5;
       uauEi: // global
           call _cauE2(R1) args: 0, res: 0, upd: 0;
       cauE5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauE0_info" {
     block_cauE0_info:
         const _cauE0;
         const 130;
         const 4294967326;
         const SasVk_srt+136;
 },
 _cauE2() //  [R1]
         { []
         }
     {offset
       cauE2: // global
           if (R1 & 7 == 2) goto cauEf; else goto cauEb;
       cauEf: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
       cauEb: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauE2_info" {
     block_cauE2_info:
         const _cauE2;
         const 130;
         const 4294967326;
         const SasVk_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.017006043 UTC

[section ""data" . GHC.Event.TimerManager.shutdown_closure" {
     GHC.Event.TimerManager.shutdown_closure:
         const GHC.Event.TimerManager.shutdown_info;
         const 0;
 },
 GHC.Event.TimerManager.shutdown_entry() //  [R2]
         { []
         }
     {offset
       cauEG: // global
           R2 = R2;
           call GHC.Event.TimerManager.shutdown1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.shutdown_info" {
     GHC.Event.TimerManager.shutdown_info:
         const GHC.Event.TimerManager.shutdown_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SasVk_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.020312235 UTC

[section ""data" . GHC.Event.TimerManager.new3_closure" {
     GHC.Event.TimerManager.new3_closure:
         const GHC.Event.TimerManager.new3_info;
 },
 GHC.Event.TimerManager.new3_entry() //  [R2]
         { []
         }
     {offset
       cauES: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauEW; else goto cauEV;
       cauEW: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.TimerManager.new3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauEV: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.TimerManager.Finished_closure+4;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new3_info" {
     GHC.Event.TimerManager.new3_info:
         const GHC.Event.TimerManager.new3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.029702339 UTC

[section ""data" . GHC.Event.TimerManager.new2_closure" {
     GHC.Event.TimerManager.new2_closure:
         const GHC.Event.TimerManager.new2_info;
         const 0;
 },
 sat_sasMp_entry() //  [R1]
         { []
         }
     {offset
       cauFq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauFr; else goto cauFs;
       cauFr: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cauFs: // global
           I64[Sp - 24] = block_cauFh_info;
           R2 = GHC.Event.TimerManager.new3_closure+1;
           _sasLW::P64 = P64[R1 + 7];
           _sasM3::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _sasLW::P64;
           P64[Sp - 8] = _sasM3::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasMp_info" {
     sat_sasMp_info:
         const sat_sasMp_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _cauFh() //  [R1]
         { []
         }
     {offset
       cauFh: // global
           I64[Sp] = block_cauFj_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauFJ; else goto cauFk;
       uauFJ: // global
           call _cauFj(R1) args: 0, res: 0, upd: 0;
       cauFk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauFh_info" {
     block_cauFh_info:
         const _cauFh;
         const 2;
         const 30;
 },
 _cauFj() //  [R1]
         { []
         }
     {offset
       cauFj: // global
           if (R1 & 7 == 4) goto cauFo; else goto cauFn;
       cauFo: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauFn: // global
           _sasLW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cauFw_info;
           R1 = _sasLW::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uauFK; else goto cauFx;
       uauFK: // global
           call _cauFw(R1) args: 0, res: 0, upd: 0;
       cauFx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauFj_info" {
     block_cauFj_info:
         const _cauFj;
         const 2;
         const 30;
 },
 _cauFw() //  [R1]
         { []
         }
     {offset
       cauFw: // global
           I64[Sp] = block_cauFB_info;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 39];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauFw_info" {
     block_cauFw_info:
         const _cauFw;
         const 1;
         const 30;
 },
 _cauFB() //  []
         { []
         }
     {offset
       cauFB: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauFB_info" {
     block_cauFB_info:
         const _cauFB;
         const 1;
         const 30;
 },
 sat_sasMz_entry() //  [R1]
         { []
         }
     {offset
       cauFX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cauFY; else goto cauFZ;
       cauFY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauFZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.Control.controlReadFd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasMz_info" {
     sat_sasMz_info:
         const sat_sasMz_entry;
         const 1;
         const 16;
 },
 sat_sasMD_entry() //  [R1]
         { []
         }
     {offset
       cauG6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cauG7; else goto cauG8;
       cauG7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauG8: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.Control.controlEventFd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasMD_info" {
     sat_sasMD_info:
         const sat_sasMD_entry;
         const 1;
         const 16;
 },
 sat_sasMN_entry() //  [R1]
         { []
         }
     {offset
       cauGi: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cauGm; else goto cauGn;
       cauGm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauGn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cauGf_info;
           _sasM0::P64 = P64[R1 + 16];
           _sasM6::P64 = P64[R1 + 32];
           _sasM9::P64 = P64[R1 + 40];
           _sasMt::P64 = P64[R1 + 48];
           R1 = P64[R1 + 24];
           P64[Sp - 48] = _sasM0::P64;
           P64[Sp - 40] = _sasM6::P64;
           P64[Sp - 32] = _sasM9::P64;
           P64[Sp - 24] = _sasMt::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uauGr; else goto cauGg;
       uauGr: // global
           call _cauGf(R1) args: 0, res: 0, upd: 0;
       cauGg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasMN_info" {
     sat_sasMN_info:
         const sat_sasMN_entry;
         const 5;
         const 15;
 },
 _cauGf() //  [R1]
         { []
         }
     {offset
       cauGf: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cauGq; else goto cauGp;
       cauGq: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cauGp: // global
           _sasML::P64 = P64[R1 + 7];
           _sasMM::P64 = P64[R1 + 15];
           _sasMI::I64 = I64[R1 + 23];
           _sasMJ::I64 = I64[R1 + 31];
           _sasMK::I64 = I64[R1 + 39];
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _sasML::P64;
           P64[Hp - 24] = _sasMM::P64;
           I64[Hp - 16] = _sasMI::I64;
           I64[Hp - 8] = _sasMJ::I64;
           I64[Hp] = _sasMK::I64;
           R1 = Hp - 71;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cauGf_info" {
     block_cauGf_info:
         const _cauGf;
         const 4;
         const 30;
 },
 GHC.Event.TimerManager.new2_entry() //  [R2]
         { []
         }
     {offset
       cauGs: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cauGt; else goto cauGu;
       cauGt: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.new2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauGu: // global
           I64[Sp - 16] = block_cauF6_info;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new2_info" {
     GHC.Event.TimerManager.new2_info:
         const GHC.Event.TimerManager.new2_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const SasVk_srt+152;
 },
 _cauF6() //  [R1]
         { []
         }
     {offset
       cauF6: // global
           I64[Sp - 8] = block_cauF8_info;
           R2 = GHC.Types.True_closure+2;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauF6_info" {
     block_cauF6_info:
         const _cauF6;
         const 1;
         const 30064771102;
         const SasVk_srt+152;
 },
 _cauF8() //  [R1]
         { []
         }
     {offset
       cauF8: // global
           I64[Sp - 8] = block_cauFa_info;
           _sasM3::P64 = R1;
           R1 = GHC.Event.TimerManager.Created_closure+1;
           P64[Sp] = _sasM3::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauF8_info" {
     block_cauF8_info:
         const _cauF8;
         const 2;
         const 12884901918;
         const SasVk_srt+152;
 },
 _cauFa() //  [R1]
         { []
         }
     {offset
       cauFa: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cauGz; else goto cauGy;
       cauGz: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauGy: // global
           I64[Hp - 64] = stg_ARR_WORDS_info;
           I64[Hp - 56] = 8;
           I64[Hp - 40] = sat_sasMp_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_cauFM_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           _sasM6::P64 = R1;
           R1 = R1;
           P64[Sp - 8] = Hp - 64;
           P64[Sp] = _sasM6::P64;
           Sp = Sp - 16;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauFa_info" {
     block_cauFa_info:
         const _cauFa;
         const 3;
         const 12884901918;
         const SasVk_srt+152;
 },
 _cauFM() //  []
         { []
         }
     {offset
       cauFM: // global
           I64[Sp] = block_cauFO_info;
           R1 = P64[Sp + 40];
           if (R1 & 7 != 0) goto uauGK; else goto cauFP;
       uauGK: // global
           call _cauFO(R1) args: 0, res: 0, upd: 0;
       cauFP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauFM_info" {
     block_cauFM_info:
         const _cauFM;
         const 5;
         const 12884901918;
         const SasVk_srt+152;
 },
 _cauFO() //  [R1]
         { []
         }
     {offset
       cauFO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauGD; else goto cauGC;
       cauGD: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauGC: // global
           _sasMu::P64 = P64[R1 + 7];
           _sasMw::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_sasMz_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 16] = block_cauG0_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 16;
           R2 = _sasMu::P64;
           _sasMt::P64 = R1;
           R1 = _sasMw::P64;
           I64[Sp - 24] = stg_ap_v_info;
           P64[Sp - 8] = _sasMw::P64;
           P64[Sp] = _sasMu::P64;
           P64[Sp + 40] = _sasMt::P64;
           Sp = Sp - 24;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauFO_info" {
     block_cauFO_info:
         const _cauFO;
         const 1029;
         const 12884901918;
         const SasVk_srt+152;
 },
 _cauG0() //  [R1]
         { []
         }
     {offset
       cauG0: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauGG; else goto cauGF;
       cauGG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauGF: // global
           I64[Hp - 16] = sat_sasMD_info;
           P64[Hp] = P64[Sp + 40];
           _sasMu::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cauG9_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 16;
           R2 = _sasMu::P64;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_v_info;
           Sp = Sp + 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauG0_info" {
     block_cauG0_info:
         const _cauG0;
         const 7;
         const 12884901918;
         const SasVk_srt+152;
 },
 _cauG9() //  [R1]
         { []
         }
     {offset
       cauG9: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cauGJ; else goto cauGI;
       cauGJ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauGI: // global
           I64[Hp - 48] = sat_sasMN_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 48;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauG9_info" {
     block_cauG9_info:
         const _cauG9;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.059150036 UTC

[section ""data" . GHC.Event.TimerManager.newWith_closure" {
     GHC.Event.TimerManager.newWith_closure:
         const GHC.Event.TimerManager.newWith_info;
         const 0;
 },
 GHC.Event.TimerManager.newWith_entry() //  [R2]
         { []
         }
     {offset
       cauI7: // global
           R2 = R2;
           call GHC.Event.TimerManager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.newWith_info" {
     GHC.Event.TimerManager.newWith_info:
         const GHC.Event.TimerManager.newWith_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SasVk_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.063116053 UTC

[section ""data" . GHC.Event.TimerManager.new1_closure" {
     GHC.Event.TimerManager.new1_closure:
         const GHC.Event.TimerManager.new1_info;
         const 0;
 },
 GHC.Event.TimerManager.new1_entry() //  []
         { []
         }
     {offset
       cauIk: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cauIl; else goto cauIm;
       cauIl: // global
           R1 = GHC.Event.TimerManager.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cauIm: // global
           I64[Sp - 8] = block_cauIi_info;
           Sp = Sp - 8;
           call GHC.Event.Poll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new1_info" {
     GHC.Event.TimerManager.new1_info:
         const GHC.Event.TimerManager.new1_entry;
         const 0;
         const 1688854155231246;
         const 4294967299;
         const SasVk_srt+40;
 },
 _cauIi() //  [R1]
         { []
         }
     {offset
       cauIi: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.TimerManager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauIi_info" {
     block_cauIi_info:
         const _cauIi;
         const 0;
         const 4294967326;
         const SasVk_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.067872073 UTC

[section ""data" . GHC.Event.TimerManager.new_closure" {
     GHC.Event.TimerManager.new_closure:
         const GHC.Event.TimerManager.new_info;
         const 0;
 },
 GHC.Event.TimerManager.new_entry() //  []
         { []
         }
     {offset
       cauIA: // global
           call GHC.Event.TimerManager.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new_info" {
     GHC.Event.TimerManager.new_info:
         const GHC.Event.TimerManager.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SasVk_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.080135322 UTC

[section ""data" . GHC.Event.TimerManager.step1_closure" {
     GHC.Event.TimerManager.step1_closure:
         const GHC.Event.TimerManager.step1_info;
         const 0;
 },
 sat_sasNw_entry() //  [R1]
         { []
         }
     {offset
       cauJl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cauJm; else goto cauJn;
       cauJm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauJn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cauJd_info;
           _sasMX::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sasMX::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uauJK; else goto cauJe;
       uauJK: // global
           call _cauJd(R1) args: 0, res: 0, upd: 0;
       cauJe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasNw_info" {
     sat_sasNw_info:
         const sat_sasNw_entry;
         const 4294967297;
         const 19;
 },
 _cauJd() //  [R1]
         { []
         }
     {offset
       cauJd: // global
           _cauJk::P64 = R1 & 7;
           if (_cauJk::P64 < 3) goto uauJJ; else goto cauJj;
       uauJJ: // global
           _sasMX::I64 = I64[Sp + 8];
           if (_cauJk::P64 < 2) goto cauJh; else goto cauJi;
       cauJh: // global
           Hp = Hp + 16;
           _sasNk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cauJF; else goto cauJv;
       cauJv: // global
           _sasNr::I64 = I64[_sasNk::P64 + 39] - _sasMX::I64;
           I64[Hp - 8] = GHC.Event.Internal.Timeout_con_info;
           I64[Hp] = _sasNr::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauJi: // global
           Hp = Hp + 16;
           _sasNk::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cauJF; else goto cauJE;
       cauJF: // global
           HpAlloc = 16;
           R1 = _sasNk::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cauJE: // global
           _sasNv::I64 = I64[_sasNk::P64 + 22] - _sasMX::I64;
           I64[Hp - 8] = GHC.Event.Internal.Timeout_con_info;
           I64[Hp] = _sasNv::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauJj: // global
           R1 = GHC.Event.Internal.Forever_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cauJd_info" {
     block_cauJd_info:
         const _cauJd;
         const 65;
         const 30;
 },
 sat_sasNy_entry() //  [R1, R2]
         { []
         }
     {offset
       cauJL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauJO; else goto cauJP;
       cauJO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauJP: // global
           I64[Sp - 16] = block_cauJ2_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasNy_info" {
     sat_sasNy_info:
         const sat_sasNy_entry;
         const 4294967297;
         const 12;
         const 4294967301;
 },
 _cauJ2() //  [R1, R2]
         { []
         }
     {offset
       cauJ2: // global
           I64[Sp - 8] = block_cauJ4_info;
           _sasNh::P64 = R1;
           R1 = R2;
           P64[Sp] = _sasNh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauJU; else goto cauJ5;
       uauJU: // global
           call _cauJ4(R1) args: 0, res: 0, upd: 0;
       cauJ5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauJ2_info" {
     block_cauJ2_info:
         const _cauJ2;
         const 65;
         const 30;
 },
 _cauJ4() //  [R1]
         { []
         }
     {offset
       cauJ4: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cauJT; else goto cauJS;
       cauJT: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauJS: // global
           I64[Hp - 72] = sat_sasNw_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauJ4_info" {
     block_cauJ4_info:
         const _cauJ4;
         const 130;
         const 30;
 },
 sat_sasNX_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cauKf: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cauKg; else goto cauKh;
       cauKg: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cauKh: // global
           I64[Sp - 32] = block_cauKc_info;
           _sasN1::P64 = P64[R1 + 5];
           _sasN7::P64 = P64[R1 + 13];
           _sasN5::I64 = I64[R1 + 21];
           R1 = R2;
           P64[Sp - 24] = _sasN1::P64;
           I64[Sp - 16] = _sasN5::I64;
           P64[Sp - 8] = _sasN7::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uauKN; else goto cauKd;
       uauKN: // global
           call _cauKc(R1) args: 0, res: 0, upd: 0;
       cauKd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasNX_info" {
     sat_sasNX_info:
         const sat_sasNX_entry;
         const 4294967298;
         const 12884901896;
         const 12884901903;
         const SasVk_srt+192;
 },
 _cauKc() //  [R1]
         { []
         }
     {offset
       cauKc: // global
           I64[Sp] = block_cauKk_info;
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 24];
           R2 = I64[Sp + 16];
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauKc_info" {
     block_cauKc_info:
         const _cauKc;
         const 131;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauKk() //  [R1]
         { []
         }
     {offset
       cauKk: // global
           I64[Sp] = block_cauKm_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauKO; else goto cauKp;
       uauKO: // global
           call _cauKm(R1) args: 0, res: 0, upd: 0;
       cauKp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauKk_info" {
     block_cauKk_info:
         const _cauKk;
         const 387;
         const 4294967326;
         const SasVk_srt+192;
 },
 _cauKm() //  [R1]
         { []
         }
     {offset
       cauKm: // global
           _cauKI::P64 = R1 & 7;
           if (_cauKI::P64 < 3) goto uauKM; else goto cauKE;
       uauKM: // global
           if (_cauKI::P64 < 2) goto cauKv; else goto cauKz;
       cauKv: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauKz: // global
           _sasN1::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_sasN1::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasN1::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauKE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cauKH; else goto cauKG;
       cauKH: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauKG: // global
           _sasNT::P64 = P64[R1 + 5];
           _sasNS::I64 = I64[R1 + 13];
           _sasNU::I64 = I64[R1 + 21];
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _sasNU::I64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _sasNT::P64;
           I64[Hp] = _sasNS::I64;
           R3 = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 32;
           call GHC.Conc.Signal.runHandlers1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauKm_info" {
     block_cauKm_info:
         const _cauKm;
         const 387;
         const 4294967326;
         const SasVk_srt+192;
 },
 sat_sasO6_entry() //  [R1]
         { []
         }
     {offset
       cauL8: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauL9; else goto cauLa;
       cauL9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauLa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cauL1_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uauLh; else goto cauL2;
       uauLh: // global
           call _cauL1(R1) args: 0, res: 0, upd: 0;
       cauL2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasO6_info" {
     sat_sasO6_info:
         const sat_sasO6_entry;
         const 1;
         const 16;
 },
 _cauL1() //  [R1]
         { []
         }
     {offset
       cauL1: // global
           if (R1 & 7 == 2) goto cauL6; else goto cauL5;
       cauL6: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cauL5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cauL1_info" {
     block_cauL1_info:
         const _cauL1;
         const 0;
         const 30;
 },
 GHC.Event.TimerManager.step1_entry() //  [R2]
         { []
         }
     {offset
       cauLi: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cauLj; else goto cauLk;
       cauLj: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.step1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauLk: // global
           (_sasMX::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Sp - 16] = block_cauIM_info;
           R1 = R2;
           I64[Sp - 8] = _sasMX::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uauM6; else goto cauIN;
       uauM6: // global
           call _cauIM(R1) args: 0, res: 0, upd: 0;
       cauIN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.step1_info" {
     GHC.Event.TimerManager.step1_info:
         const GHC.Event.TimerManager.step1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SasVk_srt+192;
 },
 _cauIM() //  [R1]
         { []
         }
     {offset
       cauIM: // global
           I64[Sp - 32] = block_cauIR_info;
           _sasN0::P64 = P64[R1 + 15];
           _sasN1::P64 = P64[R1 + 23];
           _sasN7::P64 = P64[R1 + 47];
           _sasN5::I64 = I64[R1 + 71];
           R1 = P64[R1 + 7];
           P64[Sp - 24] = _sasN1::P64;
           I64[Sp - 16] = _sasN5::I64;
           P64[Sp - 8] = _sasN7::P64;
           P64[Sp] = _sasN0::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uauM2; else goto cauIS;
       uauM2: // global
           call _cauIR(R1) args: 0, res: 0, upd: 0;
       cauIS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauIM_info" {
     block_cauIM_info:
         const _cauIM;
         const 65;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauIR() //  [R1]
         { []
         }
     {offset
       cauIR: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cauLo; else goto cauLn;
       cauLo: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauLn: // global
           _sasN9::P64 = P64[R1 + 7];
           _sasNa::P64 = P64[R1 + 15];
           I64[Hp - 32] = GHC.Word.W64#_con_info;
           _sasMX::I64 = I64[Sp + 40];
           I64[Hp - 24] = _sasMX::I64;
           I64[Hp - 16] = sat_sasNy_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _sasMX::I64;
           I64[Sp] = block_cauJV_info;
           R2 = Hp - 15;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sasNa::P64;
           P64[Sp + 40] = _sasN9::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauIR_info" {
     block_cauIR_info:
         const _cauIR;
         const 1157;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauJV() //  [R1]
         { []
         }
     {offset
       cauJV: // global
           I64[Sp] = block_cauJX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauM3; else goto cauJY;
       uauM3: // global
           call _cauJX(R1) args: 0, res: 0, upd: 0;
       cauJY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauJV_info" {
     block_cauJV_info:
         const _cauJV;
         const 133;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauJX() //  [R1]
         { []
         }
     {offset
       cauJX: // global
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call _cauLB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauJX_info" {
     block_cauJX_info:
         const _cauJX;
         const 133;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauLB() //  []
         { []
         }
     {offset
       cauLB: // global
           _sasO8::P64 = P64[Sp];
           I64[Sp] = block_cauLD_info;
           R1 = _sasO8::P64;
           if (R1 & 7 != 0) goto uauM7; else goto cauLF;
       uauM7: // global
           call _cauLD(R1) args: 0, res: 0, upd: 0;
       cauLF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cauLD() //  [R1]
         { []
         }
     {offset
       cauLD: // global
           if (R1 & 7 == 1) goto uauM8; else goto cauLQ;
       uauM8: // global
           call _cauK5() args: 0, res: 0, upd: 0;
       cauLQ: // global
           I64[Sp - 8] = block_cauLO_info;
           _sasOc::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _sasOc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauM9; else goto cauLR;
       uauM9: // global
           call _cauLO(R1) args: 0, res: 0, upd: 0;
       cauLR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauLD_info" {
     block_cauLD_info:
         const _cauLD;
         const 262;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauK5() //  []
         { []
         }
     {offset
       cauK5: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cauLt; else goto cauLs;
       cauLt: // global
           HpAlloc = 48;
           I64[Sp] = block_cauK5_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cauLs: // global
           I64[Hp - 40] = sat_sasNX_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cauKQ_info;
           R4 = Hp - 37;
           R3 = Hp - 6;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauK5_info" {
     block_cauK5_info:
         const _cauK5;
         const 262;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauKQ() //  []
         { []
         }
     {offset
       cauKQ: // global
           _sasO3::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 40] = block_cauKS_info;
           R1 = _sasO3::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uauM5; else goto cauKT;
       uauM5: // global
           call _cauKS(R1) args: 0, res: 0, upd: 0;
       cauKT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauKQ_info" {
     block_cauKQ_info:
         const _cauKQ;
         const 1925;
         const 30;
 },
 _cauKS() //  [R1]
         { []
         }
     {offset
       cauKS: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauLx; else goto cauLw;
       cauLx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauLw: // global
           I64[Hp - 16] = sat_sasO6_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauKS_info" {
     block_cauKS_info:
         const _cauKS;
         const 0;
         const 30;
 },
 _cauLO() //  [R1]
         { []
         }
     {offset
       cauLO: // global
           I64[Sp] = block_cauLV_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauLO_info" {
     block_cauLO_info:
         const _cauLO;
         const 519;
         const 12884901918;
         const SasVk_srt+192;
 },
 _cauLV() //  []
         { []
         }
     {offset
       cauLV: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cauLB() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauLV_info" {
     block_cauLV_info:
         const _cauLV;
         const 519;
         const 12884901918;
         const SasVk_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.119812316 UTC

[section ""data" . GHC.Event.TimerManager.step_closure" {
     GHC.Event.TimerManager.step_closure:
         const GHC.Event.TimerManager.step_info;
         const 0;
 },
 GHC.Event.TimerManager.step_entry() //  [R2]
         { []
         }
     {offset
       cauO8: // global
           R2 = R2;
           call GHC.Event.TimerManager.step1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.step_info" {
     GHC.Event.TimerManager.step_info:
         const GHC.Event.TimerManager.step_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SasVk_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.12278121 UTC

[section ""cstring" . lvl_rasDV_bytes" {
     lvl_rasDV_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,108,111,111,112,58,32,115,116,97,116,101,32,105,115,32,97,108,114,101,97,100,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.126347356 UTC

[section ""data" . lvl1_rasDW_closure" {
     lvl1_rasDW_closure:
         const lvl1_rasDW_info;
         const 0;
 },
 sat_sasOm_entry() //  [R1]
         { []
         }
     {offset
       cauOv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cauOw; else goto cauOx;
       cauOw: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cauOx: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cauOo_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uauOE; else goto cauOp;
       uauOE: // global
           call _cauOo(R1) args: 0, res: 0, upd: 0;
       cauOp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sasOm_info" {
     sat_sasOm_info:
         const sat_sasOm_entry;
         const 1;
         const 21474836496;
         const SasVk_srt+8;
 },
 _cauOo() //  [R1]
         { []
         }
     {offset
       cauOo: // global
           if (R1 & 7 == 4) goto cauOt; else goto cauOs;
       cauOt: // global
           R1 = GHC.Event.TimerManager.$fShowState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       cauOs: // global
           R1 = GHC.Event.TimerManager.$fShowState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cauOo_info" {
     block_cauOo_info:
         const _cauOo;
         const 0;
         const 21474836510;
         const SasVk_srt+8;
 },
 lvl1_rasDW_entry() //  [R2]
         { []
         }
     {offset
       cauOH: // global
           _sasOk::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cauOI; else goto cauOJ;
       cauOJ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauOL; else goto cauOK;
       cauOL: // global
           HpAlloc = 24;
           goto cauOI;
       cauOI: // global
           R2 = _sasOk::P64;
           R1 = lvl1_rasDW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauOK: // global
           I64[Hp - 16] = sat_sasOm_info;
           P64[Hp] = _sasOk::P64;
           I64[Sp - 8] = block_cauOF_info;
           R3 = Hp - 16;
           R2 = lvl_rasDV_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rasDW_info" {
     lvl1_rasDW_info:
         const lvl1_rasDW_entry;
         const 0;
         const 864691149929971726;
         const 4294967301;
         const SasVk_srt+8;
 },
 _cauOF() //  [R1]
         { []
         }
     {offset
       cauOF: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauOF_info" {
     block_cauOF_info:
         const _cauOF;
         const 0;
         const 4294967326;
         const SasVk_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.134575092 UTC

[section ""data" . lvl2_rasDX_closure" {
     lvl2_rasDX_closure:
         const (,)_con_info;
         const GHC.Event.TimerManager.Running_closure+2;
         const GHC.Event.TimerManager.Created_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.137169838 UTC

[section ""data" . lvl3_rasDY_closure" {
     lvl3_rasDY_closure:
         const lvl3_rasDY_info;
 },
 lvl3_rasDY_entry() //  [R2]
         { []
         }
     {offset
       cauPl: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cauPm; else goto cauPn;
       cauPm: // global
           R2 = R2;
           R1 = lvl3_rasDY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauPn: // global
           I64[Sp - 8] = block_cauPe_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uauPx; else goto cauPf;
       uauPx: // global
           call _cauPe(R1) args: 0, res: 0, upd: 0;
       cauPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_rasDY_info" {
     lvl3_rasDY_info:
         const lvl3_rasDY_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cauPe() //  [R1]
         { []
         }
     {offset
       cauPe: // global
           if (R1 & 7 == 1) goto cauPj; else goto cauPi;
       cauPj: // global
           R1 = lvl2_rasDX_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauPi: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cauPt; else goto cauPs;
       cauPt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cauPs: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauPe_info" {
     block_cauPe_info:
         const _cauPe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.16094615 UTC

[section ""data" . GHC.Event.TimerManager.$wloop_closure" {
     GHC.Event.TimerManager.$wloop_closure:
         const GHC.Event.TimerManager.$wloop_info;
         const 0;
 },
 GHC.Event.TimerManager.$wloop_slow() //  [R1]
         { []
         }
     {offset
       cauPM: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$wloop_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 40, res: 0, upd: 8;
     }
 },
 go_sasPk_entry() //  [R1]
         { []
         }
     {offset
       cauQk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto uauQx; else goto uauQw;
       uauQx: // global
           P64[Sp - 8] = R1;
           Sp = Sp - 8;
           call _cauQl() args: 0, res: 0, upd: 0;
       uauQw: // global
           P64[Sp - 8] = R1;
           Sp = Sp - 8;
           call _cauQ7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_sasPk_info" {
     go_sasPk_info:
         const go_sasPk_entry;
         const 12884901894;
         const 4294967304;
         const 4294967299;
         const SasVk_srt+208;
 },
 _cauQ7() //  []
         { []
         }
     {offset
       cauQ7: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cauQo; else goto cauQn;
       cauQo: // global
           HpAlloc = 80;
           call _cauQl() args: 0, res: 0, upd: 0;
       cauQn: // global
           _sasPk::P64 = P64[Sp];
           _sasOr::P64 = P64[_sasPk::P64 + 7];
           _sasOs::P64 = P64[_sasPk::P64 + 15];
           _sasOt::P64 = P64[_sasPk::P64 + 23];
           _sasOx::P64 = P64[_sasPk::P64 + 31];
           _sasOy::P64 = P64[_sasPk::P64 + 39];
           _sasOA::P64 = P64[_sasPk::P64 + 47];
           _sasOu::I64 = I64[_sasPk::P64 + 55];
           _sasOv::I64 = I64[_sasPk::P64 + 63];
           _sasOw::I64 = I64[_sasPk::P64 + 71];
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = _sasOA::P64;
           P64[Hp - 56] = _sasOr::P64;
           P64[Hp - 48] = _sasOs::P64;
           P64[Hp - 40] = _sasOt::P64;
           P64[Hp - 32] = _sasOx::P64;
           P64[Hp - 24] = _sasOy::P64;
           I64[Hp - 16] = _sasOu::I64;
           I64[Hp - 8] = _sasOv::I64;
           I64[Hp] = _sasOw::I64;
           I64[Sp - 8] = block_cauQb_info;
           R2 = Hp - 71;
           Sp = Sp - 8;
           call GHC.Event.TimerManager.step1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _cauQl() //  []
         { []
         }
     {offset
       cauQl: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cauQb() //  [R1]
         { []
         }
     {offset
       cauQb: // global
           I64[Sp] = block_cauQd_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauQA; else goto cauQe;
       uauQA: // global
           call _cauQd(R1) args: 0, res: 0, upd: 0;
       cauQe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauQb_info" {
     block_cauQb_info:
         const _cauQb;
         const 1;
         const 4294967326;
         const SasVk_srt+208;
 },
 _cauQd() //  [R1]
         { []
         }
     {offset
       cauQd: // global
           if (R1 & 7 == 1) goto cauQh; else goto uauQy;
       cauQh: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uauQy: // global
           Sp = Sp + 8;
           call _cauQ7() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cauQd_info" {
     block_cauQd_info:
         const _cauQd;
         const 1;
         const 4294967326;
         const SasVk_srt+208;
 },
 sat_sasQ0_entry() //  [R1, R2]
         { []
         }
     {offset
       cauQU: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cauQV; else goto cauQW;
       cauQV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauQW: // global
           _sasOs::P64 = P64[R1 + 6];
           _sasOx::P64 = P64[R1 + 14];
           _sasOy::P64 = P64[R1 + 22];
           _sasOB::P64 = P64[R1 + 30];
           _sasOF::P64 = P64[R1 + 38];
           _sasOu::I64 = I64[R1 + 46];
           _sasOv::I64 = I64[R1 + 54];
           _sasOw::I64 = I64[R1 + 62];
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp - 56] = block_cauQO_info;
           _sasPt::P64 = R2;
           R2 = _sasOB::P64;
           R1 = _sasOF::P64;
           I64[Sp - 48] = _sasOu::I64;
           I64[Sp - 40] = _sasOv::I64;
           I64[Sp - 32] = _sasOw::I64;
           P64[Sp - 24] = _sasOx::P64;
           P64[Sp - 16] = _sasOy::P64;
           P64[Sp - 8] = _sasPt::P64;
           Sp = Sp - 56;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasQ0_info" {
     sat_sasQ0_info:
         const sat_sasQ0_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _cauQO() //  []
         { []
         }
     {offset
       cauQO: // global
           I64[Sp] = block_cauQQ_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauQO_info" {
     block_cauQO_info:
         const _cauQO;
         const 454;
         const 30;
 },
 _cauQQ() //  []
         { []
         }
     {offset
       cauQQ: // global
           _sasOv::I64 = I64[Sp + 16];
           _sasOx::P64 = P64[Sp + 32];
           (_sasPG::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_sasPL::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp + 16] = block_cauR7_info;
           R1 = _sasOx::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uauRw; else goto cauR8;
       uauRw: // global
           call _cauR7(R1) args: 0, res: 0, upd: 0;
       cauR8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauQQ_info" {
     block_cauQQ_info:
         const _cauQQ;
         const 1478;
         const 30;
 },
 _cauR7() //  [R1]
         { []
         }
     {offset
       cauR7: // global
           _sasOw::I64 = I64[Sp + 8];
           _sasPt::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cauRe; else goto cauRi;
       cauRe: // global
           (_sasPR::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasPt::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cauRi: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasPZ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasPt::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauR7_info" {
     block_cauR7_info:
         const _cauR7;
         const 452;
         const 30;
 },
 sat_sasPs_entry() //  [R1]
         { []
         }
     {offset
       cauRC: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasPs_info" {
     sat_sasPs_info:
         const sat_sasPs_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sasR8_entry() //  [R1, R2]
         { []
         }
     {offset
       cauRZ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cauS0; else goto cauS1;
       cauS0: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauS1: // global
           _sasOs::P64 = P64[R1 + 6];
           _sasOx::P64 = P64[R1 + 14];
           _sasOy::P64 = P64[R1 + 22];
           _sasOB::P64 = P64[R1 + 30];
           _sasOF::P64 = P64[R1 + 38];
           _sasOu::I64 = I64[R1 + 46];
           _sasOv::I64 = I64[R1 + 54];
           _sasOw::I64 = I64[R1 + 62];
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp - 56] = block_cauRT_info;
           _sasQB::P64 = R2;
           R2 = _sasOB::P64;
           R1 = _sasOF::P64;
           I64[Sp - 48] = _sasOu::I64;
           I64[Sp - 40] = _sasOv::I64;
           I64[Sp - 32] = _sasOw::I64;
           P64[Sp - 24] = _sasOx::P64;
           P64[Sp - 16] = _sasOy::P64;
           P64[Sp - 8] = _sasQB::P64;
           Sp = Sp - 56;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasR8_info" {
     sat_sasR8_info:
         const sat_sasR8_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _cauRT() //  []
         { []
         }
     {offset
       cauRT: // global
           I64[Sp] = block_cauRV_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauRT_info" {
     block_cauRT_info:
         const _cauRT;
         const 454;
         const 30;
 },
 _cauRV() //  []
         { []
         }
     {offset
       cauRV: // global
           _sasOv::I64 = I64[Sp + 16];
           _sasOx::P64 = P64[Sp + 32];
           (_sasQO::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_sasQT::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp + 16] = block_cauSc_info;
           R1 = _sasOx::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uauSB; else goto cauSd;
       uauSB: // global
           call _cauSc(R1) args: 0, res: 0, upd: 0;
       cauSd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauRV_info" {
     block_cauRV_info:
         const _cauRV;
         const 1478;
         const 30;
 },
 _cauSc() //  [R1]
         { []
         }
     {offset
       cauSc: // global
           _sasOw::I64 = I64[Sp + 8];
           _sasQB::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cauSj; else goto cauSn;
       cauSj: // global
           (_sasQZ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasQB::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cauSn: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasR7::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasQB::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauSc_info" {
     block_cauSc_info:
         const _cauSc;
         const 452;
         const 30;
 },
 sat_sasQA_entry() //  [R1]
         { []
         }
     {offset
       cauSH: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasQA_info" {
     sat_sasQA_info:
         const sat_sasQA_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_sasRH_entry() //  [R1]
         { []
         }
     {offset
       cauSV: // global
           _sasRH::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto cauSW; else goto cauSX;
       cauSX: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto cauSZ; else goto cauSY;
       cauSZ: // global
           HpAlloc = 88;
           goto cauSW;
       cauSW: // global
           R1 = _sasRH::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cauSY: // global
           _sasOs::P64 = P64[_sasRH::P64 + 7];
           _sasOx::P64 = P64[_sasRH::P64 + 15];
           _sasOy::P64 = P64[_sasRH::P64 + 23];
           _sasOB::P64 = P64[_sasRH::P64 + 31];
           _sasOF::P64 = P64[_sasRH::P64 + 39];
           _sasPk::P64 = P64[_sasRH::P64 + 47];
           _sasOu::I64 = I64[_sasRH::P64 + 55];
           _sasOv::I64 = I64[_sasRH::P64 + 63];
           _sasOw::I64 = I64[_sasRH::P64 + 71];
           I64[Hp - 80] = sat_sasR8_info;
           P64[Hp - 72] = _sasOs::P64;
           P64[Hp - 64] = _sasOx::P64;
           P64[Hp - 56] = _sasOy::P64;
           P64[Hp - 48] = _sasOB::P64;
           P64[Hp - 40] = _sasOF::P64;
           I64[Hp - 32] = _sasOu::I64;
           I64[Hp - 24] = _sasOv::I64;
           I64[Hp - 16] = _sasOw::I64;
           I64[Hp - 8] = sat_sasQA_info;
           P64[Hp] = _sasPk::P64;
           I64[Sp - 72] = block_cauSK_info;
           R2 = Hp - 78;
           R1 = Hp - 7;
           P64[Sp - 64] = _sasOs::P64;
           I64[Sp - 56] = _sasOu::I64;
           I64[Sp - 48] = _sasOv::I64;
           I64[Sp - 40] = _sasOw::I64;
           P64[Sp - 32] = _sasOx::P64;
           P64[Sp - 24] = _sasOy::P64;
           P64[Sp - 16] = _sasOB::P64;
           P64[Sp - 8] = _sasOF::P64;
           Sp = Sp - 72;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasRH_info" {
     sat_sasRH_info:
         const sat_sasRH_entry;
         const 12884901894;
         const 8;
         const 4294967299;
 },
 _cauSK() //  [R1]
         { []
         }
     {offset
       cauSK: // global
           _sasOs::P64 = P64[Sp + 8];
           _sasOB::P64 = P64[Sp + 56];
           _sasOF::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp + 8] = block_cauSP_info;
           R2 = _sasOB::P64;
           _sasRb::P64 = R1;
           R1 = _sasOF::P64;
           P64[Sp + 64] = _sasRb::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauSK_info" {
     block_cauSK_info:
         const _cauSK;
         const 904;
         const 30;
 },
 _cauSP() //  []
         { []
         }
     {offset
       cauSP: // global
           I64[Sp] = block_cauSR_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauSP_info" {
     block_cauSP_info:
         const _cauSP;
         const 2503;
         const 30;
 },
 _cauSR() //  []
         { []
         }
     {offset
       cauSR: // global
           _sasOv::I64 = I64[Sp + 16];
           _sasOx::P64 = P64[Sp + 32];
           (_sasRn::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_sasRs::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp + 16] = block_cauTb_info;
           R1 = _sasOx::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uauTA; else goto cauTc;
       uauTA: // global
           call _cauTb(R1) args: 0, res: 0, upd: 0;
       cauTc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauSR_info" {
     block_cauSR_info:
         const _cauSR;
         const 3527;
         const 30;
 },
 _cauTb() //  [R1]
         { []
         }
     {offset
       cauTb: // global
           _sasOw::I64 = I64[Sp + 8];
           _sasRb::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto cauTi; else goto cauTm;
       cauTi: // global
           (_sasRy::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasRb::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauTm: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasRG::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasRb::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauTb_info" {
     block_cauTb_info:
         const _cauTb;
         const 965;
         const 30;
 },
 sat_sasSg_entry() //  [R1, R2]
         { []
         }
     {offset
       cauTQ: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cauTR; else goto cauTS;
       cauTR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cauTS: // global
           _sasOs::P64 = P64[R1 + 6];
           _sasOx::P64 = P64[R1 + 14];
           _sasOy::P64 = P64[R1 + 22];
           _sasOB::P64 = P64[R1 + 30];
           _sasOF::P64 = P64[R1 + 38];
           _sasOu::I64 = I64[R1 + 46];
           _sasOv::I64 = I64[R1 + 54];
           _sasOw::I64 = I64[R1 + 62];
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp - 56] = block_cauTK_info;
           _sasRJ::P64 = R2;
           R2 = _sasOB::P64;
           R1 = _sasOF::P64;
           I64[Sp - 48] = _sasOu::I64;
           I64[Sp - 40] = _sasOv::I64;
           I64[Sp - 32] = _sasOw::I64;
           P64[Sp - 24] = _sasOx::P64;
           P64[Sp - 16] = _sasOy::P64;
           P64[Sp - 8] = _sasRJ::P64;
           Sp = Sp - 56;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasSg_info" {
     sat_sasSg_info:
         const sat_sasSg_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _cauTK() //  []
         { []
         }
     {offset
       cauTK: // global
           I64[Sp] = block_cauTM_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauTK_info" {
     block_cauTK_info:
         const _cauTK;
         const 454;
         const 30;
 },
 _cauTM() //  []
         { []
         }
     {offset
       cauTM: // global
           _sasOv::I64 = I64[Sp + 16];
           _sasOx::P64 = P64[Sp + 32];
           (_sasRW::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_sasS1::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp + 16] = block_cauU3_info;
           R1 = _sasOx::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uauUs; else goto cauU4;
       uauUs: // global
           call _cauU3(R1) args: 0, res: 0, upd: 0;
       cauU4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauTM_info" {
     block_cauTM_info:
         const _cauTM;
         const 1478;
         const 30;
 },
 _cauU3() //  [R1]
         { []
         }
     {offset
       cauU3: // global
           _sasOw::I64 = I64[Sp + 8];
           _sasRJ::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto cauUa; else goto cauUe;
       cauUa: // global
           (_sasS7::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasRJ::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       cauUe: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasSf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasRJ::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauU3_info" {
     block_cauU3_info:
         const _cauU3;
         const 452;
         const 30;
 },
 sat_sasRI_entry() //  [R1]
         { []
         }
     {offset
       cauUy: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_sasRI_info" {
     sat_sasRI_info:
         const sat_sasRI_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.TimerManager.$wloop_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       cauUB: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cauUC; else goto cauUD;
       cauUC: // global
           R1 = GHC.Event.TimerManager.$wloop_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cauUD: // global
           I64[Sp - 40] = block_cauPQ_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uauXX; else goto cauPR;
       uauXX: // global
           call _cauPQ(R1) args: 0, res: 0, upd: 0;
       cauPR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$wloop_info" {
     GHC.Event.TimerManager.$wloop_info:
         const GHC.Event.TimerManager.$wloop_entry;
         const 0;
         const 55834574862;
         const 42949672960;
         const SasVk_srt+208;
         const 7177;
         const GHC.Event.TimerManager.$wloop_slow;
 },
 _cauPQ() //  [R1]
         { []
         }
     {offset
       cauPQ: // global
           I64[Sp - 24] = block_cauPV_info;
           R2 = lvl3_rasDY_closure+1;
           _sasOA::P64 = R1;
           _sasOB::P64 = P64[R1 + 7];
           _sasOF::P64 = P64[R1 + 39];
           R1 = P64[Sp + 16];
           P64[Sp - 16] = _sasOB::P64;
           P64[Sp - 8] = _sasOF::P64;
           P64[Sp] = _sasOA::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauPQ_info" {
     block_cauPQ_info:
         const _cauPQ;
         const 3592;
         const 21474836510;
         const SasVk_srt+208;
 },
 _cauPV() //  [R1]
         { []
         }
     {offset
       cauPV: // global
           I64[Sp] = block_cauPX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uauXW; else goto cauPY;
       uauXW: // global
           call _cauPX(R1) args: 0, res: 0, upd: 0;
       cauPY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauPV_info" {
     block_cauPV_info:
         const _cauPV;
         const 28683;
         const 21474836510;
         const SasVk_srt+208;
 },
 _cauPX() //  [R1]
         { []
         }
     {offset
       cauPX: // global
           _cauX3::P64 = R1 & 7;
           if (_cauX3::P64 == 1) goto cauVg; else goto uauXU;
       cauVg: // global
           I64[Sp] = block_cauQ3_info;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       uauXU: // global
           _sasOs::P64 = P64[Sp + 40];
           _sasOB::P64 = P64[Sp + 8];
           _sasOF::P64 = P64[Sp + 16];
           if (_cauX3::P64 == 3) goto cauWD; else goto cauUP;
       cauWD: // global
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp + 48] = block_cauWz_info;
           R2 = _sasOB::P64;
           R1 = _sasOF::P64;
           Sp = Sp + 48;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       cauUP: // global
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp + 40] = block_cauUK_info;
           R2 = _sasOB::P64;
           _sasOJ::P64 = R1;
           R1 = _sasOF::P64;
           P64[Sp + 48] = _sasOJ::P64;
           Sp = Sp + 40;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauPX_info" {
     block_cauPX_info:
         const _cauPX;
         const 28683;
         const 21474836510;
         const SasVk_srt+208;
 },
 _cauQ3() //  [R1]
         { []
         }
     {offset
       cauQ3: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cauVj; else goto cauVi;
       cauVj: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cauVi: // global
           I64[Hp - 160] = go_sasPk_info;
           P64[Hp - 152] = P64[Sp + 32];
           _sasOs::P64 = P64[Sp + 40];
           P64[Hp - 144] = _sasOs::P64;
           P64[Hp - 136] = P64[Sp + 48];
           _sasOx::P64 = P64[Sp + 80];
           P64[Hp - 128] = _sasOx::P64;
           _sasOy::P64 = P64[Sp + 88];
           P64[Hp - 120] = _sasOy::P64;
           P64[Hp - 112] = P64[Sp + 24];
           _sasOu::I64 = I64[Sp + 56];
           I64[Hp - 104] = _sasOu::I64;
           _sasOv::I64 = I64[Sp + 64];
           I64[Hp - 96] = _sasOv::I64;
           _sasOw::I64 = I64[Sp + 72];
           I64[Hp - 88] = _sasOw::I64;
           _sasOB::P64 = P64[Sp + 8];
           _sasOF::P64 = P64[Sp + 16];
           _cauQ5::P64 = Hp - 159;
           if (R1 == 0) goto cauVU; else goto uauXV;
       cauVU: // global
           I64[Hp - 80] = sat_sasRH_info;
           P64[Hp - 72] = _sasOs::P64;
           P64[Hp - 64] = _sasOx::P64;
           P64[Hp - 56] = _sasOy::P64;
           P64[Hp - 48] = _sasOB::P64;
           P64[Hp - 40] = _sasOF::P64;
           P64[Hp - 32] = _cauQ5::P64;
           I64[Hp - 24] = _sasOu::I64;
           I64[Hp - 16] = _sasOv::I64;
           I64[Hp - 8] = _sasOw::I64;
           _cauRG::P64 = Hp - 79;
           Hp = Hp - 8;
           R1 = _cauRG::P64;
           Sp = Sp + 96;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uauXV: // global
           if (R1 == 1) goto cauW3; else goto cauVt;
       cauW3: // global
           I64[Hp - 80] = sat_sasSg_info;
           P64[Hp - 72] = _sasOs::P64;
           P64[Hp - 64] = _sasOx::P64;
           P64[Hp - 56] = _sasOy::P64;
           P64[Hp - 48] = _sasOB::P64;
           P64[Hp - 40] = _sasOF::P64;
           I64[Hp - 32] = _sasOu::I64;
           I64[Hp - 24] = _sasOv::I64;
           I64[Hp - 16] = _sasOw::I64;
           I64[Hp - 8] = sat_sasRI_info;
           P64[Hp] = _cauQ5::P64;
           I64[Sp] = block_cauVV_info;
           R2 = Hp - 78;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       cauVt: // global
           I64[Hp - 80] = sat_sasQ0_info;
           P64[Hp - 72] = _sasOs::P64;
           P64[Hp - 64] = _sasOx::P64;
           P64[Hp - 56] = _sasOy::P64;
           P64[Hp - 48] = _sasOB::P64;
           P64[Hp - 40] = _sasOF::P64;
           I64[Hp - 32] = _sasOu::I64;
           I64[Hp - 24] = _sasOv::I64;
           I64[Hp - 16] = _sasOw::I64;
           I64[Hp - 8] = sat_sasPs_info;
           P64[Hp] = _cauQ5::P64;
           I64[Sp] = block_cauVk_info;
           R2 = Hp - 78;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauQ3_info" {
     block_cauQ3_info:
         const _cauQ3;
         const 28683;
         const 4294967326;
         const SasVk_srt+208;
 },
 _cauVV() //  [R1]
         { []
         }
     {offset
       cauVV: // global
           _sasOs::P64 = P64[Sp + 40];
           _sasOB::P64 = P64[Sp + 8];
           _sasOF::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp + 40] = block_cauW0_info;
           R2 = _sasOB::P64;
           _sasSj::P64 = R1;
           R1 = _sasOF::P64;
           P64[Sp + 48] = _sasSj::P64;
           Sp = Sp + 40;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauVV_info" {
     block_cauVV_info:
         const _cauVV;
         const 31499;
         const 30;
 },
 _cauW0() //  []
         { []
         }
     {offset
       cauW0: // global
           I64[Sp] = block_cauW2_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 48];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauW0_info" {
     block_cauW0_info:
         const _cauW0;
         const 902;
         const 30;
 },
 _cauW2() //  []
         { []
         }
     {offset
       cauW2: // global
           _sasOv::I64 = I64[Sp + 24];
           _sasOx::P64 = P64[Sp + 40];
           (_sasSv::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])));
           (_sasSA::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp] = block_cauWi_info;
           R1 = _sasOx::P64;
           if (R1 & 7 != 0) goto uauY0; else goto cauWj;
       uauY0: // global
           call _cauWi(R1) args: 0, res: 0, upd: 0;
       cauWj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauW2_info" {
     block_cauW2_info:
         const _cauW2;
         const 2950;
         const 30;
 },
 _cauWi() //  [R1]
         { []
         }
     {offset
       cauWi: // global
           _sasOw::I64 = I64[Sp + 32];
           _sasSj::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cauWp; else goto cauWt;
       cauWp: // global
           (_sasSG::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasSj::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauWt: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasSO::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasSj::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauWi_info" {
     block_cauWi_info:
         const _cauWi;
         const 3974;
         const 30;
 },
 _cauVk() //  [R1]
         { []
         }
     {offset
       cauVk: // global
           _sasOs::P64 = P64[Sp + 40];
           _sasOB::P64 = P64[Sp + 8];
           _sasOF::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_sasOs::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sasOs::P64);
           I64[Sp + 40] = block_cauVp_info;
           R2 = _sasOB::P64;
           _sasQ3::P64 = R1;
           R1 = _sasOF::P64;
           P64[Sp + 48] = _sasQ3::P64;
           Sp = Sp + 40;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauVk_info" {
     block_cauVk_info:
         const _cauVk;
         const 31499;
         const 30;
 },
 _cauVp() //  []
         { []
         }
     {offset
       cauVp: // global
           I64[Sp] = block_cauVr_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 48];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauVp_info" {
     block_cauVp_info:
         const _cauVp;
         const 902;
         const 30;
 },
 _cauVr() //  []
         { []
         }
     {offset
       cauVr: // global
           _sasOv::I64 = I64[Sp + 24];
           _sasOx::P64 = P64[Sp + 40];
           (_sasQf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])));
           (_sasQk::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp] = block_cauVI_info;
           R1 = _sasOx::P64;
           if (R1 & 7 != 0) goto uauXZ; else goto cauVJ;
       uauXZ: // global
           call _cauVI(R1) args: 0, res: 0, upd: 0;
       cauVJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauVr_info" {
     block_cauVr_info:
         const _cauVr;
         const 2950;
         const 30;
 },
 _cauVI() //  [R1]
         { []
         }
     {offset
       cauVI: // global
           _sasOw::I64 = I64[Sp + 32];
           _sasQ3::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cauVP; else goto cauVT;
       cauVP: // global
           (_sasQq::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasQ3::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauVT: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasQy::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = _sasQ3::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauVI_info" {
     block_cauVI_info:
         const _cauVI;
         const 3974;
         const 30;
 },
 _cauWz() //  []
         { []
         }
     {offset
       cauWz: // global
           I64[Sp] = block_cauWB_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauWz_info" {
     block_cauWz_info:
         const _cauWz;
         const 453;
         const 30;
 },
 _cauWB() //  []
         { []
         }
     {offset
       cauWB: // global
           _sasOv::I64 = I64[Sp + 16];
           _sasOx::P64 = P64[Sp + 32];
           (_sasT0::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_sasT5::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp + 16] = block_cauWR_info;
           R1 = _sasOx::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uauY1; else goto cauWS;
       uauY1: // global
           call _cauWR(R1) args: 0, res: 0, upd: 0;
       cauWS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauWB_info" {
     block_cauWB_info:
         const _cauWB;
         const 1477;
         const 30;
 },
 _cauWR() //  [R1]
         { []
         }
     {offset
       cauWR: // global
           _sasOw::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cauWY; else goto cauX2;
       cauWY: // global
           (_sasTb::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cauX2: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasTj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauWR_info" {
     block_cauWR_info:
         const _cauWR;
         const 451;
         const 30;
 },
 _cauUK() //  []
         { []
         }
     {offset
       cauUK: // global
           I64[Sp] = block_cauUM_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 48];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauUK_info" {
     block_cauUK_info:
         const _cauUK;
         const 902;
         const 4294967326;
         const SasVk_srt+224;
 },
 _cauUM() //  []
         { []
         }
     {offset
       cauUM: // global
           _sasOv::I64 = I64[Sp + 24];
           _sasOx::P64 = P64[Sp + 40];
           (_sasOV::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])));
           (_sasP0::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOv::I64)));
           I64[Sp] = block_cauV3_info;
           R1 = _sasOx::P64;
           if (R1 & 7 != 0) goto uauXY; else goto cauV4;
       uauXY: // global
           call _cauV3(R1) args: 0, res: 0, upd: 0;
       cauV4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cauUM_info" {
     block_cauUM_info:
         const _cauUM;
         const 2950;
         const 4294967326;
         const SasVk_srt+224;
 },
 _cauV3() //  [R1]
         { []
         }
     {offset
       cauV3: // global
           _sasOw::I64 = I64[Sp + 32];
           _sasOJ::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cauVa; else goto cauVe;
       cauVa: // global
           (_sasP6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R2 = _sasOJ::P64;
           Sp = Sp + 56;
           call lvl1_rasDW_entry(R2) args: 8, res: 0, upd: 8;
       cauVe: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sasPf::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sasOw::I64)));
           R2 = _sasOJ::P64;
           Sp = Sp + 56;
           call lvl1_rasDW_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cauV3_info" {
     block_cauV3_info:
         const _cauV3;
         const 3974;
         const 4294967326;
         const SasVk_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.240212567 UTC

[section ""data" . GHC.Event.TimerManager.loop1_closure" {
     GHC.Event.TimerManager.loop1_closure:
         const GHC.Event.TimerManager.loop1_info;
         const 0;
 },
 GHC.Event.TimerManager.loop1_entry() //  [R2]
         { []
         }
     {offset
       cav1k: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cav1l; else goto cav1m;
       cav1l: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.loop1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cav1m: // global
           I64[Sp - 8] = block_cav1h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uav1q; else goto cav1i;
       uav1q: // global
           call _cav1h(R1) args: 0, res: 0, upd: 0;
       cav1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.loop1_info" {
     GHC.Event.TimerManager.loop1_info:
         const GHC.Event.TimerManager.loop1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SasVk_srt+232;
 },
 _cav1h() //  [R1]
         { []
         }
     {offset
       cav1h: // global
           R6 = I64[R1 + 55];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           I64[Sp - 24] = I64[R1 + 63];
           I64[Sp - 16] = I64[R1 + 71];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           Sp = Sp - 24;
           call GHC.Event.TimerManager.$wloop_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cav1h_info" {
     block_cav1h_info:
         const _cav1h;
         const 0;
         const 4294967326;
         const SasVk_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.245356141 UTC

[section ""data" . GHC.Event.TimerManager.loop_closure" {
     GHC.Event.TimerManager.loop_closure:
         const GHC.Event.TimerManager.loop_info;
         const 0;
 },
 GHC.Event.TimerManager.loop_entry() //  [R2]
         { []
         }
     {offset
       cav1I: // global
           R2 = R2;
           call GHC.Event.TimerManager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.loop_info" {
     GHC.Event.TimerManager.loop_info:
         const GHC.Event.TimerManager.loop_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SasVk_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.249698606 UTC

[section ""data" . GHC.Event.TimerManager.TimerManager_closure" {
     GHC.Event.TimerManager.TimerManager_closure:
         const GHC.Event.TimerManager.TimerManager_info;
 },
 GHC.Event.TimerManager.TimerManager_slow() //  [R1]
         { []
         }
     {offset
       cav1Q: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.TimerManager_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Event.TimerManager.TimerManager_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cav1V: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cav1Z; else goto cav1Y;
       cav1Z: // global
           HpAlloc = 80;
           R1 = GHC.Event.TimerManager.TimerManager_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cav1Y: // global
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = R6;
           I64[Hp - 8] = I64[Sp];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.TimerManager_info" {
     GHC.Event.TimerManager.TimerManager_info:
         const GHC.Event.TimerManager.TimerManager_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 7177;
         const GHC.Event.TimerManager.TimerManager_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.254751186 UTC

[section ""data" . GHC.Event.TimerManager.Created_closure" {
     GHC.Event.TimerManager.Created_closure:
         const GHC.Event.TimerManager.Created_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.256427412 UTC

[section ""data" . GHC.Event.TimerManager.Running_closure" {
     GHC.Event.TimerManager.Running_closure:
         const GHC.Event.TimerManager.Running_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.258095813 UTC

[section ""data" . GHC.Event.TimerManager.Dying_closure" {
     GHC.Event.TimerManager.Dying_closure:
         const GHC.Event.TimerManager.Dying_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.259769021 UTC

[section ""data" . GHC.Event.TimerManager.Finished_closure" {
     GHC.Event.TimerManager.Finished_closure:
         const GHC.Event.TimerManager.Finished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.261685234 UTC

[section ""cstring" . iau6B_str" {
     iau6B_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,84,105,109,101,114,77,97,110,97,103,101,114]
 },
 GHC.Event.TimerManager.TimerManager_con_entry() //  [R1]
         { []
         }
     {offset
       cav2f: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.TimerManager_con_info" {
     GHC.Event.TimerManager.TimerManager_con_info:
         const GHC.Event.TimerManager.TimerManager_con_entry;
         const 12884901894;
         const 1;
         const iau6B_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.264774939 UTC

[section ""relreadonly" . GHC.Event.TimerManager.State_closure_tbl" {
     GHC.Event.TimerManager.State_closure_tbl:
         const GHC.Event.TimerManager.Created_closure+1;
         const GHC.Event.TimerManager.Running_closure+2;
         const GHC.Event.TimerManager.Dying_closure+3;
         const GHC.Event.TimerManager.Finished_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.266722135 UTC

[section ""cstring" . iau6D_str" {
     iau6D_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,67,114,101,97,116,101,100]
 },
 GHC.Event.TimerManager.Created_con_entry() //  [R1]
         { []
         }
     {offset
       cav2m: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Created_con_info" {
     GHC.Event.TimerManager.Created_con_info:
         const GHC.Event.TimerManager.Created_con_entry;
         const 4294967296;
         const 3;
         const iau6D_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.270157576 UTC

[section ""cstring" . iau6F_str" {
     iau6F_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,82,117,110,110,105,110,103]
 },
 GHC.Event.TimerManager.Running_con_entry() //  [R1]
         { []
         }
     {offset
       cav2s: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Running_con_info" {
     GHC.Event.TimerManager.Running_con_info:
         const GHC.Event.TimerManager.Running_con_entry;
         const 4294967296;
         const 4294967299;
         const iau6F_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.273265305 UTC

[section ""cstring" . iau6H_str" {
     iau6H_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,68,121,105,110,103]
 },
 GHC.Event.TimerManager.Dying_con_entry() //  [R1]
         { []
         }
     {offset
       cav2y: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Dying_con_info" {
     GHC.Event.TimerManager.Dying_con_info:
         const GHC.Event.TimerManager.Dying_con_entry;
         const 4294967296;
         const 8589934595;
         const iau6H_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.276448069 UTC

[section ""cstring" . iau6J_str" {
     iau6J_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,70,105,110,105,115,104,101,100]
 },
 GHC.Event.TimerManager.Finished_con_entry() //  [R1]
         { []
         }
     {offset
       cav2E: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Finished_con_info" {
     GHC.Event.TimerManager.Finished_con_info:
         const GHC.Event.TimerManager.Finished_con_entry;
         const 4294967296;
         const 12884901891;
         const iau6J_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:28.279676949 UTC

[section ""relreadonly" . SasVk_srt" {
     SasVk_srt:
         const GHC.Event.TimerManager.$w$cshowsPrec_closure;
         const GHC.Event.TimerManager.$fShowState1_closure;
         const GHC.Event.TimerManager.$fShowState3_closure;
         const GHC.Event.TimerManager.$fShowState5_closure;
         const GHC.Event.TimerManager.$fShowState7_closure;
         const GHC.Event.Poll.new1_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.TimerManager.wakeManager1_closure;
         const GHC.Event.TimerManager.$fShowState_$cshow_closure;
         const GHC.Event.TimerManager.$weditTimeouts_closure;
         const GHC.Event.TimerManager.unregisterTimeout2_closure;
         const GHC.Event.TimerManager.unregisterTimeout1_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const GHC.Event.TimerManager.$wregisterTimeout_closure;
         const GHC.Event.TimerManager.registerTimeout1_closure;
         const GHC.Event.TimerManager.updateTimeout1_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.TimerManager.shutdown1_closure;
         const GHC.Event.Internal.evtNothing_closure;
         const GHC.Event.Internal.evtRead_closure;
         const GHC.Event.Control.newControl1_closure;
         const GHC.Event.TimerManager.new2_closure;
         const GHC.Event.TimerManager.new1_closure;
         const GHC.Conc.Signal.runHandlers1_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.TimerManager.step1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl1_rasDW_closure;
         const GHC.Event.TimerManager.$wloop_closure;
         const GHC.Event.TimerManager.loop1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.429068027 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:30.432532571 UTC

[section ""data" . GHC.Event.TimerManager.$WTimerManager_closure" {
     GHC.Event.TimerManager.$WTimerManager_closure:
         const GHC.Event.TimerManager.$WTimerManager_info;
 },
 GHC.Event.TimerManager.$WTimerManager_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cavio: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caviM; else goto caviN;
       caviM: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$WTimerManager_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caviN: // global
           I64[Sp - 40] = block_cavil_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaviW; else goto cavim;
       uaviW: // global
           call _cavil(R1) args: 0, res: 0, upd: 0;
       cavim: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$WTimerManager_info" {
     GHC.Event.TimerManager.$WTimerManager_info:
         const GHC.Event.TimerManager.$WTimerManager_entry;
         const 0;
         const 14;
         const 21474836505;
 },
 _cavil() //  [R1]
         { []
         }
     {offset
       cavil: // global
           I64[Sp] = block_cavir_info;
           _sav2Q::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _sav2Q::P64;
           if (R1 & 7 != 0) goto uaviV; else goto cavis;
       uaviV: // global
           call _cavir(R1) args: 0, res: 0, upd: 0;
       cavis: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavil_info" {
     block_cavil_info:
         const _cavil;
         const 4;
         const 30;
 },
 _cavir() //  [R1]
         { []
         }
     {offset
       cavir: // global
           I64[Sp] = block_caviw_info;
           _sav2S::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _sav2S::P64;
           if (R1 & 7 != 0) goto uaviX; else goto cavix;
       uaviX: // global
           call _caviw(R1) args: 0, res: 0, upd: 0;
       cavix: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavir_info" {
     block_cavir_info:
         const _cavir;
         const 4;
         const 30;
 },
 _caviw() //  [R1]
         { []
         }
     {offset
       caviw: // global
           I64[Sp] = block_caviB_info;
           _sav2U::P64 = P64[R1 + 7];
           R1 = P64[Sp + 24];
           P64[Sp + 24] = _sav2U::P64;
           if (R1 & 7 != 0) goto uaviY; else goto caviC;
       uaviY: // global
           call _caviB(R1) args: 0, res: 0, upd: 0;
       caviC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caviw_info" {
     block_caviw_info:
         const _caviw;
         const 4;
         const 30;
 },
 _caviB() //  [R1]
         { []
         }
     {offset
       caviB: // global
           I64[Sp] = block_caviG_info;
           _sav2W::P64 = P64[R1 + 7];
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _sav2W::P64;
           if (R1 & 7 != 0) goto uaviZ; else goto caviH;
       uaviZ: // global
           call _caviG(R1) args: 0, res: 0, upd: 0;
       caviH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caviB_info" {
     block_caviB_info:
         const _caviB;
         const 4;
         const 30;
 },
 _caviG() //  [R1]
         { []
         }
     {offset
       caviG: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caviU; else goto caviT;
       caviU: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caviT: // global
           _sav31::P64 = P64[R1 + 7];
           _sav32::P64 = P64[R1 + 15];
           _sav2Y::I64 = I64[R1 + 23];
           _sav2Z::I64 = I64[R1 + 31];
           _sav30::I64 = I64[R1 + 39];
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = P64[Sp + 8];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = _sav31::P64;
           P64[Hp - 24] = _sav32::P64;
           I64[Hp - 16] = _sav2Y::I64;
           I64[Hp - 8] = _sav2Z::I64;
           I64[Hp] = _sav30::I64;
           R1 = Hp - 71;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caviG_info" {
     block_caviG_info:
         const _caviG;
         const 4;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.443844925 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState8_bytes" {
     GHC.Event.TimerManager.$fShowState8_bytes:
         I8[] [67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.446137283 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState7_closure" {
     GHC.Event.TimerManager.$fShowState7_closure:
         const GHC.Event.TimerManager.$fShowState7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState7_entry() //  [R1]
         { []
         }
     {offset
       cavjH: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavjI; else goto cavjJ;
       cavjI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavjJ: // global
           (_cavjE::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cavjE::I64 == 0) goto cavjG; else goto cavjF;
       cavjG: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cavjF: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cavjE::I64;
           R2 = GHC.Event.TimerManager.$fShowState8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState7_info" {
     GHC.Event.TimerManager.$fShowState7_info:
         const GHC.Event.TimerManager.$fShowState7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.449767844 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState6_bytes" {
     GHC.Event.TimerManager.$fShowState6_bytes:
         I8[] [82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.451862082 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState5_closure" {
     GHC.Event.TimerManager.$fShowState5_closure:
         const GHC.Event.TimerManager.$fShowState5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState5_entry() //  [R1]
         { []
         }
     {offset
       cavjZ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavk0; else goto cavk1;
       cavk0: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavk1: // global
           (_cavjW::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cavjW::I64 == 0) goto cavjY; else goto cavjX;
       cavjY: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cavjX: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cavjW::I64;
           R2 = GHC.Event.TimerManager.$fShowState6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState5_info" {
     GHC.Event.TimerManager.$fShowState5_info:
         const GHC.Event.TimerManager.$fShowState5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.455486255 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState4_bytes" {
     GHC.Event.TimerManager.$fShowState4_bytes:
         I8[] [68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.457636594 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState3_closure" {
     GHC.Event.TimerManager.$fShowState3_closure:
         const GHC.Event.TimerManager.$fShowState3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState3_entry() //  [R1]
         { []
         }
     {offset
       cavkh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavki; else goto cavkj;
       cavki: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavkj: // global
           (_cavke::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cavke::I64 == 0) goto cavkg; else goto cavkf;
       cavkg: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cavkf: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cavke::I64;
           R2 = GHC.Event.TimerManager.$fShowState4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState3_info" {
     GHC.Event.TimerManager.$fShowState3_info:
         const GHC.Event.TimerManager.$fShowState3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.462907361 UTC

[section ""cstring" . GHC.Event.TimerManager.$fShowState2_bytes" {
     GHC.Event.TimerManager.$fShowState2_bytes:
         I8[] [70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.465033903 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState1_closure" {
     GHC.Event.TimerManager.$fShowState1_closure:
         const GHC.Event.TimerManager.$fShowState1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState1_entry() //  [R1]
         { []
         }
     {offset
       cavkz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavkA; else goto cavkB;
       cavkA: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavkB: // global
           (_cavkw::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_cavkw::I64 == 0) goto cavky; else goto cavkx;
       cavky: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       cavkx: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _cavkw::I64;
           R2 = GHC.Event.TimerManager.$fShowState2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState1_info" {
     GHC.Event.TimerManager.$fShowState1_info:
         const GHC.Event.TimerManager.$fShowState1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.470036724 UTC

[section ""data" . GHC.Event.TimerManager.$w$cshowsPrec_closure" {
     GHC.Event.TimerManager.$w$cshowsPrec_closure:
         const GHC.Event.TimerManager.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Event.TimerManager.$w$cshowsPrec_entry() //  [R2, R3]
         { []
         }
     {offset
       cavkX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavkY; else goto cavkZ;
       cavkY: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$w$cshowsPrec_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cavkZ: // global
           I64[Sp - 16] = block_cavkO_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uavle; else goto cavkP;
       uavle: // global
           call _cavkO(R1) args: 0, res: 0, upd: 0;
       cavkP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$w$cshowsPrec_info" {
     GHC.Event.TimerManager.$w$cshowsPrec_info:
         const GHC.Event.TimerManager.$w$cshowsPrec_entry;
         const 0;
         const 133143986190;
         const 8589934607;
         const Savlf_srt;
 },
 _cavkO() //  [R1]
         { []
         }
     {offset
       cavkO: // global
           _sav34::P64 = P64[Sp + 8];
           _cavkW::P64 = R1 & 7;
           if (_cavkW::P64 < 3) goto uavlc; else goto uavld;
       uavlc: // global
           if (_cavkW::P64 < 2) goto cavkS; else goto cavkT;
       cavkS: // global
           R3 = _sav34::P64;
           R2 = GHC.Event.TimerManager.$fShowState7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cavkT: // global
           R3 = _sav34::P64;
           R2 = GHC.Event.TimerManager.$fShowState5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       uavld: // global
           if (_cavkW::P64 < 4) goto cavkU; else goto cavkV;
       cavkU: // global
           R3 = _sav34::P64;
           R2 = GHC.Event.TimerManager.$fShowState3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       cavkV: // global
           R3 = _sav34::P64;
           R2 = GHC.Event.TimerManager.$fShowState1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavkO_info" {
     block_cavkO_info:
         const _cavkO;
         const 1;
         const 64424509470;
         const Savlf_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.475533255 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_$cshowsPrec_closure" {
     GHC.Event.TimerManager.$fShowState_$cshowsPrec_closure:
         const GHC.Event.TimerManager.$fShowState_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       cavlv: // global
           _sav37::P64 = R3;
           R3 = R4;
           R2 = _sav37::P64;
           call GHC.Event.TimerManager.$w$cshowsPrec_entry(R3,
                                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState_$cshowsPrec_info" {
     GHC.Event.TimerManager.$fShowState_$cshowsPrec_info:
         const GHC.Event.TimerManager.$fShowState_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const Savlf_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.480908909 UTC

[section ""data" . GHC.Event.TimerManager.$fEqState_$c==_closure" {
     GHC.Event.TimerManager.$fEqState_$c==_closure:
         const GHC.Event.TimerManager.$fEqState_$c==_info;
 },
 GHC.Event.TimerManager.$fEqState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       cavlP: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavlQ; else goto cavlR;
       cavlQ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$fEqState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cavlR: // global
           I64[Sp - 16] = block_cavlG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uavn8; else goto cavlH;
       uavn8: // global
           call _cavlG(R1) args: 0, res: 0, upd: 0;
       cavlH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fEqState_$c==_info" {
     GHC.Event.TimerManager.$fEqState_$c==_info:
         const GHC.Event.TimerManager.$fEqState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cavlG() //  [R1]
         { []
         }
     {offset
       cavlG: // global
           _sav3a::P64 = P64[Sp + 8];
           _cavlO::P64 = R1 & 7;
           if (_cavlO::P64 < 3) goto uavmU; else goto uavmV;
       uavmU: // global
           if (_cavlO::P64 < 2) goto cavlK; else goto cavlL;
       cavlK: // global
           I64[Sp + 8] = block_cavlU_info;
           R1 = _sav3a::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavn4; else goto cavlW;
       uavn4: // global
           call _cavlU(R1) args: 0, res: 0, upd: 0;
       cavlW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cavlL: // global
           I64[Sp + 8] = block_cavm9_info;
           R1 = _sav3a::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavn5; else goto cavmb;
       uavn5: // global
           call _cavm9(R1) args: 0, res: 0, upd: 0;
       cavmb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uavmV: // global
           if (_cavlO::P64 < 4) goto cavlM; else goto cavlN;
       cavlM: // global
           I64[Sp + 8] = block_cavmo_info;
           R1 = _sav3a::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavn6; else goto cavmq;
       uavn6: // global
           call _cavmo(R1) args: 0, res: 0, upd: 0;
       cavmq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cavlN: // global
           I64[Sp + 8] = block_cavmD_info;
           R1 = _sav3a::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavn7; else goto cavmF;
       uavn7: // global
           call _cavmD(R1) args: 0, res: 0, upd: 0;
       cavmF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavlG_info" {
     block_cavlG_info:
         const _cavlG;
         const 1;
         const 30;
 },
 _cavlU() //  [R1]
         { []
         }
     {offset
       cavlU: // global
           if (R1 & 7 == 1) goto uavmW; else goto uavmX;
       uavmW: // global
           Sp = Sp + 8;
           call _cavmP() args: 0, res: 0, upd: 0;
       uavmX: // global
           Sp = Sp + 8;
           call _cavmL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavlU_info" {
     block_cavlU_info:
         const _cavlU;
         const 0;
         const 30;
 },
 _cavm9() //  [R1]
         { []
         }
     {offset
       cavm9: // global
           if (R1 & 7 == 2) goto uavmY; else goto uavmZ;
       uavmY: // global
           Sp = Sp + 8;
           call _cavmP() args: 0, res: 0, upd: 0;
       uavmZ: // global
           Sp = Sp + 8;
           call _cavmL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavm9_info" {
     block_cavm9_info:
         const _cavm9;
         const 0;
         const 30;
 },
 _cavmo() //  [R1]
         { []
         }
     {offset
       cavmo: // global
           if (R1 & 7 == 3) goto uavn0; else goto uavn1;
       uavn0: // global
           Sp = Sp + 8;
           call _cavmP() args: 0, res: 0, upd: 0;
       uavn1: // global
           Sp = Sp + 8;
           call _cavmL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavmo_info" {
     block_cavmo_info:
         const _cavmo;
         const 0;
         const 30;
 },
 _cavmD() //  [R1]
         { []
         }
     {offset
       cavmD: // global
           if (R1 & 7 == 4) goto uavn2; else goto uavn3;
       uavn2: // global
           Sp = Sp + 8;
           call _cavmP() args: 0, res: 0, upd: 0;
       uavn3: // global
           Sp = Sp + 8;
           call _cavmL() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavmD_info" {
     block_cavmD_info:
         const _cavmD;
         const 0;
         const 30;
 },
 _cavmP() //  []
         { []
         }
     {offset
       cavmP: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cavmL() //  []
         { []
         }
     {offset
       cavmL: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.493896528 UTC

[section ""data" . GHC.Event.TimerManager.$fEqTimeoutKey_closure" {
     GHC.Event.TimerManager.$fEqTimeoutKey_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Classes.eqInt_closure+2;
         const GHC.Classes.neInt_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.496571566 UTC

[section ""data" . GHC.Event.TimerManager.emControl_closure" {
     GHC.Event.TimerManager.emControl_closure:
         const GHC.Event.TimerManager.emControl_info;
 },
 GHC.Event.TimerManager.emControl_entry() //  [R2]
         { []
         }
     {offset
       cavoa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavoe; else goto cavof;
       cavoe: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavof: // global
           I64[Sp - 8] = block_cavo7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavoj; else goto cavo8;
       uavoj: // global
           call _cavo7(R1) args: 0, res: 0, upd: 0;
       cavo8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emControl_info" {
     GHC.Event.TimerManager.emControl_info:
         const GHC.Event.TimerManager.emControl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cavo7() //  [R1]
         { []
         }
     {offset
       cavo7: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cavoi; else goto cavoh;
       cavoi: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavoh: // global
           _sav3p::P64 = P64[R1 + 39];
           _sav3q::P64 = P64[R1 + 47];
           _sav3m::I64 = I64[R1 + 55];
           _sav3n::I64 = I64[R1 + 63];
           _sav3o::I64 = I64[R1 + 71];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = _sav3p::P64;
           P64[Hp - 24] = _sav3q::P64;
           I64[Hp - 16] = _sav3m::I64;
           I64[Hp - 8] = _sav3n::I64;
           I64[Hp] = _sav3o::I64;
           R1 = Hp - 39;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavo7_info" {
     block_cavo7_info:
         const _cavo7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.502931297 UTC

[section ""data" . GHC.Event.TimerManager.emUniqueSource_closure" {
     GHC.Event.TimerManager.emUniqueSource_closure:
         const GHC.Event.TimerManager.emUniqueSource_info;
 },
 GHC.Event.TimerManager.emUniqueSource_entry() //  [R2]
         { []
         }
     {offset
       cavoD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavoH; else goto cavoI;
       cavoH: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emUniqueSource_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavoI: // global
           I64[Sp - 8] = block_cavoA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavoM; else goto cavoB;
       uavoM: // global
           call _cavoA(R1) args: 0, res: 0, upd: 0;
       cavoB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emUniqueSource_info" {
     GHC.Event.TimerManager.emUniqueSource_info:
         const GHC.Event.TimerManager.emUniqueSource_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cavoA() //  [R1]
         { []
         }
     {offset
       cavoA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cavoL; else goto cavoK;
       cavoL: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavoK: // global
           _sav3w::P64 = P64[R1 + 31];
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = _sav3w::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavoA_info" {
     block_cavoA_info:
         const _cavoA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.508890693 UTC

[section ""data" . GHC.Event.TimerManager.emState_closure" {
     GHC.Event.TimerManager.emState_closure:
         const GHC.Event.TimerManager.emState_info;
 },
 GHC.Event.TimerManager.emState_entry() //  [R2]
         { []
         }
     {offset
       cavp6: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavpa; else goto cavpb;
       cavpa: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavpb: // global
           I64[Sp - 8] = block_cavp3_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavpf; else goto cavp4;
       uavpf: // global
           call _cavp3(R1) args: 0, res: 0, upd: 0;
       cavp4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emState_info" {
     GHC.Event.TimerManager.emState_info:
         const GHC.Event.TimerManager.emState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cavp3() //  [R1]
         { []
         }
     {offset
       cavp3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cavpe; else goto cavpd;
       cavpe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavpd: // global
           _sav3G::P64 = P64[R1 + 23];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _sav3G::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavp3_info" {
     block_cavp3_info:
         const _cavp3;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.514498645 UTC

[section ""data" . GHC.Event.TimerManager.emTimeouts_closure" {
     GHC.Event.TimerManager.emTimeouts_closure:
         const GHC.Event.TimerManager.emTimeouts_info;
 },
 GHC.Event.TimerManager.emTimeouts_entry() //  [R2]
         { []
         }
     {offset
       cavpz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavpD; else goto cavpE;
       cavpD: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emTimeouts_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavpE: // global
           I64[Sp - 8] = block_cavpw_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavpI; else goto cavpx;
       uavpI: // global
           call _cavpw(R1) args: 0, res: 0, upd: 0;
       cavpx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emTimeouts_info" {
     GHC.Event.TimerManager.emTimeouts_info:
         const GHC.Event.TimerManager.emTimeouts_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cavpw() //  [R1]
         { []
         }
     {offset
       cavpw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cavpH; else goto cavpG;
       cavpH: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavpG: // global
           _sav3Q::P64 = P64[R1 + 15];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _sav3Q::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavpw_info" {
     block_cavpw_info:
         const _cavpw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.520234391 UTC

[section ""data" . GHC.Event.TimerManager.emBackend_closure" {
     GHC.Event.TimerManager.emBackend_closure:
         const GHC.Event.TimerManager.emBackend_info;
 },
 GHC.Event.TimerManager.emBackend_entry() //  [R2]
         { []
         }
     {offset
       cavq2: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavq3; else goto cavq4;
       cavq3: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.emBackend_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavq4: // global
           I64[Sp - 8] = block_cavpZ_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavq8; else goto cavq0;
       uavq8: // global
           call _cavpZ(R1) args: 0, res: 0, upd: 0;
       cavq0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.emBackend_info" {
     GHC.Event.TimerManager.emBackend_info:
         const GHC.Event.TimerManager.emBackend_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _cavpZ() //  [R1]
         { []
         }
     {offset
       cavpZ: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavpZ_info" {
     block_cavpZ_info:
         const _cavpZ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.525119003 UTC

[section ""data" . GHC.Event.TimerManager.newDefaultBackend_closure" {
     GHC.Event.TimerManager.newDefaultBackend_closure:
         const GHC.Event.TimerManager.newDefaultBackend_info;
         const 0;
 },
 GHC.Event.TimerManager.newDefaultBackend_entry() //  []
         { []
         }
     {offset
       cavqp: // global
           call GHC.Event.Poll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.newDefaultBackend_info" {
     GHC.Event.TimerManager.newDefaultBackend_info:
         const GHC.Event.TimerManager.newDefaultBackend_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Savlf_srt+40;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.528780869 UTC

[section ""data" . GHC.Event.TimerManager.wakeManager1_closure" {
     GHC.Event.TimerManager.wakeManager1_closure:
         const GHC.Event.TimerManager.wakeManager1_info;
         const 0;
 },
 GHC.Event.TimerManager.wakeManager1_entry() //  [R2]
         { []
         }
     {offset
       cavqD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavqE; else goto cavqF;
       cavqE: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.wakeManager1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavqF: // global
           I64[Sp - 8] = block_cavqA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavqJ; else goto cavqB;
       uavqJ: // global
           call _cavqA(R1) args: 0, res: 0, upd: 0;
       cavqB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.wakeManager1_info" {
     GHC.Event.TimerManager.wakeManager1_info:
         const GHC.Event.TimerManager.wakeManager1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Savlf_srt+48;
 },
 _cavqA() //  [R1]
         { []
         }
     {offset
       cavqA: // global
           R3 = P64[R1 + 47];
           R2 = I64[R1 + 71];
           Sp = Sp + 8;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavqA_info" {
     block_cavqA_info:
         const _cavqA;
         const 0;
         const 4294967326;
         const Savlf_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.534826718 UTC

[section ""data" . GHC.Event.TimerManager.wakeManager_closure" {
     GHC.Event.TimerManager.wakeManager_closure:
         const GHC.Event.TimerManager.wakeManager_info;
         const 0;
 },
 GHC.Event.TimerManager.wakeManager_entry() //  [R2]
         { []
         }
     {offset
       cavqY: // global
           R2 = R2;
           call GHC.Event.TimerManager.wakeManager1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.wakeManager_info" {
     GHC.Event.TimerManager.wakeManager_info:
         const GHC.Event.TimerManager.wakeManager_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Savlf_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.537845288 UTC

[section ""cstring" . GHC.Event.TimerManager.$trModule4_bytes" {
     GHC.Event.TimerManager.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.53943405 UTC

[section ""data" . GHC.Event.TimerManager.$trModule3_closure" {
     GHC.Event.TimerManager.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.541113188 UTC

[section ""cstring" . GHC.Event.TimerManager.$trModule2_bytes" {
     GHC.Event.TimerManager.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.542826225 UTC

[section ""data" . GHC.Event.TimerManager.$trModule1_closure" {
     GHC.Event.TimerManager.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.544479686 UTC

[section ""data" . GHC.Event.TimerManager.$trModule_closure" {
     GHC.Event.TimerManager.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.TimerManager.$trModule3_closure+1;
         const GHC.Event.TimerManager.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.546607849 UTC

[section ""data" . $krep_rasDC_closure" {
     $krep_rasDC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.548354812 UTC

[section ""data" . $krep1_rasDD_closure" {
     $krep1_rasDD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.550100861 UTC

[section ""data" . $krep2_rasDE_closure" {
     $krep2_rasDE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.551864602 UTC

[section ""data" . $krep3_rasDF_closure" {
     $krep3_rasDF_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.553578583 UTC

[section ""data" . $krep4_rasDG_closure" {
     $krep4_rasDG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcBackend_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.555285143 UTC

[section ""data" . $krep5_rasDH_closure" {
     $krep5_rasDH_closure:
         const :_con_info;
         const $krep3_rasDF_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.556976761 UTC

[section ""data" . $krep6_rasDI_closure" {
     $krep6_rasDI_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep5_rasDH_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.559791087 UTC

[section ""data" . $krep7_rasDJ_closure" {
     $krep7_rasDJ_closure:
         const :_con_info;
         const $krep6_rasDI_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.561480603 UTC

[section ""data" . $krep8_rasDK_closure" {
     $krep8_rasDK_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.PSQ.$tcIntPSQ_closure;
         const $krep7_rasDJ_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.563183444 UTC

[section ""data" . $krep9_rasDL_closure" {
     $krep9_rasDL_closure:
         const :_con_info;
         const $krep8_rasDK_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.564860336 UTC

[section ""data" . $krep10_rasDM_closure" {
     $krep10_rasDM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep9_rasDL_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.566472479 UTC

[section ""cstring" . GHC.Event.TimerManager.$tcTimeoutKey2_bytes" {
     GHC.Event.TimerManager.$tcTimeoutKey2_bytes:
         I8[] [84,105,109,101,111,117,116,75,101,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.568097911 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimeoutKey1_closure" {
     GHC.Event.TimerManager.$tcTimeoutKey1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tcTimeoutKey2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.57033262 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimeoutKey_closure" {
     GHC.Event.TimerManager.$tcTimeoutKey_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tcTimeoutKey1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11465769786694886755;
         const 8841886228133799087;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.572018156 UTC

[section ""data" . $krep11_rasDN_closure" {
     $krep11_rasDN_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.TimerManager.$tcTimeoutKey_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.573713106 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TK1_closure" {
     GHC.Event.TimerManager.$tc'TK1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_rasDC_closure+1;
         const $krep11_rasDN_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.575421226 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'TK3_bytes" {
     GHC.Event.TimerManager.$tc'TK3_bytes:
         I8[] [39,84,75]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.57713571 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TK2_closure" {
     GHC.Event.TimerManager.$tc'TK2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'TK3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.578875079 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TK_closure" {
     GHC.Event.TimerManager.$tc'TK_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'TK2_closure+1;
         const GHC.Event.TimerManager.$tc'TK1_closure+4;
         const 4362213157428095811;
         const 13641506162182658721;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.580668778 UTC

[section ""cstring" . GHC.Event.TimerManager.$tcState2_bytes" {
     GHC.Event.TimerManager.$tcState2_bytes:
         I8[] [83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.582761417 UTC

[section ""data" . GHC.Event.TimerManager.$tcState1_closure" {
     GHC.Event.TimerManager.$tcState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tcState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.584943468 UTC

[section ""data" . GHC.Event.TimerManager.$tcState_closure" {
     GHC.Event.TimerManager.$tcState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tcState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 10067362680685980057;
         const 6560547589611231606;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.58676703 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Created1_closure" {
     GHC.Event.TimerManager.$tc'Created1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.TimerManager.$tcState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.588403998 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Created3_bytes" {
     GHC.Event.TimerManager.$tc'Created3_bytes:
         I8[] [39,67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.589988188 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Created2_closure" {
     GHC.Event.TimerManager.$tc'Created2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Created3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.591649947 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Created_closure" {
     GHC.Event.TimerManager.$tc'Created_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Created2_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 7473777249114724674;
         const 2904627795268885228;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.59391985 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Running2_bytes" {
     GHC.Event.TimerManager.$tc'Running2_bytes:
         I8[] [39,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.595578628 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Running1_closure" {
     GHC.Event.TimerManager.$tc'Running1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Running2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.597280889 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Running_closure" {
     GHC.Event.TimerManager.$tc'Running_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Running1_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 15425377252641674582;
         const 12404533232809671740;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.599057373 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Dying2_bytes" {
     GHC.Event.TimerManager.$tc'Dying2_bytes:
         I8[] [39,68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.600635934 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Dying1_closure" {
     GHC.Event.TimerManager.$tc'Dying1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Dying2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.602373356 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Dying_closure" {
     GHC.Event.TimerManager.$tc'Dying_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Dying1_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 13405772281963838681;
         const 437803396301020926;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.604091467 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'Finished2_bytes" {
     GHC.Event.TimerManager.$tc'Finished2_bytes:
         I8[] [39,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.605742969 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Finished1_closure" {
     GHC.Event.TimerManager.$tc'Finished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'Finished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.607483416 UTC

[section ""data" . GHC.Event.TimerManager.$tc'Finished_closure" {
     GHC.Event.TimerManager.$tc'Finished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'Finished1_closure+1;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const 1288208730452846229;
         const 15347214930365004647;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.609217485 UTC

[section ""data" . $krep12_rasDO_closure" {
     $krep12_rasDO_closure:
         const :_con_info;
         const GHC.Event.TimerManager.$tc'Created1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.611911752 UTC

[section ""data" . $krep13_rasDP_closure" {
     $krep13_rasDP_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep12_rasDO_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.613594899 UTC

[section ""cstring" . GHC.Event.TimerManager.$tcTimerManager2_bytes" {
     GHC.Event.TimerManager.$tcTimerManager2_bytes:
         I8[] [84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.615251614 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimerManager1_closure" {
     GHC.Event.TimerManager.$tcTimerManager1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tcTimerManager2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.617005226 UTC

[section ""data" . GHC.Event.TimerManager.$tcTimerManager_closure" {
     GHC.Event.TimerManager.$tcTimerManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tcTimerManager1_closure+1;
         const GHC.Types.krep$*_closure;
         const 3987042711794726631;
         const 6993782799294290901;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.618785212 UTC

[section ""data" . $krep14_rasDQ_closure" {
     $krep14_rasDQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.TimerManager.$tcTimerManager_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.620488718 UTC

[section ""data" . $krep15_rasDR_closure" {
     $krep15_rasDR_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_rasDD_closure+1;
         const $krep14_rasDQ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.622897672 UTC

[section ""data" . $krep16_rasDS_closure" {
     $krep16_rasDS_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_rasDE_closure+1;
         const $krep15_rasDR_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.62458171 UTC

[section ""data" . $krep17_rasDT_closure" {
     $krep17_rasDT_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_rasDP_closure+1;
         const $krep16_rasDS_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.626309022 UTC

[section ""data" . $krep18_rasDU_closure" {
     $krep18_rasDU_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep10_rasDM_closure+1;
         const $krep17_rasDT_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.627994101 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TimerManager1_closure" {
     GHC.Event.TimerManager.$tc'TimerManager1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep4_rasDG_closure+1;
         const $krep18_rasDU_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.629713643 UTC

[section ""cstring" . GHC.Event.TimerManager.$tc'TimerManager3_bytes" {
     GHC.Event.TimerManager.$tc'TimerManager3_bytes:
         I8[] [39,84,105,109,101,114,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.631373795 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TimerManager2_closure" {
     GHC.Event.TimerManager.$tc'TimerManager2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.TimerManager.$tc'TimerManager3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.63314796 UTC

[section ""data" . GHC.Event.TimerManager.$tc'TimerManager_closure" {
     GHC.Event.TimerManager.$tc'TimerManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.TimerManager.$trModule_closure+1;
         const GHC.Event.TimerManager.$tc'TimerManager2_closure+1;
         const GHC.Event.TimerManager.$tc'TimerManager1_closure+4;
         const 451007785877958328;
         const 8145550165147362681;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.636571219 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_$cshow_closure" {
     GHC.Event.TimerManager.$fShowState_$cshow_closure:
         const GHC.Event.TimerManager.$fShowState_$cshow_info;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState_$cshow_entry() //  [R2]
         { []
         }
     {offset
       cavsa: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavsb; else goto cavsc;
       cavsb: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.$fShowState_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavsc: // global
           I64[Sp - 8] = block_cavs1_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavsr; else goto cavs2;
       uavsr: // global
           call _cavs1(R1) args: 0, res: 0, upd: 0;
       cavs2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState_$cshow_info" {
     GHC.Event.TimerManager.$fShowState_$cshow_info:
         const GHC.Event.TimerManager.$fShowState_$cshow_entry;
         const 0;
         const 614180323342;
         const 4294967301;
         const Savlf_srt+8;
 },
 _cavs1() //  [R1]
         { []
         }
     {offset
       cavs1: // global
           _cavs9::P64 = R1 & 7;
           if (_cavs9::P64 < 3) goto uavsp; else goto uavsq;
       uavsp: // global
           if (_cavs9::P64 < 2) goto cavs5; else goto cavs6;
       cavs5: // global
           R1 = GHC.Event.TimerManager.$fShowState7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cavs6: // global
           R1 = GHC.Event.TimerManager.$fShowState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       uavsq: // global
           if (_cavs9::P64 < 4) goto cavs7; else goto cavs8;
       cavs7: // global
           R1 = GHC.Event.TimerManager.$fShowState3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       cavs8: // global
           R1 = GHC.Event.TimerManager.$fShowState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavs1_info" {
     block_cavs1_info:
         const _cavs1;
         const 0;
         const 64424509470;
         const Savlf_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.64261371 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_$cshowList_closure" {
     GHC.Event.TimerManager.$fShowState_$cshowList_closure:
         const GHC.Event.TimerManager.$fShowState_$cshowList_info;
         const 0;
 },
 GHC.Event.TimerManager.$fShowState_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       cavsL: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.TimerManager.$w$cshowsPrec_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fShowState_$cshowList_info" {
     GHC.Event.TimerManager.$fShowState_$cshowList_info:
         const GHC.Event.TimerManager.$fShowState_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const Savlf_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.64581265 UTC

[section ""data" . GHC.Event.TimerManager.$fShowState_closure" {
     GHC.Event.TimerManager.$fShowState_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.TimerManager.$fShowState_$cshowsPrec_closure+3;
         const GHC.Event.TimerManager.$fShowState_$cshow_closure+1;
         const GHC.Event.TimerManager.$fShowState_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.650392726 UTC

[section ""data" . GHC.Event.TimerManager.$fEqState_$c/=_closure" {
     GHC.Event.TimerManager.$fEqState_$c/=_closure:
         const GHC.Event.TimerManager.$fEqState_$c/=_info;
 },
 GHC.Event.TimerManager.$fEqState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       cavt6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavt7; else goto cavt8;
       cavt7: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.$fEqState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cavt8: // global
           I64[Sp - 16] = block_cavsX_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uavup; else goto cavsY;
       uavup: // global
           call _cavsX(R1) args: 0, res: 0, upd: 0;
       cavsY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$fEqState_$c/=_info" {
     GHC.Event.TimerManager.$fEqState_$c/=_info:
         const GHC.Event.TimerManager.$fEqState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _cavsX() //  [R1]
         { []
         }
     {offset
       cavsX: // global
           _sav4q::P64 = P64[Sp + 8];
           _cavt5::P64 = R1 & 7;
           if (_cavt5::P64 < 3) goto uavub; else goto uavuc;
       uavub: // global
           if (_cavt5::P64 < 2) goto cavt1; else goto cavt2;
       cavt1: // global
           I64[Sp + 8] = block_cavtb_info;
           R1 = _sav4q::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavul; else goto cavtd;
       uavul: // global
           call _cavtb(R1) args: 0, res: 0, upd: 0;
       cavtd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cavt2: // global
           I64[Sp + 8] = block_cavtq_info;
           R1 = _sav4q::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavum; else goto cavts;
       uavum: // global
           call _cavtq(R1) args: 0, res: 0, upd: 0;
       cavts: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uavuc: // global
           if (_cavt5::P64 < 4) goto cavt3; else goto cavt4;
       cavt3: // global
           I64[Sp + 8] = block_cavtF_info;
           R1 = _sav4q::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavun; else goto cavtH;
       uavun: // global
           call _cavtF(R1) args: 0, res: 0, upd: 0;
       cavtH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cavt4: // global
           I64[Sp + 8] = block_cavtU_info;
           R1 = _sav4q::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavuo; else goto cavtW;
       uavuo: // global
           call _cavtU(R1) args: 0, res: 0, upd: 0;
       cavtW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavsX_info" {
     block_cavsX_info:
         const _cavsX;
         const 1;
         const 30;
 },
 _cavtb() //  [R1]
         { []
         }
     {offset
       cavtb: // global
           if (R1 & 7 == 1) goto uavud; else goto uavue;
       uavud: // global
           Sp = Sp + 8;
           call _cavu6() args: 0, res: 0, upd: 0;
       uavue: // global
           Sp = Sp + 8;
           call _cavu2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavtb_info" {
     block_cavtb_info:
         const _cavtb;
         const 0;
         const 30;
 },
 _cavtq() //  [R1]
         { []
         }
     {offset
       cavtq: // global
           if (R1 & 7 == 2) goto uavuf; else goto uavug;
       uavuf: // global
           Sp = Sp + 8;
           call _cavu6() args: 0, res: 0, upd: 0;
       uavug: // global
           Sp = Sp + 8;
           call _cavu2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavtq_info" {
     block_cavtq_info:
         const _cavtq;
         const 0;
         const 30;
 },
 _cavtF() //  [R1]
         { []
         }
     {offset
       cavtF: // global
           if (R1 & 7 == 3) goto uavuh; else goto uavui;
       uavuh: // global
           Sp = Sp + 8;
           call _cavu6() args: 0, res: 0, upd: 0;
       uavui: // global
           Sp = Sp + 8;
           call _cavu2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavtF_info" {
     block_cavtF_info:
         const _cavtF;
         const 0;
         const 30;
 },
 _cavtU() //  [R1]
         { []
         }
     {offset
       cavtU: // global
           if (R1 & 7 == 4) goto uavuj; else goto uavuk;
       uavuj: // global
           Sp = Sp + 8;
           call _cavu6() args: 0, res: 0, upd: 0;
       uavuk: // global
           Sp = Sp + 8;
           call _cavu2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavtU_info" {
     block_cavtU_info:
         const _cavtU;
         const 0;
         const 30;
 },
 _cavu6() //  []
         { []
         }
     {offset
       cavu6: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cavu2() //  []
         { []
         }
     {offset
       cavu2: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.663503154 UTC

[section ""data" . GHC.Event.TimerManager.$fEqState_closure" {
     GHC.Event.TimerManager.$fEqState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.TimerManager.$fEqState_$c==_closure+2;
         const GHC.Event.TimerManager.$fEqState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.670125989 UTC

[section ""data" . GHC.Event.TimerManager.$weditTimeouts_closure" {
     GHC.Event.TimerManager.$weditTimeouts_closure:
         const GHC.Event.TimerManager.$weditTimeouts_info;
         const 0;
 },
 GHC.Event.TimerManager.$weditTimeouts_slow() //  [R1]
         { []
         }
     {offset
       cavvl: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$weditTimeouts_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2,
                                                            R1) args: 16, res: 0, upd: 8;
     }
 },
 sat_sav5d_entry() //  [R1]
         { []
         }
     {offset
       cavvK: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavvL; else goto cavvM;
       cavvL: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavvM: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cavvC_info;
           _sav4E::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sav4E::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavwH; else goto cavvD;
       uavwH: // global
           call _cavvC(R1) args: 0, res: 0, upd: 0;
       cavvD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sav5d_info" {
     sat_sav5d_info:
         const sat_sav5d_entry;
         const 2;
         const 18;
 },
 _cavvC() //  [R1]
         { []
         }
     {offset
       cavvC: // global
           _cavvJ::P64 = R1 & 7;
           if (_cavvJ::P64 < 3) goto uavwy; else goto uavwB;
       uavwy: // global
           _sav4E::P64 = P64[Sp + 8];
           if (_cavvJ::P64 < 2) goto cavvG; else goto cavvH;
       cavvG: // global
           I64[Sp] = block_cavvP_info;
           _sav4H::I64 = I64[R1 + 39];
           R1 = _sav4E::P64;
           I64[Sp + 8] = _sav4H::I64;
           if (R1 & 7 != 0) goto uavwE; else goto cavvR;
       uavwE: // global
           call _cavvP(R1) args: 0, res: 0, upd: 0;
       cavvR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cavvH: // global
           I64[Sp] = block_cavw8_info;
           _sav4Z::I64 = I64[R1 + 22];
           R1 = _sav4E::P64;
           I64[Sp + 8] = _sav4Z::I64;
           if (R1 & 7 != 0) goto uavwF; else goto cavwa;
       uavwF: // global
           call _cavw8(R1) args: 0, res: 0, upd: 0;
       cavwa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uavwB: // global
           Sp = Sp + 16;
           call _cavvI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavvC_info" {
     block_cavvC_info:
         const _cavvC;
         const 1;
         const 30;
 },
 _cavvP() //  [R1]
         { []
         }
     {offset
       cavvP: // global
           _cavwv::P64 = R1 & 7;
           if (_cavwv::P64 < 3) goto uavwz; else goto uavwC;
       uavwz: // global
           _sav4H::I64 = I64[Sp + 8];
           if (_cavwv::P64 < 2) goto cavvX; else goto cavw1;
       cavvX: // global
           R1 = I64[((_sav4H::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavw1: // global
           R1 = I64[((_sav4H::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavwC: // global
           Sp = Sp + 16;
           call _cavvI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavvP_info" {
     block_cavvP_info:
         const _cavvP;
         const 65;
         const 30;
 },
 _cavw8() //  [R1]
         { []
         }
     {offset
       cavw8: // global
           _cavws::P64 = R1 & 7;
           if (_cavws::P64 < 3) goto uavwA; else goto uavwD;
       uavwA: // global
           _sav4Z::I64 = I64[Sp + 8];
           if (_cavws::P64 < 2) goto cavwg; else goto cavwk;
       cavwg: // global
           R1 = I64[((_sav4Z::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavwk: // global
           R1 = I64[((_sav4Z::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavwD: // global
           Sp = Sp + 16;
           call _cavvI() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavw8_info" {
     block_cavw8_info:
         const _cavw8;
         const 65;
         const 30;
 },
 _cavvI() //  []
         { []
         }
     {offset
       cavvI: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sav5e_entry() //  [R1, R2]
         { []
         }
     {offset
       cavwK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavwM; else goto cavwN;
       cavwM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavwN: // global
           I64[Sp - 16] = block_cavvu_info;
           _sav4D::P64 = R2;
           R2 = R2;
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _sav4D::P64;
           Sp = Sp - 16;
           call stg_ap_p_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sav5e_info" {
     sat_sav5e_info:
         const sat_sav5e_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cavvu() //  [R1]
         { []
         }
     {offset
       cavvu: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cavwQ; else goto cavwP;
       cavwQ: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavwP: // global
           I64[Hp - 48] = sat_sav5d_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavvu_info" {
     block_cavvu_info:
         const _cavvu;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.$weditTimeouts_entry() //  [R2, R3, R4, R5,
                                                    R6]
         { []
         }
     {offset
       cavx0: // global
           _sav4A::P64 = R6;
           _sav4z::I64 = R5;
           _sav4y::P64 = R4;
           _sav4x::P64 = R3;
           _sav4w::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cavx1; else goto cavx2;
       cavx2: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cavx4; else goto cavx3;
       cavx4: // global
           HpAlloc = 16;
           goto cavx1;
       cavx1: // global
           R1 = GHC.Event.TimerManager.$weditTimeouts_closure;
           P64[Sp - 40] = _sav4w::P64;
           P64[Sp - 32] = _sav4x::P64;
           P64[Sp - 24] = _sav4y::P64;
           I64[Sp - 16] = _sav4z::I64;
           P64[Sp - 8] = _sav4A::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 56, res: 0, upd: 8;
       cavx3: // global
           I64[Hp - 8] = sat_sav5e_info;
           P64[Hp] = P64[Sp];
           I64[Sp - 16] = block_cavwR_info;
           R2 = Hp - 7;
           R1 = _sav4w::P64;
           P64[Sp - 8] = _sav4A::P64;
           I64[Sp] = _sav4z::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$weditTimeouts_info" {
     GHC.Event.TimerManager.$weditTimeouts_info:
         const GHC.Event.TimerManager.$weditTimeouts_entry;
         const 0;
         const 38654705678;
         const 30064771072;
         const Savlf_srt+48;
         const 518;
         const GHC.Event.TimerManager.$weditTimeouts_slow;
 },
 _cavwR() //  [R1]
         { []
         }
     {offset
       cavwR: // global
           I64[Sp] = block_cavwT_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uavxc; else goto cavwU;
       uavxc: // global
           call _cavwT(R1) args: 0, res: 0, upd: 0;
       cavwU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavwR_info" {
     block_cavwR_info:
         const _cavwR;
         const 130;
         const 4294967326;
         const Savlf_srt+48;
 },
 _cavwT() //  [R1]
         { []
         }
     {offset
       cavwT: // global
           if (R1 & 7 == 1) goto cavwX; else goto cavwY;
       cavwX: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cavwY: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavwT_info" {
     block_cavwT_info:
         const _cavwT;
         const 130;
         const 4294967326;
         const Savlf_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.690460695 UTC

[section ""data" . GHC.Event.TimerManager.unregisterTimeout2_closure" {
     GHC.Event.TimerManager.unregisterTimeout2_closure:
         const GHC.Event.TimerManager.unregisterTimeout2_info;
         const 0;
 },
 GHC.Event.TimerManager.unregisterTimeout2_entry() //  [R2, R3]
         { []
         }
     {offset
       cavyA: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavyB; else goto cavyC;
       cavyB: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.unregisterTimeout2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cavyC: // global
           I64[Sp - 16] = block_cavyx_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uavyG; else goto cavyy;
       uavyG: // global
           call _cavyx(R1) args: 0, res: 0, upd: 0;
       cavyy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.unregisterTimeout2_info" {
     GHC.Event.TimerManager.unregisterTimeout2_info:
         const GHC.Event.TimerManager.unregisterTimeout2_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const Savlf_srt+72;
 },
 _cavyx() //  [R1]
         { []
         }
     {offset
       cavyx: // global
           R6 = P64[R1 + 47];
           R5 = I64[R1 + 71];
           R4 = P64[R1 + 31];
           R3 = P64[R1 + 23];
           R2 = P64[R1 + 15];
           Sp = Sp + 8;
           call GHC.Event.TimerManager.$weditTimeouts_entry(R6,
                                                            R5,
                                                            R4,
                                                            R3,
                                                            R2) args: 16, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavyx_info" {
     block_cavyx_info:
         const _cavyx;
         const 1;
         const 4294967326;
         const Savlf_srt+72;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.699858442 UTC

[section ""data" . GHC.Event.TimerManager.unregisterTimeout1_closure" {
     GHC.Event.TimerManager.unregisterTimeout1_closure:
         const GHC.Event.TimerManager.unregisterTimeout1_info;
         const 0;
 },
 sat_sav6j_entry() //  [R1]
         { []
         }
     {offset
       cavzl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavzm; else goto cavzn;
       cavzm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavzn: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cavzd_info;
           _sav5K::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sav5K::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavAi; else goto cavze;
       uavAi: // global
           call _cavzd(R1) args: 0, res: 0, upd: 0;
       cavze: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sav6j_info" {
     sat_sav6j_info:
         const sat_sav6j_entry;
         const 2;
         const 18;
 },
 _cavzd() //  [R1]
         { []
         }
     {offset
       cavzd: // global
           _cavzk::P64 = R1 & 7;
           if (_cavzk::P64 < 3) goto uavA9; else goto uavAc;
       uavA9: // global
           _sav5K::P64 = P64[Sp + 8];
           if (_cavzk::P64 < 2) goto cavzh; else goto cavzi;
       cavzh: // global
           I64[Sp] = block_cavzq_info;
           _sav5N::I64 = I64[R1 + 39];
           R1 = _sav5K::P64;
           I64[Sp + 8] = _sav5N::I64;
           if (R1 & 7 != 0) goto uavAf; else goto cavzs;
       uavAf: // global
           call _cavzq(R1) args: 0, res: 0, upd: 0;
       cavzs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cavzi: // global
           I64[Sp] = block_cavzJ_info;
           _sav65::I64 = I64[R1 + 22];
           R1 = _sav5K::P64;
           I64[Sp + 8] = _sav65::I64;
           if (R1 & 7 != 0) goto uavAg; else goto cavzL;
       uavAg: // global
           call _cavzJ(R1) args: 0, res: 0, upd: 0;
       cavzL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uavAc: // global
           Sp = Sp + 16;
           call _cavzj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavzd_info" {
     block_cavzd_info:
         const _cavzd;
         const 1;
         const 30;
 },
 _cavzq() //  [R1]
         { []
         }
     {offset
       cavzq: // global
           _cavA6::P64 = R1 & 7;
           if (_cavA6::P64 < 3) goto uavAa; else goto uavAd;
       uavAa: // global
           _sav5N::I64 = I64[Sp + 8];
           if (_cavA6::P64 < 2) goto cavzy; else goto cavzC;
       cavzy: // global
           R1 = I64[((_sav5N::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavzC: // global
           R1 = I64[((_sav5N::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavAd: // global
           Sp = Sp + 16;
           call _cavzj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavzq_info" {
     block_cavzq_info:
         const _cavzq;
         const 65;
         const 30;
 },
 _cavzJ() //  [R1]
         { []
         }
     {offset
       cavzJ: // global
           _cavA3::P64 = R1 & 7;
           if (_cavA3::P64 < 3) goto uavAb; else goto uavAe;
       uavAb: // global
           _sav65::I64 = I64[Sp + 8];
           if (_cavA3::P64 < 2) goto cavzR; else goto cavzV;
       cavzR: // global
           R1 = I64[((_sav65::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavzV: // global
           R1 = I64[((_sav65::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavAe: // global
           Sp = Sp + 16;
           call _cavzj() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavzJ_info" {
     block_cavzJ_info:
         const _cavzJ;
         const 65;
         const 30;
 },
 _cavzj() //  []
         { []
         }
     {offset
       cavzj: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sav6k_entry() //  [R1, R2]
         { []
         }
     {offset
       cavAl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavAn; else goto cavAo;
       cavAn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavAo: // global
           I64[Sp - 16] = block_cavz5_info;
           R3 = R2;
           _sav5J::P64 = R2;
           R2 = P64[R1 + 7];
           P64[Sp - 8] = _sav5J::P64;
           Sp = Sp - 16;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sav6k_info" {
     sat_sav6k_info:
         const sat_sav6k_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _cavz5() //  [R1]
         { []
         }
     {offset
       cavz5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cavAr; else goto cavAq;
       cavAr: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavAq: // global
           I64[Hp - 48] = sat_sav6j_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavz5_info" {
     block_cavz5_info:
         const _cavz5;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.unregisterTimeout1_entry() //  [R2, R3]
         { []
         }
     {offset
       cavAs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cavAt; else goto cavAu;
       cavAt: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.unregisterTimeout1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cavAu: // global
           I64[Sp - 16] = block_cavyV_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uavAO; else goto cavyW;
       uavAO: // global
           call _cavyV(R1) args: 0, res: 0, upd: 0;
       cavyW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.unregisterTimeout1_info" {
     GHC.Event.TimerManager.unregisterTimeout1_info:
         const GHC.Event.TimerManager.unregisterTimeout1_entry;
         const 0;
         const 141733920782;
         const 12884901903;
         const Savlf_srt+48;
 },
 _cavyV() //  [R1]
         { []
         }
     {offset
       cavyV: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cavAA; else goto cavAz;
       cavAA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavAz: // global
           _sav5B::P64 = P64[R1 + 15];
           _sav5I::P64 = P64[R1 + 47];
           _sav5G::I64 = I64[R1 + 71];
           I64[Hp - 8] = sat_sav6k_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp - 8] = block_cavAv_info;
           R2 = Hp - 7;
           R1 = _sav5B::P64;
           P64[Sp] = _sav5I::P64;
           I64[Sp + 8] = _sav5G::I64;
           Sp = Sp - 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavyV_info" {
     block_cavyV_info:
         const _cavyV;
         const 1;
         const 4294967326;
         const Savlf_srt+48;
 },
 _cavAv() //  [R1]
         { []
         }
     {offset
       cavAv: // global
           I64[Sp] = block_cavAx_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uavAP; else goto cavAC;
       uavAP: // global
           call _cavAx(R1) args: 0, res: 0, upd: 0;
       cavAC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavAv_info" {
     block_cavAv_info:
         const _cavAv;
         const 130;
         const 4294967326;
         const Savlf_srt+48;
 },
 _cavAx() //  [R1]
         { []
         }
     {offset
       cavAx: // global
           if (R1 & 7 == 1) goto cavAI; else goto cavAM;
       cavAI: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cavAM: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavAx_info" {
     block_cavAx_info:
         const _cavAx;
         const 130;
         const 4294967326;
         const Savlf_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.721153624 UTC

[section ""data" . GHC.Event.TimerManager.unregisterTimeout_closure" {
     GHC.Event.TimerManager.unregisterTimeout_closure:
         const GHC.Event.TimerManager.unregisterTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.unregisterTimeout_entry() //  [R2, R3]
         { []
         }
     {offset
       cavCd: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.TimerManager.unregisterTimeout1_entry(R3,
                                                                R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.unregisterTimeout_info" {
     GHC.Event.TimerManager.unregisterTimeout_info:
         const GHC.Event.TimerManager.unregisterTimeout_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const Savlf_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.731044298 UTC

[section ""data" . GHC.Event.TimerManager.$wregisterTimeout_closure" {
     GHC.Event.TimerManager.$wregisterTimeout_closure:
         const GHC.Event.TimerManager.$wregisterTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.$wregisterTimeout_slow() //  [R1]
         { []
         }
     {offset
       cavCl: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$wregisterTimeout_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2,
                                                               R1) args: 24, res: 0, upd: 8;
     }
 },
 sat_sav7k_entry() //  [R1]
         { []
         }
     {offset
       cavD4: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavD5; else goto cavD6;
       cavD5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavD6: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cavCW_info;
           _sav6L::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sav6L::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavE1; else goto cavCX;
       uavE1: // global
           call _cavCW(R1) args: 0, res: 0, upd: 0;
       cavCX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sav7k_info" {
     sat_sav7k_info:
         const sat_sav7k_entry;
         const 2;
         const 18;
 },
 _cavCW() //  [R1]
         { []
         }
     {offset
       cavCW: // global
           _cavD3::P64 = R1 & 7;
           if (_cavD3::P64 < 3) goto uavDS; else goto uavDV;
       uavDS: // global
           _sav6L::P64 = P64[Sp + 8];
           if (_cavD3::P64 < 2) goto cavD0; else goto cavD1;
       cavD0: // global
           I64[Sp] = block_cavD9_info;
           _sav6O::I64 = I64[R1 + 39];
           R1 = _sav6L::P64;
           I64[Sp + 8] = _sav6O::I64;
           if (R1 & 7 != 0) goto uavDY; else goto cavDb;
       uavDY: // global
           call _cavD9(R1) args: 0, res: 0, upd: 0;
       cavDb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cavD1: // global
           I64[Sp] = block_cavDs_info;
           _sav76::I64 = I64[R1 + 22];
           R1 = _sav6L::P64;
           I64[Sp + 8] = _sav76::I64;
           if (R1 & 7 != 0) goto uavDZ; else goto cavDu;
       uavDZ: // global
           call _cavDs(R1) args: 0, res: 0, upd: 0;
       cavDu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uavDV: // global
           Sp = Sp + 16;
           call _cavD2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavCW_info" {
     block_cavCW_info:
         const _cavCW;
         const 1;
         const 30;
 },
 _cavD9() //  [R1]
         { []
         }
     {offset
       cavD9: // global
           _cavDP::P64 = R1 & 7;
           if (_cavDP::P64 < 3) goto uavDT; else goto uavDW;
       uavDT: // global
           _sav6O::I64 = I64[Sp + 8];
           if (_cavDP::P64 < 2) goto cavDh; else goto cavDl;
       cavDh: // global
           R1 = I64[((_sav6O::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavDl: // global
           R1 = I64[((_sav6O::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavDW: // global
           Sp = Sp + 16;
           call _cavD2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavD9_info" {
     block_cavD9_info:
         const _cavD9;
         const 65;
         const 30;
 },
 _cavDs() //  [R1]
         { []
         }
     {offset
       cavDs: // global
           _cavDM::P64 = R1 & 7;
           if (_cavDM::P64 < 3) goto uavDU; else goto uavDX;
       uavDU: // global
           _sav76::I64 = I64[Sp + 8];
           if (_cavDM::P64 < 2) goto cavDA; else goto cavDE;
       cavDA: // global
           R1 = I64[((_sav76::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavDE: // global
           R1 = I64[((_sav76::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavDX: // global
           Sp = Sp + 16;
           call _cavD2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavDs_info" {
     block_cavDs_info:
         const _cavDs;
         const 65;
         const 30;
 },
 _cavD2() //  []
         { []
         }
     {offset
       cavD2: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sav7l_entry() //  [R1, R2]
         { []
         }
     {offset
       cavE4: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cavE6; else goto cavE7;
       cavE6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavE7: // global
           I64[Sp - 40] = block_cavCK_info;
           R3 = R2;
           _sav6J::P64 = R2;
           R2 = P64[R1 + 15];
           P64[Sp - 32] = P64[R1 + 7];
           I64[Sp - 24] = I64[R1 + 23];
           I64[Sp - 16] = I64[R1 + 31];
           P64[Sp - 8] = _sav6J::P64;
           Sp = Sp - 40;
           call GHC.Event.PSQ.delete_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sav7l_info" {
     sat_sav7l_info:
         const sat_sav7l_entry;
         const 8589934594;
         const 8;
         const 4294967301;
 },
 _cavCK() //  [R1]
         { []
         }
     {offset
       cavCK: // global
           _sav6G::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_cavCO_info;
           R5 = R1;
           R4 = P64[Sp + 8];
           R3 = _sav6G::I64;
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavCK_info" {
     block_cavCK_info:
         const _cavCK;
         const 388;
         const 30;
 },
 _cavCO() //  [R1]
         { []
         }
     {offset
       cavCO: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cavEb; else goto cavEa;
       cavEb: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavEa: // global
           I64[Hp - 48] = sat_sav7k_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavCO_info" {
     block_cavCO_info:
         const _cavCO;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.$wregisterTimeout_entry() //  [R2, R3, R4,
                                                       R5, R6]
         { []
         }
     {offset
       cavEf: // global
           _sav6t::P64 = R6;
           _sav6s::I64 = R5;
           _sav6r::P64 = R4;
           _sav6q::P64 = R3;
           _sav6p::P64 = R2;
           if ((Sp + -16) < SpLim) (likely: False) goto cavEg; else goto cavEh;
       cavEh: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cavEj; else goto cavEi;
       cavEj: // global
           HpAlloc = 56;
           goto cavEg;
       cavEg: // global
           R1 = GHC.Event.TimerManager.$wregisterTimeout_closure;
           P64[Sp - 40] = _sav6p::P64;
           P64[Sp - 32] = _sav6q::P64;
           P64[Sp - 24] = _sav6r::P64;
           I64[Sp - 16] = _sav6s::I64;
           P64[Sp - 8] = _sav6t::P64;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 64, res: 0, upd: 8;
       cavEi: // global
           _sav6u::I64 = I64[Sp];
           _sav6v::P64 = P64[Sp + 8];
           (_sav6z::I64) = call MO_AtomicRMW W64 AMO_Add(_sav6r::P64 + 16, 1);
           I64[Hp - 48] = GHC.Types.I#_con_info;
           I64[Hp - 40] = _sav6z::I64;
           _cavCr::P64 = Hp - 47;
           if (%MO_S_Gt_W64(_sav6u::I64, 0)) goto cavEd; else goto cavEe;
       cavEd: // global
           (_sav6F::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Hp - 32] = sat_sav7l_info;
           P64[Hp - 24] = _sav6v::P64;
           P64[Hp - 16] = _cavCr::P64;
           I64[Hp - 8] = _sav6z::I64;
           I64[Hp] = _sav6u::I64 * 1000 + _sav6F::I64;
           I64[Sp - 16] = block_cavEk_info;
           R2 = Hp - 31;
           R1 = _sav6p::P64;
           P64[Sp - 8] = _sav6t::P64;
           I64[Sp] = _sav6s::I64;
           P64[Sp + 8] = _cavCr::P64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
       cavEe: // global
           Hp = Hp - 40;
           I64[Sp] = block_cavFt_info;
           R1 = _sav6v::P64;
           P64[Sp + 8] = _cavCr::P64;
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$wregisterTimeout_info" {
     GHC.Event.TimerManager.$wregisterTimeout_info:
         const GHC.Event.TimerManager.$wregisterTimeout_entry;
         const 0;
         const 30064771086;
         const 34359738368;
         const Savlf_srt+96;
         const 2567;
         const GHC.Event.TimerManager.$wregisterTimeout_slow;
 },
 _cavEk() //  [R1]
         { []
         }
     {offset
       cavEk: // global
           I64[Sp] = block_cavEm_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uavFB; else goto cavEo;
       uavFB: // global
           call _cavEm(R1) args: 0, res: 0, upd: 0;
       cavEo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavEk_info" {
     block_cavEk_info:
         const _cavEk;
         const 131;
         const 12884901918;
         const Savlf_srt+96;
 },
 _cavEm() //  [R1]
         { []
         }
     {offset
       cavEm: // global
           if (R1 & 7 == 1) goto uavFy; else goto cavFr;
       uavFy: // global
           Sp = Sp + 24;
           goto uavFE;
       cavFr: // global
           _sav6t::P64 = P64[Sp + 8];
           (_sav7u::I64) = call "ccall" arg hints:  [‘signed’,]  result hints:  [‘signed’] eventfd_write(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])), 1);
           if (%MO_SS_Conv_W64_W32(_sav7u::I64) == 0 :: W32) goto uavFz; else goto cavEN;
       uavFz: // global
           Sp = Sp + 24;
           goto uavFE;
       uavFE: // global
           call _cavFn() args: 0, res: 0, upd: 0;
       cavEN: // global
           (_sav7z::I64) = call "ccall" arg hints:  []  result hints:  [‘signed’] __hscore_get_errno();
           I64[Sp + 8] = block_cavEL_info;
           R1 = P64[_sav6t::P64 + 8];
           I64[Sp + 16] = _sav7z::I64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavFC; else goto cavEP;
       uavFC: // global
           call _cavEL(R1) args: 0, res: 0, upd: 0;
       cavEP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavEm_info" {
     block_cavEm_info:
         const _cavEm;
         const 131;
         const 12884901918;
         const Savlf_srt+96;
 },
 _cavEL() //  [R1]
         { []
         }
     {offset
       cavEL: // global
           if (R1 & 7 == 1) goto cavEW; else goto cavFk;
       cavEW: // global
           I64[Sp + 8] = block_cavET_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
       cavFk: // global
           if (%MO_SS_Conv_W64_W32(I64[Sp + 8]) == 9 :: W32) goto uavFA; else goto cavFa;
       uavFA: // global
           Sp = Sp + 16;
           call _cavFn() args: 0, res: 0, upd: 0;
       cavFa: // global
           I64[Sp + 8] = block_cavF8_info;
           R2 = GHC.Event.Control.sendWakeup2_closure;
           Sp = Sp + 8;
           call Foreign.C.Error.throwErrno1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavEL_info" {
     block_cavEL_info:
         const _cavEL;
         const 66;
         const 12884901918;
         const Savlf_srt+96;
 },
 _cavET() //  []
         { []
         }
     {offset
       cavET: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavET_info" {
     block_cavET_info:
         const _cavET;
         const 1;
         const 30;
 },
 _cavFn() //  []
         { []
         }
     {offset
       cavFn: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _cavF8() //  []
         { []
         }
     {offset
       cavF8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavF8_info" {
     block_cavF8_info:
         const _cavF8;
         const 1;
         const 30;
 },
 _cavFt() //  []
         { []
         }
     {offset
       cavFt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavFt_info" {
     block_cavFt_info:
         const _cavFt;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.761001432 UTC

[section ""data" . GHC.Event.TimerManager.registerTimeout1_closure" {
     GHC.Event.TimerManager.registerTimeout1_closure:
         const GHC.Event.TimerManager.registerTimeout1_info;
         const 0;
 },
 GHC.Event.TimerManager.registerTimeout1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cavHD: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cavHH; else goto cavHI;
       cavHH: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.registerTimeout1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cavHI: // global
           I64[Sp - 24] = block_cavHA_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uavHQ; else goto cavHB;
       uavHQ: // global
           call _cavHA(R1) args: 0, res: 0, upd: 0;
       cavHB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.registerTimeout1_info" {
     GHC.Event.TimerManager.registerTimeout1_info:
         const GHC.Event.TimerManager.registerTimeout1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const Savlf_srt+112;
 },
 _cavHA() //  [R1]
         { []
         }
     {offset
       cavHA: // global
           I64[Sp - 32] = block_cavHG_info;
           _sav7U::P64 = P64[R1 + 15];
           _sav7V::P64 = P64[R1 + 23];
           _sav7W::P64 = P64[R1 + 31];
           _sav81::P64 = P64[R1 + 47];
           _sav7Z::I64 = I64[R1 + 71];
           R1 = P64[Sp + 8];
           P64[Sp - 24] = _sav7W::P64;
           I64[Sp - 16] = _sav7Z::I64;
           P64[Sp - 8] = _sav81::P64;
           P64[Sp] = _sav7V::P64;
           P64[Sp + 8] = _sav7U::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavHP; else goto cavHK;
       uavHP: // global
           call _cavHG(R1) args: 0, res: 0, upd: 0;
       cavHK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavHA_info" {
     block_cavHA_info:
         const _cavHA;
         const 2;
         const 4294967326;
         const Savlf_srt+112;
 },
 _cavHG() //  [R1]
         { []
         }
     {offset
       cavHG: // global
           R6 = P64[Sp + 24];
           R5 = I64[Sp + 16];
           R4 = P64[Sp + 8];
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 40];
           I64[Sp + 40] = I64[R1 + 7];
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$wregisterTimeout_entry(R6,
                                                               R5,
                                                               R4,
                                                               R3,
                                                               R2) args: 24, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavHG_info" {
     block_cavHG_info:
         const _cavHG;
         const 134;
         const 4294967326;
         const Savlf_srt+112;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.768764307 UTC

[section ""data" . GHC.Event.TimerManager.registerTimeout_closure" {
     GHC.Event.TimerManager.registerTimeout_closure:
         const GHC.Event.TimerManager.registerTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.registerTimeout_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cavIb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.TimerManager.registerTimeout1_entry(R4,
                                                              R3,
                                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.registerTimeout_info" {
     GHC.Event.TimerManager.registerTimeout_info:
         const GHC.Event.TimerManager.registerTimeout_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Savlf_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.779738451 UTC

[section ""data" . GHC.Event.TimerManager.updateTimeout1_closure" {
     GHC.Event.TimerManager.updateTimeout1_closure:
         const GHC.Event.TimerManager.updateTimeout1_info;
         const 0;
 },
 x_sav8m_entry() //  [R1]
         { []
         }
     {offset
       cavIz: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavIM; else goto cavIN;
       cavIM: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavIN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cavIw_info;
           _sav8b::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _sav8b::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavIR; else goto cavIx;
       uavIR: // global
           call _cavIw(R1) args: 0, res: 0, upd: 0;
       cavIx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . x_sav8m_info" {
     x_sav8m_info:
         const x_sav8m_entry;
         const 4294967297;
         const 19;
 },
 _cavIw() //  [R1]
         { []
         }
     {offset
       cavIw: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cavIQ; else goto cavIP;
       cavIQ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cavIP: // global
           _sav8r::I64 = I64[R1 + 7] * 1000 + I64[Sp + 8];
           I64[Hp - 8] = GHC.Word.W64#_con_info;
           I64[Hp] = _sav8r::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cavIw_info" {
     block_cavIw_info:
         const _cavIw;
         const 65;
         const 30;
 },
 sat_sav8w_entry() //  [R1]
         { []
         }
     {offset
       cavJh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cavJi; else goto cavJj;
       cavJi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavJj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cavJa_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uavJq; else goto cavJb;
       uavJq: // global
           call _cavJa(R1) args: 0, res: 0, upd: 0;
       cavJb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sav8w_info" {
     sat_sav8w_info:
         const sat_sav8w_entry;
         const 1;
         const 16;
 },
 _cavJa() //  [R1]
         { []
         }
     {offset
       cavJa: // global
           if (R1 & 7 == 3) goto cavJf; else goto cavJe;
       cavJf: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavJe: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cavJa_info" {
     block_cavJa_info:
         const _cavJa;
         const 0;
         const 30;
 },
 sat_sav9f_entry() //  [R1]
         { []
         }
     {offset
       cavJY: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavJZ; else goto cavK0;
       cavJZ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavK0: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cavJQ_info;
           _sav8G::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _sav8G::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavKV; else goto cavJR;
       uavKV: // global
           call _cavJQ(R1) args: 0, res: 0, upd: 0;
       cavJR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_sav9f_info" {
     sat_sav9f_info:
         const sat_sav9f_entry;
         const 2;
         const 18;
 },
 _cavJQ() //  [R1]
         { []
         }
     {offset
       cavJQ: // global
           _cavJX::P64 = R1 & 7;
           if (_cavJX::P64 < 3) goto uavKM; else goto uavKP;
       uavKM: // global
           _sav8G::P64 = P64[Sp + 8];
           if (_cavJX::P64 < 2) goto cavJU; else goto cavJV;
       cavJU: // global
           I64[Sp] = block_cavK3_info;
           _sav8J::I64 = I64[R1 + 39];
           R1 = _sav8G::P64;
           I64[Sp + 8] = _sav8J::I64;
           if (R1 & 7 != 0) goto uavKS; else goto cavK5;
       uavKS: // global
           call _cavK3(R1) args: 0, res: 0, upd: 0;
       cavK5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       cavJV: // global
           I64[Sp] = block_cavKm_info;
           _sav91::I64 = I64[R1 + 22];
           R1 = _sav8G::P64;
           I64[Sp + 8] = _sav91::I64;
           if (R1 & 7 != 0) goto uavKT; else goto cavKo;
       uavKT: // global
           call _cavKm(R1) args: 0, res: 0, upd: 0;
       cavKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
       uavKP: // global
           Sp = Sp + 16;
           call _cavJW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavJQ_info" {
     block_cavJQ_info:
         const _cavJQ;
         const 1;
         const 30;
 },
 _cavK3() //  [R1]
         { []
         }
     {offset
       cavK3: // global
           _cavKJ::P64 = R1 & 7;
           if (_cavKJ::P64 < 3) goto uavKN; else goto uavKQ;
       uavKN: // global
           _sav8J::I64 = I64[Sp + 8];
           if (_cavKJ::P64 < 2) goto cavKb; else goto cavKf;
       cavKb: // global
           R1 = I64[((_sav8J::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavKf: // global
           R1 = I64[((_sav8J::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavKQ: // global
           Sp = Sp + 16;
           call _cavJW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavK3_info" {
     block_cavK3_info:
         const _cavK3;
         const 65;
         const 30;
 },
 _cavKm() //  [R1]
         { []
         }
     {offset
       cavKm: // global
           _cavKG::P64 = R1 & 7;
           if (_cavKG::P64 < 3) goto uavKO; else goto uavKR;
       uavKO: // global
           _sav91::I64 = I64[Sp + 8];
           if (_cavKG::P64 < 2) goto cavKu; else goto cavKy;
       cavKu: // global
           R1 = I64[((_sav91::I64 != I64[R1 + 39]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavKy: // global
           R1 = I64[((_sav91::I64 != I64[R1 + 22]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       uavKR: // global
           Sp = Sp + 16;
           call _cavJW() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavKm_info" {
     block_cavKm_info:
         const _cavKm;
         const 65;
         const 30;
 },
 _cavJW() //  []
         { []
         }
     {offset
       cavJW: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 sat_sav9g_entry() //  [R1, R2]
         { []
         }
     {offset
       cavL2: // global
           if ((Sp + -40) < SpLim) (likely: False) goto cavL3; else goto cavL4;
       cavL3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavL4: // global
           I64[Sp - 32] = block_cavIX_info;
           R3 = R2;
           _sav8s::P64 = R2;
           _sav85::P64 = P64[R1 + 7];
           R2 = _sav85::P64;
           P64[Sp - 24] = _sav85::P64;
           P64[Sp - 16] = P64[R1 + 15];
           P64[Sp - 8] = _sav8s::P64;
           Sp = Sp - 32;
           call GHC.Event.PSQ.deleteView_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_sav9g_info" {
     sat_sav9g_info:
         const sat_sav9g_entry;
         const 2;
         const 11;
         const 4294967301;
 },
 _cavIX() //  [R1]
         { []
         }
     {offset
       cavIX: // global
           if (R1 & 7 == 1) goto cavKZ; else goto cavL0;
       cavKZ: // global
           _sav8s::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_cavJ1_info;
           R1 = _sav8s::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uavLi; else goto cavJ2;
       uavLi: // global
           call _cavJ1(R1) args: 0, res: 0, upd: 0;
       cavJ2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       cavL0: // global
           I64[Sp] = block_cavJt_info;
           R1 = P64[R1 + 6];
           if (R1 & 7 != 0) goto uavLj; else goto cavJu;
       uavLj: // global
           call _cavJt(R1) args: 0, res: 0, upd: 0;
       cavJu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavIX_info" {
     block_cavIX_info:
         const _cavIX;
         const 3;
         const 30;
 },
 _cavJ1() //  [R1]
         { []
         }
     {offset
       cavJ1: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cavL9; else goto cavL8;
       cavL9: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavL8: // global
           I64[Hp - 40] = sat_sav8w_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavJ1_info" {
     block_cavJ1_info:
         const _cavJ1;
         const 0;
         const 30;
 },
 _cavJt() //  [R1]
         { []
         }
     {offset
       cavJt: // global
           I64[Sp - 8] = block_cavJy_info;
           _sav8A::P64 = P64[R1 + 15];
           _sav8B::P64 = P64[R1 + 23];
           R1 = P64[Sp + 8];
           P64[Sp] = _sav8B::P64;
           P64[Sp + 8] = _sav8A::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavLk; else goto cavJz;
       uavLk: // global
           call _cavJy(R1) args: 0, res: 0, upd: 0;
       cavJz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavJt_info" {
     block_cavJt_info:
         const _cavJt;
         const 3;
         const 30;
 },
 _cavJy() //  [R1]
         { []
         }
     {offset
       cavJy: // global
           I64[Sp] = block_cavJD_info;
           _sav8D::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _sav8D::I64;
           if (R1 & 7 != 0) goto uavLl; else goto cavJE;
       uavLl: // global
           call _cavJD(R1) args: 0, res: 0, upd: 0;
       cavJE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavJy_info" {
     block_cavJy_info:
         const _cavJy;
         const 4;
         const 30;
 },
 _cavJD() //  [R1]
         { []
         }
     {offset
       cavJD: // global
           _sav8D::I64 = I64[Sp + 24];
           I64[Sp + 24] = block_cavJI_info;
           R5 = P64[Sp + 8];
           R4 = P64[Sp + 16];
           R3 = I64[R1 + 7];
           R2 = _sav8D::I64;
           Sp = Sp + 24;
           call GHC.Event.PSQ.$wunsafeInsertNew_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavJD_info" {
     block_cavJD_info:
         const _cavJD;
         const 260;
         const 30;
 },
 _cavJI() //  [R1]
         { []
         }
     {offset
       cavJI: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cavLh; else goto cavLg;
       cavLh: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavLg: // global
           I64[Hp - 48] = sat_sav9f_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = R1;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 48;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavJI_info" {
     block_cavJI_info:
         const _cavJI;
         const 1;
         const 30;
 },
 GHC.Event.TimerManager.updateTimeout1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cavLm: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavLn; else goto cavLo;
       cavLn: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.TimerManager.updateTimeout1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       cavLo: // global
           _sav86::P64 = R4;
           _sav85::P64 = R3;
           (_sav8b::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Sp - 32] = block_cavIn_info;
           R1 = R2;
           P64[Sp - 24] = _sav85::P64;
           P64[Sp - 16] = _sav86::P64;
           I64[Sp - 8] = _sav8b::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavLI; else goto cavIo;
       uavLI: // global
           call _cavIn(R1) args: 0, res: 0, upd: 0;
       cavIo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.updateTimeout1_info" {
     GHC.Event.TimerManager.updateTimeout1_info:
         const GHC.Event.TimerManager.updateTimeout1_entry;
         const 0;
         const 4402341478414;
         const 17179869207;
         const Savlf_srt+48;
 },
 _cavIn() //  [R1]
         { []
         }
     {offset
       cavIn: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cavLu; else goto cavLt;
       cavLu: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavLt: // global
           _sav8e::P64 = P64[R1 + 15];
           _sav8l::P64 = P64[R1 + 47];
           _sav8j::I64 = I64[R1 + 71];
           I64[Hp - 48] = x_sav8m_info;
           P64[Hp - 32] = P64[Sp + 16];
           I64[Hp - 24] = I64[Sp + 24];
           I64[Hp - 16] = sat_sav9g_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = Hp - 48;
           I64[Sp + 8] = block_cavLp_info;
           R2 = Hp - 15;
           R1 = _sav8e::P64;
           P64[Sp + 16] = _sav8l::P64;
           I64[Sp + 24] = _sav8j::I64;
           Sp = Sp + 8;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavIn_info" {
     block_cavIn_info:
         const _cavIn;
         const 259;
         const 4294967326;
         const Savlf_srt+48;
 },
 _cavLp() //  [R1]
         { []
         }
     {offset
       cavLp: // global
           I64[Sp] = block_cavLr_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uavLJ; else goto cavLw;
       uavLJ: // global
           call _cavLr(R1) args: 0, res: 0, upd: 0;
       cavLw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavLp_info" {
     block_cavLp_info:
         const _cavLp;
         const 130;
         const 4294967326;
         const Savlf_srt+48;
 },
 _cavLr() //  [R1]
         { []
         }
     {offset
       cavLr: // global
           if (R1 & 7 == 1) goto cavLC; else goto cavLG;
       cavLC: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cavLG: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavLr_info" {
     block_cavLr_info:
         const _cavLr;
         const 130;
         const 4294967326;
         const Savlf_srt+48;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.815499679 UTC

[section ""data" . GHC.Event.TimerManager.updateTimeout_closure" {
     GHC.Event.TimerManager.updateTimeout_closure:
         const GHC.Event.TimerManager.updateTimeout_info;
         const 0;
 },
 GHC.Event.TimerManager.updateTimeout_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cavOa: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.TimerManager.updateTimeout1_entry(R4,
                                                            R3,
                                                            R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.updateTimeout_info" {
     GHC.Event.TimerManager.updateTimeout_info:
         const GHC.Event.TimerManager.updateTimeout_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const Savlf_srt+128;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.820962228 UTC

[section ""data" . GHC.Event.TimerManager.cleanup1_closure" {
     GHC.Event.TimerManager.cleanup1_closure:
         const GHC.Event.TimerManager.cleanup1_info;
 },
 GHC.Event.TimerManager.cleanup1_entry() //  [R2]
         { []
         }
     {offset
       cavOo: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cavOs; else goto cavOt;
       cavOs: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.cleanup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavOt: // global
           I64[Sp - 8] = block_cavOl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavPj; else goto cavOm;
       uavPj: // global
           call _cavOl(R1) args: 0, res: 0, upd: 0;
       cavOm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.cleanup1_info" {
     GHC.Event.TimerManager.cleanup1_info:
         const GHC.Event.TimerManager.cleanup1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cavOl() //  [R1]
         { []
         }
     {offset
       cavOl: // global
           I64[Sp - 48] = block_cavOr_info;
           _sav9q::P64 = P64[R1 + 23];
           _sav9v::P64 = P64[R1 + 39];
           _sav9w::P64 = P64[R1 + 47];
           _sav9s::I64 = I64[R1 + 55];
           _sav9t::I64 = I64[R1 + 63];
           _sav9u::I64 = I64[R1 + 71];
           R1 = P64[R1 + 7];
           I64[Sp - 40] = _sav9s::I64;
           I64[Sp - 32] = _sav9t::I64;
           I64[Sp - 24] = _sav9u::I64;
           P64[Sp - 16] = _sav9v::P64;
           P64[Sp - 8] = _sav9w::P64;
           P64[Sp] = _sav9q::P64;
           Sp = Sp - 48;
           if (R1 & 7 != 0) goto uavPi; else goto cavOv;
       uavPi: // global
           call _cavOr(R1) args: 0, res: 0, upd: 0;
       cavOv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavOl_info" {
     block_cavOl_info:
         const _cavOl;
         const 0;
         const 30;
 },
 _cavOr() //  [R1]
         { []
         }
     {offset
       cavOr: // global
           _sav9q::P64 = P64[Sp + 48];
           _sav9y::P64 = P64[R1 + 7];
           _sav9C::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_sav9q::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _sav9q::P64);
           I64[Sp] = block_cavOC_info;
           R2 = _sav9y::P64;
           R1 = _sav9C::P64;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavOr_info" {
     block_cavOr_info:
         const _cavOr;
         const 454;
         const 30;
 },
 _cavOC() //  []
         { []
         }
     {offset
       cavOC: // global
           I64[Sp] = block_cavOE_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavOC_info" {
     block_cavOC_info:
         const _cavOC;
         const 2502;
         const 30;
 },
 _cavOE() //  []
         { []
         }
     {offset
       cavOE: // global
           _sav9t::I64 = I64[Sp + 16];
           _sav9v::P64 = P64[Sp + 32];
           (_sav9O::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_sav9T::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sav9t::I64)));
           I64[Sp + 16] = block_cavOT_info;
           R1 = _sav9v::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uavPk; else goto cavOU;
       uavPk: // global
           call _cavOT(R1) args: 0, res: 0, upd: 0;
       cavOU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavOE_info" {
     block_cavOE_info:
         const _cavOE;
         const 3526;
         const 30;
 },
 _cavOT() //  [R1]
         { []
         }
     {offset
       cavOT: // global
           _sav9u::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cavP0; else goto cavP4;
       cavP0: // global
           (_sav9Z::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sav9u::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cavP4: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_sava7::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_sav9u::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavOT_info" {
     block_cavOT_info:
         const _cavOT;
         const 964;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.83319568 UTC

[section ""data" . GHC.Event.TimerManager.cleanup_closure" {
     GHC.Event.TimerManager.cleanup_closure:
         const GHC.Event.TimerManager.cleanup_info;
 },
 GHC.Event.TimerManager.cleanup_entry() //  [R2]
         { []
         }
     {offset
       cavQ1: // global
           R2 = R2;
           call GHC.Event.TimerManager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.cleanup_info" {
     GHC.Event.TimerManager.cleanup_info:
         const GHC.Event.TimerManager.cleanup_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.8379781 UTC

[section ""data" . GHC.Event.TimerManager.finished1_closure" {
     GHC.Event.TimerManager.finished1_closure:
         const GHC.Event.TimerManager.finished1_info;
 },
 sat_savao_entry() //  [R1]
         { []
         }
     {offset
       cavQs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cavQt; else goto cavQu;
       cavQt: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavQu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cavQl_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uavQB; else goto cavQm;
       uavQB: // global
           call _cavQl(R1) args: 0, res: 0, upd: 0;
       cavQm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_savao_info" {
     sat_savao_info:
         const sat_savao_entry;
         const 1;
         const 16;
 },
 _cavQl() //  [R1]
         { []
         }
     {offset
       cavQl: // global
           if (R1 & 7 == 4) goto cavQq; else goto cavQp;
       cavQq: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavQp: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cavQl_info" {
     block_cavQl_info:
         const _cavQl;
         const 0;
         const 30;
 },
 GHC.Event.TimerManager.finished1_entry() //  [R2]
         { []
         }
     {offset
       cavQC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavQD; else goto cavQE;
       cavQD: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.finished1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavQE: // global
           I64[Sp - 8] = block_cavQc_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavQI; else goto cavQd;
       uavQI: // global
           call _cavQc(R1) args: 0, res: 0, upd: 0;
       cavQd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.finished1_info" {
     GHC.Event.TimerManager.finished1_info:
         const GHC.Event.TimerManager.finished1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cavQc() //  [R1]
         { []
         }
     {offset
       cavQc: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cavQH; else goto cavQG;
       cavQH: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavQG: // global
           _savam::P64 = P64[P64[R1 + 23] + 8];
           I64[Hp - 16] = sat_savao_info;
           P64[Hp] = _savam::P64;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavQc_info" {
     block_cavQc_info:
         const _cavQc;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.847255226 UTC

[section ""data" . GHC.Event.TimerManager.finished_closure" {
     GHC.Event.TimerManager.finished_closure:
         const GHC.Event.TimerManager.finished_info;
 },
 GHC.Event.TimerManager.finished_entry() //  [R2]
         { []
         }
     {offset
       cavRg: // global
           R2 = R2;
           call GHC.Event.TimerManager.finished1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.finished_info" {
     GHC.Event.TimerManager.finished_info:
         const GHC.Event.TimerManager.finished_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.85069403 UTC

[section ""data" . GHC.Event.TimerManager.shutdown2_closure" {
     GHC.Event.TimerManager.shutdown2_closure:
         const GHC.Event.TimerManager.shutdown2_info;
 },
 GHC.Event.TimerManager.shutdown2_entry() //  [R2]
         { []
         }
     {offset
       cavRs: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cavRw; else goto cavRv;
       cavRw: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.TimerManager.shutdown2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavRv: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.TimerManager.Dying_closure+3;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.shutdown2_info" {
     GHC.Event.TimerManager.shutdown2_info:
         const GHC.Event.TimerManager.shutdown2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.855216994 UTC

[section ""data" . GHC.Event.TimerManager.shutdown1_closure" {
     GHC.Event.TimerManager.shutdown1_closure:
         const GHC.Event.TimerManager.shutdown1_info;
         const 0;
 },
 GHC.Event.TimerManager.shutdown1_entry() //  [R2]
         { []
         }
     {offset
       cavRL: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cavRM; else goto cavRN;
       cavRM: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.shutdown1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavRN: // global
           I64[Sp - 8] = block_cavRI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavS7; else goto cavRJ;
       uavS7: // global
           call _cavRI(R1) args: 0, res: 0, upd: 0;
       cavRJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.shutdown1_info" {
     GHC.Event.TimerManager.shutdown1_info:
         const GHC.Event.TimerManager.shutdown1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Savlf_srt+136;
 },
 _cavRI() //  [R1]
         { []
         }
     {offset
       cavRI: // global
           I64[Sp - 16] = block_cavRQ_info;
           R2 = GHC.Event.TimerManager.shutdown2_closure+1;
           _savaB::P64 = P64[R1 + 47];
           _savay::I64 = I64[R1 + 63];
           R1 = P64[R1 + 23];
           P64[Sp - 8] = _savaB::P64;
           I64[Sp] = _savay::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavRI_info" {
     block_cavRI_info:
         const _cavRI;
         const 0;
         const 4294967326;
         const Savlf_srt+136;
 },
 _cavRQ() //  [R1]
         { []
         }
     {offset
       cavRQ: // global
           I64[Sp] = block_cavRS_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uavS8; else goto cavRV;
       uavS8: // global
           call _cavRS(R1) args: 0, res: 0, upd: 0;
       cavRV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavRQ_info" {
     block_cavRQ_info:
         const _cavRQ;
         const 130;
         const 4294967326;
         const Savlf_srt+136;
 },
 _cavRS() //  [R1]
         { []
         }
     {offset
       cavRS: // global
           if (R1 & 7 == 2) goto cavS5; else goto cavS1;
       cavS5: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
       cavS1: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavRS_info" {
     block_cavRS_info:
         const _cavRS;
         const 130;
         const 4294967326;
         const Savlf_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.863496928 UTC

[section ""data" . GHC.Event.TimerManager.shutdown_closure" {
     GHC.Event.TimerManager.shutdown_closure:
         const GHC.Event.TimerManager.shutdown_info;
         const 0;
 },
 GHC.Event.TimerManager.shutdown_entry() //  [R2]
         { []
         }
     {offset
       cavSA: // global
           R2 = R2;
           call GHC.Event.TimerManager.shutdown1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.shutdown_info" {
     GHC.Event.TimerManager.shutdown_info:
         const GHC.Event.TimerManager.shutdown_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Savlf_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.866876089 UTC

[section ""data" . GHC.Event.TimerManager.new3_closure" {
     GHC.Event.TimerManager.new3_closure:
         const GHC.Event.TimerManager.new3_info;
 },
 GHC.Event.TimerManager.new3_entry() //  [R2]
         { []
         }
     {offset
       cavSM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cavSQ; else goto cavSP;
       cavSQ: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.TimerManager.new3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavSP: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.TimerManager.Finished_closure+4;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new3_info" {
     GHC.Event.TimerManager.new3_info:
         const GHC.Event.TimerManager.new3_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.876082252 UTC

[section ""data" . GHC.Event.TimerManager.new2_closure" {
     GHC.Event.TimerManager.new2_closure:
         const GHC.Event.TimerManager.new2_info;
         const 0;
 },
 sat_savba_entry() //  [R1]
         { []
         }
     {offset
       cavTm: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cavTn; else goto cavTo;
       cavTn: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cavTo: // global
           I64[Sp - 24] = block_cavTd_info;
           R2 = GHC.Event.TimerManager.new3_closure+1;
           _savaH::P64 = P64[R1 + 7];
           _savaO::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _savaH::P64;
           P64[Sp - 8] = _savaO::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_savba_info" {
     sat_savba_info:
         const sat_savba_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _cavTd() //  [R1]
         { []
         }
     {offset
       cavTd: // global
           I64[Sp] = block_cavTf_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uavTF; else goto cavTg;
       uavTF: // global
           call _cavTf(R1) args: 0, res: 0, upd: 0;
       cavTg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavTd_info" {
     block_cavTd_info:
         const _cavTd;
         const 2;
         const 30;
 },
 _cavTf() //  [R1]
         { []
         }
     {offset
       cavTf: // global
           if (R1 & 7 == 4) goto cavTk; else goto cavTj;
       cavTk: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cavTj: // global
           _savaH::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cavTs_info;
           R1 = _savaH::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uavTG; else goto cavTt;
       uavTG: // global
           call _cavTs(R1) args: 0, res: 0, upd: 0;
       cavTt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavTf_info" {
     block_cavTf_info:
         const _cavTf;
         const 2;
         const 30;
 },
 _cavTs() //  [R1]
         { []
         }
     {offset
       cavTs: // global
           I64[Sp] = block_cavTx_info;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 39];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavTs_info" {
     block_cavTs_info:
         const _cavTs;
         const 1;
         const 30;
 },
 _cavTx() //  []
         { []
         }
     {offset
       cavTx: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavTx_info" {
     block_cavTx_info:
         const _cavTx;
         const 1;
         const 30;
 },
 sat_savbk_entry() //  [R1]
         { []
         }
     {offset
       cavTT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavTU; else goto cavTV;
       cavTU: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavTV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.Control.controlReadFd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_savbk_info" {
     sat_savbk_info:
         const sat_savbk_entry;
         const 1;
         const 16;
 },
 sat_savbo_entry() //  [R1]
         { []
         }
     {offset
       cavU2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cavU3; else goto cavU4;
       cavU3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavU4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R2 = P64[R1 + 16];
           Sp = Sp - 16;
           call GHC.Event.Control.controlEventFd_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_savbo_info" {
     sat_savbo_info:
         const sat_savbo_entry;
         const 1;
         const 16;
 },
 sat_savby_entry() //  [R1]
         { []
         }
     {offset
       cavUe: // global
           if ((Sp + -56) < SpLim) (likely: False) goto cavUi; else goto cavUj;
       cavUi: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavUj: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 56] = block_cavUb_info;
           _savaL::P64 = P64[R1 + 16];
           _savaR::P64 = P64[R1 + 32];
           _savaU::P64 = P64[R1 + 40];
           _savbe::P64 = P64[R1 + 48];
           R1 = P64[R1 + 24];
           P64[Sp - 48] = _savaL::P64;
           P64[Sp - 40] = _savaR::P64;
           P64[Sp - 32] = _savaU::P64;
           P64[Sp - 24] = _savbe::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uavUn; else goto cavUc;
       uavUn: // global
           call _cavUb(R1) args: 0, res: 0, upd: 0;
       cavUc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_savby_info" {
     sat_savby_info:
         const sat_savby_entry;
         const 5;
         const 15;
 },
 _cavUb() //  [R1]
         { []
         }
     {offset
       cavUb: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cavUm; else goto cavUl;
       cavUm: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cavUl: // global
           _savbw::P64 = P64[R1 + 7];
           _savbx::P64 = P64[R1 + 15];
           _savbt::I64 = I64[R1 + 23];
           _savbu::I64 = I64[R1 + 31];
           _savbv::I64 = I64[R1 + 39];
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _savbw::P64;
           P64[Hp - 24] = _savbx::P64;
           I64[Hp - 16] = _savbt::I64;
           I64[Hp - 8] = _savbu::I64;
           I64[Hp] = _savbv::I64;
           R1 = Hp - 71;
           Sp = Sp + 40;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cavUb_info" {
     block_cavUb_info:
         const _cavUb;
         const 4;
         const 30;
 },
 GHC.Event.TimerManager.new2_entry() //  [R2]
         { []
         }
     {offset
       cavUo: // global
           if ((Sp + -72) < SpLim) (likely: False) goto cavUp; else goto cavUq;
       cavUp: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.new2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavUq: // global
           I64[Sp - 16] = block_cavT2_info;
           R1 = GHC.Event.PSQ.Nil_closure+3;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new2_info" {
     GHC.Event.TimerManager.new2_info:
         const GHC.Event.TimerManager.new2_entry;
         const 0;
         const 64424509454;
         const 8589934597;
         const Savlf_srt+152;
 },
 _cavT2() //  [R1]
         { []
         }
     {offset
       cavT2: // global
           I64[Sp - 8] = block_cavT4_info;
           R2 = GHC.Types.True_closure+2;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavT2_info" {
     block_cavT2_info:
         const _cavT2;
         const 1;
         const 30064771102;
         const Savlf_srt+152;
 },
 _cavT4() //  [R1]
         { []
         }
     {offset
       cavT4: // global
           I64[Sp - 8] = block_cavT6_info;
           _savaO::P64 = R1;
           R1 = GHC.Event.TimerManager.Created_closure+1;
           P64[Sp] = _savaO::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavT4_info" {
     block_cavT4_info:
         const _cavT4;
         const 2;
         const 12884901918;
         const Savlf_srt+152;
 },
 _cavT6() //  [R1]
         { []
         }
     {offset
       cavT6: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto cavUv; else goto cavUu;
       cavUv: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavUu: // global
           I64[Hp - 64] = stg_ARR_WORDS_info;
           I64[Hp - 56] = 8;
           I64[Hp - 40] = sat_savba_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_cavTI_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           _savaR::P64 = R1;
           R1 = R1;
           P64[Sp - 8] = Hp - 64;
           P64[Sp] = _savaR::P64;
           Sp = Sp - 16;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavT6_info" {
     block_cavT6_info:
         const _cavT6;
         const 3;
         const 12884901918;
         const Savlf_srt+152;
 },
 _cavTI() //  []
         { []
         }
     {offset
       cavTI: // global
           I64[Sp] = block_cavTK_info;
           R1 = P64[Sp + 40];
           if (R1 & 7 != 0) goto uavUG; else goto cavTL;
       uavUG: // global
           call _cavTK(R1) args: 0, res: 0, upd: 0;
       cavTL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavTI_info" {
     block_cavTI_info:
         const _cavTI;
         const 5;
         const 12884901918;
         const Savlf_srt+152;
 },
 _cavTK() //  [R1]
         { []
         }
     {offset
       cavTK: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cavUz; else goto cavUy;
       cavUz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavUy: // global
           _savbf::P64 = P64[R1 + 7];
           _savbh::P64 = P64[R1 + 23];
           I64[Hp - 16] = sat_savbk_info;
           P64[Hp] = P64[Sp + 24];
           I64[Sp - 16] = block_cavTW_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 16;
           R2 = _savbf::P64;
           _savbe::P64 = R1;
           R1 = _savbh::P64;
           I64[Sp - 24] = stg_ap_v_info;
           P64[Sp - 8] = _savbh::P64;
           P64[Sp] = _savbf::P64;
           P64[Sp + 40] = _savbe::P64;
           Sp = Sp - 24;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavTK_info" {
     block_cavTK_info:
         const _cavTK;
         const 1029;
         const 12884901918;
         const Savlf_srt+152;
 },
 _cavTW() //  [R1]
         { []
         }
     {offset
       cavTW: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cavUC; else goto cavUB;
       cavUC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavUB: // global
           I64[Hp - 16] = sat_savbo_info;
           P64[Hp] = P64[Sp + 40];
           _savbf::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_cavU5_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 16;
           R2 = _savbf::P64;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = stg_ap_v_info;
           Sp = Sp + 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavTW_info" {
     block_cavTW_info:
         const _cavTW;
         const 7;
         const 12884901918;
         const Savlf_srt+152;
 },
 _cavU5() //  [R1]
         { []
         }
     {offset
       cavU5: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto cavUF; else goto cavUE;
       cavUF: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavUE: // global
           I64[Hp - 48] = sat_savby_info;
           P64[Hp - 32] = P64[Sp + 32];
           P64[Hp - 24] = P64[Sp + 24];
           P64[Hp - 16] = P64[Sp + 16];
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = P64[Sp + 40];
           R1 = Hp - 48;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavU5_info" {
     block_cavU5_info:
         const _cavU5;
         const 5;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.90676669 UTC

[section ""data" . GHC.Event.TimerManager.newWith_closure" {
     GHC.Event.TimerManager.newWith_closure:
         const GHC.Event.TimerManager.newWith_info;
         const 0;
 },
 GHC.Event.TimerManager.newWith_entry() //  [R2]
         { []
         }
     {offset
       cavWu: // global
           R2 = R2;
           call GHC.Event.TimerManager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.newWith_info" {
     GHC.Event.TimerManager.newWith_info:
         const GHC.Event.TimerManager.newWith_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Savlf_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.910153761 UTC

[section ""data" . GHC.Event.TimerManager.new1_closure" {
     GHC.Event.TimerManager.new1_closure:
         const GHC.Event.TimerManager.new1_info;
         const 0;
 },
 GHC.Event.TimerManager.new1_entry() //  []
         { []
         }
     {offset
       cavWH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto cavWI; else goto cavWJ;
       cavWI: // global
           R1 = GHC.Event.TimerManager.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       cavWJ: // global
           I64[Sp - 8] = block_cavWF_info;
           Sp = Sp - 8;
           call GHC.Event.Poll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new1_info" {
     GHC.Event.TimerManager.new1_info:
         const GHC.Event.TimerManager.new1_entry;
         const 0;
         const 1688854155231246;
         const 4294967299;
         const Savlf_srt+40;
 },
 _cavWF() //  [R1]
         { []
         }
     {offset
       cavWF: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.TimerManager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavWF_info" {
     block_cavWF_info:
         const _cavWF;
         const 0;
         const 4294967326;
         const Savlf_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.915773126 UTC

[section ""data" . GHC.Event.TimerManager.new_closure" {
     GHC.Event.TimerManager.new_closure:
         const GHC.Event.TimerManager.new_info;
         const 0;
 },
 GHC.Event.TimerManager.new_entry() //  []
         { []
         }
     {offset
       cavWY: // global
           call GHC.Event.TimerManager.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.new_info" {
     GHC.Event.TimerManager.new_info:
         const GHC.Event.TimerManager.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const Savlf_srt+184;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.927739234 UTC

[section ""data" . GHC.Event.TimerManager.step1_closure" {
     GHC.Event.TimerManager.step1_closure:
         const GHC.Event.TimerManager.step1_info;
         const 0;
 },
 sat_savch_entry() //  [R1]
         { []
         }
     {offset
       cavXJ: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavXK; else goto cavXL;
       cavXK: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavXL: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_cavXB_info;
           _savbI::I64 = I64[R1 + 24];
           R1 = P64[R1 + 16];
           I64[Sp - 24] = _savbI::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavY8; else goto cavXC;
       uavY8: // global
           call _cavXB(R1) args: 0, res: 0, upd: 0;
       cavXC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_savch_info" {
     sat_savch_info:
         const sat_savch_entry;
         const 4294967297;
         const 19;
 },
 _cavXB() //  [R1]
         { []
         }
     {offset
       cavXB: // global
           _cavXI::P64 = R1 & 7;
           if (_cavXI::P64 < 3) goto uavY7; else goto cavXH;
       uavY7: // global
           _savbI::I64 = I64[Sp + 8];
           if (_cavXI::P64 < 2) goto cavXF; else goto cavXG;
       cavXF: // global
           Hp = Hp + 16;
           _savc5::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cavY3; else goto cavXT;
       cavXT: // global
           _savcc::I64 = I64[_savc5::P64 + 39] - _savbI::I64;
           I64[Hp - 8] = GHC.Event.Internal.Timeout_con_info;
           I64[Hp] = _savcc::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavXG: // global
           Hp = Hp + 16;
           _savc5::P64 = R1;
           if (Hp > HpLim) (likely: False) goto cavY3; else goto cavY2;
       cavY3: // global
           HpAlloc = 16;
           R1 = _savc5::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       cavY2: // global
           _savcg::I64 = I64[_savc5::P64 + 22] - _savbI::I64;
           I64[Hp - 8] = GHC.Event.Internal.Timeout_con_info;
           I64[Hp] = _savcg::I64;
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavXH: // global
           R1 = GHC.Event.Internal.Forever_closure+2;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cavXB_info" {
     block_cavXB_info:
         const _cavXB;
         const 65;
         const 30;
 },
 sat_savcj_entry() //  [R1, R2]
         { []
         }
     {offset
       cavY9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cavYc; else goto cavYd;
       cavYc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavYd: // global
           I64[Sp - 16] = block_cavXq_info;
           R3 = R2;
           R2 = P64[R1 + 7];
           I64[Sp - 8] = I64[R1 + 15];
           Sp = Sp - 16;
           call GHC.Event.PSQ.$watMost_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_savcj_info" {
     sat_savcj_info:
         const sat_savcj_entry;
         const 4294967297;
         const 12;
         const 4294967301;
 },
 _cavXq() //  [R1, R2]
         { []
         }
     {offset
       cavXq: // global
           I64[Sp - 8] = block_cavXs_info;
           _savc2::P64 = R1;
           R1 = R2;
           P64[Sp] = _savc2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uavYi; else goto cavXt;
       uavYi: // global
           call _cavXs(R1) args: 0, res: 0, upd: 0;
       cavXt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavXq_info" {
     block_cavXq_info:
         const _cavXq;
         const 65;
         const 30;
 },
 _cavXs() //  [R1]
         { []
         }
     {offset
       cavXs: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cavYh; else goto cavYg;
       cavYh: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavYg: // global
           I64[Hp - 72] = sat_savch_info;
           P64[Hp - 56] = R1;
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = (,)_con_info;
           P64[Hp - 32] = P64[Sp + 8];
           P64[Hp - 24] = Hp - 72;
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 39;
           R1 = Hp - 15;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavXs_info" {
     block_cavXs_info:
         const _cavXs;
         const 130;
         const 30;
 },
 sat_savcI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       cavYD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cavYE; else goto cavYF;
       cavYE: // global
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cavYF: // global
           I64[Sp - 32] = block_cavYA_info;
           _savbM::P64 = P64[R1 + 5];
           _savbS::P64 = P64[R1 + 13];
           _savbQ::I64 = I64[R1 + 21];
           R1 = R2;
           P64[Sp - 24] = _savbM::P64;
           I64[Sp - 16] = _savbQ::I64;
           P64[Sp - 8] = _savbS::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uavZb; else goto cavYB;
       uavZb: // global
           call _cavYA(R1) args: 0, res: 0, upd: 0;
       cavYB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_savcI_info" {
     sat_savcI_info:
         const sat_savcI_entry;
         const 4294967298;
         const 12884901896;
         const 12884901903;
         const Savlf_srt+192;
 },
 _cavYA() //  [R1]
         { []
         }
     {offset
       cavYA: // global
           I64[Sp] = block_cavYI_info;
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 24];
           R2 = I64[Sp + 16];
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavYA_info" {
     block_cavYA_info:
         const _cavYA;
         const 131;
         const 12884901918;
         const Savlf_srt+192;
 },
 _cavYI() //  [R1]
         { []
         }
     {offset
       cavYI: // global
           I64[Sp] = block_cavYK_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uavZc; else goto cavYN;
       uavZc: // global
           call _cavYK(R1) args: 0, res: 0, upd: 0;
       cavYN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavYI_info" {
     block_cavYI_info:
         const _cavYI;
         const 387;
         const 4294967326;
         const Savlf_srt+192;
 },
 _cavYK() //  [R1]
         { []
         }
     {offset
       cavYK: // global
           _cavZ6::P64 = R1 & 7;
           if (_cavZ6::P64 < 3) goto uavZa; else goto cavZ2;
       uavZa: // global
           if (_cavZ6::P64 < 2) goto cavYT; else goto cavYX;
       cavYT: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cavYX: // global
           _savbM::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_savbM::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savbM::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cavZ2: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cavZ5; else goto cavZ4;
       cavZ5: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavZ4: // global
           _savcE::P64 = P64[R1 + 5];
           _savcD::I64 = I64[R1 + 13];
           _savcF::I64 = I64[R1 + 21];
           I64[Hp - 32] = GHC.Int.I32#_con_info;
           I64[Hp - 24] = _savcF::I64;
           I64[Hp - 16] = GHC.ForeignPtr.ForeignPtr_con_info;
           P64[Hp - 8] = _savcE::P64;
           I64[Hp] = _savcD::I64;
           R3 = Hp - 31;
           R2 = Hp - 15;
           Sp = Sp + 32;
           call GHC.Conc.Signal.runHandlers1_entry(R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavYK_info" {
     block_cavYK_info:
         const _cavYK;
         const 387;
         const 4294967326;
         const Savlf_srt+192;
 },
 sat_savcR_entry() //  [R1]
         { []
         }
     {offset
       cavZw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cavZx; else goto cavZy;
       cavZx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cavZy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_cavZp_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uavZF; else goto cavZq;
       uavZF: // global
           call _cavZp(R1) args: 0, res: 0, upd: 0;
       cavZq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_savcR_info" {
     sat_savcR_info:
         const sat_savcR_entry;
         const 1;
         const 16;
 },
 _cavZp() //  [R1]
         { []
         }
     {offset
       cavZp: // global
           if (R1 & 7 == 2) goto cavZu; else goto cavZt;
       cavZu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       cavZt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_cavZp_info" {
     block_cavZp_info:
         const _cavZp;
         const 0;
         const 30;
 },
 GHC.Event.TimerManager.step1_entry() //  [R2]
         { []
         }
     {offset
       cavZG: // global
           if ((Sp + -64) < SpLim) (likely: False) goto cavZH; else goto cavZI;
       cavZH: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.step1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cavZI: // global
           (_savbI::I64) = call "ccall" arg hints:  []  result hints:  [] getMonotonicNSec();
           I64[Sp - 16] = block_cavXa_info;
           R1 = R2;
           I64[Sp - 8] = _savbI::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaw0u; else goto cavXb;
       uaw0u: // global
           call _cavXa(R1) args: 0, res: 0, upd: 0;
       cavXb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.step1_info" {
     GHC.Event.TimerManager.step1_info:
         const GHC.Event.TimerManager.step1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const Savlf_srt+192;
 },
 _cavXa() //  [R1]
         { []
         }
     {offset
       cavXa: // global
           I64[Sp - 32] = block_cavXf_info;
           _savbL::P64 = P64[R1 + 15];
           _savbM::P64 = P64[R1 + 23];
           _savbS::P64 = P64[R1 + 47];
           _savbQ::I64 = I64[R1 + 71];
           R1 = P64[R1 + 7];
           P64[Sp - 24] = _savbM::P64;
           I64[Sp - 16] = _savbQ::I64;
           P64[Sp - 8] = _savbS::P64;
           P64[Sp] = _savbL::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaw0q; else goto cavXg;
       uaw0q: // global
           call _cavXf(R1) args: 0, res: 0, upd: 0;
       cavXg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavXa_info" {
     block_cavXa_info:
         const _cavXa;
         const 65;
         const 12884901918;
         const Savlf_srt+192;
 },
 _cavXf() //  [R1]
         { []
         }
     {offset
       cavXf: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto cavZM; else goto cavZL;
       cavZM: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavZL: // global
           _savbU::P64 = P64[R1 + 7];
           _savbV::P64 = P64[R1 + 15];
           I64[Hp - 32] = GHC.Word.W64#_con_info;
           _savbI::I64 = I64[Sp + 40];
           I64[Hp - 24] = _savbI::I64;
           I64[Hp - 16] = sat_savcj_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _savbI::I64;
           I64[Sp] = block_cavYj_info;
           R2 = Hp - 15;
           R1 = P64[Sp + 32];
           P64[Sp + 32] = _savbV::P64;
           P64[Sp + 40] = _savbU::P64;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavXf_info" {
     block_cavXf_info:
         const _cavXf;
         const 1157;
         const 12884901918;
         const Savlf_srt+192;
 },
 _cavYj() //  [R1]
         { []
         }
     {offset
       cavYj: // global
           I64[Sp] = block_cavYl_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaw0r; else goto cavYm;
       uaw0r: // global
           call _cavYl(R1) args: 0, res: 0, upd: 0;
       cavYm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavYj_info" {
     block_cavYj_info:
         const _cavYj;
         const 133;
         const 12884901918;
         const Savlf_srt+192;
 },
 _cavYl() //  [R1]
         { []
         }
     {offset
       cavYl: // global
           P64[Sp - 8] = P64[R1 + 7];
           P64[Sp] = P64[R1 + 15];
           Sp = Sp - 8;
           call _cavZZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cavYl_info" {
     block_cavYl_info:
         const _cavYl;
         const 133;
         const 12884901918;
         const Savlf_srt+192;
 },
 _cavZZ() //  []
         { []
         }
     {offset
       cavZZ: // global
           _savcT::P64 = P64[Sp];
           I64[Sp] = block_caw01_info;
           R1 = _savcT::P64;
           if (R1 & 7 != 0) goto uaw0v; else goto caw03;
       uaw0v: // global
           call _caw01(R1) args: 0, res: 0, upd: 0;
       caw03: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caw01() //  [R1]
         { []
         }
     {offset
       caw01: // global
           if (R1 & 7 == 1) goto uaw0w; else goto caw0e;
       uaw0w: // global
           call _cavYt() args: 0, res: 0, upd: 0;
       caw0e: // global
           I64[Sp - 8] = block_caw0c_info;
           _savcX::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _savcX::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaw0x; else goto caw0f;
       uaw0x: // global
           call _caw0c(R1) args: 0, res: 0, upd: 0;
       caw0f: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw01_info" {
     block_caw01_info:
         const _caw01;
         const 262;
         const 12884901918;
         const Savlf_srt+192;
 },
 _cavYt() //  []
         { []
         }
     {offset
       cavYt: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto cavZR; else goto cavZQ;
       cavZR: // global
           HpAlloc = 48;
           I64[Sp] = block_cavYt_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       cavZQ: // global
           I64[Hp - 40] = sat_savcI_info;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 32];
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp + 8] = block_cavZe_info;
           R4 = Hp - 37;
           R3 = Hp - 6;
           R2 = P64[Sp + 48];
           R1 = P64[Sp + 40];
           Sp = Sp + 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavYt_info" {
     block_cavYt_info:
         const _cavYt;
         const 262;
         const 12884901918;
         const Savlf_srt+192;
 },
 _cavZe() //  []
         { []
         }
     {offset
       cavZe: // global
           _savcO::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 40] = block_cavZg_info;
           R1 = _savcO::P64;
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaw0t; else goto cavZh;
       uaw0t: // global
           call _cavZg(R1) args: 0, res: 0, upd: 0;
       cavZh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cavZe_info" {
     block_cavZe_info:
         const _cavZe;
         const 1925;
         const 30;
 },
 _cavZg() //  [R1]
         { []
         }
     {offset
       cavZg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto cavZV; else goto cavZU;
       cavZV: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       cavZU: // global
           I64[Hp - 16] = sat_savcR_info;
           P64[Hp] = R1;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cavZg_info" {
     block_cavZg_info:
         const _cavZg;
         const 0;
         const 30;
 },
 _caw0c() //  [R1]
         { []
         }
     {offset
       caw0c: // global
           I64[Sp] = block_caw0j_info;
           R1 = P64[R1 + 7];
           call stg_ap_v_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw0c_info" {
     block_caw0c_info:
         const _caw0c;
         const 519;
         const 12884901918;
         const Savlf_srt+192;
 },
 _caw0j() //  []
         { []
         }
     {offset
       caw0j: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _cavZZ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caw0j_info" {
     block_caw0j_info:
         const _caw0j;
         const 519;
         const 12884901918;
         const Savlf_srt+192;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.968063572 UTC

[section ""data" . GHC.Event.TimerManager.step_closure" {
     GHC.Event.TimerManager.step_closure:
         const GHC.Event.TimerManager.step_info;
         const 0;
 },
 GHC.Event.TimerManager.step_entry() //  [R2]
         { []
         }
     {offset
       caw37: // global
           R2 = R2;
           call GHC.Event.TimerManager.step1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.step_info" {
     GHC.Event.TimerManager.step_info:
         const GHC.Event.TimerManager.step_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Savlf_srt+208;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.970933883 UTC

[section ""cstring" . lvl_rasDV_bytes" {
     lvl_rasDV_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,108,111,111,112,58,32,115,116,97,116,101,32,105,115,32,97,108,114,101,97,100,121,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.974006145 UTC

[section ""data" . lvl1_rasDW_closure" {
     lvl1_rasDW_closure:
         const lvl1_rasDW_info;
         const 0;
 },
 sat_savd7_entry() //  [R1]
         { []
         }
     {offset
       caw3u: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caw3v; else goto caw3w;
       caw3v: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caw3w: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caw3n_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaw3D; else goto caw3o;
       uaw3D: // global
           call _caw3n(R1) args: 0, res: 0, upd: 0;
       caw3o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_savd7_info" {
     sat_savd7_info:
         const sat_savd7_entry;
         const 1;
         const 21474836496;
         const Savlf_srt+8;
 },
 _caw3n() //  [R1]
         { []
         }
     {offset
       caw3n: // global
           if (R1 & 7 == 4) goto caw3s; else goto caw3r;
       caw3s: // global
           R1 = GHC.Event.TimerManager.$fShowState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
       caw3r: // global
           R1 = GHC.Event.TimerManager.$fShowState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caw3n_info" {
     block_caw3n_info:
         const _caw3n;
         const 0;
         const 21474836510;
         const Savlf_srt+8;
 },
 lvl1_rasDW_entry() //  [R2]
         { []
         }
     {offset
       caw3G: // global
           _savd5::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto caw3H; else goto caw3I;
       caw3I: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caw3K; else goto caw3J;
       caw3K: // global
           HpAlloc = 24;
           goto caw3H;
       caw3H: // global
           R2 = _savd5::P64;
           R1 = lvl1_rasDW_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caw3J: // global
           I64[Hp - 16] = sat_savd7_info;
           P64[Hp] = _savd5::P64;
           I64[Sp - 8] = block_caw3E_info;
           R3 = Hp - 16;
           R2 = lvl_rasDV_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl1_rasDW_info" {
     lvl1_rasDW_info:
         const lvl1_rasDW_entry;
         const 0;
         const 864691149929971726;
         const 4294967301;
         const Savlf_srt+8;
 },
 _caw3E() //  [R1]
         { []
         }
     {offset
       caw3E: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caw3E_info" {
     block_caw3E_info:
         const _caw3E;
         const 0;
         const 4294967326;
         const Savlf_srt+216;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.981819109 UTC

[section ""data" . lvl2_rasDX_closure" {
     lvl2_rasDX_closure:
         const (,)_con_info;
         const GHC.Event.TimerManager.Running_closure+2;
         const GHC.Event.TimerManager.Created_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:30.984406755 UTC

[section ""data" . lvl3_rasDY_closure" {
     lvl3_rasDY_closure:
         const lvl3_rasDY_info;
 },
 lvl3_rasDY_entry() //  [R2]
         { []
         }
     {offset
       caw4o: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caw4p; else goto caw4q;
       caw4p: // global
           R2 = R2;
           R1 = lvl3_rasDY_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caw4q: // global
           I64[Sp - 8] = block_caw4h_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaw4A; else goto caw4i;
       uaw4A: // global
           call _caw4h(R1) args: 0, res: 0, upd: 0;
       caw4i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_rasDY_info" {
     lvl3_rasDY_info:
         const lvl3_rasDY_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caw4h() //  [R1]
         { []
         }
     {offset
       caw4h: // global
           if (R1 & 7 == 1) goto caw4m; else goto caw4l;
       caw4m: // global
           R1 = lvl2_rasDX_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caw4l: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caw4w; else goto caw4v;
       caw4w: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caw4v: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caw4h_info" {
     block_caw4h_info:
         const _caw4h;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.008494314 UTC

[section ""data" . GHC.Event.TimerManager.$wloop_closure" {
     GHC.Event.TimerManager.$wloop_closure:
         const GHC.Event.TimerManager.$wloop_info;
         const 0;
 },
 GHC.Event.TimerManager.$wloop_slow() //  [R1]
         { []
         }
     {offset
       caw4R: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.$wloop_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2,
                                                    R1) args: 40, res: 0, upd: 8;
     }
 },
 go_save5_entry() //  [R1]
         { []
         }
     {offset
       caw5p: // global
           if ((Sp + -16) < SpLim) (likely: False) goto uaw5C; else goto uaw5B;
       uaw5C: // global
           P64[Sp - 8] = R1;
           Sp = Sp - 8;
           call _caw5q() args: 0, res: 0, upd: 0;
       uaw5B: // global
           P64[Sp - 8] = R1;
           Sp = Sp - 8;
           call _caw5c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_save5_info" {
     go_save5_info:
         const go_save5_entry;
         const 12884901894;
         const 4294967304;
         const 4294967299;
         const Savlf_srt+208;
 },
 _caw5c() //  []
         { []
         }
     {offset
       caw5c: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caw5t; else goto caw5s;
       caw5t: // global
           HpAlloc = 80;
           call _caw5q() args: 0, res: 0, upd: 0;
       caw5s: // global
           _save5::P64 = P64[Sp];
           _savdc::P64 = P64[_save5::P64 + 7];
           _savdd::P64 = P64[_save5::P64 + 15];
           _savde::P64 = P64[_save5::P64 + 23];
           _savdi::P64 = P64[_save5::P64 + 31];
           _savdj::P64 = P64[_save5::P64 + 39];
           _savdl::P64 = P64[_save5::P64 + 47];
           _savdf::I64 = I64[_save5::P64 + 55];
           _savdg::I64 = I64[_save5::P64 + 63];
           _savdh::I64 = I64[_save5::P64 + 71];
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = _savdl::P64;
           P64[Hp - 56] = _savdc::P64;
           P64[Hp - 48] = _savdd::P64;
           P64[Hp - 40] = _savde::P64;
           P64[Hp - 32] = _savdi::P64;
           P64[Hp - 24] = _savdj::P64;
           I64[Hp - 16] = _savdf::I64;
           I64[Hp - 8] = _savdg::I64;
           I64[Hp] = _savdh::I64;
           I64[Sp - 8] = block_caw5g_info;
           R2 = Hp - 71;
           Sp = Sp - 8;
           call GHC.Event.TimerManager.step1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 _caw5q() //  []
         { []
         }
     {offset
       caw5q: // global
           R1 = P64[Sp];
           Sp = Sp + 8;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caw5g() //  [R1]
         { []
         }
     {offset
       caw5g: // global
           I64[Sp] = block_caw5i_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaw5F; else goto caw5j;
       uaw5F: // global
           call _caw5i(R1) args: 0, res: 0, upd: 0;
       caw5j: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw5g_info" {
     block_caw5g_info:
         const _caw5g;
         const 1;
         const 4294967326;
         const Savlf_srt+208;
 },
 _caw5i() //  [R1]
         { []
         }
     {offset
       caw5i: // global
           if (R1 & 7 == 1) goto caw5m; else goto uaw5D;
       caw5m: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaw5D: // global
           Sp = Sp + 8;
           call _caw5c() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caw5i_info" {
     block_caw5i_info:
         const _caw5i;
         const 1;
         const 4294967326;
         const Savlf_srt+208;
 },
 sat_saveL_entry() //  [R1, R2]
         { []
         }
     {offset
       caw5Z: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caw60; else goto caw61;
       caw60: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caw61: // global
           _savdd::P64 = P64[R1 + 6];
           _savdi::P64 = P64[R1 + 14];
           _savdj::P64 = P64[R1 + 22];
           _savdm::P64 = P64[R1 + 30];
           _savdq::P64 = P64[R1 + 38];
           _savdf::I64 = I64[R1 + 46];
           _savdg::I64 = I64[R1 + 54];
           _savdh::I64 = I64[R1 + 62];
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp - 56] = block_caw5T_info;
           _savee::P64 = R2;
           R2 = _savdm::P64;
           R1 = _savdq::P64;
           I64[Sp - 48] = _savdf::I64;
           I64[Sp - 40] = _savdg::I64;
           I64[Sp - 32] = _savdh::I64;
           P64[Sp - 24] = _savdi::P64;
           P64[Sp - 16] = _savdj::P64;
           P64[Sp - 8] = _savee::P64;
           Sp = Sp - 56;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saveL_info" {
     sat_saveL_info:
         const sat_saveL_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _caw5T() //  []
         { []
         }
     {offset
       caw5T: // global
           I64[Sp] = block_caw5V_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw5T_info" {
     block_caw5T_info:
         const _caw5T;
         const 454;
         const 30;
 },
 _caw5V() //  []
         { []
         }
     {offset
       caw5V: // global
           _savdg::I64 = I64[Sp + 16];
           _savdi::P64 = P64[Sp + 32];
           (_saver::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_savew::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp + 16] = block_caw6c_info;
           R1 = _savdi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaw6B; else goto caw6d;
       uaw6B: // global
           call _caw6c(R1) args: 0, res: 0, upd: 0;
       caw6d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw5V_info" {
     block_caw5V_info:
         const _caw5V;
         const 1478;
         const 30;
 },
 _caw6c() //  [R1]
         { []
         }
     {offset
       caw6c: // global
           _savdh::I64 = I64[Sp + 8];
           _savee::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto caw6j; else goto caw6n;
       caw6j: // global
           (_saveC::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savee::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       caw6n: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saveK::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savee::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caw6c_info" {
     block_caw6c_info:
         const _caw6c;
         const 452;
         const 30;
 },
 sat_saved_entry() //  [R1]
         { []
         }
     {offset
       caw6H: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saved_info" {
     sat_saved_info:
         const sat_saved_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_savfT_entry() //  [R1, R2]
         { []
         }
     {offset
       caw74: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caw75; else goto caw76;
       caw75: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caw76: // global
           _savdd::P64 = P64[R1 + 6];
           _savdi::P64 = P64[R1 + 14];
           _savdj::P64 = P64[R1 + 22];
           _savdm::P64 = P64[R1 + 30];
           _savdq::P64 = P64[R1 + 38];
           _savdf::I64 = I64[R1 + 46];
           _savdg::I64 = I64[R1 + 54];
           _savdh::I64 = I64[R1 + 62];
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp - 56] = block_caw6Y_info;
           _savfm::P64 = R2;
           R2 = _savdm::P64;
           R1 = _savdq::P64;
           I64[Sp - 48] = _savdf::I64;
           I64[Sp - 40] = _savdg::I64;
           I64[Sp - 32] = _savdh::I64;
           P64[Sp - 24] = _savdi::P64;
           P64[Sp - 16] = _savdj::P64;
           P64[Sp - 8] = _savfm::P64;
           Sp = Sp - 56;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_savfT_info" {
     sat_savfT_info:
         const sat_savfT_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _caw6Y() //  []
         { []
         }
     {offset
       caw6Y: // global
           I64[Sp] = block_caw70_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw6Y_info" {
     block_caw6Y_info:
         const _caw6Y;
         const 454;
         const 30;
 },
 _caw70() //  []
         { []
         }
     {offset
       caw70: // global
           _savdg::I64 = I64[Sp + 16];
           _savdi::P64 = P64[Sp + 32];
           (_savfz::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_savfE::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp + 16] = block_caw7h_info;
           R1 = _savdi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaw7G; else goto caw7i;
       uaw7G: // global
           call _caw7h(R1) args: 0, res: 0, upd: 0;
       caw7i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw70_info" {
     block_caw70_info:
         const _caw70;
         const 1478;
         const 30;
 },
 _caw7h() //  [R1]
         { []
         }
     {offset
       caw7h: // global
           _savdh::I64 = I64[Sp + 8];
           _savfm::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto caw7o; else goto caw7s;
       caw7o: // global
           (_savfK::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savfm::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       caw7s: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_savfS::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savfm::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caw7h_info" {
     block_caw7h_info:
         const _caw7h;
         const 452;
         const 30;
 },
 sat_savfl_entry() //  [R1]
         { []
         }
     {offset
       caw7M: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_savfl_info" {
     sat_savfl_info:
         const sat_savfl_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_savgs_entry() //  [R1]
         { []
         }
     {offset
       caw80: // global
           _savgs::P64 = R1;
           if ((Sp + -72) < SpLim) (likely: False) goto caw81; else goto caw82;
       caw82: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto caw84; else goto caw83;
       caw84: // global
           HpAlloc = 88;
           goto caw81;
       caw81: // global
           R1 = _savgs::P64;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caw83: // global
           _savdd::P64 = P64[_savgs::P64 + 7];
           _savdi::P64 = P64[_savgs::P64 + 15];
           _savdj::P64 = P64[_savgs::P64 + 23];
           _savdm::P64 = P64[_savgs::P64 + 31];
           _savdq::P64 = P64[_savgs::P64 + 39];
           _save5::P64 = P64[_savgs::P64 + 47];
           _savdf::I64 = I64[_savgs::P64 + 55];
           _savdg::I64 = I64[_savgs::P64 + 63];
           _savdh::I64 = I64[_savgs::P64 + 71];
           I64[Hp - 80] = sat_savfT_info;
           P64[Hp - 72] = _savdd::P64;
           P64[Hp - 64] = _savdi::P64;
           P64[Hp - 56] = _savdj::P64;
           P64[Hp - 48] = _savdm::P64;
           P64[Hp - 40] = _savdq::P64;
           I64[Hp - 32] = _savdf::I64;
           I64[Hp - 24] = _savdg::I64;
           I64[Hp - 16] = _savdh::I64;
           I64[Hp - 8] = sat_savfl_info;
           P64[Hp] = _save5::P64;
           I64[Sp - 72] = block_caw7P_info;
           R2 = Hp - 78;
           R1 = Hp - 7;
           P64[Sp - 64] = _savdd::P64;
           I64[Sp - 56] = _savdf::I64;
           I64[Sp - 48] = _savdg::I64;
           I64[Sp - 40] = _savdh::I64;
           P64[Sp - 32] = _savdi::P64;
           P64[Sp - 24] = _savdj::P64;
           P64[Sp - 16] = _savdm::P64;
           P64[Sp - 8] = _savdq::P64;
           Sp = Sp - 72;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_savgs_info" {
     sat_savgs_info:
         const sat_savgs_entry;
         const 12884901894;
         const 8;
         const 4294967299;
 },
 _caw7P() //  [R1]
         { []
         }
     {offset
       caw7P: // global
           _savdd::P64 = P64[Sp + 8];
           _savdm::P64 = P64[Sp + 56];
           _savdq::P64 = P64[Sp + 64];
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp + 8] = block_caw7U_info;
           R2 = _savdm::P64;
           _savfW::P64 = R1;
           R1 = _savdq::P64;
           P64[Sp + 64] = _savfW::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw7P_info" {
     block_caw7P_info:
         const _caw7P;
         const 904;
         const 30;
 },
 _caw7U() //  []
         { []
         }
     {offset
       caw7U: // global
           I64[Sp] = block_caw7W_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw7U_info" {
     block_caw7U_info:
         const _caw7U;
         const 2503;
         const 30;
 },
 _caw7W() //  []
         { []
         }
     {offset
       caw7W: // global
           _savdg::I64 = I64[Sp + 16];
           _savdi::P64 = P64[Sp + 32];
           (_savg8::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_savgd::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp + 16] = block_caw8g_info;
           R1 = _savdi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaw8F; else goto caw8h;
       uaw8F: // global
           call _caw8g(R1) args: 0, res: 0, upd: 0;
       caw8h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw7W_info" {
     block_caw7W_info:
         const _caw7W;
         const 3527;
         const 30;
 },
 _caw8g() //  [R1]
         { []
         }
     {offset
       caw8g: // global
           _savdh::I64 = I64[Sp + 8];
           _savfW::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto caw8n; else goto caw8r;
       caw8n: // global
           (_savgj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savfW::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caw8r: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_savgr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savfW::P64;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caw8g_info" {
     block_caw8g_info:
         const _caw8g;
         const 965;
         const 30;
 },
 sat_savh1_entry() //  [R1, R2]
         { []
         }
     {offset
       caw8V: // global
           if ((Sp + -56) < SpLim) (likely: False) goto caw8W; else goto caw8X;
       caw8W: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caw8X: // global
           _savdd::P64 = P64[R1 + 6];
           _savdi::P64 = P64[R1 + 14];
           _savdj::P64 = P64[R1 + 22];
           _savdm::P64 = P64[R1 + 30];
           _savdq::P64 = P64[R1 + 38];
           _savdf::I64 = I64[R1 + 46];
           _savdg::I64 = I64[R1 + 54];
           _savdh::I64 = I64[R1 + 62];
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp - 56] = block_caw8P_info;
           _savgu::P64 = R2;
           R2 = _savdm::P64;
           R1 = _savdq::P64;
           I64[Sp - 48] = _savdf::I64;
           I64[Sp - 40] = _savdg::I64;
           I64[Sp - 32] = _savdh::I64;
           P64[Sp - 24] = _savdi::P64;
           P64[Sp - 16] = _savdj::P64;
           P64[Sp - 8] = _savgu::P64;
           Sp = Sp - 56;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_savh1_info" {
     sat_savh1_info:
         const sat_savh1_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _caw8P() //  []
         { []
         }
     {offset
       caw8P: // global
           I64[Sp] = block_caw8R_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw8P_info" {
     block_caw8P_info:
         const _caw8P;
         const 454;
         const 30;
 },
 _caw8R() //  []
         { []
         }
     {offset
       caw8R: // global
           _savdg::I64 = I64[Sp + 16];
           _savdi::P64 = P64[Sp + 32];
           (_savgH::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_savgM::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp + 16] = block_caw98_info;
           R1 = _savdi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaw9x; else goto caw99;
       uaw9x: // global
           call _caw98(R1) args: 0, res: 0, upd: 0;
       caw99: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw8R_info" {
     block_caw8R_info:
         const _caw8R;
         const 1478;
         const 30;
 },
 _caw98() //  [R1]
         { []
         }
     {offset
       caw98: // global
           _savdh::I64 = I64[Sp + 8];
           _savgu::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto caw9f; else goto caw9j;
       caw9f: // global
           (_savgS::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savgu::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       caw9j: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_savh0::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savgu::P64;
           Sp = Sp + 40;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caw98_info" {
     block_caw98_info:
         const _caw98;
         const 452;
         const 30;
 },
 sat_savgt_entry() //  [R1]
         { []
         }
     {offset
       caw9D: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_savgt_info" {
     sat_savgt_info:
         const sat_savgt_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.TimerManager.$wloop_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caw9G: // global
           if ((Sp + -64) < SpLim) (likely: False) goto caw9H; else goto caw9I;
       caw9H: // global
           R1 = GHC.Event.TimerManager.$wloop_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       caw9I: // global
           I64[Sp - 40] = block_caw4V_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uawd2; else goto caw4W;
       uawd2: // global
           call _caw4V(R1) args: 0, res: 0, upd: 0;
       caw4W: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.$wloop_info" {
     GHC.Event.TimerManager.$wloop_info:
         const GHC.Event.TimerManager.$wloop_entry;
         const 0;
         const 55834574862;
         const 42949672960;
         const Savlf_srt+208;
         const 7177;
         const GHC.Event.TimerManager.$wloop_slow;
 },
 _caw4V() //  [R1]
         { []
         }
     {offset
       caw4V: // global
           I64[Sp - 24] = block_caw50_info;
           R2 = lvl3_rasDY_closure+1;
           _savdl::P64 = R1;
           _savdm::P64 = P64[R1 + 7];
           _savdq::P64 = P64[R1 + 39];
           R1 = P64[Sp + 16];
           P64[Sp - 16] = _savdm::P64;
           P64[Sp - 8] = _savdq::P64;
           P64[Sp] = _savdl::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw4V_info" {
     block_caw4V_info:
         const _caw4V;
         const 3592;
         const 21474836510;
         const Savlf_srt+208;
 },
 _caw50() //  [R1]
         { []
         }
     {offset
       caw50: // global
           I64[Sp] = block_caw52_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uawd1; else goto caw53;
       uawd1: // global
           call _caw52(R1) args: 0, res: 0, upd: 0;
       caw53: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw50_info" {
     block_caw50_info:
         const _caw50;
         const 28683;
         const 21474836510;
         const Savlf_srt+208;
 },
 _caw52() //  [R1]
         { []
         }
     {offset
       caw52: // global
           _cawc8::P64 = R1 & 7;
           if (_cawc8::P64 == 1) goto cawal; else goto uawcZ;
       cawal: // global
           I64[Sp] = block_caw58_info;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
       uawcZ: // global
           _savdd::P64 = P64[Sp + 40];
           _savdm::P64 = P64[Sp + 8];
           _savdq::P64 = P64[Sp + 16];
           if (_cawc8::P64 == 3) goto cawbI; else goto caw9U;
       cawbI: // global
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp + 48] = block_cawbE_info;
           R2 = _savdm::P64;
           R1 = _savdq::P64;
           Sp = Sp + 48;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       caw9U: // global
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp + 40] = block_caw9P_info;
           R2 = _savdm::P64;
           _savdu::P64 = R1;
           R1 = _savdq::P64;
           P64[Sp + 48] = _savdu::P64;
           Sp = Sp + 40;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw52_info" {
     block_caw52_info:
         const _caw52;
         const 28683;
         const 21474836510;
         const Savlf_srt+208;
 },
 _caw58() //  [R1]
         { []
         }
     {offset
       caw58: // global
           Hp = Hp + 168;
           if (Hp > HpLim) (likely: False) goto cawao; else goto cawan;
       cawao: // global
           HpAlloc = 168;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cawan: // global
           I64[Hp - 160] = go_save5_info;
           P64[Hp - 152] = P64[Sp + 32];
           _savdd::P64 = P64[Sp + 40];
           P64[Hp - 144] = _savdd::P64;
           P64[Hp - 136] = P64[Sp + 48];
           _savdi::P64 = P64[Sp + 80];
           P64[Hp - 128] = _savdi::P64;
           _savdj::P64 = P64[Sp + 88];
           P64[Hp - 120] = _savdj::P64;
           P64[Hp - 112] = P64[Sp + 24];
           _savdf::I64 = I64[Sp + 56];
           I64[Hp - 104] = _savdf::I64;
           _savdg::I64 = I64[Sp + 64];
           I64[Hp - 96] = _savdg::I64;
           _savdh::I64 = I64[Sp + 72];
           I64[Hp - 88] = _savdh::I64;
           _savdm::P64 = P64[Sp + 8];
           _savdq::P64 = P64[Sp + 16];
           _caw5a::P64 = Hp - 159;
           if (R1 == 0) goto cawaZ; else goto uawd0;
       cawaZ: // global
           I64[Hp - 80] = sat_savgs_info;
           P64[Hp - 72] = _savdd::P64;
           P64[Hp - 64] = _savdi::P64;
           P64[Hp - 56] = _savdj::P64;
           P64[Hp - 48] = _savdm::P64;
           P64[Hp - 40] = _savdq::P64;
           P64[Hp - 32] = _caw5a::P64;
           I64[Hp - 24] = _savdf::I64;
           I64[Hp - 16] = _savdg::I64;
           I64[Hp - 8] = _savdh::I64;
           _caw6L::P64 = Hp - 79;
           Hp = Hp - 8;
           R1 = _caw6L::P64;
           Sp = Sp + 96;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
       uawd0: // global
           if (R1 == 1) goto cawb8; else goto caway;
       cawb8: // global
           I64[Hp - 80] = sat_savh1_info;
           P64[Hp - 72] = _savdd::P64;
           P64[Hp - 64] = _savdi::P64;
           P64[Hp - 56] = _savdj::P64;
           P64[Hp - 48] = _savdm::P64;
           P64[Hp - 40] = _savdq::P64;
           I64[Hp - 32] = _savdf::I64;
           I64[Hp - 24] = _savdg::I64;
           I64[Hp - 16] = _savdh::I64;
           I64[Hp - 8] = sat_savgt_info;
           P64[Hp] = _caw5a::P64;
           I64[Sp] = block_cawb0_info;
           R2 = Hp - 78;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
       caway: // global
           I64[Hp - 80] = sat_saveL_info;
           P64[Hp - 72] = _savdd::P64;
           P64[Hp - 64] = _savdi::P64;
           P64[Hp - 56] = _savdj::P64;
           P64[Hp - 48] = _savdm::P64;
           P64[Hp - 40] = _savdq::P64;
           I64[Hp - 32] = _savdf::I64;
           I64[Hp - 24] = _savdg::I64;
           I64[Hp - 16] = _savdh::I64;
           I64[Hp - 8] = sat_saved_info;
           P64[Hp] = _caw5a::P64;
           I64[Sp] = block_cawap_info;
           R2 = Hp - 78;
           R1 = Hp - 7;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw58_info" {
     block_caw58_info:
         const _caw58;
         const 28683;
         const 4294967326;
         const Savlf_srt+208;
 },
 _cawb0() //  [R1]
         { []
         }
     {offset
       cawb0: // global
           _savdd::P64 = P64[Sp + 40];
           _savdm::P64 = P64[Sp + 8];
           _savdq::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp + 40] = block_cawb5_info;
           R2 = _savdm::P64;
           _savh4::P64 = R1;
           R1 = _savdq::P64;
           P64[Sp + 48] = _savh4::P64;
           Sp = Sp + 40;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawb0_info" {
     block_cawb0_info:
         const _cawb0;
         const 31499;
         const 30;
 },
 _cawb5() //  []
         { []
         }
     {offset
       cawb5: // global
           I64[Sp] = block_cawb7_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 48];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawb5_info" {
     block_cawb5_info:
         const _cawb5;
         const 902;
         const 30;
 },
 _cawb7() //  []
         { []
         }
     {offset
       cawb7: // global
           _savdg::I64 = I64[Sp + 24];
           _savdi::P64 = P64[Sp + 40];
           (_savhg::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])));
           (_savhl::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp] = block_cawbn_info;
           R1 = _savdi::P64;
           if (R1 & 7 != 0) goto uawd5; else goto cawbo;
       uawd5: // global
           call _cawbn(R1) args: 0, res: 0, upd: 0;
       cawbo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawb7_info" {
     block_cawb7_info:
         const _cawb7;
         const 2950;
         const 30;
 },
 _cawbn() //  [R1]
         { []
         }
     {offset
       cawbn: // global
           _savdh::I64 = I64[Sp + 32];
           _savh4::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cawbu; else goto cawby;
       cawbu: // global
           (_savhr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savh4::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cawby: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_savhz::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _savh4::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cawbn_info" {
     block_cawbn_info:
         const _cawbn;
         const 3974;
         const 30;
 },
 _cawap() //  [R1]
         { []
         }
     {offset
       cawap: // global
           _savdd::P64 = P64[Sp + 40];
           _savdm::P64 = P64[Sp + 8];
           _savdq::P64 = P64[Sp + 16];
           call MO_WriteBarrier();
           P64[_savdd::P64 + 8] = GHC.Event.TimerManager.Finished_closure+4;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _savdd::P64);
           I64[Sp + 40] = block_cawau_info;
           R2 = _savdm::P64;
           _saveO::P64 = R1;
           R1 = _savdq::P64;
           P64[Sp + 48] = _saveO::P64;
           Sp = Sp + 40;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawap_info" {
     block_cawap_info:
         const _cawap;
         const 31499;
         const 30;
 },
 _cawau() //  []
         { []
         }
     {offset
       cawau: // global
           I64[Sp] = block_cawaw_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 48];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawau_info" {
     block_cawau_info:
         const _cawau;
         const 902;
         const 30;
 },
 _cawaw() //  []
         { []
         }
     {offset
       cawaw: // global
           _savdg::I64 = I64[Sp + 24];
           _savdi::P64 = P64[Sp + 40];
           (_savf0::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])));
           (_savf5::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp] = block_cawaN_info;
           R1 = _savdi::P64;
           if (R1 & 7 != 0) goto uawd4; else goto cawaO;
       uawd4: // global
           call _cawaN(R1) args: 0, res: 0, upd: 0;
       cawaO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawaw_info" {
     block_cawaw_info:
         const _cawaw;
         const 2950;
         const 30;
 },
 _cawaN() //  [R1]
         { []
         }
     {offset
       cawaN: // global
           _savdh::I64 = I64[Sp + 32];
           _saveO::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cawaU; else goto cawaY;
       cawaU: // global
           (_savfb::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _saveO::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cawaY: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_savfj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = _saveO::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cawaN_info" {
     block_cawaN_info:
         const _cawaN;
         const 3974;
         const 30;
 },
 _cawbE() //  []
         { []
         }
     {offset
       cawbE: // global
           I64[Sp] = block_cawbG_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawbE_info" {
     block_cawbE_info:
         const _cawbE;
         const 453;
         const 30;
 },
 _cawbG() //  []
         { []
         }
     {offset
       cawbG: // global
           _savdg::I64 = I64[Sp + 16];
           _savdi::P64 = P64[Sp + 32];
           (_savhL::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_savhQ::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp + 16] = block_cawbW_info;
           R1 = _savdi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uawd6; else goto cawbX;
       uawd6: // global
           call _cawbW(R1) args: 0, res: 0, upd: 0;
       cawbX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cawbG_info" {
     block_cawbG_info:
         const _cawbG;
         const 1477;
         const 30;
 },
 _cawbW() //  [R1]
         { []
         }
     {offset
       cawbW: // global
           _savdh::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cawc3; else goto cawc7;
       cawc3: // global
           (_savhW::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cawc7: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_savi4::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cawbW_info" {
     block_cawbW_info:
         const _cawbW;
         const 451;
         const 30;
 },
 _caw9P() //  []
         { []
         }
     {offset
       caw9P: // global
           I64[Sp] = block_caw9R_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 48];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw9P_info" {
     block_caw9P_info:
         const _caw9P;
         const 902;
         const 4294967326;
         const Savlf_srt+224;
 },
 _caw9R() //  []
         { []
         }
     {offset
       caw9R: // global
           _savdg::I64 = I64[Sp + 24];
           _savdi::P64 = P64[Sp + 40];
           (_savdG::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 16])));
           (_savdL::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdg::I64)));
           I64[Sp] = block_cawa8_info;
           R1 = _savdi::P64;
           if (R1 & 7 != 0) goto uawd3; else goto cawa9;
       uawd3: // global
           call _cawa8(R1) args: 0, res: 0, upd: 0;
       cawa9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caw9R_info" {
     block_caw9R_info:
         const _caw9R;
         const 2950;
         const 4294967326;
         const Savlf_srt+224;
 },
 _cawa8() //  [R1]
         { []
         }
     {offset
       cawa8: // global
           _savdh::I64 = I64[Sp + 32];
           _savdu::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto cawaf; else goto cawaj;
       cawaf: // global
           (_savdR::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R2 = _savdu::P64;
           Sp = Sp + 56;
           call lvl1_rasDW_entry(R2) args: 8, res: 0, upd: 8;
       cawaj: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_save0::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_savdh::I64)));
           R2 = _savdu::P64;
           Sp = Sp + 56;
           call lvl1_rasDW_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cawa8_info" {
     block_cawa8_info:
         const _cawa8;
         const 3974;
         const 4294967326;
         const Savlf_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.088425329 UTC

[section ""data" . GHC.Event.TimerManager.loop1_closure" {
     GHC.Event.TimerManager.loop1_closure:
         const GHC.Event.TimerManager.loop1_info;
         const 0;
 },
 GHC.Event.TimerManager.loop1_entry() //  [R2]
         { []
         }
     {offset
       cawho: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cawhp; else goto cawhq;
       cawhp: // global
           R2 = R2;
           R1 = GHC.Event.TimerManager.loop1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cawhq: // global
           I64[Sp - 8] = block_cawhl_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uawhu; else goto cawhm;
       uawhu: // global
           call _cawhl(R1) args: 0, res: 0, upd: 0;
       cawhm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.loop1_info" {
     GHC.Event.TimerManager.loop1_info:
         const GHC.Event.TimerManager.loop1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const Savlf_srt+232;
 },
 _cawhl() //  [R1]
         { []
         }
     {offset
       cawhl: // global
           R6 = I64[R1 + 55];
           R5 = P64[R1 + 31];
           R4 = P64[R1 + 23];
           R3 = P64[R1 + 15];
           R2 = P64[R1 + 7];
           I64[Sp - 24] = I64[R1 + 63];
           I64[Sp - 16] = I64[R1 + 71];
           P64[Sp - 8] = P64[R1 + 39];
           P64[Sp] = P64[R1 + 47];
           Sp = Sp - 24;
           call GHC.Event.TimerManager.$wloop_entry(R6,
                                                    R5,
                                                    R4,
                                                    R3,
                                                    R2) args: 40, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cawhl_info" {
     block_cawhl_info:
         const _cawhl;
         const 0;
         const 4294967326;
         const Savlf_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.094125308 UTC

[section ""data" . GHC.Event.TimerManager.loop_closure" {
     GHC.Event.TimerManager.loop_closure:
         const GHC.Event.TimerManager.loop_info;
         const 0;
 },
 GHC.Event.TimerManager.loop_entry() //  [R2]
         { []
         }
     {offset
       cawhN: // global
           R2 = R2;
           call GHC.Event.TimerManager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.loop_info" {
     GHC.Event.TimerManager.loop_info:
         const GHC.Event.TimerManager.loop_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const Savlf_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.098131672 UTC

[section ""data" . GHC.Event.TimerManager.TimerManager_closure" {
     GHC.Event.TimerManager.TimerManager_closure:
         const GHC.Event.TimerManager.TimerManager_info;
 },
 GHC.Event.TimerManager.TimerManager_slow() //  [R1]
         { []
         }
     {offset
       cawhV: // global
           R6 = I64[Sp + 32];
           R5 = P64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.TimerManager.TimerManager_entry(R6,
                                                          R5,
                                                          R4,
                                                          R3,
                                                          R2,
                                                          R1) args: 40, res: 0, upd: 8;
     }
 },
 GHC.Event.TimerManager.TimerManager_entry() //  [R2, R3, R4, R5,
                                                  R6]
         { []
         }
     {offset
       cawi0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto cawi4; else goto cawi3;
       cawi4: // global
           HpAlloc = 80;
           R1 = GHC.Event.TimerManager.TimerManager_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           I64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 80, res: 0, upd: 8;
       cawi3: // global
           I64[Hp - 72] = GHC.Event.TimerManager.TimerManager_con_info;
           P64[Hp - 64] = R2;
           P64[Hp - 56] = R3;
           P64[Hp - 48] = R4;
           P64[Hp - 40] = R5;
           P64[Hp - 32] = P64[Sp + 16];
           P64[Hp - 24] = P64[Sp + 24];
           I64[Hp - 16] = R6;
           I64[Hp - 8] = I64[Sp];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 71;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.TimerManager_info" {
     GHC.Event.TimerManager.TimerManager_info:
         const GHC.Event.TimerManager.TimerManager_entry;
         const 0;
         const 14;
         const 38654705664;
         const 0;
         const 7177;
         const GHC.Event.TimerManager.TimerManager_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.102459433 UTC

[section ""data" . GHC.Event.TimerManager.Created_closure" {
     GHC.Event.TimerManager.Created_closure:
         const GHC.Event.TimerManager.Created_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.104085522 UTC

[section ""data" . GHC.Event.TimerManager.Running_closure" {
     GHC.Event.TimerManager.Running_closure:
         const GHC.Event.TimerManager.Running_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.105775911 UTC

[section ""data" . GHC.Event.TimerManager.Dying_closure" {
     GHC.Event.TimerManager.Dying_closure:
         const GHC.Event.TimerManager.Dying_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.10729571 UTC

[section ""data" . GHC.Event.TimerManager.Finished_closure" {
     GHC.Event.TimerManager.Finished_closure:
         const GHC.Event.TimerManager.Finished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.109072163 UTC

[section ""cstring" . iawim_str" {
     iawim_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,84,105,109,101,114,77,97,110,97,103,101,114]
 },
 GHC.Event.TimerManager.TimerManager_con_entry() //  [R1]
         { []
         }
     {offset
       cawil: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.TimerManager_con_info" {
     GHC.Event.TimerManager.TimerManager_con_info:
         const GHC.Event.TimerManager.TimerManager_con_entry;
         const 12884901894;
         const 1;
         const iawim_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.112333327 UTC

[section ""relreadonly" . GHC.Event.TimerManager.State_closure_tbl" {
     GHC.Event.TimerManager.State_closure_tbl:
         const GHC.Event.TimerManager.Created_closure+1;
         const GHC.Event.TimerManager.Running_closure+2;
         const GHC.Event.TimerManager.Dying_closure+3;
         const GHC.Event.TimerManager.Finished_closure+4;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.114259112 UTC

[section ""cstring" . iawiu_str" {
     iawiu_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,67,114,101,97,116,101,100]
 },
 GHC.Event.TimerManager.Created_con_entry() //  [R1]
         { []
         }
     {offset
       cawit: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Created_con_info" {
     GHC.Event.TimerManager.Created_con_info:
         const GHC.Event.TimerManager.Created_con_entry;
         const 4294967296;
         const 3;
         const iawiu_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.118062311 UTC

[section ""cstring" . iawiB_str" {
     iawiB_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,82,117,110,110,105,110,103]
 },
 GHC.Event.TimerManager.Running_con_entry() //  [R1]
         { []
         }
     {offset
       cawiA: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Running_con_info" {
     GHC.Event.TimerManager.Running_con_info:
         const GHC.Event.TimerManager.Running_con_entry;
         const 4294967296;
         const 4294967299;
         const iawiB_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.121227551 UTC

[section ""cstring" . iawiI_str" {
     iawiI_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,68,121,105,110,103]
 },
 GHC.Event.TimerManager.Dying_con_entry() //  [R1]
         { []
         }
     {offset
       cawiH: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Dying_con_info" {
     GHC.Event.TimerManager.Dying_con_info:
         const GHC.Event.TimerManager.Dying_con_entry;
         const 4294967296;
         const 8589934595;
         const iawiI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.124392653 UTC

[section ""cstring" . iawiP_str" {
     iawiP_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,84,105,109,101,114,77,97,110,97,103,101,114,46,70,105,110,105,115,104,101,100]
 },
 GHC.Event.TimerManager.Finished_con_entry() //  [R1]
         { []
         }
     {offset
       cawiO: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.TimerManager.Finished_con_info" {
     GHC.Event.TimerManager.Finished_con_info:
         const GHC.Event.TimerManager.Finished_con_entry;
         const 4294967296;
         const 12884901891;
         const iawiP_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:31.127555433 UTC

[section ""relreadonly" . Savlf_srt" {
     Savlf_srt:
         const GHC.Event.TimerManager.$w$cshowsPrec_closure;
         const GHC.Event.TimerManager.$fShowState1_closure;
         const GHC.Event.TimerManager.$fShowState3_closure;
         const GHC.Event.TimerManager.$fShowState5_closure;
         const GHC.Event.TimerManager.$fShowState7_closure;
         const GHC.Event.Poll.new1_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.TimerManager.wakeManager1_closure;
         const GHC.Event.TimerManager.$fShowState_$cshow_closure;
         const GHC.Event.TimerManager.$weditTimeouts_closure;
         const GHC.Event.TimerManager.unregisterTimeout2_closure;
         const GHC.Event.TimerManager.unregisterTimeout1_closure;
         const Foreign.C.Error.throwErrno1_closure;
         const GHC.Event.Control.sendWakeup2_closure;
         const GHC.Event.TimerManager.$wregisterTimeout_closure;
         const GHC.Event.TimerManager.registerTimeout1_closure;
         const GHC.Event.TimerManager.updateTimeout1_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.TimerManager.shutdown1_closure;
         const GHC.Event.Internal.evtNothing_closure;
         const GHC.Event.Internal.evtRead_closure;
         const GHC.Event.Control.newControl1_closure;
         const GHC.Event.TimerManager.new2_closure;
         const GHC.Event.TimerManager.new1_closure;
         const GHC.Conc.Signal.runHandlers1_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.TimerManager.step1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const lvl1_rasDW_closure;
         const GHC.Event.TimerManager.$wloop_closure;
         const GHC.Event.TimerManager.loop1_closure;
 }]

