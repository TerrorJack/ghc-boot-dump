
==================== Raw Cmm ====================
2018-03-16 16:05:32.927960471 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:32.93191307 UTC

[section ""data" . GHC.Event.Manager.$WEventManager_closure" {
     GHC.Event.Manager.$WEventManager_closure:
         const GHC.Event.Manager.$WEventManager_info;
 },
 GHC.Event.Manager.$WEventManager_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caDqS: // global
           if ((Sp + -96) < SpLim) (likely: False) goto caDrl; else goto caDrm;
       caDrl: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$WEventManager_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       caDrm: // global
           I64[Sp - 40] = block_caDqP_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaDrw; else goto caDqQ;
       uaDrw: // global
           call _caDqP(R1) args: 0, res: 0, upd: 0;
       caDqQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$WEventManager_info" {
     GHC.Event.Manager.$WEventManager_info:
         const GHC.Event.Manager.$WEventManager_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _caDqP() //  [R1]
         { []
         }
     {offset
       caDqP: // global
           I64[Sp] = block_caDqV_info;
           _saAuv::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _saAuv::P64;
           if (R1 & 7 != 0) goto uaDrv; else goto caDqW;
       uaDrv: // global
           call _caDqV(R1) args: 0, res: 0, upd: 0;
       caDqW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDqP_info" {
     block_caDqP_info:
         const _caDqP;
         const 5;
         const 30;
 },
 _caDqV() //  [R1]
         { []
         }
     {offset
       caDqV: // global
           I64[Sp - 24] = block_caDr0_info;
           _saAux::P64 = P64[R1 + 7];
           _saAuy::P64 = P64[R1 + 15];
           _saAuA::P64 = P64[R1 + 23];
           _saAuz::I64 = I64[R1 + 31];
           R1 = P64[Sp + 16];
           I64[Sp - 16] = _saAuz::I64;
           P64[Sp - 8] = _saAuA::P64;
           P64[Sp] = _saAuy::P64;
           P64[Sp + 16] = _saAux::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaDrx; else goto caDr1;
       uaDrx: // global
           call _caDr0(R1) args: 0, res: 0, upd: 0;
       caDr1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDqV_info" {
     block_caDqV_info:
         const _caDqV;
         const 5;
         const 30;
 },
 _caDr0() //  [R1]
         { []
         }
     {offset
       caDr0: // global
           I64[Sp] = block_caDr5_info;
           _saAuC::P64 = P64[R1 + 7];
           R1 = P64[Sp + 48];
           P64[Sp + 48] = _saAuC::P64;
           if (R1 & 7 != 0) goto uaDry; else goto caDr6;
       uaDry: // global
           call _caDr5(R1) args: 0, res: 0, upd: 0;
       caDr6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDr0_info" {
     block_caDr0_info:
         const _caDr0;
         const 72;
         const 30;
 },
 _caDr5() //  [R1]
         { []
         }
     {offset
       caDr5: // global
           I64[Sp] = block_caDra_info;
           _saAuE::P64 = P64[R1 + 7];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _saAuE::P64;
           if (R1 & 7 != 0) goto uaDrz; else goto caDrb;
       uaDrz: // global
           call _caDra(R1) args: 0, res: 0, upd: 0;
       caDrb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDr5_info" {
     block_caDr5_info:
         const _caDr5;
         const 72;
         const 30;
 },
 _caDra() //  [R1]
         { []
         }
     {offset
       caDra: // global
           I64[Sp - 32] = block_caDrf_info;
           _saAuJ::P64 = P64[R1 + 7];
           _saAuK::P64 = P64[R1 + 15];
           _saAuG::I64 = I64[R1 + 23];
           _saAuH::I64 = I64[R1 + 31];
           _saAuI::I64 = I64[R1 + 39];
           R1 = P64[Sp + 64];
           I64[Sp - 24] = _saAuI::I64;
           P64[Sp - 16] = _saAuJ::P64;
           P64[Sp - 8] = _saAuK::P64;
           I64[Sp] = _saAuH::I64;
           I64[Sp + 64] = _saAuG::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaDrA; else goto caDrg;
       uaDrA: // global
           call _caDrf(R1) args: 0, res: 0, upd: 0;
       caDrg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDra_info" {
     block_caDra_info:
         const _caDra;
         const 72;
         const 30;
 },
 _caDrf() //  [R1]
         { []
         }
     {offset
       caDrf: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caDru; else goto caDrt;
       caDru: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDrt: // global
           _saAuM::P64 = P64[R1 + 7];
           I64[Hp - 104] = GHC.Event.Manager.EventManager_con_info;
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 80];
           P64[Hp - 56] = P64[Sp + 88];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _saAuM::P64;
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 96];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 103;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDrf_info" {
     block_caDrf_info:
         const _caDrf;
         const 132684;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.94705515 UTC

[section ""data" . GHC.Event.Manager.$WFdKey_closure" {
     GHC.Event.Manager.$WFdKey_closure:
         const GHC.Event.Manager.$WFdKey_info;
 },
 GHC.Event.Manager.$WFdKey_entry() //  [R2, R3]
         { []
         }
     {offset
       caDso: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDsx; else goto caDsy;
       caDsx: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$WFdKey_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDsy: // global
           I64[Sp - 16] = block_caDsl_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDsE; else goto caDsm;
       uaDsE: // global
           call _caDsl(R1) args: 0, res: 0, upd: 0;
       caDsm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$WFdKey_info" {
     GHC.Event.Manager.$WFdKey_info:
         const GHC.Event.Manager.$WFdKey_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caDsl() //  [R1]
         { []
         }
     {offset
       caDsl: // global
           I64[Sp] = block_caDsr_info;
           _saAuQ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saAuQ::I64;
           if (R1 & 7 != 0) goto uaDsD; else goto caDss;
       uaDsD: // global
           call _caDsr(R1) args: 0, res: 0, upd: 0;
       caDss: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDsl_info" {
     block_caDsl_info:
         const _caDsl;
         const 1;
         const 30;
 },
 _caDsr() //  [R1]
         { []
         }
     {offset
       caDsr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDsC; else goto caDsB;
       caDsC: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDsB: // global
           _saAuS::I64 = I64[R1 + 7];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _saAuS::I64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDsr_info" {
     block_caDsr_info:
         const _caDsr;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.957168358 UTC

[section ""data" . GHC.Event.Manager.$WFdData_closure" {
     GHC.Event.Manager.$WFdData_closure:
         const GHC.Event.Manager.$WFdData_info;
 },
 GHC.Event.Manager.$WFdData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caDt1: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caDtc; else goto caDtd;
       caDtc: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$WFdData_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caDtd: // global
           I64[Sp - 24] = block_caDsY_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaDtk; else goto caDsZ;
       uaDtk: // global
           call _caDsY(R1) args: 0, res: 0, upd: 0;
       caDsZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$WFdData_info" {
     GHC.Event.Manager.$WFdData_info:
         const GHC.Event.Manager.$WFdData_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _caDsY() //  [R1]
         { []
         }
     {offset
       caDsY: // global
           I64[Sp - 8] = block_caDt4_info;
           _saAuX::I64 = I64[R1 + 7];
           _saAuY::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _saAuY::I64;
           I64[Sp + 8] = _saAuX::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDtj; else goto caDt5;
       uaDtj: // global
           call _caDt4(R1) args: 0, res: 0, upd: 0;
       caDt5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDsY_info" {
     block_caDsY_info:
         const _caDsY;
         const 2;
         const 30;
 },
 _caDt4() //  [R1]
         { []
         }
     {offset
       caDt4: // global
           I64[Sp] = block_caDt9_info;
           _saAv0::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _saAv0::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDt4_info" {
     block_caDt4_info:
         const _caDt4;
         const 195;
         const 30;
 },
 _caDt9() //  [R1]
         { []
         }
     {offset
       caDt9: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caDti; else goto caDth;
       caDti: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDth: // global
           I64[Hp - 32] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDt9_info" {
     block_caDt9_info:
         const _caDt9;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.965235075 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState10_bytes" {
     GHC.Event.Manager.$fShowState10_bytes:
         I8[] [67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.967455623 UTC

[section ""data" . GHC.Event.Manager.$fShowState9_closure" {
     GHC.Event.Manager.$fShowState9_closure:
         const GHC.Event.Manager.$fShowState9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState9_entry() //  [R1]
         { []
         }
     {offset
       caDtM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDtN; else goto caDtO;
       caDtN: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDtO: // global
           (_caDtJ::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caDtJ::I64 == 0) goto caDtL; else goto caDtK;
       caDtL: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caDtK: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caDtJ::I64;
           R2 = GHC.Event.Manager.$fShowState10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState9_info" {
     GHC.Event.Manager.$fShowState9_info:
         const GHC.Event.Manager.$fShowState9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.97091796 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState8_bytes" {
     GHC.Event.Manager.$fShowState8_bytes:
         I8[] [82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.973096366 UTC

[section ""data" . GHC.Event.Manager.$fShowState7_closure" {
     GHC.Event.Manager.$fShowState7_closure:
         const GHC.Event.Manager.$fShowState7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState7_entry() //  [R1]
         { []
         }
     {offset
       caDu3: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDu4; else goto caDu5;
       caDu4: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDu5: // global
           (_caDu0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caDu0::I64 == 0) goto caDu2; else goto caDu1;
       caDu2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caDu1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caDu0::I64;
           R2 = GHC.Event.Manager.$fShowState8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState7_info" {
     GHC.Event.Manager.$fShowState7_info:
         const GHC.Event.Manager.$fShowState7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.976896725 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState6_bytes" {
     GHC.Event.Manager.$fShowState6_bytes:
         I8[] [68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.979105759 UTC

[section ""data" . GHC.Event.Manager.$fShowState5_closure" {
     GHC.Event.Manager.$fShowState5_closure:
         const GHC.Event.Manager.$fShowState5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState5_entry() //  [R1]
         { []
         }
     {offset
       caDuk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDul; else goto caDum;
       caDul: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDum: // global
           (_caDuh::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caDuh::I64 == 0) goto caDuj; else goto caDui;
       caDuj: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caDui: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caDuh::I64;
           R2 = GHC.Event.Manager.$fShowState6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState5_info" {
     GHC.Event.Manager.$fShowState5_info:
         const GHC.Event.Manager.$fShowState5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.983368225 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState4_bytes" {
     GHC.Event.Manager.$fShowState4_bytes:
         I8[] [82,101,108,101,97,115,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.985881617 UTC

[section ""data" . GHC.Event.Manager.$fShowState3_closure" {
     GHC.Event.Manager.$fShowState3_closure:
         const GHC.Event.Manager.$fShowState3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState3_entry() //  [R1]
         { []
         }
     {offset
       caDuB: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDuC; else goto caDuD;
       caDuC: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDuD: // global
           (_caDuy::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caDuy::I64 == 0) goto caDuA; else goto caDuz;
       caDuA: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caDuz: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caDuy::I64;
           R2 = GHC.Event.Manager.$fShowState4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState3_info" {
     GHC.Event.Manager.$fShowState3_info:
         const GHC.Event.Manager.$fShowState3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.989280996 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState2_bytes" {
     GHC.Event.Manager.$fShowState2_bytes:
         I8[] [70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.991340874 UTC

[section ""data" . GHC.Event.Manager.$fShowState1_closure" {
     GHC.Event.Manager.$fShowState1_closure:
         const GHC.Event.Manager.$fShowState1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState1_entry() //  [R1]
         { []
         }
     {offset
       caDuS: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDuT; else goto caDuU;
       caDuT: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDuU: // global
           (_caDuP::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caDuP::I64 == 0) goto caDuR; else goto caDuQ;
       caDuR: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caDuQ: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caDuP::I64;
           R2 = GHC.Event.Manager.$fShowState2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState1_info" {
     GHC.Event.Manager.$fShowState1_info:
         const GHC.Event.Manager.$fShowState1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:32.996040011 UTC

[section ""data" . GHC.Event.Manager.$w$cshowsPrec1_closure" {
     GHC.Event.Manager.$w$cshowsPrec1_closure:
         const GHC.Event.Manager.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.Manager.$w$cshowsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       caDvg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDvh; else goto caDvi;
       caDvh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDvi: // global
           I64[Sp - 16] = block_caDv6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDvB; else goto caDv7;
       uaDvB: // global
           call _caDv6(R1) args: 0, res: 0, upd: 0;
       caDv7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$w$cshowsPrec1_info" {
     GHC.Event.Manager.$w$cshowsPrec1_info:
         const GHC.Event.Manager.$w$cshowsPrec1_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const SaAZi_srt;
 },
 _caDv6() //  [R1]
         { []
         }
     {offset
       caDv6: // global
           _saAv3::P64 = P64[Sp + 8];
           _caDvf::P64 = R1 & 7;
           if (_caDvf::P64 < 4) goto uaDvy; else goto uaDvA;
       uaDvy: // global
           if (_caDvf::P64 < 3) goto uaDvz; else goto caDvc;
       uaDvz: // global
           if (_caDvf::P64 < 2) goto caDva; else goto caDvb;
       caDva: // global
           R3 = _saAv3::P64;
           R2 = GHC.Event.Manager.$fShowState9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caDvb: // global
           R3 = _saAv3::P64;
           R2 = GHC.Event.Manager.$fShowState7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caDvc: // global
           R3 = _saAv3::P64;
           R2 = GHC.Event.Manager.$fShowState5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       uaDvA: // global
           if (_caDvf::P64 < 5) goto caDvd; else goto caDve;
       caDvd: // global
           R3 = _saAv3::P64;
           R2 = GHC.Event.Manager.$fShowState3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caDve: // global
           R3 = _saAv3::P64;
           R2 = GHC.Event.Manager.$fShowState1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDv6_info" {
     block_caDv6_info:
         const _caDv6;
         const 1;
         const 133143986206;
         const SaAZi_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.001992493 UTC

[section ""data" . GHC.Event.Manager.$fShowState_$cshowsPrec_closure" {
     GHC.Event.Manager.$fShowState_$cshowsPrec_closure:
         const GHC.Event.Manager.$fShowState_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Manager.$fShowState_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       caDvQ: // global
           _saAv6::P64 = R3;
           R3 = R4;
           R2 = _saAv6::P64;
           call GHC.Event.Manager.$w$cshowsPrec1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState_$cshowsPrec_info" {
     GHC.Event.Manager.$fShowState_$cshowsPrec_info:
         const GHC.Event.Manager.$fShowState_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SaAZi_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.007678632 UTC

[section ""data" . GHC.Event.Manager.$fEqState_$c==_closure" {
     GHC.Event.Manager.$fEqState_$c==_closure:
         const GHC.Event.Manager.$fEqState_$c==_info;
 },
 GHC.Event.Manager.$fEqState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       caDwb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDwc; else goto caDwd;
       caDwc: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDwd: // global
           I64[Sp - 16] = block_caDw1_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDxO; else goto caDw2;
       uaDxO: // global
           call _caDw1(R1) args: 0, res: 0, upd: 0;
       caDw2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqState_$c==_info" {
     GHC.Event.Manager.$fEqState_$c==_info:
         const GHC.Event.Manager.$fEqState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caDw1() //  [R1]
         { []
         }
     {offset
       caDw1: // global
           _saAv9::P64 = P64[Sp + 8];
           _caDwa::P64 = R1 & 7;
           if (_caDwa::P64 < 4) goto uaDxw; else goto uaDxy;
       uaDxw: // global
           if (_caDwa::P64 < 3) goto uaDxx; else goto caDw7;
       uaDxx: // global
           if (_caDwa::P64 < 2) goto caDw5; else goto caDw6;
       caDw5: // global
           I64[Sp + 8] = block_caDwg_info;
           R1 = _saAv9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDxJ; else goto caDwi;
       uaDxJ: // global
           call _caDwg(R1) args: 0, res: 0, upd: 0;
       caDwi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caDw6: // global
           I64[Sp + 8] = block_caDwv_info;
           R1 = _saAv9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDxK; else goto caDwx;
       uaDxK: // global
           call _caDwv(R1) args: 0, res: 0, upd: 0;
       caDwx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caDw7: // global
           I64[Sp + 8] = block_caDwK_info;
           R1 = _saAv9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDxL; else goto caDwM;
       uaDxL: // global
           call _caDwK(R1) args: 0, res: 0, upd: 0;
       caDwM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uaDxy: // global
           if (_caDwa::P64 < 5) goto caDw8; else goto caDw9;
       caDw8: // global
           I64[Sp + 8] = block_caDwZ_info;
           R1 = _saAv9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDxM; else goto caDx1;
       uaDxM: // global
           call _caDwZ(R1) args: 0, res: 0, upd: 0;
       caDx1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caDw9: // global
           I64[Sp + 8] = block_caDxe_info;
           R1 = _saAv9::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDxN; else goto caDxg;
       uaDxN: // global
           call _caDxe(R1) args: 0, res: 0, upd: 0;
       caDxg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDw1_info" {
     block_caDw1_info:
         const _caDw1;
         const 1;
         const 30;
 },
 _caDwg() //  [R1]
         { []
         }
     {offset
       caDwg: // global
           if (R1 & 7 == 1) goto uaDxz; else goto uaDxA;
       uaDxz: // global
           Sp = Sp + 8;
           call _caDxq() args: 0, res: 0, upd: 0;
       uaDxA: // global
           Sp = Sp + 8;
           call _caDxm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDwg_info" {
     block_caDwg_info:
         const _caDwg;
         const 0;
         const 30;
 },
 _caDwv() //  [R1]
         { []
         }
     {offset
       caDwv: // global
           if (R1 & 7 == 2) goto uaDxB; else goto uaDxC;
       uaDxB: // global
           Sp = Sp + 8;
           call _caDxq() args: 0, res: 0, upd: 0;
       uaDxC: // global
           Sp = Sp + 8;
           call _caDxm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDwv_info" {
     block_caDwv_info:
         const _caDwv;
         const 0;
         const 30;
 },
 _caDwK() //  [R1]
         { []
         }
     {offset
       caDwK: // global
           if (R1 & 7 == 3) goto uaDxD; else goto uaDxE;
       uaDxD: // global
           Sp = Sp + 8;
           call _caDxq() args: 0, res: 0, upd: 0;
       uaDxE: // global
           Sp = Sp + 8;
           call _caDxm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDwK_info" {
     block_caDwK_info:
         const _caDwK;
         const 0;
         const 30;
 },
 _caDwZ() //  [R1]
         { []
         }
     {offset
       caDwZ: // global
           if (R1 & 7 == 4) goto uaDxF; else goto uaDxG;
       uaDxF: // global
           Sp = Sp + 8;
           call _caDxq() args: 0, res: 0, upd: 0;
       uaDxG: // global
           Sp = Sp + 8;
           call _caDxm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDwZ_info" {
     block_caDwZ_info:
         const _caDwZ;
         const 0;
         const 30;
 },
 _caDxe() //  [R1]
         { []
         }
     {offset
       caDxe: // global
           if (R1 & 7 == 5) goto uaDxH; else goto uaDxI;
       uaDxH: // global
           Sp = Sp + 8;
           call _caDxq() args: 0, res: 0, upd: 0;
       uaDxI: // global
           Sp = Sp + 8;
           call _caDxm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDxe_info" {
     block_caDxe_info:
         const _caDxe;
         const 0;
         const 30;
 },
 _caDxq() //  []
         { []
         }
     {offset
       caDxq: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caDxm() //  []
         { []
         }
     {offset
       caDxm: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.022810175 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey5_bytes" {
     GHC.Event.Manager.$fShowFdKey5_bytes:
         I8[] [70,100,75,101,121,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.024442459 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey4_bytes" {
     GHC.Event.Manager.$fShowFdKey4_bytes:
         I8[] [107,101,121,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.026088358 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey3_bytes" {
     GHC.Event.Manager.$fShowFdKey3_bytes:
         I8[] [107,101,121,85,110,105,113,117,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.027685016 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey2_bytes" {
     GHC.Event.Manager.$fShowFdKey2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.035261626 UTC

[section ""data" . GHC.Event.Manager.$w$cshowsPrec_closure" {
     GHC.Event.Manager.$w$cshowsPrec_closure:
         const GHC.Event.Manager.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Manager.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       caDyO: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saAvq_entry() //  [R1]
         { []
         }
     {offset
       caDzn: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Event.Manager.$fShowFdKey2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAvq_info" {
     sat_saAvq_info:
         const sat_saAvq_entry;
         const 1;
         const 16;
 },
 sat_saAvr_entry() //  [R1]
         { []
         }
     {offset
       caDzr: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caDzs; else goto caDzt;
       caDzs: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDzt: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caDzh_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saAvr_info" {
     sat_saAvr_info:
         const sat_saAvr_entry;
         const 4294967297;
         const 19;
 },
 _caDzh() //  [R1, R2]
         { []
         }
     {offset
       caDzh: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caDzw; else goto caDzv;
       caDzw: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caDzv: // global
           I64[Hp - 40] = sat_saAvq_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caDzh_info" {
     block_caDzh_info:
         const _caDzh;
         const 1;
         const 30;
 },
 sat_saAvs_entry() //  [R1]
         { []
         }
     {offset
       caDzx: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caDzB; else goto caDzA;
       caDzB: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDzA: // global
           _saAvl::P64 = P64[R1 + 16];
           _saAvi::I64 = I64[R1 + 24];
           I64[Hp - 24] = sat_saAvr_info;
           P64[Hp - 8] = _saAvl::P64;
           I64[Hp] = _saAvi::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Manager.$fShowFdKey3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAvs_info" {
     sat_saAvs_info:
         const sat_saAvs_entry;
         const 4294967297;
         const 19;
 },
 sat_saAvt_entry() //  [R1]
         { []
         }
     {offset
       caDzC: // global
           _saAvt::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caDzD; else goto caDzE;
       caDzE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caDzG; else goto caDzF;
       caDzG: // global
           HpAlloc = 32;
           goto caDzD;
       caDzD: // global
           R1 = _saAvt::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDzF: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saAvt::P64;
           _saAvl::P64 = P64[_saAvt::P64 + 16];
           _saAvi::I64 = I64[_saAvt::P64 + 24];
           I64[Hp - 24] = sat_saAvs_info;
           P64[Hp - 8] = _saAvl::P64;
           I64[Hp] = _saAvi::I64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saAvt_info" {
     sat_saAvt_info:
         const sat_saAvt_entry;
         const 4294967297;
         const 4294967315;
         const SaAZi_srt+48;
 },
 sat_saAvx_entry() //  [R1]
         { []
         }
     {offset
       caDzK: // global
           _saAvx::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto caDzL; else goto caDzM;
       caDzM: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caDzO; else goto caDzN;
       caDzO: // global
           HpAlloc = 32;
           goto caDzL;
       caDzL: // global
           R1 = _saAvx::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDzN: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saAvx::P64;
           _saAvl::P64 = P64[_saAvx::P64 + 16];
           _saAvh::I64 = I64[_saAvx::P64 + 24];
           _saAvi::I64 = I64[_saAvx::P64 + 32];
           I64[Hp - 24] = sat_saAvt_info;
           P64[Hp - 8] = _saAvl::P64;
           I64[Hp] = _saAvi::I64;
           I64[Sp - 24] = block_caDzH_info;
           R4 = Hp - 24;
           R3 = _saAvh::I64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saAvx_info" {
     sat_saAvx_info:
         const sat_saAvx_entry;
         const 8589934593;
         const 4294967311;
         const SaAZi_srt+48;
 },
 _caDzH() //  [R1, R2]
         { []
         }
     {offset
       caDzH: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDzR; else goto caDzQ;
       caDzR: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caDzQ: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caDzH_info" {
     block_caDzH_info:
         const _caDzH;
         const 0;
         const 30;
 },
 sat_saAvy_entry() //  [R1]
         { []
         }
     {offset
       caDzS: // global
           _saAvy::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caDzT; else goto caDzU;
       caDzU: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caDzW; else goto caDzV;
       caDzW: // global
           HpAlloc = 40;
           goto caDzT;
       caDzT: // global
           R1 = _saAvy::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDzV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saAvy::P64;
           _saAvl::P64 = P64[_saAvy::P64 + 16];
           _saAvh::I64 = I64[_saAvy::P64 + 24];
           _saAvi::I64 = I64[_saAvy::P64 + 32];
           I64[Hp - 32] = sat_saAvx_info;
           P64[Hp - 16] = _saAvl::P64;
           I64[Hp - 8] = _saAvh::I64;
           I64[Hp] = _saAvi::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Manager.$fShowFdKey4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saAvy_info" {
     sat_saAvy_info:
         const sat_saAvy_entry;
         const 8589934593;
         const 4294967311;
         const SaAZi_srt+48;
 },
 p_saAvk_entry() //  [R1, R2]
         { []
         }
     {offset
       caDzX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caDA1; else goto caDA0;
       caDA1: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDA0: // global
           _saAvh::I64 = I64[R1 + 7];
           _saAvi::I64 = I64[R1 + 15];
           I64[Hp - 32] = sat_saAvy_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = _saAvh::I64;
           I64[Hp] = _saAvi::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Manager.$fShowFdKey5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_saAvk_info" {
     p_saAvk_info:
         const p_saAvk_entry;
         const 8589934592;
         const 4294967309;
         const 4294967301;
         const SaAZi_srt+48;
 },
 sat_saAvB_entry() //  [R1]
         { []
         }
     {offset
       caDAb: // global
           _saAvB::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caDAc; else goto caDAd;
       caDAd: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDAf; else goto caDAe;
       caDAf: // global
           HpAlloc = 24;
           goto caDAc;
       caDAc: // global
           R1 = _saAvB::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDAe: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saAvB::P64;
           _saAvj::P64 = P64[_saAvB::P64 + 16];
           _saAvk::P64 = P64[_saAvB::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _saAvj::P64;
           R2 = Hp - 14;
           R1 = _saAvk::P64;
           Sp = Sp - 16;
           call p_saAvk_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saAvB_info" {
     sat_saAvB_info:
         const sat_saAvB_entry;
         const 2;
         const 4294967314;
         const SaAZi_srt+48;
 },
 GHC.Event.Manager.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       caDAj: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caDAn; else goto caDAm;
       caDAn: // global
           HpAlloc = 80;
           R1 = GHC.Event.Manager.$w$cshowsPrec_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       caDAm: // global
           I64[Hp - 72] = p_saAvk_info;
           I64[Hp - 64] = R3;
           I64[Hp - 56] = R4;
           _caDyS::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto caDAh; else goto caDAi;
       caDAh: // global
           Hp = Hp - 56;
           R2 = R5;
           R1 = _caDyS::P64;
           call p_saAvk_entry(R2, R1) args: 8, res: 0, upd: 8;
       caDAi: // global
           I64[Hp - 48] = sat_saAvB_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _caDyS::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$w$cshowsPrec_info" {
     GHC.Event.Manager.$w$cshowsPrec_info:
         const GHC.Event.Manager.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869184;
         const SaAZi_srt+48;
         const 452;
         const GHC.Event.Manager.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.058423227 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure" {
     GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure:
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caDBg: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDBk; else goto caDBl;
       caDBk: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caDBl: // global
           I64[Sp - 24] = block_caDBd_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaDBt; else goto caDBe;
       uaDBt: // global
           call _caDBd(R1) args: 0, res: 0, upd: 0;
       caDBe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey_$cshowsPrec_info" {
     GHC.Event.Manager.$fShowFdKey_$cshowsPrec_info:
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SaAZi_srt+56;
 },
 _caDBd() //  [R1]
         { []
         }
     {offset
       caDBd: // global
           I64[Sp] = block_caDBj_info;
           _saAvG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saAvG::I64;
           if (R1 & 7 != 0) goto uaDBs; else goto caDBn;
       uaDBs: // global
           call _caDBj(R1) args: 0, res: 0, upd: 0;
       caDBn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDBd_info" {
     block_caDBd_info:
         const _caDBd;
         const 2;
         const 4294967326;
         const SaAZi_srt+56;
 },
 _caDBj() //  [R1]
         { []
         }
     {offset
       caDBj: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDBj_info" {
     block_caDBj_info:
         const _caDBj;
         const 66;
         const 4294967326;
         const SaAZi_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.06501893 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey6_closure" {
     GHC.Event.Manager.$fShowFdKey6_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.067469681 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_$cshow_closure" {
     GHC.Event.Manager.$fShowFdKey_$cshow_closure:
         const GHC.Event.Manager.$fShowFdKey_$cshow_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey_$cshow_entry() //  [R2]
         { []
         }
     {offset
       caDBP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDBQ; else goto caDBR;
       caDBQ: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowFdKey_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDBR: // global
           I64[Sp - 8] = block_caDBM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDBV; else goto caDBN;
       uaDBV: // global
           call _caDBM(R1) args: 0, res: 0, upd: 0;
       caDBN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey_$cshow_info" {
     GHC.Event.Manager.$fShowFdKey_$cshow_info:
         const GHC.Event.Manager.$fShowFdKey_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SaAZi_srt+56;
 },
 _caDBM() //  [R1]
         { []
         }
     {offset
       caDBM: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDBM_info" {
     block_caDBM_info:
         const _caDBM;
         const 0;
         const 4294967326;
         const SaAZi_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.072898389 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey1_closure" {
     GHC.Event.Manager.$fShowFdKey1_closure:
         const GHC.Event.Manager.$fShowFdKey1_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey1_entry() //  [R2, R3]
         { []
         }
     {offset
       caDCc: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDCd; else goto caDCe;
       caDCd: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowFdKey1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDCe: // global
           I64[Sp - 16] = block_caDC9_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDCi; else goto caDCa;
       uaDCi: // global
           call _caDC9(R1) args: 0, res: 0, upd: 0;
       caDCa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey1_info" {
     GHC.Event.Manager.$fShowFdKey1_info:
         const GHC.Event.Manager.$fShowFdKey1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SaAZi_srt+56;
 },
 _caDC9() //  [R1]
         { []
         }
     {offset
       caDC9: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDC9_info" {
     block_caDC9_info:
         const _caDC9;
         const 1;
         const 4294967326;
         const SaAZi_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.07841675 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_$cshowList_closure" {
     GHC.Event.Manager.$fShowFdKey_$cshowList_closure:
         const GHC.Event.Manager.$fShowFdKey_$cshowList_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       caDCw: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Manager.$fShowFdKey1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey_$cshowList_info" {
     GHC.Event.Manager.$fShowFdKey_$cshowList_info:
         const GHC.Event.Manager.$fShowFdKey_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SaAZi_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.081520244 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_closure" {
     GHC.Event.Manager.$fShowFdKey_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure+3;
         const GHC.Event.Manager.$fShowFdKey_$cshow_closure+1;
         const GHC.Event.Manager.$fShowFdKey_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.084036991 UTC

[section ""data" . GHC.Event.Manager.keyUnique_closure" {
     GHC.Event.Manager.keyUnique_closure:
         const GHC.Event.Manager.keyUnique_info;
 },
 GHC.Event.Manager.keyUnique_entry() //  [R2]
         { []
         }
     {offset
       caDCL: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDCP; else goto caDCQ;
       caDCP: // global
           R2 = R2;
           R1 = GHC.Event.Manager.keyUnique_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDCQ: // global
           I64[Sp - 8] = block_caDCI_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDCU; else goto caDCJ;
       uaDCU: // global
           call _caDCI(R1) args: 0, res: 0, upd: 0;
       caDCJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.keyUnique_info" {
     GHC.Event.Manager.keyUnique_info:
         const GHC.Event.Manager.keyUnique_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDCI() //  [R1]
         { []
         }
     {offset
       caDCI: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDCT; else goto caDCS;
       caDCT: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDCS: // global
           _saAvY::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saAvY::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDCI_info" {
     block_caDCI_info:
         const _caDCI;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.090161933 UTC

[section ""data" . GHC.Event.Manager.keyFd_closure" {
     GHC.Event.Manager.keyFd_closure:
         const GHC.Event.Manager.keyFd_info;
 },
 GHC.Event.Manager.keyFd_entry() //  [R2]
         { []
         }
     {offset
       caDDc: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDDg; else goto caDDh;
       caDDg: // global
           R2 = R2;
           R1 = GHC.Event.Manager.keyFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDDh: // global
           I64[Sp - 8] = block_caDD9_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDDl; else goto caDDa;
       uaDDl: // global
           call _caDD9(R1) args: 0, res: 0, upd: 0;
       caDDa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.keyFd_info" {
     GHC.Event.Manager.keyFd_info:
         const GHC.Event.Manager.keyFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDD9() //  [R1]
         { []
         }
     {offset
       caDD9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDDk; else goto caDDj;
       caDDk: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDDj: // global
           _saAw1::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saAw1::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDD9_info" {
     block_caDD9_info:
         const _caDD9;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.096366977 UTC

[section ""data" . GHC.Event.Manager._fdCallback_closure" {
     GHC.Event.Manager._fdCallback_closure:
         const GHC.Event.Manager._fdCallback_info;
 },
 GHC.Event.Manager._fdCallback_entry() //  [R2]
         { []
         }
     {offset
       caDDD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDDE; else goto caDDF;
       caDDE: // global
           R2 = R2;
           R1 = GHC.Event.Manager._fdCallback_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDDF: // global
           I64[Sp - 8] = block_caDDA_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDDJ; else goto caDDB;
       uaDDJ: // global
           call _caDDA(R1) args: 0, res: 0, upd: 0;
       caDDB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager._fdCallback_info" {
     GHC.Event.Manager._fdCallback_info:
         const GHC.Event.Manager._fdCallback_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDDA() //  [R1]
         { []
         }
     {offset
       caDDA: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDDA_info" {
     block_caDDA_info:
         const _caDDA;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.101832793 UTC

[section ""data" . GHC.Event.Manager.fdEvents_closure" {
     GHC.Event.Manager.fdEvents_closure:
         const GHC.Event.Manager.fdEvents_info;
 },
 GHC.Event.Manager.fdEvents_entry() //  [R2]
         { []
         }
     {offset
       caDE0: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDE4; else goto caDE5;
       caDE4: // global
           R2 = R2;
           R1 = GHC.Event.Manager.fdEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDE5: // global
           I64[Sp - 8] = block_caDDX_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDE9; else goto caDDY;
       uaDE9: // global
           call _caDDX(R1) args: 0, res: 0, upd: 0;
       caDDY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.fdEvents_info" {
     GHC.Event.Manager.fdEvents_info:
         const GHC.Event.Manager.fdEvents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDDX() //  [R1]
         { []
         }
     {offset
       caDDX: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDE8; else goto caDE7;
       caDE8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDE7: // global
           _saAwd::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saAwd::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDDX_info" {
     block_caDDX_info:
         const _caDDX;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.107491326 UTC

[section ""data" . GHC.Event.Manager.fdKey_closure" {
     GHC.Event.Manager.fdKey_closure:
         const GHC.Event.Manager.fdKey_info;
 },
 GHC.Event.Manager.fdKey_entry() //  [R2]
         { []
         }
     {offset
       caDEr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDEv; else goto caDEw;
       caDEv: // global
           R2 = R2;
           R1 = GHC.Event.Manager.fdKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDEw: // global
           I64[Sp - 8] = block_caDEo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDEA; else goto caDEp;
       uaDEA: // global
           call _caDEo(R1) args: 0, res: 0, upd: 0;
       caDEp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.fdKey_info" {
     GHC.Event.Manager.fdKey_info:
         const GHC.Event.Manager.fdKey_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDEo() //  [R1]
         { []
         }
     {offset
       caDEo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDEz; else goto caDEy;
       caDEz: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDEy: // global
           _saAwh::I64 = I64[R1 + 15];
           _saAwi::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saAwh::I64;
           I64[Hp] = _saAwi::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDEo_info" {
     block_caDEo_info:
         const _caDEo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.113016289 UTC

[section ""data" . GHC.Event.Manager.emLock_closure" {
     GHC.Event.Manager.emLock_closure:
         const GHC.Event.Manager.emLock_info;
 },
 GHC.Event.Manager.emLock_entry() //  [R2]
         { []
         }
     {offset
       caDES: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDEW; else goto caDEX;
       caDEW: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emLock_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDEX: // global
           I64[Sp - 8] = block_caDEP_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDF1; else goto caDEQ;
       uaDF1: // global
           call _caDEP(R1) args: 0, res: 0, upd: 0;
       caDEQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emLock_info" {
     GHC.Event.Manager.emLock_info:
         const GHC.Event.Manager.emLock_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDEP() //  [R1]
         { []
         }
     {offset
       caDEP: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDF0; else goto caDEZ;
       caDF0: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDEZ: // global
           _saAwz::P64 = P64[R1 + 71];
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = _saAwz::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDEP_info" {
     block_caDEP_info:
         const _caDEP;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.118988377 UTC

[section ""data" . GHC.Event.Manager.emControl_closure" {
     GHC.Event.Manager.emControl_closure:
         const GHC.Event.Manager.emControl_info;
 },
 GHC.Event.Manager.emControl_entry() //  [R2]
         { []
         }
     {offset
       caDFj: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDFn; else goto caDFo;
       caDFn: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDFo: // global
           I64[Sp - 8] = block_caDFg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDFs; else goto caDFh;
       uaDFs: // global
           call _caDFg(R1) args: 0, res: 0, upd: 0;
       caDFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emControl_info" {
     GHC.Event.Manager.emControl_info:
         const GHC.Event.Manager.emControl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDFg() //  [R1]
         { []
         }
     {offset
       caDFg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caDFr; else goto caDFq;
       caDFr: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDFq: // global
           _saAwM::P64 = P64[R1 + 55];
           _saAwN::P64 = P64[R1 + 63];
           _saAwJ::I64 = I64[R1 + 87];
           _saAwK::I64 = I64[R1 + 95];
           _saAwL::I64 = I64[R1 + 103];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = _saAwM::P64;
           P64[Hp - 24] = _saAwN::P64;
           I64[Hp - 16] = _saAwJ::I64;
           I64[Hp - 8] = _saAwK::I64;
           I64[Hp] = _saAwL::I64;
           R1 = Hp - 39;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDFg_info" {
     block_caDFg_info:
         const _caDFg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.124796556 UTC

[section ""data" . GHC.Event.Manager.emUniqueSource_closure" {
     GHC.Event.Manager.emUniqueSource_closure:
         const GHC.Event.Manager.emUniqueSource_info;
 },
 GHC.Event.Manager.emUniqueSource_entry() //  [R2]
         { []
         }
     {offset
       caDFK: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDFO; else goto caDFP;
       caDFO: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emUniqueSource_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDFP: // global
           I64[Sp - 8] = block_caDFH_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDFT; else goto caDFI;
       uaDFT: // global
           call _caDFH(R1) args: 0, res: 0, upd: 0;
       caDFI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emUniqueSource_info" {
     GHC.Event.Manager.emUniqueSource_info:
         const GHC.Event.Manager.emUniqueSource_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDFH() //  [R1]
         { []
         }
     {offset
       caDFH: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDFS; else goto caDFR;
       caDFS: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDFR: // global
           _saAwX::P64 = P64[R1 + 47];
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = _saAwX::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDFH_info" {
     block_caDFH_info:
         const _caDFH;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.131173047 UTC

[section ""data" . GHC.Event.Manager.emState_closure" {
     GHC.Event.Manager.emState_closure:
         const GHC.Event.Manager.emState_info;
 },
 GHC.Event.Manager.emState_entry() //  [R2]
         { []
         }
     {offset
       caDGb: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDGf; else goto caDGg;
       caDGf: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDGg: // global
           I64[Sp - 8] = block_caDG8_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDGk; else goto caDG9;
       uaDGk: // global
           call _caDG8(R1) args: 0, res: 0, upd: 0;
       caDG9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emState_info" {
     GHC.Event.Manager.emState_info:
         const GHC.Event.Manager.emState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDG8() //  [R1]
         { []
         }
     {offset
       caDG8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDGj; else goto caDGi;
       caDGj: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDGi: // global
           _saAxb::P64 = P64[R1 + 39];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _saAxb::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDG8_info" {
     block_caDG8_info:
         const _caDG8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.137266029 UTC

[section ""data" . GHC.Event.Manager.emFds_closure" {
     GHC.Event.Manager.emFds_closure:
         const GHC.Event.Manager.emFds_info;
 },
 GHC.Event.Manager.emFds_entry() //  [R2]
         { []
         }
     {offset
       caDGC: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDGG; else goto caDGH;
       caDGG: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emFds_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDGH: // global
           I64[Sp - 8] = block_caDGz_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDGL; else goto caDGA;
       uaDGL: // global
           call _caDGz(R1) args: 0, res: 0, upd: 0;
       caDGA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emFds_info" {
     GHC.Event.Manager.emFds_info:
         const GHC.Event.Manager.emFds_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDGz() //  [R1]
         { []
         }
     {offset
       caDGz: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caDGK; else goto caDGJ;
       caDGK: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDGJ: // global
           _saAxm::P64 = P64[R1 + 15];
           _saAxn::P64 = P64[R1 + 23];
           _saAxp::P64 = P64[R1 + 31];
           _saAxo::I64 = I64[R1 + 79];
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = _saAxm::P64;
           P64[Hp - 16] = _saAxn::P64;
           P64[Hp - 8] = _saAxp::P64;
           I64[Hp] = _saAxo::I64;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDGz_info" {
     block_caDGz_info:
         const _caDGz;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.142985499 UTC

[section ""data" . GHC.Event.Manager.emBackend_closure" {
     GHC.Event.Manager.emBackend_closure:
         const GHC.Event.Manager.emBackend_info;
 },
 GHC.Event.Manager.emBackend_entry() //  [R2]
         { []
         }
     {offset
       caDH3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDH4; else goto caDH5;
       caDH4: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emBackend_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDH5: // global
           I64[Sp - 8] = block_caDH0_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDH9; else goto caDH1;
       uaDH9: // global
           call _caDH0(R1) args: 0, res: 0, upd: 0;
       caDH1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emBackend_info" {
     GHC.Event.Manager.emBackend_info:
         const GHC.Event.Manager.emBackend_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caDH0() //  [R1]
         { []
         }
     {offset
       caDH0: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDH0_info" {
     block_caDH0_info:
         const _caDH0;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.147958524 UTC

[section ""data" . GHC.Event.Manager.newDefaultBackend_closure" {
     GHC.Event.Manager.newDefaultBackend_closure:
         const GHC.Event.Manager.newDefaultBackend_info;
         const 0;
 },
 GHC.Event.Manager.newDefaultBackend_entry() //  []
         { []
         }
     {offset
       caDHp: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.newDefaultBackend_info" {
     GHC.Event.Manager.newDefaultBackend_info:
         const GHC.Event.Manager.newDefaultBackend_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaAZi_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.151042196 UTC

[section ""cstring" . GHC.Event.Manager.$trModule4_bytes" {
     GHC.Event.Manager.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.152705453 UTC

[section ""data" . GHC.Event.Manager.$trModule3_closure" {
     GHC.Event.Manager.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.154441374 UTC

[section ""cstring" . GHC.Event.Manager.$trModule2_bytes" {
     GHC.Event.Manager.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.156030402 UTC

[section ""data" . GHC.Event.Manager.$trModule1_closure" {
     GHC.Event.Manager.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.158298784 UTC

[section ""data" . GHC.Event.Manager.$trModule_closure" {
     GHC.Event.Manager.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Manager.$trModule3_closure+1;
         const GHC.Event.Manager.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.160071341 UTC

[section ""data" . $krep_raAtw_closure" {
     $krep_raAtw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.162143773 UTC

[section ""data" . $krep1_raAtx_closure" {
     $krep1_raAtx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.163862964 UTC

[section ""data" . $krep2_raAty_closure" {
     $krep2_raAty_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcEvent_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.165533849 UTC

[section ""data" . $krep3_raAtz_closure" {
     $krep3_raAtz_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcEventLifetime_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.167184856 UTC

[section ""data" . $krep4_raAtA_closure" {
     $krep4_raAtA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.16893227 UTC

[section ""data" . $krep5_raAtB_closure" {
     $krep5_raAtB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.170633916 UTC

[section ""data" . $krep6_raAtC_closure" {
     $krep6_raAtC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.172274892 UTC

[section ""data" . $krep7_raAtD_closure" {
     $krep7_raAtD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.174027203 UTC

[section ""data" . $krep8_raAtE_closure" {
     $krep8_raAtE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcBackend_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.175787718 UTC

[section ""data" . $krep9_raAtF_closure" {
     $krep9_raAtF_closure:
         const :_con_info;
         const $krep4_raAtA_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.178265805 UTC

[section ""data" . $krep10_raAtG_closure" {
     $krep10_raAtG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_raAtF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.179948617 UTC

[section ""data" . $krep11_raAtH_closure" {
     $krep11_raAtH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep9_raAtF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.181751243 UTC

[section ""data" . $krep12_raAtI_closure" {
     $krep12_raAtI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_raAty_closure+1;
         const $krep10_raAtG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.183917614 UTC

[section ""cstring" . GHC.Event.Manager.$tcFdKey2_bytes" {
     GHC.Event.Manager.$tcFdKey2_bytes:
         I8[] [70,100,75,101,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.185708078 UTC

[section ""data" . GHC.Event.Manager.$tcFdKey1_closure" {
     GHC.Event.Manager.$tcFdKey1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcFdKey2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.187421759 UTC

[section ""data" . GHC.Event.Manager.$tcFdKey_closure" {
     GHC.Event.Manager.$tcFdKey_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcFdKey1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11469896173097407196;
         const 6069269054622812669;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.189268437 UTC

[section ""data" . $krep13_raAtJ_closure" {
     $krep13_raAtJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcFdKey_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.190937069 UTC

[section ""data" . $krep14_raAtK_closure" {
     $krep14_raAtK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_raAtJ_closure+1;
         const $krep12_raAtI_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.192611415 UTC

[section ""data" . $krep15_raAtL_closure" {
     $krep15_raAtL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_raAtw_closure+1;
         const $krep13_raAtJ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.194747919 UTC

[section ""data" . GHC.Event.Manager.$tc'FdKey1_closure" {
     GHC.Event.Manager.$tc'FdKey1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_raAtx_closure+1;
         const $krep15_raAtL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.196371615 UTC

[section ""cstring" . GHC.Event.Manager.$tc'FdKey3_bytes" {
     GHC.Event.Manager.$tc'FdKey3_bytes:
         I8[] [39,70,100,75,101,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.198034958 UTC

[section ""data" . GHC.Event.Manager.$tc'FdKey2_closure" {
     GHC.Event.Manager.$tc'FdKey2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'FdKey3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.199724096 UTC

[section ""data" . GHC.Event.Manager.$tc'FdKey_closure" {
     GHC.Event.Manager.$tc'FdKey_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'FdKey2_closure+1;
         const GHC.Event.Manager.$tc'FdKey1_closure+4;
         const 5122964525573573781;
         const 3523266410810375450;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.201475732 UTC

[section ""cstring" . GHC.Event.Manager.$tcFdData2_bytes" {
     GHC.Event.Manager.$tcFdData2_bytes:
         I8[] [70,100,68,97,116,97]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.203114724 UTC

[section ""data" . GHC.Event.Manager.$tcFdData1_closure" {
     GHC.Event.Manager.$tcFdData1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcFdData2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.204802758 UTC

[section ""data" . GHC.Event.Manager.$tcFdData_closure" {
     GHC.Event.Manager.$tcFdData_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcFdData1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9572952300930290737;
         const 248149994861342082;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.207112503 UTC

[section ""data" . $krep16_raAtM_closure" {
     $krep16_raAtM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcFdData_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.208802282 UTC

[section ""data" . $krep17_raAtN_closure" {
     $krep17_raAtN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_raAtK_closure+4;
         const $krep16_raAtM_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.210984093 UTC

[section ""data" . $krep18_raAtO_closure" {
     $krep18_raAtO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raAtz_closure+1;
         const $krep17_raAtN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.212692615 UTC

[section ""data" . GHC.Event.Manager.$tc'FdData1_closure" {
     GHC.Event.Manager.$tc'FdData1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_raAtJ_closure+1;
         const $krep18_raAtO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.214379085 UTC

[section ""cstring" . GHC.Event.Manager.$tc'FdData3_bytes" {
     GHC.Event.Manager.$tc'FdData3_bytes:
         I8[] [39,70,100,68,97,116,97]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.215956139 UTC

[section ""data" . GHC.Event.Manager.$tc'FdData2_closure" {
     GHC.Event.Manager.$tc'FdData2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'FdData3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.217720496 UTC

[section ""data" . GHC.Event.Manager.$tc'FdData_closure" {
     GHC.Event.Manager.$tc'FdData_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'FdData2_closure+1;
         const GHC.Event.Manager.$tc'FdData1_closure+4;
         const 13006093439393452327;
         const 3623098721817739111;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.219559094 UTC

[section ""data" . $krep19_raAtP_closure" {
     $krep19_raAtP_closure:
         const :_con_info;
         const $krep16_raAtM_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.221692292 UTC

[section ""data" . $krep20_raAtQ_closure" {
     $krep20_raAtQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep19_raAtP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.223397335 UTC

[section ""data" . $krep21_raAtR_closure" {
     $krep21_raAtR_closure:
         const :_con_info;
         const $krep20_raAtQ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.225120376 UTC

[section ""data" . $krep22_raAtS_closure" {
     $krep22_raAtS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIntTable_closure;
         const $krep21_raAtR_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.226874242 UTC

[section ""data" . $krep23_raAtT_closure" {
     $krep23_raAtT_closure:
         const :_con_info;
         const $krep22_raAtS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.228634715 UTC

[section ""data" . $krep24_raAtU_closure" {
     $krep24_raAtU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep23_raAtT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.230380385 UTC

[section ""data" . $krep25_raAtV_closure" {
     $krep25_raAtV_closure:
         const :_con_info;
         const $krep24_raAtU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.232074258 UTC

[section ""data" . $krep26_raAtW_closure" {
     $krep26_raAtW_closure:
         const :_con_info;
         const $krep7_raAtD_closure+1;
         const $krep25_raAtV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.234256917 UTC

[section ""data" . $krep27_raAtX_closure" {
     $krep27_raAtX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcArray_closure;
         const $krep26_raAtW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.236496274 UTC

[section ""cstring" . GHC.Event.Manager.$tcState2_bytes" {
     GHC.Event.Manager.$tcState2_bytes:
         I8[] [83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.238186354 UTC

[section ""data" . GHC.Event.Manager.$tcState1_closure" {
     GHC.Event.Manager.$tcState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.23995605 UTC

[section ""data" . GHC.Event.Manager.$tcState_closure" {
     GHC.Event.Manager.$tcState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7442518771887689078;
         const 3049393439281173903;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.241748409 UTC

[section ""data" . GHC.Event.Manager.$tc'Created1_closure" {
     GHC.Event.Manager.$tc'Created1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.243409682 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Created3_bytes" {
     GHC.Event.Manager.$tc'Created3_bytes:
         I8[] [39,67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.24502952 UTC

[section ""data" . GHC.Event.Manager.$tc'Created2_closure" {
     GHC.Event.Manager.$tc'Created2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Created3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.246936874 UTC

[section ""data" . GHC.Event.Manager.$tc'Created_closure" {
     GHC.Event.Manager.$tc'Created_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Created2_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 17846748838152018769;
         const 13865095201560943193;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.248657566 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Running2_bytes" {
     GHC.Event.Manager.$tc'Running2_bytes:
         I8[] [39,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.250263166 UTC

[section ""data" . GHC.Event.Manager.$tc'Running1_closure" {
     GHC.Event.Manager.$tc'Running1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Running2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.251934175 UTC

[section ""data" . GHC.Event.Manager.$tc'Running_closure" {
     GHC.Event.Manager.$tc'Running_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Running1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 8784511774161450304;
         const 13551584807303205071;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.253715327 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Dying2_bytes" {
     GHC.Event.Manager.$tc'Dying2_bytes:
         I8[] [39,68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.255334054 UTC

[section ""data" . GHC.Event.Manager.$tc'Dying1_closure" {
     GHC.Event.Manager.$tc'Dying1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Dying2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.257072126 UTC

[section ""data" . GHC.Event.Manager.$tc'Dying_closure" {
     GHC.Event.Manager.$tc'Dying_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Dying1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 10564881478355389136;
         const 3106847497763432300;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.259260301 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Releasing2_bytes" {
     GHC.Event.Manager.$tc'Releasing2_bytes:
         I8[] [39,82,101,108,101,97,115,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.261558629 UTC

[section ""data" . GHC.Event.Manager.$tc'Releasing1_closure" {
     GHC.Event.Manager.$tc'Releasing1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Releasing2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.263302016 UTC

[section ""data" . GHC.Event.Manager.$tc'Releasing_closure" {
     GHC.Event.Manager.$tc'Releasing_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Releasing1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 3204716164798465120;
         const 4205553053946559474;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.264959734 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Finished2_bytes" {
     GHC.Event.Manager.$tc'Finished2_bytes:
         I8[] [39,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.266675697 UTC

[section ""data" . GHC.Event.Manager.$tc'Finished1_closure" {
     GHC.Event.Manager.$tc'Finished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Finished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.268322323 UTC

[section ""data" . GHC.Event.Manager.$tc'Finished_closure" {
     GHC.Event.Manager.$tc'Finished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Finished1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 8866864364616799312;
         const 2451390217632909923;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.27053814 UTC

[section ""data" . $krep28_raAtY_closure" {
     $krep28_raAtY_closure:
         const :_con_info;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.272255709 UTC

[section ""data" . $krep29_raAtZ_closure" {
     $krep29_raAtZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep28_raAtY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.273931507 UTC

[section ""cstring" . GHC.Event.Manager.$tcEventManager2_bytes" {
     GHC.Event.Manager.$tcEventManager2_bytes:
         I8[] [69,118,101,110,116,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.275611852 UTC

[section ""data" . GHC.Event.Manager.$tcEventManager1_closure" {
     GHC.Event.Manager.$tcEventManager1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcEventManager2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.277366754 UTC

[section ""data" . GHC.Event.Manager.$tcEventManager_closure" {
     GHC.Event.Manager.$tcEventManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcEventManager1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16777685112477180948;
         const 1210110422135437783;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.279191915 UTC

[section ""data" . $krep30_raAu0_closure" {
     $krep30_raAu0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcEventManager_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.280995706 UTC

[section ""data" . $krep31_raAu1_closure" {
     $krep31_raAu1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_raAtH_closure+1;
         const $krep30_raAu0_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.283048366 UTC

[section ""data" . $krep32_raAu2_closure" {
     $krep32_raAu2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_raAtB_closure+1;
         const $krep31_raAu1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.284719685 UTC

[section ""data" . $krep33_raAu3_closure" {
     $krep33_raAu3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_raAtC_closure+1;
         const $krep32_raAu2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.286807372 UTC

[section ""data" . $krep34_raAu4_closure" {
     $krep34_raAu4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_raAtZ_closure+1;
         const $krep33_raAu3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.28848635 UTC

[section ""data" . $krep35_raAu5_closure" {
     $krep35_raAu5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep27_raAtX_closure+1;
         const $krep34_raAu4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.290097496 UTC

[section ""data" . GHC.Event.Manager.$tc'EventManager1_closure" {
     GHC.Event.Manager.$tc'EventManager1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_raAtE_closure+1;
         const $krep35_raAu5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.291795762 UTC

[section ""cstring" . GHC.Event.Manager.$tc'EventManager3_bytes" {
     GHC.Event.Manager.$tc'EventManager3_bytes:
         I8[] [39,69,118,101,110,116,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.293453956 UTC

[section ""data" . GHC.Event.Manager.$tc'EventManager2_closure" {
     GHC.Event.Manager.$tc'EventManager2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'EventManager3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.295180105 UTC

[section ""data" . GHC.Event.Manager.$tc'EventManager_closure" {
     GHC.Event.Manager.$tc'EventManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'EventManager2_closure+1;
         const GHC.Event.Manager.$tc'EventManager1_closure+4;
         const 13274036699047731538;
         const 394780277405469411;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.298585977 UTC

[section ""data" . GHC.Event.Manager.$fShowState_$cshow_closure" {
     GHC.Event.Manager.$fShowState_$cshow_closure:
         const GHC.Event.Manager.$fShowState_$cshow_info;
         const 0;
 },
 GHC.Event.Manager.$fShowState_$cshow_entry() //  [R2]
         { []
         }
     {offset
       caDJ3: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDJ4; else goto caDJ5;
       caDJ4: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowState_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDJ5: // global
           I64[Sp - 8] = block_caDIT_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDJo; else goto caDIU;
       uaDJo: // global
           call _caDIT(R1) args: 0, res: 0, upd: 0;
       caDIU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState_$cshow_info" {
     GHC.Event.Manager.$fShowState_$cshow_info:
         const GHC.Event.Manager.$fShowState_$cshow_entry;
         const 0;
         const 8929237008398;
         const 4294967301;
         const SaAZi_srt+8;
 },
 _caDIT() //  [R1]
         { []
         }
     {offset
       caDIT: // global
           _caDJ2::P64 = R1 & 7;
           if (_caDJ2::P64 < 4) goto uaDJl; else goto uaDJn;
       uaDJl: // global
           if (_caDJ2::P64 < 3) goto uaDJm; else goto caDIZ;
       uaDJm: // global
           if (_caDJ2::P64 < 2) goto caDIX; else goto caDIY;
       caDIX: // global
           R1 = GHC.Event.Manager.$fShowState9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caDIY: // global
           R1 = GHC.Event.Manager.$fShowState7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caDIZ: // global
           R1 = GHC.Event.Manager.$fShowState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       uaDJn: // global
           if (_caDJ2::P64 < 5) goto caDJ0; else goto caDJ1;
       caDJ0: // global
           R1 = GHC.Event.Manager.$fShowState3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caDJ1: // global
           R1 = GHC.Event.Manager.$fShowState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDIT_info" {
     block_caDIT_info:
         const _caDIT;
         const 0;
         const 133143986206;
         const SaAZi_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.304258394 UTC

[section ""data" . GHC.Event.Manager.$fShowState_$cshowList_closure" {
     GHC.Event.Manager.$fShowState_$cshowList_closure:
         const GHC.Event.Manager.$fShowState_$cshowList_info;
         const 0;
 },
 GHC.Event.Manager.$fShowState_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       caDJI: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Manager.$w$cshowsPrec1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState_$cshowList_info" {
     GHC.Event.Manager.$fShowState_$cshowList_info:
         const GHC.Event.Manager.$fShowState_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SaAZi_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.307382936 UTC

[section ""data" . GHC.Event.Manager.$fShowState_closure" {
     GHC.Event.Manager.$fShowState_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Manager.$fShowState_$cshowsPrec_closure+3;
         const GHC.Event.Manager.$fShowState_$cshow_closure+1;
         const GHC.Event.Manager.$fShowState_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.310762138 UTC

[section ""data" . GHC.Event.Manager.$fEqFdKey_$c==_closure" {
     GHC.Event.Manager.$fEqFdKey_$c==_closure:
         const GHC.Event.Manager.$fEqFdKey_$c==_info;
 },
 GHC.Event.Manager.$fEqFdKey_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       caDJX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDK1; else goto caDK2;
       caDK1: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqFdKey_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDK2: // global
           I64[Sp - 16] = block_caDJU_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDKi; else goto caDJV;
       uaDKi: // global
           call _caDJU(R1) args: 0, res: 0, upd: 0;
       caDJV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqFdKey_$c==_info" {
     GHC.Event.Manager.$fEqFdKey_$c==_info:
         const GHC.Event.Manager.$fEqFdKey_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caDJU() //  [R1]
         { []
         }
     {offset
       caDJU: // global
           I64[Sp - 8] = block_caDK0_info;
           _saAxU::I64 = I64[R1 + 7];
           _saAxV::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _saAxV::I64;
           I64[Sp + 8] = _saAxU::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDKh; else goto caDK4;
       uaDKh: // global
           call _caDK0(R1) args: 0, res: 0, upd: 0;
       caDK4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDJU_info" {
     block_caDJU_info:
         const _caDJU;
         const 1;
         const 30;
 },
 _caDK0() //  [R1]
         { []
         }
     {offset
       caDK0: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto caDKd; else goto caDKc;
       caDKd: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caDKc: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDK0_info" {
     block_caDK0_info:
         const _caDK0;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.318350974 UTC

[section ""data" . GHC.Event.Manager.$fEqFdKey_$c/=_closure" {
     GHC.Event.Manager.$fEqFdKey_$c/=_closure:
         const GHC.Event.Manager.$fEqFdKey_$c/=_info;
 },
 GHC.Event.Manager.$fEqFdKey_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       caDKJ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDKN; else goto caDKO;
       caDKN: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqFdKey_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDKO: // global
           I64[Sp - 16] = block_caDKG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDL8; else goto caDKH;
       uaDL8: // global
           call _caDKG(R1) args: 0, res: 0, upd: 0;
       caDKH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqFdKey_$c/=_info" {
     GHC.Event.Manager.$fEqFdKey_$c/=_info:
         const GHC.Event.Manager.$fEqFdKey_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caDKG() //  [R1]
         { []
         }
     {offset
       caDKG: // global
           I64[Sp - 8] = block_caDKM_info;
           _saAy4::I64 = I64[R1 + 7];
           _saAy5::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _saAy5::I64;
           I64[Sp + 8] = _saAy4::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDL7; else goto caDKQ;
       uaDL7: // global
           call _caDKM(R1) args: 0, res: 0, upd: 0;
       caDKQ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDKG_info" {
     block_caDKG_info:
         const _caDKG;
         const 1;
         const 30;
 },
 _caDKM() //  [R1]
         { []
         }
     {offset
       caDKM: // global
           if (I64[Sp + 16] != I64[R1 + 7]) goto caDL4; else goto caDL6;
       caDL6: // global
           if (I64[Sp + 8] != I64[R1 + 15]) goto caDL4; else goto caDL5;
       caDL4: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caDL5: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDKM_info" {
     block_caDKM_info:
         const _caDKM;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.325511759 UTC

[section ""data" . GHC.Event.Manager.$fEqFdKey_closure" {
     GHC.Event.Manager.$fEqFdKey_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Manager.$fEqFdKey_$c==_closure+2;
         const GHC.Event.Manager.$fEqFdKey_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.329935269 UTC

[section ""data" . GHC.Event.Manager.$fEqState_$c/=_closure" {
     GHC.Event.Manager.$fEqState_$c/=_closure:
         const GHC.Event.Manager.$fEqState_$c/=_info;
 },
 GHC.Event.Manager.$fEqState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       caDLF: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDLG; else goto caDLH;
       caDLG: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDLH: // global
           I64[Sp - 16] = block_caDLv_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDNi; else goto caDLw;
       uaDNi: // global
           call _caDLv(R1) args: 0, res: 0, upd: 0;
       caDLw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqState_$c/=_info" {
     GHC.Event.Manager.$fEqState_$c/=_info:
         const GHC.Event.Manager.$fEqState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caDLv() //  [R1]
         { []
         }
     {offset
       caDLv: // global
           _saAyc::P64 = P64[Sp + 8];
           _caDLE::P64 = R1 & 7;
           if (_caDLE::P64 < 4) goto uaDN0; else goto uaDN2;
       uaDN0: // global
           if (_caDLE::P64 < 3) goto uaDN1; else goto caDLB;
       uaDN1: // global
           if (_caDLE::P64 < 2) goto caDLz; else goto caDLA;
       caDLz: // global
           I64[Sp + 8] = block_caDLK_info;
           R1 = _saAyc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDNd; else goto caDLM;
       uaDNd: // global
           call _caDLK(R1) args: 0, res: 0, upd: 0;
       caDLM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caDLA: // global
           I64[Sp + 8] = block_caDLZ_info;
           R1 = _saAyc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDNe; else goto caDM1;
       uaDNe: // global
           call _caDLZ(R1) args: 0, res: 0, upd: 0;
       caDM1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caDLB: // global
           I64[Sp + 8] = block_caDMe_info;
           R1 = _saAyc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDNf; else goto caDMg;
       uaDNf: // global
           call _caDMe(R1) args: 0, res: 0, upd: 0;
       caDMg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uaDN2: // global
           if (_caDLE::P64 < 5) goto caDLC; else goto caDLD;
       caDLC: // global
           I64[Sp + 8] = block_caDMt_info;
           R1 = _saAyc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDNg; else goto caDMv;
       uaDNg: // global
           call _caDMt(R1) args: 0, res: 0, upd: 0;
       caDMv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caDLD: // global
           I64[Sp + 8] = block_caDMI_info;
           R1 = _saAyc::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDNh; else goto caDMK;
       uaDNh: // global
           call _caDMI(R1) args: 0, res: 0, upd: 0;
       caDMK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDLv_info" {
     block_caDLv_info:
         const _caDLv;
         const 1;
         const 30;
 },
 _caDLK() //  [R1]
         { []
         }
     {offset
       caDLK: // global
           if (R1 & 7 == 1) goto uaDN3; else goto uaDN4;
       uaDN3: // global
           Sp = Sp + 8;
           call _caDMU() args: 0, res: 0, upd: 0;
       uaDN4: // global
           Sp = Sp + 8;
           call _caDMQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDLK_info" {
     block_caDLK_info:
         const _caDLK;
         const 0;
         const 30;
 },
 _caDLZ() //  [R1]
         { []
         }
     {offset
       caDLZ: // global
           if (R1 & 7 == 2) goto uaDN5; else goto uaDN6;
       uaDN5: // global
           Sp = Sp + 8;
           call _caDMU() args: 0, res: 0, upd: 0;
       uaDN6: // global
           Sp = Sp + 8;
           call _caDMQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDLZ_info" {
     block_caDLZ_info:
         const _caDLZ;
         const 0;
         const 30;
 },
 _caDMe() //  [R1]
         { []
         }
     {offset
       caDMe: // global
           if (R1 & 7 == 3) goto uaDN7; else goto uaDN8;
       uaDN7: // global
           Sp = Sp + 8;
           call _caDMU() args: 0, res: 0, upd: 0;
       uaDN8: // global
           Sp = Sp + 8;
           call _caDMQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDMe_info" {
     block_caDMe_info:
         const _caDMe;
         const 0;
         const 30;
 },
 _caDMt() //  [R1]
         { []
         }
     {offset
       caDMt: // global
           if (R1 & 7 == 4) goto uaDN9; else goto uaDNa;
       uaDN9: // global
           Sp = Sp + 8;
           call _caDMU() args: 0, res: 0, upd: 0;
       uaDNa: // global
           Sp = Sp + 8;
           call _caDMQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDMt_info" {
     block_caDMt_info:
         const _caDMt;
         const 0;
         const 30;
 },
 _caDMI() //  [R1]
         { []
         }
     {offset
       caDMI: // global
           if (R1 & 7 == 5) goto uaDNb; else goto uaDNc;
       uaDNb: // global
           Sp = Sp + 8;
           call _caDMU() args: 0, res: 0, upd: 0;
       uaDNc: // global
           Sp = Sp + 8;
           call _caDMQ() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caDMI_info" {
     block_caDMI_info:
         const _caDMI;
         const 0;
         const 30;
 },
 _caDMU() //  []
         { []
         }
     {offset
       caDMU: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caDMQ() //  []
         { []
         }
     {offset
       caDMQ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.343967456 UTC

[section ""data" . GHC.Event.Manager.$fEqState_closure" {
     GHC.Event.Manager.$fEqState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Manager.$fEqState_$c==_closure+2;
         const GHC.Event.Manager.$fEqState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.345668105 UTC

[section ""cstring" . lvl1_raAu6_bytes" {
     lvl1_raAu6_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.347977497 UTC

[section ""data" . lvl2_raAu7_closure" {
     lvl2_raAu7_closure:
         const lvl2_raAu7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_raAu7_entry() //  [R1]
         { []
         }
     {offset
       caDOl: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDOm; else goto caDOn;
       caDOm: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDOn: // global
           (_caDOi::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caDOi::I64 == 0) goto caDOk; else goto caDOj;
       caDOk: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caDOj: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caDOi::I64;
           R2 = lvl1_raAu6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_raAu7_info" {
     lvl2_raAu7_info:
         const lvl2_raAu7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.352319091 UTC

[section ""data" . lvl3_raAu8_closure" {
     lvl3_raAu8_closure:
         const lvl3_raAu8_info;
         const 0;
 },
 lvl3_raAu8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caDOA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDOE; else goto caDOD;
       caDOE: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl3_raAu8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caDOD: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R6 = lvl2_raAu7_closure;
           R5 = Hp - 7;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_raAu8_info" {
     lvl3_raAu8_info:
         const lvl3_raAu8_entry;
         const 0;
         const 30064771086;
         const 12884901910;
         const SaAZi_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.358291008 UTC

[section ""data" . GHC.Event.Manager.callbackTableVar_closure" {
     GHC.Event.Manager.callbackTableVar_closure:
         const GHC.Event.Manager.callbackTableVar_info;
         const 0;
 },
 GHC.Event.Manager.callbackTableVar_entry() //  [R2, R3]
         { []
         }
     {offset
       caDOQ: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caDP4; else goto caDP5;
       caDP4: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.callbackTableVar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDP5: // global
           I64[Sp - 16] = block_caDON_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDPx; else goto caDOO;
       uaDPx: // global
           call _caDON(R1) args: 0, res: 0, upd: 0;
       caDOO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.callbackTableVar_info" {
     GHC.Event.Manager.callbackTableVar_info:
         const GHC.Event.Manager.callbackTableVar_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SaAZi_srt+120;
 },
 _caDON() //  [R1]
         { []
         }
     {offset
       caDON: // global
           I64[Sp - 16] = block_caDOT_info;
           _saAys::P64 = P64[R1 + 23];
           _saAyu::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saAyu::P64;
           P64[Sp] = _saAys::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaDPw; else goto caDOU;
       uaDPw: // global
           call _caDOT(R1) args: 0, res: 0, upd: 0;
       caDOU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDON_info" {
     block_caDON_info:
         const _caDON;
         const 1;
         const 4294967326;
         const SaAZi_srt+120;
 },
 _caDOT() //  [R1]
         { []
         }
     {offset
       caDOT: // global
           I64[Sp - 8] = block_caDOY_info;
           _saAyD::P64 = R1;
           _saAyE::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saAyE::I64;
           P64[Sp + 16] = _saAyD::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDPy; else goto caDOZ;
       uaDPy: // global
           call _caDOY(R1) args: 0, res: 0, upd: 0;
       caDOZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDOT_info" {
     block_caDOT_info:
         const _caDOT;
         const 3;
         const 4294967326;
         const SaAZi_srt+120;
 },
 _caDOY() //  [R1]
         { []
         }
     {offset
       caDOY: // global
           I64[Sp - 8] = block_caDP3_info;
           _saAyF::P64 = R1;
           _saAyG::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp] = _saAyG::I64;
           P64[Sp + 32] = _saAyF::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDPz; else goto caDP9;
       uaDPz: // global
           call _caDP3(R1) args: 0, res: 0, upd: 0;
       caDP9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDOY_info" {
     block_caDOY_info:
         const _caDOY;
         const 68;
         const 4294967326;
         const SaAZi_srt+120;
 },
 _caDP3() //  [R1]
         { []
         }
     {offset
       caDP3: // global
           _saAyD::P64 = P64[Sp + 32];
           _saAyE::I64 = I64[Sp + 16];
           _saAyF::P64 = P64[Sp + 40];
           _saAyJ::I64 = I64[R1 + 7] & 31;
           if (%MO_S_Gt_W64(_saAyE::I64,
                            _saAyJ::I64)) goto caDPq; else goto caDPs;
       caDPs: // global
           if (%MO_S_Gt_W64(_saAyJ::I64,
                            I64[Sp + 8])) goto caDPq; else goto caDPr;
       caDPq: // global
           R4 = _saAyJ::I64;
           R3 = _saAyD::P64;
           R2 = _saAyF::P64;
           Sp = Sp + 48;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caDPr: // global
           R1 = P64[P64[Sp + 24] + ((_saAyJ::I64 - _saAyE::I64 << 3) + 24)] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDP3_info" {
     block_caDP3_info:
         const _caDP3;
         const 197;
         const 4294967326;
         const SaAZi_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.368708233 UTC

[section ""data" . GHC.Event.Manager.wakeManager1_closure" {
     GHC.Event.Manager.wakeManager1_closure:
         const GHC.Event.Manager.wakeManager1_info;
 },
 GHC.Event.Manager.wakeManager1_entry() //  []
         { []
         }
     {offset
       caDQ5: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.wakeManager1_info" {
     GHC.Event.Manager.wakeManager1_info:
         const GHC.Event.Manager.wakeManager1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.372050058 UTC

[section ""data" . GHC.Event.Manager.wakeManager_closure" {
     GHC.Event.Manager.wakeManager_closure:
         const GHC.Event.Manager.wakeManager_info;
 },
 GHC.Event.Manager.wakeManager_entry() //  [R2]
         { []
         }
     {offset
       caDQh: // global
           R2 = R2;
           call GHC.Event.Manager.wakeManager1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.wakeManager_info" {
     GHC.Event.Manager.wakeManager_info:
         const GHC.Event.Manager.wakeManager_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.377875386 UTC

[section ""data" . GHC.Event.Manager.cleanup1_closure" {
     GHC.Event.Manager.cleanup1_closure:
         const GHC.Event.Manager.cleanup1_info;
 },
 GHC.Event.Manager.cleanup1_entry() //  [R2]
         { []
         }
     {offset
       caDQv: // global
           if ((Sp + -64) < SpLim) (likely: False) goto caDQz; else goto caDQA;
       caDQz: // global
           R2 = R2;
           R1 = GHC.Event.Manager.cleanup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDQA: // global
           I64[Sp - 8] = block_caDQs_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDRt; else goto caDQt;
       uaDRt: // global
           call _caDQs(R1) args: 0, res: 0, upd: 0;
       caDQt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.cleanup1_info" {
     GHC.Event.Manager.cleanup1_info:
         const GHC.Event.Manager.cleanup1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caDQs() //  [R1]
         { []
         }
     {offset
       caDQs: // global
           I64[Sp - 56] = block_caDQy_info;
           _saAz1::P64 = P64[R1 + 39];
           _saAz6::P64 = P64[R1 + 55];
           _saAz7::P64 = P64[R1 + 63];
           _saAz8::P64 = P64[R1 + 71];
           _saAz3::I64 = I64[R1 + 87];
           _saAz4::I64 = I64[R1 + 95];
           _saAz5::I64 = I64[R1 + 103];
           R1 = P64[R1 + 7];
           I64[Sp - 48] = _saAz3::I64;
           I64[Sp - 40] = _saAz4::I64;
           I64[Sp - 32] = _saAz5::I64;
           P64[Sp - 24] = _saAz6::P64;
           P64[Sp - 16] = _saAz7::P64;
           P64[Sp - 8] = _saAz8::P64;
           P64[Sp] = _saAz1::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uaDRs; else goto caDQC;
       uaDRs: // global
           call _caDQy(R1) args: 0, res: 0, upd: 0;
       caDQC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDQs_info" {
     block_caDQs_info:
         const _caDQs;
         const 0;
         const 30;
 },
 _caDQy() //  [R1]
         { []
         }
     {offset
       caDQy: // global
           _saAz1::P64 = P64[Sp + 56];
           _saAz8::P64 = P64[Sp + 48];
           _saAza::P64 = P64[R1 + 7];
           _saAze::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saAz1::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saAz1::P64);
           I64[Sp] = block_caDQJ_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saAz8::P64;
           P64[Sp + 48] = _saAze::P64;
           P64[Sp + 56] = _saAza::P64;
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDQy_info" {
     block_caDQy_info:
         const _caDQy;
         const 455;
         const 30;
 },
 _caDQJ() //  []
         { []
         }
     {offset
       caDQJ: // global
           I64[Sp] = block_caDQL_info;
           R2 = P64[Sp + 56];
           R1 = P64[Sp + 48];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDQJ_info" {
     block_caDQJ_info:
         const _caDQJ;
         const 455;
         const 30;
 },
 _caDQL() //  []
         { []
         }
     {offset
       caDQL: // global
           I64[Sp] = block_caDQN_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDQL_info" {
     block_caDQL_info:
         const _caDQL;
         const 6599;
         const 30;
 },
 _caDQN() //  []
         { []
         }
     {offset
       caDQN: // global
           _saAz4::I64 = I64[Sp + 16];
           _saAz6::P64 = P64[Sp + 32];
           (_saAzt::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saAzy::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saAz4::I64)));
           I64[Sp + 16] = block_caDR3_info;
           R1 = _saAz6::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaDRu; else goto caDR4;
       uaDRu: // global
           call _caDR3(R1) args: 0, res: 0, upd: 0;
       caDR4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDQN_info" {
     block_caDQN_info:
         const _caDQN;
         const 7623;
         const 30;
 },
 _caDR3() //  [R1]
         { []
         }
     {offset
       caDR3: // global
           _saAz5::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caDRa; else goto caDRe;
       caDRa: // global
           (_saAzE::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saAz5::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caDRe: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saAzM::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saAz5::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDR3_info" {
     block_caDR3_info:
         const _caDR3;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.392491555 UTC

[section ""data" . GHC.Event.Manager.cleanup_closure" {
     GHC.Event.Manager.cleanup_closure:
         const GHC.Event.Manager.cleanup_info;
 },
 GHC.Event.Manager.cleanup_entry() //  [R2]
         { []
         }
     {offset
       caDS5: // global
           R2 = R2;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.cleanup_info" {
     GHC.Event.Manager.cleanup_info:
         const GHC.Event.Manager.cleanup_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.397076153 UTC

[section ""data" . GHC.Event.Manager.finished1_closure" {
     GHC.Event.Manager.finished1_closure:
         const GHC.Event.Manager.finished1_info;
 },
 sat_saAA7_entry() //  [R1]
         { []
         }
     {offset
       caDSw: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDSx; else goto caDSy;
       caDSx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDSy: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caDSp_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaDSF; else goto caDSq;
       uaDSF: // global
           call _caDSp(R1) args: 0, res: 0, upd: 0;
       caDSq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saAA7_info" {
     sat_saAA7_info:
         const sat_saAA7_entry;
         const 1;
         const 16;
 },
 _caDSp() //  [R1]
         { []
         }
     {offset
       caDSp: // global
           if (R1 & 7 == 5) goto caDSu; else goto caDSt;
       caDSu: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caDSt: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caDSp_info" {
     block_caDSp_info:
         const _caDSp;
         const 0;
         const 30;
 },
 GHC.Event.Manager.finished1_entry() //  [R2]
         { []
         }
     {offset
       caDSG: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caDSH; else goto caDSI;
       caDSH: // global
           R2 = R2;
           R1 = GHC.Event.Manager.finished1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDSI: // global
           I64[Sp - 8] = block_caDSg_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDSM; else goto caDSh;
       uaDSM: // global
           call _caDSg(R1) args: 0, res: 0, upd: 0;
       caDSh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.finished1_info" {
     GHC.Event.Manager.finished1_info:
         const GHC.Event.Manager.finished1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caDSg() //  [R1]
         { []
         }
     {offset
       caDSg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDSL; else goto caDSK;
       caDSL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDSK: // global
           _saAA5::P64 = P64[P64[R1 + 39] + 8];
           I64[Hp - 16] = sat_saAA7_info;
           P64[Hp] = _saAA5::P64;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDSg_info" {
     block_caDSg_info:
         const _caDSg;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.405661029 UTC

[section ""data" . GHC.Event.Manager.finished_closure" {
     GHC.Event.Manager.finished_closure:
         const GHC.Event.Manager.finished_info;
 },
 GHC.Event.Manager.finished_entry() //  [R2]
         { []
         }
     {offset
       caDTe: // global
           R2 = R2;
           call GHC.Event.Manager.finished1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.finished_info" {
     GHC.Event.Manager.finished_info:
         const GHC.Event.Manager.finished_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.409131452 UTC

[section ""data" . GHC.Event.Manager.release2_closure" {
     GHC.Event.Manager.release2_closure:
         const GHC.Event.Manager.release2_info;
 },
 GHC.Event.Manager.release2_entry() //  [R2]
         { []
         }
     {offset
       caDTq: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDTu; else goto caDTt;
       caDTu: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Manager.release2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDTt: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.Manager.Releasing_closure+4;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.release2_info" {
     GHC.Event.Manager.release2_info:
         const GHC.Event.Manager.release2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.413782608 UTC

[section ""data" . GHC.Event.Manager.release1_closure" {
     GHC.Event.Manager.release1_closure:
         const GHC.Event.Manager.release1_info;
         const 0;
 },
 GHC.Event.Manager.release1_entry() //  [R2]
         { []
         }
     {offset
       caDTH: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDTI; else goto caDTJ;
       caDTI: // global
           R2 = R2;
           R1 = GHC.Event.Manager.release1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDTJ: // global
           I64[Sp - 8] = block_caDTE_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDU3; else goto caDTF;
       uaDU3: // global
           call _caDTE(R1) args: 0, res: 0, upd: 0;
       caDTF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.release1_info" {
     GHC.Event.Manager.release1_info:
         const GHC.Event.Manager.release1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaAZi_srt+136;
 },
 _caDTE() //  [R1]
         { []
         }
     {offset
       caDTE: // global
           I64[Sp - 16] = block_caDTM_info;
           R2 = GHC.Event.Manager.release2_closure+1;
           _saAAn::P64 = P64[R1 + 63];
           _saAAl::I64 = I64[R1 + 103];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _saAAn::P64;
           I64[Sp] = _saAAl::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDTE_info" {
     block_caDTE_info:
         const _caDTE;
         const 0;
         const 4294967326;
         const SaAZi_srt+136;
 },
 _caDTM() //  [R1]
         { []
         }
     {offset
       caDTM: // global
           I64[Sp] = block_caDTO_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaDU4; else goto caDTR;
       uaDU4: // global
           call _caDTO(R1) args: 0, res: 0, upd: 0;
       caDTR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDTM_info" {
     block_caDTM_info:
         const _caDTM;
         const 130;
         const 4294967326;
         const SaAZi_srt+136;
 },
 _caDTO() //  [R1]
         { []
         }
     {offset
       caDTO: // global
           if (R1 & 7 == 2) goto caDU1; else goto caDTX;
       caDU1: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       caDTX: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDTO_info" {
     block_caDTO_info:
         const _caDTO;
         const 130;
         const 4294967326;
         const SaAZi_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.422270272 UTC

[section ""data" . GHC.Event.Manager.release_closure" {
     GHC.Event.Manager.release_closure:
         const GHC.Event.Manager.release_info;
         const 0;
 },
 GHC.Event.Manager.release_entry() //  [R2]
         { []
         }
     {offset
       caDUs: // global
           R2 = R2;
           call GHC.Event.Manager.release1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.release_info" {
     GHC.Event.Manager.release_info:
         const GHC.Event.Manager.release_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaAZi_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.426350668 UTC

[section ""data" . GHC.Event.Manager.shutdown2_closure" {
     GHC.Event.Manager.shutdown2_closure:
         const GHC.Event.Manager.shutdown2_info;
 },
 GHC.Event.Manager.shutdown2_entry() //  [R2]
         { []
         }
     {offset
       caDUE: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDUI; else goto caDUH;
       caDUI: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Manager.shutdown2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDUH: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.Manager.Dying_closure+3;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.shutdown2_info" {
     GHC.Event.Manager.shutdown2_info:
         const GHC.Event.Manager.shutdown2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.431259832 UTC

[section ""data" . GHC.Event.Manager.shutdown1_closure" {
     GHC.Event.Manager.shutdown1_closure:
         const GHC.Event.Manager.shutdown1_info;
         const 0;
 },
 GHC.Event.Manager.shutdown1_entry() //  [R2]
         { []
         }
     {offset
       caDUV: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDUW; else goto caDUX;
       caDUW: // global
           R2 = R2;
           R1 = GHC.Event.Manager.shutdown1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDUX: // global
           I64[Sp - 8] = block_caDUS_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaDVh; else goto caDUT;
       uaDVh: // global
           call _caDUS(R1) args: 0, res: 0, upd: 0;
       caDUT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.shutdown1_info" {
     GHC.Event.Manager.shutdown1_info:
         const GHC.Event.Manager.shutdown1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaAZi_srt+152;
 },
 _caDUS() //  [R1]
         { []
         }
     {offset
       caDUS: // global
           I64[Sp - 16] = block_caDV0_info;
           R2 = GHC.Event.Manager.shutdown2_closure+1;
           _saAAI::P64 = P64[R1 + 63];
           _saAAF::I64 = I64[R1 + 95];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _saAAI::P64;
           I64[Sp] = _saAAF::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDUS_info" {
     block_caDUS_info:
         const _caDUS;
         const 0;
         const 4294967326;
         const SaAZi_srt+152;
 },
 _caDV0() //  [R1]
         { []
         }
     {offset
       caDV0: // global
           I64[Sp] = block_caDV2_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaDVi; else goto caDV5;
       uaDVi: // global
           call _caDV2(R1) args: 0, res: 0, upd: 0;
       caDV5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDV0_info" {
     block_caDV0_info:
         const _caDV0;
         const 130;
         const 4294967326;
         const SaAZi_srt+152;
 },
 _caDV2() //  [R1]
         { []
         }
     {offset
       caDV2: // global
           if (R1 & 7 == 2) goto caDVf; else goto caDVb;
       caDVf: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
       caDVb: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDV2_info" {
     block_caDV2_info:
         const _caDV2;
         const 130;
         const 4294967326;
         const SaAZi_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.439418725 UTC

[section ""data" . GHC.Event.Manager.shutdown_closure" {
     GHC.Event.Manager.shutdown_closure:
         const GHC.Event.Manager.shutdown_info;
         const 0;
 },
 GHC.Event.Manager.shutdown_entry() //  [R2]
         { []
         }
     {offset
       caDVG: // global
           R2 = R2;
           call GHC.Event.Manager.shutdown1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.shutdown_info" {
     GHC.Event.Manager.shutdown_info:
         const GHC.Event.Manager.shutdown_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaAZi_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.442452815 UTC

[section ""cstring" . lvl4_raAu9_bytes" {
     lvl4_raAu9_bytes:
         I8[] [70,97,105,108,101,100,32,119,104,105,108,101,32,97,116,116,101,109,112,116,105,110,103,32,116,111,32,109,111,100,105,102,121,32,114,101,103,105,115,116,114,97,116,105,111,110,32,111,102,32,102,105,108,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.444085615 UTC

[section ""cstring" . lvl5_raAua_bytes" {
     lvl5_raAua_bytes:
         I8[] [32,97,116,32,108,111,99,97,116,105,111,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.447913224 UTC

[section ""data" . $wlvl_raAub_closure" {
     $wlvl_raAub_closure:
         const $wlvl_raAub_info;
         const 0;
 },
 sat_saAAU_entry() //  [R1]
         { []
         }
     {offset
       caDW3: // global
           R3 = P64[R1 + 16];
           R2 = lvl5_raAua_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAAU_info" {
     sat_saAAU_info:
         const sat_saAAU_entry;
         const 1;
         const 16;
 },
 sat_saAAV_entry() //  [R1]
         { []
         }
     {offset
       caDW7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caDW8; else goto caDW9;
       caDW8: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDW9: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caDVX_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saAAV_info" {
     sat_saAAV_info:
         const sat_saAAV_entry;
         const 4294967297;
         const 19;
 },
 _caDVX() //  [R1, R2]
         { []
         }
     {offset
       caDVX: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caDWc; else goto caDWb;
       caDWc: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caDWb: // global
           I64[Hp - 40] = sat_saAAU_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caDVX_info" {
     block_caDVX_info:
         const _caDVX;
         const 1;
         const 30;
 },
 $wlvl_raAub_entry() //  [R2, R3]
         { []
         }
     {offset
       caDWf: // global
           _saAAP::I64 = R3;
           _saAAO::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto caDWg; else goto caDWh;
       caDWh: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caDWj; else goto caDWi;
       caDWj: // global
           HpAlloc = 32;
           goto caDWg;
       caDWg: // global
           R3 = _saAAP::I64;
           R2 = _saAAO::P64;
           R1 = $wlvl_raAub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caDWi: // global
           I64[Hp - 24] = sat_saAAV_info;
           P64[Hp - 8] = _saAAO::P64;
           I64[Hp] = _saAAP::I64;
           I64[Sp - 8] = block_caDWd_info;
           R3 = Hp - 24;
           R2 = lvl4_raAu9_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_raAub_info" {
     $wlvl_raAub_info:
         const $wlvl_raAub_entry;
         const 0;
         const 12884901902;
         const 8589934606;
         const SaAZi_srt+168;
 },
 _caDWd() //  [R1]
         { []
         }
     {offset
       caDWd: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDWd_info" {
     block_caDWd_info:
         const _caDWd;
         const 0;
         const 4294967326;
         const SaAZi_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.457727969 UTC

[section ""cstring" . lvl6_raAuc_bytes" {
     lvl6_raAuc_bytes:
         I8[] [114,101,103,105,115,116,101,114,67,111,110,116,114,111,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.460566492 UTC

[section ""data" . lvl7_raAud_closure" {
     lvl7_raAud_closure:
         const lvl7_raAud_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_raAud_entry() //  [R1]
         { []
         }
     {offset
       caDWO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDWP; else goto caDWQ;
       caDWP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caDWQ: // global
           (_caDWL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caDWL::I64 == 0) goto caDWN; else goto caDWM;
       caDWN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caDWM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caDWL::I64;
           R2 = lvl6_raAuc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_raAud_info" {
     lvl7_raAud_info:
         const lvl7_raAud_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.464478558 UTC

[section ""data" . GHC.Event.Manager.new5_closure" {
     GHC.Event.Manager.new5_closure:
         const GHC.Event.Manager.new5_info;
 },
 GHC.Event.Manager.new5_entry() //  [R2]
         { []
         }
     {offset
       caDX3: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDX7; else goto caDX6;
       caDX7: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Manager.new5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDX6: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.Manager.Finished_closure+5;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new5_info" {
     GHC.Event.Manager.new5_info:
         const GHC.Event.Manager.new5_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.467834993 UTC

[section ""data" . GHC.Event.Manager.new4_closure" {
     GHC.Event.Manager.new4_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.471716578 UTC

[section ""data" . x_raAue_closure" {
     x_raAue_closure:
         const x_raAue_info;
 },
 x_raAue_entry() //  []
         { []
         }
     {offset
       caDXt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDXG; else goto caDXH;
       caDXH: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caDXJ; else goto caDXI;
       caDXJ: // global
           HpAlloc = 96;
           goto caDXG;
       caDXG: // global
           R1 = x_raAue_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caDXI: // global
           I64[Hp - 88] = stg_MUT_ARR_PTRS_DIRTY_info;
           I64[Hp - 80] = 8;
           I64[Hp - 72] = 9;
           _caDXi::I64 = Hp - 88;
           _caDXj::I64 = _caDXi::I64 + 24;
           goto caDXk;
       caDXk: // global
           if (_caDXj::I64 < (_caDXi::I64 + 88)) goto caDXm; else goto caDXl;
       caDXm: // global
           P64[_caDXj::I64] = GHC.Event.IntTable.Empty_closure+1;
           _caDXj::I64 = _caDXj::I64 + 8;
           goto caDXk;
       caDXl: // global
           I64[Sp - 16] = block_caDXn_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _caDXi::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . x_raAue_info" {
     x_raAue_info:
         const x_raAue_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caDXn() //  [R1]
         { []
         }
     {offset
       caDXn: // global
           I64[Sp - 8] = block_caDXp_info;
           R2 = 8;
           _saAB4::P64 = R1;
           R1 = 8;
           P64[Sp] = _saAB4::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDXn_info" {
     block_caDXn_info:
         const _caDXn;
         const 1;
         const 30;
 },
 _caDXp() //  [R1]
         { []
         }
     {offset
       caDXp: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caDXN; else goto caDXM;
       caDXN: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDXM: // global
           _saAB1::P64 = P64[Sp + 16];
           _saAB4::P64 = P64[Sp + 8];
           _saAB8::I64 = R1 + 16;
           I64[_saAB8::I64] = 0;
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = _saAB4::P64;
           _caDXv::P64 = Hp - 46;
           call MO_Touch(_caDXv::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _saAB1::P64;
           P64[Hp - 8] = _caDXv::P64;
           I64[Hp] = _saAB8::I64;
           I64[Sp + 16] = block_caDXy_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDXp_info" {
     block_caDXp_info:
         const _caDXp;
         const 2;
         const 30;
 },
 _caDXy() //  [R1]
         { []
         }
     {offset
       caDXy: // global
           I64[Sp - 8] = block_caDXA_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDXy_info" {
     block_caDXy_info:
         const _caDXy;
         const 0;
         const 30;
 },
 _caDXA() //  [R1]
         { []
         }
     {offset
       caDXA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDXR; else goto caDXQ;
       caDXR: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDXQ: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_caDXD_info;
           R2 = Hp - 7;
           _saABi::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _saABi::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDXA_info" {
     block_caDXA_info:
         const _caDXA;
         const 1;
         const 30;
 },
 _caDXD() //  []
         { []
         }
     {offset
       caDXD: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caDXU; else goto caDXT;
       caDXU: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caDXT: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDXD_info" {
     block_caDXD_info:
         const _caDXD;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.48473872 UTC

[section ""data" . GHC.Event.Manager.$wxs_closure" {
     GHC.Event.Manager.$wxs_closure:
         const GHC.Event.Manager.$wxs_info;
 },
 GHC.Event.Manager.$wxs_entry() //  [R2]
         { []
         }
     {offset
       caDYr: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caDYs; else goto caDYt;
       caDYs: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$wxs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caDYt: // global
           if (R2 == 1) goto caDYq; else goto caDYp;
       caDYq: // global
           I64[Sp - 8] = block_caDYI_info;
           Sp = Sp - 8;
           call x_raAue_entry() args: 8, res: 8, upd: 8;
       caDYp: // global
           I64[Sp - 16] = block_caDYv_info;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call x_raAue_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$wxs_info" {
     GHC.Event.Manager.$wxs_info:
         const GHC.Event.Manager.$wxs_entry;
         const 0;
         const 14;
         const 8589934596;
 },
 _caDYI() //  [R1]
         { []
         }
     {offset
       caDYI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDYN; else goto caDYM;
       caDYN: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDYM: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDYI_info" {
     block_caDYI_info:
         const _caDYI;
         const 0;
         const 30;
 },
 _caDYv() //  [R1]
         { []
         }
     {offset
       caDYv: // global
           I64[Sp] = block_caDYA_info;
           R2 = I64[Sp + 8] - 1;
           P64[Sp + 8] = R1;
           call GHC.Event.Manager.$wxs_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDYv_info" {
     block_caDYv_info:
         const _caDYv;
         const 65;
         const 30;
 },
 _caDYA() //  [R1]
         { []
         }
     {offset
       caDYA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caDYG; else goto caDYF;
       caDYG: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caDYF: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDYA_info" {
     block_caDYA_info:
         const _caDYA;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.493211416 UTC

[section ""data" . GHC.Event.Manager.new3_closure" {
     GHC.Event.Manager.new3_closure:
         const GHC.Event.Manager.new3_info;
         const 0;
 },
 GHC.Event.Manager.new3_entry() //  [R2]
         { []
         }
     {offset
       caDZa: // global
           R3 = R2;
           R2 = lvl7_raAud_closure;
           call $wlvl_raAub_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new3_info" {
     GHC.Event.Manager.new3_info:
         const GHC.Event.Manager.new3_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SaAZi_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.504798715 UTC

[section ""data" . GHC.Event.Manager.new2_closure" {
     GHC.Event.Manager.new2_closure:
         const GHC.Event.Manager.new2_info;
         const 0;
 },
 sat_saAC5_entry() //  [R1]
         { []
         }
     {offset
       caDZF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caDZG; else goto caDZH;
       caDZG: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caDZH: // global
           I64[Sp - 24] = block_caDZw_info;
           R2 = GHC.Event.Manager.new5_closure+1;
           _saABC::P64 = P64[R1 + 7];
           _saABJ::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _saABC::P64;
           P64[Sp - 8] = _saABJ::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAC5_info" {
     sat_saAC5_info:
         const sat_saAC5_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _caDZw() //  [R1]
         { []
         }
     {offset
       caDZw: // global
           I64[Sp] = block_caDZy_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaDZY; else goto caDZz;
       uaDZY: // global
           call _caDZy(R1) args: 0, res: 0, upd: 0;
       caDZz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDZw_info" {
     block_caDZw_info:
         const _caDZw;
         const 2;
         const 30;
 },
 _caDZy() //  [R1]
         { []
         }
     {offset
       caDZy: // global
           if (R1 & 7 == 5) goto caDZD; else goto caDZC;
       caDZD: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caDZC: // global
           _saABC::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caDZL_info;
           R1 = _saABC::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaDZZ; else goto caDZM;
       uaDZZ: // global
           call _caDZL(R1) args: 0, res: 0, upd: 0;
       caDZM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDZy_info" {
     block_caDZy_info:
         const _caDZy;
         const 2;
         const 30;
 },
 _caDZL() //  [R1]
         { []
         }
     {offset
       caDZL: // global
           I64[Sp] = block_caDZQ_info;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 39];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDZL_info" {
     block_caDZL_info:
         const _caDZL;
         const 1;
         const 30;
 },
 _caDZQ() //  []
         { []
         }
     {offset
       caDZQ: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caDZQ_info" {
     block_caDZQ_info:
         const _caDZQ;
         const 1;
         const 30;
 },
 GHC.Event.Manager.new2_entry() //  [R2]
         { []
         }
     {offset
       caE0a: // global
           if ((Sp + -136) < SpLim) (likely: False) goto caE0s; else goto caE0t;
       caE0s: // global
           R2 = R2;
           R1 = GHC.Event.Manager.new2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caE0t: // global
           I64[Sp - 16] = block_caDZl_info;
           _saABC::P64 = R2;
           R2 = 32;
           P64[Sp - 8] = _saABC::P64;
           Sp = Sp - 16;
           call GHC.Event.Manager.$wxs_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new2_info" {
     GHC.Event.Manager.new2_info:
         const GHC.Event.Manager.new2_entry;
         const 0;
         const 270582939662;
         const 8589934597;
         const SaAZi_srt+192;
 },
 _caDZl() //  [R1]
         { []
         }
     {offset
       caDZl: // global
           I64[Sp - 8] = block_caDZn_info;
           R2 = GHC.Types.False_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDZl_info" {
     block_caDZl_info:
         const _caDZl;
         const 1;
         const 201863462942;
         const SaAZi_srt+192;
 },
 _caDZn() //  [R1]
         { []
         }
     {offset
       caDZn: // global
           I64[Sp - 8] = block_caDZp_info;
           _saABJ::P64 = R1;
           R1 = GHC.Event.Manager.Created_closure+1;
           P64[Sp] = _saABJ::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDZn_info" {
     block_caDZn_info:
         const _caDZn;
         const 2;
         const 167503724574;
         const SaAZi_srt+192;
 },
 _caDZp() //  [R1]
         { []
         }
     {offset
       caDZp: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto caE0y; else goto caE0x;
       caE0y: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caE0x: // global
           I64[Hp - 64] = stg_ARR_WORDS_info;
           I64[Hp - 56] = 8;
           I64[Hp - 40] = sat_saAC5_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_caE01_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           _saABM::P64 = R1;
           R1 = R1;
           P64[Sp - 8] = Hp - 64;
           P64[Sp] = _saABM::P64;
           Sp = Sp - 16;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caDZp_info" {
     block_caDZp_info:
         const _caDZp;
         const 3;
         const 167503724574;
         const SaAZi_srt+192;
 },
 _caE01() //  []
         { []
         }
     {offset
       caE01: // global
           I64[Sp] = block_caE03_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE01_info" {
     block_caE01_info:
         const _caE01;
         const 5;
         const 167503724574;
         const SaAZi_srt+192;
 },
 _caE03() //  [R1]
         { []
         }
     {offset
       caE03: // global
           I64[Sp - 8] = block_caE05_info;
           R2 = GHC.Tuple.()_closure+1;
           _saACb::P64 = R1;
           R1 = R1;
           P64[Sp] = _saACb::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE03_info" {
     block_caE03_info:
         const _caE03;
         const 5;
         const 167503724574;
         const SaAZi_srt+192;
 },
 _caE05() //  []
         { []
         }
     {offset
       caE05: // global
           I64[Sp] = block_caE07_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uaE1Y; else goto caE08;
       uaE1Y: // global
           call _caE07(R1) args: 0, res: 0, upd: 0;
       caE08: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE05_info" {
     block_caE05_info:
         const _caE05;
         const 6;
         const 167503724574;
         const SaAZi_srt+192;
 },
 _caE07() //  [R1]
         { []
         }
     {offset
       caE07: // global
           I64[Sp - 16] = block_caE0d_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _saACd::P64 = R1;
           _saACe::P64 = P64[R1 + 7];
           _saACg::P64 = P64[R1 + 23];
           R1 = 32;
           P64[Sp - 8] = _saACg::P64;
           P64[Sp] = _saACe::P64;
           P64[Sp + 48] = _saACd::P64;
           Sp = Sp - 16;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE07_info" {
     block_caE07_info:
         const _caE07;
         const 2054;
         const 167503724574;
         const SaAZi_srt+192;
 },
 _caE0d() //  [R1]
         { []
         }
     {offset
       caE0d: // global
           I64[Sp - 8] = 0;
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 56] = R1;
           Sp = Sp - 8;
           call _caE0K() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caE0d_info" {
     block_caE0d_info:
         const _caE0d;
         const 8;
         const 81604378654;
         const SaAZi_srt+200;
 },
 _caE0K() //  []
         { []
         }
     {offset
       caE0K: // global
           I64[Sp - 8] = block_caE0N_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaE22; else goto caE0P;
       uaE22: // global
           call _caE0N(R1) args: 0, res: 0, upd: 0;
       caE0P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caE0N() //  [R1]
         { []
         }
     {offset
       caE0N: // global
           if (R1 & 7 == 1) goto uaE1V; else goto caE13;
       uaE1V: // global
           Sp = Sp + 16;
           goto uaE24;
       caE13: // global
           _saACl::P64 = P64[Sp + 72];
           _saACu::I64 = I64[Sp + 8];
           _saACx::P64 = P64[R1 + 6];
           _saACy::P64 = P64[R1 + 14];
           call MO_WriteBarrier();
           P64[(_saACl::P64 + 24) + (_saACu::I64 << 3)] = _saACx::P64;
           I64[_saACl::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saACl::P64 + 24) + ((I64[_saACl::P64 + 8] << 3) + (_saACu::I64 >> 7))] = 1 :: W8;
           if (_saACu::I64 == 31) goto uaE1W; else goto caE11;
       uaE1W: // global
           Sp = Sp + 16;
           goto uaE24;
       uaE24: // global
           call _caE0F() args: 0, res: 0, upd: 0;
       caE11: // global
           P64[Sp + 16] = _saACy::P64;
           I64[Sp + 8] = _saACu::I64 + 1;
           Sp = Sp + 8;
           call _caE0K() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caE0N_info" {
     block_caE0N_info:
         const _caE0N;
         const 202;
         const 81604378654;
         const SaAZi_srt+200;
 },
 _caE0F() //  []
         { []
         }
     {offset
       caE0F: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caE0J; else goto caE0I;
       caE0J: // global
           HpAlloc = 40;
           I64[Sp] = block_caE0F_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caE0I: // global
           _saACl::P64 = P64[Sp + 56];
           I64[_saACl::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = GHC.Event.Manager.$fShowFdKey6_closure+1;
           P64[Hp - 16] = GHC.Event.Manager.new4_closure+1;
           P64[Hp - 8] = _saACl::P64;
           I64[Hp] = 32;
           I64[Sp] = block_caE0m_info;
           R1 = Hp - 31;
           if (R1 & 7 != 0) goto uaE21; else goto caE0n;
       uaE21: // global
           call _caE0m(R1) args: 0, res: 0, upd: 0;
       caE0n: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE0F_info" {
     block_caE0F_info:
         const _caE0F;
         const 8;
         const 81604378654;
         const SaAZi_srt+200;
 },
 _caE0m() //  [R1]
         { []
         }
     {offset
       caE0m: // global
           I64[Sp - 16] = block_caE0r_info;
           _saACG::P64 = P64[R1 + 7];
           _saACH::P64 = P64[R1 + 15];
           _saACJ::P64 = P64[R1 + 23];
           _saACI::I64 = I64[R1 + 31];
           R1 = P64[Sp + 48];
           P64[Sp - 8] = _saACJ::P64;
           I64[Sp] = _saACI::I64;
           P64[Sp + 48] = _saACH::P64;
           P64[Sp + 56] = _saACG::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaE20; else goto caE16;
       uaE20: // global
           call _caE0r(R1) args: 0, res: 0, upd: 0;
       caE16: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE0m_info" {
     block_caE0m_info:
         const _caE0m;
         const 4104;
         const 81604378654;
         const SaAZi_srt+200;
 },
 _caE0r() //  [R1]
         { []
         }
     {offset
       caE0r: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caE1g; else goto caE1f;
       caE1g: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caE1f: // global
           _saACO::P64 = P64[R1 + 7];
           _saACP::P64 = P64[R1 + 15];
           _saACL::I64 = I64[R1 + 23];
           _saACM::I64 = I64[R1 + 31];
           _saACN::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saACL::I64;
           I64[Sp - 40] = block_caE1b_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 7;
           R2 = P64[Sp + 32];
           R1 = P64[Sp + 24];
           I64[Sp - 48] = stg_ap_v_info;
           I64[Sp - 32] = _saACM::I64;
           I64[Sp - 24] = _saACN::I64;
           P64[Sp - 16] = _saACO::P64;
           P64[Sp - 8] = _saACP::P64;
           I64[Sp] = _saACL::I64;
           Sp = Sp - 48;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE0r_info" {
     block_caE0r_info:
         const _caE0r;
         const 138;
         const 81604378654;
         const SaAZi_srt+200;
 },
 _caE1b() //  [R1]
         { []
         }
     {offset
       caE1b: // global
           I64[Sp] = block_caE1d_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaE26; else goto caE1i;
       uaE26: // global
           call _caE1d(R1) args: 0, res: 0, upd: 0;
       caE1i: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE1b_info" {
     block_caE1b_info:
         const _caE1b;
         const 5327;
         const 81604378654;
         const SaAZi_srt+200;
 },
 _caE1d() //  [R1]
         { []
         }
     {offset
       caE1d: // global
           if (R1 & 7 == 1) goto caE1o; else goto caE1v;
       caE1o: // global
           R2 = I64[Sp + 40];
           Sp = Sp + 128;
           call GHC.Event.Manager.new3_entry(R2) args: 8, res: 0, upd: 8;
       caE1v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caE1y; else goto caE1x;
       caE1y: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caE1x: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_caE1s_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 7;
           R2 = P64[Sp + 72];
           R1 = P64[Sp + 64];
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE1d_info" {
     block_caE1d_info:
         const _caE1d;
         const 5327;
         const 81604378654;
         const SaAZi_srt+200;
 },
 _caE1s() //  [R1]
         { []
         }
     {offset
       caE1s: // global
           I64[Sp] = block_caE1u_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaE27; else goto caE1A;
       uaE27: // global
           call _caE1u(R1) args: 0, res: 0, upd: 0;
       caE1A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE1s_info" {
     block_caE1s_info:
         const _caE1s;
         const 29903;
         const 4294967326;
         const SaAZi_srt+232;
 },
 _caE1u() //  [R1]
         { []
         }
     {offset
       caE1u: // global
           _saACN::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto caE1G; else goto caE1K;
       caE1G: // global
           R2 = _saACN::I64;
           Sp = Sp + 128;
           call GHC.Event.Manager.new3_entry(R2) args: 8, res: 0, upd: 8;
       caE1K: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caE1N; else goto caE1M;
       caE1N: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caE1M: // global
           I64[Hp - 104] = GHC.Event.Manager.EventManager_con_info;
           P64[Hp - 96] = P64[Sp + 120];
           P64[Hp - 88] = P64[Sp + 112];
           P64[Hp - 80] = P64[Sp + 104];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 88];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 80];
           I64[Hp - 24] = I64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _saACN::I64;
           R1 = Hp - 103;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE1u_info" {
     block_caE1u_info:
         const _caE1u;
         const 29903;
         const 4294967326;
         const SaAZi_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.544260603 UTC

[section ""data" . GHC.Event.Manager.newWith_closure" {
     GHC.Event.Manager.newWith_closure:
         const GHC.Event.Manager.newWith_info;
         const 0;
 },
 GHC.Event.Manager.newWith_entry() //  [R2]
         { []
         }
     {offset
       caE3Z: // global
           R2 = R2;
           call GHC.Event.Manager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.newWith_info" {
     GHC.Event.Manager.newWith_info:
         const GHC.Event.Manager.newWith_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaAZi_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.547949486 UTC

[section ""data" . GHC.Event.Manager.new1_closure" {
     GHC.Event.Manager.new1_closure:
         const GHC.Event.Manager.new1_info;
         const 0;
 },
 GHC.Event.Manager.new1_entry() //  []
         { []
         }
     {offset
       caE4c: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caE4d; else goto caE4e;
       caE4d: // global
           R1 = GHC.Event.Manager.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caE4e: // global
           I64[Sp - 8] = block_caE4a_info;
           Sp = Sp - 8;
           call GHC.Event.EPoll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new1_info" {
     GHC.Event.Manager.new1_info:
         const GHC.Event.Manager.new1_entry;
         const 0;
         const 2814754062073870;
         const 4294967299;
         const SaAZi_srt+88;
 },
 _caE4a() //  [R1]
         { []
         }
     {offset
       caE4a: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.Manager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE4a_info" {
     block_caE4a_info:
         const _caE4a;
         const 0;
         const 4294967326;
         const SaAZi_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.552808596 UTC

[section ""data" . GHC.Event.Manager.new_closure" {
     GHC.Event.Manager.new_closure:
         const GHC.Event.Manager.new_info;
         const 0;
 },
 GHC.Event.Manager.new_entry() //  []
         { []
         }
     {offset
       caE4s: // global
           call GHC.Event.Manager.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new_info" {
     GHC.Event.Manager.new_info:
         const GHC.Event.Manager.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaAZi_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.556960224 UTC

[section ""data" . GHC.Event.Manager.closeFd_3_closure" {
     GHC.Event.Manager.closeFd_3_closure:
         const GHC.Event.Manager.closeFd_3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.closeFd_3_entry() //  [R1]
         { []
         }
     {offset
       caE4H: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caE4P; else goto caE4Q;
       caE4P: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caE4Q: // global
           (_caE4C::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caE4C::I64 == 0) goto caE4E; else goto caE4D;
       caE4E: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caE4D: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caE4C::I64;
           I64[Sp - 24] = block_caE4F_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Event.Manager.fdEvents_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_3_info" {
     GHC.Event.Manager.closeFd_3_info:
         const GHC.Event.Manager.closeFd_3_entry;
         const 0;
         const 21;
 },
 _caE4F() //  [R1]
         { []
         }
     {offset
       caE4F: // global
           I64[Sp] = block_caE4K_info;
           R2 = R1;
           call GHC.Event.Internal.$wgo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_caE4F_info" {
     block_caE4F_info:
         const _caE4F;
         const 0;
         const 30;
 },
 _caE4K() //  [R1]
         { []
         }
     {offset
       caE4K: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caE4U; else goto caE4T;
       caE4U: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       caE4T: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caE4K_info" {
     block_caE4K_info:
         const _caE4K;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.565720095 UTC

[section ""data" . GHC.Event.Manager.$weventsOf_closure" {
     GHC.Event.Manager.$weventsOf_closure:
         const GHC.Event.Manager.$weventsOf_info;
         const 0;
 },
 GHC.Event.Manager.$weventsOf_entry() //  [R2]
         { []
         }
     {offset
       caE5k: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caE5l; else goto caE5m;
       caE5l: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$weventsOf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caE5m: // global
           I64[Sp - 8] = block_caE5d_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaE5Z; else goto caE5e;
       uaE5Z: // global
           call _caE5d(R1) args: 0, res: 0, upd: 0;
       caE5e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$weventsOf_info" {
     GHC.Event.Manager.$weventsOf_info:
         const GHC.Event.Manager.$weventsOf_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SaAZi_srt+248;
 },
 _caE5d() //  [R1]
         { []
         }
     {offset
       caE5d: // global
           if (R1 & 7 == 1) goto caE5h; else goto caE5i;
       caE5h: // global
           I64[Sp] = block_caE5p_info;
           R1 = GHC.Event.Manager.closeFd_3_closure;
           if (R1 & 7 != 0) goto uaE5X; else goto caE5r;
       uaE5X: // global
           call _caE5p(R1) args: 0, res: 0, upd: 0;
       caE5r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caE5i: // global
           I64[Sp - 16] = block_caE5y_info;
           _saADa::P64 = R1;
           _saADd::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _saADd::P64;
           P64[Sp] = _saADa::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaE5Y; else goto caE5A;
       uaE5Y: // global
           call _caE5y(R1) args: 0, res: 0, upd: 0;
       caE5A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE5d_info" {
     block_caE5d_info:
         const _caE5d;
         const 0;
         const 4294967326;
         const SaAZi_srt+256;
 },
 _caE5p() //  [R1]
         { []
         }
     {offset
       caE5p: // global
           R1 = I64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE5p_info" {
     block_caE5p_info:
         const _caE5p;
         const 0;
         const 30;
 },
 _caE5y() //  [R1]
         { []
         }
     {offset
       caE5y: // global
           if (R1 & 7 == 1) goto caE5H; else goto caE5R;
       caE5H: // global
           I64[Sp + 16] = block_caE5E_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaE60; else goto caE5I;
       uaE60: // global
           call _caE5E(R1) args: 0, res: 0, upd: 0;
       caE5I: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caE5R: // global
           _saADa::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caE5P_info;
           R3 = _saADa::P64;
           R2 = GHC.Event.Manager.fdEvents_closure+1;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE5y_info" {
     block_caE5y_info:
         const _caE5y;
         const 2;
         const 30;
 },
 _caE5E() //  [R1]
         { []
         }
     {offset
       caE5E: // global
           R1 = I64[R1 + 31];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE5E_info" {
     block_caE5E_info:
         const _caE5E;
         const 0;
         const 30;
 },
 _caE5P() //  [R1]
         { []
         }
     {offset
       caE5P: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.Internal.$wgo1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE5P_info" {
     block_caE5P_info:
         const _caE5P;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.578197768 UTC

[section ""data" . GHC.Event.Manager.eventsOf_closure" {
     GHC.Event.Manager.eventsOf_closure:
         const GHC.Event.Manager.eventsOf_info;
         const 0;
 },
 GHC.Event.Manager.eventsOf_entry() //  [R2]
         { []
         }
     {offset
       caE6B: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caE6F; else goto caE6G;
       caE6F: // global
           R2 = R2;
           R1 = GHC.Event.Manager.eventsOf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caE6G: // global
           I64[Sp - 8] = block_caE6z_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.eventsOf_info" {
     GHC.Event.Manager.eventsOf_info:
         const GHC.Event.Manager.eventsOf_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SaAZi_srt+248;
 },
 _caE6z() //  [R1]
         { []
         }
     {offset
       caE6z: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caE6J; else goto caE6I;
       caE6J: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caE6I: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE6z_info" {
     block_caE6z_info:
         const _caE6z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.584767313 UTC

[section ""data" . GHC.Event.Manager.closeFd_2_closure" {
     GHC.Event.Manager.closeFd_2_closure:
         const GHC.Event.Manager.closeFd_2_info;
 },
 GHC.Event.Manager.closeFd_2_entry() //  [R2]
         { []
         }
     {offset
       caE74: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caE75; else goto uaE7w;
       caE75: // global
           R2 = R2;
           R1 = GHC.Event.Manager.closeFd_2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uaE7w: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _caE6U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_2_info" {
     GHC.Event.Manager.closeFd_2_info:
         const GHC.Event.Manager.closeFd_2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caE6U() //  []
         { []
         }
     {offset
       caE6U: // global
           _saADq::P64 = P64[Sp];
           I64[Sp] = block_caE6X_info;
           R1 = _saADq::P64;
           if (R1 & 7 != 0) goto uaE7y; else goto caE6Y;
       uaE7y: // global
           call _caE6X(R1) args: 0, res: 0, upd: 0;
       caE6Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caE6X() //  [R1]
         { []
         }
     {offset
       caE6X: // global
           if (R1 & 7 == 1) goto caE71; else goto caE72;
       caE71: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caE72: // global
           I64[Sp - 8] = block_caE7c_info;
           _saADu::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saADu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaE7z; else goto caE7e;
       uaE7z: // global
           call _caE7c(R1) args: 0, res: 0, upd: 0;
       caE7e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE6X_info" {
     block_caE6X_info:
         const _caE6X;
         const 0;
         const 30;
 },
 _caE7c() //  [R1]
         { []
         }
     {offset
       caE7c: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caE7k; else goto caE7j;
       caE7k: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caE7j: // global
           _saADz::P64 = P64[R1 + 7];
           _saADw::I64 = I64[R1 + 15];
           _saADx::I64 = I64[R1 + 23];
           _saADC::I64 = I64[R1 + 31] & 7 | 4;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _saADC::I64;
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saADw::I64;
           I64[Hp] = _saADx::I64;
           I64[Sp] = block_caE7t_info;
           R3 = Hp - 31;
           R2 = Hp - 15;
           R1 = _saADz::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE7c_info" {
     block_caE7c_info:
         const _caE7c;
         const 1;
         const 30;
 },
 _caE7t() //  []
         { []
         }
     {offset
       caE7t: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caE6U() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caE7t_info" {
     block_caE7t_info:
         const _caE7t;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.611206448 UTC

[section ""data" . GHC.Event.Manager.closeFd1_closure" {
     GHC.Event.Manager.closeFd1_closure:
         const GHC.Event.Manager.closeFd1_info;
         const 0;
 },
 $wgo_saAEy_entry() //  [R1, R2]
         { []
         }
     {offset
       caE9e: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caE9f; else goto caE9g;
       caE9f: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caE9g: // global
           I64[Sp - 24] = block_caE97_info;
           _saAEy::P64 = R1;
           _saAE7::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saAE7::I64;
           P64[Sp - 8] = _saAEy::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaE9D; else goto caE98;
       uaE9D: // global
           call _caE97(R1) args: 0, res: 0, upd: 0;
       caE98: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saAEy_info" {
     $wgo_saAEy_info:
         const $wgo_saAEy_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caE97() //  [R1]
         { []
         }
     {offset
       caE97: // global
           if (R1 & 7 == 1) goto caE9b; else goto caE9c;
       caE9b: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caE9c: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caE9o; else goto caE9n;
       caE9o: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caE9n: // global
           _saAEC::P64 = P64[R1 + 6];
           _saAED::P64 = P64[R1 + 14];
           _saAEB::I64 = I64[R1 + 22];
           if (_saAEB::I64 == I64[Sp + 8]) goto caE9C; else goto caE9w;
       caE9C: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saAEC::P64;
           R3 = _saAED::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caE9w: // global
           Hp = Hp - 16;
           I64[Sp] = block_caE9s_info;
           R2 = _saAED::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saAEC::P64;
           I64[Sp + 16] = _saAEB::I64;
           call $wgo_saAEy_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE97_info" {
     block_caE97_info:
         const _caE97;
         const 66;
         const 30;
 },
 _caE9s() //  [R1, R2, R3]
         { []
         }
     {offset
       caE9s: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caE9z; else goto caE9y;
       caE9z: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caE9y: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE9s_info" {
     block_caE9s_info:
         const _caE9s;
         const 130;
         const 30;
 },
 $wio_saAEi_entry() //  [R1, R2]
         { []
         }
     {offset
       caE9E: // global
           if ((Sp + -80) < SpLim) (likely: False) goto caE9F; else goto caE9G;
       caE9F: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caE9G: // global
           I64[Sp - 40] = block_caE8O_info;
           _saADI::P64 = P64[R1 + 6];
           _saADP::P64 = P64[R1 + 14];
           _saAE6::P64 = P64[R1 + 22];
           _saAE7::I64 = I64[R1 + 30];
           R1 = P64[R2 + 8];
           P64[Sp - 32] = _saADI::P64;
           P64[Sp - 24] = _saADP::P64;
           P64[Sp - 16] = _saAE6::P64;
           I64[Sp - 8] = _saAE7::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaEbi; else goto caE8P;
       uaEbi: // global
           call _caE8O(R1) args: 0, res: 0, upd: 0;
       caE8P: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saAEi_info" {
     $wio_saAEi_info:
         const $wio_saAEi_entry;
         const 4294967299;
         const 279172874248;
         const 8589934597;
         const SaAZi_srt+200;
 },
 _caE8O() //  [R1]
         { []
         }
     {offset
       caE8O: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caE9J; else goto caE9I;
       caE9J: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caE9I: // global
           _saAE7::I64 = I64[Sp + 32];
           _saAEp::P64 = P64[R1 + 7];
           _saAEr::P64 = P64[R1 + 15];
           _saAEq::I64 = I64[R1 + 23];
           _saAEs::I64 = _saAE7::I64 & (I64[_saAEp::P64 + 8] - 1);
           _saAEx::P64 = P64[(_saAEp::P64 + 24) + (_saAEs::I64 << 3)];
           I64[Hp - 8] = $wgo_saAEy_info;
           I64[Hp] = _saAE7::I64;
           I64[Sp - 24] = block_caE9K_info;
           R2 = _saAEx::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _saAEr::P64;
           I64[Sp - 8] = _saAEs::I64;
           I64[Sp] = _saAEq::I64;
           P64[Sp + 32] = _saAEp::P64;
           Sp = Sp - 24;
           call $wgo_saAEy_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE8O_info" {
     block_caE8O_info:
         const _caE8O;
         const 516;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caE9K() //  [R1, R2, R3]
         { []
         }
     {offset
       caE9K: // global
           I64[Sp - 16] = block_caE9O_info;
           _saAEM::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saAEM::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEbj; else goto caEaL;
       uaEbj: // global
           call _caE9O(R1) args: 0, res: 0, upd: 0;
       caEaL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE9K_info" {
     block_caE9K_info:
         const _caE9K;
         const 391;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caE9O() //  [R1]
         { []
         }
     {offset
       caE9O: // global
           if (R1 & 7 == 1) goto caEaR; else goto caEaW;
       caEaR: // global
           P64[Sp + 72] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saAEP() args: 0, res: 0, upd: 0;
       caEaW: // global
           _saAEp::P64 = P64[Sp + 72];
           _saAEs::I64 = I64[Sp + 32];
           _saAEM::P64 = P64[Sp + 16];
           _saAEO::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saAEp::P64 + 24) + (_saAEs::I64 << 3)] = _saAEO::P64;
           I64[_saAEp::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saAEp::P64 + 24) + ((I64[_saAEp::P64 + 8] << 3) + (_saAEs::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caEaU_info;
           _saAFf::P64 = R1;
           R1 = _saAEM::P64;
           P64[Sp + 72] = _saAFf::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaEbk; else goto caEaX;
       uaEbk: // global
           call _caEaU(R1) args: 0, res: 0, upd: 0;
       caEaX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE9O_info" {
     block_caE9O_info:
         const _caE9O;
         const 1545;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEaU() //  [R1]
         { []
         }
     {offset
       caEaU: // global
           _saAFf::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto caEb3; else goto caEb7;
       caEb3: // global
           P64[Sp + 56] = _saAFf::P64;
           Sp = Sp + 32;
           goto uaEbo;
       caEb7: // global
           _saAEq::I64 = I64[Sp + 24];
           _saAEr::P64 = P64[Sp + 8];
           I64[_saAEq::I64] = I64[_saAEq::I64] - 1;
           call MO_Touch(_saAEr::P64);
           P64[Sp + 56] = _saAFf::P64;
           Sp = Sp + 32;
           goto uaEbo;
       uaEbo: // global
           call _saAEP() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEaU_info" {
     block_caEaU_info:
         const _caEaU;
         const 391;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _saAEP() //  []
         { []
         }
     {offset
       saAEP: // global
           I64[Sp - 8] = block_caE9T_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEbp; else goto caE9V;
       uaEbp: // global
           call _caE9T(R1) args: 0, res: 0, upd: 0;
       caE9V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caE9T() //  [R1]
         { []
         }
     {offset
       caE9T: // global
           if (R1 & 7 == 1) goto caEa2; else goto caEa9;
       caEa2: // global
           I64[Sp + 32] = block_caE9Z_info;
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       caEa9: // global
           I64[Sp] = block_caEa7_info;
           _saAEW::P64 = P64[R1 + 6];
           R2 = _saAEW::P64;
           P64[Sp + 32] = _saAEW::P64;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE9T_info" {
     block_caE9T_info:
         const _caE9T;
         const 516;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caE9Z() //  []
         { []
         }
     {offset
       caE9Z: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caE9Z_info" {
     block_caE9Z_info:
         const _caE9Z;
         const 0;
         const 30;
 },
 _caEa7() //  [R1]
         { []
         }
     {offset
       caEa7: // global
           _saAEY::I64 = R1 & 7;
           if (_saAEY::I64 != 0) goto caEau; else goto caEaH;
       caEau: // global
           I64[Sp] = block_caEak_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saAEY::I64;
           if (R1 & 7 != 0) goto uaEbm; else goto caEal;
       uaEbm: // global
           call _caEak(R1) args: 0, res: 0, upd: 0;
       caEal: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caEaH: // global
           _saAE6::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caEaG_info;
           R2 = _saAE6::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEa7_info" {
     block_caEa7_info:
         const _caEa7;
         const 4;
         const 4294967326;
         const SaAZi_srt+200;
 },
 _caEak() //  [R1]
         { []
         }
     {offset
       caEak: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEay; else goto caEax;
       caEay: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEax: // global
           _saAF0::P64 = P64[R1 + 7];
           _saAF2::P64 = P64[R1 + 23];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_caEaq_info;
           R5 = GHC.Event.Internal.evtNothing_closure;
           R4 = Hp - 7;
           R3 = P64[Sp + 24];
           R2 = _saAF0::P64;
           R1 = _saAF2::P64;
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEak_info" {
     block_caEak_info:
         const _caEak;
         const 132;
         const 4294967326;
         const SaAZi_srt+200;
 },
 _caEaq() //  []
         { []
         }
     {offset
       caEaq: // global
           _saAE6::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caEas_info;
           R2 = _saAE6::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEaq_info" {
     block_caEaq_info:
         const _caEaq;
         const 132;
         const 30;
 },
 _caEas() //  []
         { []
         }
     {offset
       caEas: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEas_info" {
     block_caEas_info:
         const _caEas;
         const 1;
         const 30;
 },
 _caEaG() //  []
         { []
         }
     {offset
       caEaG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEaG_info" {
     block_caEaG_info:
         const _caEaG;
         const 1;
         const 30;
 },
 io_saAFp_entry() //  [R1, R2]
         { []
         }
     {offset
       caEby: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEbz; else goto caEbA;
       caEbz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEbA: // global
           I64[Sp - 16] = block_caEbv_info;
           _saAEi::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saAEi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEbE; else goto caEbw;
       uaEbE: // global
           call _caEbv(R1) args: 0, res: 0, upd: 0;
       caEbw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saAFp_info" {
     io_saAFp_info:
         const io_saAFp_entry;
         const 1;
         const 279172874249;
         const 8589934597;
         const SaAZi_srt+200;
 },
 _caEbv() //  [R1]
         { []
         }
     {offset
       caEbv: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saAEi_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEbv_info" {
     block_caEbv_info:
         const _caEbv;
         const 1;
         const 279172874270;
         const SaAZi_srt+200;
 },
 sat_saAFD_entry() //  [R1, R2]
         { []
         }
     {offset
       caEbQ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEbR; else goto caEbS;
       caEbR: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEbS: // global
           I64[Sp - 16] = block_caEbO_info;
           _saAFA::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAFA::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAFD_info" {
     sat_saAFD_info:
         const sat_saAFD_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEbO() //  []
         { []
         }
     {offset
       caEbO: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEbO_info" {
     block_caEbO_info:
         const _caEbO;
         const 1;
         const 30;
 },
 sat_saAFy_entry() //  [R1]
         { []
         }
     {offset
       caEbZ: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAFp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAFy_info" {
     sat_saAFy_info:
         const sat_saAFy_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaAZi_srt+200;
 },
 sat_saAFz_entry() //  [R1]
         { []
         }
     {offset
       caEc7: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAFz_info" {
     sat_saAFz_info:
         const sat_saAFz_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saAFR_entry() //  [R1, R2]
         { []
         }
     {offset
       caEcp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEcq; else goto caEcr;
       caEcq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEcr: // global
           I64[Sp - 16] = block_caEcn_info;
           _saAFO::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAFO::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAFR_info" {
     sat_saAFR_info:
         const sat_saAFR_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEcn() //  []
         { []
         }
     {offset
       caEcn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEcn_info" {
     block_caEcn_info:
         const _caEcn;
         const 1;
         const 30;
 },
 sat_saAFM_entry() //  [R1]
         { []
         }
     {offset
       caEcy: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAFp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAFM_info" {
     sat_saAFM_info:
         const sat_saAFM_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaAZi_srt+200;
 },
 sat_saAFN_entry() //  [R1]
         { []
         }
     {offset
       caEcG: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAFN_info" {
     sat_saAFN_info:
         const sat_saAFN_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saAFW_entry() //  [R1]
         { []
         }
     {offset
       caEcN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEcO; else goto caEcP;
       caEcO: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caEcP: // global
           I64[Sp - 24] = block_caEcg_info;
           _saAEh::P64 = P64[R1 + 7];
           _saAFp::P64 = P64[R1 + 15];
           R1 = _saAEh::P64;
           P64[Sp - 16] = _saAEh::P64;
           P64[Sp - 8] = _saAFp::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAFW_info" {
     sat_saAFW_info:
         const sat_saAFW_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaAZi_srt+200;
 },
 _caEcg() //  [R1]
         { []
         }
     {offset
       caEcg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEcS; else goto caEcR;
       caEcS: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEcR: // global
           I64[Hp - 56] = sat_saAFR_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAFM_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAFN_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEcJ_info;
           R2 = Hp - 54;
           _saAFL::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAFL::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEcg_info" {
     block_caEcg_info:
         const _caEcg;
         const 2;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEcJ() //  [R1]
         { []
         }
     {offset
       caEcJ: // global
           _saAEh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEcL_info;
           R2 = P64[Sp + 16];
           _saAFU::P64 = R1;
           R1 = _saAEh::P64;
           P64[Sp + 16] = _saAFU::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEcJ_info" {
     block_caEcJ_info:
         const _caEcJ;
         const 2;
         const 30;
 },
 _caEcL() //  []
         { []
         }
     {offset
       caEcL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEcL_info" {
     block_caEcL_info:
         const _caEcL;
         const 1;
         const 30;
 },
 sat_saAG8_entry() //  [R1, R2]
         { []
         }
     {offset
       caEd5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEd6; else goto caEd7;
       caEd6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEd7: // global
           I64[Sp - 16] = block_caEd3_info;
           _saAG5::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAG5::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAG8_info" {
     sat_saAG8_info:
         const sat_saAG8_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEd3() //  []
         { []
         }
     {offset
       caEd3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEd3_info" {
     block_caEd3_info:
         const _caEd3;
         const 1;
         const 30;
 },
 sat_saAG3_entry() //  [R1]
         { []
         }
     {offset
       caEde: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAFp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAG3_info" {
     sat_saAG3_info:
         const sat_saAG3_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaAZi_srt+200;
 },
 sat_saAG4_entry() //  [R1]
         { []
         }
     {offset
       caEdm: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAG4_info" {
     sat_saAG4_info:
         const sat_saAG4_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.closeFd1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caEdp: // global
           if ((Sp + -72) < SpLim) (likely: False) goto caEdq; else goto caEdr;
       caEdq: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.closeFd1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caEdr: // global
           I64[Sp - 32] = block_caE84_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd1_info" {
     GHC.Event.Manager.closeFd1_info:
         const GHC.Event.Manager.closeFd1_entry;
         const 0;
         const 2537677131874318;
         const 17179869207;
         const SaAZi_srt+120;
 },
 _caE84() //  [R1]
         { []
         }
     {offset
       caE84: // global
           I64[Sp] = block_caE86_info;
           _saADN::I64 = R1;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saADN::I64;
           if (R1 & 7 != 0) goto uaEe6; else goto caE87;
       uaEe6: // global
           call _caE86(R1) args: 0, res: 0, upd: 0;
       caE87: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE84_info" {
     block_caE84_info:
         const _caE84;
         const 3;
         const 285877318189086;
         const SaAZi_srt+120;
 },
 _caE86() //  [R1]
         { []
         }
     {offset
       caE86: // global
           I64[Sp - 24] = block_caE8b_info;
           _saADP::P64 = P64[R1 + 7];
           _saADR::P64 = P64[R1 + 23];
           _saADT::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _saADR::P64;
           P64[Sp - 8] = _saADT::P64;
           P64[Sp] = _saADP::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaEe7; else goto caE8c;
       uaEe7: // global
           call _caE8b(R1) args: 0, res: 0, upd: 0;
       caE8c: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE86_info" {
     block_caE86_info:
         const _caE86;
         const 67;
         const 285877318189086;
         const SaAZi_srt+120;
 },
 _caE8b() //  [R1]
         { []
         }
     {offset
       caE8b: // global
           I64[Sp - 8] = block_caE8g_info;
           _saAE2::P64 = R1;
           _saAE3::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _saAE3::I64;
           P64[Sp + 8] = _saAE2::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEe8; else goto caE8h;
       uaEe8: // global
           call _caE8g(R1) args: 0, res: 0, upd: 0;
       caE8h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE8b_info" {
     block_caE8b_info:
         const _caE8b;
         const 518;
         const 285877318189086;
         const SaAZi_srt+120;
 },
 _caE8g() //  [R1]
         { []
         }
     {offset
       caE8g: // global
           I64[Sp - 8] = block_caE8l_info;
           _saAE4::P64 = R1;
           _saAE5::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           I64[Sp] = _saAE5::I64;
           P64[Sp + 56] = _saAE4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEe9; else goto caE8m;
       uaEe9: // global
           call _caE8l(R1) args: 0, res: 0, upd: 0;
       caE8m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE8g_info" {
     block_caE8g_info:
         const _caE8g;
         const 1095;
         const 285877318189086;
         const SaAZi_srt+120;
 },
 _caE8l() //  [R1]
         { []
         }
     {offset
       caE8l: // global
           _saAE2::P64 = P64[Sp + 24];
           _saAE3::I64 = I64[Sp + 16];
           _saAE4::P64 = P64[Sp + 64];
           _saAE7::I64 = I64[R1 + 7];
           _saAE8::I64 = _saAE7::I64 & 31;
           if (%MO_S_Gt_W64(_saAE3::I64,
                            _saAE8::I64)) goto caEdA; else goto caEe4;
       caEe4: // global
           if (%MO_S_Gt_W64(_saAE8::I64,
                            I64[Sp + 8])) goto caEdA; else goto caEdB;
       caEdA: // global
           R4 = _saAE8::I64;
           R3 = _saAE2::P64;
           R2 = _saAE4::P64;
           Sp = Sp + 72;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caEdB: // global
           _saAEf::P64 = P64[P64[Sp + 32] + ((_saAE8::I64 - _saAE3::I64 << 3) + 24)];
           I64[Sp + 24] = block_caE8E_info;
           _saAE6::P64 = R1;
           R1 = _saAEf::P64;
           I64[Sp + 32] = _saAE7::I64;
           P64[Sp + 64] = _saAE6::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaEea; else goto caE8F;
       uaEea: // global
           call _caE8E(R1) args: 0, res: 0, upd: 0;
       caE8F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE8l_info" {
     block_caE8l_info:
         const _caE8l;
         const 2248;
         const 285877318189086;
         const SaAZi_srt+120;
 },
 _caE8E() //  [R1]
         { []
         }
     {offset
       caE8E: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caEdE; else goto caEdD;
       caEdE: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEdD: // global
           _saAEh::P64 = P64[R1 + 7];
           I64[Hp - 72] = $wio_saAEi_info;
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 40];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io_saAFp_info;
           P64[Hp - 24] = Hp - 70;
           _caEbq::P64 = Hp - 30;
           _saAFu::I64 = I64[Sp + 24];
           if (_saAFu::I64 != 0) goto uaEe5; else goto caEdR;
       uaEe5: // global
           if (_saAFu::I64 != 1) goto caEdJ; else goto caEdX;
       caEdJ: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_caEbH_info;
           R1 = _saAEh::P64;
           P64[Sp + 32] = _saAEh::P64;
           P64[Sp + 40] = _caEbq::P64;
           Sp = Sp + 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caEdX: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_caEcW_info;
           R1 = _saAEh::P64;
           P64[Sp + 32] = _saAEh::P64;
           P64[Sp + 40] = _caEbq::P64;
           Sp = Sp + 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caEdR: // global
           I64[Hp - 16] = sat_saAFW_info;
           P64[Hp - 8] = _saAEh::P64;
           P64[Hp] = _caEbq::P64;
           I64[Sp + 40] = block_caEdQ_info;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caE8E_info" {
     block_caE8E_info:
         const _caE8E;
         const 325;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEbH() //  [R1]
         { []
         }
     {offset
       caEbH: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEdM; else goto caEdL;
       caEdM: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEdL: // global
           I64[Hp - 56] = sat_saAFD_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAFy_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAFz_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEdF_info;
           R2 = Hp - 54;
           _saAFx::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAFx::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEbH_info" {
     block_caEbH_info:
         const _caEbH;
         const 2;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEdF() //  [R1]
         { []
         }
     {offset
       caEdF: // global
           _saAEh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEdH_info;
           R2 = P64[Sp + 16];
           _saAFG::P64 = R1;
           R1 = _saAEh::P64;
           P64[Sp + 16] = _saAFG::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEdF_info" {
     block_caEdF_info:
         const _caEdF;
         const 2;
         const 30;
 },
 _caEdH() //  []
         { []
         }
     {offset
       caEdH: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEdH_info" {
     block_caEdH_info:
         const _caEdH;
         const 1;
         const 30;
 },
 _caEcW() //  [R1]
         { []
         }
     {offset
       caEcW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEe0; else goto caEdZ;
       caEe0: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEdZ: // global
           I64[Hp - 56] = sat_saAG8_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAG3_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAG4_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEdU_info;
           R2 = Hp - 54;
           _saAG2::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAG2::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEcW_info" {
     block_caEcW_info:
         const _caEcW;
         const 2;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEdU() //  [R1]
         { []
         }
     {offset
       caEdU: // global
           _saAEh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEdW_info;
           R2 = P64[Sp + 16];
           _saAGb::P64 = R1;
           R1 = _saAEh::P64;
           P64[Sp + 16] = _saAGb::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEdU_info" {
     block_caEdU_info:
         const _caEdU;
         const 2;
         const 30;
 },
 _caEdW() //  []
         { []
         }
     {offset
       caEdW: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEdW_info" {
     block_caEdW_info:
         const _caEdW;
         const 1;
         const 30;
 },
 _caEdQ() //  [R1]
         { []
         }
     {offset
       caEdQ: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEdQ_info" {
     block_caEdQ_info:
         const _caEdQ;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.691630742 UTC

[section ""data" . GHC.Event.Manager.closeFd_closure" {
     GHC.Event.Manager.closeFd_closure:
         const GHC.Event.Manager.closeFd_info;
         const 0;
 },
 GHC.Event.Manager.closeFd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caEhB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.closeFd1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_info" {
     GHC.Event.Manager.closeFd_info:
         const GHC.Event.Manager.closeFd_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SaAZi_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.696411815 UTC

[section ""data" . lvl8_raAuf_closure" {
     lvl8_raAuf_closure:
         const lvl8_raAuf_info;
 },
 lvl8_raAuf_entry() //  [R2]
         { []
         }
     {offset
       caEhP: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caEhQ; else goto caEhR;
       caEhQ: // global
           R2 = R2;
           R1 = lvl8_raAuf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEhR: // global
           I64[Sp - 8] = block_caEhM_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEia; else goto caEhN;
       uaEia: // global
           call _caEhM(R1) args: 0, res: 0, upd: 0;
       caEhN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_raAuf_info" {
     lvl8_raAuf_info:
         const lvl8_raAuf_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caEhM() //  [R1]
         { []
         }
     {offset
       caEhM: // global
           if (I64[R1 + 31] & 8 == 0) goto caEi6; else goto caEi0;
       caEi6: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caEi0: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEhM_info" {
     block_caEhM_info:
         const _caEhM;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.729696975 UTC

[section ""data" . GHC.Event.Manager.loop5_closure" {
     GHC.Event.Manager.loop5_closure:
         const GHC.Event.Manager.loop5_info;
         const 0;
 },
 $wgo_saAHp_entry() //  [R1, R2]
         { []
         }
     {offset
       caEjO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEjP; else goto caEjQ;
       caEjP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEjQ: // global
           I64[Sp - 24] = block_caEjH_info;
           _saAHp::P64 = R1;
           _saAGN::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saAGN::I64;
           P64[Sp - 8] = _saAHp::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaEkd; else goto caEjI;
       uaEkd: // global
           call _caEjH(R1) args: 0, res: 0, upd: 0;
       caEjI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saAHp_info" {
     $wgo_saAHp_info:
         const $wgo_saAHp_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caEjH() //  [R1]
         { []
         }
     {offset
       caEjH: // global
           if (R1 & 7 == 1) goto caEjL; else goto caEjM;
       caEjL: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caEjM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEjY; else goto caEjX;
       caEjY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEjX: // global
           _saAHt::P64 = P64[R1 + 6];
           _saAHu::P64 = P64[R1 + 14];
           _saAHs::I64 = I64[R1 + 22];
           if (_saAHs::I64 == I64[Sp + 8]) goto caEkc; else goto caEk6;
       caEkc: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saAHt::P64;
           R3 = _saAHu::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caEk6: // global
           Hp = Hp - 16;
           I64[Sp] = block_caEk2_info;
           R2 = _saAHu::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saAHt::P64;
           I64[Sp + 16] = _saAHs::I64;
           call $wgo_saAHp_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEjH_info" {
     block_caEjH_info:
         const _caEjH;
         const 66;
         const 30;
 },
 _caEk2() //  [R1, R2, R3]
         { []
         }
     {offset
       caEk2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caEk9; else goto caEk8;
       caEk9: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caEk8: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEk2_info" {
     block_caEk2_info:
         const _caEk2;
         const 130;
         const 30;
 },
 w2_saAHY_entry() //  [R1]
         { []
         }
     {offset
       caEkX: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEkY; else goto caEkZ;
       caEkY: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caEkZ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caEkU_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo1_saAHM_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_saAHY_info" {
     w2_saAHY_info:
         const w2_saAHY_entry;
         const 2;
         const 18;
 },
 _caEkU() //  [R1, R2]
         { []
         }
     {offset
       caEkU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caEl2; else goto caEl1;
       caEl2: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caEl1: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caEkU_info" {
     block_caEkU_info:
         const _caEkU;
         const 0;
         const 30;
 },
 $wgo1_saAHM_entry() //  [R1, R2]
         { []
         }
     {offset
       caEl7: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caEl8; else goto caEl9;
       caEl8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEl9: // global
           I64[Sp - 24] = block_caEkA_info;
           _saAHM::P64 = R1;
           _saAGm::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _saAGm::P64;
           P64[Sp - 8] = _saAHM::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaElz; else goto caEkB;
       uaElz: // global
           call _caEkA(R1) args: 0, res: 0, upd: 0;
       caEkB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo1_saAHM_info" {
     $wgo1_saAHM_info:
         const $wgo1_saAHM_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _caEkA() //  [R1]
         { []
         }
     {offset
       caEkA: // global
           if (R1 & 7 == 1) goto caEl4; else goto caEl5;
       caEl4: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       caEl5: // global
           I64[Sp - 8] = block_caEkG_info;
           _saAHP::P64 = P64[R1 + 6];
           _saAHQ::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _saAHQ::P64;
           P64[Sp + 8] = _saAHP::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaElx; else goto caEkH;
       uaElx: // global
           call _caEkG(R1) args: 0, res: 0, upd: 0;
       caEkH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEkA_info" {
     block_caEkA_info:
         const _caEkA;
         const 2;
         const 30;
 },
 _caEkG() //  [R1]
         { []
         }
     {offset
       caEkG: // global
           I64[Sp] = block_caEkL_info;
           _saAHS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saAHS::I64;
           if (R1 & 7 != 0) goto uaEly; else goto caEkM;
       uaEly: // global
           call _caEkL(R1) args: 0, res: 0, upd: 0;
       caEkM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEkG_info" {
     block_caEkG_info:
         const _caEkG;
         const 3;
         const 30;
 },
 _caEkL() //  [R1]
         { []
         }
     {offset
       caEkL: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto caElg; else goto caElf;
       caElg: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caElf: // global
           _saAHW::I64 = I64[R1 + 31];
           I64[Hp - 96] = w2_saAHY_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           _caEkQ::P64 = Hp - 96;
           if (I64[Sp + 16] & _saAHW::I64 & 7 == 0) goto caElw; else goto caElr;
       caElw: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _caEkQ::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _caEkQ::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       caElr: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _caEkQ::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _caEkQ::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEkL_info" {
     block_caEkL_info:
         const _caEkL;
         const 131;
         const 30;
 },
 ds8_saAHL_entry() //  [R1]
         { []
         }
     {offset
       caElD: // global
           _saAHL::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto caElE; else goto caElF;
       caElF: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caElH; else goto caElG;
       caElH: // global
           HpAlloc = 16;
           goto caElE;
       caElE: // global
           R1 = _saAHL::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caElG: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saAHL::P64;
           _saAGm::P64 = P64[_saAHL::P64 + 16];
           _saAHK::P64 = P64[_saAHL::P64 + 24];
           I64[Hp - 8] = $wgo1_saAHM_info;
           P64[Hp] = _saAGm::P64;
           I64[Sp - 24] = block_caElA_info;
           R2 = _saAHK::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call $wgo1_saAHM_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_saAHL_info" {
     ds8_saAHL_info:
         const ds8_saAHL_entry;
         const 2;
         const 18;
 },
 _caElA() //  [R1, R2]
         { []
         }
     {offset
       caElA: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caElK; else goto caElJ;
       caElK: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caElJ: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caElA_info" {
     block_caElA_info:
         const _caElA;
         const 0;
         const 30;
 },
 sat_saAIx_entry() //  [R1]
         { []
         }
     {offset
       caElZ: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_raAuf_closure+1;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAIx_info" {
     sat_saAIx_info:
         const sat_saAIx_entry;
         const 1;
         const 16;
 },
 saved_saAIt_entry() //  [R1]
         { []
         }
     {offset
       caEm2: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caEm3; else goto caEm4;
       caEm3: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caEm4: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caElQ_info;
           _saAIp::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saAIp::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaEm8; else goto caElR;
       uaEm8: // global
           call _caElQ(R1) args: 0, res: 0, upd: 0;
       caElR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . saved_saAIt_info" {
     saved_saAIt_info:
         const saved_saAIt_entry;
         const 2;
         const 18;
 },
 _caElQ() //  [R1]
         { []
         }
     {offset
       caElQ: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caEm7; else goto caEm6;
       caEm7: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       caEm6: // global
           _saAIw::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_saAIx_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 16;
           R2 = _saAIw::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caElQ_info" {
     block_caElQ_info:
         const _caElQ;
         const 1;
         const 30;
 },
 sat_saAIA_entry() //  [R1]
         { []
         }
     {offset
       caEme: // global
           R1 = P64[R1 + 6] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAIA_info" {
     sat_saAIA_info:
         const sat_saAIA_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 $wio_saAH9_entry() //  [R1, R2]
         { []
         }
     {offset
       caEmh: // global
           if ((Sp + -112) < SpLim) (likely: False) goto caEmi; else goto caEmj;
       caEmi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEmj: // global
           I64[Sp - 64] = block_caEjo_info;
           _saAGm::P64 = P64[R1 + 6];
           _saAGD::P64 = P64[R1 + 14];
           _saAGF::P64 = P64[R1 + 22];
           _saAGG::P64 = P64[R1 + 30];
           _saAGM::P64 = P64[R1 + 38];
           _saAGN::I64 = I64[R1 + 46];
           R1 = P64[R2 + 8];
           P64[Sp - 56] = _saAGm::P64;
           P64[Sp - 48] = _saAGD::P64;
           P64[Sp - 40] = _saAGF::P64;
           P64[Sp - 32] = _saAGG::P64;
           P64[Sp - 24] = _saAGM::P64;
           I64[Sp - 16] = _saAGN::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto uaEoY; else goto caEjp;
       uaEoY: // global
           call _caEjo(R1) args: 0, res: 0, upd: 0;
       caEjp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saAH9_info" {
     $wio_saAH9_info:
         const $wio_saAH9_entry;
         const 4294967301;
         const 4294967304;
         const 8589934597;
         const SaAZi_srt+248;
 },
 _caEjo() //  [R1]
         { []
         }
     {offset
       caEjo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEmm; else goto caEml;
       caEmm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEml: // global
           _saAGN::I64 = I64[Sp + 48];
           _saAHg::P64 = P64[R1 + 7];
           _saAHi::P64 = P64[R1 + 15];
           _saAHh::I64 = I64[R1 + 23];
           _saAHj::I64 = _saAGN::I64 & (I64[_saAHg::P64 + 8] - 1);
           _saAHo::P64 = P64[(_saAHg::P64 + 24) + (_saAHj::I64 << 3)];
           I64[Hp - 8] = $wgo_saAHp_info;
           I64[Hp] = _saAGN::I64;
           I64[Sp - 32] = block_caEke_info;
           R2 = _saAHo::P64;
           R1 = Hp - 7;
           I64[Sp - 24] = _saAHh::I64;
           P64[Sp - 16] = _saAHi::P64;
           I64[Sp - 8] = _saAHj::I64;
           P64[Sp] = _saAHg::P64;
           Sp = Sp - 32;
           call $wgo_saAHp_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEjo_info" {
     block_caEjo_info:
         const _caEjo;
         const 2055;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEke() //  [R1, R2, R3]
         { []
         }
     {offset
       caEke: // global
           I64[Sp - 16] = block_caEmn_info;
           _saAHD::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saAHD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEoX; else goto caEom;
       uaEoX: // global
           call _caEmn(R1) args: 0, res: 0, upd: 0;
       caEom: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEke_info" {
     block_caEke_info:
         const _caEke;
         const 33099;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEmn() //  [R1]
         { []
         }
     {offset
       caEmn: // global
           if (R1 & 7 == 1) goto caEos; else goto caEox;
       caEos: // global
           P64[Sp + 48] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saAHG() args: 0, res: 0, upd: 0;
       caEox: // global
           _saAHg::P64 = P64[Sp + 48];
           _saAHj::I64 = I64[Sp + 40];
           _saAHD::P64 = P64[Sp + 16];
           _saAHF::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saAHg::P64 + 24) + (_saAHj::I64 << 3)] = _saAHF::P64;
           I64[_saAHg::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saAHg::P64 + 24) + ((I64[_saAHg::P64 + 8] << 3) + (_saAHj::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caEov_info;
           _saAJ0::P64 = R1;
           R1 = _saAHD::P64;
           P64[Sp + 48] = _saAJ0::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaEoZ; else goto caEoy;
       uaEoZ: // global
           call _caEov(R1) args: 0, res: 0, upd: 0;
       caEoy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEmn_info" {
     block_caEmn_info:
         const _caEmn;
         const 132365;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEov() //  [R1]
         { []
         }
     {offset
       caEov: // global
           _saAJ0::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto caEoE; else goto caEoI;
       caEoE: // global
           P64[Sp + 32] = _saAJ0::P64;
           Sp = Sp + 32;
           goto uaEp6;
       caEoI: // global
           _saAHh::I64 = I64[Sp + 8];
           _saAHi::P64 = P64[Sp + 16];
           I64[_saAHh::I64] = I64[_saAHh::I64] - 1;
           call MO_Touch(_saAHi::P64);
           P64[Sp + 32] = _saAJ0::P64;
           Sp = Sp + 32;
           goto uaEp6;
       uaEp6: // global
           call _saAHG() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEov_info" {
     block_caEov_info:
         const _caEov;
         const 33099;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _saAHG() //  []
         { []
         }
     {offset
       saAHG: // global
           _saAHI::P64 = P64[Sp];
           I64[Sp] = block_caEkl_info;
           R1 = _saAHI::P64;
           if (R1 & 7 != 0) goto uaEp7; else goto caEkm;
       uaEp7: // global
           call _caEkl(R1) args: 0, res: 0, upd: 0;
       caEkm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caEkl() //  [R1]
         { []
         }
     {offset
       caEkl: // global
           if (R1 & 7 == 1) goto caEmt; else goto caEmB;
       caEmt: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caEmB: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto caEmE; else goto caEmD;
       caEmE: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEmD: // global
           _saAHK::P64 = P64[R1 + 6];
           I64[Hp - 96] = ds8_saAHL_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _saAHK::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           _caEkr::P64 = Hp - 96;
           P64[Hp - 48] = _caEkr::P64;
           I64[Hp - 40] = saved_saAIt_info;
           P64[Hp - 24] = _caEkr::P64;
           _caElL::P64 = Hp - 64;
           P64[Hp - 16] = _caElL::P64;
           I64[Hp - 8] = sat_saAIA_info;
           _caElM::P64 = Hp - 40;
           P64[Hp] = _caElM::P64;
           I64[Sp] = block_caEmu_info;
           R5 = P64[Sp + 56];
           R4 = _caElM::P64;
           R3 = I64[Sp + 48];
           R2 = Hp - 6;
           P64[Sp + 8] = _saAHK::P64;
           P64[Sp + 48] = _caElM::P64;
           P64[Sp + 56] = _caElL::P64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEkl_info" {
     block_caEkl_info:
         const _caEkl;
         const 2055;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEmu() //  []
         { []
         }
     {offset
       caEmu: // global
           _saAHK::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEmw_info;
           R2 = _saAHK::P64;
           Sp = Sp + 8;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEmu_info" {
     block_caEmu_info:
         const _caEmu;
         const 7;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEmw() //  [R1]
         { []
         }
     {offset
       caEmw: // global
           I64[Sp] = block_caEmA_info;
           R2 = P64[Sp + 40];
           I64[Sp + 40] = R1;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEmw_info" {
     block_caEmw_info:
         const _caEmw;
         const 6;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEmA() //  [R1]
         { []
         }
     {offset
       caEmA: // global
           _caElL::P64 = P64[Sp + 48];
           _saAIE::I64 = I64[Sp + 40];
           _saAIF::I64 = R1;
           if (_saAIE::I64 & 8 == 0) goto saAIG; else goto caEo7;
       caEo7: // global
           if (_saAIE::I64 == _saAIF::I64) goto caEof; else goto saAIG;
       saAIG: // global
           _saAII::I64 = _saAIF::I64 & 8;
           if (_saAII::I64 != 0) goto uaEoT; else goto caEnf;
       uaEoT: // global
           I64[Sp] = _saAII::I64;
           I64[Sp + 24] = _saAIF::I64;
           call _caEmV() args: 0, res: 0, upd: 0;
       caEnf: // global
           if (_saAIE::I64 & 8 == 0) goto caEnJ; else goto uaEoV;
       caEnJ: // global
           if (_saAIF::I64 & 7 == 0) goto caEof; else goto uaEoW;
       caEof: // global
           R1 = _caElL::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaEoW: // global
           I64[Sp + 40] = _saAIF::I64;
           goto uaEp3;
       uaEoV: // global
           I64[Sp + 40] = _saAIF::I64;
           goto uaEp3;
       uaEp3: // global
           call _caEnm() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEmA_info" {
     block_caEmA_info:
         const _caEmA;
         const 1030;
         const 30;
 },
 _caEmV() //  []
         { []
         }
     {offset
       caEmV: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caEna; else goto caEn9;
       caEna: // global
           HpAlloc = 32;
           _saAII::I64 = I64[Sp];
           I64[Sp] = block_caEmU_info;
           R1 = _saAII::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caEn9: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 24] & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40] & 7;
           I64[Sp + 40] = block_caEn5_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = stg_ap_v_info;
           Sp = Sp + 32;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caEmU() //  [R1]
         { []
         }
     {offset
       caEmU: // global
           I64[Sp] = R1;
           call _caEmV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEmU_info" {
     block_caEmU_info:
         const _caEmU;
         const 1286;
         const 30;
 },
 _caEn5() //  []
         { []
         }
     {offset
       caEn5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEn5_info" {
     block_caEn5_info:
         const _caEn5;
         const 1;
         const 30;
 },
 _caEnm() //  []
         { []
         }
     {offset
       caEnm: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEnv; else goto caEnu;
       caEnv: // global
           HpAlloc = 16;
           I64[Sp] = block_caEnm_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caEnu: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40] & 7;
           I64[Sp + 40] = block_caEns_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEnm_info" {
     block_caEnm_info:
         const _caEnm;
         const 1158;
         const 30;
 },
 _caEns() //  []
         { []
         }
     {offset
       caEns: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEns_info" {
     block_caEns_info:
         const _caEns;
         const 1;
         const 30;
 },
 io_saAJa_entry() //  [R1, R2]
         { []
         }
     {offset
       caEpg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEph; else goto caEpi;
       caEph: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEpi: // global
           I64[Sp - 16] = block_caEpd_info;
           _saAH9::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saAH9::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEpm; else goto caEpe;
       uaEpm: // global
           call _caEpd(R1) args: 0, res: 0, upd: 0;
       caEpe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saAJa_info" {
     io_saAJa_info:
         const io_saAJa_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaAZi_srt+248;
 },
 _caEpd() //  [R1]
         { []
         }
     {offset
       caEpd: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saAH9_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEpd_info" {
     block_caEpd_info:
         const _caEpd;
         const 1;
         const 4294967326;
         const SaAZi_srt+248;
 },
 sat_saAJo_entry() //  [R1, R2]
         { []
         }
     {offset
       caEpy: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEpz; else goto caEpA;
       caEpz: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEpA: // global
           I64[Sp - 16] = block_caEpw_info;
           _saAJl::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAJl::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAJo_info" {
     sat_saAJo_info:
         const sat_saAJo_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEpw() //  []
         { []
         }
     {offset
       caEpw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEpw_info" {
     block_caEpw_info:
         const _caEpw;
         const 1;
         const 30;
 },
 sat_saAJj_entry() //  [R1]
         { []
         }
     {offset
       caEpH: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAJa_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAJj_info" {
     sat_saAJj_info:
         const sat_saAJj_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saAJk_entry() //  [R1]
         { []
         }
     {offset
       caEpP: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAJk_info" {
     sat_saAJk_info:
         const sat_saAJk_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saAJR_entry() //  [R1, R2]
         { []
         }
     {offset
       caEq7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEq8; else goto caEq9;
       caEq8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEq9: // global
           I64[Sp - 16] = block_caEq5_info;
           _saAJO::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAJO::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAJR_info" {
     sat_saAJR_info:
         const sat_saAJR_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEq5() //  []
         { []
         }
     {offset
       caEq5: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEq5_info" {
     block_caEq5_info:
         const _caEq5;
         const 1;
         const 30;
 },
 sat_saAJM_entry() //  [R1]
         { []
         }
     {offset
       caEqg: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAJa_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAJM_info" {
     sat_saAJM_info:
         const sat_saAJM_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saAJN_entry() //  [R1]
         { []
         }
     {offset
       caEqo: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAJN_info" {
     sat_saAJN_info:
         const sat_saAJN_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saAJW_entry() //  [R1]
         { []
         }
     {offset
       caEqv: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEqw; else goto caEqx;
       caEqw: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caEqx: // global
           I64[Sp - 24] = block_caEpY_info;
           _saAH8::P64 = P64[R1 + 7];
           _saAJa::P64 = P64[R1 + 15];
           R1 = _saAH8::P64;
           P64[Sp - 16] = _saAH8::P64;
           P64[Sp - 8] = _saAJa::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAJW_info" {
     sat_saAJW_info:
         const sat_saAJW_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 _caEpY() //  [R1]
         { []
         }
     {offset
       caEpY: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEqA; else goto caEqz;
       caEqA: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEqz: // global
           I64[Hp - 56] = sat_saAJR_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAJM_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAJN_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEqr_info;
           R2 = Hp - 54;
           _saAJL::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAJL::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEpY_info" {
     block_caEpY_info:
         const _caEpY;
         const 2;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEqr() //  [R1]
         { []
         }
     {offset
       caEqr: // global
           _saAH8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEqt_info;
           R2 = P64[Sp + 16];
           _saAJU::P64 = R1;
           R1 = _saAH8::P64;
           P64[Sp + 16] = _saAJU::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEqr_info" {
     block_caEqr_info:
         const _caEqr;
         const 2;
         const 30;
 },
 _caEqt() //  []
         { []
         }
     {offset
       caEqt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEqt_info" {
     block_caEqt_info:
         const _caEqt;
         const 1;
         const 30;
 },
 sat_saAKn_entry() //  [R1, R2]
         { []
         }
     {offset
       caEqN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEqO; else goto caEqP;
       caEqO: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEqP: // global
           I64[Sp - 16] = block_caEqL_info;
           _saAKk::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAKk::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAKn_info" {
     sat_saAKn_info:
         const sat_saAKn_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEqL() //  []
         { []
         }
     {offset
       caEqL: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEqL_info" {
     block_caEqL_info:
         const _caEqL;
         const 1;
         const 30;
 },
 sat_saAKi_entry() //  [R1]
         { []
         }
     {offset
       caEqW: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAJa_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAKi_info" {
     sat_saAKi_info:
         const sat_saAKi_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saAKj_entry() //  [R1]
         { []
         }
     {offset
       caEr4: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAKj_info" {
     sat_saAKj_info:
         const sat_saAKj_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.loop5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caEr7: // global
           if ((Sp + -112) < SpLim) (likely: False) goto caEr8; else goto caEr9;
       caEr8: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.loop5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caEr9: // global
           I64[Sp - 24] = block_caEir_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaEu2; else goto caEis;
       uaEu2: // global
           call _caEir(R1) args: 0, res: 0, upd: 0;
       caEis: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop5_info" {
     GHC.Event.Manager.loop5_info:
         const GHC.Event.Manager.loop5_entry;
         const 0;
         const 13792278153789454;
         const 17179869207;
         const SaAZi_srt+120;
 },
 _caEir() //  [R1]
         { []
         }
     {offset
       caEir: // global
           I64[Sp - 56] = block_caEiw_info;
           _saAGq::P64 = P64[R1 + 15];
           _saAGr::P64 = P64[R1 + 23];
           _saAGt::P64 = P64[R1 + 31];
           _saAGu::P64 = P64[R1 + 39];
           _saAGA::P64 = P64[R1 + 63];
           _saAGw::I64 = I64[R1 + 87];
           _saAGy::I64 = I64[R1 + 103];
           R1 = P64[R1 + 7];
           P64[Sp - 48] = _saAGr::P64;
           P64[Sp - 40] = _saAGt::P64;
           P64[Sp - 32] = _saAGu::P64;
           I64[Sp - 24] = _saAGw::I64;
           I64[Sp - 16] = _saAGy::I64;
           P64[Sp - 8] = _saAGA::P64;
           P64[Sp] = _saAGq::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uaEtX; else goto caEix;
       uaEtX: // global
           call _caEiw(R1) args: 0, res: 0, upd: 0;
       caEix: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEir_info" {
     block_caEir_info:
         const _caEir;
         const 2;
         const 4785078899048478;
         const SaAZi_srt+120;
 },
 _caEiw() //  [R1]
         { []
         }
     {offset
       caEiw: // global
           I64[Sp - 16] = block_caEiB_info;
           _saAGD::P64 = P64[R1 + 7];
           _saAGF::P64 = P64[R1 + 23];
           _saAGG::P64 = P64[R1 + 31];
           R1 = P64[Sp + 56];
           P64[Sp - 8] = _saAGG::P64;
           P64[Sp] = _saAGF::P64;
           P64[Sp + 56] = _saAGD::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEtY; else goto caEiC;
       uaEtY: // global
           call _caEiB(R1) args: 0, res: 0, upd: 0;
       caEiC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEiw_info" {
     block_caEiw_info:
         const _caEiw;
         const 1545;
         const 4785078899048478;
         const SaAZi_srt+120;
 },
 _caEiB() //  [R1]
         { []
         }
     {offset
       caEiB: // global
           I64[Sp - 8] = block_caEiG_info;
           _saAGI::P64 = R1;
           _saAGJ::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp] = _saAGJ::I64;
           P64[Sp + 24] = _saAGI::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEtZ; else goto caEiH;
       uaEtZ: // global
           call _caEiG(R1) args: 0, res: 0, upd: 0;
       caEiH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEiB_info" {
     block_caEiB_info:
         const _caEiB;
         const 6155;
         const 4785078899048478;
         const SaAZi_srt+120;
 },
 _caEiG() //  [R1]
         { []
         }
     {offset
       caEiG: // global
           I64[Sp - 8] = block_caEiL_info;
           _saAGK::P64 = R1;
           _saAGL::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saAGL::I64;
           P64[Sp + 88] = _saAGK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEu0; else goto caEiM;
       uaEu0: // global
           call _caEiL(R1) args: 0, res: 0, upd: 0;
       caEiM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEiG_info" {
     block_caEiG_info:
         const _caEiG;
         const 12364;
         const 4785078899048478;
         const SaAZi_srt+120;
 },
 _caEiL() //  [R1]
         { []
         }
     {offset
       caEiL: // global
           _saAGy::I64 = I64[Sp + 72];
           _saAGA::P64 = P64[Sp + 80];
           _saAGN::I64 = I64[R1 + 7];
           if (_saAGN::I64 == I64[Sp + 64]) goto saAGO; else goto caEtD;
       caEtD: // global
           if (_saAGN::I64 == _saAGy::I64) goto saAGO; else goto caErz;
       saAGO: // global
           I64[Sp + 48] = block_caEri_info;
           R4 = _saAGN::I64;
           R3 = _saAGA::P64;
           R2 = _saAGy::I64;
           Sp = Sp + 48;
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
       caErz: // global
           I64[Sp] = block_caEiY_info;
           I64[Sp + 72] = _saAGN::I64;
           P64[Sp + 80] = R1;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEiL_info" {
     block_caEiL_info:
         const _caEiL;
         const 24781;
         const 4785078899048478;
         const SaAZi_srt+120;
 },
 _caEri() //  [R1]
         { []
         }
     {offset
       caEri: // global
           I64[Sp] = block_caErk_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEu3; else goto caErn;
       uaEu3: // global
           call _caErk(R1) args: 0, res: 0, upd: 0;
       caErn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEri_info" {
     block_caEri_info:
         const _caEri;
         const 8071;
         const 30;
 },
 _caErk() //  [R1]
         { []
         }
     {offset
       caErk: // global
           if (R1 & 7 == 2) goto caErx; else goto uaEtW;
       caErx: // global
           _saAGu::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_saAGu::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saAGu::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaEtW: // global
           Sp = Sp + 64;
           call _caErt() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caErk_info" {
     block_caErk_info:
         const _caErk;
         const 8071;
         const 30;
 },
 _caEiY() //  [R1]
         { []
         }
     {offset
       caEiY: // global
           _saAGI::P64 = P64[Sp + 40];
           _saAGJ::I64 = I64[Sp + 16];
           _saAGK::P64 = P64[Sp + 96];
           _saAGZ::I64 = I64[Sp + 72] & 31;
           if (%MO_S_Gt_W64(_saAGJ::I64,
                            _saAGZ::I64)) goto caErE; else goto caEtA;
       caEtA: // global
           if (%MO_S_Gt_W64(_saAGZ::I64,
                            I64[Sp + 8])) goto caErE; else goto caErF;
       caErE: // global
           R4 = _saAGZ::I64;
           R3 = _saAGI::P64;
           R2 = _saAGK::P64;
           Sp = Sp + 112;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caErF: // global
           _saAH6::P64 = P64[P64[Sp + 48] + ((_saAGZ::I64 - _saAGJ::I64 << 3) + 24)];
           I64[Sp + 16] = block_caEje_info;
           _saAGY::I64 = R1;
           R1 = _saAH6::P64;
           I64[Sp + 96] = _saAGY::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaEu1; else goto caEjf;
       uaEu1: // global
           call _caEje(R1) args: 0, res: 0, upd: 0;
       caEjf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEiY_info" {
     block_caEiY_info:
         const _caEiY;
         const 28877;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEje() //  [R1]
         { []
         }
     {offset
       caEje: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caErI; else goto caErH;
       caErI: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caErH: // global
           _saAH8::P64 = P64[R1 + 7];
           I64[Hp - 88] = $wio_saAH9_info;
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 72];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 64];
           I64[Hp - 40] = I64[Sp + 56];
           I64[Hp - 32] = io_saAJa_info;
           P64[Hp - 24] = Hp - 86;
           _caEp8::P64 = Hp - 30;
           _saAJf::I64 = I64[Sp + 80];
           if (_saAJf::I64 != 0) goto uaEtM; else goto caEsp;
       uaEtM: // global
           if (_saAJf::I64 != 1) goto caErN; else goto caEsZ;
       caErN: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caEpp_info;
           R1 = _saAH8::P64;
           P64[Sp + 72] = _saAH8::P64;
           P64[Sp + 80] = _caEp8::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caEsZ: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caEqE_info;
           R1 = _saAH8::P64;
           P64[Sp + 72] = _saAH8::P64;
           P64[Sp + 80] = _caEp8::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caEsp: // global
           I64[Hp - 16] = sat_saAJW_info;
           P64[Hp - 8] = _saAH8::P64;
           P64[Hp] = _caEp8::P64;
           I64[Sp + 80] = block_caEso_info;
           R1 = Hp - 15;
           Sp = Sp + 80;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEje_info" {
     block_caEje_info:
         const _caEje;
         const 40715;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEpp() //  [R1]
         { []
         }
     {offset
       caEpp: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caErQ; else goto caErP;
       caErQ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caErP: // global
           I64[Hp - 56] = sat_saAJo_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAJj_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAJk_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caErJ_info;
           R2 = Hp - 54;
           _saAJi::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAJi::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEpp_info" {
     block_caEpp_info:
         const _caEpp;
         const 3;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caErJ() //  [R1]
         { []
         }
     {offset
       caErJ: // global
           _saAH8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caErL_info;
           R2 = P64[Sp + 16];
           _saAJr::P64 = R1;
           R1 = _saAH8::P64;
           P64[Sp + 16] = _saAJr::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caErJ_info" {
     block_caErJ_info:
         const _caErJ;
         const 3;
         const 30;
 },
 _caErL() //  []
         { []
         }
     {offset
       caErL: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caErX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caErL_info" {
     block_caErL_info:
         const _caErL;
         const 2;
         const 30;
 },
 _caErX() //  []
         { []
         }
     {offset
       caErX: // global
           _saAJu::P64 = P64[Sp];
           I64[Sp] = block_caErZ_info;
           R1 = _saAJu::P64;
           if (R1 & 7 != 0) goto uaEu6; else goto caEs1;
       uaEu6: // global
           call _caErZ(R1) args: 0, res: 0, upd: 0;
       caEs1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caErZ() //  [R1]
         { []
         }
     {offset
       caErZ: // global
           if (R1 & 7 == 1) goto uaEtO; else goto caEsc;
       uaEtO: // global
           Sp = Sp + 16;
           call _caErt() args: 0, res: 0, upd: 0;
       caEsc: // global
           I64[Sp - 8] = block_caEsa_info;
           _saAJy::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saAJy::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEu7; else goto caEsd;
       uaEu7: // global
           call _caEsa(R1) args: 0, res: 0, upd: 0;
       caEsd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caErZ_info" {
     block_caErZ_info:
         const _caErZ;
         const 1;
         const 30;
 },
 _caEsa() //  [R1]
         { []
         }
     {offset
       caEsa: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caEsl; else goto caEsk;
       caEsl: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEsk: // global
           _saAJD::P64 = P64[R1 + 7];
           _saAJA::I64 = I64[R1 + 15];
           _saAJB::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saAJA::I64;
           I64[Hp] = _saAJB::I64;
           I64[Sp] = block_caEsi_info;
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _saAJD::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEsa_info" {
     block_caEsa_info:
         const _caEsa;
         const 2;
         const 30;
 },
 _caEsi() //  []
         { []
         }
     {offset
       caEsi: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caErX() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEsi_info" {
     block_caEsi_info:
         const _caEsi;
         const 2;
         const 30;
 },
 _caEqE() //  [R1]
         { []
         }
     {offset
       caEqE: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEt2; else goto caEt1;
       caEt2: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEt1: // global
           I64[Hp - 56] = sat_saAKn_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAKi_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAKj_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEsW_info;
           R2 = Hp - 54;
           _saAKh::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAKh::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEqE_info" {
     block_caEqE_info:
         const _caEqE;
         const 3;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEsW() //  [R1]
         { []
         }
     {offset
       caEsW: // global
           _saAH8::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEsY_info;
           R2 = P64[Sp + 16];
           _saAKq::P64 = R1;
           R1 = _saAH8::P64;
           P64[Sp + 16] = _saAKq::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEsW_info" {
     block_caEsW_info:
         const _caEsW;
         const 3;
         const 30;
 },
 _caEsY() //  []
         { []
         }
     {offset
       caEsY: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caEt9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEsY_info" {
     block_caEsY_info:
         const _caEsY;
         const 2;
         const 30;
 },
 _caEt9() //  []
         { []
         }
     {offset
       caEt9: // global
           _saAKt::P64 = P64[Sp];
           I64[Sp] = block_caEtb_info;
           R1 = _saAKt::P64;
           if (R1 & 7 != 0) goto uaEug; else goto caEtd;
       uaEug: // global
           call _caEtb(R1) args: 0, res: 0, upd: 0;
       caEtd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caEtb() //  [R1]
         { []
         }
     {offset
       caEtb: // global
           if (R1 & 7 == 1) goto uaEtR; else goto caEto;
       uaEtR: // global
           Sp = Sp + 16;
           call _caErt() args: 0, res: 0, upd: 0;
       caEto: // global
           I64[Sp - 8] = block_caEtm_info;
           _saAKx::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saAKx::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEuh; else goto caEtp;
       uaEuh: // global
           call _caEtm(R1) args: 0, res: 0, upd: 0;
       caEtp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEtb_info" {
     block_caEtb_info:
         const _caEtb;
         const 1;
         const 30;
 },
 _caEtm() //  [R1]
         { []
         }
     {offset
       caEtm: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caEtx; else goto caEtw;
       caEtx: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEtw: // global
           _saAKC::P64 = P64[R1 + 7];
           _saAKz::I64 = I64[R1 + 15];
           _saAKA::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saAKz::I64;
           I64[Hp] = _saAKA::I64;
           I64[Sp] = block_caEtu_info;
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _saAKC::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEtm_info" {
     block_caEtm_info:
         const _caEtm;
         const 2;
         const 30;
 },
 _caEtu() //  []
         { []
         }
     {offset
       caEtu: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caEt9() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEtu_info" {
     block_caEtu_info:
         const _caEtu;
         const 2;
         const 30;
 },
 _caEso() //  [R1]
         { []
         }
     {offset
       caEso: // global
           P64[Sp] = R1;
           call _caEsv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEso_info" {
     block_caEso_info:
         const _caEso;
         const 1;
         const 30;
 },
 _caEsv() //  []
         { []
         }
     {offset
       caEsv: // global
           _saAK1::P64 = P64[Sp];
           I64[Sp] = block_caEsx_info;
           R1 = _saAK1::P64;
           if (R1 & 7 != 0) goto uaEub; else goto caEsz;
       uaEub: // global
           call _caEsx(R1) args: 0, res: 0, upd: 0;
       caEsz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caEsx() //  [R1]
         { []
         }
     {offset
       caEsx: // global
           if (R1 & 7 == 1) goto uaEtU; else goto caEsK;
       uaEtU: // global
           Sp = Sp + 16;
           call _caErt() args: 0, res: 0, upd: 0;
       caEsK: // global
           I64[Sp - 8] = block_caEsI_info;
           _saAK5::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saAK5::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEuc; else goto caEsL;
       uaEuc: // global
           call _caEsI(R1) args: 0, res: 0, upd: 0;
       caEsL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEsx_info" {
     block_caEsx_info:
         const _caEsx;
         const 1;
         const 30;
 },
 _caErt() //  []
         { []
         }
     {offset
       caErt: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caEsI() //  [R1]
         { []
         }
     {offset
       caEsI: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caEsT; else goto caEsS;
       caEsT: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEsS: // global
           _saAKa::P64 = P64[R1 + 7];
           _saAK7::I64 = I64[R1 + 15];
           _saAK8::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saAK7::I64;
           I64[Hp] = _saAK8::I64;
           I64[Sp] = block_caEsQ_info;
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _saAKa::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEsI_info" {
     block_caEsI_info:
         const _caEsI;
         const 2;
         const 30;
 },
 _caEsQ() //  []
         { []
         }
     {offset
       caEsQ: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caEsv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEsQ_info" {
     block_caEsQ_info:
         const _caEsQ;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.855988378 UTC

[section ""data" . GHC.Event.Manager.loop4_closure" {
     GHC.Event.Manager.loop4_closure:
         const GHC.Base.Just_con_info;
         const GHC.Event.Internal.Forever_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.86253454 UTC

[section ""data" . GHC.Event.Manager.loop3_closure" {
     GHC.Event.Manager.loop3_closure:
         const GHC.Event.Manager.loop3_info;
         const 0;
 },
 sat_saAL3_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caEAj: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Event.Manager.loop5_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAL3_info" {
     sat_saAL3_info:
         const sat_saAL3_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaAZi_srt+288;
 },
 sat_saALf_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caEAE: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Event.Manager.loop5_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saALf_info" {
     sat_saALf_info:
         const sat_saALf_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaAZi_srt+288;
 },
 sat_saALq_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caEAX: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Event.Manager.loop5_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saALq_info" {
     sat_saALq_info:
         const sat_saALq_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaAZi_srt+288;
 },
 GHC.Event.Manager.loop3_entry() //  [R2]
         { []
         }
     {offset
       caEB0: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caEB1; else goto caEB2;
       caEB1: // global
           R2 = R2;
           R1 = GHC.Event.Manager.loop3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEB2: // global
           I64[Sp - 8] = block_caEA4_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEBM; else goto caEA5;
       uaEBM: // global
           call _caEA4(R1) args: 0, res: 0, upd: 0;
       caEA5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop3_info" {
     GHC.Event.Manager.loop3_info:
         const GHC.Event.Manager.loop3_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaAZi_srt+288;
 },
 _caEA4() //  [R1]
         { []
         }
     {offset
       caEA4: // global
           I64[Sp - 16] = block_caEA9_info;
           _saAKJ::P64 = R1;
           _saAKP::P64 = P64[R1 + 39];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _saAKP::P64;
           P64[Sp] = _saAKJ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEBH; else goto caEAa;
       uaEBH: // global
           call _caEA9(R1) args: 0, res: 0, upd: 0;
       caEAa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEA4_info" {
     block_caEA4_info:
         const _caEA4;
         const 0;
         const 4294967326;
         const SaAZi_srt+288;
 },
 _caEA9() //  [R1]
         { []
         }
     {offset
       caEA9: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEB6; else goto caEB5;
       caEB6: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEB5: // global
           _saAKY::P64 = P64[R1 + 7];
           _saAKZ::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_saAL3_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 16] = block_caEAm_info;
           R4 = Hp - 5;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = _saAKY::P64;
           R1 = _saAKZ::P64;
           P64[Sp - 8] = _saAKZ::P64;
           P64[Sp] = _saAKY::P64;
           Sp = Sp - 16;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEA9_info" {
     block_caEA9_info:
         const _caEA9;
         const 2;
         const 4294967326;
         const SaAZi_srt+288;
 },
 _caEAm() //  [R1]
         { []
         }
     {offset
       caEAm: // global
           I64[Sp] = block_caEAo_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEBI; else goto caEAp;
       uaEBI: // global
           call _caEAo(R1) args: 0, res: 0, upd: 0;
       caEAp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEAm_info" {
     block_caEAm_info:
         const _caEAm;
         const 4;
         const 4294967326;
         const SaAZi_srt+288;
 },
 _caEAo() //  [R1]
         { []
         }
     {offset
       caEAo: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto caEBb; else goto caEBh;
       caEBb: // global
           _saALc::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp + 24] = block_caEB9_info;
           R1 = _saALc::P64;
           P64[Sp + 32] = _saALc::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaEBJ; else goto caEBc;
       uaEBJ: // global
           call _caEB9() args: 0, res: 0, upd: 0;
       caEBc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caEBh: // global
           I64[Sp] = block_caEAx_info;
           call stg_yield#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEAo_info" {
     block_caEAo_info:
         const _caEAo;
         const 4;
         const 4294967326;
         const SaAZi_srt+288;
 },
 _caEB9() //  []
         { []
         }
     {offset
       caEB9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEB9_info" {
     block_caEB9_info:
         const _caEB9;
         const 1;
         const 30;
 },
 _caEAx() //  []
         { []
         }
     {offset
       caEAx: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEBk; else goto caEBj;
       caEBk: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caEBj: // global
           I64[Hp - 8] = sat_saALf_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_caEAH_info;
           R4 = Hp - 5;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEAx_info" {
     block_caEAx_info:
         const _caEAx;
         const 4;
         const 4294967326;
         const SaAZi_srt+288;
 },
 _caEAH() //  [R1]
         { []
         }
     {offset
       caEAH: // global
           I64[Sp] = block_caEAJ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEBK; else goto caEAK;
       uaEBK: // global
           call _caEAJ(R1) args: 0, res: 0, upd: 0;
       caEAK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEAH_info" {
     block_caEAH_info:
         const _caEAH;
         const 4;
         const 4294967326;
         const SaAZi_srt+288;
 },
 _caEAJ() //  [R1]
         { []
         }
     {offset
       caEAJ: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEBo; else goto caEBn;
       caEBo: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEBn: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto caEBr; else goto caEBA;
       caEBr: // global
           Hp = Hp - 16;
           _saALo::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp + 24] = block_caEBp_info;
           R1 = _saALo::P64;
           P64[Sp + 32] = _saALo::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaEBL; else goto caEBs;
       uaEBL: // global
           call _caEBp() args: 0, res: 0, upd: 0;
       caEBs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caEBA: // global
           I64[Hp - 8] = sat_saALq_info;
           P64[Hp] = P64[Sp + 32];
           _saAKY::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caEBx_info;
           R4 = Hp - 5;
           R3 = GHC.Event.Manager.loop4_closure+2;
           R2 = _saAKY::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEAJ_info" {
     block_caEAJ_info:
         const _caEAJ;
         const 4;
         const 4294967326;
         const SaAZi_srt+288;
 },
 _caEBp() //  []
         { []
         }
     {offset
       caEBp: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEBp_info" {
     block_caEBp_info:
         const _caEBp;
         const 1;
         const 30;
 },
 _caEBx() //  []
         { []
         }
     {offset
       caEBx: // global
           _saALw::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_caEBz_info;
           R1 = _saALw::P64;
           P64[Sp + 16] = _saALw::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaEBN; else goto caEBC;
       uaEBN: // global
           call _caEBz() args: 0, res: 0, upd: 0;
       caEBC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEBx_info" {
     block_caEBx_info:
         const _caEBx;
         const 130;
         const 30;
 },
 _caEBz() //  []
         { []
         }
     {offset
       caEBz: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEBz_info" {
     block_caEBz_info:
         const _caEBz;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.888636424 UTC

[section ""data" . GHC.Event.Manager.step_closure" {
     GHC.Event.Manager.step_closure:
         const GHC.Event.Manager.step_info;
         const 0;
 },
 GHC.Event.Manager.step_entry() //  [R2]
         { []
         }
     {offset
       caECT: // global
           R2 = R2;
           call GHC.Event.Manager.loop3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.step_info" {
     GHC.Event.Manager.step_info:
         const GHC.Event.Manager.step_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaAZi_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.891632935 UTC

[section ""cstring" . lvl9_raAug_bytes" {
     lvl9_raAug_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,108,111,111,112,58,32,115,116,97,116,101,32,105,115,32,97,108,114,101,97,100,121,32,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.894423381 UTC

[section ""data" . GHC.Event.Manager.loop2_closure" {
     GHC.Event.Manager.loop2_closure:
         const GHC.Event.Manager.loop2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.loop2_entry() //  [R1]
         { []
         }
     {offset
       caED9: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEDa; else goto caEDb;
       caEDa: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caEDb: // global
           (_caED4::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caED4::I64 == 0) goto caED6; else goto caED5;
       caED6: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caED5: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caED4::I64;
           I64[Sp - 24] = block_caED7_info;
           R2 = lvl9_raAug_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop2_info" {
     GHC.Event.Manager.loop2_info:
         const GHC.Event.Manager.loop2_entry;
         const 0;
         const 4294967317;
         const SaAZi_srt+168;
 },
 _caED7() //  [R1]
         { []
         }
     {offset
       caED7: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caED7_info" {
     block_caED7_info:
         const _caED7;
         const 0;
         const 4294967326;
         const SaAZi_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.899397357 UTC

[section ""data" . GHC.Event.Manager.loop8_closure" {
     GHC.Event.Manager.loop8_closure:
         const (,)_con_info;
         const GHC.Event.Manager.Running_closure+2;
         const GHC.Event.Manager.Created_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.901646446 UTC

[section ""data" . GHC.Event.Manager.loop7_closure" {
     GHC.Event.Manager.loop7_closure:
         const (,)_con_info;
         const GHC.Event.Manager.Running_closure+2;
         const GHC.Event.Manager.Releasing_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.904555772 UTC

[section ""data" . GHC.Event.Manager.loop6_closure" {
     GHC.Event.Manager.loop6_closure:
         const GHC.Event.Manager.loop6_info;
 },
 GHC.Event.Manager.loop6_entry() //  [R2]
         { []
         }
     {offset
       caEDD: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caEDE; else goto caEDF;
       caEDE: // global
           R2 = R2;
           R1 = GHC.Event.Manager.loop6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEDF: // global
           I64[Sp - 8] = block_caEDv_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEDT; else goto caEDw;
       uaEDT: // global
           call _caEDv(R1) args: 0, res: 0, upd: 0;
       caEDw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop6_info" {
     GHC.Event.Manager.loop6_info:
         const GHC.Event.Manager.loop6_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caEDv() //  [R1]
         { []
         }
     {offset
       caEDv: // global
           _caEDC::P64 = R1 & 7;
           if (_caEDC::P64 == 1) goto caEDA; else goto uaEDS;
       caEDA: // global
           R1 = GHC.Event.Manager.loop8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaEDS: // global
           if (_caEDC::P64 == 4) goto caEDB; else goto caEDz;
       caEDB: // global
           R1 = GHC.Event.Manager.loop7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caEDz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caEDL; else goto caEDK;
       caEDL: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEDK: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEDv_info" {
     block_caEDv_info:
         const _caEDv;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.918204163 UTC

[section ""data" . GHC.Event.Manager.loop1_closure" {
     GHC.Event.Manager.loop1_closure:
         const GHC.Event.Manager.loop1_info;
         const 0;
 },
 go_saALY_entry() //  [R1]
         { []
         }
     {offset
       caEEE: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caEEF; else goto uaEEY;
       caEEF: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       uaEEY: // global
           P64[Sp - 8] = R1;
           Sp = Sp - 16;
           call _caEEr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_saALY_info" {
     go_saALY_info:
         const go_saALY_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+296;
 },
 _caEEr() //  []
         { []
         }
     {offset
       caEEr: // global
           I64[Sp - 16] = block_caEEu_info;
           _saALY::P64 = P64[Sp + 8];
           _saALD::P64 = P64[_saALY::P64 + 7];
           R2 = _saALD::P64;
           P64[Sp - 8] = P64[_saALY::P64 + 15];
           P64[Sp] = _saALD::P64;
           Sp = Sp - 16;
           call GHC.Event.Manager.loop3_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEEr_info" {
     block_caEEr_info:
         const _caEEr;
         const 1;
         const 4294967326;
         const SaAZi_srt+296;
 },
 _caEEu() //  [R1]
         { []
         }
     {offset
       caEEu: // global
           I64[Sp] = block_caEEw_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEEZ; else goto caEEx;
       uaEEZ: // global
           call _caEEw(R1) args: 0, res: 0, upd: 0;
       caEEx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEEu_info" {
     block_caEEu_info:
         const _caEEu;
         const 3;
         const 4294967326;
         const SaAZi_srt+296;
 },
 _caEEw() //  [R1]
         { []
         }
     {offset
       caEEw: // global
           _caEED::P64 = R1 & 7;
           if (_caEED::P64 != 2) goto uaEEX; else goto caEEB;
       uaEEX: // global
           if (_caEED::P64 != 4) goto caEEA; else goto caEEC;
       caEEA: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
       caEEC: // global
           I64[Sp + 24] = block_caEET_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caEEB: // global
           I64[Sp + 16] = block_caEEr_info;
           Sp = Sp + 16;
           call stg_yield#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEEw_info" {
     block_caEEw_info:
         const _caEEw;
         const 3;
         const 4294967326;
         const SaAZi_srt+296;
 },
 _caEET() //  []
         { []
         }
     {offset
       caEET: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEET_info" {
     block_caEET_info:
         const _caEET;
         const 0;
         const 30;
 },
 sat_saAMM_entry() //  [R1, R2]
         { []
         }
     {offset
       caEF9: // global
           if ((Sp + -72) < SpLim) (likely: False) goto caEFa; else goto caEFb;
       caEFa: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEFb: // global
           I64[Sp - 72] = block_caEF6_info;
           _saALJ::P64 = P64[R1 + 14];
           _saALO::P64 = P64[R1 + 22];
           _saALP::P64 = P64[R1 + 30];
           _saALQ::P64 = P64[R1 + 38];
           _saALL::I64 = I64[R1 + 46];
           _saALM::I64 = I64[R1 + 54];
           _saALN::I64 = I64[R1 + 62];
           R1 = P64[R1 + 6];
           P64[Sp - 64] = _saALJ::P64;
           I64[Sp - 56] = _saALL::I64;
           I64[Sp - 48] = _saALM::I64;
           I64[Sp - 40] = _saALN::I64;
           P64[Sp - 32] = _saALO::P64;
           P64[Sp - 24] = _saALP::P64;
           P64[Sp - 16] = _saALQ::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto uaEG0; else goto caEF7;
       uaEG0: // global
           call _caEF6(R1) args: 0, res: 0, upd: 0;
       caEF7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAMM_info" {
     sat_saAMM_info:
         const sat_saAMM_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _caEF6() //  [R1]
         { []
         }
     {offset
       caEF6: // global
           _saALJ::P64 = P64[Sp + 8];
           _saALQ::P64 = P64[Sp + 56];
           _saAM9::P64 = P64[R1 + 7];
           _saAMd::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saALJ::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saALJ::P64);
           I64[Sp] = block_caEFh_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saALQ::P64;
           P64[Sp + 8] = _saAMd::P64;
           P64[Sp + 56] = _saAM9::P64;
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEF6_info" {
     block_caEF6_info:
         const _caEF6;
         const 904;
         const 30;
 },
 _caEFh() //  []
         { []
         }
     {offset
       caEFh: // global
           _saAMd::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEFj_info;
           R2 = P64[Sp + 56];
           R1 = _saAMd::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEFh_info" {
     block_caEFh_info:
         const _caEFh;
         const 904;
         const 30;
 },
 _caEFj() //  []
         { []
         }
     {offset
       caEFj: // global
           I64[Sp] = block_caEFl_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEFj_info" {
     block_caEFj_info:
         const _caEFj;
         const 2503;
         const 30;
 },
 _caEFl() //  []
         { []
         }
     {offset
       caEFl: // global
           _saALM::I64 = I64[Sp + 16];
           _saALO::P64 = P64[Sp + 32];
           (_saAMs::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saAMx::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saALM::I64)));
           I64[Sp + 16] = block_caEFB_info;
           R1 = _saALO::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaEG1; else goto caEFC;
       uaEG1: // global
           call _caEFB(R1) args: 0, res: 0, upd: 0;
       caEFC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEFl_info" {
     block_caEFl_info:
         const _caEFl;
         const 3527;
         const 30;
 },
 _caEFB() //  [R1]
         { []
         }
     {offset
       caEFB: // global
           _saALN::I64 = I64[Sp + 8];
           _saAM6::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto caEFI; else goto caEFM;
       caEFI: // global
           (_saAMD::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saALN::I64)));
           R1 = _saAM6::P64;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       caEFM: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saAML::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saALN::I64)));
           R1 = _saAM6::P64;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEFB_info" {
     block_caEFB_info:
         const _caEFB;
         const 965;
         const 30;
 },
 GHC.Event.Manager.loop1_entry() //  [R2]
         { []
         }
     {offset
       caEG2: // global
           if ((Sp + -80) < SpLim) (likely: False) goto caEG3; else goto caEG4;
       caEG3: // global
           R2 = R2;
           R1 = GHC.Event.Manager.loop1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEG4: // global
           I64[Sp - 8] = block_caEEb_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEHm; else goto caEEc;
       uaEHm: // global
           call _caEEb(R1) args: 0, res: 0, upd: 0;
       caEEc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop1_info" {
     GHC.Event.Manager.loop1_info:
         const GHC.Event.Manager.loop1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SaAZi_srt+296;
 },
 _caEEb() //  [R1]
         { []
         }
     {offset
       caEEb: // global
           I64[Sp - 72] = block_caEEg_info;
           _saALD::P64 = R1;
           _saALE::P64 = P64[R1 + 7];
           _saALJ::P64 = P64[R1 + 39];
           _saALO::P64 = P64[R1 + 55];
           _saALP::P64 = P64[R1 + 63];
           _saALQ::P64 = P64[R1 + 71];
           _saALL::I64 = I64[R1 + 87];
           _saALM::I64 = I64[R1 + 95];
           _saALN::I64 = I64[R1 + 103];
           R1 = _saALQ::P64;
           P64[Sp - 64] = _saALE::P64;
           P64[Sp - 56] = _saALJ::P64;
           I64[Sp - 48] = _saALL::I64;
           I64[Sp - 40] = _saALM::I64;
           I64[Sp - 32] = _saALN::I64;
           P64[Sp - 24] = _saALO::P64;
           P64[Sp - 16] = _saALP::P64;
           P64[Sp - 8] = _saALQ::P64;
           P64[Sp] = _saALD::P64;
           Sp = Sp - 72;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEEb_info" {
     block_caEEb_info:
         const _caEEb;
         const 0;
         const 21474836510;
         const SaAZi_srt+296;
 },
 _caEEg() //  []
         { []
         }
     {offset
       caEEg: // global
           I64[Sp] = block_caEEi_info;
           R2 = GHC.Event.Manager.loop6_closure+1;
           R1 = P64[Sp + 16];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEEg_info" {
     block_caEEg_info:
         const _caEEg;
         const 1801;
         const 21474836510;
         const SaAZi_srt+296;
 },
 _caEEi() //  [R1]
         { []
         }
     {offset
       caEEi: // global
           I64[Sp] = block_caEEk_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEHk; else goto caEEl;
       uaEHk: // global
           call _caEEk(R1) args: 0, res: 0, upd: 0;
       caEEl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEEi_info" {
     block_caEEi_info:
         const _caEEi;
         const 1801;
         const 21474836510;
         const SaAZi_srt+296;
 },
 _caEEk() //  [R1]
         { []
         }
     {offset
       caEEk: // global
           _saALD::P64 = P64[Sp + 72];
           _saALE::P64 = P64[Sp + 8];
           _saALJ::P64 = P64[Sp + 16];
           _saALL::I64 = I64[Sp + 24];
           _saALM::I64 = I64[Sp + 32];
           _saALN::I64 = I64[Sp + 40];
           _saALO::P64 = P64[Sp + 48];
           _saALP::P64 = P64[Sp + 56];
           _saALQ::P64 = P64[Sp + 64];
           _caEH3::P64 = R1 & 7;
           if (_caEH3::P64 < 4) goto uaEHh; else goto uaEHj;
       uaEHh: // global
           if (_caEH3::P64 < 3) goto uaEHi; else goto caEGY;
       uaEHi: // global
           _saALX::P64 = R1;
           if (_caEH3::P64 < 2) goto caEG9; else goto caEGh;
       caEGh: // global
           I64[Sp + 8] = block_caEGf_info;
           R1 = _saALE::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaEHl; else goto caEGi;
       uaEHl: // global
           call _caEGf(R1) args: 0, res: 0, upd: 0;
       caEGi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caEGY: // global
           R2 = _saALD::P64;
           Sp = Sp + 80;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
       uaEHj: // global
           _saALX::P64 = R1;
           if (_caEH3::P64 < 5) goto caEG9; else goto caEH2;
       caEG9: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caEGc; else goto caEGb;
       caEGc: // global
           HpAlloc = 96;
           R1 = _saALX::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEGb: // global
           I64[Hp - 88] = go_saALY_info;
           P64[Hp - 80] = _saALD::P64;
           P64[Hp - 72] = _saALQ::P64;
           I64[Hp - 64] = sat_saAMM_info;
           P64[Hp - 56] = _saALE::P64;
           P64[Hp - 48] = _saALJ::P64;
           P64[Hp - 40] = _saALO::P64;
           P64[Hp - 32] = _saALP::P64;
           P64[Hp - 24] = _saALQ::P64;
           I64[Hp - 16] = _saALL::I64;
           I64[Hp - 8] = _saALM::I64;
           I64[Hp] = _saALN::I64;
           R2 = Hp - 62;
           R1 = Hp - 87;
           Sp = Sp + 80;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
       caEH2: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEEk_info" {
     block_caEEk_info:
         const _caEEk;
         const 1801;
         const 21474836510;
         const SaAZi_srt+296;
 },
 _caEGf() //  [R1]
         { []
         }
     {offset
       caEGf: // global
           _saALJ::P64 = P64[Sp + 8];
           _saALQ::P64 = P64[Sp + 56];
           _saAMO::P64 = P64[R1 + 7];
           _saAMS::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saALJ::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saALJ::P64);
           I64[Sp + 8] = block_caEGp_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saALQ::P64;
           P64[Sp + 56] = _saAMS::P64;
           P64[Sp + 64] = _saAMO::P64;
           Sp = Sp + 8;
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEGf_info" {
     block_caEGf_info:
         const _caEGf;
         const 9096;
         const 4294967326;
         const SaAZi_srt+312;
 },
 _caEGp() //  []
         { []
         }
     {offset
       caEGp: // global
           I64[Sp] = block_caEGr_info;
           R2 = P64[Sp + 56];
           R1 = P64[Sp + 48];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEGp_info" {
     block_caEGp_info:
         const _caEGp;
         const 455;
         const 4294967326;
         const SaAZi_srt+312;
 },
 _caEGr() //  []
         { []
         }
     {offset
       caEGr: // global
           I64[Sp] = block_caEGt_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEGr_info" {
     block_caEGr_info:
         const _caEGr;
         const 6599;
         const 4294967326;
         const SaAZi_srt+312;
 },
 _caEGt() //  []
         { []
         }
     {offset
       caEGt: // global
           _saALM::I64 = I64[Sp + 16];
           _saALO::P64 = P64[Sp + 32];
           (_saAN7::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saANc::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saALM::I64)));
           I64[Sp + 16] = block_caEGJ_info;
           R1 = _saALO::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaEHn; else goto caEGK;
       uaEHn: // global
           call _caEGJ(R1) args: 0, res: 0, upd: 0;
       caEGK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEGt_info" {
     block_caEGt_info:
         const _caEGt;
         const 7623;
         const 4294967326;
         const SaAZi_srt+312;
 },
 _caEGJ() //  [R1]
         { []
         }
     {offset
       caEGJ: // global
           _saALN::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caEGQ; else goto caEGU;
       caEGQ: // global
           (_saANi::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saALN::I64)));
           R1 = GHC.Event.Manager.loop2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       caEGU: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saANr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saALN::I64)));
           R1 = GHC.Event.Manager.loop2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEGJ_info" {
     block_caEGJ_info:
         const _caEGJ;
         const 1989;
         const 4294967326;
         const SaAZi_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.955732321 UTC

[section ""data" . GHC.Event.Manager.loop_closure" {
     GHC.Event.Manager.loop_closure:
         const GHC.Event.Manager.loop_info;
         const 0;
 },
 GHC.Event.Manager.loop_entry() //  [R2]
         { []
         }
     {offset
       caEIR: // global
           R2 = R2;
           call GHC.Event.Manager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop_info" {
     GHC.Event.Manager.loop_info:
         const GHC.Event.Manager.loop_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaAZi_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.958981591 UTC

[section ""data" . GHC.Event.Manager.closeFd_4_closure" {
     GHC.Event.Manager.closeFd_4_closure:
         const GHC.Event.Manager.closeFd_4_info;
 },
 GHC.Event.Manager.closeFd_4_entry() //  []
         { []
         }
     {offset
       caEJ2: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_4_info" {
     GHC.Event.Manager.closeFd_4_info:
         const GHC.Event.Manager.closeFd_4_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.969189193 UTC

[section ""data" . GHC.Event.Manager.$wcloseFd__closure" {
     GHC.Event.Manager.$wcloseFd__closure:
         const GHC.Event.Manager.$wcloseFd__info;
         const 0;
 },
 $wgo_saANL_entry() //  [R1, R2]
         { []
         }
     {offset
       caEJE: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEJF; else goto caEJG;
       caEJF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEJG: // global
           I64[Sp - 24] = block_caEJx_info;
           _saANL::P64 = R1;
           _saANw::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saANw::I64;
           P64[Sp - 8] = _saANL::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaEK3; else goto caEJy;
       uaEK3: // global
           call _caEJx(R1) args: 0, res: 0, upd: 0;
       caEJy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saANL_info" {
     $wgo_saANL_info:
         const $wgo_saANL_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caEJx() //  [R1]
         { []
         }
     {offset
       caEJx: // global
           if (R1 & 7 == 1) goto caEJB; else goto caEJC;
       caEJB: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caEJC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEJO; else goto caEJN;
       caEJO: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEJN: // global
           _saANP::P64 = P64[R1 + 6];
           _saANQ::P64 = P64[R1 + 14];
           _saANO::I64 = I64[R1 + 22];
           if (_saANO::I64 == I64[Sp + 8]) goto caEK2; else goto caEJW;
       caEK2: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saANP::P64;
           R3 = _saANQ::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caEJW: // global
           Hp = Hp - 16;
           I64[Sp] = block_caEJS_info;
           R2 = _saANQ::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saANP::P64;
           I64[Sp + 16] = _saANO::I64;
           call $wgo_saANL_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEJx_info" {
     block_caEJx_info:
         const _caEJx;
         const 66;
         const 30;
 },
 _caEJS() //  [R1, R2, R3]
         { []
         }
     {offset
       caEJS: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caEJZ; else goto caEJY;
       caEJZ: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caEJY: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEJS_info" {
     block_caEJS_info:
         const _caEJS;
         const 130;
         const 30;
 },
 sat_saAOy_entry() //  [R1]
         { []
         }
     {offset
       caEKH: // global
           R2 = P64[R1 + 7];
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAOy_info" {
     sat_saAOy_info:
         const sat_saAOy_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saAOz_entry() //  [R1]
         { []
         }
     {offset
       caEKR: // global
           R2 = P64[R1 + 7];
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAOz_info" {
     sat_saAOz_info:
         const sat_saAOz_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.$wcloseFd__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caEKU: // global
           if ((Sp + -72) < SpLim) (likely: False) goto caEKV; else goto caEKW;
       caEKV: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$wcloseFd__closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caEKW: // global
           I64[Sp - 24] = block_caEJe_info;
           R1 = P64[R3 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaELX; else goto caEJf;
       uaELX: // global
           call _caEJe(R1) args: 0, res: 0, upd: 0;
       caEJf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$wcloseFd__info" {
     GHC.Event.Manager.$wcloseFd__info:
         const GHC.Event.Manager.$wcloseFd__entry;
         const 0;
         const 141016661229582;
         const 17179869206;
         const SaAZi_srt+200;
 },
 _caEJe() //  [R1]
         { []
         }
     {offset
       caEJe: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEKZ; else goto caEKY;
       caEKZ: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEKY: // global
           _saANw::I64 = I64[Sp + 16];
           _saANC::P64 = P64[R1 + 7];
           _saANE::P64 = P64[R1 + 15];
           _saAND::I64 = I64[R1 + 23];
           _saANF::I64 = _saANw::I64 & (I64[_saANC::P64 + 8] - 1);
           _saANK::P64 = P64[(_saANC::P64 + 24) + (_saANF::I64 << 3)];
           I64[Hp - 8] = $wgo_saANL_info;
           I64[Hp] = _saANw::I64;
           I64[Sp - 32] = block_caEK4_info;
           R2 = _saANK::P64;
           R1 = Hp - 7;
           I64[Sp - 24] = _saAND::I64;
           P64[Sp - 16] = _saANE::P64;
           I64[Sp - 8] = _saANF::I64;
           P64[Sp] = _saANC::P64;
           Sp = Sp - 32;
           call $wgo_saANL_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEJe_info" {
     block_caEJe_info:
         const _caEJe;
         const 130;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEK4() //  [R1, R2, R3]
         { []
         }
     {offset
       caEK4: // global
           I64[Sp - 16] = block_caEL0_info;
           _saANZ::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saANZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaELU; else goto caELn;
       uaELU: // global
           call _caEL0(R1) args: 0, res: 0, upd: 0;
       caELn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEK4_info" {
     block_caEK4_info:
         const _caEK4;
         const 2374;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEL0() //  [R1]
         { []
         }
     {offset
       caEL0: // global
           if (R1 & 7 == 1) goto caELt; else goto caELy;
       caELt: // global
           P64[Sp + 48] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saAO2() args: 0, res: 0, upd: 0;
       caELy: // global
           _saANC::P64 = P64[Sp + 48];
           _saANF::I64 = I64[Sp + 40];
           _saANZ::P64 = P64[Sp + 16];
           _saAO1::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saANC::P64 + 24) + (_saANF::I64 << 3)] = _saAO1::P64;
           I64[_saANC::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saANC::P64 + 24) + ((I64[_saANC::P64 + 8] << 3) + (_saANF::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caELw_info;
           _saAOA::P64 = R1;
           R1 = _saANZ::P64;
           P64[Sp + 48] = _saAOA::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaELY; else goto caELz;
       uaELY: // global
           call _caELw(R1) args: 0, res: 0, upd: 0;
       caELz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEL0_info" {
     block_caEL0_info:
         const _caEL0;
         const 9480;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caELw() //  [R1]
         { []
         }
     {offset
       caELw: // global
           _saAOA::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto caELF; else goto caELJ;
       caELF: // global
           P64[Sp + 32] = _saAOA::P64;
           Sp = Sp + 32;
           goto uaEM1;
       caELJ: // global
           _saAND::I64 = I64[Sp + 8];
           _saANE::P64 = P64[Sp + 16];
           I64[_saAND::I64] = I64[_saAND::I64] - 1;
           call MO_Touch(_saANE::P64);
           P64[Sp + 32] = _saAOA::P64;
           Sp = Sp + 32;
           goto uaEM1;
       uaEM1: // global
           call _saAO2() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caELw_info" {
     block_caELw_info:
         const _caELw;
         const 2374;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _saAO2() //  []
         { []
         }
     {offset
       saAO2: // global
           _saAO4::P64 = P64[Sp];
           I64[Sp] = block_caEKb_info;
           R1 = _saAO4::P64;
           if (R1 & 7 != 0) goto uaEM2; else goto caEKc;
       uaEM2: // global
           call _caEKb(R1) args: 0, res: 0, upd: 0;
       caEKc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caEKb() //  [R1]
         { []
         }
     {offset
       caEKb: // global
           if (R1 & 7 == 1) goto caEL6; else goto caEL8;
       caEL6: // global
           R1 = GHC.Event.Manager.closeFd_4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caEL8: // global
           I64[Sp - 8] = block_caEKh_info;
           _saAO6::P64 = P64[R1 + 6];
           R2 = _saAO6::P64;
           P64[Sp] = _saAO6::P64;
           Sp = Sp - 8;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEKb_info" {
     block_caEKb_info:
         const _caEKb;
         const 130;
         const 279172874270;
         const SaAZi_srt+200;
 },
 _caEKh() //  [R1]
         { []
         }
     {offset
       caEKh: // global
           if (R1 == 0) goto caELj; else goto caELb;
       caELj: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caELm; else goto caELl;
       caELm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caELl: // global
           I64[Hp - 8] = sat_saAOz_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caELb: // global
           I64[Sp] = block_caEKl_info;
           _saAO7::I64 = R1;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saAO7::I64;
           if (R1 & 7 != 0) goto uaELV; else goto caEKm;
       uaELV: // global
           call _caEKl(R1) args: 0, res: 0, upd: 0;
       caEKm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEKh_info" {
     block_caEKh_info:
         const _caEKh;
         const 259;
         const 4294967326;
         const SaAZi_srt+200;
 },
 _caEKl() //  [R1]
         { []
         }
     {offset
       caEKl: // global
           I64[Sp] = block_caEKq_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uaELW; else goto caEKr;
       uaELW: // global
           call _caEKq(R1) args: 0, res: 0, upd: 0;
       caEKr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEKl_info" {
     block_caEKl_info:
         const _caEKl;
         const 387;
         const 4294967326;
         const SaAZi_srt+200;
 },
 _caEKq() //  [R1]
         { []
         }
     {offset
       caEKq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caELf; else goto caELe;
       caELf: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caELe: // global
           _saAOn::P64 = P64[R1 + 7];
           _saAOp::P64 = P64[R1 + 23];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 16] & 7;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_caEKA_info;
           R5 = GHC.Event.Internal.evtNothing_closure;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = _saAOn::P64;
           R1 = _saAOp::P64;
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEKq_info" {
     block_caEKq_info:
         const _caEKq;
         const 387;
         const 4294967326;
         const SaAZi_srt+200;
 },
 _caEKA() //  [R1]
         { []
         }
     {offset
       caEKA: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caELi; else goto caELh;
       caELi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caELh: // global
           I64[Hp - 8] = sat_saAOy_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEKA_info" {
     block_caEKA_info:
         const _caEKA;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:33.998951524 UTC

[section ""data" . GHC.Event.Manager.closeFd_1_closure" {
     GHC.Event.Manager.closeFd_1_closure:
         const GHC.Event.Manager.closeFd_1_info;
         const 0;
 },
 GHC.Event.Manager.closeFd_1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caENx: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caENB; else goto caENC;
       caENB: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.closeFd_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caENC: // global
           I64[Sp - 24] = block_caENu_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaENK; else goto caENv;
       uaENK: // global
           call _caENu(R1) args: 0, res: 0, upd: 0;
       caENv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_1_info" {
     GHC.Event.Manager.closeFd_1_info:
         const GHC.Event.Manager.closeFd_1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SaAZi_srt+320;
 },
 _caENu() //  [R1]
         { []
         }
     {offset
       caENu: // global
           I64[Sp] = block_caENA_info;
           _saAOP::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _saAOP::P64;
           if (R1 & 7 != 0) goto uaENJ; else goto caENE;
       uaENJ: // global
           call _caENA(R1) args: 0, res: 0, upd: 0;
       caENE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caENu_info" {
     block_caENu_info:
         const _caENu;
         const 2;
         const 4294967326;
         const SaAZi_srt+320;
 },
 _caENA() //  [R1]
         { []
         }
     {offset
       caENA: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Manager.$wcloseFd__entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caENA_info" {
     block_caENA_info:
         const _caENA;
         const 2;
         const 4294967326;
         const SaAZi_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.005371017 UTC

[section ""data" . GHC.Event.Manager.closeFd__closure" {
     GHC.Event.Manager.closeFd__closure:
         const GHC.Event.Manager.closeFd__info;
         const 0;
 },
 GHC.Event.Manager.closeFd__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caEO2: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.closeFd_1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd__info" {
     GHC.Event.Manager.closeFd__info:
         const GHC.Event.Manager.closeFd__entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SaAZi_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.008429925 UTC

[section ""data" . lvl10_raAuh_closure" {
     lvl10_raAuh_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.010400503 UTC

[section ""data" . lvl11_raAui_closure" {
     lvl11_raAui_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.01205524 UTC

[section ""data" . lvl12_raAuj_closure" {
     lvl12_raAuj_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.043398058 UTC

[section ""data" . registerFd1_raAuk_closure" {
     registerFd1_raAuk_closure:
         const registerFd1_raAuk_info;
         const 0;
 },
 $wgo_saAQj_entry() //  [R1, R2]
         { []
         }
     {offset
       caEQq: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEQr; else goto caEQs;
       caEQr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEQs: // global
           I64[Sp - 24] = block_caEQj_info;
           _saAQj::P64 = R1;
           _saAPq::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saAPq::I64;
           P64[Sp - 8] = _saAQj::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaEQP; else goto caEQk;
       uaEQP: // global
           call _caEQj(R1) args: 0, res: 0, upd: 0;
       caEQk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saAQj_info" {
     $wgo_saAQj_info:
         const $wgo_saAQj_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caEQj() //  [R1]
         { []
         }
     {offset
       caEQj: // global
           if (R1 & 7 == 1) goto caEQn; else goto caEQo;
       caEQn: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caEQo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caEQA; else goto caEQz;
       caEQA: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEQz: // global
           _saAQn::P64 = P64[R1 + 6];
           _saAQo::P64 = P64[R1 + 14];
           _saAQm::I64 = I64[R1 + 22];
           if (_saAQm::I64 == I64[Sp + 8]) goto caEQO; else goto caEQI;
       caEQO: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saAQn::P64;
           R3 = _saAQo::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caEQI: // global
           Hp = Hp - 16;
           I64[Sp] = block_caEQE_info;
           R2 = _saAQo::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saAQn::P64;
           I64[Sp + 16] = _saAQm::I64;
           call $wgo_saAQj_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEQj_info" {
     block_caEQj_info:
         const _caEQj;
         const 66;
         const 30;
 },
 _caEQE() //  [R1, R2, R3]
         { []
         }
     {offset
       caEQE: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caEQL; else goto caEQK;
       caEQL: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caEQK: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEQE_info" {
     block_caEQE_info:
         const _caEQE;
         const 130;
         const 30;
 },
 $wgo_saAR8_entry() //  [R1, R2]
         { []
         }
     {offset
       caERA: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caERB; else goto caERC;
       caERB: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caERC: // global
           I64[Sp - 24] = block_caERt_info;
           _saAR8::P64 = R1;
           _saAPq::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saAPq::I64;
           P64[Sp - 8] = _saAR8::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaERZ; else goto caERu;
       uaERZ: // global
           call _caERt(R1) args: 0, res: 0, upd: 0;
       caERu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saAR8_info" {
     $wgo_saAR8_info:
         const $wgo_saAR8_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caERt() //  [R1]
         { []
         }
     {offset
       caERt: // global
           if (R1 & 7 == 1) goto caERx; else goto caERy;
       caERx: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caERy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caERK; else goto caERJ;
       caERK: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caERJ: // global
           _saARc::P64 = P64[R1 + 6];
           _saARd::P64 = P64[R1 + 14];
           _saARb::I64 = I64[R1 + 22];
           if (_saARb::I64 == I64[Sp + 8]) goto caERY; else goto caERS;
       caERY: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saARc::P64;
           R3 = _saARd::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caERS: // global
           Hp = Hp - 16;
           I64[Sp] = block_caERO_info;
           R2 = _saARd::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saARc::P64;
           I64[Sp + 16] = _saARb::I64;
           call $wgo_saAR8_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caERt_info" {
     block_caERt_info:
         const _caERt;
         const 66;
         const 30;
 },
 _caERO() //  [R1, R2, R3]
         { []
         }
     {offset
       caERO: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caERV; else goto caERU;
       caERV: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caERU: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caERO_info" {
     block_caERO_info:
         const _caERO;
         const 130;
         const 30;
 },
 $wio_saAPK_entry() //  [R1, R2]
         { []
         }
     {offset
       caES7: // global
           _saAPL::P64 = R2;
           _saAPK::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto caES8; else goto caES9;
       caES9: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caESb; else goto caESa;
       caESb: // global
           HpAlloc = 64;
           goto caES8;
       caES8: // global
           R2 = _saAPL::P64;
           R1 = _saAPK::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caESa: // global
           _saAPh::P64 = P64[_saAPK::P64 + 6];
           _saAPj::P64 = P64[_saAPK::P64 + 14];
           _saAPk::P64 = P64[_saAPK::P64 + 22];
           _saAPp::P64 = P64[_saAPK::P64 + 30];
           _saAPv::P64 = P64[_saAPK::P64 + 38];
           _saAPo::I64 = I64[_saAPK::P64 + 46];
           _saAPq::I64 = I64[_saAPK::P64 + 54];
           _saAPu::I64 = I64[_saAPK::P64 + 62];
           I64[Hp - 56] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 48] = _saAPv::P64;
           I64[Hp - 40] = _saAPq::I64;
           I64[Hp - 32] = _saAPo::I64;
           I64[Hp - 24] = _saAPu::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 64] = block_caEPm_info;
           R5 = _saAPL::P64;
           R4 = Hp - 14;
           R3 = _saAPq::I64;
           R2 = GHC.Base.++_closure+2;
           P64[Sp - 56] = _saAPh::P64;
           P64[Sp - 48] = _saAPj::P64;
           P64[Sp - 40] = _saAPk::P64;
           P64[Sp - 32] = _saAPp::P64;
           I64[Sp - 24] = _saAPq::I64;
           I64[Sp - 16] = _saAPu::I64;
           P64[Sp - 8] = _saAPL::P64;
           Sp = Sp - 64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saAPK_info" {
     $wio_saAPK_info:
         const $wio_saAPK_entry;
         const 12884901893;
         const 4294967304;
         const 8589934597;
         const SaAZi_srt+248;
 },
 _caEPm() //  [R1]
         { []
         }
     {offset
       caEPm: // global
           I64[Sp - 8] = block_caES0_info;
           _saAPR::P64 = R1;
           R1 = R1;
           P64[Sp] = _saAPR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEUz; else goto caES1;
       uaEUz: // global
           call _caES0(R1) args: 0, res: 0, upd: 0;
       caES1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEPm_info" {
     block_caEPm_info:
         const _caEPm;
         const 3079;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caES0() //  [R1]
         { []
         }
     {offset
       caES0: // global
           if (R1 & 7 == 1) goto caES4; else goto caES5;
       caES4: // global
           I64[Sp] = 0;
           call _saAPS() args: 0, res: 0, upd: 0;
       caES5: // global
           I64[Sp] = block_caEU3_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caES0_info" {
     block_caES0_info:
         const _caES0;
         const 6152;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEU3() //  [R1]
         { []
         }
     {offset
       caEU3: // global
           I64[Sp] = R1;
           call _saAPS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEU3_info" {
     block_caEU3_info:
         const _caEU3;
         const 6152;
         const 30;
 },
 _saAPS() //  []
         { []
         }
     {offset
       saAPS: // global
           _saAPU::I64 = I64[Sp] | I64[Sp + 56];
           _saAPV::I64 = _saAPU::I64 & 8;
           if (_saAPV::I64 != 0) goto uaEUs; else goto uaEUr;
       uaEUs: // global
           I64[Sp + 32] = _saAPV::I64;
           I64[Sp + 56] = _saAPU::I64;
           call _caEPA() args: 0, res: 0, upd: 0;
       uaEUr: // global
           I64[Sp + 24] = _saAPV::I64;
           I64[Sp + 56] = _saAPU::I64;
           Sp = Sp + 8;
           call _caEQS() args: 0, res: 0, upd: 0;
     }
 },
 _caEPA() //  []
         { []
         }
     {offset
       caEPA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caESi; else goto caESh;
       caESi: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_caEPz_info;
           R1 = I64[Sp + 32];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caESh: // global
           _saAPT::I64 = I64[Sp];
           _saAPU::I64 = I64[Sp + 56];
           if (_saAPT::I64 == _saAPU::I64) goto caESk; else goto caESl;
       caESk: // global
           Hp = Hp - 32;
           R1 = lvl11_raAui_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caESl: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _saAPU::I64 & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saAPT::I64 & 7;
           I64[Sp] = block_caEPO_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 24];
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caEPz() //  [R1]
         { []
         }
     {offset
       caEPz: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _caEPA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEPz_info" {
     block_caEPz_info:
         const _caEPz;
         const 13385;
         const 30;
 },
 _caEPO() //  [R1]
         { []
         }
     {offset
       caEPO: // global
           I64[Sp] = block_caEPQ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEUB; else goto caEPR;
       uaEUB: // global
           call _caEPQ(R1) args: 0, res: 0, upd: 0;
       caEPR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEPO_info" {
     block_caEPO_info:
         const _caEPO;
         const 8072;
         const 30;
 },
 _caEPQ() //  [R1]
         { []
         }
     {offset
       caEPQ: // global
           if (R1 & 7 == 1) goto caESp; else goto caET7;
       caESp: // global
           I64[Sp + 40] = block_caEPV_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaEUC; else goto caEPW;
       uaEUC: // global
           call _caEPV(R1) args: 0, res: 0, upd: 0;
       caEPW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caET7: // global
           R1 = lvl12_raAuj_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEPQ_info" {
     block_caEPQ_info:
         const _caEPQ;
         const 8072;
         const 30;
 },
 _caEPV() //  [R1]
         { []
         }
     {offset
       caEPV: // global
           _saAPL::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caESs; else goto caET1;
       caESs: // global
           I64[Sp] = block_caEQ0_info;
           R1 = P64[_saAPL::P64 + 8];
           if (R1 & 7 != 0) goto uaEUD; else goto caEQ1;
       uaEUD: // global
           call _caEQ0(R1) args: 0, res: 0, upd: 0;
       caEQ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caET1: // global
           I64[Sp + 24] = block_caESZ_info;
           R5 = _saAPL::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEPV_info" {
     block_caEPV_info:
         const _caEPV;
         const 195;
         const 30;
 },
 _caEQ0() //  [R1]
         { []
         }
     {offset
       caEQ0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caESv; else goto caESu;
       caESv: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caESu: // global
           _saAPq::I64 = I64[Sp + 8];
           _saAQa::P64 = P64[R1 + 7];
           _saAQc::P64 = P64[R1 + 15];
           _saAQb::I64 = I64[R1 + 23];
           _saAQd::I64 = _saAPq::I64 & (I64[_saAQa::P64 + 8] - 1);
           _saAQi::P64 = P64[(_saAQa::P64 + 24) + (_saAQd::I64 << 3)];
           I64[Hp - 8] = $wgo_saAQj_info;
           I64[Hp] = _saAPq::I64;
           I64[Sp - 8] = block_caESw_info;
           R2 = _saAQi::P64;
           R1 = Hp - 7;
           I64[Sp] = _saAQd::I64;
           P64[Sp + 8] = _saAQc::P64;
           I64[Sp + 16] = _saAQb::I64;
           P64[Sp + 24] = _saAQa::P64;
           Sp = Sp - 8;
           call $wgo_saAQj_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEQ0_info" {
     block_caEQ0_info:
         const _caEQ0;
         const 451;
         const 30;
 },
 _caESw() //  [R1, R2, R3]
         { []
         }
     {offset
       caESw: // global
           I64[Sp - 16] = block_caESy_info;
           _saAQx::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saAQx::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEUJ; else goto caESA;
       uaEUJ: // global
           call _caESy(R1) args: 0, res: 0, upd: 0;
       caESA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caESw_info" {
     block_caESw_info:
         const _caESw;
         const 324;
         const 30;
 },
 _caESy() //  [R1]
         { []
         }
     {offset
       caESy: // global
           if (R1 & 7 == 1) goto uaEUu; else goto caESL;
       uaEUu: // global
           Sp = Sp + 56;
           call _caETI() args: 0, res: 0, upd: 0;
       caESL: // global
           _saAQa::P64 = P64[Sp + 48];
           _saAQd::I64 = I64[Sp + 24];
           _saAQx::P64 = P64[Sp + 16];
           _saAQz::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saAQa::P64 + 24) + (_saAQd::I64 << 3)] = _saAQz::P64;
           I64[_saAQa::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saAQa::P64 + 24) + ((I64[_saAQa::P64 + 8] << 3) + (_saAQd::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caESJ_info;
           R1 = _saAQx::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaEUK; else goto caESM;
       uaEUK: // global
           call _caESJ(R1) args: 0, res: 0, upd: 0;
       caESM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caESy_info" {
     block_caESy_info:
         const _caESy;
         const 1286;
         const 30;
 },
 _caESJ() //  [R1]
         { []
         }
     {offset
       caESJ: // global
           if (R1 & 7 == 1) goto uaEUv; else goto caESW;
       uaEUv: // global
           Sp = Sp + 32;
           call _caETI() args: 0, res: 0, upd: 0;
       caESW: // global
           _saAQb::I64 = I64[Sp + 16];
           _saAQc::P64 = P64[Sp + 8];
           I64[_saAQb::I64] = I64[_saAQb::I64] - 1;
           call MO_Touch(_saAQc::P64);
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caESJ_info" {
     block_caESJ_info:
         const _caESJ;
         const 387;
         const 30;
 },
 _caESZ() //  []
         { []
         }
     {offset
       caESZ: // global
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caESZ_info" {
     block_caESZ_info:
         const _caESZ;
         const 0;
         const 30;
 },
 _caEQS() //  []
         { []
         }
     {offset
       caEQS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caETb; else goto caETa;
       caETb: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caEQR_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caETa: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           I64[Sp - 8] = block_caEQY_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caEQR() //  [R1]
         { []
         }
     {offset
       caEQR: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caEQS() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caEQR_info" {
     block_caEQR_info:
         const _caEQR;
         const 6408;
         const 30;
 },
 _caEQY() //  [R1]
         { []
         }
     {offset
       caEQY: // global
           I64[Sp] = block_caER0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEUF; else goto caER1;
       uaEUF: // global
           call _caER0(R1) args: 0, res: 0, upd: 0;
       caER1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEQY_info" {
     block_caEQY_info:
         const _caEQY;
         const 8072;
         const 30;
 },
 _caER0() //  [R1]
         { []
         }
     {offset
       caER0: // global
           if (R1 & 7 == 1) goto caETf; else goto caETX;
       caETf: // global
           I64[Sp + 40] = block_caER5_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaEUG; else goto caER6;
       uaEUG: // global
           call _caER5(R1) args: 0, res: 0, upd: 0;
       caER6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caETX: // global
           R1 = lvl11_raAui_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caER0_info" {
     block_caER0_info:
         const _caER0;
         const 8072;
         const 30;
 },
 _caER5() //  [R1]
         { []
         }
     {offset
       caER5: // global
           _saAPL::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caETi; else goto caETR;
       caETi: // global
           I64[Sp] = block_caERa_info;
           R1 = P64[_saAPL::P64 + 8];
           if (R1 & 7 != 0) goto uaEUH; else goto caERb;
       uaEUH: // global
           call _caERa(R1) args: 0, res: 0, upd: 0;
       caERb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caETR: // global
           I64[Sp + 24] = block_caETP_info;
           R5 = _saAPL::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caER5_info" {
     block_caER5_info:
         const _caER5;
         const 195;
         const 30;
 },
 _caERa() //  [R1]
         { []
         }
     {offset
       caERa: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caETl; else goto caETk;
       caETl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caETk: // global
           _saAPq::I64 = I64[Sp + 8];
           _saAQZ::P64 = P64[R1 + 7];
           _saAR1::P64 = P64[R1 + 15];
           _saAR0::I64 = I64[R1 + 23];
           _saAR2::I64 = _saAPq::I64 & (I64[_saAQZ::P64 + 8] - 1);
           _saAR7::P64 = P64[(_saAQZ::P64 + 24) + (_saAR2::I64 << 3)];
           I64[Hp - 8] = $wgo_saAR8_info;
           I64[Hp] = _saAPq::I64;
           I64[Sp - 8] = block_caETm_info;
           R2 = _saAR7::P64;
           R1 = Hp - 7;
           I64[Sp] = _saAR2::I64;
           P64[Sp + 8] = _saAR1::P64;
           I64[Sp + 16] = _saAR0::I64;
           P64[Sp + 24] = _saAQZ::P64;
           Sp = Sp - 8;
           call $wgo_saAR8_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caERa_info" {
     block_caERa_info:
         const _caERa;
         const 451;
         const 30;
 },
 _caETm() //  [R1, R2, R3]
         { []
         }
     {offset
       caETm: // global
           I64[Sp - 16] = block_caETo_info;
           _saARm::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saARm::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEUN; else goto caETq;
       uaEUN: // global
           call _caETo(R1) args: 0, res: 0, upd: 0;
       caETq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caETm_info" {
     block_caETm_info:
         const _caETm;
         const 324;
         const 30;
 },
 _caETo() //  [R1]
         { []
         }
     {offset
       caETo: // global
           if (R1 & 7 == 1) goto uaEUx; else goto caETB;
       uaEUx: // global
           Sp = Sp + 56;
           call _caETI() args: 0, res: 0, upd: 0;
       caETB: // global
           _saAQZ::P64 = P64[Sp + 48];
           _saAR2::I64 = I64[Sp + 24];
           _saARm::P64 = P64[Sp + 16];
           _saARo::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saAQZ::P64 + 24) + (_saAR2::I64 << 3)] = _saARo::P64;
           I64[_saAQZ::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saAQZ::P64 + 24) + ((I64[_saAQZ::P64 + 8] << 3) + (_saAR2::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caETz_info;
           R1 = _saARm::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaEUO; else goto caETC;
       uaEUO: // global
           call _caETz(R1) args: 0, res: 0, upd: 0;
       caETC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caETo_info" {
     block_caETo_info:
         const _caETo;
         const 1286;
         const 30;
 },
 _caETz() //  [R1]
         { []
         }
     {offset
       caETz: // global
           if (R1 & 7 == 1) goto uaEUy; else goto caETM;
       uaEUy: // global
           Sp = Sp + 32;
           call _caETI() args: 0, res: 0, upd: 0;
       caETM: // global
           _saAR0::I64 = I64[Sp + 16];
           _saAR1::P64 = P64[Sp + 8];
           I64[_saAR0::I64] = I64[_saAR0::I64] - 1;
           call MO_Touch(_saAR1::P64);
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caETz_info" {
     block_caETz_info:
         const _caETz;
         const 387;
         const 30;
 },
 _caETI() //  []
         { []
         }
     {offset
       caETI: // global
           R1 = lvl10_raAuh_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caETP() //  []
         { []
         }
     {offset
       caETP: // global
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caETP_info" {
     block_caETP_info:
         const _caETP;
         const 0;
         const 30;
 },
 io_saARG_entry() //  [R1, R2]
         { []
         }
     {offset
       caEV2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEV3; else goto caEV4;
       caEV3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEV4: // global
           I64[Sp - 16] = block_caEUZ_info;
           _saAPK::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saAPK::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEV8; else goto caEV0;
       uaEV8: // global
           call _caEUZ(R1) args: 0, res: 0, upd: 0;
       caEV0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saARG_info" {
     io_saARG_info:
         const io_saARG_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaAZi_srt+248;
 },
 _caEUZ() //  [R1]
         { []
         }
     {offset
       caEUZ: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saAPK_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEUZ_info" {
     block_caEUZ_info:
         const _caEUZ;
         const 1;
         const 4294967326;
         const SaAZi_srt+248;
 },
 sat_saARU_entry() //  [R1, R2]
         { []
         }
     {offset
       caEVk: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEVl; else goto caEVm;
       caEVl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEVm: // global
           I64[Sp - 16] = block_caEVi_info;
           _saARR::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saARR::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saARU_info" {
     sat_saARU_info:
         const sat_saARU_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEVi() //  []
         { []
         }
     {offset
       caEVi: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEVi_info" {
     block_caEVi_info:
         const _caEVi;
         const 1;
         const 30;
 },
 sat_saARP_entry() //  [R1]
         { []
         }
     {offset
       caEVt: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saARG_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saARP_info" {
     sat_saARP_info:
         const sat_saARP_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saARQ_entry() //  [R1]
         { []
         }
     {offset
       caEVB: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saARQ_info" {
     sat_saARQ_info:
         const sat_saARQ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saASh_entry() //  [R1, R2]
         { []
         }
     {offset
       caEVT: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEVU; else goto caEVV;
       caEVU: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEVV: // global
           I64[Sp - 16] = block_caEVR_info;
           _saASe::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saASe::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saASh_info" {
     sat_saASh_info:
         const sat_saASh_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEVR() //  []
         { []
         }
     {offset
       caEVR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEVR_info" {
     block_caEVR_info:
         const _caEVR;
         const 1;
         const 30;
 },
 sat_saASc_entry() //  [R1]
         { []
         }
     {offset
       caEW2: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saARG_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saASc_info" {
     sat_saASc_info:
         const sat_saASc_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saASd_entry() //  [R1]
         { []
         }
     {offset
       caEWa: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saASd_info" {
     sat_saASd_info:
         const sat_saASd_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saASm_entry() //  [R1]
         { []
         }
     {offset
       caEWh: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caEWi; else goto caEWj;
       caEWi: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caEWj: // global
           I64[Sp - 24] = block_caEVK_info;
           _saAPI::P64 = P64[R1 + 7];
           _saARG::P64 = P64[R1 + 15];
           R1 = _saAPI::P64;
           P64[Sp - 16] = _saAPI::P64;
           P64[Sp - 8] = _saARG::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saASm_info" {
     sat_saASm_info:
         const sat_saASm_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 _caEVK() //  [R1]
         { []
         }
     {offset
       caEVK: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEWm; else goto caEWl;
       caEWm: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEWl: // global
           I64[Hp - 56] = sat_saASh_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saASc_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saASd_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEWd_info;
           R2 = Hp - 54;
           _saASb::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saASb::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEVK_info" {
     block_caEVK_info:
         const _caEVK;
         const 2;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEWd() //  [R1]
         { []
         }
     {offset
       caEWd: // global
           _saAPI::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEWf_info;
           R2 = P64[Sp + 16];
           _saASk::P64 = R1;
           R1 = _saAPI::P64;
           P64[Sp + 16] = _saASk::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEWd_info" {
     block_caEWd_info:
         const _caEWd;
         const 2;
         const 30;
 },
 _caEWf() //  []
         { []
         }
     {offset
       caEWf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEWf_info" {
     block_caEWf_info:
         const _caEWf;
         const 1;
         const 30;
 },
 sat_saASH_entry() //  [R1, R2]
         { []
         }
     {offset
       caEWz: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caEWA; else goto caEWB;
       caEWA: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caEWB: // global
           I64[Sp - 16] = block_caEWx_info;
           _saASE::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saASE::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saASH_info" {
     sat_saASH_info:
         const sat_saASH_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caEWx() //  []
         { []
         }
     {offset
       caEWx: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEWx_info" {
     block_caEWx_info:
         const _caEWx;
         const 1;
         const 30;
 },
 sat_saASC_entry() //  [R1]
         { []
         }
     {offset
       caEWI: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saARG_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saASC_info" {
     sat_saASC_info:
         const sat_saASC_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saASD_entry() //  [R1]
         { []
         }
     {offset
       caEWQ: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saASD_info" {
     sat_saASD_info:
         const sat_saASD_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 registerFd1_raAuk_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caEWT: // global
           if ((Sp + -120) < SpLim) (likely: False) goto caEWU; else goto caEWV;
       caEWU: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = registerFd1_raAuk_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caEWV: // global
           I64[Sp - 40] = block_caEOg_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaEZD; else goto caEOh;
       uaEZD: // global
           call _caEOg(R1) args: 0, res: 0, upd: 0;
       caEOh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . registerFd1_raAuk_info" {
     registerFd1_raAuk_info:
         const registerFd1_raAuk_entry;
         const 0;
         const 576742231575101454;
         const 25769803801;
         const SaAZi_srt+120;
 },
 _caEOg() //  [R1]
         { []
         }
     {offset
       caEOg: // global
           I64[Sp - 32] = block_caEOl_info;
           _saAOZ::P64 = P64[R1 + 7];
           _saAP1::P64 = P64[R1 + 23];
           _saAP3::P64 = P64[R1 + 31];
           _saAP5::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 24] = _saAP1::P64;
           P64[Sp - 16] = _saAP3::P64;
           P64[Sp - 8] = _saAP5::P64;
           P64[Sp] = _saAOZ::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaEZw; else goto caEOm;
       uaEZw: // global
           call _caEOl(R1) args: 0, res: 0, upd: 0;
       caEOm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOg_info" {
     block_caEOg_info:
         const _caEOg;
         const 4;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEOl() //  [R1]
         { []
         }
     {offset
       caEOl: // global
           I64[Sp - 8] = block_caEOq_info;
           _saAPc::P64 = R1;
           _saAPd::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _saAPd::I64;
           P64[Sp + 8] = _saAPc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEZx; else goto caEOr;
       uaEZx: // global
           call _caEOq(R1) args: 0, res: 0, upd: 0;
       caEOr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOl_info" {
     block_caEOl_info:
         const _caEOl;
         const 8;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEOq() //  [R1]
         { []
         }
     {offset
       caEOq: // global
           I64[Sp - 8] = block_caEOv_info;
           _saAPe::P64 = R1;
           _saAPf::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp] = _saAPf::I64;
           P64[Sp + 40] = _saAPe::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEZy; else goto caEOw;
       uaEZy: // global
           call _caEOv(R1) args: 0, res: 0, upd: 0;
       caEOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOq_info" {
     block_caEOq_info:
         const _caEOq;
         const 73;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEOv() //  [R1]
         { []
         }
     {offset
       caEOv: // global
           _saAOU::P64 = P64[Sp + 64];
           _saAPh::P64 = P64[R1 + 7];
           _saAPj::P64 = P64[R1 + 23];
           _saAPk::P64 = P64[R1 + 31];
           (_saAPo::I64) = call MO_AtomicRMW W64 AMO_Add(P64[Sp + 40] + 16, 1);
           I64[Sp - 16] = block_caEOC_info;
           R1 = _saAOU::P64;
           I64[Sp - 8] = _saAPo::I64;
           P64[Sp] = _saAPk::P64;
           P64[Sp + 40] = _saAPj::P64;
           P64[Sp + 64] = _saAPh::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaEZz; else goto caEOD;
       uaEZz: // global
           call _caEOC(R1) args: 0, res: 0, upd: 0;
       caEOD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOv_info" {
     block_caEOv_info:
         const _caEOv;
         const 202;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEOC() //  [R1]
         { []
         }
     {offset
       caEOC: // global
           I64[Sp - 8] = block_caEOH_info;
           _saAPp::P64 = R1;
           _saAPq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saAPq::I64;
           P64[Sp + 88] = _saAPp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEZA; else goto caEOI;
       uaEZA: // global
           call _caEOH(R1) args: 0, res: 0, upd: 0;
       caEOI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOC_info" {
     block_caEOC_info:
         const _caEOC;
         const 844;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEOH() //  [R1]
         { []
         }
     {offset
       caEOH: // global
           I64[Sp - 8] = block_caEX1_info;
           _saAPr::P64 = R1;
           _saAPs::I64 = I64[R1 + 7];
           R1 = P64[Sp + 104];
           I64[Sp] = _saAPs::I64;
           P64[Sp + 104] = _saAPr::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaEZB; else goto caEZf;
       uaEZB: // global
           call _caEX1(R1) args: 0, res: 0, upd: 0;
       caEZf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOH_info" {
     block_caEOH_info:
         const _caEOH;
         const 1741;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEX1() //  [R1]
         { []
         }
     {offset
       caEX1: // global
           _saAOT::P64 = P64[Sp + 88];
           _saAPs::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caEZl; else goto caEZp;
       caEZl: // global
           _saAPu::I64 = _saAPs::I64;
           goto saAPt;
       caEZp: // global
           _saAPu::I64 = _saAPs::I64 | 8;
           goto saAPt;
       saAPt: // global
           I64[Sp + 8] = block_caEOR_info;
           R1 = _saAOT::P64;
           I64[Sp + 88] = _saAPu::I64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEX1_info" {
     block_caEX1_info:
         const _caEX1;
         const 3534;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEOR() //  [R1]
         { []
         }
     {offset
       caEOR: // global
           I64[Sp - 8] = block_caEOT_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOR_info" {
     block_caEOR_info:
         const _caEOR;
         const 34509;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEOT() //  [R1]
         { []
         }
     {offset
       caEOT: // global
           _saAPc::P64 = P64[Sp + 56];
           _saAPd::I64 = I64[Sp + 48];
           _saAPe::P64 = P64[Sp + 80];
           _saAPz::I64 = I64[Sp + 16] & 31;
           if (%MO_S_Gt_W64(_saAPd::I64,
                            _saAPz::I64)) goto caEX9; else goto caEZe;
       caEZe: // global
           if (%MO_S_Gt_W64(_saAPz::I64,
                            I64[Sp + 40])) goto caEX9; else goto caEXa;
       caEX9: // global
           R4 = _saAPz::I64;
           R3 = _saAPc::P64;
           R2 = _saAPe::P64;
           Sp = Sp + 120;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caEXa: // global
           _saAPG::P64 = P64[P64[Sp + 64] + ((_saAPz::I64 - _saAPd::I64 << 3) + 24)];
           I64[Sp] = block_caEP9_info;
           _saAPy::I64 = R1;
           R1 = _saAPG::P64;
           I64[Sp + 80] = _saAPy::I64;
           if (R1 & 7 != 0) goto uaEZC; else goto caEPa;
       uaEZC: // global
           call _caEP9(R1) args: 0, res: 0, upd: 0;
       caEPa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEOT_info" {
     block_caEOT_info:
         const _caEOT;
         const 69006;
         const 281479271677982;
         const SaAZi_srt+120;
 },
 _caEP9() //  [R1]
         { []
         }
     {offset
       caEP9: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto caEXd; else goto caEXc;
       caEXd: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEXc: // global
           _saAPI::P64 = P64[R1 + 7];
           I64[Hp - 128] = GHC.Event.Manager.FdKey_con_info;
           _saAPq::I64 = I64[Sp + 16];
           I64[Hp - 120] = _saAPq::I64;
           _saAPo::I64 = I64[Sp + 24];
           I64[Hp - 112] = _saAPo::I64;
           I64[Hp - 104] = $wio_saAPK_info;
           P64[Hp - 96] = P64[Sp + 96];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 104];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = _saAPo::I64;
           I64[Hp - 48] = _saAPq::I64;
           I64[Hp - 40] = I64[Sp + 88];
           I64[Hp - 32] = io_saARG_info;
           P64[Hp - 24] = Hp - 102;
           _caEPe::P64 = Hp - 127;
           _caEUU::P64 = Hp - 30;
           _saARL::I64 = I64[Sp + 80];
           if (_saARL::I64 != 0) goto uaEZv; else goto caEXZ;
       uaEZv: // global
           if (_saARL::I64 != 1) goto caEXk; else goto caEYC;
       caEXk: // global
           Hp = Hp - 24;
           I64[Sp] = block_caEVb_info;
           R1 = _saAPI::P64;
           P64[Sp + 88] = _saAPI::P64;
           P64[Sp + 96] = _caEUU::P64;
           P64[Sp + 104] = _caEPe::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caEYC: // global
           Hp = Hp - 24;
           I64[Sp] = block_caEWq_info;
           R1 = _saAPI::P64;
           P64[Sp + 88] = _saAPI::P64;
           P64[Sp + 96] = _caEUU::P64;
           P64[Sp + 104] = _caEPe::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caEXZ: // global
           I64[Hp - 16] = sat_saASm_info;
           P64[Hp - 8] = _saAPI::P64;
           P64[Hp] = _caEUU::P64;
           I64[Sp] = block_caEXW_info;
           R1 = Hp - 15;
           P64[Sp + 104] = _caEPe::P64;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEP9_info" {
     block_caEP9_info:
         const _caEP9;
         const 114062;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEVb() //  [R1]
         { []
         }
     {offset
       caEVb: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEXn; else goto caEXm;
       caEXn: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEXm: // global
           I64[Hp - 56] = sat_saARU_info;
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saARP_info;
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saARQ_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEXe_info;
           R2 = Hp - 54;
           _saARO::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 96] = _saARO::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEVb_info" {
     block_caEVb_info:
         const _caEVb;
         const 65422;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEXe() //  [R1]
         { []
         }
     {offset
       caEXe: // global
           I64[Sp] = block_caEXg_info;
           R2 = P64[Sp + 96];
           _saARX::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 96] = _saARX::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXe_info" {
     block_caEXe_info:
         const _caEXe;
         const 65422;
         const 30;
 },
 _caEXg() //  []
         { []
         }
     {offset
       caEXg: // global
           I64[Sp] = block_caEXi_info;
           R1 = P64[Sp + 96];
           if (R1 & 7 != 0) goto uaEZE; else goto caEXq;
       uaEZE: // global
           call _caEXi(R1) args: 0, res: 0, upd: 0;
       caEXq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXg_info" {
     block_caEXg_info:
         const _caEXg;
         const 130958;
         const 30;
 },
 _caEXi() //  [R1]
         { []
         }
     {offset
       caEXi: // global
           I64[Sp] = block_caEXu_info;
           _saAS0::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 96] = _saAS0::P64;
           if (R1 & 7 != 0) goto uaEZF; else goto caEXw;
       uaEZF: // global
           call _caEXu(R1) args: 0, res: 0, upd: 0;
       caEXw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXi_info" {
     block_caEXi_info:
         const _caEXi;
         const 262030;
         const 30;
 },
 _caEXu() //  [R1]
         { []
         }
     {offset
       caEXu: // global
           if (R1 & 7 == 1) goto caEXF; else goto caEXQ;
       caEXF: // global
           I64[Sp + 88] = block_caEXA_info;
           R3 = P64[Sp + 112];
           R2 = P64[Sp + 104];
           R1 = P64[Sp + 8];
           Sp = Sp + 88;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       caEXQ: // global
           _saAS0::P64 = P64[Sp + 96];
           I64[Sp + 96] = block_caEXO_info;
           R1 = _saAS0::P64;
           Sp = Sp + 96;
           if (R1 & 7 != 0) goto uaEZG; else goto caEXR;
       uaEZG: // global
           call _caEXO() args: 0, res: 0, upd: 0;
       caEXR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXu_info" {
     block_caEXu_info:
         const _caEXu;
         const 130958;
         const 30;
 },
 _caEXA() //  []
         { []
         }
     {offset
       caEXA: // global
           _saAS0::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEXC_info;
           R1 = _saAS0::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaEZH; else goto caEXH;
       uaEZH: // global
           call _caEXC() args: 0, res: 0, upd: 0;
       caEXH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXA_info" {
     block_caEXA_info:
         const _caEXA;
         const 259;
         const 30;
 },
 _caEXC() //  []
         { []
         }
     {offset
       caEXC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXC_info" {
     block_caEXC_info:
         const _caEXC;
         const 130;
         const 30;
 },
 _caEXO() //  []
         { []
         }
     {offset
       caEXO: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXO_info" {
     block_caEXO_info:
         const _caEXO;
         const 130;
         const 30;
 },
 _caEWq() //  [R1]
         { []
         }
     {offset
       caEWq: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caEYF; else goto caEYE;
       caEYF: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caEYE: // global
           I64[Hp - 56] = sat_saASH_info;
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saASC_info;
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saASD_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caEYx_info;
           R2 = Hp - 54;
           _saASB::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 96] = _saASB::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEWq_info" {
     block_caEWq_info:
         const _caEWq;
         const 65422;
         const 4294967326;
         const SaAZi_srt+248;
 },
 _caEYx() //  [R1]
         { []
         }
     {offset
       caEYx: // global
           I64[Sp] = block_caEYz_info;
           R2 = P64[Sp + 96];
           _saASK::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 96] = _saASK::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYx_info" {
     block_caEYx_info:
         const _caEYx;
         const 65422;
         const 30;
 },
 _caEYz() //  []
         { []
         }
     {offset
       caEYz: // global
           I64[Sp] = block_caEYB_info;
           R1 = P64[Sp + 96];
           if (R1 & 7 != 0) goto uaEZM; else goto caEYI;
       uaEZM: // global
           call _caEYB(R1) args: 0, res: 0, upd: 0;
       caEYI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYz_info" {
     block_caEYz_info:
         const _caEYz;
         const 130958;
         const 30;
 },
 _caEYB() //  [R1]
         { []
         }
     {offset
       caEYB: // global
           I64[Sp] = block_caEYM_info;
           _saASN::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 96] = _saASN::P64;
           if (R1 & 7 != 0) goto uaEZN; else goto caEYO;
       uaEZN: // global
           call _caEYM(R1) args: 0, res: 0, upd: 0;
       caEYO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYB_info" {
     block_caEYB_info:
         const _caEYB;
         const 262030;
         const 30;
 },
 _caEYM() //  [R1]
         { []
         }
     {offset
       caEYM: // global
           if (R1 & 7 == 1) goto caEYX; else goto caEZ8;
       caEYX: // global
           I64[Sp + 88] = block_caEYS_info;
           R3 = P64[Sp + 112];
           R2 = P64[Sp + 104];
           R1 = P64[Sp + 8];
           Sp = Sp + 88;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       caEZ8: // global
           _saASN::P64 = P64[Sp + 96];
           I64[Sp + 96] = block_caEZ6_info;
           R1 = _saASN::P64;
           Sp = Sp + 96;
           if (R1 & 7 != 0) goto uaEZO; else goto caEZ9;
       uaEZO: // global
           call _caEZ6() args: 0, res: 0, upd: 0;
       caEZ9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYM_info" {
     block_caEYM_info:
         const _caEYM;
         const 130958;
         const 30;
 },
 _caEYS() //  []
         { []
         }
     {offset
       caEYS: // global
           _saASN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEYU_info;
           R1 = _saASN::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaEZP; else goto caEYZ;
       uaEZP: // global
           call _caEYU() args: 0, res: 0, upd: 0;
       caEYZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYS_info" {
     block_caEYS_info:
         const _caEYS;
         const 259;
         const 30;
 },
 _caEYU() //  []
         { []
         }
     {offset
       caEYU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYU_info" {
     block_caEYU_info:
         const _caEYU;
         const 130;
         const 30;
 },
 _caEZ6() //  []
         { []
         }
     {offset
       caEZ6: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEZ6_info" {
     block_caEZ6_info:
         const _caEZ6;
         const 130;
         const 30;
 },
 _caEXW() //  [R1]
         { []
         }
     {offset
       caEXW: // global
           I64[Sp] = block_caEXY_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaEZI; else goto caEY1;
       uaEZI: // global
           call _caEXY(R1) args: 0, res: 0, upd: 0;
       caEY1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXW_info" {
     block_caEXW_info:
         const _caEXW;
         const 262030;
         const 30;
 },
 _caEXY() //  [R1]
         { []
         }
     {offset
       caEXY: // global
           I64[Sp] = block_caEY5_info;
           _saASr::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 96] = _saASr::P64;
           if (R1 & 7 != 0) goto uaEZJ; else goto caEY7;
       uaEZJ: // global
           call _caEY5(R1) args: 0, res: 0, upd: 0;
       caEY7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEXY_info" {
     block_caEXY_info:
         const _caEXY;
         const 262030;
         const 30;
 },
 _caEY5() //  [R1]
         { []
         }
     {offset
       caEY5: // global
           if (R1 & 7 == 1) goto caEYg; else goto caEYr;
       caEYg: // global
           I64[Sp + 88] = block_caEYb_info;
           R3 = P64[Sp + 112];
           R2 = P64[Sp + 104];
           R1 = P64[Sp + 8];
           Sp = Sp + 88;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       caEYr: // global
           _saASr::P64 = P64[Sp + 96];
           I64[Sp + 96] = block_caEYp_info;
           R1 = _saASr::P64;
           Sp = Sp + 96;
           if (R1 & 7 != 0) goto uaEZK; else goto caEYs;
       uaEZK: // global
           call _caEYp() args: 0, res: 0, upd: 0;
       caEYs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEY5_info" {
     block_caEY5_info:
         const _caEY5;
         const 130958;
         const 30;
 },
 _caEYb() //  []
         { []
         }
     {offset
       caEYb: // global
           _saASr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caEYd_info;
           R1 = _saASr::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaEZL; else goto caEYi;
       uaEZL: // global
           call _caEYd() args: 0, res: 0, upd: 0;
       caEYi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYb_info" {
     block_caEYb_info:
         const _caEYb;
         const 259;
         const 30;
 },
 _caEYd() //  []
         { []
         }
     {offset
       caEYd: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYd_info" {
     block_caEYd_info:
         const _caEYd;
         const 130;
         const 30;
 },
 _caEYp() //  []
         { []
         }
     {offset
       caEYp: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caEYp_info" {
     block_caEYp_info:
         const _caEYp;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.177170147 UTC

[section ""data" . GHC.Event.Manager.registerFd_closure" {
     GHC.Event.Manager.registerFd_closure:
         const GHC.Event.Manager.registerFd_info;
         const 0;
 },
 GHC.Event.Manager.registerFd_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caF6c: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call registerFd1_raAuk_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.registerFd_info" {
     GHC.Event.Manager.registerFd_info:
         const GHC.Event.Manager.registerFd_entry;
         const 0;
         const 4294967310;
         const 25769803801;
         const SaAZi_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.180296873 UTC

[section ""cstring" . lvl13_raAul_bytes" {
     lvl13_raAul_bytes:
         I8[] [117,110,114,101,103,105,115,116,101,114,70,100,95]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.18270096 UTC

[section ""data" . lvl14_raAum_closure" {
     lvl14_raAum_closure:
         const lvl14_raAum_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_raAum_entry() //  [R1]
         { []
         }
     {offset
       caF6q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caF6r; else goto caF6s;
       caF6r: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caF6s: // global
           (_caF6n::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caF6n::I64 == 0) goto caF6p; else goto caF6o;
       caF6p: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caF6o: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caF6n::I64;
           R2 = lvl13_raAul_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_raAum_info" {
     lvl14_raAum_info:
         const lvl14_raAum_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.187094295 UTC

[section ""data" . lvl15_raAun_closure" {
     lvl15_raAun_closure:
         const lvl15_raAun_info;
         const 0;
 },
 lvl15_raAun_entry() //  [R2]
         { []
         }
     {offset
       caF6E: // global
           R3 = R2;
           R2 = lvl14_raAum_closure;
           call $wlvl_raAub_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_raAun_info" {
     lvl15_raAun_info:
         const lvl15_raAun_entry;
         const 0;
         const 9007203549708302;
         const 4294967300;
         const SaAZi_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.218690668 UTC

[section ""data" . GHC.Event.Manager.unregisterFd2_closure" {
     GHC.Event.Manager.unregisterFd2_closure:
         const GHC.Event.Manager.unregisterFd2_info;
         const 0;
 },
 g_saATV_entry() //  [R1, R2]
         { []
         }
     {offset
       caF80: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caF81; else goto caF82;
       caF81: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caF82: // global
           I64[Sp - 16] = block_caF7X_info;
           _saATr::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 8] = _saATr::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaF87; else goto caF7Y;
       uaF87: // global
           call _caF7X(R1) args: 0, res: 0, upd: 0;
       caF7Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . g_saATV_info" {
     g_saATV_info:
         const g_saATV_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caF7X() //  [R1]
         { []
         }
     {offset
       caF7X: // global
           R1 = I64[((I64[R1 + 23] != I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caF7X_info" {
     block_caF7X_info:
         const _caF7X;
         const 65;
         const 30;
 },
 $wgo_saAU3_entry() //  [R1, R2]
         { []
         }
     {offset
       caF8k: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caF8l; else goto caF8m;
       caF8l: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caF8m: // global
           I64[Sp - 32] = block_caF8d_info;
           _saAU3::P64 = R1;
           _saATV::P64 = P64[R1 + 7];
           _saATq::I64 = I64[R1 + 15];
           R1 = R2;
           I64[Sp - 24] = _saATq::I64;
           P64[Sp - 16] = _saATV::P64;
           P64[Sp - 8] = _saAU3::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaF8Z; else goto caF8e;
       uaF8Z: // global
           call _caF8d(R1) args: 0, res: 0, upd: 0;
       caF8e: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saAU3_info" {
     $wgo_saAU3_info:
         const $wgo_saAU3_entry;
         const 4294967297;
         const 12;
         const 4294967301;
 },
 _caF8d() //  [R1]
         { []
         }
     {offset
       caF8d: // global
           if (R1 & 7 == 1) goto caF8h; else goto caF8i;
       caF8h: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caF8i: // global
           _saAU7::P64 = P64[R1 + 6];
           _saAU8::P64 = P64[R1 + 14];
           _saAU6::I64 = I64[R1 + 22];
           if (_saAU6::I64 == I64[Sp + 8]) goto caF8G; else goto caF8A;
       caF8G: // global
           I64[Sp] = block_caF8F_info;
           R3 = _saAU7::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 8] = _saAU8::P64;
           P64[Sp + 16] = _saAU7::P64;
           I64[Sp + 24] = _saAU6::I64;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 8, upd: 8;
       caF8A: // global
           I64[Sp + 8] = block_caF8w_info;
           R2 = _saAU8::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _saAU7::P64;
           I64[Sp + 24] = _saAU6::I64;
           Sp = Sp + 8;
           call $wgo_saAU3_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF8d_info" {
     block_caF8d_info:
         const _caF8d;
         const 67;
         const 30;
 },
 _caF8F() //  [R1]
         { []
         }
     {offset
       caF8F: // global
           _saAU7::P64 = P64[Sp + 16];
           _saAU8::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto caF8M; else goto caF8U;
       caF8M: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caF8P; else goto caF8O;
       caF8P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caF8O: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saAU7::P64;
           R3 = _saAU8::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caF8U: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caF8X; else goto caF8W;
       caF8X: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caF8W: // global
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _saAU8::P64;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saAU7::P64;
           R3 = Hp - 38;
           R2 = Hp - 6;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caF8F_info" {
     block_caF8F_info:
         const _caF8F;
         const 259;
         const 30;
 },
 _caF8w() //  [R1, R2, R3]
         { []
         }
     {offset
       caF8w: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caF8D; else goto caF8C;
       caF8D: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caF8C: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caF8w_info" {
     block_caF8w_info:
         const _caF8w;
         const 130;
         const 30;
 },
 go_saAV6_entry() //  [R1, R2]
         { []
         }
     {offset
       caF9F: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caF9G; else goto uaF9Y;
       caF9G: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uaF9Y: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _caF9v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_saAV6_info" {
     go_saAV6_info:
         const go_saAV6_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caF9v() //  []
         { []
         }
     {offset
       caF9v: // global
           _saATq::I64 = I64[P64[Sp] + 7];
           I64[Sp - 8] = block_caF9y_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saATq::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaFa0; else goto caF9z;
       uaFa0: // global
           call _caF9y(R1) args: 0, res: 0, upd: 0;
       caF9z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caF9y() //  [R1]
         { []
         }
     {offset
       caF9y: // global
           if (R1 & 7 == 1) goto caF9C; else goto caF9D;
       caF9C: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caF9D: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caF9P; else goto caF9O;
       caF9P: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caF9O: // global
           if (I64[R1 + 22] == I64[Sp + 16]) goto caF9X; else goto caF9T;
       caF9X: // global
           _saAVa::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saAVa::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caF9T: // global
           _saAVb::P64 = P64[R1 + 14];
           Hp = Hp - 16;
           P64[Sp + 16] = _saAVb::P64;
           Sp = Sp + 8;
           call _caF9v() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caF9y_info" {
     block_caF9y_info:
         const _caF9y;
         const 130;
         const 30;
 },
 $wio_saATF_entry() //  [R1, R2]
         { []
         }
     {offset
       caFa3: // global
           if ((Sp + -96) < SpLim) (likely: False) goto caFa4; else goto caFa5;
       caFa4: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caFa5: // global
           I64[Sp - 56] = block_caF7E_info;
           _saATk::P64 = P64[R1 + 6];
           _saATm::P64 = P64[R1 + 14];
           _saATn::P64 = P64[R1 + 22];
           _saATq::I64 = I64[R1 + 30];
           _saATr::I64 = I64[R1 + 38];
           R1 = P64[R2 + 8];
           P64[Sp - 48] = _saATk::P64;
           P64[Sp - 40] = _saATm::P64;
           P64[Sp - 32] = _saATn::P64;
           I64[Sp - 24] = _saATq::I64;
           I64[Sp - 16] = _saATr::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uaFcJ; else goto caF7F;
       uaFcJ: // global
           call _caF7E(R1) args: 0, res: 0, upd: 0;
       caF7F: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saATF_info" {
     $wio_saATF_info:
         const $wio_saATF_entry;
         const 8589934595;
         const 35188667056136;
         const 8589934597;
         const SaAZi_srt+248;
 },
 _caF7E() //  [R1]
         { []
         }
     {offset
       caF7E: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caFa8; else goto caFa7;
       caFa8: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFa7: // global
           _saATq::I64 = I64[Sp + 32];
           _saATM::P64 = P64[R1 + 7];
           _saATO::P64 = P64[R1 + 15];
           _saATN::I64 = I64[R1 + 23];
           _saATP::I64 = _saATq::I64 & (I64[_saATM::P64 + 8] - 1);
           _saATU::P64 = P64[(_saATM::P64 + 24) + (_saATP::I64 << 3)];
           I64[Hp - 32] = g_saATV_info;
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = $wgo_saAU3_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _saATq::I64;
           I64[Sp - 24] = block_caF90_info;
           R2 = _saATU::P64;
           R1 = Hp - 15;
           P64[Sp - 16] = _saATO::P64;
           I64[Sp - 8] = _saATP::I64;
           I64[Sp] = _saATN::I64;
           P64[Sp + 40] = _saATM::P64;
           Sp = Sp - 24;
           call $wgo_saAU3_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF7E_info" {
     block_caF7E_info:
         const _caF7E;
         const 1542;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caF90() //  [R1, R2, R3]
         { []
         }
     {offset
       caF90: // global
           I64[Sp - 16] = block_caFa9_info;
           _saAUm::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saAUm::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaFcG; else goto caFbY;
       uaFcG: // global
           call _caFa9(R1) args: 0, res: 0, upd: 0;
       caFbY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF90_info" {
     block_caF90_info:
         const _caF90;
         const 4489;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFa9() //  [R1]
         { []
         }
     {offset
       caFa9: // global
           if (R1 & 7 == 1) goto caFc4; else goto caFc9;
       caFc4: // global
           P64[Sp + 80] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saAUp() args: 0, res: 0, upd: 0;
       caFc9: // global
           _saATM::P64 = P64[Sp + 80];
           _saATP::I64 = I64[Sp + 32];
           _saAUm::P64 = P64[Sp + 16];
           _saAUo::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saATM::P64 + 24) + (_saATP::I64 << 3)] = _saAUo::P64;
           I64[_saATM::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saATM::P64 + 24) + ((I64[_saATM::P64 + 8] << 3) + (_saATP::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caFc7_info;
           _saAVi::P64 = R1;
           R1 = _saAUm::P64;
           P64[Sp + 80] = _saAVi::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaFcK; else goto caFca;
       uaFcK: // global
           call _caFc7(R1) args: 0, res: 0, upd: 0;
       caFca: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFa9_info" {
     block_caFa9_info:
         const _caFa9;
         const 17931;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFc7() //  [R1]
         { []
         }
     {offset
       caFc7: // global
           _saAVi::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto caFcg; else goto caFck;
       caFcg: // global
           P64[Sp + 64] = _saAVi::P64;
           Sp = Sp + 32;
           goto uaFcX;
       caFck: // global
           _saATN::I64 = I64[Sp + 24];
           _saATO::P64 = P64[Sp + 8];
           I64[_saATN::I64] = I64[_saATN::I64] - 1;
           call MO_Touch(_saATO::P64);
           P64[Sp + 64] = _saAVi::P64;
           Sp = Sp + 32;
           goto uaFcX;
       uaFcX: // global
           call _saAUp() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFc7_info" {
     block_caFc7_info:
         const _caFc7;
         const 4489;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _saAUp() //  []
         { []
         }
     {offset
       saAUp: // global
           I64[Sp - 8] = block_caF99_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaFcY; else goto caF9a;
       uaFcY: // global
           call _caF99(R1) args: 0, res: 0, upd: 0;
       caF9a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caF99() //  [R1]
         { []
         }
     {offset
       caF99: // global
           if (R1 & 7 == 1) goto caFbr; else goto caFby;
       caFbr: // global
           I64[Sp + 48] = 0;
           I64[Sp + 40] = 0;
           call _caFac() args: 0, res: 0, upd: 0;
       caFby: // global
           _saAUV::P64 = P64[P64[Sp + 48] + 8];
           I64[Sp] = block_caF9f_info;
           _saAUS::P64 = P64[R1 + 6];
           R1 = _saAUV::P64;
           P64[Sp + 48] = _saAUS::P64;
           if (R1 & 7 != 0) goto uaFcH; else goto caF9g;
       uaFcH: // global
           call _caF9f(R1) args: 0, res: 0, upd: 0;
       caF9g: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF99_info" {
     block_caF99_info:
         const _caF99;
         const 1542;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caF9f() //  [R1]
         { []
         }
     {offset
       caF9f: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caFbB; else goto caFbA;
       caFbB: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFbA: // global
           _saATq::I64 = I64[Sp + 32];
           _saAUX::P64 = P64[R1 + 7];
           _saAV5::P64 = P64[(_saAUX::P64 + 24) + (_saATq::I64 & (I64[_saAUX::P64 + 8] - 1) << 3)];
           I64[Hp - 8] = go_saAV6_info;
           I64[Hp] = _saATq::I64;
           I64[Sp] = block_caFbs_info;
           R2 = _saAV5::P64;
           R1 = Hp - 7;
           call go_saAV6_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF9f_info" {
     block_caF9f_info:
         const _caF9f;
         const 1542;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFbs() //  [R1]
         { []
         }
     {offset
       caFbs: // global
           I64[Sp] = block_caFbw_info;
           R2 = P64[Sp + 48];
           P64[Sp + 48] = R1;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFbs_info" {
     block_caFbs_info:
         const _caFbs;
         const 1542;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFbw() //  [R1]
         { []
         }
     {offset
       caFbw: // global
           I64[Sp] = block_caFbG_info;
           _saAVe::I64 = R1;
           R1 = P64[Sp + 48];
           I64[Sp + 48] = _saAVe::I64;
           if (R1 & 7 != 0) goto uaFcT; else goto caFbI;
       uaFcT: // global
           call _caFbG(R1) args: 0, res: 0, upd: 0;
       caFbI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFbw_info" {
     block_caFbw_info:
         const _caFbw;
         const 1542;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFbG() //  [R1]
         { []
         }
     {offset
       caFbG: // global
           if (R1 & 7 == 1) goto caFbO; else goto caFbT;
       caFbO: // global
           I64[Sp + 48] = I64[Sp + 48];
           I64[Sp + 40] = 0;
           call _caFac() args: 0, res: 0, upd: 0;
       caFbT: // global
           I64[Sp] = block_caFbR_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFbG_info" {
     block_caFbG_info:
         const _caFbG;
         const 3590;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFbR() //  [R1]
         { []
         }
     {offset
       caFbR: // global
           I64[Sp + 40] = R1;
           I64[Sp + 48] = I64[Sp + 48];
           call _caFac() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFbR_info" {
     block_caFbR_info:
         const _caFbR;
         const 3590;
         const 4294967326;
         const SaAZi_srt+352;
 },
 _caFac() //  []
         { []
         }
     {offset
       caFac: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caFah; else goto caFag;
       caFah: // global
           HpAlloc = 32;
           I64[Sp] = block_caFac_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caFag: // global
           _saAUv::I64 = I64[Sp + 40];
           if (I64[Sp + 48] == _saAUv::I64) goto caFal; else goto caFbn;
       caFal: // global
           Hp = Hp - 32;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caFbn: // global
           I64[Hp - 24] = GHC.Int.I32#_con_info;
           I64[Hp - 16] = I64[Sp + 32];
           _caFao::P64 = Hp - 23;
           if (_saAUv::I64 & 8 != 0) goto caFbl; else goto caFbm;
       caFbm: // global
           _saAUK::I64 = _saAUv::I64 & 7;
           if (_saAUK::I64 == 0) goto caFbl; else goto caFb8;
       caFbl: // global
           Hp = Hp - 16;
           P64[Sp + 24] = _caFao::P64;
           call _caFas() args: 0, res: 0, upd: 0;
       caFb8: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saAUK::I64;
           _saATn::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caFb4_info;
           R4 = Hp - 7;
           R3 = _caFao::P64;
           R2 = P64[Sp + 8];
           R1 = _saATn::P64;
           Sp = Sp + 24;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFac_info" {
     block_caFac_info:
         const _caFac;
         const 3590;
         const 4294967326;
         const SaAZi_srt+352;
 },
 _caFb4() //  [R1]
         { []
         }
     {offset
       caFb4: // global
           I64[Sp] = block_caFb6_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaFcQ; else goto caFba;
       uaFcQ: // global
           call _caFb6(R1) args: 0, res: 0, upd: 0;
       caFba: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFb4_info" {
     block_caFb4_info:
         const _caFb4;
         const 451;
         const 4294967326;
         const SaAZi_srt+352;
 },
 _caFb6() //  [R1]
         { []
         }
     {offset
       caFb6: // global
           if (R1 & 7 == 1) goto uaFcB; else goto uaFcC;
       uaFcB: // global
           Sp = Sp + 8;
           call _caFbg() args: 0, res: 0, upd: 0;
       uaFcC: // global
           Sp = Sp + 32;
           call _caFbk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFb6_info" {
     block_caFb6_info:
         const _caFb6;
         const 451;
         const 4294967326;
         const SaAZi_srt+352;
 },
 _caFas() //  []
         { []
         }
     {offset
       caFas: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caFaw; else goto caFav;
       caFaw: // global
           HpAlloc = 32;
           I64[Sp] = block_caFas_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caFav: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 40] & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           _caFao::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caFaF_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = _caFao::P64;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = stg_ap_v_info;
           Sp = Sp + 16;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFas_info" {
     block_caFas_info:
         const _caFas;
         const 3590;
         const 4294967326;
         const SaAZi_srt+352;
 },
 _caFaF() //  [R1]
         { []
         }
     {offset
       caFaF: // global
           I64[Sp] = block_caFaH_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaFcN; else goto caFaJ;
       uaFcN: // global
           call _caFaH(R1) args: 0, res: 0, upd: 0;
       caFaJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFaF_info" {
     block_caFaF_info:
         const _caFaF;
         const 451;
         const 4294967326;
         const SaAZi_srt+352;
 },
 _caFaH() //  [R1]
         { []
         }
     {offset
       caFaH: // global
           if (R1 & 7 == 1) goto uaFcE; else goto uaFcF;
       uaFcE: // global
           Sp = Sp + 8;
           call _caFbg() args: 0, res: 0, upd: 0;
       uaFcF: // global
           Sp = Sp + 32;
           call _caFbk() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFaH_info" {
     block_caFaH_info:
         const _caFaH;
         const 451;
         const 4294967326;
         const SaAZi_srt+352;
 },
 _caFbg() //  []
         { []
         }
     {offset
       caFbg: // global
           R2 = I64[Sp];
           Sp = Sp + 24;
           call lvl15_raAun_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _caFbk() //  []
         { []
         }
     {offset
       caFbk: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 io_saAVs_entry() //  [R1, R2]
         { []
         }
     {offset
       caFd7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFd8; else goto caFd9;
       caFd8: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caFd9: // global
           I64[Sp - 16] = block_caFd4_info;
           _saATF::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saATF::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaFdd; else goto caFd5;
       uaFdd: // global
           call _caFd4(R1) args: 0, res: 0, upd: 0;
       caFd5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saAVs_info" {
     io_saAVs_info:
         const io_saAVs_entry;
         const 1;
         const 35188667056137;
         const 8589934597;
         const SaAZi_srt+248;
 },
 _caFd4() //  [R1]
         { []
         }
     {offset
       caFd4: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saATF_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFd4_info" {
     block_caFd4_info:
         const _caFd4;
         const 1;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 sat_saAVG_entry() //  [R1, R2]
         { []
         }
     {offset
       caFdp: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFdq; else goto caFdr;
       caFdq: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caFdr: // global
           I64[Sp - 16] = block_caFdn_info;
           _saAVD::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAVD::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAVG_info" {
     sat_saAVG_info:
         const sat_saAVG_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caFdn() //  []
         { []
         }
     {offset
       caFdn: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFdn_info" {
     block_caFdn_info:
         const _caFdn;
         const 1;
         const 30;
 },
 sat_saAVB_entry() //  [R1]
         { []
         }
     {offset
       caFdy: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAVs_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAVB_info" {
     sat_saAVB_info:
         const sat_saAVB_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saAVC_entry() //  [R1]
         { []
         }
     {offset
       caFdG: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAVC_info" {
     sat_saAVC_info:
         const sat_saAVC_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saAVU_entry() //  [R1, R2]
         { []
         }
     {offset
       caFdY: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFdZ; else goto caFe0;
       caFdZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caFe0: // global
           I64[Sp - 16] = block_caFdW_info;
           _saAVR::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAVR::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAVU_info" {
     sat_saAVU_info:
         const sat_saAVU_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caFdW() //  []
         { []
         }
     {offset
       caFdW: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFdW_info" {
     block_caFdW_info:
         const _caFdW;
         const 1;
         const 30;
 },
 sat_saAVP_entry() //  [R1]
         { []
         }
     {offset
       caFe7: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAVs_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAVP_info" {
     sat_saAVP_info:
         const sat_saAVP_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saAVQ_entry() //  [R1]
         { []
         }
     {offset
       caFef: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAVQ_info" {
     sat_saAVQ_info:
         const sat_saAVQ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saAVZ_entry() //  [R1]
         { []
         }
     {offset
       caFem: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caFen; else goto caFeo;
       caFen: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caFeo: // global
           I64[Sp - 24] = block_caFdP_info;
           _saATE::P64 = P64[R1 + 7];
           _saAVs::P64 = P64[R1 + 15];
           R1 = _saATE::P64;
           P64[Sp - 16] = _saATE::P64;
           P64[Sp - 8] = _saAVs::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAVZ_info" {
     sat_saAVZ_info:
         const sat_saAVZ_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaAZi_srt+248;
 },
 _caFdP() //  [R1]
         { []
         }
     {offset
       caFdP: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caFer; else goto caFeq;
       caFer: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFeq: // global
           I64[Hp - 56] = sat_saAVU_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAVP_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAVQ_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caFei_info;
           R2 = Hp - 54;
           _saAVO::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAVO::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFdP_info" {
     block_caFdP_info:
         const _caFdP;
         const 2;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFei() //  [R1]
         { []
         }
     {offset
       caFei: // global
           _saATE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caFek_info;
           R2 = P64[Sp + 16];
           _saAVX::P64 = R1;
           R1 = _saATE::P64;
           P64[Sp + 16] = _saAVX::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFei_info" {
     block_caFei_info:
         const _caFei;
         const 2;
         const 30;
 },
 _caFek() //  []
         { []
         }
     {offset
       caFek: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFek_info" {
     block_caFek_info:
         const _caFek;
         const 1;
         const 30;
 },
 sat_saAW8_entry() //  [R1, R2]
         { []
         }
     {offset
       caFeE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFeF; else goto caFeG;
       caFeF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caFeG: // global
           I64[Sp - 16] = block_caFeC_info;
           _saAW5::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saAW5::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAW8_info" {
     sat_saAW8_info:
         const sat_saAW8_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caFeC() //  []
         { []
         }
     {offset
       caFeC: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFeC_info" {
     block_caFeC_info:
         const _caFeC;
         const 1;
         const 30;
 },
 sat_saAW3_entry() //  [R1]
         { []
         }
     {offset
       caFeN: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saAVs_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAW3_info" {
     sat_saAW3_info:
         const sat_saAW3_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaAZi_srt+248;
 },
 sat_saAW4_entry() //  [R1]
         { []
         }
     {offset
       caFeV: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saAW4_info" {
     sat_saAW4_info:
         const sat_saAW4_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.unregisterFd2_entry() //  [R2, R3]
         { []
         }
     {offset
       caFeY: // global
           if ((Sp + -88) < SpLim) (likely: False) goto caFeZ; else goto caFf0;
       caFeZ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.unregisterFd2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caFf0: // global
           I64[Sp - 16] = block_caF6P_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaFfI; else goto caF6Q;
       uaFfI: // global
           call _caF6P(R1) args: 0, res: 0, upd: 0;
       caF6Q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd2_info" {
     GHC.Event.Manager.unregisterFd2_info:
         const GHC.Event.Manager.unregisterFd2_entry;
         const 0;
         const 6917810506912759822;
         const 12884901903;
         const SaAZi_srt+120;
 },
 _caF6P() //  [R1]
         { []
         }
     {offset
       caF6P: // global
           I64[Sp - 24] = block_caF6U_info;
           _saAT2::P64 = P64[R1 + 7];
           _saAT4::P64 = P64[R1 + 23];
           _saAT6::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _saAT4::P64;
           P64[Sp - 8] = _saAT6::P64;
           P64[Sp] = _saAT2::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaFfD; else goto caF6V;
       uaFfD: // global
           call _caF6U(R1) args: 0, res: 0, upd: 0;
       caF6V: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF6P_info" {
     block_caF6P_info:
         const _caF6P;
         const 1;
         const 2306124488485371934;
         const SaAZi_srt+120;
 },
 _caF6U() //  [R1]
         { []
         }
     {offset
       caF6U: // global
           I64[Sp - 8] = block_caF6Z_info;
           _saATf::P64 = R1;
           _saATg::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _saATg::I64;
           P64[Sp + 8] = _saATf::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaFfE; else goto caF70;
       uaFfE: // global
           call _caF6Z(R1) args: 0, res: 0, upd: 0;
       caF70: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF6U_info" {
     block_caF6U_info:
         const _caF6U;
         const 4;
         const 2306124488485371934;
         const SaAZi_srt+120;
 },
 _caF6Z() //  [R1]
         { []
         }
     {offset
       caF6Z: // global
           I64[Sp - 8] = block_caF74_info;
           _saATh::P64 = R1;
           _saATi::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp] = _saATi::I64;
           P64[Sp + 32] = _saATh::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaFfF; else goto caF75;
       uaFfF: // global
           call _caF74(R1) args: 0, res: 0, upd: 0;
       caF75: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF6Z_info" {
     block_caF6Z_info:
         const _caF6Z;
         const 69;
         const 2306124488485371934;
         const SaAZi_srt+120;
 },
 _caF74() //  [R1]
         { []
         }
     {offset
       caF74: // global
           I64[Sp - 16] = block_caF79_info;
           _saATk::P64 = P64[R1 + 7];
           _saATm::P64 = P64[R1 + 23];
           _saATn::P64 = P64[R1 + 31];
           R1 = P64[Sp + 48];
           P64[Sp - 8] = _saATn::P64;
           P64[Sp] = _saATm::P64;
           P64[Sp + 48] = _saATk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaFfG; else goto caF7a;
       uaFfG: // global
           call _caF79(R1) args: 0, res: 0, upd: 0;
       caF7a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF74_info" {
     block_caF74_info:
         const _caF74;
         const 198;
         const 2306124488485371934;
         const SaAZi_srt+120;
 },
 _caF79() //  [R1]
         { []
         }
     {offset
       caF79: // global
           I64[Sp - 16] = block_caF7e_info;
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF79_info" {
     block_caF79_info:
         const _caF79;
         const 776;
         const 2306124488485371934;
         const SaAZi_srt+120;
 },
 _caF7e() //  [R1]
         { []
         }
     {offset
       caF7e: // global
           _saATf::P64 = P64[Sp + 56];
           _saATg::I64 = I64[Sp + 48];
           _saATh::P64 = P64[Sp + 72];
           _saATv::I64 = I64[Sp + 16] & 31;
           if (%MO_S_Gt_W64(_saATg::I64,
                            _saATv::I64)) goto caFfa; else goto caFfB;
       caFfB: // global
           if (%MO_S_Gt_W64(_saATv::I64,
                            I64[Sp + 40])) goto caFfa; else goto caFfb;
       caFfa: // global
           R4 = _saATv::I64;
           R3 = _saATf::P64;
           R2 = _saATh::P64;
           Sp = Sp + 88;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caFfb: // global
           _saATC::P64 = P64[P64[Sp + 64] + ((_saATv::I64 - _saATg::I64 << 3) + 24)];
           I64[Sp] = block_caF7u_info;
           _saATu::I64 = R1;
           R1 = _saATC::P64;
           I64[Sp + 72] = _saATu::I64;
           if (R1 & 7 != 0) goto uaFfH; else goto caF7v;
       uaFfH: // global
           call _caF7u(R1) args: 0, res: 0, upd: 0;
       caF7v: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caF7e_info" {
     block_caF7e_info:
         const _caF7e;
         const 3274;
         const 2306124488485371934;
         const SaAZi_srt+120;
 },
 _caF7u() //  [R1]
         { []
         }
     {offset
       caF7u: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto caFfe; else goto caFfd;
       caFfe: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFfd: // global
           _saATE::P64 = P64[R1 + 7];
           I64[Hp - 80] = $wio_saATF_info;
           P64[Hp - 72] = P64[Sp + 80];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 24];
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io_saAVs_info;
           P64[Hp - 24] = Hp - 78;
           _caFcZ::P64 = Hp - 30;
           _saAVx::I64 = I64[Sp + 72];
           if (_saAVx::I64 != 0) goto uaFfC; else goto caFfq;
       uaFfC: // global
           if (_saAVx::I64 != 1) goto caFfj; else goto caFfu;
       caFfj: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caFdg_info;
           R1 = _saATE::P64;
           P64[Sp + 72] = _saATE::P64;
           P64[Sp + 80] = _caFcZ::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caFfu: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caFev_info;
           R1 = _saATE::P64;
           P64[Sp + 72] = _saATE::P64;
           P64[Sp + 80] = _caFcZ::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caFfq: // global
           I64[Hp - 16] = sat_saAVZ_info;
           P64[Hp - 8] = _saATE::P64;
           P64[Hp] = _caFcZ::P64;
           R1 = Hp - 15;
           Sp = Sp + 88;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caF7u_info" {
     block_caF7u_info:
         const _caF7u;
         const 31946;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFdg() //  [R1]
         { []
         }
     {offset
       caFdg: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caFfm; else goto caFfl;
       caFfm: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFfl: // global
           I64[Hp - 56] = sat_saAVG_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAVB_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAVC_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caFff_info;
           R2 = Hp - 54;
           _saAVA::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAVA::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFdg_info" {
     block_caFdg_info:
         const _caFdg;
         const 2;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFff() //  [R1]
         { []
         }
     {offset
       caFff: // global
           _saATE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caFfh_info;
           R2 = P64[Sp + 16];
           _saAVJ::P64 = R1;
           R1 = _saATE::P64;
           P64[Sp + 16] = _saAVJ::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFff_info" {
     block_caFff_info:
         const _caFff;
         const 2;
         const 30;
 },
 _caFfh() //  []
         { []
         }
     {offset
       caFfh: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFfh_info" {
     block_caFfh_info:
         const _caFfh;
         const 1;
         const 30;
 },
 _caFev() //  [R1]
         { []
         }
     {offset
       caFev: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caFfx; else goto caFfw;
       caFfx: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFfw: // global
           I64[Hp - 56] = sat_saAW8_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saAW3_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saAW4_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caFfr_info;
           R2 = Hp - 54;
           _saAW2::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saAW2::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFev_info" {
     block_caFev_info:
         const _caFev;
         const 2;
         const 35188667056158;
         const SaAZi_srt+248;
 },
 _caFfr() //  [R1]
         { []
         }
     {offset
       caFfr: // global
           _saATE::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caFft_info;
           R2 = P64[Sp + 16];
           _saAWb::P64 = R1;
           R1 = _saATE::P64;
           P64[Sp + 16] = _saAWb::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFfr_info" {
     block_caFfr_info:
         const _caFfr;
         const 2;
         const 30;
 },
 _caFft() //  []
         { []
         }
     {offset
       caFft: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFft_info" {
     block_caFft_info:
         const _caFft;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.326415183 UTC

[section ""data" . GHC.Event.Manager.unregisterFd__closure" {
     GHC.Event.Manager.unregisterFd__closure:
         const GHC.Event.Manager.unregisterFd__info;
         const 0;
 },
 GHC.Event.Manager.unregisterFd__entry() //  [R2, R3]
         { []
         }
     {offset
       caFks: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd__info" {
     GHC.Event.Manager.unregisterFd__info:
         const GHC.Event.Manager.unregisterFd__entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SaAZi_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.330357673 UTC

[section ""data" . GHC.Event.Manager.unregisterFd1_closure" {
     GHC.Event.Manager.unregisterFd1_closure:
         const GHC.Event.Manager.unregisterFd1_info;
         const 0;
 },
 GHC.Event.Manager.unregisterFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       caFkI: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caFkJ; else goto caFkK;
       caFkJ: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.unregisterFd1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caFkK: // global
           I64[Sp - 8] = block_caFkD_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd1_info" {
     GHC.Event.Manager.unregisterFd1_info:
         const GHC.Event.Manager.unregisterFd1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const SaAZi_srt+360;
 },
 _caFkD() //  [R1]
         { []
         }
     {offset
       caFkD: // global
           I64[Sp] = block_caFkF_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaFkP; else goto caFkG;
       uaFkP: // global
           call _caFkF() args: 0, res: 0, upd: 0;
       caFkG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFkD_info" {
     block_caFkD_info:
         const _caFkD;
         const 0;
         const 30;
 },
 _caFkF() //  []
         { []
         }
     {offset
       caFkF: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFkF_info" {
     block_caFkF_info:
         const _caFkF;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.336500139 UTC

[section ""data" . GHC.Event.Manager.unregisterFd_closure" {
     GHC.Event.Manager.unregisterFd_closure:
         const GHC.Event.Manager.unregisterFd_info;
         const 0;
 },
 GHC.Event.Manager.unregisterFd_entry() //  [R2, R3]
         { []
         }
     {offset
       caFl7: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.unregisterFd1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd_info" {
     GHC.Event.Manager.unregisterFd_info:
         const GHC.Event.Manager.unregisterFd_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SaAZi_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.340635503 UTC

[section ""data" . GHC.Event.Manager.EventManager_closure" {
     GHC.Event.Manager.EventManager_closure:
         const GHC.Event.Manager.EventManager_info;
 },
 GHC.Event.Manager.EventManager_slow() //  [R1]
         { []
         }
     {offset
       caFlf: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Manager.EventManager_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 72, res: 0, upd: 8;
     }
 },
 GHC.Event.Manager.EventManager_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caFlk: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caFlo; else goto caFln;
       caFlo: // global
           HpAlloc = 112;
           R1 = GHC.Event.Manager.EventManager_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       caFln: // global
           I64[Hp - 104] = GHC.Event.Manager.EventManager_con_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           I64[Hp - 24] = R5;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 103;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.EventManager_info" {
     GHC.Event.Manager.EventManager_info:
         const GHC.Event.Manager.EventManager_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 57869;
         const GHC.Event.Manager.EventManager_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.345682774 UTC

[section ""data" . GHC.Event.Manager.Created_closure" {
     GHC.Event.Manager.Created_closure:
         const GHC.Event.Manager.Created_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.347367442 UTC

[section ""data" . GHC.Event.Manager.Running_closure" {
     GHC.Event.Manager.Running_closure:
         const GHC.Event.Manager.Running_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.348997358 UTC

[section ""data" . GHC.Event.Manager.Dying_closure" {
     GHC.Event.Manager.Dying_closure:
         const GHC.Event.Manager.Dying_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.350674266 UTC

[section ""data" . GHC.Event.Manager.Releasing_closure" {
     GHC.Event.Manager.Releasing_closure:
         const GHC.Event.Manager.Releasing_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.352342584 UTC

[section ""data" . GHC.Event.Manager.Finished_closure" {
     GHC.Event.Manager.Finished_closure:
         const GHC.Event.Manager.Finished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.355841526 UTC

[section ""data" . GHC.Event.Manager.FdKey_closure" {
     GHC.Event.Manager.FdKey_closure:
         const GHC.Event.Manager.FdKey_info;
 },
 GHC.Event.Manager.FdKey_entry() //  [R2, R3]
         { []
         }
     {offset
       caFlO: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caFlS; else goto caFlR;
       caFlS: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.FdKey_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caFlR: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdKey_info" {
     GHC.Event.Manager.FdKey_info:
         const GHC.Event.Manager.FdKey_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.360664935 UTC

[section ""data" . GHC.Event.Manager.FdData_closure" {
     GHC.Event.Manager.FdData_closure:
         const GHC.Event.Manager.FdData_info;
 },
 GHC.Event.Manager.FdData_slow() //  [R1]
         { []
         }
     {offset
       caFlZ: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.Manager.FdData_entry(R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Manager.FdData_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       caFm4: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caFm8; else goto caFm7;
       caFm8: // global
           HpAlloc = 40;
           R1 = GHC.Event.Manager.FdData_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       caFm7: // global
           I64[Hp - 32] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdData_info" {
     GHC.Event.Manager.FdData_info:
         const GHC.Event.Manager.FdData_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 452;
         const GHC.Event.Manager.FdData_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.365529648 UTC

[section ""cstring" . iaDqw_str" {
     iaDqw_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,69,118,101,110,116,77,97,110,97,103,101,114]
 },
 GHC.Event.Manager.EventManager_con_entry() //  [R1]
         { []
         }
     {offset
       caFmg: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.EventManager_con_info" {
     GHC.Event.Manager.EventManager_con_info:
         const GHC.Event.Manager.EventManager_con_entry;
         const 17179869193;
         const 1;
         const iaDqw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.368662767 UTC

[section ""relreadonly" . GHC.Event.Manager.State_closure_tbl" {
     GHC.Event.Manager.State_closure_tbl:
         const GHC.Event.Manager.Created_closure+1;
         const GHC.Event.Manager.Running_closure+2;
         const GHC.Event.Manager.Dying_closure+3;
         const GHC.Event.Manager.Releasing_closure+4;
         const GHC.Event.Manager.Finished_closure+5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.370539411 UTC

[section ""cstring" . iaDqy_str" {
     iaDqy_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,67,114,101,97,116,101,100]
 },
 GHC.Event.Manager.Created_con_entry() //  [R1]
         { []
         }
     {offset
       caFmn: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Created_con_info" {
     GHC.Event.Manager.Created_con_info:
         const GHC.Event.Manager.Created_con_entry;
         const 4294967296;
         const 3;
         const iaDqy_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.373985271 UTC

[section ""cstring" . iaDqA_str" {
     iaDqA_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,82,117,110,110,105,110,103]
 },
 GHC.Event.Manager.Running_con_entry() //  [R1]
         { []
         }
     {offset
       caFmt: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Running_con_info" {
     GHC.Event.Manager.Running_con_info:
         const GHC.Event.Manager.Running_con_entry;
         const 4294967296;
         const 4294967299;
         const iaDqA_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.377138561 UTC

[section ""cstring" . iaDqC_str" {
     iaDqC_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,68,121,105,110,103]
 },
 GHC.Event.Manager.Dying_con_entry() //  [R1]
         { []
         }
     {offset
       caFmz: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Dying_con_info" {
     GHC.Event.Manager.Dying_con_info:
         const GHC.Event.Manager.Dying_con_entry;
         const 4294967296;
         const 8589934595;
         const iaDqC_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.380396365 UTC

[section ""cstring" . iaDqE_str" {
     iaDqE_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,82,101,108,101,97,115,105,110,103]
 },
 GHC.Event.Manager.Releasing_con_entry() //  [R1]
         { []
         }
     {offset
       caFmF: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Releasing_con_info" {
     GHC.Event.Manager.Releasing_con_info:
         const GHC.Event.Manager.Releasing_con_entry;
         const 4294967296;
         const 12884901891;
         const iaDqE_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.38360252 UTC

[section ""cstring" . iaDqG_str" {
     iaDqG_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,70,105,110,105,115,104,101,100]
 },
 GHC.Event.Manager.Finished_con_entry() //  [R1]
         { []
         }
     {offset
       caFmL: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Finished_con_info" {
     GHC.Event.Manager.Finished_con_info:
         const GHC.Event.Manager.Finished_con_entry;
         const 4294967296;
         const 17179869187;
         const iaDqG_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.387270152 UTC

[section ""cstring" . iaDqI_str" {
     iaDqI_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,70,100,75,101,121]
 },
 GHC.Event.Manager.FdKey_con_entry() //  [R1]
         { []
         }
     {offset
       caFmR: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdKey_con_info" {
     GHC.Event.Manager.FdKey_con_info:
         const GHC.Event.Manager.FdKey_con_entry;
         const 8589934592;
         const 6;
         const iaDqI_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.391075267 UTC

[section ""cstring" . iaDqK_str" {
     iaDqK_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,70,100,68,97,116,97]
 },
 GHC.Event.Manager.FdData_con_entry() //  [R1]
         { []
         }
     {offset
       caFmX: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdData_con_info" {
     GHC.Event.Manager.FdData_con_info:
         const GHC.Event.Manager.FdData_con_entry;
         const 12884901889;
         const 1;
         const iaDqK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:34.394486376 UTC

[section ""relreadonly" . SaAZi_srt" {
     SaAZi_srt:
         const GHC.Event.Manager.$w$cshowsPrec1_closure;
         const GHC.Event.Manager.$fShowState1_closure;
         const GHC.Event.Manager.$fShowState3_closure;
         const GHC.Event.Manager.$fShowState5_closure;
         const GHC.Event.Manager.$fShowState7_closure;
         const GHC.Event.Manager.$fShowState9_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.Manager.$w$cshowsPrec_closure;
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure;
         const GHC.Event.Manager.$fShowFdKey_$cshow_closure;
         const GHC.Event.Manager.$fShowFdKey1_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.Manager.$fShowState_$cshow_closure;
         const GHC.Arr.$windexError_closure;
         const lvl2_raAu7_closure;
         const lvl3_raAu8_closure;
         const GHC.Event.Manager.callbackTableVar_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.Manager.release1_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.Manager.shutdown1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const $wlvl_raAub_closure;
         const lvl7_raAud_closure;
         const GHC.Arr.arrEleBottom_closure;
         const GHC.Event.Internal.evtNothing_closure;
         const GHC.Event.Internal.evtRead_closure;
         const GHC.Event.Control.newControl1_closure;
         const GHC.Event.Manager.new2_closure;
         const GHC.Event.Manager.new3_closure;
         const GHC.Event.Manager.new1_closure;
         const GHC.Event.Manager.$weventsOf_closure;
         const GHC.Event.Manager.closeFd_3_closure;
         const GHC.Event.Manager.eventsOf_closure;
         const GHC.Event.Manager.closeFd1_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.Manager.loop5_closure;
         const GHC.Event.Manager.loop3_closure;
         const GHC.Event.Manager.loop1_closure;
         const GHC.Event.Manager.loop2_closure;
         const GHC.Event.Manager.$wcloseFd__closure;
         const GHC.Event.Manager.closeFd_1_closure;
         const registerFd1_raAuk_closure;
         const lvl14_raAum_closure;
         const lvl15_raAun_closure;
         const GHC.Event.Manager.unregisterFd2_closure;
         const GHC.Event.Manager.unregisterFd1_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.697563381 UTC

[]


==================== Raw Cmm ====================
2018-03-16 16:05:40.701816838 UTC

[section ""data" . GHC.Event.Manager.$WEventManager_closure" {
     GHC.Event.Manager.$WEventManager_closure:
         const GHC.Event.Manager.$WEventManager_info;
 },
 GHC.Event.Manager.$WEventManager_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caFP6: // global
           if ((Sp + -96) < SpLim) (likely: False) goto caFPz; else goto caFPA;
       caFPz: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$WEventManager_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 16, res: 0, upd: 8;
       caFPA: // global
           I64[Sp - 40] = block_caFP3_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaFPK; else goto caFP4;
       uaFPK: // global
           call _caFP3(R1) args: 0, res: 0, upd: 0;
       caFP4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$WEventManager_info" {
     GHC.Event.Manager.$WEventManager_info:
         const GHC.Event.Manager.$WEventManager_entry;
         const 0;
         const 14;
         const 25769803802;
 },
 _caFP3() //  [R1]
         { []
         }
     {offset
       caFP3: // global
           I64[Sp] = block_caFP9_info;
           _saFna::P64 = R1;
           R1 = P64[Sp + 8];
           P64[Sp + 8] = _saFna::P64;
           if (R1 & 7 != 0) goto uaFPJ; else goto caFPa;
       uaFPJ: // global
           call _caFP9(R1) args: 0, res: 0, upd: 0;
       caFPa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFP3_info" {
     block_caFP3_info:
         const _caFP3;
         const 5;
         const 30;
 },
 _caFP9() //  [R1]
         { []
         }
     {offset
       caFP9: // global
           I64[Sp - 24] = block_caFPe_info;
           _saFnc::P64 = P64[R1 + 7];
           _saFnd::P64 = P64[R1 + 15];
           _saFnf::P64 = P64[R1 + 23];
           _saFne::I64 = I64[R1 + 31];
           R1 = P64[Sp + 16];
           I64[Sp - 16] = _saFne::I64;
           P64[Sp - 8] = _saFnf::P64;
           P64[Sp] = _saFnd::P64;
           P64[Sp + 16] = _saFnc::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaFPL; else goto caFPf;
       uaFPL: // global
           call _caFPe(R1) args: 0, res: 0, upd: 0;
       caFPf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFP9_info" {
     block_caFP9_info:
         const _caFP9;
         const 5;
         const 30;
 },
 _caFPe() //  [R1]
         { []
         }
     {offset
       caFPe: // global
           I64[Sp] = block_caFPj_info;
           _saFnh::P64 = P64[R1 + 7];
           R1 = P64[Sp + 48];
           P64[Sp + 48] = _saFnh::P64;
           if (R1 & 7 != 0) goto uaFPM; else goto caFPk;
       uaFPM: // global
           call _caFPj(R1) args: 0, res: 0, upd: 0;
       caFPk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFPe_info" {
     block_caFPe_info:
         const _caFPe;
         const 72;
         const 30;
 },
 _caFPj() //  [R1]
         { []
         }
     {offset
       caFPj: // global
           I64[Sp] = block_caFPo_info;
           _saFnj::P64 = P64[R1 + 7];
           R1 = P64[Sp + 56];
           P64[Sp + 56] = _saFnj::P64;
           if (R1 & 7 != 0) goto uaFPN; else goto caFPp;
       uaFPN: // global
           call _caFPo(R1) args: 0, res: 0, upd: 0;
       caFPp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFPj_info" {
     block_caFPj_info:
         const _caFPj;
         const 72;
         const 30;
 },
 _caFPo() //  [R1]
         { []
         }
     {offset
       caFPo: // global
           I64[Sp - 32] = block_caFPt_info;
           _saFno::P64 = P64[R1 + 7];
           _saFnp::P64 = P64[R1 + 15];
           _saFnl::I64 = I64[R1 + 23];
           _saFnm::I64 = I64[R1 + 31];
           _saFnn::I64 = I64[R1 + 39];
           R1 = P64[Sp + 64];
           I64[Sp - 24] = _saFnn::I64;
           P64[Sp - 16] = _saFno::P64;
           P64[Sp - 8] = _saFnp::P64;
           I64[Sp] = _saFnm::I64;
           I64[Sp + 64] = _saFnl::I64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaFPO; else goto caFPu;
       uaFPO: // global
           call _caFPt(R1) args: 0, res: 0, upd: 0;
       caFPu: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFPo_info" {
     block_caFPo_info:
         const _caFPo;
         const 72;
         const 30;
 },
 _caFPt() //  [R1]
         { []
         }
     {offset
       caFPt: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caFPI; else goto caFPH;
       caFPI: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFPH: // global
           _saFnr::P64 = P64[R1 + 7];
           I64[Hp - 104] = GHC.Event.Manager.EventManager_con_info;
           P64[Hp - 96] = P64[Sp + 64];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 56];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 80];
           P64[Hp - 56] = P64[Sp + 88];
           P64[Hp - 48] = P64[Sp + 16];
           P64[Hp - 40] = P64[Sp + 24];
           P64[Hp - 32] = _saFnr::P64;
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = I64[Sp + 96];
           I64[Hp - 8] = I64[Sp + 32];
           I64[Hp] = I64[Sp + 8];
           R1 = Hp - 103;
           Sp = Sp + 104;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFPt_info" {
     block_caFPt_info:
         const _caFPt;
         const 132684;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.784906048 UTC

[section ""data" . GHC.Event.Manager.$WFdKey_closure" {
     GHC.Event.Manager.$WFdKey_closure:
         const GHC.Event.Manager.$WFdKey_info;
 },
 GHC.Event.Manager.$WFdKey_entry() //  [R2, R3]
         { []
         }
     {offset
       caFQJ: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFQS; else goto caFQT;
       caFQS: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$WFdKey_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caFQT: // global
           I64[Sp - 16] = block_caFQG_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaFQZ; else goto caFQH;
       uaFQZ: // global
           call _caFQG(R1) args: 0, res: 0, upd: 0;
       caFQH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$WFdKey_info" {
     GHC.Event.Manager.$WFdKey_info:
         const GHC.Event.Manager.$WFdKey_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caFQG() //  [R1]
         { []
         }
     {offset
       caFQG: // global
           I64[Sp] = block_caFQM_info;
           _saFnv::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saFnv::I64;
           if (R1 & 7 != 0) goto uaFQY; else goto caFQN;
       uaFQY: // global
           call _caFQM(R1) args: 0, res: 0, upd: 0;
       caFQN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFQG_info" {
     block_caFQG_info:
         const _caFQG;
         const 1;
         const 30;
 },
 _caFQM() //  [R1]
         { []
         }
     {offset
       caFQM: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caFQX; else goto caFQW;
       caFQX: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFQW: // global
           _saFnx::I64 = I64[R1 + 7];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _saFnx::I64;
           R1 = Hp - 15;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFQM_info" {
     block_caFQM_info:
         const _caFQM;
         const 65;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.79306965 UTC

[section ""data" . GHC.Event.Manager.$WFdData_closure" {
     GHC.Event.Manager.$WFdData_closure:
         const GHC.Event.Manager.$WFdData_info;
 },
 GHC.Event.Manager.$WFdData_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caFRp: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caFRA; else goto caFRB;
       caFRA: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$WFdData_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caFRB: // global
           I64[Sp - 24] = block_caFRm_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaFRI; else goto caFRn;
       uaFRI: // global
           call _caFRm(R1) args: 0, res: 0, upd: 0;
       caFRn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$WFdData_info" {
     GHC.Event.Manager.$WFdData_info:
         const GHC.Event.Manager.$WFdData_entry;
         const 0;
         const 14;
         const 12884901911;
 },
 _caFRm() //  [R1]
         { []
         }
     {offset
       caFRm: // global
           I64[Sp - 8] = block_caFRs_info;
           _saFnC::I64 = I64[R1 + 7];
           _saFnD::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _saFnD::I64;
           I64[Sp + 8] = _saFnC::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaFRH; else goto caFRt;
       uaFRH: // global
           call _caFRs(R1) args: 0, res: 0, upd: 0;
       caFRt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFRm_info" {
     block_caFRm_info:
         const _caFRm;
         const 2;
         const 30;
 },
 _caFRs() //  [R1]
         { []
         }
     {offset
       caFRs: // global
           I64[Sp] = block_caFRx_info;
           _saFnF::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp + 24] = _saFnF::I64;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFRs_info" {
     block_caFRs_info:
         const _caFRs;
         const 195;
         const 30;
 },
 _caFRx() //  [R1]
         { []
         }
     {offset
       caFRx: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caFRG; else goto caFRF;
       caFRG: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caFRF: // global
           I64[Hp - 32] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 24] = R1;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = I64[Sp + 24];
           R1 = Hp - 31;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFRx_info" {
     block_caFRx_info:
         const _caFRx;
         const 451;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.800825996 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState10_bytes" {
     GHC.Event.Manager.$fShowState10_bytes:
         I8[] [67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.80300854 UTC

[section ""data" . GHC.Event.Manager.$fShowState9_closure" {
     GHC.Event.Manager.$fShowState9_closure:
         const GHC.Event.Manager.$fShowState9_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState9_entry() //  [R1]
         { []
         }
     {offset
       caFSe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFSf; else goto caFSg;
       caFSf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFSg: // global
           (_caFSb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caFSb::I64 == 0) goto caFSd; else goto caFSc;
       caFSd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caFSc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caFSb::I64;
           R2 = GHC.Event.Manager.$fShowState10_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState9_info" {
     GHC.Event.Manager.$fShowState9_info:
         const GHC.Event.Manager.$fShowState9_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.807393166 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState8_bytes" {
     GHC.Event.Manager.$fShowState8_bytes:
         I8[] [82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.809562084 UTC

[section ""data" . GHC.Event.Manager.$fShowState7_closure" {
     GHC.Event.Manager.$fShowState7_closure:
         const GHC.Event.Manager.$fShowState7_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState7_entry() //  [R1]
         { []
         }
     {offset
       caFSw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFSx; else goto caFSy;
       caFSx: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFSy: // global
           (_caFSt::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caFSt::I64 == 0) goto caFSv; else goto caFSu;
       caFSv: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caFSu: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caFSt::I64;
           R2 = GHC.Event.Manager.$fShowState8_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState7_info" {
     GHC.Event.Manager.$fShowState7_info:
         const GHC.Event.Manager.$fShowState7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.813017454 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState6_bytes" {
     GHC.Event.Manager.$fShowState6_bytes:
         I8[] [68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.81525217 UTC

[section ""data" . GHC.Event.Manager.$fShowState5_closure" {
     GHC.Event.Manager.$fShowState5_closure:
         const GHC.Event.Manager.$fShowState5_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState5_entry() //  [R1]
         { []
         }
     {offset
       caFSO: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFSP; else goto caFSQ;
       caFSP: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFSQ: // global
           (_caFSL::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caFSL::I64 == 0) goto caFSN; else goto caFSM;
       caFSN: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caFSM: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caFSL::I64;
           R2 = GHC.Event.Manager.$fShowState6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState5_info" {
     GHC.Event.Manager.$fShowState5_info:
         const GHC.Event.Manager.$fShowState5_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.81927109 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState4_bytes" {
     GHC.Event.Manager.$fShowState4_bytes:
         I8[] [82,101,108,101,97,115,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.821509038 UTC

[section ""data" . GHC.Event.Manager.$fShowState3_closure" {
     GHC.Event.Manager.$fShowState3_closure:
         const GHC.Event.Manager.$fShowState3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState3_entry() //  [R1]
         { []
         }
     {offset
       caFT6: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFT7; else goto caFT8;
       caFT7: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFT8: // global
           (_caFT3::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caFT3::I64 == 0) goto caFT5; else goto caFT4;
       caFT5: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caFT4: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caFT3::I64;
           R2 = GHC.Event.Manager.$fShowState4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState3_info" {
     GHC.Event.Manager.$fShowState3_info:
         const GHC.Event.Manager.$fShowState3_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.824965275 UTC

[section ""cstring" . GHC.Event.Manager.$fShowState2_bytes" {
     GHC.Event.Manager.$fShowState2_bytes:
         I8[] [70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.82717868 UTC

[section ""data" . GHC.Event.Manager.$fShowState1_closure" {
     GHC.Event.Manager.$fShowState1_closure:
         const GHC.Event.Manager.$fShowState1_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.$fShowState1_entry() //  [R1]
         { []
         }
     {offset
       caFTo: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFTp; else goto caFTq;
       caFTp: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFTq: // global
           (_caFTl::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caFTl::I64 == 0) goto caFTn; else goto caFTm;
       caFTn: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caFTm: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caFTl::I64;
           R2 = GHC.Event.Manager.$fShowState2_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState1_info" {
     GHC.Event.Manager.$fShowState1_info:
         const GHC.Event.Manager.$fShowState1_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.831981076 UTC

[section ""data" . GHC.Event.Manager.$w$cshowsPrec1_closure" {
     GHC.Event.Manager.$w$cshowsPrec1_closure:
         const GHC.Event.Manager.$w$cshowsPrec1_info;
         const 0;
 },
 GHC.Event.Manager.$w$cshowsPrec1_entry() //  [R2, R3]
         { []
         }
     {offset
       caFTN: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFTO; else goto caFTP;
       caFTO: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$w$cshowsPrec1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caFTP: // global
           I64[Sp - 16] = block_caFTD_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaFU8; else goto caFTE;
       uaFU8: // global
           call _caFTD(R1) args: 0, res: 0, upd: 0;
       caFTE: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$w$cshowsPrec1_info" {
     GHC.Event.Manager.$w$cshowsPrec1_info:
         const GHC.Event.Manager.$w$cshowsPrec1_entry;
         const 0;
         const 270582939662;
         const 8589934607;
         const SaFU9_srt;
 },
 _caFTD() //  [R1]
         { []
         }
     {offset
       caFTD: // global
           _saFnI::P64 = P64[Sp + 8];
           _caFTM::P64 = R1 & 7;
           if (_caFTM::P64 < 4) goto uaFU5; else goto uaFU7;
       uaFU5: // global
           if (_caFTM::P64 < 3) goto uaFU6; else goto caFTJ;
       uaFU6: // global
           if (_caFTM::P64 < 2) goto caFTH; else goto caFTI;
       caFTH: // global
           R3 = _saFnI::P64;
           R2 = GHC.Event.Manager.$fShowState9_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caFTI: // global
           R3 = _saFnI::P64;
           R2 = GHC.Event.Manager.$fShowState7_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caFTJ: // global
           R3 = _saFnI::P64;
           R2 = GHC.Event.Manager.$fShowState5_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       uaFU7: // global
           if (_caFTM::P64 < 5) goto caFTK; else goto caFTL;
       caFTK: // global
           R3 = _saFnI::P64;
           R2 = GHC.Event.Manager.$fShowState3_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
       caFTL: // global
           R3 = _saFnI::P64;
           R2 = GHC.Event.Manager.$fShowState1_closure;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caFTD_info" {
     block_caFTD_info:
         const _caFTD;
         const 1;
         const 133143986206;
         const SaFU9_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.837719512 UTC

[section ""data" . GHC.Event.Manager.$fShowState_$cshowsPrec_closure" {
     GHC.Event.Manager.$fShowState_$cshowsPrec_closure:
         const GHC.Event.Manager.$fShowState_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Manager.$fShowState_$cshowsPrec_entry() //  [R3, R4]
         { []
         }
     {offset
       caFUp: // global
           _saFnL::P64 = R3;
           R3 = R4;
           R2 = _saFnL::P64;
           call GHC.Event.Manager.$w$cshowsPrec1_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState_$cshowsPrec_info" {
     GHC.Event.Manager.$fShowState_$cshowsPrec_info:
         const GHC.Event.Manager.$fShowState_$cshowsPrec_entry;
         const 0;
         const 4294967310;
         const 12884901911;
         const SaFU9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.844881801 UTC

[section ""data" . GHC.Event.Manager.$fEqState_$c==_closure" {
     GHC.Event.Manager.$fEqState_$c==_closure:
         const GHC.Event.Manager.$fEqState_$c==_info;
 },
 GHC.Event.Manager.$fEqState_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       caFUK: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caFUL; else goto caFUM;
       caFUL: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqState_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caFUM: // global
           I64[Sp - 16] = block_caFUA_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaFWn; else goto caFUB;
       uaFWn: // global
           call _caFUA(R1) args: 0, res: 0, upd: 0;
       caFUB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqState_$c==_info" {
     GHC.Event.Manager.$fEqState_$c==_info:
         const GHC.Event.Manager.$fEqState_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caFUA() //  [R1]
         { []
         }
     {offset
       caFUA: // global
           _saFnO::P64 = P64[Sp + 8];
           _caFUJ::P64 = R1 & 7;
           if (_caFUJ::P64 < 4) goto uaFW5; else goto uaFW7;
       uaFW5: // global
           if (_caFUJ::P64 < 3) goto uaFW6; else goto caFUG;
       uaFW6: // global
           if (_caFUJ::P64 < 2) goto caFUE; else goto caFUF;
       caFUE: // global
           I64[Sp + 8] = block_caFUP_info;
           R1 = _saFnO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaFWi; else goto caFUR;
       uaFWi: // global
           call _caFUP(R1) args: 0, res: 0, upd: 0;
       caFUR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caFUF: // global
           I64[Sp + 8] = block_caFV4_info;
           R1 = _saFnO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaFWj; else goto caFV6;
       uaFWj: // global
           call _caFV4(R1) args: 0, res: 0, upd: 0;
       caFV6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caFUG: // global
           I64[Sp + 8] = block_caFVj_info;
           R1 = _saFnO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaFWk; else goto caFVl;
       uaFWk: // global
           call _caFVj(R1) args: 0, res: 0, upd: 0;
       caFVl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uaFW7: // global
           if (_caFUJ::P64 < 5) goto caFUH; else goto caFUI;
       caFUH: // global
           I64[Sp + 8] = block_caFVy_info;
           R1 = _saFnO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaFWl; else goto caFVA;
       uaFWl: // global
           call _caFVy(R1) args: 0, res: 0, upd: 0;
       caFVA: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caFUI: // global
           I64[Sp + 8] = block_caFVN_info;
           R1 = _saFnO::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaFWm; else goto caFVP;
       uaFWm: // global
           call _caFVN(R1) args: 0, res: 0, upd: 0;
       caFVP: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caFUA_info" {
     block_caFUA_info:
         const _caFUA;
         const 1;
         const 30;
 },
 _caFUP() //  [R1]
         { []
         }
     {offset
       caFUP: // global
           if (R1 & 7 == 1) goto uaFW8; else goto uaFW9;
       uaFW8: // global
           Sp = Sp + 8;
           call _caFVZ() args: 0, res: 0, upd: 0;
       uaFW9: // global
           Sp = Sp + 8;
           call _caFVV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFUP_info" {
     block_caFUP_info:
         const _caFUP;
         const 0;
         const 30;
 },
 _caFV4() //  [R1]
         { []
         }
     {offset
       caFV4: // global
           if (R1 & 7 == 2) goto uaFWa; else goto uaFWb;
       uaFWa: // global
           Sp = Sp + 8;
           call _caFVZ() args: 0, res: 0, upd: 0;
       uaFWb: // global
           Sp = Sp + 8;
           call _caFVV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFV4_info" {
     block_caFV4_info:
         const _caFV4;
         const 0;
         const 30;
 },
 _caFVj() //  [R1]
         { []
         }
     {offset
       caFVj: // global
           if (R1 & 7 == 3) goto uaFWc; else goto uaFWd;
       uaFWc: // global
           Sp = Sp + 8;
           call _caFVZ() args: 0, res: 0, upd: 0;
       uaFWd: // global
           Sp = Sp + 8;
           call _caFVV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFVj_info" {
     block_caFVj_info:
         const _caFVj;
         const 0;
         const 30;
 },
 _caFVy() //  [R1]
         { []
         }
     {offset
       caFVy: // global
           if (R1 & 7 == 4) goto uaFWe; else goto uaFWf;
       uaFWe: // global
           Sp = Sp + 8;
           call _caFVZ() args: 0, res: 0, upd: 0;
       uaFWf: // global
           Sp = Sp + 8;
           call _caFVV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFVy_info" {
     block_caFVy_info:
         const _caFVy;
         const 0;
         const 30;
 },
 _caFVN() //  [R1]
         { []
         }
     {offset
       caFVN: // global
           if (R1 & 7 == 5) goto uaFWg; else goto uaFWh;
       uaFWg: // global
           Sp = Sp + 8;
           call _caFVZ() args: 0, res: 0, upd: 0;
       uaFWh: // global
           Sp = Sp + 8;
           call _caFVV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caFVN_info" {
     block_caFVN_info:
         const _caFVN;
         const 0;
         const 30;
 },
 _caFVZ() //  []
         { []
         }
     {offset
       caFVZ: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caFVV() //  []
         { []
         }
     {offset
       caFVV: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.859419021 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey5_bytes" {
     GHC.Event.Manager.$fShowFdKey5_bytes:
         I8[] [70,100,75,101,121,32,123]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.861065225 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey4_bytes" {
     GHC.Event.Manager.$fShowFdKey4_bytes:
         I8[] [107,101,121,70,100,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.862688636 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey3_bytes" {
     GHC.Event.Manager.$fShowFdKey3_bytes:
         I8[] [107,101,121,85,110,105,113,117,101,32,61,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.864317366 UTC

[section ""cstring" . GHC.Event.Manager.$fShowFdKey2_bytes" {
     GHC.Event.Manager.$fShowFdKey2_bytes:
         I8[] [125]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.871836591 UTC

[section ""data" . GHC.Event.Manager.$w$cshowsPrec_closure" {
     GHC.Event.Manager.$w$cshowsPrec_closure:
         const GHC.Event.Manager.$w$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Manager.$w$cshowsPrec_slow() //  [R1]
         { []
         }
     {offset
       caFXv: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2,
                                                      R1) args: 8, res: 0, upd: 8;
     }
 },
 sat_saFo5_entry() //  [R1]
         { []
         }
     {offset
       caFY4: // global
           R3 = P64[R1 + 16];
           R2 = GHC.Event.Manager.$fShowFdKey2_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFo5_info" {
     sat_saFo5_info:
         const sat_saFo5_entry;
         const 1;
         const 16;
 },
 sat_saFo6_entry() //  [R1]
         { []
         }
     {offset
       caFY8: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caFY9; else goto caFYa;
       caFY9: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFYa: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caFXY_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saFo6_info" {
     sat_saFo6_info:
         const sat_saFo6_entry;
         const 4294967297;
         const 19;
 },
 _caFXY() //  [R1, R2]
         { []
         }
     {offset
       caFXY: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caFYd; else goto caFYc;
       caFYd: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caFYc: // global
           I64[Hp - 40] = sat_saFo5_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caFXY_info" {
     block_caFXY_info:
         const _caFXY;
         const 1;
         const 30;
 },
 sat_saFo7_entry() //  [R1]
         { []
         }
     {offset
       caFYe: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caFYi; else goto caFYh;
       caFYi: // global
           HpAlloc = 32;
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFYh: // global
           _saFo0::P64 = P64[R1 + 16];
           _saFnX::I64 = I64[R1 + 24];
           I64[Hp - 24] = sat_saFo6_info;
           P64[Hp - 8] = _saFo0::P64;
           I64[Hp] = _saFnX::I64;
           R3 = Hp - 24;
           R2 = GHC.Event.Manager.$fShowFdKey3_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFo7_info" {
     sat_saFo7_info:
         const sat_saFo7_entry;
         const 4294967297;
         const 19;
 },
 sat_saFo8_entry() //  [R1]
         { []
         }
     {offset
       caFYj: // global
           _saFo8::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caFYk; else goto caFYl;
       caFYl: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caFYn; else goto caFYm;
       caFYn: // global
           HpAlloc = 32;
           goto caFYk;
       caFYk: // global
           R1 = _saFo8::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFYm: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saFo8::P64;
           _saFo0::P64 = P64[_saFo8::P64 + 16];
           _saFnX::I64 = I64[_saFo8::P64 + 24];
           I64[Hp - 24] = sat_saFo7_info;
           P64[Hp - 8] = _saFo0::P64;
           I64[Hp] = _saFnX::I64;
           R3 = Hp - 24;
           R2 = GHC.Show.showCommaSpace1_closure;
           Sp = Sp - 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saFo8_info" {
     sat_saFo8_info:
         const sat_saFo8_entry;
         const 4294967297;
         const 4294967315;
         const SaFU9_srt+48;
 },
 sat_saFoc_entry() //  [R1]
         { []
         }
     {offset
       caFYr: // global
           _saFoc::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto caFYs; else goto caFYt;
       caFYt: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caFYv; else goto caFYu;
       caFYv: // global
           HpAlloc = 32;
           goto caFYs;
       caFYs: // global
           R1 = _saFoc::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFYu: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saFoc::P64;
           _saFo0::P64 = P64[_saFoc::P64 + 16];
           _saFnW::I64 = I64[_saFoc::P64 + 24];
           _saFnX::I64 = I64[_saFoc::P64 + 32];
           I64[Hp - 24] = sat_saFo8_info;
           P64[Hp - 8] = _saFo0::P64;
           I64[Hp] = _saFnX::I64;
           I64[Sp - 24] = block_caFYo_info;
           R4 = Hp - 24;
           R3 = _saFnW::I64;
           R2 = 0;
           Sp = Sp - 24;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saFoc_info" {
     sat_saFoc_info:
         const sat_saFoc_entry;
         const 8589934593;
         const 4294967311;
         const SaFU9_srt+48;
 },
 _caFYo() //  [R1, R2]
         { []
         }
     {offset
       caFYo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caFYy; else goto caFYx;
       caFYy: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caFYx: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caFYo_info" {
     block_caFYo_info:
         const _caFYo;
         const 0;
         const 30;
 },
 sat_saFod_entry() //  [R1]
         { []
         }
     {offset
       caFYz: // global
           _saFod::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caFYA; else goto caFYB;
       caFYB: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caFYD; else goto caFYC;
       caFYD: // global
           HpAlloc = 40;
           goto caFYA;
       caFYA: // global
           R1 = _saFod::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFYC: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saFod::P64;
           _saFo0::P64 = P64[_saFod::P64 + 16];
           _saFnW::I64 = I64[_saFod::P64 + 24];
           _saFnX::I64 = I64[_saFod::P64 + 32];
           I64[Hp - 32] = sat_saFoc_info;
           P64[Hp - 16] = _saFo0::P64;
           I64[Hp - 8] = _saFnW::I64;
           I64[Hp] = _saFnX::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Manager.$fShowFdKey4_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saFod_info" {
     sat_saFod_info:
         const sat_saFod_entry;
         const 8589934593;
         const 4294967311;
         const SaFU9_srt+48;
 },
 p_saFnZ_entry() //  [R1, R2]
         { []
         }
     {offset
       caFYE: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caFYI; else goto caFYH;
       caFYI: // global
           HpAlloc = 40;
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caFYH: // global
           _saFnW::I64 = I64[R1 + 7];
           _saFnX::I64 = I64[R1 + 15];
           I64[Hp - 32] = sat_saFod_info;
           P64[Hp - 16] = R2;
           I64[Hp - 8] = _saFnW::I64;
           I64[Hp] = _saFnX::I64;
           R3 = Hp - 32;
           R2 = GHC.Event.Manager.$fShowFdKey5_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . p_saFnZ_info" {
     p_saFnZ_info:
         const p_saFnZ_entry;
         const 8589934592;
         const 4294967309;
         const 4294967301;
         const SaFU9_srt+48;
 },
 sat_saFog_entry() //  [R1]
         { []
         }
     {offset
       caFYS: // global
           _saFog::P64 = R1;
           if ((Sp + -16) < SpLim) (likely: False) goto caFYT; else goto caFYU;
       caFYU: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caFYW; else goto caFYV;
       caFYW: // global
           HpAlloc = 24;
           goto caFYT;
       caFYT: // global
           R1 = _saFog::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caFYV: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saFog::P64;
           _saFnY::P64 = P64[_saFog::P64 + 16];
           _saFnZ::P64 = P64[_saFog::P64 + 24];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)2_closure;
           P64[Hp] = _saFnY::P64;
           R2 = Hp - 14;
           R1 = _saFnZ::P64;
           Sp = Sp - 16;
           call p_saFnZ_entry(R2, R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_saFog_info" {
     sat_saFog_info:
         const sat_saFog_entry;
         const 2;
         const 4294967314;
         const SaFU9_srt+48;
 },
 GHC.Event.Manager.$w$cshowsPrec_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       caFZ0: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caFZ4; else goto caFZ3;
       caFZ4: // global
           HpAlloc = 80;
           R1 = GHC.Event.Manager.$w$cshowsPrec_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       caFZ3: // global
           I64[Hp - 72] = p_saFnZ_info;
           I64[Hp - 64] = R3;
           I64[Hp - 56] = R4;
           _caFXz::P64 = Hp - 71;
           if (%MO_S_Lt_W64(R2, 11)) goto caFYY; else goto caFYZ;
       caFYY: // global
           Hp = Hp - 56;
           R2 = R5;
           R1 = _caFXz::P64;
           call p_saFnZ_entry(R2, R1) args: 8, res: 0, upd: 8;
       caFYZ: // global
           I64[Hp - 48] = sat_saFog_info;
           P64[Hp - 32] = R5;
           P64[Hp - 24] = _caFXz::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = GHC.Show.$fShow(,)4_closure;
           P64[Hp] = Hp - 48;
           R1 = Hp - 14;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$w$cshowsPrec_info" {
     GHC.Event.Manager.$w$cshowsPrec_info:
         const GHC.Event.Manager.$w$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 17179869184;
         const SaFU9_srt+48;
         const 452;
         const GHC.Event.Manager.$w$cshowsPrec_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.89616993 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure" {
     GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure:
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey_$cshowsPrec_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caG0j: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caG0n; else goto caG0o;
       caG0n: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caG0o: // global
           I64[Sp - 24] = block_caG0g_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaG0w; else goto caG0h;
       uaG0w: // global
           call _caG0g(R1) args: 0, res: 0, upd: 0;
       caG0h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey_$cshowsPrec_info" {
     GHC.Event.Manager.$fShowFdKey_$cshowsPrec_info:
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_entry;
         const 0;
         const 12884901902;
         const 12884901911;
         const SaFU9_srt+56;
 },
 _caG0g() //  [R1]
         { []
         }
     {offset
       caG0g: // global
           I64[Sp] = block_caG0m_info;
           _saFol::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saFol::I64;
           if (R1 & 7 != 0) goto uaG0v; else goto caG0q;
       uaG0v: // global
           call _caG0m(R1) args: 0, res: 0, upd: 0;
       caG0q: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caG0g_info" {
     block_caG0g_info:
         const _caG0g;
         const 2;
         const 4294967326;
         const SaFU9_srt+56;
 },
 _caG0m() //  [R1]
         { []
         }
     {offset
       caG0m: // global
           R5 = P64[Sp + 16];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = I64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG0m_info" {
     block_caG0m_info:
         const _caG0m;
         const 66;
         const 4294967326;
         const SaFU9_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.90240305 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey6_closure" {
     GHC.Event.Manager.$fShowFdKey6_closure:
         const GHC.Types.I#_con_info;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.904834615 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_$cshow_closure" {
     GHC.Event.Manager.$fShowFdKey_$cshow_closure:
         const GHC.Event.Manager.$fShowFdKey_$cshow_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey_$cshow_entry() //  [R2]
         { []
         }
     {offset
       caG0U: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG0V; else goto caG0W;
       caG0V: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowFdKey_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG0W: // global
           I64[Sp - 8] = block_caG0R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG10; else goto caG0S;
       uaG10: // global
           call _caG0R(R1) args: 0, res: 0, upd: 0;
       caG0S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey_$cshow_info" {
     GHC.Event.Manager.$fShowFdKey_$cshow_info:
         const GHC.Event.Manager.$fShowFdKey_$cshow_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SaFU9_srt+56;
 },
 _caG0R() //  [R1]
         { []
         }
     {offset
       caG0R: // global
           R5 = GHC.Types.[]_closure+1;
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 8;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG0R_info" {
     block_caG0R_info:
         const _caG0R;
         const 0;
         const 4294967326;
         const SaFU9_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.910542213 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey1_closure" {
     GHC.Event.Manager.$fShowFdKey1_closure:
         const GHC.Event.Manager.$fShowFdKey1_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey1_entry() //  [R2, R3]
         { []
         }
     {offset
       caG1j: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caG1k; else goto caG1l;
       caG1k: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowFdKey1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caG1l: // global
           I64[Sp - 16] = block_caG1g_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaG1p; else goto caG1h;
       uaG1p: // global
           call _caG1g(R1) args: 0, res: 0, upd: 0;
       caG1h: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey1_info" {
     GHC.Event.Manager.$fShowFdKey1_info:
         const GHC.Event.Manager.$fShowFdKey1_entry;
         const 0;
         const 38654705678;
         const 8589934607;
         const SaFU9_srt+56;
 },
 _caG1g() //  [R1]
         { []
         }
     {offset
       caG1g: // global
           R5 = P64[Sp + 8];
           R4 = I64[R1 + 15];
           R3 = I64[R1 + 7];
           R2 = 0;
           Sp = Sp + 16;
           call GHC.Event.Manager.$w$cshowsPrec_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG1g_info" {
     block_caG1g_info:
         const _caG1g;
         const 1;
         const 4294967326;
         const SaFU9_srt+56;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.915672721 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_$cshowList_closure" {
     GHC.Event.Manager.$fShowFdKey_$cshowList_closure:
         const GHC.Event.Manager.$fShowFdKey_$cshowList_info;
         const 0;
 },
 GHC.Event.Manager.$fShowFdKey_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       caG1E: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Manager.$fShowFdKey1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowFdKey_$cshowList_info" {
     GHC.Event.Manager.$fShowFdKey_$cshowList_info:
         const GHC.Event.Manager.$fShowFdKey_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SaFU9_srt+80;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.919623295 UTC

[section ""data" . GHC.Event.Manager.$fShowFdKey_closure" {
     GHC.Event.Manager.$fShowFdKey_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure+3;
         const GHC.Event.Manager.$fShowFdKey_$cshow_closure+1;
         const GHC.Event.Manager.$fShowFdKey_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.92223206 UTC

[section ""data" . GHC.Event.Manager.keyUnique_closure" {
     GHC.Event.Manager.keyUnique_closure:
         const GHC.Event.Manager.keyUnique_info;
 },
 GHC.Event.Manager.keyUnique_entry() //  [R2]
         { []
         }
     {offset
       caG1T: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG1X; else goto caG1Y;
       caG1X: // global
           R2 = R2;
           R1 = GHC.Event.Manager.keyUnique_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG1Y: // global
           I64[Sp - 8] = block_caG1Q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG22; else goto caG1R;
       uaG22: // global
           call _caG1Q(R1) args: 0, res: 0, upd: 0;
       caG1R: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.keyUnique_info" {
     GHC.Event.Manager.keyUnique_info:
         const GHC.Event.Manager.keyUnique_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG1Q() //  [R1]
         { []
         }
     {offset
       caG1Q: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caG21; else goto caG20;
       caG21: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG20: // global
           _saFoD::I64 = I64[R1 + 15];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saFoD::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG1Q_info" {
     block_caG1Q_info:
         const _caG1Q;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.927972077 UTC

[section ""data" . GHC.Event.Manager.keyFd_closure" {
     GHC.Event.Manager.keyFd_closure:
         const GHC.Event.Manager.keyFd_info;
 },
 GHC.Event.Manager.keyFd_entry() //  [R2]
         { []
         }
     {offset
       caG2m: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG2q; else goto caG2r;
       caG2q: // global
           R2 = R2;
           R1 = GHC.Event.Manager.keyFd_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG2r: // global
           I64[Sp - 8] = block_caG2j_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG2v; else goto caG2k;
       uaG2v: // global
           call _caG2j(R1) args: 0, res: 0, upd: 0;
       caG2k: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.keyFd_info" {
     GHC.Event.Manager.keyFd_info:
         const GHC.Event.Manager.keyFd_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG2j() //  [R1]
         { []
         }
     {offset
       caG2j: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caG2u; else goto caG2t;
       caG2u: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG2t: // global
           _saFoG::I64 = I64[R1 + 7];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saFoG::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG2j_info" {
     block_caG2j_info:
         const _caG2j;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.933962603 UTC

[section ""data" . GHC.Event.Manager._fdCallback_closure" {
     GHC.Event.Manager._fdCallback_closure:
         const GHC.Event.Manager._fdCallback_info;
 },
 GHC.Event.Manager._fdCallback_entry() //  [R2]
         { []
         }
     {offset
       caG2P: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG2Q; else goto caG2R;
       caG2Q: // global
           R2 = R2;
           R1 = GHC.Event.Manager._fdCallback_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG2R: // global
           I64[Sp - 8] = block_caG2M_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG2V; else goto caG2N;
       uaG2V: // global
           call _caG2M(R1) args: 0, res: 0, upd: 0;
       caG2N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager._fdCallback_info" {
     GHC.Event.Manager._fdCallback_info:
         const GHC.Event.Manager._fdCallback_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG2M() //  [R1]
         { []
         }
     {offset
       caG2M: // global
           R1 = P64[R1 + 7];
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG2M_info" {
     block_caG2M_info:
         const _caG2M;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.939287813 UTC

[section ""data" . GHC.Event.Manager.fdEvents_closure" {
     GHC.Event.Manager.fdEvents_closure:
         const GHC.Event.Manager.fdEvents_info;
 },
 GHC.Event.Manager.fdEvents_entry() //  [R2]
         { []
         }
     {offset
       caG3d: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG3h; else goto caG3i;
       caG3h: // global
           R2 = R2;
           R1 = GHC.Event.Manager.fdEvents_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG3i: // global
           I64[Sp - 8] = block_caG3a_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG3m; else goto caG3b;
       uaG3m: // global
           call _caG3a(R1) args: 0, res: 0, upd: 0;
       caG3b: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.fdEvents_info" {
     GHC.Event.Manager.fdEvents_info:
         const GHC.Event.Manager.fdEvents_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG3a() //  [R1]
         { []
         }
     {offset
       caG3a: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caG3l; else goto caG3k;
       caG3l: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG3k: // global
           _saFoS::I64 = I64[R1 + 31];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saFoS::I64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG3a_info" {
     block_caG3a_info:
         const _caG3a;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.945045112 UTC

[section ""data" . GHC.Event.Manager.fdKey_closure" {
     GHC.Event.Manager.fdKey_closure:
         const GHC.Event.Manager.fdKey_info;
 },
 GHC.Event.Manager.fdKey_entry() //  [R2]
         { []
         }
     {offset
       caG3G: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG3K; else goto caG3L;
       caG3K: // global
           R2 = R2;
           R1 = GHC.Event.Manager.fdKey_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG3L: // global
           I64[Sp - 8] = block_caG3D_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG3P; else goto caG3E;
       uaG3P: // global
           call _caG3D(R1) args: 0, res: 0, upd: 0;
       caG3E: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.fdKey_info" {
     GHC.Event.Manager.fdKey_info:
         const GHC.Event.Manager.fdKey_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG3D() //  [R1]
         { []
         }
     {offset
       caG3D: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caG3O; else goto caG3N;
       caG3O: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG3N: // global
           _saFoW::I64 = I64[R1 + 15];
           _saFoX::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saFoW::I64;
           I64[Hp] = _saFoX::I64;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG3D_info" {
     block_caG3D_info:
         const _caG3D;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.951065301 UTC

[section ""data" . GHC.Event.Manager.emLock_closure" {
     GHC.Event.Manager.emLock_closure:
         const GHC.Event.Manager.emLock_info;
 },
 GHC.Event.Manager.emLock_entry() //  [R2]
         { []
         }
     {offset
       caG49: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG4d; else goto caG4e;
       caG4d: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emLock_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG4e: // global
           I64[Sp - 8] = block_caG46_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG4i; else goto caG47;
       uaG4i: // global
           call _caG46(R1) args: 0, res: 0, upd: 0;
       caG47: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emLock_info" {
     GHC.Event.Manager.emLock_info:
         const GHC.Event.Manager.emLock_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG46() //  [R1]
         { []
         }
     {offset
       caG46: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caG4h; else goto caG4g;
       caG4h: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG4g: // global
           _saFpe::P64 = P64[R1 + 71];
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = _saFpe::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG46_info" {
     block_caG46_info:
         const _caG46;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.957913219 UTC

[section ""data" . GHC.Event.Manager.emControl_closure" {
     GHC.Event.Manager.emControl_closure:
         const GHC.Event.Manager.emControl_info;
 },
 GHC.Event.Manager.emControl_entry() //  [R2]
         { []
         }
     {offset
       caG4C: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG4G; else goto caG4H;
       caG4G: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emControl_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG4H: // global
           I64[Sp - 8] = block_caG4z_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG4L; else goto caG4A;
       uaG4L: // global
           call _caG4z(R1) args: 0, res: 0, upd: 0;
       caG4A: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emControl_info" {
     GHC.Event.Manager.emControl_info:
         const GHC.Event.Manager.emControl_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG4z() //  [R1]
         { []
         }
     {offset
       caG4z: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caG4K; else goto caG4J;
       caG4K: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG4J: // global
           _saFpr::P64 = P64[R1 + 55];
           _saFps::P64 = P64[R1 + 63];
           _saFpo::I64 = I64[R1 + 87];
           _saFpp::I64 = I64[R1 + 95];
           _saFpq::I64 = I64[R1 + 103];
           I64[Hp - 40] = GHC.Event.Control.W_con_info;
           P64[Hp - 32] = _saFpr::P64;
           P64[Hp - 24] = _saFps::P64;
           I64[Hp - 16] = _saFpo::I64;
           I64[Hp - 8] = _saFpp::I64;
           I64[Hp] = _saFpq::I64;
           R1 = Hp - 39;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG4z_info" {
     block_caG4z_info:
         const _caG4z;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.963838769 UTC

[section ""data" . GHC.Event.Manager.emUniqueSource_closure" {
     GHC.Event.Manager.emUniqueSource_closure:
         const GHC.Event.Manager.emUniqueSource_info;
 },
 GHC.Event.Manager.emUniqueSource_entry() //  [R2]
         { []
         }
     {offset
       caG55: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG59; else goto caG5a;
       caG59: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emUniqueSource_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG5a: // global
           I64[Sp - 8] = block_caG52_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG5e; else goto caG53;
       uaG5e: // global
           call _caG52(R1) args: 0, res: 0, upd: 0;
       caG53: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emUniqueSource_info" {
     GHC.Event.Manager.emUniqueSource_info:
         const GHC.Event.Manager.emUniqueSource_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG52() //  [R1]
         { []
         }
     {offset
       caG52: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caG5d; else goto caG5c;
       caG5d: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG5c: // global
           _saFpC::P64 = P64[R1 + 47];
           I64[Hp - 8] = GHC.Event.Unique.US_con_info;
           P64[Hp] = _saFpC::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG52_info" {
     block_caG52_info:
         const _caG52;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.969605839 UTC

[section ""data" . GHC.Event.Manager.emState_closure" {
     GHC.Event.Manager.emState_closure:
         const GHC.Event.Manager.emState_info;
 },
 GHC.Event.Manager.emState_entry() //  [R2]
         { []
         }
     {offset
       caG5y: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG5C; else goto caG5D;
       caG5C: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emState_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG5D: // global
           I64[Sp - 8] = block_caG5v_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG5H; else goto caG5w;
       uaG5H: // global
           call _caG5v(R1) args: 0, res: 0, upd: 0;
       caG5w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emState_info" {
     GHC.Event.Manager.emState_info:
         const GHC.Event.Manager.emState_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG5v() //  [R1]
         { []
         }
     {offset
       caG5v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caG5G; else goto caG5F;
       caG5G: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG5F: // global
           _saFpQ::P64 = P64[R1 + 39];
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = _saFpQ::P64;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG5v_info" {
     block_caG5v_info:
         const _caG5v;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.975334168 UTC

[section ""data" . GHC.Event.Manager.emFds_closure" {
     GHC.Event.Manager.emFds_closure:
         const GHC.Event.Manager.emFds_info;
 },
 GHC.Event.Manager.emFds_entry() //  [R2]
         { []
         }
     {offset
       caG61: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG65; else goto caG66;
       caG65: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emFds_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG66: // global
           I64[Sp - 8] = block_caG5Y_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG6a; else goto caG5Z;
       uaG6a: // global
           call _caG5Y(R1) args: 0, res: 0, upd: 0;
       caG5Z: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emFds_info" {
     GHC.Event.Manager.emFds_info:
         const GHC.Event.Manager.emFds_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG5Y() //  [R1]
         { []
         }
     {offset
       caG5Y: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caG69; else goto caG68;
       caG69: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caG68: // global
           _saFq1::P64 = P64[R1 + 15];
           _saFq2::P64 = P64[R1 + 23];
           _saFq4::P64 = P64[R1 + 31];
           _saFq3::I64 = I64[R1 + 79];
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = _saFq1::P64;
           P64[Hp - 16] = _saFq2::P64;
           P64[Hp - 8] = _saFq4::P64;
           I64[Hp] = _saFq3::I64;
           R1 = Hp - 31;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG5Y_info" {
     block_caG5Y_info:
         const _caG5Y;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.980847374 UTC

[section ""data" . GHC.Event.Manager.emBackend_closure" {
     GHC.Event.Manager.emBackend_closure:
         const GHC.Event.Manager.emBackend_info;
 },
 GHC.Event.Manager.emBackend_entry() //  [R2]
         { []
         }
     {offset
       caG6u: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG6v; else goto caG6w;
       caG6v: // global
           R2 = R2;
           R1 = GHC.Event.Manager.emBackend_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG6w: // global
           I64[Sp - 8] = block_caG6r_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG6A; else goto caG6s;
       uaG6A: // global
           call _caG6r(R1) args: 0, res: 0, upd: 0;
       caG6s: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.emBackend_info" {
     GHC.Event.Manager.emBackend_info:
         const GHC.Event.Manager.emBackend_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caG6r() //  [R1]
         { []
         }
     {offset
       caG6r: // global
           R1 = P64[R1 + 7] & (-8);
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG6r_info" {
     block_caG6r_info:
         const _caG6r;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.986542342 UTC

[section ""data" . GHC.Event.Manager.newDefaultBackend_closure" {
     GHC.Event.Manager.newDefaultBackend_closure:
         const GHC.Event.Manager.newDefaultBackend_info;
         const 0;
 },
 GHC.Event.Manager.newDefaultBackend_entry() //  []
         { []
         }
     {offset
       caG6R: // global
           call GHC.Event.EPoll.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.newDefaultBackend_info" {
     GHC.Event.Manager.newDefaultBackend_info:
         const GHC.Event.Manager.newDefaultBackend_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaFU9_srt+88;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.989927357 UTC

[section ""cstring" . GHC.Event.Manager.$trModule4_bytes" {
     GHC.Event.Manager.$trModule4_bytes:
         I8[] [98,97,115,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.991599372 UTC

[section ""data" . GHC.Event.Manager.$trModule3_closure" {
     GHC.Event.Manager.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.993205142 UTC

[section ""cstring" . GHC.Event.Manager.$trModule2_bytes" {
     GHC.Event.Manager.$trModule2_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.995182521 UTC

[section ""data" . GHC.Event.Manager.$trModule1_closure" {
     GHC.Event.Manager.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.996764325 UTC

[section ""data" . GHC.Event.Manager.$trModule_closure" {
     GHC.Event.Manager.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Event.Manager.$trModule3_closure+1;
         const GHC.Event.Manager.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:40.998437333 UTC

[section ""data" . $krep_raAtw_closure" {
     $krep_raAtw_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUnique_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.000099598 UTC

[section ""data" . $krep1_raAtx_closure" {
     $krep1_raAtx_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const System.Posix.Types.$tcFd_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.001735261 UTC

[section ""data" . $krep2_raAty_closure" {
     $krep2_raAty_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcEvent_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.003320207 UTC

[section ""data" . $krep3_raAtz_closure" {
     $krep3_raAtz_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcEventLifetime_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.004975908 UTC

[section ""data" . $krep4_raAtA_closure" {
     $krep4_raAtA_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Tuple.$tc()_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.007065221 UTC

[section ""data" . $krep5_raAtB_closure" {
     $krep5_raAtB_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Control.$tcControl_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.008673184 UTC

[section ""data" . $krep6_raAtC_closure" {
     $krep6_raAtC_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Unique.$tcUniqueSource_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.010353762 UTC

[section ""data" . $krep7_raAtD_closure" {
     $krep7_raAtD_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcInt_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.012495787 UTC

[section ""data" . $krep8_raAtE_closure" {
     $krep8_raAtE_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Internal.$tcBackend_closure;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.014168337 UTC

[section ""data" . $krep9_raAtF_closure" {
     $krep9_raAtF_closure:
         const :_con_info;
         const $krep4_raAtA_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.015848615 UTC

[section ""data" . $krep10_raAtG_closure" {
     $krep10_raAtG_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tcIO_closure;
         const $krep9_raAtF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.017555631 UTC

[section ""data" . $krep11_raAtH_closure" {
     $krep11_raAtH_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep9_raAtF_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.019207807 UTC

[section ""data" . $krep12_raAtI_closure" {
     $krep12_raAtI_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep2_raAty_closure+1;
         const $krep10_raAtG_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.020834824 UTC

[section ""cstring" . GHC.Event.Manager.$tcFdKey2_bytes" {
     GHC.Event.Manager.$tcFdKey2_bytes:
         I8[] [70,100,75,101,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.022981386 UTC

[section ""data" . GHC.Event.Manager.$tcFdKey1_closure" {
     GHC.Event.Manager.$tcFdKey1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcFdKey2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.024697124 UTC

[section ""data" . GHC.Event.Manager.$tcFdKey_closure" {
     GHC.Event.Manager.$tcFdKey_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcFdKey1_closure+1;
         const GHC.Types.krep$*_closure;
         const 11469896173097407196;
         const 6069269054622812669;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.026466393 UTC

[section ""data" . $krep13_raAtJ_closure" {
     $krep13_raAtJ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcFdKey_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.028111776 UTC

[section ""data" . $krep14_raAtK_closure" {
     $krep14_raAtK_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_raAtJ_closure+1;
         const $krep12_raAtI_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.029818391 UTC

[section ""data" . $krep15_raAtL_closure" {
     $krep15_raAtL_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep_raAtw_closure+1;
         const $krep13_raAtJ_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.031460121 UTC

[section ""data" . GHC.Event.Manager.$tc'FdKey1_closure" {
     GHC.Event.Manager.$tc'FdKey1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep1_raAtx_closure+1;
         const $krep15_raAtL_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.033147906 UTC

[section ""cstring" . GHC.Event.Manager.$tc'FdKey3_bytes" {
     GHC.Event.Manager.$tc'FdKey3_bytes:
         I8[] [39,70,100,75,101,121]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.034763549 UTC

[section ""data" . GHC.Event.Manager.$tc'FdKey2_closure" {
     GHC.Event.Manager.$tc'FdKey2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'FdKey3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.036445255 UTC

[section ""data" . GHC.Event.Manager.$tc'FdKey_closure" {
     GHC.Event.Manager.$tc'FdKey_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'FdKey2_closure+1;
         const GHC.Event.Manager.$tc'FdKey1_closure+4;
         const 5122964525573573781;
         const 3523266410810375450;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.038703904 UTC

[section ""cstring" . GHC.Event.Manager.$tcFdData2_bytes" {
     GHC.Event.Manager.$tcFdData2_bytes:
         I8[] [70,100,68,97,116,97]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.040292118 UTC

[section ""data" . GHC.Event.Manager.$tcFdData1_closure" {
     GHC.Event.Manager.$tcFdData1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcFdData2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.04200811 UTC

[section ""data" . GHC.Event.Manager.$tcFdData_closure" {
     GHC.Event.Manager.$tcFdData_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcFdData1_closure+1;
         const GHC.Types.krep$*_closure;
         const 9572952300930290737;
         const 248149994861342082;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.043686829 UTC

[section ""data" . $krep16_raAtM_closure" {
     $krep16_raAtM_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcFdData_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.045407947 UTC

[section ""data" . $krep17_raAtN_closure" {
     $krep17_raAtN_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep14_raAtK_closure+4;
         const $krep16_raAtM_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.047129634 UTC

[section ""data" . $krep18_raAtO_closure" {
     $krep18_raAtO_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep3_raAtz_closure+1;
         const $krep17_raAtN_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.048812055 UTC

[section ""data" . GHC.Event.Manager.$tc'FdData1_closure" {
     GHC.Event.Manager.$tc'FdData1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep13_raAtJ_closure+1;
         const $krep18_raAtO_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.050987679 UTC

[section ""cstring" . GHC.Event.Manager.$tc'FdData3_bytes" {
     GHC.Event.Manager.$tc'FdData3_bytes:
         I8[] [39,70,100,68,97,116,97]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.05262654 UTC

[section ""data" . GHC.Event.Manager.$tc'FdData2_closure" {
     GHC.Event.Manager.$tc'FdData2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'FdData3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.054274614 UTC

[section ""data" . GHC.Event.Manager.$tc'FdData_closure" {
     GHC.Event.Manager.$tc'FdData_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'FdData2_closure+1;
         const GHC.Event.Manager.$tc'FdData1_closure+4;
         const 13006093439393452327;
         const 3623098721817739111;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.055999086 UTC

[section ""data" . $krep19_raAtP_closure" {
     $krep19_raAtP_closure:
         const :_con_info;
         const $krep16_raAtM_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.057738242 UTC

[section ""data" . $krep20_raAtQ_closure" {
     $krep20_raAtQ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Types.$tc[]_closure;
         const $krep19_raAtP_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.059406004 UTC

[section ""data" . $krep21_raAtR_closure" {
     $krep21_raAtR_closure:
         const :_con_info;
         const $krep20_raAtQ_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.061072143 UTC

[section ""data" . $krep22_raAtS_closure" {
     $krep22_raAtS_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.IntTable.$tcIntTable_closure;
         const $krep21_raAtR_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.063371792 UTC

[section ""data" . $krep23_raAtT_closure" {
     $krep23_raAtT_closure:
         const :_con_info;
         const $krep22_raAtS_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.065027072 UTC

[section ""data" . $krep24_raAtU_closure" {
     $krep24_raAtU_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.MVar.$tcMVar_closure;
         const $krep23_raAtT_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.066729646 UTC

[section ""data" . $krep25_raAtV_closure" {
     $krep25_raAtV_closure:
         const :_con_info;
         const $krep24_raAtU_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.068397658 UTC

[section ""data" . $krep26_raAtW_closure" {
     $krep26_raAtW_closure:
         const :_con_info;
         const $krep7_raAtD_closure+1;
         const $krep25_raAtV_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.071063361 UTC

[section ""data" . $krep27_raAtX_closure" {
     $krep27_raAtX_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Arr.$tcArray_closure;
         const $krep26_raAtW_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.072809485 UTC

[section ""cstring" . GHC.Event.Manager.$tcState2_bytes" {
     GHC.Event.Manager.$tcState2_bytes:
         I8[] [83,116,97,116,101]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.074507807 UTC

[section ""data" . GHC.Event.Manager.$tcState1_closure" {
     GHC.Event.Manager.$tcState1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcState2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.076251629 UTC

[section ""data" . GHC.Event.Manager.$tcState_closure" {
     GHC.Event.Manager.$tcState_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcState1_closure+1;
         const GHC.Types.krep$*_closure;
         const 7442518771887689078;
         const 3049393439281173903;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.078060679 UTC

[section ""data" . GHC.Event.Manager.$tc'Created1_closure" {
     GHC.Event.Manager.$tc'Created1_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcState_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.079760795 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Created3_bytes" {
     GHC.Event.Manager.$tc'Created3_bytes:
         I8[] [39,67,114,101,97,116,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.081438721 UTC

[section ""data" . GHC.Event.Manager.$tc'Created2_closure" {
     GHC.Event.Manager.$tc'Created2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Created3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.083178756 UTC

[section ""data" . GHC.Event.Manager.$tc'Created_closure" {
     GHC.Event.Manager.$tc'Created_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Created2_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 17846748838152018769;
         const 13865095201560943193;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.084886819 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Running2_bytes" {
     GHC.Event.Manager.$tc'Running2_bytes:
         I8[] [39,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.087153527 UTC

[section ""data" . GHC.Event.Manager.$tc'Running1_closure" {
     GHC.Event.Manager.$tc'Running1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Running2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.089353556 UTC

[section ""data" . GHC.Event.Manager.$tc'Running_closure" {
     GHC.Event.Manager.$tc'Running_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Running1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 8784511774161450304;
         const 13551584807303205071;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.091000427 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Dying2_bytes" {
     GHC.Event.Manager.$tc'Dying2_bytes:
         I8[] [39,68,121,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.092570262 UTC

[section ""data" . GHC.Event.Manager.$tc'Dying1_closure" {
     GHC.Event.Manager.$tc'Dying1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Dying2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.094355448 UTC

[section ""data" . GHC.Event.Manager.$tc'Dying_closure" {
     GHC.Event.Manager.$tc'Dying_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Dying1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 10564881478355389136;
         const 3106847497763432300;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.096008397 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Releasing2_bytes" {
     GHC.Event.Manager.$tc'Releasing2_bytes:
         I8[] [39,82,101,108,101,97,115,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.098145722 UTC

[section ""data" . GHC.Event.Manager.$tc'Releasing1_closure" {
     GHC.Event.Manager.$tc'Releasing1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Releasing2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.09985794 UTC

[section ""data" . GHC.Event.Manager.$tc'Releasing_closure" {
     GHC.Event.Manager.$tc'Releasing_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Releasing1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 3204716164798465120;
         const 4205553053946559474;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.101682506 UTC

[section ""cstring" . GHC.Event.Manager.$tc'Finished2_bytes" {
     GHC.Event.Manager.$tc'Finished2_bytes:
         I8[] [39,70,105,110,105,115,104,101,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.103442954 UTC

[section ""data" . GHC.Event.Manager.$tc'Finished1_closure" {
     GHC.Event.Manager.$tc'Finished1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'Finished2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.105187547 UTC

[section ""data" . GHC.Event.Manager.$tc'Finished_closure" {
     GHC.Event.Manager.$tc'Finished_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'Finished1_closure+1;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const 8866864364616799312;
         const 2451390217632909923;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.106979187 UTC

[section ""data" . $krep28_raAtY_closure" {
     $krep28_raAtY_closure:
         const :_con_info;
         const GHC.Event.Manager.$tc'Created1_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.108620812 UTC

[section ""data" . $krep29_raAtZ_closure" {
     $krep29_raAtZ_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.IORef.$tcIORef_closure;
         const $krep28_raAtY_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.110640593 UTC

[section ""cstring" . GHC.Event.Manager.$tcEventManager2_bytes" {
     GHC.Event.Manager.$tcEventManager2_bytes:
         I8[] [69,118,101,110,116,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.112255569 UTC

[section ""data" . GHC.Event.Manager.$tcEventManager1_closure" {
     GHC.Event.Manager.$tcEventManager1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tcEventManager2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.114439738 UTC

[section ""data" . GHC.Event.Manager.$tcEventManager_closure" {
     GHC.Event.Manager.$tcEventManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tcEventManager1_closure+1;
         const GHC.Types.krep$*_closure;
         const 16777685112477180948;
         const 1210110422135437783;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.116278521 UTC

[section ""data" . $krep30_raAu0_closure" {
     $krep30_raAu0_closure:
         const GHC.Types.KindRepTyConApp_con_info;
         const GHC.Event.Manager.$tcEventManager_closure+1;
         const GHC.Types.[]_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.118015485 UTC

[section ""data" . $krep31_raAu1_closure" {
     $krep31_raAu1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep11_raAtH_closure+1;
         const $krep30_raAu0_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.119736102 UTC

[section ""data" . $krep32_raAu2_closure" {
     $krep32_raAu2_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep5_raAtB_closure+1;
         const $krep31_raAu1_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.121874627 UTC

[section ""data" . $krep33_raAu3_closure" {
     $krep33_raAu3_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep6_raAtC_closure+1;
         const $krep32_raAu2_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.123499817 UTC

[section ""data" . $krep34_raAu4_closure" {
     $krep34_raAu4_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep29_raAtZ_closure+1;
         const $krep33_raAu3_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.125101633 UTC

[section ""data" . $krep35_raAu5_closure" {
     $krep35_raAu5_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep27_raAtX_closure+1;
         const $krep34_raAu4_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.126823872 UTC

[section ""data" . GHC.Event.Manager.$tc'EventManager1_closure" {
     GHC.Event.Manager.$tc'EventManager1_closure:
         const GHC.Types.KindRepFun_con_info;
         const $krep8_raAtE_closure+1;
         const $krep35_raAu5_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.128498608 UTC

[section ""cstring" . GHC.Event.Manager.$tc'EventManager3_bytes" {
     GHC.Event.Manager.$tc'EventManager3_bytes:
         I8[] [39,69,118,101,110,116,77,97,110,97,103,101,114]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.130182518 UTC

[section ""data" . GHC.Event.Manager.$tc'EventManager2_closure" {
     GHC.Event.Manager.$tc'EventManager2_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Event.Manager.$tc'EventManager3_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.131901414 UTC

[section ""data" . GHC.Event.Manager.$tc'EventManager_closure" {
     GHC.Event.Manager.$tc'EventManager_closure:
         const GHC.Types.TyCon_con_info;
         const GHC.Event.Manager.$trModule_closure+1;
         const GHC.Event.Manager.$tc'EventManager2_closure+1;
         const GHC.Event.Manager.$tc'EventManager1_closure+4;
         const 13274036699047731538;
         const 394780277405469411;
         const 0;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.135281478 UTC

[section ""data" . GHC.Event.Manager.$fShowState_$cshow_closure" {
     GHC.Event.Manager.$fShowState_$cshow_closure:
         const GHC.Event.Manager.$fShowState_$cshow_info;
         const 0;
 },
 GHC.Event.Manager.$fShowState_$cshow_entry() //  [R2]
         { []
         }
     {offset
       caG8v: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caG8w; else goto caG8x;
       caG8w: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$fShowState_$cshow_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caG8x: // global
           I64[Sp - 8] = block_caG8l_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG8Q; else goto caG8m;
       uaG8Q: // global
           call _caG8l(R1) args: 0, res: 0, upd: 0;
       caG8m: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState_$cshow_info" {
     GHC.Event.Manager.$fShowState_$cshow_info:
         const GHC.Event.Manager.$fShowState_$cshow_entry;
         const 0;
         const 8929237008398;
         const 4294967301;
         const SaFU9_srt+8;
 },
 _caG8l() //  [R1]
         { []
         }
     {offset
       caG8l: // global
           _caG8u::P64 = R1 & 7;
           if (_caG8u::P64 < 4) goto uaG8N; else goto uaG8P;
       uaG8N: // global
           if (_caG8u::P64 < 3) goto uaG8O; else goto caG8r;
       uaG8O: // global
           if (_caG8u::P64 < 2) goto caG8p; else goto caG8q;
       caG8p: // global
           R1 = GHC.Event.Manager.$fShowState9_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caG8q: // global
           R1 = GHC.Event.Manager.$fShowState7_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caG8r: // global
           R1 = GHC.Event.Manager.$fShowState5_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       uaG8P: // global
           if (_caG8u::P64 < 5) goto caG8s; else goto caG8t;
       caG8s: // global
           R1 = GHC.Event.Manager.$fShowState3_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
       caG8t: // global
           R1 = GHC.Event.Manager.$fShowState1_closure;
           Sp = Sp + 8;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG8l_info" {
     block_caG8l_info:
         const _caG8l;
         const 0;
         const 133143986206;
         const SaFU9_srt+8;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.140920965 UTC

[section ""data" . GHC.Event.Manager.$fShowState_$cshowList_closure" {
     GHC.Event.Manager.$fShowState_$cshowList_closure:
         const GHC.Event.Manager.$fShowState_$cshowList_info;
         const 0;
 },
 GHC.Event.Manager.$fShowState_$cshowList_entry() //  [R2, R3]
         { []
         }
     {offset
       caG9b: // global
           R4 = R3;
           R3 = R2;
           R2 = GHC.Event.Manager.$w$cshowsPrec1_closure+2;
           call GHC.Show.showList___entry(R4, R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fShowState_$cshowList_info" {
     GHC.Event.Manager.$fShowState_$cshowList_info:
         const GHC.Event.Manager.$fShowState_$cshowList_entry;
         const 0;
         const 4294967310;
         const 8589934607;
         const SaFU9_srt;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.144563103 UTC

[section ""data" . GHC.Event.Manager.$fShowState_closure" {
     GHC.Event.Manager.$fShowState_closure:
         const GHC.Show.C:Show_con_info;
         const GHC.Event.Manager.$fShowState_$cshowsPrec_closure+3;
         const GHC.Event.Manager.$fShowState_$cshow_closure+1;
         const GHC.Event.Manager.$fShowState_$cshowList_closure+2;
         const 0;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.147788382 UTC

[section ""data" . GHC.Event.Manager.$fEqFdKey_$c==_closure" {
     GHC.Event.Manager.$fEqFdKey_$c==_closure:
         const GHC.Event.Manager.$fEqFdKey_$c==_info;
 },
 GHC.Event.Manager.$fEqFdKey_$c==_entry() //  [R2, R3]
         { []
         }
     {offset
       caG9q: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caG9u; else goto caG9v;
       caG9u: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqFdKey_$c==_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caG9v: // global
           I64[Sp - 16] = block_caG9n_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaG9L; else goto caG9o;
       uaG9L: // global
           call _caG9n(R1) args: 0, res: 0, upd: 0;
       caG9o: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqFdKey_$c==_info" {
     GHC.Event.Manager.$fEqFdKey_$c==_info:
         const GHC.Event.Manager.$fEqFdKey_$c==_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caG9n() //  [R1]
         { []
         }
     {offset
       caG9n: // global
           I64[Sp - 8] = block_caG9t_info;
           _saFqz::I64 = I64[R1 + 7];
           _saFqA::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _saFqA::I64;
           I64[Sp + 8] = _saFqz::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaG9K; else goto caG9x;
       uaG9K: // global
           call _caG9t(R1) args: 0, res: 0, upd: 0;
       caG9x: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caG9n_info" {
     block_caG9n_info:
         const _caG9n;
         const 1;
         const 30;
 },
 _caG9t() //  [R1]
         { []
         }
     {offset
       caG9t: // global
           if (I64[Sp + 16] == I64[R1 + 7]) goto caG9G; else goto caG9F;
       caG9G: // global
           R1 = I64[((I64[Sp + 8] == I64[R1 + 15]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caG9F: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caG9t_info" {
     block_caG9t_info:
         const _caG9t;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.155569565 UTC

[section ""data" . GHC.Event.Manager.$fEqFdKey_$c/=_closure" {
     GHC.Event.Manager.$fEqFdKey_$c/=_closure:
         const GHC.Event.Manager.$fEqFdKey_$c/=_info;
 },
 GHC.Event.Manager.$fEqFdKey_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       caGag: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGak; else goto caGal;
       caGak: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqFdKey_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGal: // global
           I64[Sp - 16] = block_caGad_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGaF; else goto caGae;
       uaGaF: // global
           call _caGad(R1) args: 0, res: 0, upd: 0;
       caGae: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqFdKey_$c/=_info" {
     GHC.Event.Manager.$fEqFdKey_$c/=_info:
         const GHC.Event.Manager.$fEqFdKey_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caGad() //  [R1]
         { []
         }
     {offset
       caGad: // global
           I64[Sp - 8] = block_caGaj_info;
           _saFqJ::I64 = I64[R1 + 7];
           _saFqK::I64 = I64[R1 + 15];
           R1 = P64[Sp + 8];
           I64[Sp] = _saFqK::I64;
           I64[Sp + 8] = _saFqJ::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGaE; else goto caGan;
       uaGaE: // global
           call _caGaj(R1) args: 0, res: 0, upd: 0;
       caGan: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGad_info" {
     block_caGad_info:
         const _caGad;
         const 1;
         const 30;
 },
 _caGaj() //  [R1]
         { []
         }
     {offset
       caGaj: // global
           if (I64[Sp + 16] != I64[R1 + 7]) goto caGaB; else goto caGaD;
       caGaD: // global
           if (I64[Sp + 8] != I64[R1 + 15]) goto caGaB; else goto caGaC;
       caGaB: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caGaC: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGaj_info" {
     block_caGaj_info:
         const _caGaj;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.162378651 UTC

[section ""data" . GHC.Event.Manager.$fEqFdKey_closure" {
     GHC.Event.Manager.$fEqFdKey_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Manager.$fEqFdKey_$c==_closure+2;
         const GHC.Event.Manager.$fEqFdKey_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.16692427 UTC

[section ""data" . GHC.Event.Manager.$fEqState_$c/=_closure" {
     GHC.Event.Manager.$fEqState_$c/=_closure:
         const GHC.Event.Manager.$fEqState_$c/=_info;
 },
 GHC.Event.Manager.$fEqState_$c/=_entry() //  [R2, R3]
         { []
         }
     {offset
       caGbg: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGbh; else goto caGbi;
       caGbh: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$fEqState_$c/=_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGbi: // global
           I64[Sp - 16] = block_caGb6_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGcT; else goto caGb7;
       uaGcT: // global
           call _caGb6(R1) args: 0, res: 0, upd: 0;
       caGb7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$fEqState_$c/=_info" {
     GHC.Event.Manager.$fEqState_$c/=_info:
         const GHC.Event.Manager.$fEqState_$c/=_entry;
         const 0;
         const 14;
         const 8589934607;
 },
 _caGb6() //  [R1]
         { []
         }
     {offset
       caGb6: // global
           _saFqR::P64 = P64[Sp + 8];
           _caGbf::P64 = R1 & 7;
           if (_caGbf::P64 < 4) goto uaGcB; else goto uaGcD;
       uaGcB: // global
           if (_caGbf::P64 < 3) goto uaGcC; else goto caGbc;
       uaGcC: // global
           if (_caGbf::P64 < 2) goto caGba; else goto caGbb;
       caGba: // global
           I64[Sp + 8] = block_caGbl_info;
           R1 = _saFqR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaGcO; else goto caGbn;
       uaGcO: // global
           call _caGbl(R1) args: 0, res: 0, upd: 0;
       caGbn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caGbb: // global
           I64[Sp + 8] = block_caGbA_info;
           R1 = _saFqR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaGcP; else goto caGbC;
       uaGcP: // global
           call _caGbA(R1) args: 0, res: 0, upd: 0;
       caGbC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caGbc: // global
           I64[Sp + 8] = block_caGbP_info;
           R1 = _saFqR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaGcQ; else goto caGbR;
       uaGcQ: // global
           call _caGbP(R1) args: 0, res: 0, upd: 0;
       caGbR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       uaGcD: // global
           if (_caGbf::P64 < 5) goto caGbd; else goto caGbe;
       caGbd: // global
           I64[Sp + 8] = block_caGc4_info;
           R1 = _saFqR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaGcR; else goto caGc6;
       uaGcR: // global
           call _caGc4(R1) args: 0, res: 0, upd: 0;
       caGc6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caGbe: // global
           I64[Sp + 8] = block_caGcj_info;
           R1 = _saFqR::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaGcS; else goto caGcl;
       uaGcS: // global
           call _caGcj(R1) args: 0, res: 0, upd: 0;
       caGcl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGb6_info" {
     block_caGb6_info:
         const _caGb6;
         const 1;
         const 30;
 },
 _caGbl() //  [R1]
         { []
         }
     {offset
       caGbl: // global
           if (R1 & 7 == 1) goto uaGcE; else goto uaGcF;
       uaGcE: // global
           Sp = Sp + 8;
           call _caGcv() args: 0, res: 0, upd: 0;
       uaGcF: // global
           Sp = Sp + 8;
           call _caGcr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGbl_info" {
     block_caGbl_info:
         const _caGbl;
         const 0;
         const 30;
 },
 _caGbA() //  [R1]
         { []
         }
     {offset
       caGbA: // global
           if (R1 & 7 == 2) goto uaGcG; else goto uaGcH;
       uaGcG: // global
           Sp = Sp + 8;
           call _caGcv() args: 0, res: 0, upd: 0;
       uaGcH: // global
           Sp = Sp + 8;
           call _caGcr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGbA_info" {
     block_caGbA_info:
         const _caGbA;
         const 0;
         const 30;
 },
 _caGbP() //  [R1]
         { []
         }
     {offset
       caGbP: // global
           if (R1 & 7 == 3) goto uaGcI; else goto uaGcJ;
       uaGcI: // global
           Sp = Sp + 8;
           call _caGcv() args: 0, res: 0, upd: 0;
       uaGcJ: // global
           Sp = Sp + 8;
           call _caGcr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGbP_info" {
     block_caGbP_info:
         const _caGbP;
         const 0;
         const 30;
 },
 _caGc4() //  [R1]
         { []
         }
     {offset
       caGc4: // global
           if (R1 & 7 == 4) goto uaGcK; else goto uaGcL;
       uaGcK: // global
           Sp = Sp + 8;
           call _caGcv() args: 0, res: 0, upd: 0;
       uaGcL: // global
           Sp = Sp + 8;
           call _caGcr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGc4_info" {
     block_caGc4_info:
         const _caGc4;
         const 0;
         const 30;
 },
 _caGcj() //  [R1]
         { []
         }
     {offset
       caGcj: // global
           if (R1 & 7 == 5) goto uaGcM; else goto uaGcN;
       uaGcM: // global
           Sp = Sp + 8;
           call _caGcv() args: 0, res: 0, upd: 0;
       uaGcN: // global
           Sp = Sp + 8;
           call _caGcr() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGcj_info" {
     block_caGcj_info:
         const _caGcj;
         const 0;
         const 30;
 },
 _caGcv() //  []
         { []
         }
     {offset
       caGcv: // global
           R1 = GHC.Types.False_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caGcr() //  []
         { []
         }
     {offset
       caGcr: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.182160816 UTC

[section ""data" . GHC.Event.Manager.$fEqState_closure" {
     GHC.Event.Manager.$fEqState_closure:
         const GHC.Classes.C:Eq_con_info;
         const GHC.Event.Manager.$fEqState_$c==_closure+2;
         const GHC.Event.Manager.$fEqState_$c/=_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.183802505 UTC

[section ""cstring" . lvl1_raAu6_bytes" {
     lvl1_raAu6_bytes:
         I8[] [73,110,116]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.186322882 UTC

[section ""data" . lvl2_raAu7_closure" {
     lvl2_raAu7_closure:
         const lvl2_raAu7_info;
         const 0;
         const 0;
         const 0;
 },
 lvl2_raAu7_entry() //  [R1]
         { []
         }
     {offset
       caGe4: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGe5; else goto caGe6;
       caGe5: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGe6: // global
           (_caGe1::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caGe1::I64 == 0) goto caGe3; else goto caGe2;
       caGe3: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caGe2: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caGe1::I64;
           R2 = lvl1_raAu6_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl2_raAu7_info" {
     lvl2_raAu7_info:
         const lvl2_raAu7_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.190403499 UTC

[section ""data" . lvl3_raAu8_closure" {
     lvl3_raAu8_closure:
         const lvl3_raAu8_info;
         const 0;
 },
 lvl3_raAu8_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caGek: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGeo; else goto caGen;
       caGeo: // global
           HpAlloc = 16;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = lvl3_raAu8_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caGen: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R4;
           R6 = lvl2_raAu7_closure;
           R5 = Hp - 7;
           R4 = R2;
           R3 = R3;
           R2 = GHC.Show.$fShowInt_closure;
           call GHC.Arr.$windexError_entry(R6,
                                           R5,
                                           R4,
                                           R3,
                                           R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl3_raAu8_info" {
     lvl3_raAu8_info:
         const lvl3_raAu8_entry;
         const 0;
         const 30064771086;
         const 12884901910;
         const SaFU9_srt+104;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.195771086 UTC

[section ""data" . GHC.Event.Manager.callbackTableVar_closure" {
     GHC.Event.Manager.callbackTableVar_closure:
         const GHC.Event.Manager.callbackTableVar_info;
         const 0;
 },
 GHC.Event.Manager.callbackTableVar_entry() //  [R2, R3]
         { []
         }
     {offset
       caGeB: // global
           if ((Sp + -48) < SpLim) (likely: False) goto caGeP; else goto caGeQ;
       caGeP: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.callbackTableVar_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGeQ: // global
           I64[Sp - 16] = block_caGey_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGfi; else goto caGez;
       uaGfi: // global
           call _caGey(R1) args: 0, res: 0, upd: 0;
       caGez: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.callbackTableVar_info" {
     GHC.Event.Manager.callbackTableVar_info:
         const GHC.Event.Manager.callbackTableVar_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SaFU9_srt+120;
 },
 _caGey() //  [R1]
         { []
         }
     {offset
       caGey: // global
           I64[Sp - 16] = block_caGeE_info;
           _saFr7::P64 = P64[R1 + 23];
           _saFr9::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 8] = _saFr9::P64;
           P64[Sp] = _saFr7::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGfh; else goto caGeF;
       uaGfh: // global
           call _caGeE(R1) args: 0, res: 0, upd: 0;
       caGeF: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGey_info" {
     block_caGey_info:
         const _caGey;
         const 1;
         const 4294967326;
         const SaFU9_srt+120;
 },
 _caGeE() //  [R1]
         { []
         }
     {offset
       caGeE: // global
           I64[Sp - 8] = block_caGeJ_info;
           _saFri::P64 = R1;
           _saFrj::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp] = _saFrj::I64;
           P64[Sp + 16] = _saFri::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGfj; else goto caGeK;
       uaGfj: // global
           call _caGeJ(R1) args: 0, res: 0, upd: 0;
       caGeK: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGeE_info" {
     block_caGeE_info:
         const _caGeE;
         const 3;
         const 4294967326;
         const SaFU9_srt+120;
 },
 _caGeJ() //  [R1]
         { []
         }
     {offset
       caGeJ: // global
           I64[Sp - 8] = block_caGeO_info;
           _saFrk::P64 = R1;
           _saFrl::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp] = _saFrl::I64;
           P64[Sp + 32] = _saFrk::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGfk; else goto caGeU;
       uaGfk: // global
           call _caGeO(R1) args: 0, res: 0, upd: 0;
       caGeU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGeJ_info" {
     block_caGeJ_info:
         const _caGeJ;
         const 68;
         const 4294967326;
         const SaFU9_srt+120;
 },
 _caGeO() //  [R1]
         { []
         }
     {offset
       caGeO: // global
           _saFri::P64 = P64[Sp + 32];
           _saFrj::I64 = I64[Sp + 16];
           _saFrk::P64 = P64[Sp + 40];
           _saFro::I64 = I64[R1 + 7] & 31;
           if (%MO_S_Gt_W64(_saFrj::I64,
                            _saFro::I64)) goto caGfb; else goto caGfd;
       caGfd: // global
           if (%MO_S_Gt_W64(_saFro::I64,
                            I64[Sp + 8])) goto caGfb; else goto caGfc;
       caGfb: // global
           R4 = _saFro::I64;
           R3 = _saFri::P64;
           R2 = _saFrk::P64;
           Sp = Sp + 48;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caGfc: // global
           R1 = P64[P64[Sp + 24] + ((_saFro::I64 - _saFrj::I64 << 3) + 24)] & (-8);
           Sp = Sp + 48;
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGeO_info" {
     block_caGeO_info:
         const _caGeO;
         const 197;
         const 4294967326;
         const SaFU9_srt+120;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.206335778 UTC

[section ""data" . GHC.Event.Manager.wakeManager1_closure" {
     GHC.Event.Manager.wakeManager1_closure:
         const GHC.Event.Manager.wakeManager1_info;
 },
 GHC.Event.Manager.wakeManager1_entry() //  []
         { []
         }
     {offset
       caGfU: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.wakeManager1_info" {
     GHC.Event.Manager.wakeManager1_info:
         const GHC.Event.Manager.wakeManager1_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.209988865 UTC

[section ""data" . GHC.Event.Manager.wakeManager_closure" {
     GHC.Event.Manager.wakeManager_closure:
         const GHC.Event.Manager.wakeManager_info;
 },
 GHC.Event.Manager.wakeManager_entry() //  [R2]
         { []
         }
     {offset
       caGg7: // global
           R2 = R2;
           call GHC.Event.Manager.wakeManager1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.wakeManager_info" {
     GHC.Event.Manager.wakeManager_info:
         const GHC.Event.Manager.wakeManager_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.215607295 UTC

[section ""data" . GHC.Event.Manager.cleanup1_closure" {
     GHC.Event.Manager.cleanup1_closure:
         const GHC.Event.Manager.cleanup1_info;
 },
 GHC.Event.Manager.cleanup1_entry() //  [R2]
         { []
         }
     {offset
       caGgl: // global
           if ((Sp + -64) < SpLim) (likely: False) goto caGgp; else goto caGgq;
       caGgp: // global
           R2 = R2;
           R1 = GHC.Event.Manager.cleanup1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGgq: // global
           I64[Sp - 8] = block_caGgi_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGhj; else goto caGgj;
       uaGhj: // global
           call _caGgi(R1) args: 0, res: 0, upd: 0;
       caGgj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.cleanup1_info" {
     GHC.Event.Manager.cleanup1_info:
         const GHC.Event.Manager.cleanup1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caGgi() //  [R1]
         { []
         }
     {offset
       caGgi: // global
           I64[Sp - 56] = block_caGgo_info;
           _saFrG::P64 = P64[R1 + 39];
           _saFrL::P64 = P64[R1 + 55];
           _saFrM::P64 = P64[R1 + 63];
           _saFrN::P64 = P64[R1 + 71];
           _saFrI::I64 = I64[R1 + 87];
           _saFrJ::I64 = I64[R1 + 95];
           _saFrK::I64 = I64[R1 + 103];
           R1 = P64[R1 + 7];
           I64[Sp - 48] = _saFrI::I64;
           I64[Sp - 40] = _saFrJ::I64;
           I64[Sp - 32] = _saFrK::I64;
           P64[Sp - 24] = _saFrL::P64;
           P64[Sp - 16] = _saFrM::P64;
           P64[Sp - 8] = _saFrN::P64;
           P64[Sp] = _saFrG::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uaGhi; else goto caGgs;
       uaGhi: // global
           call _caGgo(R1) args: 0, res: 0, upd: 0;
       caGgs: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGgi_info" {
     block_caGgi_info:
         const _caGgi;
         const 0;
         const 30;
 },
 _caGgo() //  [R1]
         { []
         }
     {offset
       caGgo: // global
           _saFrG::P64 = P64[Sp + 56];
           _saFrN::P64 = P64[Sp + 48];
           _saFrP::P64 = P64[R1 + 7];
           _saFrT::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saFrG::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saFrG::P64);
           I64[Sp] = block_caGgz_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saFrN::P64;
           P64[Sp + 48] = _saFrT::P64;
           P64[Sp + 56] = _saFrP::P64;
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGgo_info" {
     block_caGgo_info:
         const _caGgo;
         const 455;
         const 30;
 },
 _caGgz() //  []
         { []
         }
     {offset
       caGgz: // global
           I64[Sp] = block_caGgB_info;
           R2 = P64[Sp + 56];
           R1 = P64[Sp + 48];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGgz_info" {
     block_caGgz_info:
         const _caGgz;
         const 455;
         const 30;
 },
 _caGgB() //  []
         { []
         }
     {offset
       caGgB: // global
           I64[Sp] = block_caGgD_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGgB_info" {
     block_caGgB_info:
         const _caGgB;
         const 6599;
         const 30;
 },
 _caGgD() //  []
         { []
         }
     {offset
       caGgD: // global
           _saFrJ::I64 = I64[Sp + 16];
           _saFrL::P64 = P64[Sp + 32];
           (_saFs8::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saFsd::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFrJ::I64)));
           I64[Sp + 16] = block_caGgT_info;
           R1 = _saFrL::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaGhk; else goto caGgU;
       uaGhk: // global
           call _caGgT(R1) args: 0, res: 0, upd: 0;
       caGgU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGgD_info" {
     block_caGgD_info:
         const _caGgD;
         const 7623;
         const 30;
 },
 _caGgT() //  [R1]
         { []
         }
     {offset
       caGgT: // global
           _saFrK::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caGh0; else goto caGh4;
       caGh0: // global
           (_saFsj::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFrK::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caGh4: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saFsr::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFrK::I64)));
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 48;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGgT_info" {
     block_caGgT_info:
         const _caGgT;
         const 1989;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.230049476 UTC

[section ""data" . GHC.Event.Manager.cleanup_closure" {
     GHC.Event.Manager.cleanup_closure:
         const GHC.Event.Manager.cleanup_info;
 },
 GHC.Event.Manager.cleanup_entry() //  [R2]
         { []
         }
     {offset
       caGi6: // global
           R2 = R2;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.cleanup_info" {
     GHC.Event.Manager.cleanup_info:
         const GHC.Event.Manager.cleanup_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.234532022 UTC

[section ""data" . GHC.Event.Manager.finished1_closure" {
     GHC.Event.Manager.finished1_closure:
         const GHC.Event.Manager.finished1_info;
 },
 sat_saFsM_entry() //  [R1]
         { []
         }
     {offset
       caGix: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGiy; else goto caGiz;
       caGiy: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGiz: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caGiq_info;
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaGiG; else goto caGir;
       uaGiG: // global
           call _caGiq(R1) args: 0, res: 0, upd: 0;
       caGir: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saFsM_info" {
     sat_saFsM_info:
         const sat_saFsM_entry;
         const 1;
         const 16;
 },
 _caGiq() //  [R1]
         { []
         }
     {offset
       caGiq: // global
           if (R1 & 7 == 5) goto caGiv; else goto caGiu;
       caGiv: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
       caGiu: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caGiq_info" {
     block_caGiq_info:
         const _caGiq;
         const 0;
         const 30;
 },
 GHC.Event.Manager.finished1_entry() //  [R2]
         { []
         }
     {offset
       caGiH: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caGiI; else goto caGiJ;
       caGiI: // global
           R2 = R2;
           R1 = GHC.Event.Manager.finished1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGiJ: // global
           I64[Sp - 8] = block_caGih_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGiN; else goto caGii;
       uaGiN: // global
           call _caGih(R1) args: 0, res: 0, upd: 0;
       caGii: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.finished1_info" {
     GHC.Event.Manager.finished1_info:
         const GHC.Event.Manager.finished1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caGih() //  [R1]
         { []
         }
     {offset
       caGih: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGiM; else goto caGiL;
       caGiM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGiL: // global
           _saFsK::P64 = P64[P64[R1 + 39] + 8];
           I64[Hp - 16] = sat_saFsM_info;
           P64[Hp] = _saFsK::P64;
           R1 = Hp - 16;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGih_info" {
     block_caGih_info:
         const _caGih;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.243010398 UTC

[section ""data" . GHC.Event.Manager.finished_closure" {
     GHC.Event.Manager.finished_closure:
         const GHC.Event.Manager.finished_info;
 },
 GHC.Event.Manager.finished_entry() //  [R2]
         { []
         }
     {offset
       caGjl: // global
           R2 = R2;
           call GHC.Event.Manager.finished1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.finished_info" {
     GHC.Event.Manager.finished_info:
         const GHC.Event.Manager.finished_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.246416687 UTC

[section ""data" . GHC.Event.Manager.release2_closure" {
     GHC.Event.Manager.release2_closure:
         const GHC.Event.Manager.release2_info;
 },
 GHC.Event.Manager.release2_entry() //  [R2]
         { []
         }
     {offset
       caGjx: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGjB; else goto caGjA;
       caGjB: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Manager.release2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGjA: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.Manager.Releasing_closure+4;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.release2_info" {
     GHC.Event.Manager.release2_info:
         const GHC.Event.Manager.release2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.251332196 UTC

[section ""data" . GHC.Event.Manager.release1_closure" {
     GHC.Event.Manager.release1_closure:
         const GHC.Event.Manager.release1_info;
         const 0;
 },
 GHC.Event.Manager.release1_entry() //  [R2]
         { []
         }
     {offset
       caGjQ: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGjR; else goto caGjS;
       caGjR: // global
           R2 = R2;
           R1 = GHC.Event.Manager.release1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGjS: // global
           I64[Sp - 8] = block_caGjN_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGkc; else goto caGjO;
       uaGkc: // global
           call _caGjN(R1) args: 0, res: 0, upd: 0;
       caGjO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.release1_info" {
     GHC.Event.Manager.release1_info:
         const GHC.Event.Manager.release1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaFU9_srt+136;
 },
 _caGjN() //  [R1]
         { []
         }
     {offset
       caGjN: // global
           I64[Sp - 16] = block_caGjV_info;
           R2 = GHC.Event.Manager.release2_closure+1;
           _saFt2::P64 = P64[R1 + 63];
           _saFt0::I64 = I64[R1 + 103];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _saFt2::P64;
           I64[Sp] = _saFt0::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGjN_info" {
     block_caGjN_info:
         const _caGjN;
         const 0;
         const 4294967326;
         const SaFU9_srt+136;
 },
 _caGjV() //  [R1]
         { []
         }
     {offset
       caGjV: // global
           I64[Sp] = block_caGjX_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaGkd; else goto caGk0;
       uaGkd: // global
           call _caGjX(R1) args: 0, res: 0, upd: 0;
       caGk0: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGjV_info" {
     block_caGjV_info:
         const _caGjV;
         const 130;
         const 4294967326;
         const SaFU9_srt+136;
 },
 _caGjX() //  [R1]
         { []
         }
     {offset
       caGjX: // global
           if (R1 & 7 == 2) goto caGka; else goto caGk6;
       caGka: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendWakeup_entry(R3,
                                                     R2) args: 8, res: 0, upd: 8;
       caGk6: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGjX_info" {
     block_caGjX_info:
         const _caGjX;
         const 130;
         const 4294967326;
         const SaFU9_srt+136;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.259982915 UTC

[section ""data" . GHC.Event.Manager.release_closure" {
     GHC.Event.Manager.release_closure:
         const GHC.Event.Manager.release_info;
         const 0;
 },
 GHC.Event.Manager.release_entry() //  [R2]
         { []
         }
     {offset
       caGkF: // global
           R2 = R2;
           call GHC.Event.Manager.release1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.release_info" {
     GHC.Event.Manager.release_info:
         const GHC.Event.Manager.release_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaFU9_srt+144;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.263720276 UTC

[section ""data" . GHC.Event.Manager.shutdown2_closure" {
     GHC.Event.Manager.shutdown2_closure:
         const GHC.Event.Manager.shutdown2_info;
 },
 GHC.Event.Manager.shutdown2_entry() //  [R2]
         { []
         }
     {offset
       caGkR: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGkV; else goto caGkU;
       caGkV: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Manager.shutdown2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGkU: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.Manager.Dying_closure+3;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.shutdown2_info" {
     GHC.Event.Manager.shutdown2_info:
         const GHC.Event.Manager.shutdown2_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.26835002 UTC

[section ""data" . GHC.Event.Manager.shutdown1_closure" {
     GHC.Event.Manager.shutdown1_closure:
         const GHC.Event.Manager.shutdown1_info;
         const 0;
 },
 GHC.Event.Manager.shutdown1_entry() //  [R2]
         { []
         }
     {offset
       caGla: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGlb; else goto caGlc;
       caGlb: // global
           R2 = R2;
           R1 = GHC.Event.Manager.shutdown1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGlc: // global
           I64[Sp - 8] = block_caGl7_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGlw; else goto caGl8;
       uaGlw: // global
           call _caGl7(R1) args: 0, res: 0, upd: 0;
       caGl8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.shutdown1_info" {
     GHC.Event.Manager.shutdown1_info:
         const GHC.Event.Manager.shutdown1_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaFU9_srt+152;
 },
 _caGl7() //  [R1]
         { []
         }
     {offset
       caGl7: // global
           I64[Sp - 16] = block_caGlf_info;
           R2 = GHC.Event.Manager.shutdown2_closure+1;
           _saFtn::P64 = P64[R1 + 63];
           _saFtk::I64 = I64[R1 + 95];
           R1 = P64[R1 + 39];
           P64[Sp - 8] = _saFtn::P64;
           I64[Sp] = _saFtk::I64;
           Sp = Sp - 16;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGl7_info" {
     block_caGl7_info:
         const _caGl7;
         const 0;
         const 4294967326;
         const SaFU9_srt+152;
 },
 _caGlf() //  [R1]
         { []
         }
     {offset
       caGlf: // global
           I64[Sp] = block_caGlh_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaGlx; else goto caGlk;
       uaGlx: // global
           call _caGlh(R1) args: 0, res: 0, upd: 0;
       caGlk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGlf_info" {
     block_caGlf_info:
         const _caGlf;
         const 130;
         const 4294967326;
         const SaFU9_srt+152;
 },
 _caGlh() //  [R1]
         { []
         }
     {offset
       caGlh: // global
           if (R1 & 7 == 2) goto caGlu; else goto caGlq;
       caGlu: // global
           R3 = P64[Sp + 8];
           R2 = I64[Sp + 16];
           Sp = Sp + 24;
           call GHC.Event.Control.$wsendDie_entry(R3,
                                                  R2) args: 8, res: 0, upd: 8;
       caGlq: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGlh_info" {
     block_caGlh_info:
         const _caGlh;
         const 130;
         const 4294967326;
         const SaFU9_srt+152;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.27704961 UTC

[section ""data" . GHC.Event.Manager.shutdown_closure" {
     GHC.Event.Manager.shutdown_closure:
         const GHC.Event.Manager.shutdown_info;
         const 0;
 },
 GHC.Event.Manager.shutdown_entry() //  [R2]
         { []
         }
     {offset
       caGlZ: // global
           R2 = R2;
           call GHC.Event.Manager.shutdown1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.shutdown_info" {
     GHC.Event.Manager.shutdown_info:
         const GHC.Event.Manager.shutdown_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaFU9_srt+160;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.280115054 UTC

[section ""cstring" . lvl4_raAu9_bytes" {
     lvl4_raAu9_bytes:
         I8[] [70,97,105,108,101,100,32,119,104,105,108,101,32,97,116,116,101,109,112,116,105,110,103,32,116,111,32,109,111,100,105,102,121,32,114,101,103,105,115,116,114,97,116,105,111,110,32,111,102,32,102,105,108,101,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.281802576 UTC

[section ""cstring" . lvl5_raAua_bytes" {
     lvl5_raAua_bytes:
         I8[] [32,97,116,32,108,111,99,97,116,105,111,110,32]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.286119439 UTC

[section ""data" . $wlvl_raAub_closure" {
     $wlvl_raAub_closure:
         const $wlvl_raAub_info;
         const 0;
 },
 sat_saFtz_entry() //  [R1]
         { []
         }
     {offset
       caGmm: // global
           R3 = P64[R1 + 16];
           R2 = lvl5_raAua_bytes;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFtz_info" {
     sat_saFtz_info:
         const sat_saFtz_entry;
         const 1;
         const 16;
 },
 sat_saFtA_entry() //  [R1]
         { []
         }
     {offset
       caGmq: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caGmr; else goto caGms;
       caGmr: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGms: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caGmg_info;
           R4 = GHC.Types.[]_closure+1;
           R3 = I64[R1 + 24];
           R2 = 0;
           P64[Sp - 24] = P64[R1 + 16];
           Sp = Sp - 32;
           call GHC.Show.$wshowSignedInt_entry(R4,
                                               R3,
                                               R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . sat_saFtA_info" {
     sat_saFtA_info:
         const sat_saFtA_entry;
         const 4294967297;
         const 19;
 },
 _caGmg() //  [R1, R2]
         { []
         }
     {offset
       caGmg: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caGmv; else goto caGmu;
       caGmv: // global
           HpAlloc = 48;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caGmu: // global
           I64[Hp - 40] = sat_saFtz_info;
           P64[Hp - 24] = P64[Sp + 8];
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R3 = Hp - 40;
           R2 = Hp - 14;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caGmg_info" {
     block_caGmg_info:
         const _caGmg;
         const 1;
         const 30;
 },
 $wlvl_raAub_entry() //  [R2, R3]
         { []
         }
     {offset
       caGmy: // global
           _saFtu::I64 = R3;
           _saFtt::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto caGmz; else goto caGmA;
       caGmA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caGmC; else goto caGmB;
       caGmC: // global
           HpAlloc = 32;
           goto caGmz;
       caGmz: // global
           R3 = _saFtu::I64;
           R2 = _saFtt::P64;
           R1 = $wlvl_raAub_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGmB: // global
           I64[Hp - 24] = sat_saFtA_info;
           P64[Hp - 8] = _saFtt::P64;
           I64[Hp] = _saFtu::I64;
           I64[Sp - 8] = block_caGmw_info;
           R3 = Hp - 24;
           R2 = lvl4_raAu9_bytes;
           Sp = Sp - 8;
           call GHC.CString.unpackAppendCString#_entry(R3,
                                                       R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wlvl_raAub_info" {
     $wlvl_raAub_info:
         const $wlvl_raAub_entry;
         const 0;
         const 12884901902;
         const 8589934606;
         const SaFU9_srt+168;
 },
 _caGmw() //  [R1]
         { []
         }
     {offset
       caGmw: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGmw_info" {
     block_caGmw_info:
         const _caGmw;
         const 0;
         const 4294967326;
         const SaFU9_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.295618185 UTC

[section ""cstring" . lvl6_raAuc_bytes" {
     lvl6_raAuc_bytes:
         I8[] [114,101,103,105,115,116,101,114,67,111,110,116,114,111,108,70,100]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.297923927 UTC

[section ""data" . lvl7_raAud_closure" {
     lvl7_raAud_closure:
         const lvl7_raAud_info;
         const 0;
         const 0;
         const 0;
 },
 lvl7_raAud_entry() //  [R1]
         { []
         }
     {offset
       caGne: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGnf; else goto caGng;
       caGnf: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGng: // global
           (_caGnb::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caGnb::I64 == 0) goto caGnd; else goto caGnc;
       caGnd: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caGnc: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caGnb::I64;
           R2 = lvl6_raAuc_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl7_raAud_info" {
     lvl7_raAud_info:
         const lvl7_raAud_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.302118608 UTC

[section ""data" . GHC.Event.Manager.new5_closure" {
     GHC.Event.Manager.new5_closure:
         const GHC.Event.Manager.new5_info;
 },
 GHC.Event.Manager.new5_entry() //  [R2]
         { []
         }
     {offset
       caGnu: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGny; else goto caGnx;
       caGny: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = GHC.Event.Manager.new5_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGnx: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = GHC.Event.Manager.Finished_closure+5;
           P64[Hp] = R2;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new5_info" {
     GHC.Event.Manager.new5_info:
         const GHC.Event.Manager.new5_entry;
         const 0;
         const 14;
         const 4294967301;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.305408152 UTC

[section ""data" . GHC.Event.Manager.new4_closure" {
     GHC.Event.Manager.new4_closure:
         const GHC.Types.I#_con_info;
         const 31;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.309283636 UTC

[section ""data" . x_raAue_closure" {
     x_raAue_closure:
         const x_raAue_info;
 },
 x_raAue_entry() //  []
         { []
         }
     {offset
       caGnW: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGo9; else goto caGoa;
       caGoa: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caGoc; else goto caGob;
       caGoc: // global
           HpAlloc = 96;
           goto caGo9;
       caGo9: // global
           R1 = x_raAue_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caGob: // global
           I64[Hp - 88] = stg_MUT_ARR_PTRS_DIRTY_info;
           I64[Hp - 80] = 8;
           I64[Hp - 72] = 9;
           _caGnL::I64 = Hp - 88;
           _caGnM::I64 = _caGnL::I64 + 24;
           goto caGnN;
       caGnN: // global
           if (_caGnM::I64 < (_caGnL::I64 + 88)) goto caGnP; else goto caGnO;
       caGnP: // global
           P64[_caGnM::I64] = GHC.Event.IntTable.Empty_closure+1;
           _caGnM::I64 = _caGnM::I64 + 8;
           goto caGnN;
       caGnO: // global
           I64[Sp - 16] = block_caGnQ_info;
           R1 = GHC.ForeignPtr.NoFinalizers_closure+1;
           I64[Sp - 8] = _caGnL::I64;
           Sp = Sp - 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . x_raAue_info" {
     x_raAue_info:
         const x_raAue_entry;
         const 0;
         const 14;
         const 4294967299;
 },
 _caGnQ() //  [R1]
         { []
         }
     {offset
       caGnQ: // global
           I64[Sp - 8] = block_caGnS_info;
           R2 = 8;
           _saFtJ::P64 = R1;
           R1 = 8;
           P64[Sp] = _saFtJ::P64;
           Sp = Sp - 8;
           call stg_newAlignedPinnedByteArray#(R2,
                                               R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGnQ_info" {
     block_caGnQ_info:
         const _caGnQ;
         const 1;
         const 30;
 },
 _caGnS() //  [R1]
         { []
         }
     {offset
       caGnS: // global
           Hp = Hp + 56;
           if (Hp > HpLim) (likely: False) goto caGog; else goto caGof;
       caGog: // global
           HpAlloc = 56;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGof: // global
           _saFtG::P64 = P64[Sp + 16];
           _saFtJ::P64 = P64[Sp + 8];
           _saFtN::I64 = R1 + 16;
           I64[_saFtN::I64] = 0;
           I64[Hp - 48] = GHC.ForeignPtr.MallocPtr_con_info;
           P64[Hp - 40] = R1;
           P64[Hp - 32] = _saFtJ::P64;
           _caGnY::P64 = Hp - 46;
           call MO_Touch(_caGnY::P64);
           I64[Hp - 24] = GHC.Event.IntTable.IT_con_info;
           P64[Hp - 16] = _saFtG::P64;
           P64[Hp - 8] = _caGnY::P64;
           I64[Hp] = _saFtN::I64;
           I64[Sp + 16] = block_caGo1_info;
           R1 = Hp - 23;
           Sp = Sp + 16;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGnS_info" {
     block_caGnS_info:
         const _caGnS;
         const 2;
         const 30;
 },
 _caGo1() //  [R1]
         { []
         }
     {offset
       caGo1: // global
           I64[Sp - 8] = block_caGo3_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGo1_info" {
     block_caGo1_info:
         const _caGo1;
         const 0;
         const 30;
 },
 _caGo3() //  [R1]
         { []
         }
     {offset
       caGo3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGok; else goto caGoj;
       caGok: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGoj: // global
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = P64[Sp + 8];
           I64[Sp] = block_caGo6_info;
           R2 = Hp - 7;
           _saFtX::P64 = R1;
           R1 = R1;
           P64[Sp + 8] = _saFtX::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGo3_info" {
     block_caGo3_info:
         const _caGo3;
         const 1;
         const 30;
 },
 _caGo6() //  []
         { []
         }
     {offset
       caGo6: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGon; else goto caGom;
       caGon: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caGom: // global
           I64[Hp - 8] = GHC.MVar.MVar_con_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGo6_info" {
     block_caGo6_info:
         const _caGo6;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.323108234 UTC

[section ""data" . GHC.Event.Manager.$wxs_closure" {
     GHC.Event.Manager.$wxs_closure:
         const GHC.Event.Manager.$wxs_info;
 },
 GHC.Event.Manager.$wxs_entry() //  [R2]
         { []
         }
     {offset
       caGp7: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGp8; else goto caGp9;
       caGp8: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$wxs_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGp9: // global
           if (R2 == 1) goto caGp6; else goto caGp5;
       caGp6: // global
           I64[Sp - 8] = block_caGpo_info;
           Sp = Sp - 8;
           call x_raAue_entry() args: 8, res: 8, upd: 8;
       caGp5: // global
           I64[Sp - 16] = block_caGpb_info;
           I64[Sp - 8] = R2;
           Sp = Sp - 16;
           call x_raAue_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$wxs_info" {
     GHC.Event.Manager.$wxs_info:
         const GHC.Event.Manager.$wxs_entry;
         const 0;
         const 14;
         const 8589934596;
 },
 _caGpo() //  [R1]
         { []
         }
     {offset
       caGpo: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGpt; else goto caGps;
       caGpt: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGps: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = GHC.Types.[]_closure+1;
           R1 = Hp - 14;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGpo_info" {
     block_caGpo_info:
         const _caGpo;
         const 0;
         const 30;
 },
 _caGpb() //  [R1]
         { []
         }
     {offset
       caGpb: // global
           I64[Sp] = block_caGpg_info;
           R2 = I64[Sp + 8] - 1;
           P64[Sp + 8] = R1;
           call GHC.Event.Manager.$wxs_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGpb_info" {
     block_caGpb_info:
         const _caGpb;
         const 65;
         const 30;
 },
 _caGpg() //  [R1]
         { []
         }
     {offset
       caGpg: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGpm; else goto caGpl;
       caGpm: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGpl: // global
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = P64[Sp + 8];
           P64[Hp] = R1;
           R1 = Hp - 14;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGpg_info" {
     block_caGpg_info:
         const _caGpg;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.331481128 UTC

[section ""data" . GHC.Event.Manager.new3_closure" {
     GHC.Event.Manager.new3_closure:
         const GHC.Event.Manager.new3_info;
         const 0;
 },
 GHC.Event.Manager.new3_entry() //  [R2]
         { []
         }
     {offset
       caGpX: // global
           R3 = R2;
           R2 = lvl7_raAud_closure;
           call $wlvl_raAub_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new3_info" {
     GHC.Event.Manager.new3_info:
         const GHC.Event.Manager.new3_entry;
         const 0;
         const 12884901902;
         const 4294967300;
         const SaFU9_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.34265674 UTC

[section ""data" . GHC.Event.Manager.new2_closure" {
     GHC.Event.Manager.new2_closure:
         const GHC.Event.Manager.new2_info;
         const 0;
 },
 sat_saFuK_entry() //  [R1]
         { []
         }
     {offset
       caGqs: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGqt; else goto caGqu;
       caGqt: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caGqu: // global
           I64[Sp - 24] = block_caGqj_info;
           R2 = GHC.Event.Manager.new5_closure+1;
           _saFuh::P64 = P64[R1 + 7];
           _saFuo::P64 = P64[R1 + 15];
           R1 = P64[R1 + 23];
           P64[Sp - 16] = _saFuh::P64;
           P64[Sp - 8] = _saFuo::P64;
           Sp = Sp - 24;
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFuK_info" {
     sat_saFuK_info:
         const sat_saFuK_entry;
         const 3;
         const 8;
         const 4294967299;
 },
 _caGqj() //  [R1]
         { []
         }
     {offset
       caGqj: // global
           I64[Sp] = block_caGql_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaGqL; else goto caGqm;
       uaGqL: // global
           call _caGql(R1) args: 0, res: 0, upd: 0;
       caGqm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqj_info" {
     block_caGqj_info:
         const _caGqj;
         const 2;
         const 30;
 },
 _caGql() //  [R1]
         { []
         }
     {offset
       caGql: // global
           if (R1 & 7 == 5) goto caGqq; else goto caGqp;
       caGqq: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caGqp: // global
           _saFuh::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGqy_info;
           R1 = _saFuh::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaGqM; else goto caGqz;
       uaGqM: // global
           call _caGqy(R1) args: 0, res: 0, upd: 0;
       caGqz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGql_info" {
     block_caGql_info:
         const _caGql;
         const 2;
         const 30;
 },
 _caGqy() //  [R1]
         { []
         }
     {offset
       caGqy: // global
           I64[Sp] = block_caGqD_info;
           R2 = P64[R1 + 7];
           R1 = P64[R1 + 39];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqy_info" {
     block_caGqy_info:
         const _caGqy;
         const 1;
         const 30;
 },
 _caGqD() //  []
         { []
         }
     {offset
       caGqD: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Control.closeControl1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqD_info" {
     block_caGqD_info:
         const _caGqD;
         const 1;
         const 30;
 },
 GHC.Event.Manager.new2_entry() //  [R2]
         { []
         }
     {offset
       caGqX: // global
           if ((Sp + -136) < SpLim) (likely: False) goto caGrf; else goto caGrg;
       caGrf: // global
           R2 = R2;
           R1 = GHC.Event.Manager.new2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGrg: // global
           I64[Sp - 16] = block_caGq8_info;
           _saFuh::P64 = R2;
           R2 = 32;
           P64[Sp - 8] = _saFuh::P64;
           Sp = Sp - 16;
           call GHC.Event.Manager.$wxs_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new2_info" {
     GHC.Event.Manager.new2_info:
         const GHC.Event.Manager.new2_entry;
         const 0;
         const 270582939662;
         const 8589934597;
         const SaFU9_srt+192;
 },
 _caGq8() //  [R1]
         { []
         }
     {offset
       caGq8: // global
           I64[Sp - 8] = block_caGqa_info;
           R2 = GHC.Types.False_closure+1;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call GHC.Event.Control.newControl1_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGq8_info" {
     block_caGq8_info:
         const _caGq8;
         const 1;
         const 201863462942;
         const SaFU9_srt+192;
 },
 _caGqa() //  [R1]
         { []
         }
     {offset
       caGqa: // global
           I64[Sp - 8] = block_caGqc_info;
           _saFuo::P64 = R1;
           R1 = GHC.Event.Manager.Created_closure+1;
           P64[Sp] = _saFuo::P64;
           Sp = Sp - 8;
           call stg_newMutVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqa_info" {
     block_caGqa_info:
         const _caGqa;
         const 2;
         const 167503724574;
         const SaFU9_srt+192;
 },
 _caGqc() //  [R1]
         { []
         }
     {offset
       caGqc: // global
           Hp = Hp + 72;
           if (Hp > HpLim) (likely: False) goto caGrl; else goto caGrk;
       caGrl: // global
           HpAlloc = 72;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGrk: // global
           I64[Hp - 64] = stg_ARR_WORDS_info;
           I64[Hp - 56] = 8;
           I64[Hp - 40] = sat_saFuK_info;
           P64[Hp - 32] = P64[Sp + 24];
           P64[Hp - 24] = P64[Sp + 8];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = GHC.STRef.STRef_con_info;
           P64[Hp] = R1;
           I64[Sp - 16] = block_caGqO_info;
           R3 = Hp - 39;
           R2 = Hp - 7;
           _saFur::P64 = R1;
           R1 = R1;
           P64[Sp - 8] = Hp - 64;
           P64[Sp] = _saFur::P64;
           Sp = Sp - 16;
           call stg_mkWeak#(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqc_info" {
     block_caGqc_info:
         const _caGqc;
         const 3;
         const 167503724574;
         const SaFU9_srt+192;
 },
 _caGqO() //  []
         { []
         }
     {offset
       caGqO: // global
           I64[Sp] = block_caGqQ_info;
           call stg_newMVar#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqO_info" {
     block_caGqO_info:
         const _caGqO;
         const 5;
         const 167503724574;
         const SaFU9_srt+192;
 },
 _caGqQ() //  [R1]
         { []
         }
     {offset
       caGqQ: // global
           I64[Sp - 8] = block_caGqS_info;
           R2 = GHC.Tuple.()_closure+1;
           _saFuQ::P64 = R1;
           R1 = R1;
           P64[Sp] = _saFuQ::P64;
           Sp = Sp - 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqQ_info" {
     block_caGqQ_info:
         const _caGqQ;
         const 5;
         const 167503724574;
         const SaFU9_srt+192;
 },
 _caGqS() //  []
         { []
         }
     {offset
       caGqS: // global
           I64[Sp] = block_caGqU_info;
           R1 = P64[Sp + 48];
           if (R1 & 7 != 0) goto uaGsL; else goto caGqV;
       uaGsL: // global
           call _caGqU(R1) args: 0, res: 0, upd: 0;
       caGqV: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqS_info" {
     block_caGqS_info:
         const _caGqS;
         const 6;
         const 167503724574;
         const SaFU9_srt+192;
 },
 _caGqU() //  [R1]
         { []
         }
     {offset
       caGqU: // global
           I64[Sp - 16] = block_caGr0_info;
           R2 = GHC.Arr.arrEleBottom_closure;
           _saFuS::P64 = R1;
           _saFuT::P64 = P64[R1 + 7];
           _saFuV::P64 = P64[R1 + 23];
           R1 = 32;
           P64[Sp - 8] = _saFuV::P64;
           P64[Sp] = _saFuT::P64;
           P64[Sp + 48] = _saFuS::P64;
           Sp = Sp - 16;
           call stg_newArray#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGqU_info" {
     block_caGqU_info:
         const _caGqU;
         const 2054;
         const 167503724574;
         const SaFU9_srt+192;
 },
 _caGr0() //  [R1]
         { []
         }
     {offset
       caGr0: // global
           I64[Sp - 8] = 0;
           P64[Sp] = P64[Sp + 56];
           P64[Sp + 56] = R1;
           Sp = Sp - 8;
           call _caGrx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGr0_info" {
     block_caGr0_info:
         const _caGr0;
         const 8;
         const 81604378654;
         const SaFU9_srt+200;
 },
 _caGrx() //  []
         { []
         }
     {offset
       caGrx: // global
           I64[Sp - 8] = block_caGrA_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGsP; else goto caGrC;
       uaGsP: // global
           call _caGrA(R1) args: 0, res: 0, upd: 0;
       caGrC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caGrA() //  [R1]
         { []
         }
     {offset
       caGrA: // global
           if (R1 & 7 == 1) goto uaGsI; else goto caGrQ;
       uaGsI: // global
           Sp = Sp + 16;
           goto uaGsR;
       caGrQ: // global
           _saFv0::P64 = P64[Sp + 72];
           _saFv9::I64 = I64[Sp + 8];
           _saFvc::P64 = P64[R1 + 6];
           _saFvd::P64 = P64[R1 + 14];
           call MO_WriteBarrier();
           P64[(_saFv0::P64 + 24) + (_saFv9::I64 << 3)] = _saFvc::P64;
           I64[_saFv0::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saFv0::P64 + 24) + ((I64[_saFv0::P64 + 8] << 3) + (_saFv9::I64 >> 7))] = 1 :: W8;
           if (_saFv9::I64 == 31) goto uaGsJ; else goto caGrO;
       uaGsJ: // global
           Sp = Sp + 16;
           goto uaGsR;
       uaGsR: // global
           call _caGrs() args: 0, res: 0, upd: 0;
       caGrO: // global
           P64[Sp + 16] = _saFvd::P64;
           I64[Sp + 8] = _saFv9::I64 + 1;
           Sp = Sp + 8;
           call _caGrx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGrA_info" {
     block_caGrA_info:
         const _caGrA;
         const 202;
         const 81604378654;
         const SaFU9_srt+200;
 },
 _caGrs() //  []
         { []
         }
     {offset
       caGrs: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caGrw; else goto caGrv;
       caGrw: // global
           HpAlloc = 40;
           I64[Sp] = block_caGrs_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caGrv: // global
           _saFv0::P64 = P64[Sp + 56];
           I64[_saFv0::P64] = stg_MUT_ARR_PTRS_FROZEN0_info;
           I64[Hp - 32] = GHC.Arr.Array_con_info;
           P64[Hp - 24] = GHC.Event.Manager.$fShowFdKey6_closure+1;
           P64[Hp - 16] = GHC.Event.Manager.new4_closure+1;
           P64[Hp - 8] = _saFv0::P64;
           I64[Hp] = 32;
           I64[Sp] = block_caGr9_info;
           R1 = Hp - 31;
           if (R1 & 7 != 0) goto uaGsO; else goto caGra;
       uaGsO: // global
           call _caGr9(R1) args: 0, res: 0, upd: 0;
       caGra: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGrs_info" {
     block_caGrs_info:
         const _caGrs;
         const 8;
         const 81604378654;
         const SaFU9_srt+200;
 },
 _caGr9() //  [R1]
         { []
         }
     {offset
       caGr9: // global
           I64[Sp - 16] = block_caGre_info;
           _saFvl::P64 = P64[R1 + 7];
           _saFvm::P64 = P64[R1 + 15];
           _saFvo::P64 = P64[R1 + 23];
           _saFvn::I64 = I64[R1 + 31];
           R1 = P64[Sp + 48];
           P64[Sp - 8] = _saFvo::P64;
           I64[Sp] = _saFvn::I64;
           P64[Sp + 48] = _saFvm::P64;
           P64[Sp + 56] = _saFvl::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGsN; else goto caGrT;
       uaGsN: // global
           call _caGre(R1) args: 0, res: 0, upd: 0;
       caGrT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGr9_info" {
     block_caGr9_info:
         const _caGr9;
         const 4104;
         const 81604378654;
         const SaFU9_srt+200;
 },
 _caGre() //  [R1]
         { []
         }
     {offset
       caGre: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGs3; else goto caGs2;
       caGs3: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGs2: // global
           _saFvt::P64 = P64[R1 + 7];
           _saFvu::P64 = P64[R1 + 15];
           _saFvq::I64 = I64[R1 + 23];
           _saFvr::I64 = I64[R1 + 31];
           _saFvs::I64 = I64[R1 + 39];
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = _saFvq::I64;
           I64[Sp - 40] = block_caGrY_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 7;
           R2 = P64[Sp + 32];
           R1 = P64[Sp + 24];
           I64[Sp - 48] = stg_ap_v_info;
           I64[Sp - 32] = _saFvr::I64;
           I64[Sp - 24] = _saFvs::I64;
           P64[Sp - 16] = _saFvt::P64;
           P64[Sp - 8] = _saFvu::P64;
           I64[Sp] = _saFvq::I64;
           Sp = Sp - 48;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGre_info" {
     block_caGre_info:
         const _caGre;
         const 138;
         const 81604378654;
         const SaFU9_srt+200;
 },
 _caGrY() //  [R1]
         { []
         }
     {offset
       caGrY: // global
           I64[Sp] = block_caGs0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaGsT; else goto caGs5;
       uaGsT: // global
           call _caGs0(R1) args: 0, res: 0, upd: 0;
       caGs5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGrY_info" {
     block_caGrY_info:
         const _caGrY;
         const 5327;
         const 81604378654;
         const SaFU9_srt+200;
 },
 _caGs0() //  [R1]
         { []
         }
     {offset
       caGs0: // global
           if (R1 & 7 == 1) goto caGsb; else goto caGsi;
       caGsb: // global
           R2 = I64[Sp + 40];
           Sp = Sp + 128;
           call GHC.Event.Manager.new3_entry(R2) args: 8, res: 0, upd: 8;
       caGsi: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGsl; else goto caGsk;
       caGsl: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGsk: // global
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_caGsf_info;
           R5 = GHC.Event.Internal.evtRead_closure;
           R4 = GHC.Event.Internal.evtNothing_closure;
           R3 = Hp - 7;
           R2 = P64[Sp + 72];
           R1 = P64[Sp + 64];
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGs0_info" {
     block_caGs0_info:
         const _caGs0;
         const 5327;
         const 81604378654;
         const SaFU9_srt+200;
 },
 _caGsf() //  [R1]
         { []
         }
     {offset
       caGsf: // global
           I64[Sp] = block_caGsh_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaGsU; else goto caGsn;
       uaGsU: // global
           call _caGsh(R1) args: 0, res: 0, upd: 0;
       caGsn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGsf_info" {
     block_caGsf_info:
         const _caGsf;
         const 29903;
         const 4294967326;
         const SaFU9_srt+232;
 },
 _caGsh() //  [R1]
         { []
         }
     {offset
       caGsh: // global
           _saFvs::I64 = I64[Sp + 16];
           if (R1 & 7 == 1) goto caGst; else goto caGsx;
       caGst: // global
           R2 = _saFvs::I64;
           Sp = Sp + 128;
           call GHC.Event.Manager.new3_entry(R2) args: 8, res: 0, upd: 8;
       caGsx: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caGsA; else goto caGsz;
       caGsA: // global
           HpAlloc = 112;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGsz: // global
           I64[Hp - 104] = GHC.Event.Manager.EventManager_con_info;
           P64[Hp - 96] = P64[Sp + 120];
           P64[Hp - 88] = P64[Sp + 112];
           P64[Hp - 80] = P64[Sp + 104];
           P64[Hp - 72] = P64[Sp + 48];
           P64[Hp - 64] = P64[Sp + 96];
           P64[Hp - 56] = P64[Sp + 88];
           P64[Hp - 48] = P64[Sp + 24];
           P64[Hp - 40] = P64[Sp + 32];
           P64[Hp - 32] = P64[Sp + 80];
           I64[Hp - 24] = I64[Sp + 56];
           I64[Hp - 16] = I64[Sp + 40];
           I64[Hp - 8] = I64[Sp + 8];
           I64[Hp] = _saFvs::I64;
           R1 = Hp - 103;
           Sp = Sp + 128;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGsh_info" {
     block_caGsh_info:
         const _caGsh;
         const 29903;
         const 4294967326;
         const SaFU9_srt+232;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.382209934 UTC

[section ""data" . GHC.Event.Manager.newWith_closure" {
     GHC.Event.Manager.newWith_closure:
         const GHC.Event.Manager.newWith_info;
         const 0;
 },
 GHC.Event.Manager.newWith_entry() //  [R2]
         { []
         }
     {offset
       caGvm: // global
           R2 = R2;
           call GHC.Event.Manager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.newWith_info" {
     GHC.Event.Manager.newWith_info:
         const GHC.Event.Manager.newWith_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaFU9_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.385823522 UTC

[section ""data" . GHC.Event.Manager.new1_closure" {
     GHC.Event.Manager.new1_closure:
         const GHC.Event.Manager.new1_info;
         const 0;
 },
 GHC.Event.Manager.new1_entry() //  []
         { []
         }
     {offset
       caGvz: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caGvA; else goto caGvB;
       caGvA: // global
           R1 = GHC.Event.Manager.new1_closure;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caGvB: // global
           I64[Sp - 8] = block_caGvx_info;
           Sp = Sp - 8;
           call GHC.Event.EPoll.new1_entry() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new1_info" {
     GHC.Event.Manager.new1_info:
         const GHC.Event.Manager.new1_entry;
         const 0;
         const 2814754062073870;
         const 4294967299;
         const SaFU9_srt+88;
 },
 _caGvx() //  [R1]
         { []
         }
     {offset
       caGvx: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.Manager.new2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGvx_info" {
     block_caGvx_info:
         const _caGvx;
         const 0;
         const 4294967326;
         const SaFU9_srt+224;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.390756305 UTC

[section ""data" . GHC.Event.Manager.new_closure" {
     GHC.Event.Manager.new_closure:
         const GHC.Event.Manager.new_info;
         const 0;
 },
 GHC.Event.Manager.new_entry() //  []
         { []
         }
     {offset
       caGvQ: // global
           call GHC.Event.Manager.new1_entry() args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.new_info" {
     GHC.Event.Manager.new_info:
         const GHC.Event.Manager.new_entry;
         const 0;
         const 4294967310;
         const 4294967299;
         const SaFU9_srt+240;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.395386583 UTC

[section ""data" . GHC.Event.Manager.closeFd_3_closure" {
     GHC.Event.Manager.closeFd_3_closure:
         const GHC.Event.Manager.closeFd_3_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.closeFd_3_entry() //  [R1]
         { []
         }
     {offset
       caGw5: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGwd; else goto caGwe;
       caGwd: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGwe: // global
           (_caGw0::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caGw0::I64 == 0) goto caGw2; else goto caGw1;
       caGw2: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caGw1: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caGw0::I64;
           I64[Sp - 24] = block_caGw3_info;
           R3 = GHC.Types.[]_closure+1;
           R2 = GHC.Event.Manager.fdEvents_closure+1;
           Sp = Sp - 24;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_3_info" {
     GHC.Event.Manager.closeFd_3_info:
         const GHC.Event.Manager.closeFd_3_entry;
         const 0;
         const 21;
 },
 _caGw3() //  [R1]
         { []
         }
     {offset
       caGw3: // global
           I64[Sp] = block_caGw8_info;
           R2 = R1;
           call GHC.Event.Internal.$wgo1_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . block_caGw3_info" {
     block_caGw3_info:
         const _caGw3;
         const 0;
         const 30;
 },
 _caGw8() //  [R1]
         { []
         }
     {offset
       caGw8: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGwi; else goto caGwh;
       caGwi: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 24;
       caGwh: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caGw8_info" {
     block_caGw8_info:
         const _caGw8;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.404203322 UTC

[section ""data" . GHC.Event.Manager.$weventsOf_closure" {
     GHC.Event.Manager.$weventsOf_closure:
         const GHC.Event.Manager.$weventsOf_info;
         const 0;
 },
 GHC.Event.Manager.$weventsOf_entry() //  [R2]
         { []
         }
     {offset
       caGwN: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGwO; else goto caGwP;
       caGwO: // global
           R2 = R2;
           R1 = GHC.Event.Manager.$weventsOf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGwP: // global
           I64[Sp - 8] = block_caGwG_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGxs; else goto caGwH;
       uaGxs: // global
           call _caGwG(R1) args: 0, res: 0, upd: 0;
       caGwH: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$weventsOf_info" {
     GHC.Event.Manager.$weventsOf_info:
         const GHC.Event.Manager.$weventsOf_entry;
         const 0;
         const 12884901902;
         const 4294967301;
         const SaFU9_srt+248;
 },
 _caGwG() //  [R1]
         { []
         }
     {offset
       caGwG: // global
           if (R1 & 7 == 1) goto caGwK; else goto caGwL;
       caGwK: // global
           I64[Sp] = block_caGwS_info;
           R1 = GHC.Event.Manager.closeFd_3_closure;
           if (R1 & 7 != 0) goto uaGxq; else goto caGwU;
       uaGxq: // global
           call _caGwS(R1) args: 0, res: 0, upd: 0;
       caGwU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caGwL: // global
           I64[Sp - 16] = block_caGx1_info;
           _saFvP::P64 = R1;
           _saFvS::P64 = P64[R1 + 6];
           R1 = P64[R1 + 14];
           P64[Sp - 8] = _saFvS::P64;
           P64[Sp] = _saFvP::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGxr; else goto caGx3;
       uaGxr: // global
           call _caGx1(R1) args: 0, res: 0, upd: 0;
       caGx3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGwG_info" {
     block_caGwG_info:
         const _caGwG;
         const 0;
         const 4294967326;
         const SaFU9_srt+256;
 },
 _caGwS() //  [R1]
         { []
         }
     {offset
       caGwS: // global
           R1 = I64[R1 + 7];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGwS_info" {
     block_caGwS_info:
         const _caGwS;
         const 0;
         const 30;
 },
 _caGx1() //  [R1]
         { []
         }
     {offset
       caGx1: // global
           if (R1 & 7 == 1) goto caGxa; else goto caGxk;
       caGxa: // global
           I64[Sp + 16] = block_caGx7_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaGxt; else goto caGxb;
       uaGxt: // global
           call _caGx7(R1) args: 0, res: 0, upd: 0;
       caGxb: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caGxk: // global
           _saFvP::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caGxi_info;
           R3 = _saFvP::P64;
           R2 = GHC.Event.Manager.fdEvents_closure+1;
           Sp = Sp + 16;
           call GHC.Base.map_entry(R3, R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGx1_info" {
     block_caGx1_info:
         const _caGx1;
         const 2;
         const 30;
 },
 _caGx7() //  [R1]
         { []
         }
     {offset
       caGx7: // global
           R1 = I64[R1 + 31];
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGx7_info" {
     block_caGx7_info:
         const _caGx7;
         const 0;
         const 30;
 },
 _caGxi() //  [R1]
         { []
         }
     {offset
       caGxi: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.Internal.$wgo1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGxi_info" {
     block_caGxi_info:
         const _caGxi;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.41636151 UTC

[section ""data" . GHC.Event.Manager.eventsOf_closure" {
     GHC.Event.Manager.eventsOf_closure:
         const GHC.Event.Manager.eventsOf_info;
         const 0;
 },
 GHC.Event.Manager.eventsOf_entry() //  [R2]
         { []
         }
     {offset
       caGy9: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caGyd; else goto caGye;
       caGyd: // global
           R2 = R2;
           R1 = GHC.Event.Manager.eventsOf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGye: // global
           I64[Sp - 8] = block_caGy7_info;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.eventsOf_info" {
     GHC.Event.Manager.eventsOf_info:
         const GHC.Event.Manager.eventsOf_entry;
         const 0;
         const 21474836494;
         const 4294967301;
         const SaFU9_srt+248;
 },
 _caGy7() //  [R1]
         { []
         }
     {offset
       caGy7: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGyh; else goto caGyg;
       caGyh: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caGyg: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = R1;
           R1 = Hp - 7;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGy7_info" {
     block_caGy7_info:
         const _caGy7;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.423168032 UTC

[section ""data" . GHC.Event.Manager.closeFd_2_closure" {
     GHC.Event.Manager.closeFd_2_closure:
         const GHC.Event.Manager.closeFd_2_info;
 },
 GHC.Event.Manager.closeFd_2_entry() //  [R2]
         { []
         }
     {offset
       caGyE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGyF; else goto uaGz6;
       caGyF: // global
           R2 = R2;
           R1 = GHC.Event.Manager.closeFd_2_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uaGz6: // global
           P64[Sp - 8] = R2;
           Sp = Sp - 8;
           call _caGyu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_2_info" {
     GHC.Event.Manager.closeFd_2_info:
         const GHC.Event.Manager.closeFd_2_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _caGyu() //  []
         { []
         }
     {offset
       caGyu: // global
           _saFw5::P64 = P64[Sp];
           I64[Sp] = block_caGyx_info;
           R1 = _saFw5::P64;
           if (R1 & 7 != 0) goto uaGz8; else goto caGyy;
       uaGz8: // global
           call _caGyx(R1) args: 0, res: 0, upd: 0;
       caGyy: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caGyx() //  [R1]
         { []
         }
     {offset
       caGyx: // global
           if (R1 & 7 == 1) goto caGyB; else goto caGyC;
       caGyB: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caGyC: // global
           I64[Sp - 8] = block_caGyM_info;
           _saFw9::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saFw9::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGz9; else goto caGyO;
       uaGz9: // global
           call _caGyM(R1) args: 0, res: 0, upd: 0;
       caGyO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGyx_info" {
     block_caGyx_info:
         const _caGyx;
         const 0;
         const 30;
 },
 _caGyM() //  [R1]
         { []
         }
     {offset
       caGyM: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caGyU; else goto caGyT;
       caGyU: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGyT: // global
           _saFwe::P64 = P64[R1 + 7];
           _saFwb::I64 = I64[R1 + 15];
           _saFwc::I64 = I64[R1 + 23];
           _saFwh::I64 = I64[R1 + 31] & 7 | 4;
           I64[Hp - 32] = GHC.Types.I#_con_info;
           I64[Hp - 24] = _saFwh::I64;
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saFwb::I64;
           I64[Hp] = _saFwc::I64;
           I64[Sp] = block_caGz3_info;
           R3 = Hp - 31;
           R2 = Hp - 15;
           R1 = _saFwe::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGyM_info" {
     block_caGyM_info:
         const _caGyM;
         const 1;
         const 30;
 },
 _caGz3() //  []
         { []
         }
     {offset
       caGz3: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caGyu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGz3_info" {
     block_caGz3_info:
         const _caGz3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.448912684 UTC

[section ""data" . GHC.Event.Manager.closeFd1_closure" {
     GHC.Event.Manager.closeFd1_closure:
         const GHC.Event.Manager.closeFd1_info;
         const 0;
 },
 $wgo_saFxd_entry() //  [R1, R2]
         { []
         }
     {offset
       caGAU: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGAV; else goto caGAW;
       caGAV: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGAW: // global
           I64[Sp - 24] = block_caGAN_info;
           _saFxd::P64 = R1;
           _saFwM::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saFwM::I64;
           P64[Sp - 8] = _saFxd::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaGBj; else goto caGAO;
       uaGBj: // global
           call _caGAN(R1) args: 0, res: 0, upd: 0;
       caGAO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saFxd_info" {
     $wgo_saFxd_info:
         const $wgo_saFxd_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caGAN() //  [R1]
         { []
         }
     {offset
       caGAN: // global
           if (R1 & 7 == 1) goto caGAR; else goto caGAS;
       caGAR: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGAS: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGB4; else goto caGB3;
       caGB4: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGB3: // global
           _saFxh::P64 = P64[R1 + 6];
           _saFxi::P64 = P64[R1 + 14];
           _saFxg::I64 = I64[R1 + 22];
           if (_saFxg::I64 == I64[Sp + 8]) goto caGBi; else goto caGBc;
       caGBi: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFxh::P64;
           R3 = _saFxi::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGBc: // global
           Hp = Hp - 16;
           I64[Sp] = block_caGB8_info;
           R2 = _saFxi::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saFxh::P64;
           I64[Sp + 16] = _saFxg::I64;
           call $wgo_saFxd_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGAN_info" {
     block_caGAN_info:
         const _caGAN;
         const 66;
         const 30;
 },
 _caGB8() //  [R1, R2, R3]
         { []
         }
     {offset
       caGB8: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caGBf; else goto caGBe;
       caGBf: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caGBe: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGB8_info" {
     block_caGB8_info:
         const _caGB8;
         const 130;
         const 30;
 },
 $wio_saFwX_entry() //  [R1, R2]
         { []
         }
     {offset
       caGBk: // global
           if ((Sp + -80) < SpLim) (likely: False) goto caGBl; else goto caGBm;
       caGBl: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGBm: // global
           I64[Sp - 40] = block_caGAu_info;
           _saFwn::P64 = P64[R1 + 6];
           _saFwu::P64 = P64[R1 + 14];
           _saFwL::P64 = P64[R1 + 22];
           _saFwM::I64 = I64[R1 + 30];
           R1 = P64[R2 + 8];
           P64[Sp - 32] = _saFwn::P64;
           P64[Sp - 24] = _saFwu::P64;
           P64[Sp - 16] = _saFwL::P64;
           I64[Sp - 8] = _saFwM::I64;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaGCY; else goto caGAv;
       uaGCY: // global
           call _caGAu(R1) args: 0, res: 0, upd: 0;
       caGAv: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saFwX_info" {
     $wio_saFwX_info:
         const $wio_saFwX_entry;
         const 4294967299;
         const 279172874248;
         const 8589934597;
         const SaFU9_srt+200;
 },
 _caGAu() //  [R1]
         { []
         }
     {offset
       caGAu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGBp; else goto caGBo;
       caGBp: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGBo: // global
           _saFwM::I64 = I64[Sp + 32];
           _saFx4::P64 = P64[R1 + 7];
           _saFx6::P64 = P64[R1 + 15];
           _saFx5::I64 = I64[R1 + 23];
           _saFx7::I64 = _saFwM::I64 & (I64[_saFx4::P64 + 8] - 1);
           _saFxc::P64 = P64[(_saFx4::P64 + 24) + (_saFx7::I64 << 3)];
           I64[Hp - 8] = $wgo_saFxd_info;
           I64[Hp] = _saFwM::I64;
           I64[Sp - 24] = block_caGBq_info;
           R2 = _saFxc::P64;
           R1 = Hp - 7;
           P64[Sp - 16] = _saFx6::P64;
           I64[Sp - 8] = _saFx7::I64;
           I64[Sp] = _saFx5::I64;
           P64[Sp + 32] = _saFx4::P64;
           Sp = Sp - 24;
           call $wgo_saFxd_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGAu_info" {
     block_caGAu_info:
         const _caGAu;
         const 516;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGBq() //  [R1, R2, R3]
         { []
         }
     {offset
       caGBq: // global
           I64[Sp - 16] = block_caGBu_info;
           _saFxr::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saFxr::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGCZ; else goto caGCr;
       uaGCZ: // global
           call _caGBu(R1) args: 0, res: 0, upd: 0;
       caGCr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGBq_info" {
     block_caGBq_info:
         const _caGBq;
         const 391;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGBu() //  [R1]
         { []
         }
     {offset
       caGBu: // global
           if (R1 & 7 == 1) goto caGCx; else goto caGCC;
       caGCx: // global
           P64[Sp + 72] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saFxu() args: 0, res: 0, upd: 0;
       caGCC: // global
           _saFx4::P64 = P64[Sp + 72];
           _saFx7::I64 = I64[Sp + 32];
           _saFxr::P64 = P64[Sp + 16];
           _saFxt::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saFx4::P64 + 24) + (_saFx7::I64 << 3)] = _saFxt::P64;
           I64[_saFx4::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saFx4::P64 + 24) + ((I64[_saFx4::P64 + 8] << 3) + (_saFx7::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caGCA_info;
           _saFxU::P64 = R1;
           R1 = _saFxr::P64;
           P64[Sp + 72] = _saFxU::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaGD0; else goto caGCD;
       uaGD0: // global
           call _caGCA(R1) args: 0, res: 0, upd: 0;
       caGCD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGBu_info" {
     block_caGBu_info:
         const _caGBu;
         const 1545;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGCA() //  [R1]
         { []
         }
     {offset
       caGCA: // global
           _saFxU::P64 = P64[Sp + 56];
           if (R1 & 7 == 1) goto caGCJ; else goto caGCN;
       caGCJ: // global
           P64[Sp + 56] = _saFxU::P64;
           Sp = Sp + 32;
           goto uaGD4;
       caGCN: // global
           _saFx5::I64 = I64[Sp + 24];
           _saFx6::P64 = P64[Sp + 8];
           I64[_saFx5::I64] = I64[_saFx5::I64] - 1;
           call MO_Touch(_saFx6::P64);
           P64[Sp + 56] = _saFxU::P64;
           Sp = Sp + 32;
           goto uaGD4;
       uaGD4: // global
           call _saFxu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGCA_info" {
     block_caGCA_info:
         const _caGCA;
         const 391;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _saFxu() //  []
         { []
         }
     {offset
       saFxu: // global
           I64[Sp - 8] = block_caGBz_info;
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGD5; else goto caGBB;
       uaGD5: // global
           call _caGBz(R1) args: 0, res: 0, upd: 0;
       caGBB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caGBz() //  [R1]
         { []
         }
     {offset
       caGBz: // global
           if (R1 & 7 == 1) goto caGBI; else goto caGBP;
       caGBI: // global
           I64[Sp + 32] = block_caGBF_info;
           R2 = P64[Sp + 24];
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
       caGBP: // global
           I64[Sp] = block_caGBN_info;
           _saFxB::P64 = P64[R1 + 6];
           R2 = _saFxB::P64;
           P64[Sp + 32] = _saFxB::P64;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGBz_info" {
     block_caGBz_info:
         const _caGBz;
         const 516;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGBF() //  []
         { []
         }
     {offset
       caGBF: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGBF_info" {
     block_caGBF_info:
         const _caGBF;
         const 0;
         const 30;
 },
 _caGBN() //  [R1]
         { []
         }
     {offset
       caGBN: // global
           _saFxD::I64 = R1 & 7;
           if (_saFxD::I64 != 0) goto caGCa; else goto caGCn;
       caGCa: // global
           I64[Sp] = block_caGC0_info;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saFxD::I64;
           if (R1 & 7 != 0) goto uaGD2; else goto caGC1;
       uaGD2: // global
           call _caGC0(R1) args: 0, res: 0, upd: 0;
       caGC1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caGCn: // global
           _saFwL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caGCm_info;
           R2 = _saFwL::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGBN_info" {
     block_caGBN_info:
         const _caGBN;
         const 4;
         const 4294967326;
         const SaFU9_srt+200;
 },
 _caGC0() //  [R1]
         { []
         }
     {offset
       caGC0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGCe; else goto caGCd;
       caGCe: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGCd: // global
           _saFxF::P64 = P64[R1 + 7];
           _saFxH::P64 = P64[R1 + 23];
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 16];
           I64[Sp] = block_caGC6_info;
           R5 = GHC.Event.Internal.evtNothing_closure;
           R4 = Hp - 7;
           R3 = P64[Sp + 24];
           R2 = _saFxF::P64;
           R1 = _saFxH::P64;
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGC0_info" {
     block_caGC0_info:
         const _caGC0;
         const 132;
         const 4294967326;
         const SaFU9_srt+200;
 },
 _caGC6() //  []
         { []
         }
     {offset
       caGC6: // global
           _saFwL::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caGC8_info;
           R2 = _saFwL::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGC6_info" {
     block_caGC6_info:
         const _caGC6;
         const 132;
         const 30;
 },
 _caGC8() //  []
         { []
         }
     {offset
       caGC8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGC8_info" {
     block_caGC8_info:
         const _caGC8;
         const 1;
         const 30;
 },
 _caGCm() //  []
         { []
         }
     {offset
       caGCm: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGCm_info" {
     block_caGCm_info:
         const _caGCm;
         const 1;
         const 30;
 },
 io_saFy4_entry() //  [R1, R2]
         { []
         }
     {offset
       caGDe: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGDf; else goto caGDg;
       caGDf: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGDg: // global
           I64[Sp - 16] = block_caGDb_info;
           _saFwX::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saFwX::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGDk; else goto caGDc;
       uaGDk: // global
           call _caGDb(R1) args: 0, res: 0, upd: 0;
       caGDc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saFy4_info" {
     io_saFy4_info:
         const io_saFy4_entry;
         const 1;
         const 279172874249;
         const 8589934597;
         const SaFU9_srt+200;
 },
 _caGDb() //  [R1]
         { []
         }
     {offset
       caGDb: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saFwX_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGDb_info" {
     block_caGDb_info:
         const _caGDb;
         const 1;
         const 279172874270;
         const SaFU9_srt+200;
 },
 sat_saFyi_entry() //  [R1, R2]
         { []
         }
     {offset
       caGDw: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGDx; else goto caGDy;
       caGDx: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGDy: // global
           I64[Sp - 16] = block_caGDu_info;
           _saFyf::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFyf::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyi_info" {
     sat_saFyi_info:
         const sat_saFyi_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caGDu() //  []
         { []
         }
     {offset
       caGDu: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGDu_info" {
     block_caGDu_info:
         const _caGDu;
         const 1;
         const 30;
 },
 sat_saFyd_entry() //  [R1]
         { []
         }
     {offset
       caGDF: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFy4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyd_info" {
     sat_saFyd_info:
         const sat_saFyd_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaFU9_srt+200;
 },
 sat_saFye_entry() //  [R1]
         { []
         }
     {offset
       caGDN: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFye_info" {
     sat_saFye_info:
         const sat_saFye_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFyw_entry() //  [R1, R2]
         { []
         }
     {offset
       caGE5: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGE6; else goto caGE7;
       caGE6: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGE7: // global
           I64[Sp - 16] = block_caGE3_info;
           _saFyt::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFyt::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyw_info" {
     sat_saFyw_info:
         const sat_saFyw_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caGE3() //  []
         { []
         }
     {offset
       caGE3: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGE3_info" {
     block_caGE3_info:
         const _caGE3;
         const 1;
         const 30;
 },
 sat_saFyr_entry() //  [R1]
         { []
         }
     {offset
       caGEe: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFy4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyr_info" {
     sat_saFyr_info:
         const sat_saFyr_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaFU9_srt+200;
 },
 sat_saFys_entry() //  [R1]
         { []
         }
     {offset
       caGEm: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFys_info" {
     sat_saFys_info:
         const sat_saFys_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFyB_entry() //  [R1]
         { []
         }
     {offset
       caGEt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGEu; else goto caGEv;
       caGEu: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caGEv: // global
           I64[Sp - 24] = block_caGDW_info;
           _saFwW::P64 = P64[R1 + 7];
           _saFy4::P64 = P64[R1 + 15];
           R1 = _saFwW::P64;
           P64[Sp - 16] = _saFwW::P64;
           P64[Sp - 8] = _saFy4::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyB_info" {
     sat_saFyB_info:
         const sat_saFyB_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaFU9_srt+200;
 },
 _caGDW() //  [R1]
         { []
         }
     {offset
       caGDW: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caGEy; else goto caGEx;
       caGEy: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGEx: // global
           I64[Hp - 56] = sat_saFyw_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFyr_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFys_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caGEp_info;
           R2 = Hp - 54;
           _saFyq::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFyq::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGDW_info" {
     block_caGDW_info:
         const _caGDW;
         const 2;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGEp() //  [R1]
         { []
         }
     {offset
       caGEp: // global
           _saFwW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGEr_info;
           R2 = P64[Sp + 16];
           _saFyz::P64 = R1;
           R1 = _saFwW::P64;
           P64[Sp + 16] = _saFyz::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGEp_info" {
     block_caGEp_info:
         const _caGEp;
         const 2;
         const 30;
 },
 _caGEr() //  []
         { []
         }
     {offset
       caGEr: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGEr_info" {
     block_caGEr_info:
         const _caGEr;
         const 1;
         const 30;
 },
 sat_saFyN_entry() //  [R1, R2]
         { []
         }
     {offset
       caGEL: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGEM; else goto caGEN;
       caGEM: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGEN: // global
           I64[Sp - 16] = block_caGEJ_info;
           _saFyK::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFyK::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyN_info" {
     sat_saFyN_info:
         const sat_saFyN_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caGEJ() //  []
         { []
         }
     {offset
       caGEJ: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGEJ_info" {
     block_caGEJ_info:
         const _caGEJ;
         const 1;
         const 30;
 },
 sat_saFyI_entry() //  [R1]
         { []
         }
     {offset
       caGEU: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFy4_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyI_info" {
     sat_saFyI_info:
         const sat_saFyI_entry;
         const 2;
         const 279172874251;
         const 4294967299;
         const SaFU9_srt+200;
 },
 sat_saFyJ_entry() //  [R1]
         { []
         }
     {offset
       caGF2: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFyJ_info" {
     sat_saFyJ_info:
         const sat_saFyJ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.closeFd1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caGF5: // global
           if ((Sp + -72) < SpLim) (likely: False) goto caGF6; else goto caGF7;
       caGF6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.closeFd1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caGF7: // global
           I64[Sp - 32] = block_caGzK_info;
           P64[Sp - 24] = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 32;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd1_info" {
     GHC.Event.Manager.closeFd1_info:
         const GHC.Event.Manager.closeFd1_entry;
         const 0;
         const 2537677131874318;
         const 17179869207;
         const SaFU9_srt+120;
 },
 _caGzK() //  [R1]
         { []
         }
     {offset
       caGzK: // global
           I64[Sp] = block_caGzM_info;
           _saFws::I64 = R1;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saFws::I64;
           if (R1 & 7 != 0) goto uaGFM; else goto caGzN;
       uaGFM: // global
           call _caGzM(R1) args: 0, res: 0, upd: 0;
       caGzN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGzK_info" {
     block_caGzK_info:
         const _caGzK;
         const 3;
         const 285877318189086;
         const SaFU9_srt+120;
 },
 _caGzM() //  [R1]
         { []
         }
     {offset
       caGzM: // global
           I64[Sp - 24] = block_caGzR_info;
           _saFwu::P64 = P64[R1 + 7];
           _saFww::P64 = P64[R1 + 23];
           _saFwy::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _saFww::P64;
           P64[Sp - 8] = _saFwy::P64;
           P64[Sp] = _saFwu::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaGFN; else goto caGzS;
       uaGFN: // global
           call _caGzR(R1) args: 0, res: 0, upd: 0;
       caGzS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGzM_info" {
     block_caGzM_info:
         const _caGzM;
         const 67;
         const 285877318189086;
         const SaFU9_srt+120;
 },
 _caGzR() //  [R1]
         { []
         }
     {offset
       caGzR: // global
           I64[Sp - 8] = block_caGzW_info;
           _saFwH::P64 = R1;
           _saFwI::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _saFwI::I64;
           P64[Sp + 8] = _saFwH::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGFO; else goto caGzX;
       uaGFO: // global
           call _caGzW(R1) args: 0, res: 0, upd: 0;
       caGzX: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGzR_info" {
     block_caGzR_info:
         const _caGzR;
         const 518;
         const 285877318189086;
         const SaFU9_srt+120;
 },
 _caGzW() //  [R1]
         { []
         }
     {offset
       caGzW: // global
           I64[Sp - 8] = block_caGA1_info;
           _saFwJ::P64 = R1;
           _saFwK::I64 = I64[R1 + 7];
           R1 = P64[Sp + 56];
           I64[Sp] = _saFwK::I64;
           P64[Sp + 56] = _saFwJ::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGFP; else goto caGA2;
       uaGFP: // global
           call _caGA1(R1) args: 0, res: 0, upd: 0;
       caGA2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGzW_info" {
     block_caGzW_info:
         const _caGzW;
         const 1095;
         const 285877318189086;
         const SaFU9_srt+120;
 },
 _caGA1() //  [R1]
         { []
         }
     {offset
       caGA1: // global
           _saFwH::P64 = P64[Sp + 24];
           _saFwI::I64 = I64[Sp + 16];
           _saFwJ::P64 = P64[Sp + 64];
           _saFwM::I64 = I64[R1 + 7];
           _saFwN::I64 = _saFwM::I64 & 31;
           if (%MO_S_Gt_W64(_saFwI::I64,
                            _saFwN::I64)) goto caGFg; else goto caGFK;
       caGFK: // global
           if (%MO_S_Gt_W64(_saFwN::I64,
                            I64[Sp + 8])) goto caGFg; else goto caGFh;
       caGFg: // global
           R4 = _saFwN::I64;
           R3 = _saFwH::P64;
           R2 = _saFwJ::P64;
           Sp = Sp + 72;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caGFh: // global
           _saFwU::P64 = P64[P64[Sp + 32] + ((_saFwN::I64 - _saFwI::I64 << 3) + 24)];
           I64[Sp + 24] = block_caGAk_info;
           _saFwL::P64 = R1;
           R1 = _saFwU::P64;
           I64[Sp + 32] = _saFwM::I64;
           P64[Sp + 64] = _saFwL::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaGFQ; else goto caGAl;
       uaGFQ: // global
           call _caGAk(R1) args: 0, res: 0, upd: 0;
       caGAl: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGA1_info" {
     block_caGA1_info:
         const _caGA1;
         const 2248;
         const 285877318189086;
         const SaFU9_srt+120;
 },
 _caGAk() //  [R1]
         { []
         }
     {offset
       caGAk: // global
           Hp = Hp + 80;
           if (Hp > HpLim) (likely: False) goto caGFk; else goto caGFj;
       caGFk: // global
           HpAlloc = 80;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGFj: // global
           _saFwW::P64 = P64[R1 + 7];
           I64[Hp - 72] = $wio_saFwX_info;
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 16];
           P64[Hp - 48] = P64[Sp + 40];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io_saFy4_info;
           P64[Hp - 24] = Hp - 70;
           _caGD6::P64 = Hp - 30;
           _saFy9::I64 = I64[Sp + 24];
           if (_saFy9::I64 != 0) goto uaGFL; else goto caGFx;
       uaGFL: // global
           if (_saFy9::I64 != 1) goto caGFp; else goto caGFD;
       caGFp: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_caGDn_info;
           R1 = _saFwW::P64;
           P64[Sp + 32] = _saFwW::P64;
           P64[Sp + 40] = _caGD6::P64;
           Sp = Sp + 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caGFD: // global
           Hp = Hp - 24;
           I64[Sp + 24] = block_caGEC_info;
           R1 = _saFwW::P64;
           P64[Sp + 32] = _saFwW::P64;
           P64[Sp + 40] = _caGD6::P64;
           Sp = Sp + 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caGFx: // global
           I64[Hp - 16] = sat_saFyB_info;
           P64[Hp - 8] = _saFwW::P64;
           P64[Hp] = _caGD6::P64;
           I64[Sp + 40] = block_caGFw_info;
           R1 = Hp - 15;
           Sp = Sp + 40;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGAk_info" {
     block_caGAk_info:
         const _caGAk;
         const 325;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGDn() //  [R1]
         { []
         }
     {offset
       caGDn: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caGFs; else goto caGFr;
       caGFs: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGFr: // global
           I64[Hp - 56] = sat_saFyi_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFyd_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFye_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caGFl_info;
           R2 = Hp - 54;
           _saFyc::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFyc::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGDn_info" {
     block_caGDn_info:
         const _caGDn;
         const 2;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGFl() //  [R1]
         { []
         }
     {offset
       caGFl: // global
           _saFwW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGFn_info;
           R2 = P64[Sp + 16];
           _saFyl::P64 = R1;
           R1 = _saFwW::P64;
           P64[Sp + 16] = _saFyl::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGFl_info" {
     block_caGFl_info:
         const _caGFl;
         const 2;
         const 30;
 },
 _caGFn() //  []
         { []
         }
     {offset
       caGFn: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGFn_info" {
     block_caGFn_info:
         const _caGFn;
         const 1;
         const 30;
 },
 _caGEC() //  [R1]
         { []
         }
     {offset
       caGEC: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caGFG; else goto caGFF;
       caGFG: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGFF: // global
           I64[Hp - 56] = sat_saFyN_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFyI_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFyJ_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caGFA_info;
           R2 = Hp - 54;
           _saFyH::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFyH::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGEC_info" {
     block_caGEC_info:
         const _caGEC;
         const 2;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caGFA() //  [R1]
         { []
         }
     {offset
       caGFA: // global
           _saFwW::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGFC_info;
           R2 = P64[Sp + 16];
           _saFyQ::P64 = R1;
           R1 = _saFwW::P64;
           P64[Sp + 16] = _saFyQ::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGFA_info" {
     block_caGFA_info:
         const _caGFA;
         const 2;
         const 30;
 },
 _caGFC() //  []
         { []
         }
     {offset
       caGFC: // global
           R2 = P64[Sp + 8];
           Sp = Sp + 16;
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGFC_info" {
     block_caGFC_info:
         const _caGFC;
         const 1;
         const 30;
 },
 _caGFw() //  [R1]
         { []
         }
     {offset
       caGFw: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGFw_info" {
     block_caGFw_info:
         const _caGFw;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.528052565 UTC

[section ""data" . GHC.Event.Manager.closeFd_closure" {
     GHC.Event.Manager.closeFd_closure:
         const GHC.Event.Manager.closeFd_info;
         const 0;
 },
 GHC.Event.Manager.closeFd_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caGKd: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.closeFd1_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_info" {
     GHC.Event.Manager.closeFd_info:
         const GHC.Event.Manager.closeFd_entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SaFU9_srt+272;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.531915269 UTC

[section ""data" . lvl8_raAuf_closure" {
     lvl8_raAuf_closure:
         const lvl8_raAuf_info;
 },
 lvl8_raAuf_entry() //  [R2]
         { []
         }
     {offset
       caGKr: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caGKs; else goto caGKt;
       caGKs: // global
           R2 = R2;
           R1 = lvl8_raAuf_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGKt: // global
           I64[Sp - 8] = block_caGKo_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGKM; else goto caGKp;
       uaGKM: // global
           call _caGKo(R1) args: 0, res: 0, upd: 0;
       caGKp: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . lvl8_raAuf_info" {
     lvl8_raAuf_info:
         const lvl8_raAuf_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caGKo() //  [R1]
         { []
         }
     {offset
       caGKo: // global
           if (I64[R1 + 31] & 8 == 0) goto caGKI; else goto caGKC;
       caGKI: // global
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caGKC: // global
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGKo_info" {
     block_caGKo_info:
         const _caGKo;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.565753867 UTC

[section ""data" . GHC.Event.Manager.loop5_closure" {
     GHC.Event.Manager.loop5_closure:
         const GHC.Event.Manager.loop5_info;
         const 0;
 },
 $wgo_saFA4_entry() //  [R1, R2]
         { []
         }
     {offset
       caGMt: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGMu; else goto caGMv;
       caGMu: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGMv: // global
           I64[Sp - 24] = block_caGMm_info;
           _saFA4::P64 = R1;
           _saFzs::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saFzs::I64;
           P64[Sp - 8] = _saFA4::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaGMS; else goto caGMn;
       uaGMS: // global
           call _caGMm(R1) args: 0, res: 0, upd: 0;
       caGMn: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saFA4_info" {
     $wgo_saFA4_info:
         const $wgo_saFA4_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caGMm() //  [R1]
         { []
         }
     {offset
       caGMm: // global
           if (R1 & 7 == 1) goto caGMq; else goto caGMr;
       caGMq: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGMr: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGMD; else goto caGMC;
       caGMD: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGMC: // global
           _saFA8::P64 = P64[R1 + 6];
           _saFA9::P64 = P64[R1 + 14];
           _saFA7::I64 = I64[R1 + 22];
           if (_saFA7::I64 == I64[Sp + 8]) goto caGMR; else goto caGML;
       caGMR: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFA8::P64;
           R3 = _saFA9::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caGML: // global
           Hp = Hp - 16;
           I64[Sp] = block_caGMH_info;
           R2 = _saFA9::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saFA8::P64;
           I64[Sp + 16] = _saFA7::I64;
           call $wgo_saFA4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGMm_info" {
     block_caGMm_info:
         const _caGMm;
         const 66;
         const 30;
 },
 _caGMH() //  [R1, R2, R3]
         { []
         }
     {offset
       caGMH: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caGMO; else goto caGMN;
       caGMO: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caGMN: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGMH_info" {
     block_caGMH_info:
         const _caGMH;
         const 130;
         const 30;
 },
 w2_saFAD_entry() //  [R1]
         { []
         }
     {offset
       caGNC: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGND; else goto caGNE;
       caGND: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGNE: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 24] = block_caGNz_info;
           R2 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           Sp = Sp - 24;
           call $wgo1_saFAr_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . w2_saFAD_info" {
     w2_saFAD_info:
         const w2_saFAD_entry;
         const 2;
         const 18;
 },
 _caGNz() //  [R1, R2]
         { []
         }
     {offset
       caGNz: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGNH; else goto caGNG;
       caGNH: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caGNG: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caGNz_info" {
     block_caGNz_info:
         const _caGNz;
         const 0;
         const 30;
 },
 $wgo1_saFAr_entry() //  [R1, R2]
         { []
         }
     {offset
       caGNM: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caGNN; else goto caGNO;
       caGNN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGNO: // global
           I64[Sp - 24] = block_caGNf_info;
           _saFAr::P64 = R1;
           _saFz1::P64 = P64[R1 + 7];
           R1 = R2;
           P64[Sp - 16] = _saFz1::P64;
           P64[Sp - 8] = _saFAr::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaGOe; else goto caGNg;
       uaGOe: // global
           call _caGNf(R1) args: 0, res: 0, upd: 0;
       caGNg: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo1_saFAr_info" {
     $wgo1_saFAr_info:
         const $wgo1_saFAr_entry;
         const 1;
         const 9;
         const 4294967301;
 },
 _caGNf() //  [R1]
         { []
         }
     {offset
       caGNf: // global
           if (R1 & 7 == 1) goto caGNJ; else goto caGNK;
       caGNJ: // global
           R2 = GHC.Types.[]_closure+1;
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       caGNK: // global
           I64[Sp - 8] = block_caGNl_info;
           _saFAu::P64 = P64[R1 + 6];
           _saFAv::P64 = P64[R1 + 14];
           R1 = P64[Sp + 8];
           P64[Sp] = _saFAv::P64;
           P64[Sp + 8] = _saFAu::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGOc; else goto caGNm;
       uaGOc: // global
           call _caGNl(R1) args: 0, res: 0, upd: 0;
       caGNm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGNf_info" {
     block_caGNf_info:
         const _caGNf;
         const 2;
         const 30;
 },
 _caGNl() //  [R1]
         { []
         }
     {offset
       caGNl: // global
           I64[Sp] = block_caGNq_info;
           _saFAx::I64 = I64[R1 + 7];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saFAx::I64;
           if (R1 & 7 != 0) goto uaGOd; else goto caGNr;
       uaGOd: // global
           call _caGNq(R1) args: 0, res: 0, upd: 0;
       caGNr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGNl_info" {
     block_caGNl_info:
         const _caGNl;
         const 3;
         const 30;
 },
 _caGNq() //  [R1]
         { []
         }
     {offset
       caGNq: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto caGNV; else goto caGNU;
       caGNV: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGNU: // global
           _saFAB::I64 = I64[R1 + 31];
           I64[Hp - 96] = w2_saFAD_info;
           P64[Hp - 80] = P64[Sp + 24];
           P64[Hp - 72] = P64[Sp + 8];
           _caGNv::P64 = Hp - 96;
           if (I64[Sp + 16] & _saFAB::I64 & 7 == 0) goto caGOb; else goto caGO6;
       caGOb: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _caGNv::P64;
           I64[Hp - 40] = :_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = Hp - 64;
           I64[Hp - 16] = stg_sel_0_upd_info;
           P64[Hp] = _caGNv::P64;
           R2 = Hp - 38;
           R1 = Hp - 16;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       caGO6: // global
           I64[Hp - 64] = stg_sel_1_upd_info;
           P64[Hp - 48] = _caGNv::P64;
           I64[Hp - 40] = stg_sel_0_upd_info;
           P64[Hp - 24] = _caGNv::P64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = Hp - 40;
           R2 = Hp - 64;
           R1 = Hp - 14;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGNq_info" {
     block_caGNq_info:
         const _caGNq;
         const 131;
         const 30;
 },
 ds8_saFAq_entry() //  [R1]
         { []
         }
     {offset
       caGOi: // global
           _saFAq::P64 = R1;
           if ((Sp + -24) < SpLim) (likely: False) goto caGOj; else goto caGOk;
       caGOk: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGOm; else goto caGOl;
       caGOm: // global
           HpAlloc = 16;
           goto caGOj;
       caGOj: // global
           R1 = _saFAq::P64;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGOl: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = _saFAq::P64;
           _saFz1::P64 = P64[_saFAq::P64 + 16];
           _saFAp::P64 = P64[_saFAq::P64 + 24];
           I64[Hp - 8] = $wgo1_saFAr_info;
           P64[Hp] = _saFz1::P64;
           I64[Sp - 24] = block_caGOf_info;
           R2 = _saFAp::P64;
           R1 = Hp - 7;
           Sp = Sp - 24;
           call $wgo1_saFAr_entry(R2, R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . ds8_saFAq_info" {
     ds8_saFAq_info:
         const ds8_saFAq_entry;
         const 2;
         const 18;
 },
 _caGOf() //  [R1, R2]
         { []
         }
     {offset
       caGOf: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGOp; else goto caGOo;
       caGOp: // global
           HpAlloc = 24;
           R2 = R2;
           R1 = R1;
           call stg_gc_pp(R2, R1) args: 8, res: 8, upd: 24;
       caGOo: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R2;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caGOf_info" {
     block_caGOf_info:
         const _caGOf;
         const 0;
         const 30;
 },
 sat_saFBc_entry() //  [R1]
         { []
         }
     {offset
       caGOE: // global
           R3 = P64[R1 + 16];
           R2 = lvl8_raAuf_closure+1;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFBc_info" {
     sat_saFBc_info:
         const sat_saFBc_entry;
         const 1;
         const 16;
 },
 saved_saFB8_entry() //  [R1]
         { []
         }
     {offset
       caGOH: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caGOI; else goto caGOJ;
       caGOI: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caGOJ: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           I64[Sp - 32] = block_caGOv_info;
           _saFB4::P64 = P64[R1 + 24];
           R1 = P64[R1 + 16];
           P64[Sp - 24] = _saFB4::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaGON; else goto caGOw;
       uaGON: // global
           call _caGOv(R1) args: 0, res: 0, upd: 0;
       caGOw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . saved_saFB8_info" {
     saved_saFB8_info:
         const saved_saFB8_entry;
         const 2;
         const 18;
 },
 _caGOv() //  [R1]
         { []
         }
     {offset
       caGOv: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGOM; else goto caGOL;
       caGOM: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 24;
       caGOL: // global
           _saFBb::P64 = P64[R1 + 15];
           I64[Hp - 16] = sat_saFBc_info;
           P64[Hp] = P64[Sp + 8];
           R3 = Hp - 16;
           R2 = _saFBb::P64;
           Sp = Sp + 16;
           call GHC.Base.++_entry(R3, R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caGOv_info" {
     block_caGOv_info:
         const _caGOv;
         const 1;
         const 30;
 },
 sat_saFBf_entry() //  [R1]
         { []
         }
     {offset
       caGOT: // global
           R1 = P64[R1 + 6] & (-8);
           call (I64[I64[R1]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFBf_info" {
     sat_saFBf_info:
         const sat_saFBf_entry;
         const 1;
         const 9;
         const 8589934607;
 },
 $wio_saFzO_entry() //  [R1, R2]
         { []
         }
     {offset
       caGOW: // global
           if ((Sp + -112) < SpLim) (likely: False) goto caGOX; else goto caGOY;
       caGOX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGOY: // global
           I64[Sp - 64] = block_caGM3_info;
           _saFz1::P64 = P64[R1 + 6];
           _saFzi::P64 = P64[R1 + 14];
           _saFzk::P64 = P64[R1 + 22];
           _saFzl::P64 = P64[R1 + 30];
           _saFzr::P64 = P64[R1 + 38];
           _saFzs::I64 = I64[R1 + 46];
           R1 = P64[R2 + 8];
           P64[Sp - 56] = _saFz1::P64;
           P64[Sp - 48] = _saFzi::P64;
           P64[Sp - 40] = _saFzk::P64;
           P64[Sp - 32] = _saFzl::P64;
           P64[Sp - 24] = _saFzr::P64;
           I64[Sp - 16] = _saFzs::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 64;
           if (R1 & 7 != 0) goto uaGRD; else goto caGM4;
       uaGRD: // global
           call _caGM3(R1) args: 0, res: 0, upd: 0;
       caGM4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saFzO_info" {
     $wio_saFzO_info:
         const $wio_saFzO_entry;
         const 4294967301;
         const 4294967304;
         const 8589934597;
         const SaFU9_srt+248;
 },
 _caGM3() //  [R1]
         { []
         }
     {offset
       caGM3: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGP1; else goto caGP0;
       caGP1: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGP0: // global
           _saFzs::I64 = I64[Sp + 48];
           _saFzV::P64 = P64[R1 + 7];
           _saFzX::P64 = P64[R1 + 15];
           _saFzW::I64 = I64[R1 + 23];
           _saFzY::I64 = _saFzs::I64 & (I64[_saFzV::P64 + 8] - 1);
           _saFA3::P64 = P64[(_saFzV::P64 + 24) + (_saFzY::I64 << 3)];
           I64[Hp - 8] = $wgo_saFA4_info;
           I64[Hp] = _saFzs::I64;
           I64[Sp - 32] = block_caGMT_info;
           R2 = _saFA3::P64;
           R1 = Hp - 7;
           I64[Sp - 24] = _saFzW::I64;
           P64[Sp - 16] = _saFzX::P64;
           I64[Sp - 8] = _saFzY::I64;
           P64[Sp] = _saFzV::P64;
           Sp = Sp - 32;
           call $wgo_saFA4_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGM3_info" {
     block_caGM3_info:
         const _caGM3;
         const 2055;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGMT() //  [R1, R2, R3]
         { []
         }
     {offset
       caGMT: // global
           I64[Sp - 16] = block_caGP2_info;
           _saFAi::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saFAi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGRC; else goto caGR1;
       uaGRC: // global
           call _caGP2(R1) args: 0, res: 0, upd: 0;
       caGR1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGMT_info" {
     block_caGMT_info:
         const _caGMT;
         const 33099;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGP2() //  [R1]
         { []
         }
     {offset
       caGP2: // global
           if (R1 & 7 == 1) goto caGR7; else goto caGRc;
       caGR7: // global
           P64[Sp + 48] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saFAl() args: 0, res: 0, upd: 0;
       caGRc: // global
           _saFzV::P64 = P64[Sp + 48];
           _saFzY::I64 = I64[Sp + 40];
           _saFAi::P64 = P64[Sp + 16];
           _saFAk::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saFzV::P64 + 24) + (_saFzY::I64 << 3)] = _saFAk::P64;
           I64[_saFzV::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saFzV::P64 + 24) + ((I64[_saFzV::P64 + 8] << 3) + (_saFzY::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caGRa_info;
           _saFBF::P64 = R1;
           R1 = _saFAi::P64;
           P64[Sp + 48] = _saFBF::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaGRE; else goto caGRd;
       uaGRE: // global
           call _caGRa(R1) args: 0, res: 0, upd: 0;
       caGRd: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGP2_info" {
     block_caGP2_info:
         const _caGP2;
         const 132365;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGRa() //  [R1]
         { []
         }
     {offset
       caGRa: // global
           _saFBF::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto caGRj; else goto caGRn;
       caGRj: // global
           P64[Sp + 32] = _saFBF::P64;
           Sp = Sp + 32;
           goto uaGRL;
       caGRn: // global
           _saFzW::I64 = I64[Sp + 8];
           _saFzX::P64 = P64[Sp + 16];
           I64[_saFzW::I64] = I64[_saFzW::I64] - 1;
           call MO_Touch(_saFzX::P64);
           P64[Sp + 32] = _saFBF::P64;
           Sp = Sp + 32;
           goto uaGRL;
       uaGRL: // global
           call _saFAl() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGRa_info" {
     block_caGRa_info:
         const _caGRa;
         const 33099;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _saFAl() //  []
         { []
         }
     {offset
       saFAl: // global
           _saFAn::P64 = P64[Sp];
           I64[Sp] = block_caGN0_info;
           R1 = _saFAn::P64;
           if (R1 & 7 != 0) goto uaGRM; else goto caGN1;
       uaGRM: // global
           call _caGN0(R1) args: 0, res: 0, upd: 0;
       caGN1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caGN0() //  [R1]
         { []
         }
     {offset
       caGN0: // global
           if (R1 & 7 == 1) goto caGP8; else goto caGPg;
       caGP8: // global
           R1 = GHC.Types.[]_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caGPg: // global
           Hp = Hp + 104;
           if (Hp > HpLim) (likely: False) goto caGPj; else goto caGPi;
       caGPj: // global
           HpAlloc = 104;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGPi: // global
           _saFAp::P64 = P64[R1 + 6];
           I64[Hp - 96] = ds8_saFAq_info;
           P64[Hp - 80] = P64[Sp + 8];
           P64[Hp - 72] = _saFAp::P64;
           I64[Hp - 64] = stg_sel_0_upd_info;
           _caGN6::P64 = Hp - 96;
           P64[Hp - 48] = _caGN6::P64;
           I64[Hp - 40] = saved_saFB8_info;
           P64[Hp - 24] = _caGN6::P64;
           _caGOq::P64 = Hp - 64;
           P64[Hp - 16] = _caGOq::P64;
           I64[Hp - 8] = sat_saFBf_info;
           _caGOr::P64 = Hp - 40;
           P64[Hp] = _caGOr::P64;
           I64[Sp] = block_caGP9_info;
           R5 = P64[Sp + 56];
           R4 = _caGOr::P64;
           R3 = I64[Sp + 48];
           R2 = Hp - 6;
           P64[Sp + 8] = _saFAp::P64;
           P64[Sp + 48] = _caGOr::P64;
           P64[Sp + 56] = _caGOq::P64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGN0_info" {
     block_caGN0_info:
         const _caGN0;
         const 2055;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGP9() //  []
         { []
         }
     {offset
       caGP9: // global
           _saFAp::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGPb_info;
           R2 = _saFAp::P64;
           Sp = Sp + 8;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGP9_info" {
     block_caGP9_info:
         const _caGP9;
         const 7;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGPb() //  [R1]
         { []
         }
     {offset
       caGPb: // global
           I64[Sp] = block_caGPf_info;
           R2 = P64[Sp + 40];
           I64[Sp + 40] = R1;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGPb_info" {
     block_caGPb_info:
         const _caGPb;
         const 6;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGPf() //  [R1]
         { []
         }
     {offset
       caGPf: // global
           _caGOq::P64 = P64[Sp + 48];
           _saFBj::I64 = I64[Sp + 40];
           _saFBk::I64 = R1;
           if (_saFBj::I64 & 8 == 0) goto saFBl; else goto caGQM;
       caGQM: // global
           if (_saFBj::I64 == _saFBk::I64) goto caGQU; else goto saFBl;
       saFBl: // global
           _saFBn::I64 = _saFBk::I64 & 8;
           if (_saFBn::I64 != 0) goto uaGRy; else goto caGPU;
       uaGRy: // global
           I64[Sp] = _saFBn::I64;
           I64[Sp + 24] = _saFBk::I64;
           call _caGPA() args: 0, res: 0, upd: 0;
       caGPU: // global
           if (_saFBj::I64 & 8 == 0) goto caGQo; else goto uaGRA;
       caGQo: // global
           if (_saFBk::I64 & 7 == 0) goto caGQU; else goto uaGRB;
       caGQU: // global
           R1 = _caGOq::P64;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaGRB: // global
           I64[Sp + 40] = _saFBk::I64;
           goto uaGRI;
       uaGRA: // global
           I64[Sp + 40] = _saFBk::I64;
           goto uaGRI;
       uaGRI: // global
           call _caGQ1() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGPf_info" {
     block_caGPf_info:
         const _caGPf;
         const 1030;
         const 30;
 },
 _caGPA() //  []
         { []
         }
     {offset
       caGPA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caGPP; else goto caGPO;
       caGPP: // global
           HpAlloc = 32;
           _saFBn::I64 = I64[Sp];
           I64[Sp] = block_caGPz_info;
           R1 = _saFBn::I64;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caGPO: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 24] & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40] & 7;
           I64[Sp + 40] = block_caGPK_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           I64[Sp + 32] = stg_ap_v_info;
           Sp = Sp + 32;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caGPz() //  [R1]
         { []
         }
     {offset
       caGPz: // global
           I64[Sp] = R1;
           call _caGPA() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGPz_info" {
     block_caGPz_info:
         const _caGPz;
         const 1286;
         const 30;
 },
 _caGPK() //  []
         { []
         }
     {offset
       caGPK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGPK_info" {
     block_caGPK_info:
         const _caGPK;
         const 1;
         const 30;
 },
 _caGQ1() //  []
         { []
         }
     {offset
       caGQ1: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caGQa; else goto caGQ9;
       caGQa: // global
           HpAlloc = 16;
           I64[Sp] = block_caGQ1_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caGQ9: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 40] & 7;
           I64[Sp + 40] = block_caGQ7_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp + 40;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGQ1_info" {
     block_caGQ1_info:
         const _caGQ1;
         const 1158;
         const 30;
 },
 _caGQ7() //  []
         { []
         }
     {offset
       caGQ7: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGQ7_info" {
     block_caGQ7_info:
         const _caGQ7;
         const 1;
         const 30;
 },
 io_saFBP_entry() //  [R1, R2]
         { []
         }
     {offset
       caGRV: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGRW; else goto caGRX;
       caGRW: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGRX: // global
           I64[Sp - 16] = block_caGRS_info;
           _saFzO::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saFzO::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGS1; else goto caGRT;
       uaGS1: // global
           call _caGRS(R1) args: 0, res: 0, upd: 0;
       caGRT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saFBP_info" {
     io_saFBP_info:
         const io_saFBP_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaFU9_srt+248;
 },
 _caGRS() //  [R1]
         { []
         }
     {offset
       caGRS: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saFzO_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGRS_info" {
     block_caGRS_info:
         const _caGRS;
         const 1;
         const 4294967326;
         const SaFU9_srt+248;
 },
 sat_saFC3_entry() //  [R1, R2]
         { []
         }
     {offset
       caGSd: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGSe; else goto caGSf;
       caGSe: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGSf: // global
           I64[Sp - 16] = block_caGSb_info;
           _saFC0::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFC0::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFC3_info" {
     sat_saFC3_info:
         const sat_saFC3_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caGSb() //  []
         { []
         }
     {offset
       caGSb: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGSb_info" {
     block_caGSb_info:
         const _caGSb;
         const 1;
         const 30;
 },
 sat_saFBY_entry() //  [R1]
         { []
         }
     {offset
       caGSm: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFBP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFBY_info" {
     sat_saFBY_info:
         const sat_saFBY_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFBZ_entry() //  [R1]
         { []
         }
     {offset
       caGSu: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFBZ_info" {
     sat_saFBZ_info:
         const sat_saFBZ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFCw_entry() //  [R1, R2]
         { []
         }
     {offset
       caGSM: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGSN; else goto caGSO;
       caGSN: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGSO: // global
           I64[Sp - 16] = block_caGSK_info;
           _saFCt::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFCt::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFCw_info" {
     sat_saFCw_info:
         const sat_saFCw_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caGSK() //  []
         { []
         }
     {offset
       caGSK: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGSK_info" {
     block_caGSK_info:
         const _caGSK;
         const 1;
         const 30;
 },
 sat_saFCr_entry() //  [R1]
         { []
         }
     {offset
       caGSV: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFBP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFCr_info" {
     sat_saFCr_info:
         const sat_saFCr_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFCs_entry() //  [R1]
         { []
         }
     {offset
       caGT3: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFCs_info" {
     sat_saFCs_info:
         const sat_saFCs_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFCB_entry() //  [R1]
         { []
         }
     {offset
       caGTa: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caGTb; else goto caGTc;
       caGTb: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caGTc: // global
           I64[Sp - 24] = block_caGSD_info;
           _saFzN::P64 = P64[R1 + 7];
           _saFBP::P64 = P64[R1 + 15];
           R1 = _saFzN::P64;
           P64[Sp - 16] = _saFzN::P64;
           P64[Sp - 8] = _saFBP::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFCB_info" {
     sat_saFCB_info:
         const sat_saFCB_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 _caGSD() //  [R1]
         { []
         }
     {offset
       caGSD: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caGTf; else goto caGTe;
       caGTf: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGTe: // global
           I64[Hp - 56] = sat_saFCw_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFCr_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFCs_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caGT6_info;
           R2 = Hp - 54;
           _saFCq::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFCq::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGSD_info" {
     block_caGSD_info:
         const _caGSD;
         const 2;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGT6() //  [R1]
         { []
         }
     {offset
       caGT6: // global
           _saFzN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGT8_info;
           R2 = P64[Sp + 16];
           _saFCz::P64 = R1;
           R1 = _saFzN::P64;
           P64[Sp + 16] = _saFCz::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGT6_info" {
     block_caGT6_info:
         const _caGT6;
         const 2;
         const 30;
 },
 _caGT8() //  []
         { []
         }
     {offset
       caGT8: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGT8_info" {
     block_caGT8_info:
         const _caGT8;
         const 1;
         const 30;
 },
 sat_saFD2_entry() //  [R1, R2]
         { []
         }
     {offset
       caGTs: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caGTt; else goto caGTu;
       caGTt: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caGTu: // global
           I64[Sp - 16] = block_caGTq_info;
           _saFCZ::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFCZ::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFD2_info" {
     sat_saFD2_info:
         const sat_saFD2_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caGTq() //  []
         { []
         }
     {offset
       caGTq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caGTq_info" {
     block_caGTq_info:
         const _caGTq;
         const 1;
         const 30;
 },
 sat_saFCX_entry() //  [R1]
         { []
         }
     {offset
       caGTB: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFBP_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFCX_info" {
     sat_saFCX_info:
         const sat_saFCX_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFCY_entry() //  [R1]
         { []
         }
     {offset
       caGTJ: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFCY_info" {
     sat_saFCY_info:
         const sat_saFCY_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.loop5_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caGTM: // global
           if ((Sp + -112) < SpLim) (likely: False) goto caGTN; else goto caGTO;
       caGTN: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.loop5_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caGTO: // global
           I64[Sp - 24] = block_caGL6_info;
           R1 = R2;
           P64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaGWH; else goto caGL7;
       uaGWH: // global
           call _caGL6(R1) args: 0, res: 0, upd: 0;
       caGL7: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop5_info" {
     GHC.Event.Manager.loop5_info:
         const GHC.Event.Manager.loop5_entry;
         const 0;
         const 13792278153789454;
         const 17179869207;
         const SaFU9_srt+120;
 },
 _caGL6() //  [R1]
         { []
         }
     {offset
       caGL6: // global
           I64[Sp - 56] = block_caGLb_info;
           _saFz5::P64 = P64[R1 + 15];
           _saFz6::P64 = P64[R1 + 23];
           _saFz8::P64 = P64[R1 + 31];
           _saFz9::P64 = P64[R1 + 39];
           _saFzf::P64 = P64[R1 + 63];
           _saFzb::I64 = I64[R1 + 87];
           _saFzd::I64 = I64[R1 + 103];
           R1 = P64[R1 + 7];
           P64[Sp - 48] = _saFz6::P64;
           P64[Sp - 40] = _saFz8::P64;
           P64[Sp - 32] = _saFz9::P64;
           I64[Sp - 24] = _saFzb::I64;
           I64[Sp - 16] = _saFzd::I64;
           P64[Sp - 8] = _saFzf::P64;
           P64[Sp] = _saFz5::P64;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uaGWC; else goto caGLc;
       uaGWC: // global
           call _caGLb(R1) args: 0, res: 0, upd: 0;
       caGLc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGL6_info" {
     block_caGL6_info:
         const _caGL6;
         const 2;
         const 4785078899048478;
         const SaFU9_srt+120;
 },
 _caGLb() //  [R1]
         { []
         }
     {offset
       caGLb: // global
           I64[Sp - 16] = block_caGLg_info;
           _saFzi::P64 = P64[R1 + 7];
           _saFzk::P64 = P64[R1 + 23];
           _saFzl::P64 = P64[R1 + 31];
           R1 = P64[Sp + 56];
           P64[Sp - 8] = _saFzl::P64;
           P64[Sp] = _saFzk::P64;
           P64[Sp + 56] = _saFzi::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaGWD; else goto caGLh;
       uaGWD: // global
           call _caGLg(R1) args: 0, res: 0, upd: 0;
       caGLh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGLb_info" {
     block_caGLb_info:
         const _caGLb;
         const 1545;
         const 4785078899048478;
         const SaFU9_srt+120;
 },
 _caGLg() //  [R1]
         { []
         }
     {offset
       caGLg: // global
           I64[Sp - 8] = block_caGLl_info;
           _saFzn::P64 = R1;
           _saFzo::I64 = I64[R1 + 7];
           R1 = P64[Sp + 24];
           I64[Sp] = _saFzo::I64;
           P64[Sp + 24] = _saFzn::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGWE; else goto caGLm;
       uaGWE: // global
           call _caGLl(R1) args: 0, res: 0, upd: 0;
       caGLm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGLg_info" {
     block_caGLg_info:
         const _caGLg;
         const 6155;
         const 4785078899048478;
         const SaFU9_srt+120;
 },
 _caGLl() //  [R1]
         { []
         }
     {offset
       caGLl: // global
           I64[Sp - 8] = block_caGLq_info;
           _saFzp::P64 = R1;
           _saFzq::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saFzq::I64;
           P64[Sp + 88] = _saFzp::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGWF; else goto caGLr;
       uaGWF: // global
           call _caGLq(R1) args: 0, res: 0, upd: 0;
       caGLr: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGLl_info" {
     block_caGLl_info:
         const _caGLl;
         const 12364;
         const 4785078899048478;
         const SaFU9_srt+120;
 },
 _caGLq() //  [R1]
         { []
         }
     {offset
       caGLq: // global
           _saFzd::I64 = I64[Sp + 72];
           _saFzf::P64 = P64[Sp + 80];
           _saFzs::I64 = I64[R1 + 7];
           if (_saFzs::I64 == I64[Sp + 64]) goto saFzt; else goto caGWi;
       caGWi: // global
           if (_saFzs::I64 == _saFzd::I64) goto saFzt; else goto caGUe;
       saFzt: // global
           I64[Sp + 48] = block_caGTX_info;
           R4 = _saFzs::I64;
           R3 = _saFzf::P64;
           R2 = _saFzd::I64;
           Sp = Sp + 48;
           call GHC.Event.Control.$wreadControlMessage_entry(R4,
                                                             R3,
                                                             R2) args: 8, res: 8, upd: 8;
       caGUe: // global
           I64[Sp] = block_caGLD_info;
           I64[Sp + 72] = _saFzs::I64;
           P64[Sp + 80] = R1;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGLq_info" {
     block_caGLq_info:
         const _caGLq;
         const 24781;
         const 4785078899048478;
         const SaFU9_srt+120;
 },
 _caGTX() //  [R1]
         { []
         }
     {offset
       caGTX: // global
           I64[Sp] = block_caGTZ_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaGWI; else goto caGU2;
       uaGWI: // global
           call _caGTZ(R1) args: 0, res: 0, upd: 0;
       caGU2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGTX_info" {
     block_caGTX_info:
         const _caGTX;
         const 8071;
         const 30;
 },
 _caGTZ() //  [R1]
         { []
         }
     {offset
       caGTZ: // global
           if (R1 & 7 == 2) goto caGUc; else goto uaGWB;
       caGUc: // global
           _saFz9::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[_saFz9::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saFz9::P64);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaGWB: // global
           Sp = Sp + 64;
           call _caGU8() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGTZ_info" {
     block_caGTZ_info:
         const _caGTZ;
         const 8071;
         const 30;
 },
 _caGLD() //  [R1]
         { []
         }
     {offset
       caGLD: // global
           _saFzn::P64 = P64[Sp + 40];
           _saFzo::I64 = I64[Sp + 16];
           _saFzp::P64 = P64[Sp + 96];
           _saFzE::I64 = I64[Sp + 72] & 31;
           if (%MO_S_Gt_W64(_saFzo::I64,
                            _saFzE::I64)) goto caGUj; else goto caGWf;
       caGWf: // global
           if (%MO_S_Gt_W64(_saFzE::I64,
                            I64[Sp + 8])) goto caGUj; else goto caGUk;
       caGUj: // global
           R4 = _saFzE::I64;
           R3 = _saFzn::P64;
           R2 = _saFzp::P64;
           Sp = Sp + 112;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caGUk: // global
           _saFzL::P64 = P64[P64[Sp + 48] + ((_saFzE::I64 - _saFzo::I64 << 3) + 24)];
           I64[Sp + 16] = block_caGLT_info;
           _saFzD::I64 = R1;
           R1 = _saFzL::P64;
           I64[Sp + 96] = _saFzD::I64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaGWG; else goto caGLU;
       uaGWG: // global
           call _caGLT(R1) args: 0, res: 0, upd: 0;
       caGLU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGLD_info" {
     block_caGLD_info:
         const _caGLD;
         const 28877;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caGLT() //  [R1]
         { []
         }
     {offset
       caGLT: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caGUn; else goto caGUm;
       caGUn: // global
           HpAlloc = 96;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGUm: // global
           _saFzN::P64 = P64[R1 + 7];
           I64[Hp - 88] = $wio_saFzO_info;
           P64[Hp - 80] = P64[Sp + 88];
           P64[Hp - 72] = P64[Sp + 72];
           P64[Hp - 64] = P64[Sp + 16];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 64];
           I64[Hp - 40] = I64[Sp + 56];
           I64[Hp - 32] = io_saFBP_info;
           P64[Hp - 24] = Hp - 86;
           _caGRN::P64 = Hp - 30;
           _saFBU::I64 = I64[Sp + 80];
           if (_saFBU::I64 != 0) goto uaGWr; else goto caGV4;
       uaGWr: // global
           if (_saFBU::I64 != 1) goto caGUs; else goto caGVE;
       caGUs: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caGS4_info;
           R1 = _saFzN::P64;
           P64[Sp + 72] = _saFzN::P64;
           P64[Sp + 80] = _caGRN::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caGVE: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caGTj_info;
           R1 = _saFzN::P64;
           P64[Sp + 72] = _saFzN::P64;
           P64[Sp + 80] = _caGRN::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caGV4: // global
           I64[Hp - 16] = sat_saFCB_info;
           P64[Hp - 8] = _saFzN::P64;
           P64[Hp] = _caGRN::P64;
           I64[Sp + 80] = block_caGV3_info;
           R1 = Hp - 15;
           Sp = Sp + 80;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGLT_info" {
     block_caGLT_info:
         const _caGLT;
         const 40715;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGS4() //  [R1]
         { []
         }
     {offset
       caGS4: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caGUv; else goto caGUu;
       caGUv: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGUu: // global
           I64[Hp - 56] = sat_saFC3_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFBY_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFBZ_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caGUo_info;
           R2 = Hp - 54;
           _saFBX::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFBX::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGS4_info" {
     block_caGS4_info:
         const _caGS4;
         const 3;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGUo() //  [R1]
         { []
         }
     {offset
       caGUo: // global
           _saFzN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGUq_info;
           R2 = P64[Sp + 16];
           _saFC6::P64 = R1;
           R1 = _saFzN::P64;
           P64[Sp + 16] = _saFC6::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGUo_info" {
     block_caGUo_info:
         const _caGUo;
         const 3;
         const 30;
 },
 _caGUq() //  []
         { []
         }
     {offset
       caGUq: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caGUC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGUq_info" {
     block_caGUq_info:
         const _caGUq;
         const 2;
         const 30;
 },
 _caGUC() //  []
         { []
         }
     {offset
       caGUC: // global
           _saFC9::P64 = P64[Sp];
           I64[Sp] = block_caGUE_info;
           R1 = _saFC9::P64;
           if (R1 & 7 != 0) goto uaGWL; else goto caGUG;
       uaGWL: // global
           call _caGUE(R1) args: 0, res: 0, upd: 0;
       caGUG: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caGUE() //  [R1]
         { []
         }
     {offset
       caGUE: // global
           if (R1 & 7 == 1) goto uaGWt; else goto caGUR;
       uaGWt: // global
           Sp = Sp + 16;
           call _caGU8() args: 0, res: 0, upd: 0;
       caGUR: // global
           I64[Sp - 8] = block_caGUP_info;
           _saFCd::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saFCd::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGWM; else goto caGUS;
       uaGWM: // global
           call _caGUP(R1) args: 0, res: 0, upd: 0;
       caGUS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGUE_info" {
     block_caGUE_info:
         const _caGUE;
         const 1;
         const 30;
 },
 _caGUP() //  [R1]
         { []
         }
     {offset
       caGUP: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGV0; else goto caGUZ;
       caGV0: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGUZ: // global
           _saFCi::P64 = P64[R1 + 7];
           _saFCf::I64 = I64[R1 + 15];
           _saFCg::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saFCf::I64;
           I64[Hp] = _saFCg::I64;
           I64[Sp] = block_caGUX_info;
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _saFCi::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGUP_info" {
     block_caGUP_info:
         const _caGUP;
         const 2;
         const 30;
 },
 _caGUX() //  []
         { []
         }
     {offset
       caGUX: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caGUC() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGUX_info" {
     block_caGUX_info:
         const _caGUX;
         const 2;
         const 30;
 },
 _caGTj() //  [R1]
         { []
         }
     {offset
       caGTj: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caGVH; else goto caGVG;
       caGVH: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGVG: // global
           I64[Hp - 56] = sat_saFD2_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFCX_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFCY_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caGVB_info;
           R2 = Hp - 54;
           _saFCW::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFCW::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGTj_info" {
     block_caGTj_info:
         const _caGTj;
         const 3;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caGVB() //  [R1]
         { []
         }
     {offset
       caGVB: // global
           _saFzN::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caGVD_info;
           R2 = P64[Sp + 16];
           _saFD5::P64 = R1;
           R1 = _saFzN::P64;
           P64[Sp + 16] = _saFD5::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGVB_info" {
     block_caGVB_info:
         const _caGVB;
         const 3;
         const 30;
 },
 _caGVD() //  []
         { []
         }
     {offset
       caGVD: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caGVO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGVD_info" {
     block_caGVD_info:
         const _caGVD;
         const 2;
         const 30;
 },
 _caGVO() //  []
         { []
         }
     {offset
       caGVO: // global
           _saFD8::P64 = P64[Sp];
           I64[Sp] = block_caGVQ_info;
           R1 = _saFD8::P64;
           if (R1 & 7 != 0) goto uaGWV; else goto caGVS;
       uaGWV: // global
           call _caGVQ(R1) args: 0, res: 0, upd: 0;
       caGVS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caGVQ() //  [R1]
         { []
         }
     {offset
       caGVQ: // global
           if (R1 & 7 == 1) goto uaGWw; else goto caGW3;
       uaGWw: // global
           Sp = Sp + 16;
           call _caGU8() args: 0, res: 0, upd: 0;
       caGW3: // global
           I64[Sp - 8] = block_caGW1_info;
           _saFDc::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saFDc::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGWW; else goto caGW4;
       uaGWW: // global
           call _caGW1(R1) args: 0, res: 0, upd: 0;
       caGW4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGVQ_info" {
     block_caGVQ_info:
         const _caGVQ;
         const 1;
         const 30;
 },
 _caGW1() //  [R1]
         { []
         }
     {offset
       caGW1: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGWc; else goto caGWb;
       caGWc: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGWb: // global
           _saFDh::P64 = P64[R1 + 7];
           _saFDe::I64 = I64[R1 + 15];
           _saFDf::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saFDe::I64;
           I64[Hp] = _saFDf::I64;
           I64[Sp] = block_caGW9_info;
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _saFDh::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGW1_info" {
     block_caGW1_info:
         const _caGW1;
         const 2;
         const 30;
 },
 _caGW9() //  []
         { []
         }
     {offset
       caGW9: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caGVO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGW9_info" {
     block_caGW9_info:
         const _caGW9;
         const 2;
         const 30;
 },
 _caGV3() //  [R1]
         { []
         }
     {offset
       caGV3: // global
           P64[Sp] = R1;
           call _caGVa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGV3_info" {
     block_caGV3_info:
         const _caGV3;
         const 1;
         const 30;
 },
 _caGVa() //  []
         { []
         }
     {offset
       caGVa: // global
           _saFCG::P64 = P64[Sp];
           I64[Sp] = block_caGVc_info;
           R1 = _saFCG::P64;
           if (R1 & 7 != 0) goto uaGWQ; else goto caGVe;
       uaGWQ: // global
           call _caGVc(R1) args: 0, res: 0, upd: 0;
       caGVe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caGVc() //  [R1]
         { []
         }
     {offset
       caGVc: // global
           if (R1 & 7 == 1) goto uaGWz; else goto caGVp;
       uaGWz: // global
           Sp = Sp + 16;
           call _caGU8() args: 0, res: 0, upd: 0;
       caGVp: // global
           I64[Sp - 8] = block_caGVn_info;
           _saFCK::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp] = _saFCK::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaGWR; else goto caGVq;
       uaGWR: // global
           call _caGVn(R1) args: 0, res: 0, upd: 0;
       caGVq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGVc_info" {
     block_caGVc_info:
         const _caGVc;
         const 1;
         const 30;
 },
 _caGU8() //  []
         { []
         }
     {offset
       caGU8: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caGVn() //  [R1]
         { []
         }
     {offset
       caGVn: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caGVy; else goto caGVx;
       caGVy: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caGVx: // global
           _saFCP::P64 = P64[R1 + 7];
           _saFCM::I64 = I64[R1 + 15];
           _saFCN::I64 = I64[R1 + 23];
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = _saFCM::I64;
           I64[Hp] = _saFCN::I64;
           I64[Sp] = block_caGVv_info;
           R3 = P64[Sp + 16];
           R2 = Hp - 15;
           R1 = _saFCP::P64;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caGVn_info" {
     block_caGVn_info:
         const _caGVn;
         const 2;
         const 30;
 },
 _caGVv() //  []
         { []
         }
     {offset
       caGVv: // global
           P64[Sp + 8] = P64[Sp + 8];
           Sp = Sp + 8;
           call _caGVa() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caGVv_info" {
     block_caGVv_info:
         const _caGVv;
         const 2;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.695065914 UTC

[section ""data" . GHC.Event.Manager.loop4_closure" {
     GHC.Event.Manager.loop4_closure:
         const GHC.Base.Just_con_info;
         const GHC.Event.Internal.Forever_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.701896771 UTC

[section ""data" . GHC.Event.Manager.loop3_closure" {
     GHC.Event.Manager.loop3_closure:
         const GHC.Event.Manager.loop3_info;
         const 0;
 },
 sat_saFDI_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caH4F: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Event.Manager.loop5_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFDI_info" {
     sat_saFDI_info:
         const sat_saFDI_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaFU9_srt+288;
 },
 sat_saFDU_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caH50: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Event.Manager.loop5_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFDU_info" {
     sat_saFDU_info:
         const sat_saFDU_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaFU9_srt+288;
 },
 sat_saFE5_entry() //  [R1, R2, R3]
         { []
         }
     {offset
       caH5j: // global
           R4 = R3;
           R3 = R2;
           R2 = P64[R1 + 5];
           call GHC.Event.Manager.loop5_entry(R4,
                                              R3,
                                              R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFE5_info" {
     sat_saFE5_info:
         const sat_saFE5_entry;
         const 1;
         const 4294967305;
         const 12884901903;
         const SaFU9_srt+288;
 },
 GHC.Event.Manager.loop3_entry() //  [R2]
         { []
         }
     {offset
       caH5m: // global
           if ((Sp + -40) < SpLim) (likely: False) goto caH5n; else goto caH5o;
       caH5n: // global
           R2 = R2;
           R1 = GHC.Event.Manager.loop3_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caH5o: // global
           I64[Sp - 8] = block_caH4q_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaH68; else goto caH4r;
       uaH68: // global
           call _caH4q(R1) args: 0, res: 0, upd: 0;
       caH4r: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop3_info" {
     GHC.Event.Manager.loop3_info:
         const GHC.Event.Manager.loop3_entry;
         const 0;
         const 12884901902;
         const 8589934597;
         const SaFU9_srt+288;
 },
 _caH4q() //  [R1]
         { []
         }
     {offset
       caH4q: // global
           I64[Sp - 16] = block_caH4v_info;
           _saFDo::P64 = R1;
           _saFDu::P64 = P64[R1 + 39];
           R1 = P64[R1 + 7];
           P64[Sp - 8] = _saFDu::P64;
           P64[Sp] = _saFDo::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaH63; else goto caH4w;
       uaH63: // global
           call _caH4v(R1) args: 0, res: 0, upd: 0;
       caH4w: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH4q_info" {
     block_caH4q_info:
         const _caH4q;
         const 0;
         const 4294967326;
         const SaFU9_srt+288;
 },
 _caH4v() //  [R1]
         { []
         }
     {offset
       caH4v: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caH5s; else goto caH5r;
       caH5s: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caH5r: // global
           _saFDD::P64 = P64[R1 + 7];
           _saFDE::P64 = P64[R1 + 15];
           I64[Hp - 8] = sat_saFDI_info;
           P64[Hp] = P64[Sp + 16];
           I64[Sp - 16] = block_caH4I_info;
           R4 = Hp - 5;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = _saFDD::P64;
           R1 = _saFDE::P64;
           P64[Sp - 8] = _saFDE::P64;
           P64[Sp] = _saFDD::P64;
           Sp = Sp - 16;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH4v_info" {
     block_caH4v_info:
         const _caH4v;
         const 2;
         const 4294967326;
         const SaFU9_srt+288;
 },
 _caH4I() //  [R1]
         { []
         }
     {offset
       caH4I: // global
           I64[Sp] = block_caH4K_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaH64; else goto caH4L;
       uaH64: // global
           call _caH4K(R1) args: 0, res: 0, upd: 0;
       caH4L: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH4I_info" {
     block_caH4I_info:
         const _caH4I;
         const 4;
         const 4294967326;
         const SaFU9_srt+288;
 },
 _caH4K() //  [R1]
         { []
         }
     {offset
       caH4K: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto caH5x; else goto caH5D;
       caH5x: // global
           _saFDR::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp + 24] = block_caH5v_info;
           R1 = _saFDR::P64;
           P64[Sp + 32] = _saFDR::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaH65; else goto caH5y;
       uaH65: // global
           call _caH5v() args: 0, res: 0, upd: 0;
       caH5y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caH5D: // global
           I64[Sp] = block_caH4T_info;
           call stg_yield#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH4K_info" {
     block_caH4K_info:
         const _caH4K;
         const 4;
         const 4294967326;
         const SaFU9_srt+288;
 },
 _caH5v() //  []
         { []
         }
     {offset
       caH5v: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caH5v_info" {
     block_caH5v_info:
         const _caH5v;
         const 1;
         const 30;
 },
 _caH4T() //  []
         { []
         }
     {offset
       caH4T: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caH5G; else goto caH5F;
       caH5G: // global
           HpAlloc = 16;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caH5F: // global
           I64[Hp - 8] = sat_saFDU_info;
           P64[Hp] = P64[Sp + 32];
           I64[Sp] = block_caH53_info;
           R4 = Hp - 5;
           R3 = GHC.Base.Nothing_closure+1;
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 8];
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH4T_info" {
     block_caH4T_info:
         const _caH4T;
         const 4;
         const 4294967326;
         const SaFU9_srt+288;
 },
 _caH53() //  [R1]
         { []
         }
     {offset
       caH53: // global
           I64[Sp] = block_caH55_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaH66; else goto caH56;
       uaH66: // global
           call _caH55(R1) args: 0, res: 0, upd: 0;
       caH56: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH53_info" {
     block_caH53_info:
         const _caH53;
         const 4;
         const 4294967326;
         const SaFU9_srt+288;
 },
 _caH55() //  [R1]
         { []
         }
     {offset
       caH55: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caH5K; else goto caH5J;
       caH5K: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caH5J: // global
           if (%MO_S_Gt_W64(I64[R1 + 7], 0)) goto caH5N; else goto caH5W;
       caH5N: // global
           Hp = Hp - 16;
           _saFE3::P64 = P64[P64[Sp + 24] + 8];
           I64[Sp + 24] = block_caH5L_info;
           R1 = _saFE3::P64;
           P64[Sp + 32] = _saFE3::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaH67; else goto caH5O;
       uaH67: // global
           call _caH5L() args: 0, res: 0, upd: 0;
       caH5O: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caH5W: // global
           I64[Hp - 8] = sat_saFE5_info;
           P64[Hp] = P64[Sp + 32];
           _saFDD::P64 = P64[Sp + 16];
           I64[Sp + 16] = block_caH5T_info;
           R4 = Hp - 5;
           R3 = GHC.Event.Manager.loop4_closure+2;
           R2 = _saFDD::P64;
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH55_info" {
     block_caH55_info:
         const _caH55;
         const 4;
         const 4294967326;
         const SaFU9_srt+288;
 },
 _caH5L() //  []
         { []
         }
     {offset
       caH5L: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caH5L_info" {
     block_caH5L_info:
         const _caH5L;
         const 1;
         const 30;
 },
 _caH5T() //  []
         { []
         }
     {offset
       caH5T: // global
           _saFEb::P64 = P64[P64[Sp + 8] + 8];
           I64[Sp + 8] = block_caH5V_info;
           R1 = _saFEb::P64;
           P64[Sp + 16] = _saFEb::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaH69; else goto caH5Y;
       uaH69: // global
           call _caH5V() args: 0, res: 0, upd: 0;
       caH5Y: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH5T_info" {
     block_caH5T_info:
         const _caH5T;
         const 130;
         const 30;
 },
 _caH5V() //  []
         { []
         }
     {offset
       caH5V: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caH5V_info" {
     block_caH5V_info:
         const _caH5V;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.727700862 UTC

[section ""data" . GHC.Event.Manager.step_closure" {
     GHC.Event.Manager.step_closure:
         const GHC.Event.Manager.step_info;
         const 0;
 },
 GHC.Event.Manager.step_entry() //  [R2]
         { []
         }
     {offset
       caH7v: // global
           R2 = R2;
           call GHC.Event.Manager.loop3_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.step_info" {
     GHC.Event.Manager.step_info:
         const GHC.Event.Manager.step_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaFU9_srt+296;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.731341353 UTC

[section ""cstring" . lvl9_raAug_bytes" {
     lvl9_raAug_bytes:
         I8[] [71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,108,111,111,112,58,32,115,116,97,116,101,32,105,115,32,97,108,114,101,97,100,121,32,82,117,110,110,105,110,103]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.733999142 UTC

[section ""data" . GHC.Event.Manager.loop2_closure" {
     GHC.Event.Manager.loop2_closure:
         const GHC.Event.Manager.loop2_info;
         const 0;
         const 0;
         const 0;
 },
 GHC.Event.Manager.loop2_entry() //  [R1]
         { []
         }
     {offset
       caH7L: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caH7M; else goto caH7N;
       caH7M: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caH7N: // global
           (_caH7G::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caH7G::I64 == 0) goto caH7I; else goto caH7H;
       caH7I: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caH7H: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caH7G::I64;
           I64[Sp - 24] = block_caH7J_info;
           R2 = lvl9_raAug_bytes;
           Sp = Sp - 24;
           call GHC.CString.unpackCString#_entry(R2) args: 8, res: 8, upd: 24;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop2_info" {
     GHC.Event.Manager.loop2_info:
         const GHC.Event.Manager.loop2_entry;
         const 0;
         const 4294967317;
         const SaFU9_srt+168;
 },
 _caH7J() //  [R1]
         { []
         }
     {offset
       caH7J: // global
           R2 = R1;
           Sp = Sp + 8;
           call GHC.Err.errorWithoutStackTrace_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . block_caH7J_info" {
     block_caH7J_info:
         const _caH7J;
         const 0;
         const 4294967326;
         const SaFU9_srt+168;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.739702152 UTC

[section ""data" . GHC.Event.Manager.loop8_closure" {
     GHC.Event.Manager.loop8_closure:
         const (,)_con_info;
         const GHC.Event.Manager.Running_closure+2;
         const GHC.Event.Manager.Created_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.741459621 UTC

[section ""data" . GHC.Event.Manager.loop7_closure" {
     GHC.Event.Manager.loop7_closure:
         const (,)_con_info;
         const GHC.Event.Manager.Running_closure+2;
         const GHC.Event.Manager.Releasing_closure+4;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.744365809 UTC

[section ""data" . GHC.Event.Manager.loop6_closure" {
     GHC.Event.Manager.loop6_closure:
         const GHC.Event.Manager.loop6_info;
 },
 GHC.Event.Manager.loop6_entry() //  [R2]
         { []
         }
     {offset
       caH8h: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caH8i; else goto caH8j;
       caH8i: // global
           R2 = R2;
           R1 = GHC.Event.Manager.loop6_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caH8j: // global
           I64[Sp - 8] = block_caH89_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaH8x; else goto caH8a;
       uaH8x: // global
           call _caH89(R1) args: 0, res: 0, upd: 0;
       caH8a: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop6_info" {
     GHC.Event.Manager.loop6_info:
         const GHC.Event.Manager.loop6_entry;
         const 0;
         const 14;
         const 4294967301;
 },
 _caH89() //  [R1]
         { []
         }
     {offset
       caH89: // global
           _caH8g::P64 = R1 & 7;
           if (_caH8g::P64 == 1) goto caH8e; else goto uaH8w;
       caH8e: // global
           R1 = GHC.Event.Manager.loop8_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       uaH8w: // global
           if (_caH8g::P64 == 4) goto caH8f; else goto caH8d;
       caH8f: // global
           R1 = GHC.Event.Manager.loop7_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caH8d: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caH8p; else goto caH8o;
       caH8p: // global
           HpAlloc = 24;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caH8o: // global
           I64[Hp - 16] = (,)_con_info;
           P64[Hp - 8] = R1;
           P64[Hp] = R1;
           R1 = Hp - 15;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caH89_info" {
     block_caH89_info:
         const _caH89;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.758139304 UTC

[section ""data" . GHC.Event.Manager.loop1_closure" {
     GHC.Event.Manager.loop1_closure:
         const GHC.Event.Manager.loop1_info;
         const 0;
 },
 go_saFED_entry() //  [R1]
         { []
         }
     {offset
       caH9k: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caH9l; else goto uaH9E;
       caH9l: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       uaH9E: // global
           P64[Sp - 8] = R1;
           Sp = Sp - 16;
           call _caH97() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_saFED_info" {
     go_saFED_info:
         const go_saFED_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+296;
 },
 _caH97() //  []
         { []
         }
     {offset
       caH97: // global
           I64[Sp - 16] = block_caH9a_info;
           _saFED::P64 = P64[Sp + 8];
           _saFEi::P64 = P64[_saFED::P64 + 7];
           R2 = _saFEi::P64;
           P64[Sp - 8] = P64[_saFED::P64 + 15];
           P64[Sp] = _saFEi::P64;
           Sp = Sp - 16;
           call GHC.Event.Manager.loop3_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH97_info" {
     block_caH97_info:
         const _caH97;
         const 1;
         const 4294967326;
         const SaFU9_srt+296;
 },
 _caH9a() //  [R1]
         { []
         }
     {offset
       caH9a: // global
           I64[Sp] = block_caH9c_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaH9F; else goto caH9d;
       uaH9F: // global
           call _caH9c(R1) args: 0, res: 0, upd: 0;
       caH9d: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH9a_info" {
     block_caH9a_info:
         const _caH9a;
         const 3;
         const 4294967326;
         const SaFU9_srt+296;
 },
 _caH9c() //  [R1]
         { []
         }
     {offset
       caH9c: // global
           _caH9j::P64 = R1 & 7;
           if (_caH9j::P64 != 2) goto uaH9D; else goto caH9h;
       uaH9D: // global
           if (_caH9j::P64 != 4) goto caH9g; else goto caH9i;
       caH9g: // global
           R2 = P64[Sp + 16];
           Sp = Sp + 32;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
       caH9i: // global
           I64[Sp + 24] = block_caH9z_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
       caH9h: // global
           I64[Sp + 16] = block_caH97_info;
           Sp = Sp + 16;
           call stg_yield#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH9c_info" {
     block_caH9c_info:
         const _caH9c;
         const 3;
         const 4294967326;
         const SaFU9_srt+296;
 },
 _caH9z() //  []
         { []
         }
     {offset
       caH9z: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caH9z_info" {
     block_caH9z_info:
         const _caH9z;
         const 0;
         const 30;
 },
 sat_saFFr_entry() //  [R1, R2]
         { []
         }
     {offset
       caH9P: // global
           if ((Sp + -72) < SpLim) (likely: False) goto caH9Q; else goto caH9R;
       caH9Q: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caH9R: // global
           I64[Sp - 72] = block_caH9M_info;
           _saFEo::P64 = P64[R1 + 14];
           _saFEt::P64 = P64[R1 + 22];
           _saFEu::P64 = P64[R1 + 30];
           _saFEv::P64 = P64[R1 + 38];
           _saFEq::I64 = I64[R1 + 46];
           _saFEr::I64 = I64[R1 + 54];
           _saFEs::I64 = I64[R1 + 62];
           R1 = P64[R1 + 6];
           P64[Sp - 64] = _saFEo::P64;
           I64[Sp - 56] = _saFEq::I64;
           I64[Sp - 48] = _saFEr::I64;
           I64[Sp - 40] = _saFEs::I64;
           P64[Sp - 32] = _saFEt::P64;
           P64[Sp - 24] = _saFEu::P64;
           P64[Sp - 16] = _saFEv::P64;
           P64[Sp - 8] = R2;
           Sp = Sp - 72;
           if (R1 & 7 != 0) goto uaHaG; else goto caH9N;
       uaHaG: // global
           call _caH9M(R1) args: 0, res: 0, upd: 0;
       caH9N: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFFr_info" {
     sat_saFFr_info:
         const sat_saFFr_entry;
         const 12884901893;
         const 8;
         const 8589934597;
 },
 _caH9M() //  [R1]
         { []
         }
     {offset
       caH9M: // global
           _saFEo::P64 = P64[Sp + 8];
           _saFEv::P64 = P64[Sp + 56];
           _saFEO::P64 = P64[R1 + 7];
           _saFES::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saFEo::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saFEo::P64);
           I64[Sp] = block_caH9X_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saFEv::P64;
           P64[Sp + 8] = _saFES::P64;
           P64[Sp + 56] = _saFEO::P64;
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH9M_info" {
     block_caH9M_info:
         const _caH9M;
         const 904;
         const 30;
 },
 _caH9X() //  []
         { []
         }
     {offset
       caH9X: // global
           _saFES::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caH9Z_info;
           R2 = P64[Sp + 56];
           R1 = _saFES::P64;
           Sp = Sp + 8;
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH9X_info" {
     block_caH9X_info:
         const _caH9X;
         const 904;
         const 30;
 },
 _caH9Z() //  []
         { []
         }
     {offset
       caH9Z: // global
           I64[Sp] = block_caHa1_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH9Z_info" {
     block_caH9Z_info:
         const _caH9Z;
         const 2503;
         const 30;
 },
 _caHa1() //  []
         { []
         }
     {offset
       caHa1: // global
           _saFEr::I64 = I64[Sp + 16];
           _saFEt::P64 = P64[Sp + 32];
           (_saFF7::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saFFc::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFEr::I64)));
           I64[Sp + 16] = block_caHah_info;
           R1 = _saFEt::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaHaH; else goto caHai;
       uaHaH: // global
           call _caHah(R1) args: 0, res: 0, upd: 0;
       caHai: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHa1_info" {
     block_caHa1_info:
         const _caHa1;
         const 3527;
         const 30;
 },
 _caHah() //  [R1]
         { []
         }
     {offset
       caHah: // global
           _saFEs::I64 = I64[Sp + 8];
           _saFEL::P64 = P64[Sp + 40];
           if (R1 & 7 == 1) goto caHao; else goto caHas;
       caHao: // global
           (_saFFi::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFEs::I64)));
           R1 = _saFEL::P64;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
       caHas: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saFFq::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFEs::I64)));
           R1 = _saFEL::P64;
           Sp = Sp + 48;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHah_info" {
     block_caHah_info:
         const _caHah;
         const 965;
         const 30;
 },
 GHC.Event.Manager.loop1_entry() //  [R2]
         { []
         }
     {offset
       caHaI: // global
           if ((Sp + -80) < SpLim) (likely: False) goto caHaJ; else goto caHaK;
       caHaJ: // global
           R2 = R2;
           R1 = GHC.Event.Manager.loop1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHaK: // global
           I64[Sp - 8] = block_caH8R_info;
           R1 = R2;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHc2; else goto caH8S;
       uaHc2: // global
           call _caH8R(R1) args: 0, res: 0, upd: 0;
       caH8S: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop1_info" {
     GHC.Event.Manager.loop1_info:
         const GHC.Event.Manager.loop1_entry;
         const 0;
         const 30064771086;
         const 8589934597;
         const SaFU9_srt+296;
 },
 _caH8R() //  [R1]
         { []
         }
     {offset
       caH8R: // global
           I64[Sp - 72] = block_caH8W_info;
           _saFEi::P64 = R1;
           _saFEj::P64 = P64[R1 + 7];
           _saFEo::P64 = P64[R1 + 39];
           _saFEt::P64 = P64[R1 + 55];
           _saFEu::P64 = P64[R1 + 63];
           _saFEv::P64 = P64[R1 + 71];
           _saFEq::I64 = I64[R1 + 87];
           _saFEr::I64 = I64[R1 + 95];
           _saFEs::I64 = I64[R1 + 103];
           R1 = _saFEv::P64;
           P64[Sp - 64] = _saFEj::P64;
           P64[Sp - 56] = _saFEo::P64;
           I64[Sp - 48] = _saFEq::I64;
           I64[Sp - 40] = _saFEr::I64;
           I64[Sp - 32] = _saFEs::I64;
           P64[Sp - 24] = _saFEt::P64;
           P64[Sp - 16] = _saFEu::P64;
           P64[Sp - 8] = _saFEv::P64;
           P64[Sp] = _saFEi::P64;
           Sp = Sp - 72;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH8R_info" {
     block_caH8R_info:
         const _caH8R;
         const 0;
         const 21474836510;
         const SaFU9_srt+296;
 },
 _caH8W() //  []
         { []
         }
     {offset
       caH8W: // global
           I64[Sp] = block_caH8Y_info;
           R2 = GHC.Event.Manager.loop6_closure+1;
           R1 = P64[Sp + 16];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH8W_info" {
     block_caH8W_info:
         const _caH8W;
         const 1801;
         const 21474836510;
         const SaFU9_srt+296;
 },
 _caH8Y() //  [R1]
         { []
         }
     {offset
       caH8Y: // global
           I64[Sp] = block_caH90_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaHc0; else goto caH91;
       uaHc0: // global
           call _caH90(R1) args: 0, res: 0, upd: 0;
       caH91: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caH8Y_info" {
     block_caH8Y_info:
         const _caH8Y;
         const 1801;
         const 21474836510;
         const SaFU9_srt+296;
 },
 _caH90() //  [R1]
         { []
         }
     {offset
       caH90: // global
           _saFEi::P64 = P64[Sp + 72];
           _saFEj::P64 = P64[Sp + 8];
           _saFEo::P64 = P64[Sp + 16];
           _saFEq::I64 = I64[Sp + 24];
           _saFEr::I64 = I64[Sp + 32];
           _saFEs::I64 = I64[Sp + 40];
           _saFEt::P64 = P64[Sp + 48];
           _saFEu::P64 = P64[Sp + 56];
           _saFEv::P64 = P64[Sp + 64];
           _caHbJ::P64 = R1 & 7;
           if (_caHbJ::P64 < 4) goto uaHbX; else goto uaHbZ;
       uaHbX: // global
           if (_caHbJ::P64 < 3) goto uaHbY; else goto caHbE;
       uaHbY: // global
           _saFEC::P64 = R1;
           if (_caHbJ::P64 < 2) goto caHaP; else goto caHaX;
       caHaX: // global
           I64[Sp + 8] = block_caHaV_info;
           R1 = _saFEj::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaHc1; else goto caHaY;
       uaHc1: // global
           call _caHaV(R1) args: 0, res: 0, upd: 0;
       caHaY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caHbE: // global
           R2 = _saFEi::P64;
           Sp = Sp + 80;
           call GHC.Event.Manager.cleanup1_entry(R2) args: 8, res: 0, upd: 8;
       uaHbZ: // global
           _saFEC::P64 = R1;
           if (_caHbJ::P64 < 5) goto caHaP; else goto caHbI;
       caHaP: // global
           Hp = Hp + 96;
           if (Hp > HpLim) (likely: False) goto caHaS; else goto caHaR;
       caHaS: // global
           HpAlloc = 96;
           R1 = _saFEC::P64;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHaR: // global
           I64[Hp - 88] = go_saFED_info;
           P64[Hp - 80] = _saFEi::P64;
           P64[Hp - 72] = _saFEv::P64;
           I64[Hp - 64] = sat_saFFr_info;
           P64[Hp - 56] = _saFEj::P64;
           P64[Hp - 48] = _saFEo::P64;
           P64[Hp - 40] = _saFEt::P64;
           P64[Hp - 32] = _saFEu::P64;
           P64[Hp - 24] = _saFEv::P64;
           I64[Hp - 16] = _saFEq::I64;
           I64[Hp - 8] = _saFEr::I64;
           I64[Hp] = _saFEs::I64;
           R2 = Hp - 62;
           R1 = Hp - 87;
           Sp = Sp + 80;
           call stg_catch#(R2, R1) args: 8, res: 0, upd: 8;
       caHbI: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 80;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caH90_info" {
     block_caH90_info:
         const _caH90;
         const 1801;
         const 21474836510;
         const SaFU9_srt+296;
 },
 _caHaV() //  [R1]
         { []
         }
     {offset
       caHaV: // global
           _saFEo::P64 = P64[Sp + 8];
           _saFEv::P64 = P64[Sp + 56];
           _saFFt::P64 = P64[R1 + 7];
           _saFFx::P64 = P64[R1 + 39];
           call MO_WriteBarrier();
           P64[_saFEo::P64 + 8] = GHC.Event.Manager.Finished_closure+5;
           call "ccall" arg hints:  [PtrHint,
                                     PtrHint]  result hints:  [] dirty_MUT_VAR(BaseReg, _saFEo::P64);
           I64[Sp + 8] = block_caHb5_info;
           R2 = GHC.Tuple.()_closure+1;
           R1 = _saFEv::P64;
           P64[Sp + 56] = _saFFx::P64;
           P64[Sp + 64] = _saFFt::P64;
           Sp = Sp + 8;
           call stg_tryPutMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHaV_info" {
     block_caHaV_info:
         const _caHaV;
         const 9096;
         const 4294967326;
         const SaFU9_srt+312;
 },
 _caHb5() //  []
         { []
         }
     {offset
       caHb5: // global
           I64[Sp] = block_caHb7_info;
           R2 = P64[Sp + 56];
           R1 = P64[Sp + 48];
           call stg_ap_pv_fast(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHb5_info" {
     block_caHb5_info:
         const _caHb5;
         const 455;
         const 4294967326;
         const SaFU9_srt+312;
 },
 _caHb7() //  []
         { []
         }
     {offset
       caHb7: // global
           I64[Sp] = block_caHb9_info;
           R2 = GHC.Event.Control.closeControl2_closure+1;
           R1 = P64[Sp + 40];
           call stg_atomicModifyMutVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHb7_info" {
     block_caHb7_info:
         const _caHb7;
         const 6599;
         const 4294967326;
         const SaFU9_srt+312;
 },
 _caHb9() //  []
         { []
         }
     {offset
       caHb9: // global
           _saFEr::I64 = I64[Sp + 16];
           _saFEt::P64 = P64[Sp + 32];
           (_saFFM::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(I64[Sp + 8])));
           (_saFFR::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFEr::I64)));
           I64[Sp + 16] = block_caHbp_info;
           R1 = _saFEt::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaHc3; else goto caHbq;
       uaHc3: // global
           call _caHbp(R1) args: 0, res: 0, upd: 0;
       caHbq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHb9_info" {
     block_caHb9_info:
         const _caHb9;
         const 7623;
         const 4294967326;
         const SaFU9_srt+312;
 },
 _caHbp() //  [R1]
         { []
         }
     {offset
       caHbp: // global
           _saFEs::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caHbw; else goto caHbA;
       caHbw: // global
           (_saFFX::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFEs::I64)));
           R1 = GHC.Event.Manager.loop2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
       caHbA: // global
           call "ccall" arg hints:  [‘signed’]  result hints:  [] setIOManagerWakeupFd((-1));
           (_saFG6::I64) = call "ccall" arg hints:  [‘signed’]  result hints:  [‘signed’] close(%MO_SS_Conv_W32_W64(%MO_SS_Conv_W64_W32(_saFEs::I64)));
           R1 = GHC.Event.Manager.loop2_closure;
           Sp = Sp + 48;
           call stg_ap_0_fast(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHbp_info" {
     block_caHbp_info:
         const _caHbp;
         const 1989;
         const 4294967326;
         const SaFU9_srt+312;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.796877753 UTC

[section ""data" . GHC.Event.Manager.loop_closure" {
     GHC.Event.Manager.loop_closure:
         const GHC.Event.Manager.loop_info;
         const 0;
 },
 GHC.Event.Manager.loop_entry() //  [R2]
         { []
         }
     {offset
       caHe0: // global
           R2 = R2;
           call GHC.Event.Manager.loop1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.loop_info" {
     GHC.Event.Manager.loop_info:
         const GHC.Event.Manager.loop_entry;
         const 0;
         const 4294967310;
         const 8589934597;
         const SaFU9_srt+304;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.800376625 UTC

[section ""data" . GHC.Event.Manager.closeFd_4_closure" {
     GHC.Event.Manager.closeFd_4_closure:
         const GHC.Event.Manager.closeFd_4_info;
 },
 GHC.Event.Manager.closeFd_4_entry() //  []
         { []
         }
     {offset
       caHeb: // global
           R1 = GHC.Tuple.()_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_4_info" {
     GHC.Event.Manager.closeFd_4_info:
         const GHC.Event.Manager.closeFd_4_entry;
         const 0;
         const 14;
         const 4294967299;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.810659629 UTC

[section ""data" . GHC.Event.Manager.$wcloseFd__closure" {
     GHC.Event.Manager.$wcloseFd__closure:
         const GHC.Event.Manager.$wcloseFd__info;
         const 0;
 },
 $wgo_saFGq_entry() //  [R1, R2]
         { []
         }
     {offset
       caHeO: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caHeP; else goto caHeQ;
       caHeP: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHeQ: // global
           I64[Sp - 24] = block_caHeH_info;
           _saFGq::P64 = R1;
           _saFGb::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saFGb::I64;
           P64[Sp - 8] = _saFGq::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaHfd; else goto caHeI;
       uaHfd: // global
           call _caHeH(R1) args: 0, res: 0, upd: 0;
       caHeI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saFGq_info" {
     $wgo_saFGq_info:
         const $wgo_saFGq_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caHeH() //  [R1]
         { []
         }
     {offset
       caHeH: // global
           if (R1 & 7 == 1) goto caHeL; else goto caHeM;
       caHeL: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHeM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHeY; else goto caHeX;
       caHeY: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHeX: // global
           _saFGu::P64 = P64[R1 + 6];
           _saFGv::P64 = P64[R1 + 14];
           _saFGt::I64 = I64[R1 + 22];
           if (_saFGt::I64 == I64[Sp + 8]) goto caHfc; else goto caHf6;
       caHfc: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFGu::P64;
           R3 = _saFGv::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHf6: // global
           Hp = Hp - 16;
           I64[Sp] = block_caHf2_info;
           R2 = _saFGv::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saFGu::P64;
           I64[Sp + 16] = _saFGt::I64;
           call $wgo_saFGq_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHeH_info" {
     block_caHeH_info:
         const _caHeH;
         const 66;
         const 30;
 },
 _caHf2() //  [R1, R2, R3]
         { []
         }
     {offset
       caHf2: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHf9; else goto caHf8;
       caHf9: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caHf8: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHf2_info" {
     block_caHf2_info:
         const _caHf2;
         const 130;
         const 30;
 },
 sat_saFHd_entry() //  [R1]
         { []
         }
     {offset
       caHfR: // global
           R2 = P64[R1 + 7];
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFHd_info" {
     sat_saFHd_info:
         const sat_saFHd_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFHe_entry() //  [R1]
         { []
         }
     {offset
       caHg1: // global
           R2 = P64[R1 + 7];
           call GHC.Event.Manager.closeFd_2_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFHe_info" {
     sat_saFHe_info:
         const sat_saFHe_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.$wcloseFd__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caHg4: // global
           if ((Sp + -72) < SpLim) (likely: False) goto caHg5; else goto caHg6;
       caHg5: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.$wcloseFd__closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caHg6: // global
           I64[Sp - 24] = block_caHeo_info;
           R1 = P64[R3 + 8];
           P64[Sp - 16] = R2;
           I64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaHh7; else goto caHep;
       uaHh7: // global
           call _caHeo(R1) args: 0, res: 0, upd: 0;
       caHep: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.$wcloseFd__info" {
     GHC.Event.Manager.$wcloseFd__info:
         const GHC.Event.Manager.$wcloseFd__entry;
         const 0;
         const 141016661229582;
         const 17179869206;
         const SaFU9_srt+200;
 },
 _caHeo() //  [R1]
         { []
         }
     {offset
       caHeo: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHg9; else goto caHg8;
       caHg9: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHg8: // global
           _saFGb::I64 = I64[Sp + 16];
           _saFGh::P64 = P64[R1 + 7];
           _saFGj::P64 = P64[R1 + 15];
           _saFGi::I64 = I64[R1 + 23];
           _saFGk::I64 = _saFGb::I64 & (I64[_saFGh::P64 + 8] - 1);
           _saFGp::P64 = P64[(_saFGh::P64 + 24) + (_saFGk::I64 << 3)];
           I64[Hp - 8] = $wgo_saFGq_info;
           I64[Hp] = _saFGb::I64;
           I64[Sp - 32] = block_caHfe_info;
           R2 = _saFGp::P64;
           R1 = Hp - 7;
           I64[Sp - 24] = _saFGi::I64;
           P64[Sp - 16] = _saFGj::P64;
           I64[Sp - 8] = _saFGk::I64;
           P64[Sp] = _saFGh::P64;
           Sp = Sp - 32;
           call $wgo_saFGq_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHeo_info" {
     block_caHeo_info:
         const _caHeo;
         const 130;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caHfe() //  [R1, R2, R3]
         { []
         }
     {offset
       caHfe: // global
           I64[Sp - 16] = block_caHga_info;
           _saFGE::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saFGE::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHh4; else goto caHgx;
       uaHh4: // global
           call _caHga(R1) args: 0, res: 0, upd: 0;
       caHgx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHfe_info" {
     block_caHfe_info:
         const _caHfe;
         const 2374;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caHga() //  [R1]
         { []
         }
     {offset
       caHga: // global
           if (R1 & 7 == 1) goto caHgD; else goto caHgI;
       caHgD: // global
           P64[Sp + 48] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saFGH() args: 0, res: 0, upd: 0;
       caHgI: // global
           _saFGh::P64 = P64[Sp + 48];
           _saFGk::I64 = I64[Sp + 40];
           _saFGE::P64 = P64[Sp + 16];
           _saFGG::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saFGh::P64 + 24) + (_saFGk::I64 << 3)] = _saFGG::P64;
           I64[_saFGh::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saFGh::P64 + 24) + ((I64[_saFGh::P64 + 8] << 3) + (_saFGk::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caHgG_info;
           _saFHf::P64 = R1;
           R1 = _saFGE::P64;
           P64[Sp + 48] = _saFHf::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaHh8; else goto caHgJ;
       uaHh8: // global
           call _caHgG(R1) args: 0, res: 0, upd: 0;
       caHgJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHga_info" {
     block_caHga_info:
         const _caHga;
         const 9480;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caHgG() //  [R1]
         { []
         }
     {offset
       caHgG: // global
           _saFHf::P64 = P64[Sp + 32];
           if (R1 & 7 == 1) goto caHgP; else goto caHgT;
       caHgP: // global
           P64[Sp + 32] = _saFHf::P64;
           Sp = Sp + 32;
           goto uaHhb;
       caHgT: // global
           _saFGi::I64 = I64[Sp + 8];
           _saFGj::P64 = P64[Sp + 16];
           I64[_saFGi::I64] = I64[_saFGi::I64] - 1;
           call MO_Touch(_saFGj::P64);
           P64[Sp + 32] = _saFHf::P64;
           Sp = Sp + 32;
           goto uaHhb;
       uaHhb: // global
           call _saFGH() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHgG_info" {
     block_caHgG_info:
         const _caHgG;
         const 2374;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _saFGH() //  []
         { []
         }
     {offset
       saFGH: // global
           _saFGJ::P64 = P64[Sp];
           I64[Sp] = block_caHfl_info;
           R1 = _saFGJ::P64;
           if (R1 & 7 != 0) goto uaHhc; else goto caHfm;
       uaHhc: // global
           call _caHfl(R1) args: 0, res: 0, upd: 0;
       caHfm: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caHfl() //  [R1]
         { []
         }
     {offset
       caHfl: // global
           if (R1 & 7 == 1) goto caHgg; else goto caHgi;
       caHgg: // global
           R1 = GHC.Event.Manager.closeFd_4_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caHgi: // global
           I64[Sp - 8] = block_caHfr_info;
           _saFGL::P64 = P64[R1 + 6];
           R2 = _saFGL::P64;
           P64[Sp] = _saFGL::P64;
           Sp = Sp - 8;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHfl_info" {
     block_caHfl_info:
         const _caHfl;
         const 130;
         const 279172874270;
         const SaFU9_srt+200;
 },
 _caHfr() //  [R1]
         { []
         }
     {offset
       caHfr: // global
           if (R1 == 0) goto caHgt; else goto caHgl;
       caHgt: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHgw; else goto caHgv;
       caHgw: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caHgv: // global
           I64[Hp - 8] = sat_saFHe_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caHgl: // global
           I64[Sp] = block_caHfv_info;
           _saFGM::I64 = R1;
           R1 = P64[Sp + 16];
           I64[Sp + 16] = _saFGM::I64;
           if (R1 & 7 != 0) goto uaHh5; else goto caHfw;
       uaHh5: // global
           call _caHfv(R1) args: 0, res: 0, upd: 0;
       caHfw: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHfr_info" {
     block_caHfr_info:
         const _caHfr;
         const 259;
         const 4294967326;
         const SaFU9_srt+200;
 },
 _caHfv() //  [R1]
         { []
         }
     {offset
       caHfv: // global
           I64[Sp] = block_caHfA_info;
           R1 = P64[R1 + 7];
           if (R1 & 7 != 0) goto uaHh6; else goto caHfB;
       uaHh6: // global
           call _caHfA(R1) args: 0, res: 0, upd: 0;
       caHfB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHfv_info" {
     block_caHfv_info:
         const _caHfv;
         const 387;
         const 4294967326;
         const SaFU9_srt+200;
 },
 _caHfA() //  [R1]
         { []
         }
     {offset
       caHfA: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHgp; else goto caHgo;
       caHgp: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHgo: // global
           _saFH2::P64 = P64[R1 + 7];
           _saFH4::P64 = P64[R1 + 23];
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 16] & 7;
           I64[Hp - 8] = GHC.Int.I32#_con_info;
           I64[Hp] = I64[Sp + 24];
           I64[Sp] = block_caHfK_info;
           R5 = GHC.Event.Internal.evtNothing_closure;
           R4 = Hp - 23;
           R3 = Hp - 7;
           R2 = _saFH2::P64;
           R1 = _saFH4::P64;
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHfA_info" {
     block_caHfA_info:
         const _caHfA;
         const 387;
         const 4294967326;
         const SaFU9_srt+200;
 },
 _caHfK() //  [R1]
         { []
         }
     {offset
       caHfK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHgs; else goto caHgr;
       caHgs: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHgr: // global
           I64[Hp - 8] = sat_saFHd_info;
           P64[Hp] = P64[Sp + 8];
           R1 = Hp - 7;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHfK_info" {
     block_caHfK_info:
         const _caHfK;
         const 387;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.840868461 UTC

[section ""data" . GHC.Event.Manager.closeFd_1_closure" {
     GHC.Event.Manager.closeFd_1_closure:
         const GHC.Event.Manager.closeFd_1_info;
         const 0;
 },
 GHC.Event.Manager.closeFd_1_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caHj7: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caHjb; else goto caHjc;
       caHjb: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.closeFd_1_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caHjc: // global
           I64[Sp - 24] = block_caHj4_info;
           R1 = R3;
           P64[Sp - 16] = R2;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaHjk; else goto caHj5;
       uaHjk: // global
           call _caHj4(R1) args: 0, res: 0, upd: 0;
       caHj5: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd_1_info" {
     GHC.Event.Manager.closeFd_1_info:
         const GHC.Event.Manager.closeFd_1_entry;
         const 0;
         const 12884901902;
         const 17179869207;
         const SaFU9_srt+320;
 },
 _caHj4() //  [R1]
         { []
         }
     {offset
       caHj4: // global
           I64[Sp] = block_caHja_info;
           _saFHu::P64 = P64[R1 + 7];
           R1 = P64[Sp + 16];
           P64[Sp + 16] = _saFHu::P64;
           if (R1 & 7 != 0) goto uaHjj; else goto caHje;
       uaHjj: // global
           call _caHja(R1) args: 0, res: 0, upd: 0;
       caHje: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHj4_info" {
     block_caHj4_info:
         const _caHj4;
         const 2;
         const 4294967326;
         const SaFU9_srt+320;
 },
 _caHja() //  [R1]
         { []
         }
     {offset
       caHja: // global
           R4 = I64[R1 + 7];
           R3 = P64[Sp + 16];
           R2 = P64[Sp + 8];
           Sp = Sp + 24;
           call GHC.Event.Manager.$wcloseFd__entry(R4,
                                                   R3,
                                                   R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHja_info" {
     block_caHja_info:
         const _caHja;
         const 2;
         const 4294967326;
         const SaFU9_srt+320;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.848043451 UTC

[section ""data" . GHC.Event.Manager.closeFd__closure" {
     GHC.Event.Manager.closeFd__closure:
         const GHC.Event.Manager.closeFd__info;
         const 0;
 },
 GHC.Event.Manager.closeFd__entry() //  [R2, R3, R4]
         { []
         }
     {offset
       caHjE: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.closeFd_1_entry(R4,
                                                  R3,
                                                  R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.closeFd__info" {
     GHC.Event.Manager.closeFd__info:
         const GHC.Event.Manager.closeFd__entry;
         const 0;
         const 4294967310;
         const 17179869207;
         const SaFU9_srt+328;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.851821445 UTC

[section ""data" . lvl10_raAuh_closure" {
     lvl10_raAuh_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.False_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.853671791 UTC

[section ""data" . lvl11_raAui_closure" {
     lvl11_raAui_closure:
         const (,)_con_info;
         const GHC.Types.False_closure+1;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.85538843 UTC

[section ""data" . lvl12_raAuj_closure" {
     lvl12_raAuj_closure:
         const (,)_con_info;
         const GHC.Types.True_closure+2;
         const GHC.Types.True_closure+2;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:41.88681034 UTC

[section ""data" . registerFd1_raAuk_closure" {
     registerFd1_raAuk_closure:
         const registerFd1_raAuk_info;
         const 0;
 },
 $wgo_saFIY_entry() //  [R1, R2]
         { []
         }
     {offset
       caHm2: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caHm3; else goto caHm4;
       caHm3: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHm4: // global
           I64[Sp - 24] = block_caHlV_info;
           _saFIY::P64 = R1;
           _saFI5::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saFI5::I64;
           P64[Sp - 8] = _saFIY::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaHmr; else goto caHlW;
       uaHmr: // global
           call _caHlV(R1) args: 0, res: 0, upd: 0;
       caHlW: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saFIY_info" {
     $wgo_saFIY_info:
         const $wgo_saFIY_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caHlV() //  [R1]
         { []
         }
     {offset
       caHlV: // global
           if (R1 & 7 == 1) goto caHlZ; else goto caHm0;
       caHlZ: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHm0: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHmc; else goto caHmb;
       caHmc: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHmb: // global
           _saFJ2::P64 = P64[R1 + 6];
           _saFJ3::P64 = P64[R1 + 14];
           _saFJ1::I64 = I64[R1 + 22];
           if (_saFJ1::I64 == I64[Sp + 8]) goto caHmq; else goto caHmk;
       caHmq: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFJ2::P64;
           R3 = _saFJ3::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHmk: // global
           Hp = Hp - 16;
           I64[Sp] = block_caHmg_info;
           R2 = _saFJ3::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saFJ2::P64;
           I64[Sp + 16] = _saFJ1::I64;
           call $wgo_saFIY_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHlV_info" {
     block_caHlV_info:
         const _caHlV;
         const 66;
         const 30;
 },
 _caHmg() //  [R1, R2, R3]
         { []
         }
     {offset
       caHmg: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHmn; else goto caHmm;
       caHmn: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caHmm: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHmg_info" {
     block_caHmg_info:
         const _caHmg;
         const 130;
         const 30;
 },
 $wgo_saFJN_entry() //  [R1, R2]
         { []
         }
     {offset
       caHnc: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caHnd; else goto caHne;
       caHnd: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHne: // global
           I64[Sp - 24] = block_caHn5_info;
           _saFJN::P64 = R1;
           _saFI5::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 16] = _saFI5::I64;
           P64[Sp - 8] = _saFJN::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaHnB; else goto caHn6;
       uaHnB: // global
           call _caHn5(R1) args: 0, res: 0, upd: 0;
       caHn6: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saFJN_info" {
     $wgo_saFJN_info:
         const $wgo_saFJN_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caHn5() //  [R1]
         { []
         }
     {offset
       caHn5: // global
           if (R1 & 7 == 1) goto caHn9; else goto caHna;
       caHn9: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHna: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHnm; else goto caHnl;
       caHnm: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHnl: // global
           _saFJR::P64 = P64[R1 + 6];
           _saFJS::P64 = P64[R1 + 14];
           _saFJQ::I64 = I64[R1 + 22];
           if (_saFJQ::I64 == I64[Sp + 8]) goto caHnA; else goto caHnu;
       caHnA: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFJR::P64;
           R3 = _saFJS::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHnu: // global
           Hp = Hp - 16;
           I64[Sp] = block_caHnq_info;
           R2 = _saFJS::P64;
           R1 = P64[Sp + 16];
           P64[Sp + 8] = _saFJR::P64;
           I64[Sp + 16] = _saFJQ::I64;
           call $wgo_saFJN_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHn5_info" {
     block_caHn5_info:
         const _caHn5;
         const 66;
         const 30;
 },
 _caHnq() //  [R1, R2, R3]
         { []
         }
     {offset
       caHnq: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHnx; else goto caHnw;
       caHnx: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caHnw: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHnq_info" {
     block_caHnq_info:
         const _caHnq;
         const 130;
         const 30;
 },
 $wio_saFIp_entry() //  [R1, R2]
         { []
         }
     {offset
       caHnJ: // global
           _saFIq::P64 = R2;
           _saFIp::P64 = R1;
           if ((Sp + -80) < SpLim) (likely: False) goto caHnK; else goto caHnL;
       caHnL: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caHnN; else goto caHnM;
       caHnN: // global
           HpAlloc = 64;
           goto caHnK;
       caHnK: // global
           R2 = _saFIq::P64;
           R1 = _saFIp::P64;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHnM: // global
           _saFHW::P64 = P64[_saFIp::P64 + 6];
           _saFHY::P64 = P64[_saFIp::P64 + 14];
           _saFHZ::P64 = P64[_saFIp::P64 + 22];
           _saFI4::P64 = P64[_saFIp::P64 + 30];
           _saFIa::P64 = P64[_saFIp::P64 + 38];
           _saFI3::I64 = I64[_saFIp::P64 + 46];
           _saFI5::I64 = I64[_saFIp::P64 + 54];
           _saFI9::I64 = I64[_saFIp::P64 + 62];
           I64[Hp - 56] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 48] = _saFIa::P64;
           I64[Hp - 40] = _saFI5::I64;
           I64[Hp - 32] = _saFI3::I64;
           I64[Hp - 24] = _saFI9::I64;
           I64[Hp - 16] = :_con_info;
           P64[Hp - 8] = Hp - 55;
           P64[Hp] = GHC.Types.[]_closure+1;
           I64[Sp - 64] = block_caHkY_info;
           R5 = _saFIq::P64;
           R4 = Hp - 14;
           R3 = _saFI5::I64;
           R2 = GHC.Base.++_closure+2;
           P64[Sp - 56] = _saFHW::P64;
           P64[Sp - 48] = _saFHY::P64;
           P64[Sp - 40] = _saFHZ::P64;
           P64[Sp - 32] = _saFI4::P64;
           I64[Sp - 24] = _saFI5::I64;
           I64[Sp - 16] = _saFI9::I64;
           P64[Sp - 8] = _saFIq::P64;
           Sp = Sp - 64;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saFIp_info" {
     $wio_saFIp_info:
         const $wio_saFIp_entry;
         const 12884901893;
         const 4294967304;
         const 8589934597;
         const SaFU9_srt+248;
 },
 _caHkY() //  [R1]
         { []
         }
     {offset
       caHkY: // global
           I64[Sp - 8] = block_caHnC_info;
           _saFIw::P64 = R1;
           R1 = R1;
           P64[Sp] = _saFIw::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHqb; else goto caHnD;
       uaHqb: // global
           call _caHnC(R1) args: 0, res: 0, upd: 0;
       caHnD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHkY_info" {
     block_caHkY_info:
         const _caHkY;
         const 3079;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caHnC() //  [R1]
         { []
         }
     {offset
       caHnC: // global
           if (R1 & 7 == 1) goto caHnG; else goto caHnH;
       caHnG: // global
           I64[Sp] = 0;
           call _saFIx() args: 0, res: 0, upd: 0;
       caHnH: // global
           I64[Sp] = block_caHpF_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHnC_info" {
     block_caHnC_info:
         const _caHnC;
         const 6152;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caHpF() //  [R1]
         { []
         }
     {offset
       caHpF: // global
           I64[Sp] = R1;
           call _saFIx() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHpF_info" {
     block_caHpF_info:
         const _caHpF;
         const 6152;
         const 30;
 },
 _saFIx() //  []
         { []
         }
     {offset
       saFIx: // global
           _saFIz::I64 = I64[Sp] | I64[Sp + 56];
           _saFIA::I64 = _saFIz::I64 & 8;
           if (_saFIA::I64 != 0) goto uaHq4; else goto uaHq3;
       uaHq4: // global
           I64[Sp + 32] = _saFIA::I64;
           I64[Sp + 56] = _saFIz::I64;
           call _caHlc() args: 0, res: 0, upd: 0;
       uaHq3: // global
           I64[Sp + 24] = _saFIA::I64;
           I64[Sp + 56] = _saFIz::I64;
           Sp = Sp + 8;
           call _caHmu() args: 0, res: 0, upd: 0;
     }
 },
 _caHlc() //  []
         { []
         }
     {offset
       caHlc: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHnU; else goto caHnT;
       caHnU: // global
           HpAlloc = 32;
           I64[Sp - 8] = block_caHlb_info;
           R1 = I64[Sp + 32];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caHnT: // global
           _saFIy::I64 = I64[Sp];
           _saFIz::I64 = I64[Sp + 56];
           if (_saFIy::I64 == _saFIz::I64) goto caHnW; else goto caHnX;
       caHnW: // global
           Hp = Hp - 32;
           R1 = lvl11_raAui_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caHnX: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = _saFIz::I64 & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saFIy::I64 & 7;
           I64[Sp] = block_caHlq_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = P64[Sp + 40];
           R2 = P64[Sp + 16];
           R1 = P64[Sp + 24];
           I64[Sp - 8] = stg_ap_v_info;
           Sp = Sp - 8;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 _caHlb() //  [R1]
         { []
         }
     {offset
       caHlb: // global
           I64[Sp + 40] = R1;
           Sp = Sp + 8;
           call _caHlc() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHlb_info" {
     block_caHlb_info:
         const _caHlb;
         const 13385;
         const 30;
 },
 _caHlq() //  [R1]
         { []
         }
     {offset
       caHlq: // global
           I64[Sp] = block_caHls_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaHqd; else goto caHlt;
       uaHqd: // global
           call _caHls(R1) args: 0, res: 0, upd: 0;
       caHlt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHlq_info" {
     block_caHlq_info:
         const _caHlq;
         const 8072;
         const 30;
 },
 _caHls() //  [R1]
         { []
         }
     {offset
       caHls: // global
           if (R1 & 7 == 1) goto caHo1; else goto caHoJ;
       caHo1: // global
           I64[Sp + 40] = block_caHlx_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaHqe; else goto caHly;
       uaHqe: // global
           call _caHlx(R1) args: 0, res: 0, upd: 0;
       caHly: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caHoJ: // global
           R1 = lvl12_raAuj_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHls_info" {
     block_caHls_info:
         const _caHls;
         const 8072;
         const 30;
 },
 _caHlx() //  [R1]
         { []
         }
     {offset
       caHlx: // global
           _saFIq::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caHo4; else goto caHoD;
       caHo4: // global
           I64[Sp] = block_caHlC_info;
           R1 = P64[_saFIq::P64 + 8];
           if (R1 & 7 != 0) goto uaHqf; else goto caHlD;
       uaHqf: // global
           call _caHlC(R1) args: 0, res: 0, upd: 0;
       caHlD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caHoD: // global
           I64[Sp + 24] = block_caHoB_info;
           R5 = _saFIq::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHlx_info" {
     block_caHlx_info:
         const _caHlx;
         const 195;
         const 30;
 },
 _caHlC() //  [R1]
         { []
         }
     {offset
       caHlC: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHo7; else goto caHo6;
       caHo7: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHo6: // global
           _saFI5::I64 = I64[Sp + 8];
           _saFIP::P64 = P64[R1 + 7];
           _saFIR::P64 = P64[R1 + 15];
           _saFIQ::I64 = I64[R1 + 23];
           _saFIS::I64 = _saFI5::I64 & (I64[_saFIP::P64 + 8] - 1);
           _saFIX::P64 = P64[(_saFIP::P64 + 24) + (_saFIS::I64 << 3)];
           I64[Hp - 8] = $wgo_saFIY_info;
           I64[Hp] = _saFI5::I64;
           I64[Sp - 8] = block_caHo8_info;
           R2 = _saFIX::P64;
           R1 = Hp - 7;
           I64[Sp] = _saFIS::I64;
           P64[Sp + 8] = _saFIR::P64;
           I64[Sp + 16] = _saFIQ::I64;
           P64[Sp + 24] = _saFIP::P64;
           Sp = Sp - 8;
           call $wgo_saFIY_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHlC_info" {
     block_caHlC_info:
         const _caHlC;
         const 451;
         const 30;
 },
 _caHo8() //  [R1, R2, R3]
         { []
         }
     {offset
       caHo8: // global
           I64[Sp - 16] = block_caHoa_info;
           _saFJc::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saFJc::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHql; else goto caHoc;
       uaHql: // global
           call _caHoa(R1) args: 0, res: 0, upd: 0;
       caHoc: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHo8_info" {
     block_caHo8_info:
         const _caHo8;
         const 324;
         const 30;
 },
 _caHoa() //  [R1]
         { []
         }
     {offset
       caHoa: // global
           if (R1 & 7 == 1) goto uaHq6; else goto caHon;
       uaHq6: // global
           Sp = Sp + 56;
           call _caHpk() args: 0, res: 0, upd: 0;
       caHon: // global
           _saFIP::P64 = P64[Sp + 48];
           _saFIS::I64 = I64[Sp + 24];
           _saFJc::P64 = P64[Sp + 16];
           _saFJe::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saFIP::P64 + 24) + (_saFIS::I64 << 3)] = _saFJe::P64;
           I64[_saFIP::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saFIP::P64 + 24) + ((I64[_saFIP::P64 + 8] << 3) + (_saFIS::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caHol_info;
           R1 = _saFJc::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaHqm; else goto caHoo;
       uaHqm: // global
           call _caHol(R1) args: 0, res: 0, upd: 0;
       caHoo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHoa_info" {
     block_caHoa_info:
         const _caHoa;
         const 1286;
         const 30;
 },
 _caHol() //  [R1]
         { []
         }
     {offset
       caHol: // global
           if (R1 & 7 == 1) goto uaHq7; else goto caHoy;
       uaHq7: // global
           Sp = Sp + 32;
           call _caHpk() args: 0, res: 0, upd: 0;
       caHoy: // global
           _saFIQ::I64 = I64[Sp + 16];
           _saFIR::P64 = P64[Sp + 8];
           I64[_saFIQ::I64] = I64[_saFIQ::I64] - 1;
           call MO_Touch(_saFIR::P64);
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHol_info" {
     block_caHol_info:
         const _caHol;
         const 387;
         const 30;
 },
 _caHoB() //  []
         { []
         }
     {offset
       caHoB: // global
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHoB_info" {
     block_caHoB_info:
         const _caHoB;
         const 0;
         const 30;
 },
 _caHmu() //  []
         { []
         }
     {offset
       caHmu: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHoN; else goto caHoM;
       caHoN: // global
           HpAlloc = 16;
           I64[Sp - 8] = block_caHmt_info;
           R1 = I64[Sp + 16];
           Sp = Sp - 8;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       caHoM: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           I64[Sp - 8] = block_caHmA_info;
           R4 = Hp - 7;
           R3 = P64[Sp + 32];
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 24];
           Sp = Sp - 8;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 _caHmt() //  [R1]
         { []
         }
     {offset
       caHmt: // global
           I64[Sp + 24] = R1;
           Sp = Sp + 8;
           call _caHmu() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHmt_info" {
     block_caHmt_info:
         const _caHmt;
         const 6408;
         const 30;
 },
 _caHmA() //  [R1]
         { []
         }
     {offset
       caHmA: // global
           I64[Sp] = block_caHmC_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaHqh; else goto caHmD;
       uaHqh: // global
           call _caHmC(R1) args: 0, res: 0, upd: 0;
       caHmD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHmA_info" {
     block_caHmA_info:
         const _caHmA;
         const 8072;
         const 30;
 },
 _caHmC() //  [R1]
         { []
         }
     {offset
       caHmC: // global
           if (R1 & 7 == 1) goto caHoR; else goto caHpz;
       caHoR: // global
           I64[Sp + 40] = block_caHmH_info;
           R1 = P64[Sp + 8];
           Sp = Sp + 40;
           if (R1 & 7 != 0) goto uaHqi; else goto caHmI;
       uaHqi: // global
           call _caHmH(R1) args: 0, res: 0, upd: 0;
       caHmI: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caHpz: // global
           R1 = lvl11_raAui_closure+1;
           Sp = Sp + 72;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHmC_info" {
     block_caHmC_info:
         const _caHmC;
         const 8072;
         const 30;
 },
 _caHmH() //  [R1]
         { []
         }
     {offset
       caHmH: // global
           _saFIq::P64 = P64[Sp + 24];
           if (R1 & 7 == 1) goto caHoU; else goto caHpt;
       caHoU: // global
           I64[Sp] = block_caHmM_info;
           R1 = P64[_saFIq::P64 + 8];
           if (R1 & 7 != 0) goto uaHqj; else goto caHmN;
       uaHqj: // global
           call _caHmM(R1) args: 0, res: 0, upd: 0;
       caHmN: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
       caHpt: // global
           I64[Sp + 24] = block_caHpr_info;
           R5 = _saFIq::P64;
           R4 = P64[R1 + 6];
           R3 = I64[Sp + 8];
           R2 = GHC.Base.const_closure+2;
           Sp = Sp + 24;
           call GHC.Event.IntTable.$winsertWith_entry(R5,
                                                      R4,
                                                      R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHmH_info" {
     block_caHmH_info:
         const _caHmH;
         const 195;
         const 30;
 },
 _caHmM() //  [R1]
         { []
         }
     {offset
       caHmM: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHoX; else goto caHoW;
       caHoX: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHoW: // global
           _saFI5::I64 = I64[Sp + 8];
           _saFJE::P64 = P64[R1 + 7];
           _saFJG::P64 = P64[R1 + 15];
           _saFJF::I64 = I64[R1 + 23];
           _saFJH::I64 = _saFI5::I64 & (I64[_saFJE::P64 + 8] - 1);
           _saFJM::P64 = P64[(_saFJE::P64 + 24) + (_saFJH::I64 << 3)];
           I64[Hp - 8] = $wgo_saFJN_info;
           I64[Hp] = _saFI5::I64;
           I64[Sp - 8] = block_caHoY_info;
           R2 = _saFJM::P64;
           R1 = Hp - 7;
           I64[Sp] = _saFJH::I64;
           P64[Sp + 8] = _saFJG::P64;
           I64[Sp + 16] = _saFJF::I64;
           P64[Sp + 24] = _saFJE::P64;
           Sp = Sp - 8;
           call $wgo_saFJN_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHmM_info" {
     block_caHmM_info:
         const _caHmM;
         const 451;
         const 30;
 },
 _caHoY() //  [R1, R2, R3]
         { []
         }
     {offset
       caHoY: // global
           I64[Sp - 16] = block_caHp0_info;
           _saFK1::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saFK1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHqp; else goto caHp2;
       uaHqp: // global
           call _caHp0(R1) args: 0, res: 0, upd: 0;
       caHp2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHoY_info" {
     block_caHoY_info:
         const _caHoY;
         const 324;
         const 30;
 },
 _caHp0() //  [R1]
         { []
         }
     {offset
       caHp0: // global
           if (R1 & 7 == 1) goto uaHq9; else goto caHpd;
       uaHq9: // global
           Sp = Sp + 56;
           call _caHpk() args: 0, res: 0, upd: 0;
       caHpd: // global
           _saFJE::P64 = P64[Sp + 48];
           _saFJH::I64 = I64[Sp + 24];
           _saFK1::P64 = P64[Sp + 16];
           _saFK3::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saFJE::P64 + 24) + (_saFJH::I64 << 3)] = _saFK3::P64;
           I64[_saFJE::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saFJE::P64 + 24) + ((I64[_saFJE::P64 + 8] << 3) + (_saFJH::I64 >> 7))] = 1 :: W8;
           I64[Sp + 24] = block_caHpb_info;
           R1 = _saFK1::P64;
           Sp = Sp + 24;
           if (R1 & 7 != 0) goto uaHqq; else goto caHpe;
       uaHqq: // global
           call _caHpb(R1) args: 0, res: 0, upd: 0;
       caHpe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHp0_info" {
     block_caHp0_info:
         const _caHp0;
         const 1286;
         const 30;
 },
 _caHpb() //  [R1]
         { []
         }
     {offset
       caHpb: // global
           if (R1 & 7 == 1) goto uaHqa; else goto caHpo;
       uaHqa: // global
           Sp = Sp + 32;
           call _caHpk() args: 0, res: 0, upd: 0;
       caHpo: // global
           _saFJF::I64 = I64[Sp + 16];
           _saFJG::P64 = P64[Sp + 8];
           I64[_saFJF::I64] = I64[_saFJF::I64] - 1;
           call MO_Touch(_saFJG::P64);
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHpb_info" {
     block_caHpb_info:
         const _caHpb;
         const 387;
         const 30;
 },
 _caHpk() //  []
         { []
         }
     {offset
       caHpk: // global
           R1 = lvl10_raAuh_closure+1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 _caHpr() //  []
         { []
         }
     {offset
       caHpr: // global
           R1 = lvl10_raAuh_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHpr_info" {
     block_caHpr_info:
         const _caHpr;
         const 0;
         const 30;
 },
 io_saFKl_entry() //  [R1, R2]
         { []
         }
     {offset
       caHqE: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHqF; else goto caHqG;
       caHqF: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHqG: // global
           I64[Sp - 16] = block_caHqB_info;
           _saFIp::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saFIp::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHqK; else goto caHqC;
       uaHqK: // global
           call _caHqB(R1) args: 0, res: 0, upd: 0;
       caHqC: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saFKl_info" {
     io_saFKl_info:
         const io_saFKl_entry;
         const 1;
         const 4294967305;
         const 8589934597;
         const SaFU9_srt+248;
 },
 _caHqB() //  [R1]
         { []
         }
     {offset
       caHqB: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saFIp_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHqB_info" {
     block_caHqB_info:
         const _caHqB;
         const 1;
         const 4294967326;
         const SaFU9_srt+248;
 },
 sat_saFKz_entry() //  [R1, R2]
         { []
         }
     {offset
       caHqW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHqX; else goto caHqY;
       caHqX: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHqY: // global
           I64[Sp - 16] = block_caHqU_info;
           _saFKw::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFKw::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFKz_info" {
     sat_saFKz_info:
         const sat_saFKz_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caHqU() //  []
         { []
         }
     {offset
       caHqU: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHqU_info" {
     block_caHqU_info:
         const _caHqU;
         const 1;
         const 30;
 },
 sat_saFKu_entry() //  [R1]
         { []
         }
     {offset
       caHr5: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFKl_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFKu_info" {
     sat_saFKu_info:
         const sat_saFKu_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFKv_entry() //  [R1]
         { []
         }
     {offset
       caHrd: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFKv_info" {
     sat_saFKv_info:
         const sat_saFKv_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFKW_entry() //  [R1, R2]
         { []
         }
     {offset
       caHrv: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHrw; else goto caHrx;
       caHrw: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHrx: // global
           I64[Sp - 16] = block_caHrt_info;
           _saFKT::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFKT::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFKW_info" {
     sat_saFKW_info:
         const sat_saFKW_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caHrt() //  []
         { []
         }
     {offset
       caHrt: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHrt_info" {
     block_caHrt_info:
         const _caHrt;
         const 1;
         const 30;
 },
 sat_saFKR_entry() //  [R1]
         { []
         }
     {offset
       caHrE: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFKl_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFKR_info" {
     sat_saFKR_info:
         const sat_saFKR_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFKS_entry() //  [R1]
         { []
         }
     {offset
       caHrM: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFKS_info" {
     sat_saFKS_info:
         const sat_saFKS_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFL1_entry() //  [R1]
         { []
         }
     {offset
       caHrT: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caHrU; else goto caHrV;
       caHrU: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caHrV: // global
           I64[Sp - 24] = block_caHrm_info;
           _saFIn::P64 = P64[R1 + 7];
           _saFKl::P64 = P64[R1 + 15];
           R1 = _saFIn::P64;
           P64[Sp - 16] = _saFIn::P64;
           P64[Sp - 8] = _saFKl::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFL1_info" {
     sat_saFL1_info:
         const sat_saFL1_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 _caHrm() //  [R1]
         { []
         }
     {offset
       caHrm: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caHrY; else goto caHrX;
       caHrY: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHrX: // global
           I64[Hp - 56] = sat_saFKW_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFKR_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFKS_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caHrP_info;
           R2 = Hp - 54;
           _saFKQ::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFKQ::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHrm_info" {
     block_caHrm_info:
         const _caHrm;
         const 2;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caHrP() //  [R1]
         { []
         }
     {offset
       caHrP: // global
           _saFIn::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caHrR_info;
           R2 = P64[Sp + 16];
           _saFKZ::P64 = R1;
           R1 = _saFIn::P64;
           P64[Sp + 16] = _saFKZ::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHrP_info" {
     block_caHrP_info:
         const _caHrP;
         const 2;
         const 30;
 },
 _caHrR() //  []
         { []
         }
     {offset
       caHrR: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHrR_info" {
     block_caHrR_info:
         const _caHrR;
         const 1;
         const 30;
 },
 sat_saFLm_entry() //  [R1, R2]
         { []
         }
     {offset
       caHsb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHsc; else goto caHsd;
       caHsc: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHsd: // global
           I64[Sp - 16] = block_caHs9_info;
           _saFLj::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFLj::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFLm_info" {
     sat_saFLm_info:
         const sat_saFLm_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caHs9() //  []
         { []
         }
     {offset
       caHs9: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHs9_info" {
     block_caHs9_info:
         const _caHs9;
         const 1;
         const 30;
 },
 sat_saFLh_entry() //  [R1]
         { []
         }
     {offset
       caHsk: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFKl_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFLh_info" {
     sat_saFLh_info:
         const sat_saFLh_entry;
         const 2;
         const 4294967307;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFLi_entry() //  [R1]
         { []
         }
     {offset
       caHss: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFLi_info" {
     sat_saFLi_info:
         const sat_saFLi_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 registerFd1_raAuk_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caHsv: // global
           if ((Sp + -120) < SpLim) (likely: False) goto caHsw; else goto caHsx;
       caHsw: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = registerFd1_raAuk_closure;
           call (stg_gc_fun)(R6, R5, R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       caHsx: // global
           I64[Sp - 40] = block_caHjS_info;
           R1 = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           P64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           if (R1 & 7 != 0) goto uaHvf; else goto caHjT;
       uaHvf: // global
           call _caHjS(R1) args: 0, res: 0, upd: 0;
       caHjT: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . registerFd1_raAuk_info" {
     registerFd1_raAuk_info:
         const registerFd1_raAuk_entry;
         const 0;
         const 576742231575101454;
         const 25769803801;
         const SaFU9_srt+120;
 },
 _caHjS() //  [R1]
         { []
         }
     {offset
       caHjS: // global
           I64[Sp - 32] = block_caHjX_info;
           _saFHE::P64 = P64[R1 + 7];
           _saFHG::P64 = P64[R1 + 23];
           _saFHI::P64 = P64[R1 + 31];
           _saFHK::P64 = P64[R1 + 47];
           R1 = P64[R1 + 15];
           P64[Sp - 24] = _saFHG::P64;
           P64[Sp - 16] = _saFHI::P64;
           P64[Sp - 8] = _saFHK::P64;
           P64[Sp] = _saFHE::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaHv8; else goto caHjY;
       uaHv8: // global
           call _caHjX(R1) args: 0, res: 0, upd: 0;
       caHjY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHjS_info" {
     block_caHjS_info:
         const _caHjS;
         const 4;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHjX() //  [R1]
         { []
         }
     {offset
       caHjX: // global
           I64[Sp - 8] = block_caHk2_info;
           _saFHR::P64 = R1;
           _saFHS::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _saFHS::I64;
           P64[Sp + 8] = _saFHR::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHv9; else goto caHk3;
       uaHv9: // global
           call _caHk2(R1) args: 0, res: 0, upd: 0;
       caHk3: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHjX_info" {
     block_caHjX_info:
         const _caHjX;
         const 8;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHk2() //  [R1]
         { []
         }
     {offset
       caHk2: // global
           I64[Sp - 8] = block_caHk7_info;
           _saFHT::P64 = R1;
           _saFHU::I64 = I64[R1 + 7];
           R1 = P64[Sp + 40];
           I64[Sp] = _saFHU::I64;
           P64[Sp + 40] = _saFHT::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHva; else goto caHk8;
       uaHva: // global
           call _caHk7(R1) args: 0, res: 0, upd: 0;
       caHk8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHk2_info" {
     block_caHk2_info:
         const _caHk2;
         const 73;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHk7() //  [R1]
         { []
         }
     {offset
       caHk7: // global
           _saFHz::P64 = P64[Sp + 64];
           _saFHW::P64 = P64[R1 + 7];
           _saFHY::P64 = P64[R1 + 23];
           _saFHZ::P64 = P64[R1 + 31];
           (_saFI3::I64) = call MO_AtomicRMW W64 AMO_Add(P64[Sp + 40] + 16, 1);
           I64[Sp - 16] = block_caHke_info;
           R1 = _saFHz::P64;
           I64[Sp - 8] = _saFI3::I64;
           P64[Sp] = _saFHZ::P64;
           P64[Sp + 40] = _saFHY::P64;
           P64[Sp + 64] = _saFHW::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHvb; else goto caHkf;
       uaHvb: // global
           call _caHke(R1) args: 0, res: 0, upd: 0;
       caHkf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHk7_info" {
     block_caHk7_info:
         const _caHk7;
         const 202;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHke() //  [R1]
         { []
         }
     {offset
       caHke: // global
           I64[Sp - 8] = block_caHkj_info;
           _saFI4::P64 = R1;
           _saFI5::I64 = I64[R1 + 7];
           R1 = P64[Sp + 88];
           I64[Sp] = _saFI5::I64;
           P64[Sp + 88] = _saFI4::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHvc; else goto caHkk;
       uaHvc: // global
           call _caHkj(R1) args: 0, res: 0, upd: 0;
       caHkk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHke_info" {
     block_caHke_info:
         const _caHke;
         const 844;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHkj() //  [R1]
         { []
         }
     {offset
       caHkj: // global
           I64[Sp - 8] = block_caHsD_info;
           _saFI6::P64 = R1;
           _saFI7::I64 = I64[R1 + 7];
           R1 = P64[Sp + 104];
           I64[Sp] = _saFI7::I64;
           P64[Sp + 104] = _saFI6::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHvd; else goto caHuR;
       uaHvd: // global
           call _caHsD(R1) args: 0, res: 0, upd: 0;
       caHuR: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHkj_info" {
     block_caHkj_info:
         const _caHkj;
         const 1741;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHsD() //  [R1]
         { []
         }
     {offset
       caHsD: // global
           _saFHy::P64 = P64[Sp + 88];
           _saFI7::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto caHuX; else goto caHv1;
       caHuX: // global
           _saFI9::I64 = _saFI7::I64;
           goto saFI8;
       caHv1: // global
           _saFI9::I64 = _saFI7::I64 | 8;
           goto saFI8;
       saFI8: // global
           I64[Sp + 8] = block_caHkt_info;
           R1 = _saFHy::P64;
           I64[Sp + 88] = _saFI9::I64;
           Sp = Sp + 8;
           call stg_ap_0_fast(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHsD_info" {
     block_caHsD_info:
         const _caHsD;
         const 3534;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHkt() //  [R1]
         { []
         }
     {offset
       caHkt: // global
           I64[Sp - 8] = block_caHkv_info;
           P64[Sp] = R1;
           Sp = Sp - 8;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHkt_info" {
     block_caHkt_info:
         const _caHkt;
         const 34509;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHkv() //  [R1]
         { []
         }
     {offset
       caHkv: // global
           _saFHR::P64 = P64[Sp + 56];
           _saFHS::I64 = I64[Sp + 48];
           _saFHT::P64 = P64[Sp + 80];
           _saFIe::I64 = I64[Sp + 16] & 31;
           if (%MO_S_Gt_W64(_saFHS::I64,
                            _saFIe::I64)) goto caHsL; else goto caHuQ;
       caHuQ: // global
           if (%MO_S_Gt_W64(_saFIe::I64,
                            I64[Sp + 40])) goto caHsL; else goto caHsM;
       caHsL: // global
           R4 = _saFIe::I64;
           R3 = _saFHR::P64;
           R2 = _saFHT::P64;
           Sp = Sp + 120;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caHsM: // global
           _saFIl::P64 = P64[P64[Sp + 64] + ((_saFIe::I64 - _saFHS::I64 << 3) + 24)];
           I64[Sp] = block_caHkL_info;
           _saFId::I64 = R1;
           R1 = _saFIl::P64;
           I64[Sp + 80] = _saFId::I64;
           if (R1 & 7 != 0) goto uaHve; else goto caHkM;
       uaHve: // global
           call _caHkL(R1) args: 0, res: 0, upd: 0;
       caHkM: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHkv_info" {
     block_caHkv_info:
         const _caHkv;
         const 69006;
         const 281479271677982;
         const SaFU9_srt+120;
 },
 _caHkL() //  [R1]
         { []
         }
     {offset
       caHkL: // global
           Hp = Hp + 136;
           if (Hp > HpLim) (likely: False) goto caHsP; else goto caHsO;
       caHsP: // global
           HpAlloc = 136;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHsO: // global
           _saFIn::P64 = P64[R1 + 7];
           I64[Hp - 128] = GHC.Event.Manager.FdKey_con_info;
           _saFI5::I64 = I64[Sp + 16];
           I64[Hp - 120] = _saFI5::I64;
           _saFI3::I64 = I64[Sp + 24];
           I64[Hp - 112] = _saFI3::I64;
           I64[Hp - 104] = $wio_saFIp_info;
           P64[Hp - 96] = P64[Sp + 96];
           P64[Hp - 88] = P64[Sp + 72];
           P64[Hp - 80] = P64[Sp + 32];
           P64[Hp - 72] = P64[Sp + 104];
           P64[Hp - 64] = P64[Sp + 8];
           I64[Hp - 56] = _saFI3::I64;
           I64[Hp - 48] = _saFI5::I64;
           I64[Hp - 40] = I64[Sp + 88];
           I64[Hp - 32] = io_saFKl_info;
           P64[Hp - 24] = Hp - 102;
           _caHkQ::P64 = Hp - 127;
           _caHqw::P64 = Hp - 30;
           _saFKq::I64 = I64[Sp + 80];
           if (_saFKq::I64 != 0) goto uaHv7; else goto caHtB;
       uaHv7: // global
           if (_saFKq::I64 != 1) goto caHsW; else goto caHue;
       caHsW: // global
           Hp = Hp - 24;
           I64[Sp] = block_caHqN_info;
           R1 = _saFIn::P64;
           P64[Sp + 88] = _saFIn::P64;
           P64[Sp + 96] = _caHqw::P64;
           P64[Sp + 104] = _caHkQ::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caHue: // global
           Hp = Hp - 24;
           I64[Sp] = block_caHs2_info;
           R1 = _saFIn::P64;
           P64[Sp + 88] = _saFIn::P64;
           P64[Sp + 96] = _caHqw::P64;
           P64[Sp + 104] = _caHkQ::P64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caHtB: // global
           I64[Hp - 16] = sat_saFL1_info;
           P64[Hp - 8] = _saFIn::P64;
           P64[Hp] = _caHqw::P64;
           I64[Sp] = block_caHty_info;
           R1 = Hp - 15;
           P64[Sp + 104] = _caHkQ::P64;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHkL_info" {
     block_caHkL_info:
         const _caHkL;
         const 114062;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caHqN() //  [R1]
         { []
         }
     {offset
       caHqN: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caHsZ; else goto caHsY;
       caHsZ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHsY: // global
           I64[Hp - 56] = sat_saFKz_info;
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFKu_info;
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFKv_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caHsQ_info;
           R2 = Hp - 54;
           _saFKt::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 96] = _saFKt::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHqN_info" {
     block_caHqN_info:
         const _caHqN;
         const 65422;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caHsQ() //  [R1]
         { []
         }
     {offset
       caHsQ: // global
           I64[Sp] = block_caHsS_info;
           R2 = P64[Sp + 96];
           _saFKC::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 96] = _saFKC::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHsQ_info" {
     block_caHsQ_info:
         const _caHsQ;
         const 65422;
         const 30;
 },
 _caHsS() //  []
         { []
         }
     {offset
       caHsS: // global
           I64[Sp] = block_caHsU_info;
           R1 = P64[Sp + 96];
           if (R1 & 7 != 0) goto uaHvg; else goto caHt2;
       uaHvg: // global
           call _caHsU(R1) args: 0, res: 0, upd: 0;
       caHt2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHsS_info" {
     block_caHsS_info:
         const _caHsS;
         const 130958;
         const 30;
 },
 _caHsU() //  [R1]
         { []
         }
     {offset
       caHsU: // global
           I64[Sp] = block_caHt6_info;
           _saFKF::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 96] = _saFKF::P64;
           if (R1 & 7 != 0) goto uaHvh; else goto caHt8;
       uaHvh: // global
           call _caHt6(R1) args: 0, res: 0, upd: 0;
       caHt8: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHsU_info" {
     block_caHsU_info:
         const _caHsU;
         const 262030;
         const 30;
 },
 _caHt6() //  [R1]
         { []
         }
     {offset
       caHt6: // global
           if (R1 & 7 == 1) goto caHth; else goto caHts;
       caHth: // global
           I64[Sp + 88] = block_caHtc_info;
           R3 = P64[Sp + 112];
           R2 = P64[Sp + 104];
           R1 = P64[Sp + 8];
           Sp = Sp + 88;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       caHts: // global
           _saFKF::P64 = P64[Sp + 96];
           I64[Sp + 96] = block_caHtq_info;
           R1 = _saFKF::P64;
           Sp = Sp + 96;
           if (R1 & 7 != 0) goto uaHvi; else goto caHtt;
       uaHvi: // global
           call _caHtq() args: 0, res: 0, upd: 0;
       caHtt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHt6_info" {
     block_caHt6_info:
         const _caHt6;
         const 130958;
         const 30;
 },
 _caHtc() //  []
         { []
         }
     {offset
       caHtc: // global
           _saFKF::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caHte_info;
           R1 = _saFKF::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaHvj; else goto caHtj;
       uaHvj: // global
           call _caHte() args: 0, res: 0, upd: 0;
       caHtj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHtc_info" {
     block_caHtc_info:
         const _caHtc;
         const 259;
         const 30;
 },
 _caHte() //  []
         { []
         }
     {offset
       caHte: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHte_info" {
     block_caHte_info:
         const _caHte;
         const 130;
         const 30;
 },
 _caHtq() //  []
         { []
         }
     {offset
       caHtq: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHtq_info" {
     block_caHtq_info:
         const _caHtq;
         const 130;
         const 30;
 },
 _caHs2() //  [R1]
         { []
         }
     {offset
       caHs2: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caHuh; else goto caHug;
       caHuh: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHug: // global
           I64[Hp - 56] = sat_saFLm_info;
           P64[Hp - 48] = P64[Sp + 88];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFLh_info;
           P64[Hp - 24] = P64[Sp + 96];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFLi_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caHu9_info;
           R2 = Hp - 54;
           _saFLg::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 96] = _saFLg::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHs2_info" {
     block_caHs2_info:
         const _caHs2;
         const 65422;
         const 4294967326;
         const SaFU9_srt+248;
 },
 _caHu9() //  [R1]
         { []
         }
     {offset
       caHu9: // global
           I64[Sp] = block_caHub_info;
           R2 = P64[Sp + 96];
           _saFLp::P64 = R1;
           R1 = P64[Sp + 88];
           P64[Sp + 96] = _saFLp::P64;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHu9_info" {
     block_caHu9_info:
         const _caHu9;
         const 65422;
         const 30;
 },
 _caHub() //  []
         { []
         }
     {offset
       caHub: // global
           I64[Sp] = block_caHud_info;
           R1 = P64[Sp + 96];
           if (R1 & 7 != 0) goto uaHvo; else goto caHuk;
       uaHvo: // global
           call _caHud(R1) args: 0, res: 0, upd: 0;
       caHuk: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHub_info" {
     block_caHub_info:
         const _caHub;
         const 130958;
         const 30;
 },
 _caHud() //  [R1]
         { []
         }
     {offset
       caHud: // global
           I64[Sp] = block_caHuo_info;
           _saFLs::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 96] = _saFLs::P64;
           if (R1 & 7 != 0) goto uaHvp; else goto caHuq;
       uaHvp: // global
           call _caHuo(R1) args: 0, res: 0, upd: 0;
       caHuq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHud_info" {
     block_caHud_info:
         const _caHud;
         const 262030;
         const 30;
 },
 _caHuo() //  [R1]
         { []
         }
     {offset
       caHuo: // global
           if (R1 & 7 == 1) goto caHuz; else goto caHuK;
       caHuz: // global
           I64[Sp + 88] = block_caHuu_info;
           R3 = P64[Sp + 112];
           R2 = P64[Sp + 104];
           R1 = P64[Sp + 8];
           Sp = Sp + 88;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       caHuK: // global
           _saFLs::P64 = P64[Sp + 96];
           I64[Sp + 96] = block_caHuI_info;
           R1 = _saFLs::P64;
           Sp = Sp + 96;
           if (R1 & 7 != 0) goto uaHvq; else goto caHuL;
       uaHvq: // global
           call _caHuI() args: 0, res: 0, upd: 0;
       caHuL: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHuo_info" {
     block_caHuo_info:
         const _caHuo;
         const 130958;
         const 30;
 },
 _caHuu() //  []
         { []
         }
     {offset
       caHuu: // global
           _saFLs::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caHuw_info;
           R1 = _saFLs::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaHvr; else goto caHuB;
       uaHvr: // global
           call _caHuw() args: 0, res: 0, upd: 0;
       caHuB: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHuu_info" {
     block_caHuu_info:
         const _caHuu;
         const 259;
         const 30;
 },
 _caHuw() //  []
         { []
         }
     {offset
       caHuw: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHuw_info" {
     block_caHuw_info:
         const _caHuw;
         const 130;
         const 30;
 },
 _caHuI() //  []
         { []
         }
     {offset
       caHuI: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHuI_info" {
     block_caHuI_info:
         const _caHuI;
         const 130;
         const 30;
 },
 _caHty() //  [R1]
         { []
         }
     {offset
       caHty: // global
           I64[Sp] = block_caHtA_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaHvk; else goto caHtD;
       uaHvk: // global
           call _caHtA(R1) args: 0, res: 0, upd: 0;
       caHtD: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHty_info" {
     block_caHty_info:
         const _caHty;
         const 262030;
         const 30;
 },
 _caHtA() //  [R1]
         { []
         }
     {offset
       caHtA: // global
           I64[Sp] = block_caHtH_info;
           _saFL6::P64 = P64[R1 + 7];
           R1 = P64[R1 + 15];
           P64[Sp + 96] = _saFL6::P64;
           if (R1 & 7 != 0) goto uaHvl; else goto caHtJ;
       uaHvl: // global
           call _caHtH(R1) args: 0, res: 0, upd: 0;
       caHtJ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHtA_info" {
     block_caHtA_info:
         const _caHtA;
         const 262030;
         const 30;
 },
 _caHtH() //  [R1]
         { []
         }
     {offset
       caHtH: // global
           if (R1 & 7 == 1) goto caHtS; else goto caHu3;
       caHtS: // global
           I64[Sp + 88] = block_caHtN_info;
           R3 = P64[Sp + 112];
           R2 = P64[Sp + 104];
           R1 = P64[Sp + 8];
           Sp = Sp + 88;
           call stg_ap_ppv_fast(R3, R2, R1) args: 8, res: 8, upd: 8;
       caHu3: // global
           _saFL6::P64 = P64[Sp + 96];
           I64[Sp + 96] = block_caHu1_info;
           R1 = _saFL6::P64;
           Sp = Sp + 96;
           if (R1 & 7 != 0) goto uaHvm; else goto caHu4;
       uaHvm: // global
           call _caHu1() args: 0, res: 0, upd: 0;
       caHu4: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHtH_info" {
     block_caHtH_info:
         const _caHtH;
         const 130958;
         const 30;
 },
 _caHtN() //  []
         { []
         }
     {offset
       caHtN: // global
           _saFL6::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caHtP_info;
           R1 = _saFL6::P64;
           Sp = Sp + 8;
           if (R1 & 7 != 0) goto uaHvn; else goto caHtU;
       uaHvn: // global
           call _caHtP() args: 0, res: 0, upd: 0;
       caHtU: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHtN_info" {
     block_caHtN_info:
         const _caHtN;
         const 259;
         const 30;
 },
 _caHtP() //  []
         { []
         }
     {offset
       caHtP: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHtP_info" {
     block_caHtP_info:
         const _caHtP;
         const 130;
         const 30;
 },
 _caHu1() //  []
         { []
         }
     {offset
       caHu1: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHu1_info" {
     block_caHu1_info:
         const _caHu1;
         const 130;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.021078091 UTC

[section ""data" . GHC.Event.Manager.registerFd_closure" {
     GHC.Event.Manager.registerFd_closure:
         const GHC.Event.Manager.registerFd_info;
         const 0;
 },
 GHC.Event.Manager.registerFd_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caHDu: // global
           R6 = R6;
           R5 = R5;
           R4 = R4;
           R3 = R3;
           R2 = R2;
           call registerFd1_raAuk_entry(R6,
                                        R5,
                                        R4,
                                        R3,
                                        R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.registerFd_info" {
     GHC.Event.Manager.registerFd_info:
         const GHC.Event.Manager.registerFd_entry;
         const 0;
         const 4294967310;
         const 25769803801;
         const SaFU9_srt+336;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.02472256 UTC

[section ""cstring" . lvl13_raAul_bytes" {
     lvl13_raAul_bytes:
         I8[] [117,110,114,101,103,105,115,116,101,114,70,100,95]
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.026821455 UTC

[section ""data" . lvl14_raAum_closure" {
     lvl14_raAum_closure:
         const lvl14_raAum_info;
         const 0;
         const 0;
         const 0;
 },
 lvl14_raAum_entry() //  [R1]
         { []
         }
     {offset
       caHDI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHDJ; else goto caHDK;
       caHDJ: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       caHDK: // global
           (_caHDF::I64) = call "ccall" arg hints:  [PtrHint,
                                                     PtrHint]  result hints:  [PtrHint] newCAF(BaseReg, R1);
           if (_caHDF::I64 == 0) goto caHDH; else goto caHDG;
       caHDH: // global
           call (I64[I64[R1]])() args: 8, res: 0, upd: 8;
       caHDG: // global
           I64[Sp - 16] = stg_bh_upd_frame_info;
           I64[Sp - 8] = _caHDF::I64;
           R2 = lvl13_raAul_bytes;
           Sp = Sp - 16;
           call GHC.CString.unpackCString#_entry(R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . lvl14_raAum_info" {
     lvl14_raAum_info:
         const lvl14_raAum_entry;
         const 0;
         const 21;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.030476155 UTC

[section ""data" . lvl15_raAun_closure" {
     lvl15_raAun_closure:
         const lvl15_raAun_info;
         const 0;
 },
 lvl15_raAun_entry() //  [R2]
         { []
         }
     {offset
       caHDX: // global
           R3 = R2;
           R2 = lvl14_raAum_closure;
           call $wlvl_raAub_entry(R3, R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . lvl15_raAun_info" {
     lvl15_raAun_info:
         const lvl15_raAun_entry;
         const 0;
         const 9007203549708302;
         const 4294967300;
         const SaFU9_srt+176;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.056101249 UTC

[section ""data" . GHC.Event.Manager.unregisterFd2_closure" {
     GHC.Event.Manager.unregisterFd2_closure:
         const GHC.Event.Manager.unregisterFd2_info;
         const 0;
 },
 g_saFMA_entry() //  [R1, R2]
         { []
         }
     {offset
       caHFj: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHFk; else goto caHFl;
       caHFk: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHFl: // global
           I64[Sp - 16] = block_caHFg_info;
           _saFM6::I64 = I64[R1 + 7];
           R1 = R2;
           I64[Sp - 8] = _saFM6::I64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHFq; else goto caHFh;
       uaHFq: // global
           call _caHFg(R1) args: 0, res: 0, upd: 0;
       caHFh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . g_saFMA_info" {
     g_saFMA_info:
         const g_saFMA_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caHFg() //  [R1]
         { []
         }
     {offset
       caHFg: // global
           R1 = I64[((I64[R1 + 23] != I64[Sp + 8]) << 3) + GHC.Types.Bool_closure_tbl];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHFg_info" {
     block_caHFg_info:
         const _caHFg;
         const 65;
         const 30;
 },
 $wgo_saFMI_entry() //  [R1, R2]
         { []
         }
     {offset
       caHFD: // global
           if ((Sp + -32) < SpLim) (likely: False) goto caHFE; else goto caHFF;
       caHFE: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHFF: // global
           I64[Sp - 32] = block_caHFw_info;
           _saFMI::P64 = R1;
           _saFMA::P64 = P64[R1 + 7];
           _saFM5::I64 = I64[R1 + 15];
           R1 = R2;
           I64[Sp - 24] = _saFM5::I64;
           P64[Sp - 16] = _saFMA::P64;
           P64[Sp - 8] = _saFMI::P64;
           Sp = Sp - 32;
           if (R1 & 7 != 0) goto uaHGi; else goto caHFx;
       uaHGi: // global
           call _caHFw(R1) args: 0, res: 0, upd: 0;
       caHFx: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wgo_saFMI_info" {
     $wgo_saFMI_info:
         const $wgo_saFMI_entry;
         const 4294967297;
         const 12;
         const 4294967301;
 },
 _caHFw() //  [R1]
         { []
         }
     {offset
       caHFw: // global
           if (R1 & 7 == 1) goto caHFA; else goto caHFB;
       caHFA: // global
           R3 = GHC.Event.IntTable.Empty_closure+1;
           R2 = GHC.Base.Nothing_closure+1;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHFB: // global
           _saFMM::P64 = P64[R1 + 6];
           _saFMN::P64 = P64[R1 + 14];
           _saFML::I64 = I64[R1 + 22];
           if (_saFML::I64 == I64[Sp + 8]) goto caHFZ; else goto caHFT;
       caHFZ: // global
           I64[Sp] = block_caHFY_info;
           R3 = _saFMM::P64;
           R2 = P64[Sp + 16];
           P64[Sp + 8] = _saFMN::P64;
           P64[Sp + 16] = _saFMM::P64;
           I64[Sp + 24] = _saFML::I64;
           call GHC.List.filter_entry(R3, R2) args: 8, res: 8, upd: 8;
       caHFT: // global
           I64[Sp + 8] = block_caHFP_info;
           R2 = _saFMN::P64;
           R1 = P64[Sp + 24];
           P64[Sp + 16] = _saFMM::P64;
           I64[Sp + 24] = _saFML::I64;
           Sp = Sp + 8;
           call $wgo_saFMI_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHFw_info" {
     block_caHFw_info:
         const _caHFw;
         const 67;
         const 30;
 },
 _caHFY() //  [R1]
         { []
         }
     {offset
       caHFY: // global
           _saFMM::P64 = P64[Sp + 16];
           _saFMN::P64 = P64[Sp + 8];
           if (R1 & 7 == 1) goto caHG5; else goto caHGd;
       caHG5: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHG8; else goto caHG7;
       caHG8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHG7: // global
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFMM::P64;
           R3 = _saFMN::P64;
           R2 = Hp - 6;
           R1 = GHC.Types.True_closure+2;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHGd: // global
           Hp = Hp + 48;
           if (Hp > HpLim) (likely: False) goto caHGg; else goto caHGf;
       caHGg: // global
           HpAlloc = 48;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHGf: // global
           I64[Hp - 40] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 32] = R1;
           P64[Hp - 24] = _saFMN::P64;
           I64[Hp - 16] = I64[Sp + 24];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFMM::P64;
           R3 = Hp - 38;
           R2 = Hp - 6;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHFY_info" {
     block_caHFY_info:
         const _caHFY;
         const 259;
         const 30;
 },
 _caHFP() //  [R1, R2, R3]
         { []
         }
     {offset
       caHFP: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHFW; else goto caHFV;
       caHFW: // global
           HpAlloc = 32;
           R3 = R3;
           R2 = R2;
           R1 = R1;
           call stg_gc_ppp(R3, R2, R1) args: 8, res: 8, upd: 8;
       caHFV: // global
           I64[Hp - 24] = GHC.Event.IntTable.Bucket_con_info;
           P64[Hp - 16] = P64[Sp + 8];
           P64[Hp - 8] = R3;
           I64[Hp] = I64[Sp + 16];
           R3 = Hp - 22;
           R2 = R2;
           R1 = R1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R3, R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHFP_info" {
     block_caHFP_info:
         const _caHFP;
         const 130;
         const 30;
 },
 go_saFNL_entry() //  [R1, R2]
         { []
         }
     {offset
       caHGY: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caHGZ; else goto uaHHh;
       caHGZ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       uaHHh: // global
           P64[Sp - 16] = R1;
           P64[Sp - 8] = R2;
           Sp = Sp - 16;
           call _caHGO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . go_saFNL_info" {
     go_saFNL_info:
         const go_saFNL_entry;
         const 4294967296;
         const 10;
         const 4294967301;
 },
 _caHGO() //  []
         { []
         }
     {offset
       caHGO: // global
           _saFM5::I64 = I64[P64[Sp] + 7];
           I64[Sp - 8] = block_caHGR_info;
           R1 = P64[Sp + 8];
           I64[Sp + 8] = _saFM5::I64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHHj; else goto caHGS;
       uaHHj: // global
           call _caHGR(R1) args: 0, res: 0, upd: 0;
       caHGS: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caHGR() //  [R1]
         { []
         }
     {offset
       caHGR: // global
           if (R1 & 7 == 1) goto caHGV; else goto caHGW;
       caHGV: // global
           R1 = GHC.Base.Nothing_closure+1;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caHGW: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHH8; else goto caHH7;
       caHH8: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHH7: // global
           if (I64[R1 + 22] == I64[Sp + 16]) goto caHHg; else goto caHHc;
       caHHg: // global
           _saFNP::P64 = P64[R1 + 6];
           I64[Hp - 8] = GHC.Base.Just_con_info;
           P64[Hp] = _saFNP::P64;
           R1 = Hp - 6;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caHHc: // global
           _saFNQ::P64 = P64[R1 + 14];
           Hp = Hp - 16;
           P64[Sp + 16] = _saFNQ::P64;
           Sp = Sp + 8;
           call _caHGO() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHGR_info" {
     block_caHGR_info:
         const _caHGR;
         const 130;
         const 30;
 },
 $wio_saFMk_entry() //  [R1, R2]
         { []
         }
     {offset
       caHHm: // global
           if ((Sp + -96) < SpLim) (likely: False) goto caHHn; else goto caHHo;
       caHHn: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHHo: // global
           I64[Sp - 56] = block_caHEX_info;
           _saFLZ::P64 = P64[R1 + 6];
           _saFM1::P64 = P64[R1 + 14];
           _saFM2::P64 = P64[R1 + 22];
           _saFM5::I64 = I64[R1 + 30];
           _saFM6::I64 = I64[R1 + 38];
           R1 = P64[R2 + 8];
           P64[Sp - 48] = _saFLZ::P64;
           P64[Sp - 40] = _saFM1::P64;
           P64[Sp - 32] = _saFM2::P64;
           I64[Sp - 24] = _saFM5::I64;
           I64[Sp - 16] = _saFM6::I64;
           P64[Sp - 8] = R2;
           Sp = Sp - 56;
           if (R1 & 7 != 0) goto uaHK2; else goto caHEY;
       uaHK2: // global
           call _caHEX(R1) args: 0, res: 0, upd: 0;
       caHEY: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . $wio_saFMk_info" {
     $wio_saFMk_info:
         const $wio_saFMk_entry;
         const 8589934595;
         const 35188667056136;
         const 8589934597;
         const SaFU9_srt+248;
 },
 _caHEX() //  [R1]
         { []
         }
     {offset
       caHEX: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caHHr; else goto caHHq;
       caHHr: // global
           HpAlloc = 40;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHHq: // global
           _saFM5::I64 = I64[Sp + 32];
           _saFMr::P64 = P64[R1 + 7];
           _saFMt::P64 = P64[R1 + 15];
           _saFMs::I64 = I64[R1 + 23];
           _saFMu::I64 = _saFM5::I64 & (I64[_saFMr::P64 + 8] - 1);
           _saFMz::P64 = P64[(_saFMr::P64 + 24) + (_saFMu::I64 << 3)];
           I64[Hp - 32] = g_saFMA_info;
           I64[Hp - 24] = I64[Sp + 40];
           I64[Hp - 16] = $wgo_saFMI_info;
           P64[Hp - 8] = Hp - 31;
           I64[Hp] = _saFM5::I64;
           I64[Sp - 24] = block_caHGj_info;
           R2 = _saFMz::P64;
           R1 = Hp - 15;
           P64[Sp - 16] = _saFMt::P64;
           I64[Sp - 8] = _saFMu::I64;
           I64[Sp] = _saFMs::I64;
           P64[Sp + 40] = _saFMr::P64;
           Sp = Sp - 24;
           call $wgo_saFMI_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHEX_info" {
     block_caHEX_info:
         const _caHEX;
         const 1542;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHGj() //  [R1, R2, R3]
         { []
         }
     {offset
       caHGj: // global
           I64[Sp - 16] = block_caHHs_info;
           _saFN1::P64 = R1;
           R1 = R2;
           P64[Sp - 8] = R3;
           P64[Sp] = _saFN1::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHJZ; else goto caHJh;
       uaHJZ: // global
           call _caHHs(R1) args: 0, res: 0, upd: 0;
       caHJh: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHGj_info" {
     block_caHGj_info:
         const _caHGj;
         const 4489;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHHs() //  [R1]
         { []
         }
     {offset
       caHHs: // global
           if (R1 & 7 == 1) goto caHJn; else goto caHJs;
       caHJn: // global
           P64[Sp + 80] = GHC.Base.Nothing_closure+1;
           Sp = Sp + 48;
           call _saFN4() args: 0, res: 0, upd: 0;
       caHJs: // global
           _saFMr::P64 = P64[Sp + 80];
           _saFMu::I64 = I64[Sp + 32];
           _saFN1::P64 = P64[Sp + 16];
           _saFN3::P64 = P64[Sp + 8];
           call MO_WriteBarrier();
           P64[(_saFMr::P64 + 24) + (_saFMu::I64 << 3)] = _saFN3::P64;
           I64[_saFMr::P64] = stg_MUT_ARR_PTRS_DIRTY_info;
           I8[(_saFMr::P64 + 24) + ((I64[_saFMr::P64 + 8] << 3) + (_saFMu::I64 >> 7))] = 1 :: W8;
           I64[Sp + 16] = block_caHJq_info;
           _saFNX::P64 = R1;
           R1 = _saFN1::P64;
           P64[Sp + 80] = _saFNX::P64;
           Sp = Sp + 16;
           if (R1 & 7 != 0) goto uaHK3; else goto caHJt;
       uaHK3: // global
           call _caHJq(R1) args: 0, res: 0, upd: 0;
       caHJt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHHs_info" {
     block_caHHs_info:
         const _caHHs;
         const 17931;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHJq() //  [R1]
         { []
         }
     {offset
       caHJq: // global
           _saFNX::P64 = P64[Sp + 64];
           if (R1 & 7 == 1) goto caHJz; else goto caHJD;
       caHJz: // global
           P64[Sp + 64] = _saFNX::P64;
           Sp = Sp + 32;
           goto uaHKg;
       caHJD: // global
           _saFMs::I64 = I64[Sp + 24];
           _saFMt::P64 = P64[Sp + 8];
           I64[_saFMs::I64] = I64[_saFMs::I64] - 1;
           call MO_Touch(_saFMt::P64);
           P64[Sp + 64] = _saFNX::P64;
           Sp = Sp + 32;
           goto uaHKg;
       uaHKg: // global
           call _saFN4() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHJq_info" {
     block_caHJq_info:
         const _caHJq;
         const 4489;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _saFN4() //  []
         { []
         }
     {offset
       saFN4: // global
           I64[Sp - 8] = block_caHGs_info;
           R1 = P64[Sp + 32];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHKh; else goto caHGt;
       uaHKh: // global
           call _caHGs(R1) args: 0, res: 0, upd: 0;
       caHGt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _caHGs() //  [R1]
         { []
         }
     {offset
       caHGs: // global
           if (R1 & 7 == 1) goto caHIK; else goto caHIR;
       caHIK: // global
           I64[Sp + 48] = 0;
           I64[Sp + 40] = 0;
           call _caHHv() args: 0, res: 0, upd: 0;
       caHIR: // global
           _saFNA::P64 = P64[P64[Sp + 48] + 8];
           I64[Sp] = block_caHGy_info;
           _saFNx::P64 = P64[R1 + 6];
           R1 = _saFNA::P64;
           P64[Sp + 48] = _saFNx::P64;
           if (R1 & 7 != 0) goto uaHK0; else goto caHGz;
       uaHK0: // global
           call _caHGy(R1) args: 0, res: 0, upd: 0;
       caHGz: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHGs_info" {
     block_caHGs_info:
         const _caHGs;
         const 1542;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHGy() //  [R1]
         { []
         }
     {offset
       caHGy: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto caHIU; else goto caHIT;
       caHIU: // global
           HpAlloc = 16;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHIT: // global
           _saFM5::I64 = I64[Sp + 32];
           _saFNC::P64 = P64[R1 + 7];
           _saFNK::P64 = P64[(_saFNC::P64 + 24) + (_saFM5::I64 & (I64[_saFNC::P64 + 8] - 1) << 3)];
           I64[Hp - 8] = go_saFNL_info;
           I64[Hp] = _saFM5::I64;
           I64[Sp] = block_caHIL_info;
           R2 = _saFNK::P64;
           R1 = Hp - 7;
           call go_saFNL_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHGy_info" {
     block_caHGy_info:
         const _caHGy;
         const 1542;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHIL() //  [R1]
         { []
         }
     {offset
       caHIL: // global
           I64[Sp] = block_caHIP_info;
           R2 = P64[Sp + 48];
           P64[Sp + 48] = R1;
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHIL_info" {
     block_caHIL_info:
         const _caHIL;
         const 1542;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHIP() //  [R1]
         { []
         }
     {offset
       caHIP: // global
           I64[Sp] = block_caHIZ_info;
           _saFNT::I64 = R1;
           R1 = P64[Sp + 48];
           I64[Sp + 48] = _saFNT::I64;
           if (R1 & 7 != 0) goto uaHKc; else goto caHJ1;
       uaHKc: // global
           call _caHIZ(R1) args: 0, res: 0, upd: 0;
       caHJ1: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHIP_info" {
     block_caHIP_info:
         const _caHIP;
         const 1542;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHIZ() //  [R1]
         { []
         }
     {offset
       caHIZ: // global
           if (R1 & 7 == 1) goto caHJ7; else goto caHJc;
       caHJ7: // global
           I64[Sp + 48] = I64[Sp + 48];
           I64[Sp + 40] = 0;
           call _caHHv() args: 0, res: 0, upd: 0;
       caHJc: // global
           I64[Sp] = block_caHJa_info;
           R2 = P64[R1 + 6];
           call GHC.Event.Manager.$weventsOf_entry(R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHIZ_info" {
     block_caHIZ_info:
         const _caHIZ;
         const 3590;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHJa() //  [R1]
         { []
         }
     {offset
       caHJa: // global
           I64[Sp + 40] = R1;
           I64[Sp + 48] = I64[Sp + 48];
           call _caHHv() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHJa_info" {
     block_caHJa_info:
         const _caHJa;
         const 3590;
         const 4294967326;
         const SaFU9_srt+352;
 },
 _caHHv() //  []
         { []
         }
     {offset
       caHHv: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHHA; else goto caHHz;
       caHHA: // global
           HpAlloc = 32;
           I64[Sp] = block_caHHv_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caHHz: // global
           _saFNa::I64 = I64[Sp + 40];
           if (I64[Sp + 48] == _saFNa::I64) goto caHHE; else goto caHIG;
       caHHE: // global
           Hp = Hp - 32;
           R1 = GHC.Types.False_closure+1;
           Sp = Sp + 56;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       caHIG: // global
           I64[Hp - 24] = GHC.Int.I32#_con_info;
           I64[Hp - 16] = I64[Sp + 32];
           _caHHH::P64 = Hp - 23;
           if (_saFNa::I64 & 8 != 0) goto caHIE; else goto caHIF;
       caHIF: // global
           _saFNp::I64 = _saFNa::I64 & 7;
           if (_saFNp::I64 == 0) goto caHIE; else goto caHIr;
       caHIE: // global
           Hp = Hp - 16;
           P64[Sp + 24] = _caHHH::P64;
           call _caHHL() args: 0, res: 0, upd: 0;
       caHIr: // global
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = _saFNp::I64;
           _saFM2::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caHIn_info;
           R4 = Hp - 7;
           R3 = _caHHH::P64;
           R2 = P64[Sp + 8];
           R1 = _saFM2::P64;
           Sp = Sp + 24;
           call stg_ap_pppv_fast(R4, R3, R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHHv_info" {
     block_caHHv_info:
         const _caHHv;
         const 3590;
         const 4294967326;
         const SaFU9_srt+352;
 },
 _caHIn() //  [R1]
         { []
         }
     {offset
       caHIn: // global
           I64[Sp] = block_caHIp_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaHK9; else goto caHIt;
       uaHK9: // global
           call _caHIp(R1) args: 0, res: 0, upd: 0;
       caHIt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHIn_info" {
     block_caHIn_info:
         const _caHIn;
         const 451;
         const 4294967326;
         const SaFU9_srt+352;
 },
 _caHIp() //  [R1]
         { []
         }
     {offset
       caHIp: // global
           if (R1 & 7 == 1) goto uaHJU; else goto uaHJV;
       uaHJU: // global
           Sp = Sp + 8;
           call _caHIz() args: 0, res: 0, upd: 0;
       uaHJV: // global
           Sp = Sp + 32;
           call _caHID() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHIp_info" {
     block_caHIp_info:
         const _caHIp;
         const 451;
         const 4294967326;
         const SaFU9_srt+352;
 },
 _caHHL() //  []
         { []
         }
     {offset
       caHHL: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto caHHP; else goto caHHO;
       caHHP: // global
           HpAlloc = 32;
           I64[Sp] = block_caHHL_info;
           call stg_gc_noregs() args: 8, res: 8, upd: 8;
       caHHO: // global
           I64[Hp - 24] = GHC.Types.I#_con_info;
           I64[Hp - 16] = I64[Sp + 40] & 7;
           I64[Hp - 8] = GHC.Types.I#_con_info;
           I64[Hp] = I64[Sp + 48] & 7;
           _caHHH::P64 = P64[Sp + 24];
           I64[Sp + 24] = block_caHHY_info;
           R5 = Hp - 23;
           R4 = Hp - 7;
           R3 = _caHHH::P64;
           R2 = P64[Sp + 8];
           R1 = P64[Sp + 16];
           I64[Sp + 16] = stg_ap_v_info;
           Sp = Sp + 16;
           call stg_ap_pppp_fast(R5, R4, R3, R2, R1) args: 16, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHHL_info" {
     block_caHHL_info:
         const _caHHL;
         const 3590;
         const 4294967326;
         const SaFU9_srt+352;
 },
 _caHHY() //  [R1]
         { []
         }
     {offset
       caHHY: // global
           I64[Sp] = block_caHI0_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaHK6; else goto caHI2;
       uaHK6: // global
           call _caHI0(R1) args: 0, res: 0, upd: 0;
       caHI2: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHHY_info" {
     block_caHHY_info:
         const _caHHY;
         const 451;
         const 4294967326;
         const SaFU9_srt+352;
 },
 _caHI0() //  [R1]
         { []
         }
     {offset
       caHI0: // global
           if (R1 & 7 == 1) goto uaHJX; else goto uaHJY;
       uaHJX: // global
           Sp = Sp + 8;
           call _caHIz() args: 0, res: 0, upd: 0;
       uaHJY: // global
           Sp = Sp + 32;
           call _caHID() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_caHI0_info" {
     block_caHI0_info:
         const _caHI0;
         const 451;
         const 4294967326;
         const SaFU9_srt+352;
 },
 _caHIz() //  []
         { []
         }
     {offset
       caHIz: // global
           R2 = I64[Sp];
           Sp = Sp + 24;
           call lvl15_raAun_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 _caHID() //  []
         { []
         }
     {offset
       caHID: // global
           R1 = GHC.Types.True_closure+2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 io_saFO7_entry() //  [R1, R2]
         { []
         }
     {offset
       caHKq: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHKr; else goto caHKs;
       caHKr: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHKs: // global
           I64[Sp - 16] = block_caHKn_info;
           _saFMk::P64 = P64[R1 + 6];
           R1 = R2;
           P64[Sp - 8] = _saFMk::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHKw; else goto caHKo;
       uaHKw: // global
           call _caHKn(R1) args: 0, res: 0, upd: 0;
       caHKo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . io_saFO7_info" {
     io_saFO7_info:
         const io_saFO7_entry;
         const 1;
         const 35188667056137;
         const 8589934597;
         const SaFU9_srt+248;
 },
 _caHKn() //  [R1]
         { []
         }
     {offset
       caHKn: // global
           R2 = P64[R1 + 7];
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call $wio_saFMk_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHKn_info" {
     block_caHKn_info:
         const _caHKn;
         const 1;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 sat_saFOl_entry() //  [R1, R2]
         { []
         }
     {offset
       caHKI: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHKJ; else goto caHKK;
       caHKJ: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHKK: // global
           I64[Sp - 16] = block_caHKG_info;
           _saFOi::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFOi::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOl_info" {
     sat_saFOl_info:
         const sat_saFOl_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caHKG() //  []
         { []
         }
     {offset
       caHKG: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHKG_info" {
     block_caHKG_info:
         const _caHKG;
         const 1;
         const 30;
 },
 sat_saFOg_entry() //  [R1]
         { []
         }
     {offset
       caHKR: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFO7_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOg_info" {
     sat_saFOg_info:
         const sat_saFOg_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFOh_entry() //  [R1]
         { []
         }
     {offset
       caHKZ: // global
           R1 = P64[R1 + 7];
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOh_info" {
     sat_saFOh_info:
         const sat_saFOh_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFOz_entry() //  [R1, R2]
         { []
         }
     {offset
       caHLh: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHLi; else goto caHLj;
       caHLi: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHLj: // global
           I64[Sp - 16] = block_caHLf_info;
           _saFOw::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFOw::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOz_info" {
     sat_saFOz_info:
         const sat_saFOz_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caHLf() //  []
         { []
         }
     {offset
       caHLf: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHLf_info" {
     block_caHLf_info:
         const _caHLf;
         const 1;
         const 30;
 },
 sat_saFOu_entry() //  [R1]
         { []
         }
     {offset
       caHLq: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFO7_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOu_info" {
     sat_saFOu_info:
         const sat_saFOu_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFOv_entry() //  [R1]
         { []
         }
     {offset
       caHLy: // global
           R1 = P64[R1 + 7];
           call stg_unmaskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOv_info" {
     sat_saFOv_info:
         const sat_saFOv_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 sat_saFOE_entry() //  [R1]
         { []
         }
     {offset
       caHLF: // global
           if ((Sp + -24) < SpLim) (likely: False) goto caHLG; else goto caHLH;
       caHLG: // global
           R1 = R1;
           call (stg_gc_fun)(R1) args: 8, res: 0, upd: 8;
       caHLH: // global
           I64[Sp - 24] = block_caHL8_info;
           _saFMj::P64 = P64[R1 + 7];
           _saFO7::P64 = P64[R1 + 15];
           R1 = _saFMj::P64;
           P64[Sp - 16] = _saFMj::P64;
           P64[Sp - 8] = _saFO7::P64;
           Sp = Sp - 24;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOE_info" {
     sat_saFOE_info:
         const sat_saFOE_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaFU9_srt+248;
 },
 _caHL8() //  [R1]
         { []
         }
     {offset
       caHL8: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caHLK; else goto caHLJ;
       caHLK: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHLJ: // global
           I64[Hp - 56] = sat_saFOz_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFOu_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFOv_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caHLB_info;
           R2 = Hp - 54;
           _saFOt::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFOt::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHL8_info" {
     block_caHL8_info:
         const _caHL8;
         const 2;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHLB() //  [R1]
         { []
         }
     {offset
       caHLB: // global
           _saFMj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caHLD_info;
           R2 = P64[Sp + 16];
           _saFOC::P64 = R1;
           R1 = _saFMj::P64;
           P64[Sp + 16] = _saFOC::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHLB_info" {
     block_caHLB_info:
         const _caHLB;
         const 2;
         const 30;
 },
 _caHLD() //  []
         { []
         }
     {offset
       caHLD: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHLD_info" {
     block_caHLD_info:
         const _caHLD;
         const 1;
         const 30;
 },
 sat_saFON_entry() //  [R1, R2]
         { []
         }
     {offset
       caHLX: // global
           if ((Sp + -16) < SpLim) (likely: False) goto caHLY; else goto caHLZ;
       caHLY: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       caHLZ: // global
           I64[Sp - 16] = block_caHLV_info;
           _saFOK::P64 = R2;
           R2 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp - 8] = _saFOK::P64;
           Sp = Sp - 16;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFON_info" {
     sat_saFON_info:
         const sat_saFON_entry;
         const 2;
         const 11;
         const 8589934597;
 },
 _caHLV() //  []
         { []
         }
     {offset
       caHLV: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call stg_raiseIO#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHLV_info" {
     block_caHLV_info:
         const _caHLV;
         const 1;
         const 30;
 },
 sat_saFOI_entry() //  [R1]
         { []
         }
     {offset
       caHM6: // global
           R2 = P64[R1 + 15];
           R1 = P64[R1 + 7];
           call io_saFO7_entry(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOI_info" {
     sat_saFOI_info:
         const sat_saFOI_entry;
         const 2;
         const 35188667056139;
         const 4294967299;
         const SaFU9_srt+248;
 },
 sat_saFOJ_entry() //  [R1]
         { []
         }
     {offset
       caHMe: // global
           R1 = P64[R1 + 7];
           call stg_maskUninterruptible#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . sat_saFOJ_info" {
     sat_saFOJ_info:
         const sat_saFOJ_entry;
         const 1;
         const 9;
         const 4294967299;
 },
 GHC.Event.Manager.unregisterFd2_entry() //  [R2, R3]
         { []
         }
     {offset
       caHMh: // global
           if ((Sp + -88) < SpLim) (likely: False) goto caHMi; else goto caHMj;
       caHMi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.unregisterFd2_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHMj: // global
           I64[Sp - 16] = block_caHE8_info;
           R1 = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHN1; else goto caHE9;
       uaHN1: // global
           call _caHE8(R1) args: 0, res: 0, upd: 0;
       caHE9: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd2_info" {
     GHC.Event.Manager.unregisterFd2_info:
         const GHC.Event.Manager.unregisterFd2_entry;
         const 0;
         const 6917810506912759822;
         const 12884901903;
         const SaFU9_srt+120;
 },
 _caHE8() //  [R1]
         { []
         }
     {offset
       caHE8: // global
           I64[Sp - 24] = block_caHEd_info;
           _saFLH::P64 = P64[R1 + 7];
           _saFLJ::P64 = P64[R1 + 23];
           _saFLL::P64 = P64[R1 + 31];
           R1 = P64[R1 + 15];
           P64[Sp - 16] = _saFLJ::P64;
           P64[Sp - 8] = _saFLL::P64;
           P64[Sp] = _saFLH::P64;
           Sp = Sp - 24;
           if (R1 & 7 != 0) goto uaHMW; else goto caHEe;
       uaHMW: // global
           call _caHEd(R1) args: 0, res: 0, upd: 0;
       caHEe: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHE8_info" {
     block_caHE8_info:
         const _caHE8;
         const 1;
         const 2306124488485371934;
         const SaFU9_srt+120;
 },
 _caHEd() //  [R1]
         { []
         }
     {offset
       caHEd: // global
           I64[Sp - 8] = block_caHEi_info;
           _saFLU::P64 = R1;
           _saFLV::I64 = I64[R1 + 7];
           R1 = P64[Sp + 8];
           I64[Sp] = _saFLV::I64;
           P64[Sp + 8] = _saFLU::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHMX; else goto caHEj;
       uaHMX: // global
           call _caHEi(R1) args: 0, res: 0, upd: 0;
       caHEj: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHEd_info" {
     block_caHEd_info:
         const _caHEd;
         const 4;
         const 2306124488485371934;
         const SaFU9_srt+120;
 },
 _caHEi() //  [R1]
         { []
         }
     {offset
       caHEi: // global
           I64[Sp - 8] = block_caHEn_info;
           _saFLW::P64 = R1;
           _saFLX::I64 = I64[R1 + 7];
           R1 = P64[Sp + 32];
           I64[Sp] = _saFLX::I64;
           P64[Sp + 32] = _saFLW::P64;
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uaHMY; else goto caHEo;
       uaHMY: // global
           call _caHEn(R1) args: 0, res: 0, upd: 0;
       caHEo: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHEi_info" {
     block_caHEi_info:
         const _caHEi;
         const 69;
         const 2306124488485371934;
         const SaFU9_srt+120;
 },
 _caHEn() //  [R1]
         { []
         }
     {offset
       caHEn: // global
           I64[Sp - 16] = block_caHEs_info;
           _saFLZ::P64 = P64[R1 + 7];
           _saFM1::P64 = P64[R1 + 23];
           _saFM2::P64 = P64[R1 + 31];
           R1 = P64[Sp + 48];
           P64[Sp - 8] = _saFM2::P64;
           P64[Sp] = _saFM1::P64;
           P64[Sp + 48] = _saFLZ::P64;
           Sp = Sp - 16;
           if (R1 & 7 != 0) goto uaHMZ; else goto caHEt;
       uaHMZ: // global
           call _caHEs(R1) args: 0, res: 0, upd: 0;
       caHEt: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHEn_info" {
     block_caHEn_info:
         const _caHEn;
         const 198;
         const 2306124488485371934;
         const SaFU9_srt+120;
 },
 _caHEs() //  [R1]
         { []
         }
     {offset
       caHEs: // global
           I64[Sp - 16] = block_caHEx_info;
           I64[Sp - 8] = I64[R1 + 15];
           I64[Sp] = I64[R1 + 7];
           Sp = Sp - 16;
           call stg_getMaskingState#() args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHEs_info" {
     block_caHEs_info:
         const _caHEs;
         const 776;
         const 2306124488485371934;
         const SaFU9_srt+120;
 },
 _caHEx() //  [R1]
         { []
         }
     {offset
       caHEx: // global
           _saFLU::P64 = P64[Sp + 56];
           _saFLV::I64 = I64[Sp + 48];
           _saFLW::P64 = P64[Sp + 72];
           _saFMa::I64 = I64[Sp + 16] & 31;
           if (%MO_S_Gt_W64(_saFLV::I64,
                            _saFMa::I64)) goto caHMt; else goto caHMU;
       caHMU: // global
           if (%MO_S_Gt_W64(_saFMa::I64,
                            I64[Sp + 40])) goto caHMt; else goto caHMu;
       caHMt: // global
           R4 = _saFMa::I64;
           R3 = _saFLU::P64;
           R2 = _saFLW::P64;
           Sp = Sp + 88;
           call lvl3_raAu8_entry(R4, R3, R2) args: 8, res: 0, upd: 8;
       caHMu: // global
           _saFMh::P64 = P64[P64[Sp + 64] + ((_saFMa::I64 - _saFLV::I64 << 3) + 24)];
           I64[Sp] = block_caHEN_info;
           _saFM9::I64 = R1;
           R1 = _saFMh::P64;
           I64[Sp + 72] = _saFM9::I64;
           if (R1 & 7 != 0) goto uaHN0; else goto caHEO;
       uaHN0: // global
           call _caHEN(R1) args: 0, res: 0, upd: 0;
       caHEO: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHEx_info" {
     block_caHEx_info:
         const _caHEx;
         const 3274;
         const 2306124488485371934;
         const SaFU9_srt+120;
 },
 _caHEN() //  [R1]
         { []
         }
     {offset
       caHEN: // global
           Hp = Hp + 88;
           if (Hp > HpLim) (likely: False) goto caHMx; else goto caHMw;
       caHMx: // global
           HpAlloc = 88;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHMw: // global
           _saFMj::P64 = P64[R1 + 7];
           I64[Hp - 80] = $wio_saFMk_info;
           P64[Hp - 72] = P64[Sp + 80];
           P64[Hp - 64] = P64[Sp + 32];
           P64[Hp - 56] = P64[Sp + 24];
           I64[Hp - 48] = I64[Sp + 16];
           I64[Hp - 40] = I64[Sp + 8];
           I64[Hp - 32] = io_saFO7_info;
           P64[Hp - 24] = Hp - 78;
           _caHKi::P64 = Hp - 30;
           _saFOc::I64 = I64[Sp + 72];
           if (_saFOc::I64 != 0) goto uaHMV; else goto caHMJ;
       uaHMV: // global
           if (_saFOc::I64 != 1) goto caHMC; else goto caHMN;
       caHMC: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caHKz_info;
           R1 = _saFMj::P64;
           P64[Sp + 72] = _saFMj::P64;
           P64[Sp + 80] = _caHKi::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caHMN: // global
           Hp = Hp - 24;
           I64[Sp + 64] = block_caHLO_info;
           R1 = _saFMj::P64;
           P64[Sp + 72] = _saFMj::P64;
           P64[Sp + 80] = _caHKi::P64;
           Sp = Sp + 64;
           call stg_takeMVar#(R1) args: 8, res: 8, upd: 8;
       caHMJ: // global
           I64[Hp - 16] = sat_saFOE_info;
           P64[Hp - 8] = _saFMj::P64;
           P64[Hp] = _caHKi::P64;
           R1 = Hp - 15;
           Sp = Sp + 88;
           call stg_maskAsyncExceptions#(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHEN_info" {
     block_caHEN_info:
         const _caHEN;
         const 31946;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHKz() //  [R1]
         { []
         }
     {offset
       caHKz: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caHMF; else goto caHME;
       caHMF: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHME: // global
           I64[Hp - 56] = sat_saFOl_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFOg_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFOh_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caHMy_info;
           R2 = Hp - 54;
           _saFOf::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFOf::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHKz_info" {
     block_caHKz_info:
         const _caHKz;
         const 2;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHMy() //  [R1]
         { []
         }
     {offset
       caHMy: // global
           _saFMj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caHMA_info;
           R2 = P64[Sp + 16];
           _saFOo::P64 = R1;
           R1 = _saFMj::P64;
           P64[Sp + 16] = _saFOo::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHMy_info" {
     block_caHMy_info:
         const _caHMy;
         const 2;
         const 30;
 },
 _caHMA() //  []
         { []
         }
     {offset
       caHMA: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHMA_info" {
     block_caHMA_info:
         const _caHMA;
         const 1;
         const 30;
 },
 _caHLO() //  [R1]
         { []
         }
     {offset
       caHLO: // global
           Hp = Hp + 64;
           if (Hp > HpLim) (likely: False) goto caHMQ; else goto caHMP;
       caHMQ: // global
           HpAlloc = 64;
           R1 = R1;
           call stg_gc_unpt_r1(R1) args: 8, res: 8, upd: 8;
       caHMP: // global
           I64[Hp - 56] = sat_saFON_info;
           P64[Hp - 48] = P64[Sp + 8];
           P64[Hp - 40] = R1;
           I64[Hp - 32] = sat_saFOI_info;
           P64[Hp - 24] = P64[Sp + 16];
           P64[Hp - 16] = R1;
           I64[Hp - 8] = sat_saFOJ_info;
           P64[Hp] = Hp - 31;
           I64[Sp] = block_caHMK_info;
           R2 = Hp - 54;
           _saFOH::P64 = R1;
           R1 = Hp - 7;
           P64[Sp + 16] = _saFOH::P64;
           call stg_catch#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHLO_info" {
     block_caHLO_info:
         const _caHLO;
         const 2;
         const 35188667056158;
         const SaFU9_srt+248;
 },
 _caHMK() //  [R1]
         { []
         }
     {offset
       caHMK: // global
           _saFMj::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_caHMM_info;
           R2 = P64[Sp + 16];
           _saFOQ::P64 = R1;
           R1 = _saFMj::P64;
           P64[Sp + 16] = _saFOQ::P64;
           Sp = Sp + 8;
           call stg_putMVar#(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHMK_info" {
     block_caHMK_info:
         const _caHMK;
         const 2;
         const 30;
 },
 _caHMM() //  []
         { []
         }
     {offset
       caHMM: // global
           R1 = P64[Sp + 8];
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHMM_info" {
     block_caHMM_info:
         const _caHMM;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.158211431 UTC

[section ""data" . GHC.Event.Manager.unregisterFd__closure" {
     GHC.Event.Manager.unregisterFd__closure:
         const GHC.Event.Manager.unregisterFd__info;
         const 0;
 },
 GHC.Event.Manager.unregisterFd__entry() //  [R2, R3]
         { []
         }
     {offset
       caHT1: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd__info" {
     GHC.Event.Manager.unregisterFd__info:
         const GHC.Event.Manager.unregisterFd__entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SaFU9_srt+360;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.162485164 UTC

[section ""data" . GHC.Event.Manager.unregisterFd1_closure" {
     GHC.Event.Manager.unregisterFd1_closure:
         const GHC.Event.Manager.unregisterFd1_info;
         const 0;
 },
 GHC.Event.Manager.unregisterFd1_entry() //  [R2, R3]
         { []
         }
     {offset
       caHTh: // global
           if ((Sp + -8) < SpLim) (likely: False) goto caHTi; else goto caHTj;
       caHTi: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.unregisterFd1_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHTj: // global
           I64[Sp - 8] = block_caHTc_info;
           R3 = R3;
           R2 = R2;
           Sp = Sp - 8;
           call GHC.Event.Manager.unregisterFd2_entry(R3,
                                                      R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd1_info" {
     GHC.Event.Manager.unregisterFd1_info:
         const GHC.Event.Manager.unregisterFd1_entry;
         const 0;
         const 12884901902;
         const 12884901903;
         const SaFU9_srt+360;
 },
 _caHTc() //  [R1]
         { []
         }
     {offset
       caHTc: // global
           I64[Sp] = block_caHTe_info;
           R1 = R1;
           if (R1 & 7 != 0) goto uaHTo; else goto caHTf;
       uaHTo: // global
           call _caHTe() args: 0, res: 0, upd: 0;
       caHTf: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_caHTc_info" {
     block_caHTc_info:
         const _caHTc;
         const 0;
         const 30;
 },
 _caHTe() //  []
         { []
         }
     {offset
       caHTe: // global
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_caHTe_info" {
     block_caHTe_info:
         const _caHTe;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.169012343 UTC

[section ""data" . GHC.Event.Manager.unregisterFd_closure" {
     GHC.Event.Manager.unregisterFd_closure:
         const GHC.Event.Manager.unregisterFd_info;
         const 0;
 },
 GHC.Event.Manager.unregisterFd_entry() //  [R2, R3]
         { []
         }
     {offset
       caHTJ: // global
           R3 = R3;
           R2 = R2;
           call GHC.Event.Manager.unregisterFd1_entry(R3,
                                                      R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.unregisterFd_info" {
     GHC.Event.Manager.unregisterFd_info:
         const GHC.Event.Manager.unregisterFd_entry;
         const 0;
         const 4294967310;
         const 12884901903;
         const SaFU9_srt+368;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.173709144 UTC

[section ""data" . GHC.Event.Manager.EventManager_closure" {
     GHC.Event.Manager.EventManager_closure:
         const GHC.Event.Manager.EventManager_info;
 },
 GHC.Event.Manager.EventManager_slow() //  [R1]
         { []
         }
     {offset
       caHTR: // global
           R6 = P64[Sp + 32];
           R5 = I64[Sp + 24];
           R4 = P64[Sp + 16];
           R3 = P64[Sp + 8];
           R2 = P64[Sp];
           R1 = R1;
           Sp = Sp + 40;
           call GHC.Event.Manager.EventManager_entry(R6,
                                                     R5,
                                                     R4,
                                                     R3,
                                                     R2,
                                                     R1) args: 72, res: 0, upd: 8;
     }
 },
 GHC.Event.Manager.EventManager_entry() //  [R2, R3, R4, R5, R6]
         { []
         }
     {offset
       caHTW: // global
           Hp = Hp + 112;
           if (Hp > HpLim) (likely: False) goto caHU0; else goto caHTZ;
       caHU0: // global
           HpAlloc = 112;
           R1 = GHC.Event.Manager.EventManager_closure;
           P64[Sp - 40] = R2;
           P64[Sp - 32] = R3;
           P64[Sp - 24] = R4;
           I64[Sp - 16] = R5;
           P64[Sp - 8] = R6;
           Sp = Sp - 40;
           call (stg_gc_fun)(R1) args: 112, res: 0, upd: 8;
       caHTZ: // global
           I64[Hp - 104] = GHC.Event.Manager.EventManager_con_info;
           P64[Hp - 96] = R2;
           P64[Hp - 88] = R3;
           P64[Hp - 80] = R4;
           P64[Hp - 72] = R6;
           P64[Hp - 64] = P64[Sp];
           P64[Hp - 56] = P64[Sp + 8];
           P64[Hp - 48] = P64[Sp + 40];
           P64[Hp - 40] = P64[Sp + 48];
           P64[Hp - 32] = P64[Sp + 56];
           I64[Hp - 24] = R5;
           I64[Hp - 16] = I64[Sp + 16];
           I64[Hp - 8] = I64[Sp + 24];
           I64[Hp] = I64[Sp + 32];
           R1 = Hp - 103;
           Sp = Sp + 64;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.EventManager_info" {
     GHC.Event.Manager.EventManager_info:
         const GHC.Event.Manager.EventManager_entry;
         const 0;
         const 14;
         const 55834574848;
         const 0;
         const 57869;
         const GHC.Event.Manager.EventManager_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.178421991 UTC

[section ""data" . GHC.Event.Manager.Created_closure" {
     GHC.Event.Manager.Created_closure:
         const GHC.Event.Manager.Created_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.180646447 UTC

[section ""data" . GHC.Event.Manager.Running_closure" {
     GHC.Event.Manager.Running_closure:
         const GHC.Event.Manager.Running_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.182351996 UTC

[section ""data" . GHC.Event.Manager.Dying_closure" {
     GHC.Event.Manager.Dying_closure:
         const GHC.Event.Manager.Dying_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.183980413 UTC

[section ""data" . GHC.Event.Manager.Releasing_closure" {
     GHC.Event.Manager.Releasing_closure:
         const GHC.Event.Manager.Releasing_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.185999328 UTC

[section ""data" . GHC.Event.Manager.Finished_closure" {
     GHC.Event.Manager.Finished_closure:
         const GHC.Event.Manager.Finished_con_info;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.188269962 UTC

[section ""data" . GHC.Event.Manager.FdKey_closure" {
     GHC.Event.Manager.FdKey_closure:
         const GHC.Event.Manager.FdKey_info;
 },
 GHC.Event.Manager.FdKey_entry() //  [R2, R3]
         { []
         }
     {offset
       caHUr: // global
           Hp = Hp + 24;
           if (Hp > HpLim) (likely: False) goto caHUv; else goto caHUu;
       caHUv: // global
           HpAlloc = 24;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Event.Manager.FdKey_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       caHUu: // global
           I64[Hp - 16] = GHC.Event.Manager.FdKey_con_info;
           I64[Hp - 8] = R2;
           I64[Hp] = R3;
           R1 = Hp - 15;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdKey_info" {
     GHC.Event.Manager.FdKey_info:
         const GHC.Event.Manager.FdKey_entry;
         const 0;
         const 14;
         const 8589934604;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.192603722 UTC

[section ""data" . GHC.Event.Manager.FdData_closure" {
     GHC.Event.Manager.FdData_closure:
         const GHC.Event.Manager.FdData_info;
 },
 GHC.Event.Manager.FdData_slow() //  [R1]
         { []
         }
     {offset
       caHUD: // global
           R5 = P64[Sp + 24];
           R4 = I64[Sp + 16];
           R3 = I64[Sp + 8];
           R2 = I64[Sp];
           R1 = R1;
           Sp = Sp + 32;
           call GHC.Event.Manager.FdData_entry(R5,
                                               R4,
                                               R3,
                                               R2,
                                               R1) args: 8, res: 0, upd: 8;
     }
 },
 GHC.Event.Manager.FdData_entry() //  [R2, R3, R4, R5]
         { []
         }
     {offset
       caHUI: // global
           Hp = Hp + 40;
           if (Hp > HpLim) (likely: False) goto caHUM; else goto caHUL;
       caHUM: // global
           HpAlloc = 40;
           R1 = GHC.Event.Manager.FdData_closure;
           I64[Sp - 32] = R2;
           I64[Sp - 24] = R3;
           I64[Sp - 16] = R4;
           P64[Sp - 8] = R5;
           Sp = Sp - 32;
           call (stg_gc_fun)(R1) args: 40, res: 0, upd: 8;
       caHUL: // global
           I64[Hp - 32] = GHC.Event.Manager.FdData_con_info;
           P64[Hp - 24] = R5;
           I64[Hp - 16] = R2;
           I64[Hp - 8] = R3;
           I64[Hp] = R4;
           R1 = Hp - 31;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdData_info" {
     GHC.Event.Manager.FdData_info:
         const GHC.Event.Manager.FdData_entry;
         const 0;
         const 14;
         const 17179869184;
         const 0;
         const 452;
         const GHC.Event.Manager.FdData_slow;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.197384754 UTC

[section ""cstring" . iaHUW_str" {
     iaHUW_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,69,118,101,110,116,77,97,110,97,103,101,114]
 },
 GHC.Event.Manager.EventManager_con_entry() //  [R1]
         { []
         }
     {offset
       caHUV: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.EventManager_con_info" {
     GHC.Event.Manager.EventManager_con_info:
         const GHC.Event.Manager.EventManager_con_entry;
         const 17179869193;
         const 1;
         const iaHUW_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.200596557 UTC

[section ""relreadonly" . GHC.Event.Manager.State_closure_tbl" {
     GHC.Event.Manager.State_closure_tbl:
         const GHC.Event.Manager.Created_closure+1;
         const GHC.Event.Manager.Running_closure+2;
         const GHC.Event.Manager.Dying_closure+3;
         const GHC.Event.Manager.Releasing_closure+4;
         const GHC.Event.Manager.Finished_closure+5;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.202508492 UTC

[section ""cstring" . iaHV4_str" {
     iaHV4_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,67,114,101,97,116,101,100]
 },
 GHC.Event.Manager.Created_con_entry() //  [R1]
         { []
         }
     {offset
       caHV3: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Created_con_info" {
     GHC.Event.Manager.Created_con_info:
         const GHC.Event.Manager.Created_con_entry;
         const 4294967296;
         const 3;
         const iaHV4_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.205761532 UTC

[section ""cstring" . iaHVb_str" {
     iaHVb_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,82,117,110,110,105,110,103]
 },
 GHC.Event.Manager.Running_con_entry() //  [R1]
         { []
         }
     {offset
       caHVa: // global
           R1 = R1 + 2;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Running_con_info" {
     GHC.Event.Manager.Running_con_info:
         const GHC.Event.Manager.Running_con_entry;
         const 4294967296;
         const 4294967299;
         const iaHVb_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.208955966 UTC

[section ""cstring" . iaHVi_str" {
     iaHVi_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,68,121,105,110,103]
 },
 GHC.Event.Manager.Dying_con_entry() //  [R1]
         { []
         }
     {offset
       caHVh: // global
           R1 = R1 + 3;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Dying_con_info" {
     GHC.Event.Manager.Dying_con_info:
         const GHC.Event.Manager.Dying_con_entry;
         const 4294967296;
         const 8589934595;
         const iaHVi_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.212788491 UTC

[section ""cstring" . iaHVp_str" {
     iaHVp_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,82,101,108,101,97,115,105,110,103]
 },
 GHC.Event.Manager.Releasing_con_entry() //  [R1]
         { []
         }
     {offset
       caHVo: // global
           R1 = R1 + 4;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Releasing_con_info" {
     GHC.Event.Manager.Releasing_con_info:
         const GHC.Event.Manager.Releasing_con_entry;
         const 4294967296;
         const 12884901891;
         const iaHVp_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.216145503 UTC

[section ""cstring" . iaHVw_str" {
     iaHVw_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,70,105,110,105,115,104,101,100]
 },
 GHC.Event.Manager.Finished_con_entry() //  [R1]
         { []
         }
     {offset
       caHVv: // global
           R1 = R1 + 5;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.Finished_con_info" {
     GHC.Event.Manager.Finished_con_info:
         const GHC.Event.Manager.Finished_con_entry;
         const 4294967296;
         const 17179869187;
         const iaHVw_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.219391417 UTC

[section ""cstring" . iaHVD_str" {
     iaHVD_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,70,100,75,101,121]
 },
 GHC.Event.Manager.FdKey_con_entry() //  [R1]
         { []
         }
     {offset
       caHVC: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdKey_con_info" {
     GHC.Event.Manager.FdKey_con_info:
         const GHC.Event.Manager.FdKey_con_entry;
         const 8589934592;
         const 6;
         const iaHVD_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.222561801 UTC

[section ""cstring" . iaHVK_str" {
     iaHVK_str:
         I8[] [98,97,115,101,58,71,72,67,46,69,118,101,110,116,46,77,97,110,97,103,101,114,46,70,100,68,97,116,97]
 },
 GHC.Event.Manager.FdData_con_entry() //  [R1]
         { []
         }
     {offset
       caHVJ: // global
           R1 = R1 + 1;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Event.Manager.FdData_con_info" {
     GHC.Event.Manager.FdData_con_info:
         const GHC.Event.Manager.FdData_con_entry;
         const 12884901889;
         const 1;
         const iaHVK_str;
 }]


==================== Raw Cmm ====================
2018-03-16 16:05:42.225824291 UTC

[section ""relreadonly" . SaFU9_srt" {
     SaFU9_srt:
         const GHC.Event.Manager.$w$cshowsPrec1_closure;
         const GHC.Event.Manager.$fShowState1_closure;
         const GHC.Event.Manager.$fShowState3_closure;
         const GHC.Event.Manager.$fShowState5_closure;
         const GHC.Event.Manager.$fShowState7_closure;
         const GHC.Event.Manager.$fShowState9_closure;
         const GHC.Show.showCommaSpace1_closure;
         const GHC.Event.Manager.$w$cshowsPrec_closure;
         const GHC.Event.Manager.$fShowFdKey_$cshowsPrec_closure;
         const GHC.Event.Manager.$fShowFdKey_$cshow_closure;
         const GHC.Event.Manager.$fShowFdKey1_closure;
         const GHC.Event.EPoll.new1_closure;
         const GHC.Event.Manager.$fShowState_$cshow_closure;
         const GHC.Arr.$windexError_closure;
         const lvl2_raAu7_closure;
         const lvl3_raAu8_closure;
         const GHC.Event.Manager.callbackTableVar_closure;
         const GHC.Event.Control.$wsendWakeup_closure;
         const GHC.Event.Manager.release1_closure;
         const GHC.Event.Control.$wsendDie_closure;
         const GHC.Event.Manager.shutdown1_closure;
         const GHC.Err.errorWithoutStackTrace_closure;
         const $wlvl_raAub_closure;
         const lvl7_raAud_closure;
         const GHC.Arr.arrEleBottom_closure;
         const GHC.Event.Internal.evtNothing_closure;
         const GHC.Event.Internal.evtRead_closure;
         const GHC.Event.Control.newControl1_closure;
         const GHC.Event.Manager.new2_closure;
         const GHC.Event.Manager.new3_closure;
         const GHC.Event.Manager.new1_closure;
         const GHC.Event.Manager.$weventsOf_closure;
         const GHC.Event.Manager.closeFd_3_closure;
         const GHC.Event.Manager.eventsOf_closure;
         const GHC.Event.Manager.closeFd1_closure;
         const GHC.Event.Control.$wreadControlMessage_closure;
         const GHC.Event.Manager.loop5_closure;
         const GHC.Event.Manager.loop3_closure;
         const GHC.Event.Manager.loop1_closure;
         const GHC.Event.Manager.loop2_closure;
         const GHC.Event.Manager.$wcloseFd__closure;
         const GHC.Event.Manager.closeFd_1_closure;
         const registerFd1_raAuk_closure;
         const lvl14_raAum_closure;
         const lvl15_raAun_closure;
         const GHC.Event.Manager.unregisterFd2_closure;
         const GHC.Event.Manager.unregisterFd1_closure;
 }]

